Implementation smell,Namespace,Class,File,Method,Description
Long Method,IKVM.Reflection,DefaultBinder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Binder.cs,IsAllowedPrimitiveConversion,The method has 115 lines of code.
Long Method,IKVM.Reflection,Fusion,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Fusion.cs,ParseAssemblyName,The method has 109 lines of code.
Long Method,IKVM.Reflection.Emit,AssemblyBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\AssemblyBuilder.cs,SaveImpl,The method has 108 lines of code.
Long Method,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The method has 457 lines of code.
Long Method,IKVM.Reflection.Writer,ModuleWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ModuleWriter.cs,WriteModuleImpl,The method has 212 lines of code.
Long Method,IKVM.Reflection.Writer,PEWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\PEWriter.cs,WriteMSDOSHeader,The method has 132 lines of code.
Long Method,IKVM.Reflection.Writer,TextSection,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\TextSection.cs,Write,The method has 149 lines of code.
Long Method,IKVM.Reflection.Writer,VersionInfo,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\VersionInfo.cs,Write,The method has 252 lines of code.
Complex Method,IKVM.Reflection,AssemblyName,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\AssemblyName.cs,AssemblyName,Cyclomatic complexity of the method is 17
Complex Method,IKVM.Reflection,DefaultBinder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Binder.cs,IsAllowedPrimitiveConversion,Cyclomatic complexity of the method is 22
Complex Method,IKVM.Reflection,DefaultBinder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Binder.cs,SelectProperty,Cyclomatic complexity of the method is 16
Complex Method,IKVM.Reflection,CustomAttributeData,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\CustomAttributeData.cs,ReadFieldOrPropType,Cyclomatic complexity of the method is 19
Complex Method,IKVM.Reflection,CustomAttributeData,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\CustomAttributeData.cs,ReadFixedArg,Cyclomatic complexity of the method is 20
Complex Method,IKVM.Reflection,CustomAttributeData,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\CustomAttributeData.cs,ReadNamedArguments,Cyclomatic complexity of the method is 9
Complex Method,IKVM.Reflection,Fusion,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Fusion.cs,CompareAssemblyIdentityPure,Cyclomatic complexity of the method is 22
Complex Method,IKVM.Reflection,Fusion,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Fusion.cs,IsFrameworkAssembly,Cyclomatic complexity of the method is 39
Complex Method,IKVM.Reflection,Fusion,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Fusion.cs,ParseAssemblySimpleName,Cyclomatic complexity of the method is 15
Complex Method,IKVM.Reflection,Fusion,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Fusion.cs,ParseAssemblyName,Cyclomatic complexity of the method is 48
Complex Method,IKVM.Reflection,MarshalSpec,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\MarshalSpec.cs,GetMarshalAsAttribute,Cyclomatic complexity of the method is 26
Complex Method,IKVM.Reflection,MarshalSpec,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\MarshalSpec.cs,WriteMarshallingDescriptor,Cyclomatic complexity of the method is 17
Complex Method,IKVM.Reflection,MethodBody,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\MethodBody.cs,MethodBody,Cyclomatic complexity of the method is 10
Complex Method,IKVM.Reflection,MethodSignature,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\MethodSignature.cs,ReadSig,Cyclomatic complexity of the method is 14
Complex Method,IKVM.Reflection,MethodSignature,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\MethodSignature.cs,ReadStandAloneMethodSig,Cyclomatic complexity of the method is 31
Complex Method,IKVM.Reflection,Signature,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Signature.cs,ReadGenericInst,Cyclomatic complexity of the method is 12
Complex Method,IKVM.Reflection,Signature,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Signature.cs,ReadType,Cyclomatic complexity of the method is 30
Complex Method,IKVM.Reflection,Signature,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Signature.cs,WriteType,Cyclomatic complexity of the method is 31
Complex Method,IKVM.Reflection,Signature,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Signature.cs,WriteStandAloneMethodSig,Cyclomatic complexity of the method is 22
Complex Method,IKVM.Reflection,Type,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Type.cs,GetMemberByName,Cyclomatic complexity of the method is 15
Complex Method,IKVM.Reflection,Type,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Type.cs,GetMethods,Cyclomatic complexity of the method is 12
Complex Method,IKVM.Reflection,Type,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Type.cs,__GetSystemType,Cyclomatic complexity of the method is 20
Complex Method,IKVM.Reflection,Type,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Type.cs,GetTypeCode,Cyclomatic complexity of the method is 20
Complex Method,IKVM.Reflection,Type,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Type.cs,IsAssignableFrom,Cyclomatic complexity of the method is 10
Complex Method,IKVM.Reflection,Type,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Type.cs,GetInterfaceMap,Cyclomatic complexity of the method is 8
Complex Method,IKVM.Reflection,TypeNameParser,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\TypeNameParser.cs,Escape,Cyclomatic complexity of the method is 17
Complex Method,IKVM.Reflection,TypeNameParser,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\TypeNameParser.cs,GetType,Cyclomatic complexity of the method is 13
Complex Method,IKVM.Reflection,TypeNameParser,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\TypeNameParser.cs,Expand,Cyclomatic complexity of the method is 24
Complex Method,IKVM.Reflection,Universe,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Universe.cs,ImportImpl,Cyclomatic complexity of the method is 13
Complex Method,IKVM.Reflection,Universe,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Universe.cs,Load,Cyclomatic complexity of the method is 9
Complex Method,IKVM.Reflection.Emit,AssemblyBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\AssemblyBuilder.cs,SaveImpl,Cyclomatic complexity of the method is 23
Complex Method,IKVM.Reflection.Emit,CustomAttributeBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\CustomAttributeBuilder.cs,ToData,Cyclomatic complexity of the method is 8
Complex Method,IKVM.Reflection.Emit,ILGenerator,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ILGenerator.cs,Emit,Cyclomatic complexity of the method is 10
Complex Method,IKVM.Reflection.Emit,ILGenerator,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ILGenerator.cs,Emit,Cyclomatic complexity of the method is 40
Complex Method,IKVM.Reflection.Emit,ILGenerator,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ILGenerator.cs,WriteFatHeaderAndCode,Cyclomatic complexity of the method is 19
Complex Method,IKVM.Reflection.Emit,MethodBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\MethodBuilder.cs,SetDllImportPseudoCustomAttribute,Cyclomatic complexity of the method is 31
Complex Method,IKVM.Reflection.Emit,MethodBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\MethodBuilder.cs,SetMethodImplAttribute,Cyclomatic complexity of the method is 10
Complex Method,IKVM.Reflection.Emit,ModuleBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ModuleBuilder.cs,ApplyUnmanagedExports,Cyclomatic complexity of the method is 8
Complex Method,IKVM.Reflection.Emit,ModuleBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ModuleBuilder.cs,AddConstant,Cyclomatic complexity of the method is 17
Complex Method,IKVM.Reflection.Emit,ModuleBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ModuleBuilder.cs,ResolveMethod,Cyclomatic complexity of the method is 8
Complex Method,IKVM.Reflection.Emit,ModuleBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ModuleBuilder.cs,SetInterfaceImplementationCustomAttribute,Cyclomatic complexity of the method is 12
Complex Method,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,Cyclomatic complexity of the method is 226
Complex Method,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,TakesSingleByteArgument,Cyclomatic complexity of the method is 23
Complex Method,IKVM.Reflection.Emit,SignatureHelper,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\SignatureHelper.cs,GetSignature,Cyclomatic complexity of the method is 15
Complex Method,IKVM.Reflection.Emit,TypeBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\TypeBuilder.cs,SetStructLayoutPseudoCustomAttribute,Cyclomatic complexity of the method is 19
Complex Method,IKVM.Reflection.Emit,TypeBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\TypeBuilder.cs,CreateType,Cyclomatic complexity of the method is 9
Complex Method,IKVM.Reflection.Metadata,InterfaceImplTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,Cyclomatic complexity of the method is 14
Complex Method,IKVM.Reflection.Metadata,ConstantTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,Cyclomatic complexity of the method is 12
Complex Method,IKVM.Reflection.Metadata,ConstantTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,GetRawConstantValue,Cyclomatic complexity of the method is 21
Complex Method,IKVM.Reflection.Metadata,CustomAttributeTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,Cyclomatic complexity of the method is 60
Complex Method,IKVM.Reflection.Metadata,FieldMarshalTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,Cyclomatic complexity of the method is 9
Complex Method,IKVM.Reflection.Metadata,DeclSecurityTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,Cyclomatic complexity of the method is 12
Complex Method,IKVM.Reflection.Metadata,MethodSemanticsTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,Cyclomatic complexity of the method is 9
Complex Method,IKVM.Reflection.Metadata,GenericParamTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,Cyclomatic complexity of the method is 9
Complex Method,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasCustomAttribute,Cyclomatic complexity of the method is 23
Complex Method,IKVM.Reflection.Reader,MethodDefImpl,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\Method.cs,CreateDllImportPseudoCustomAttribute,Cyclomatic complexity of the method is 34
Complex Method,IKVM.Reflection.Reader,ModuleReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ModuleReader.cs,Read,Cyclomatic complexity of the method is 20
Complex Method,IKVM.Reflection.Reader,ModuleReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ModuleReader.cs,ResolveType,Cyclomatic complexity of the method is 20
Complex Method,IKVM.Reflection.Reader,ModuleReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ModuleReader.cs,ResolveMember,Cyclomatic complexity of the method is 9
Complex Method,IKVM.Reflection.Reader,ModuleReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ModuleReader.cs,GetMemberRef,Cyclomatic complexity of the method is 18
Complex Method,IKVM.Reflection.Reader,ModuleReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ModuleReader.cs,ResolveTypeMemberRef,Cyclomatic complexity of the method is 8
Complex Method,IKVM.Reflection.Reader,ModuleReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ModuleReader.cs,GetManifestResourceStream,Cyclomatic complexity of the method is 14
Complex Method,IKVM.Reflection.Reader,ModuleReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ModuleReader.cs,GetPEKind,Cyclomatic complexity of the method is 10
Complex Method,IKVM.Reflection.Reader,ModuleReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ModuleReader.cs,__GetPlaceholderAssemblyCustomAttributes,Cyclomatic complexity of the method is 16
Complex Method,IKVM.Reflection.Writer,ByteBuffer,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ByteBuffer.cs,WriteTypeDefOrRefEncoded,Cyclomatic complexity of the method is 11
Complex Method,IKVM.Reflection.Writer,TableHeap,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\Heaps.cs,WriteImpl,Cyclomatic complexity of the method is 10
Complex Method,IKVM.Reflection.Writer,MetadataWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\MetadataWriter.cs,WriteTypeDefOrRef,Cyclomatic complexity of the method is 14
Complex Method,IKVM.Reflection.Writer,MetadataWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\MetadataWriter.cs,WriteCustomAttributeType,Cyclomatic complexity of the method is 9
Complex Method,IKVM.Reflection.Writer,MetadataWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\MetadataWriter.cs,WriteResolutionScope,Cyclomatic complexity of the method is 15
Complex Method,IKVM.Reflection.Writer,MetadataWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\MetadataWriter.cs,WriteMemberRefParent,Cyclomatic complexity of the method is 18
Complex Method,IKVM.Reflection.Writer,MetadataWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\MetadataWriter.cs,WriteMethodDefOrRef,Cyclomatic complexity of the method is 9
Complex Method,IKVM.Reflection.Writer,MetadataWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\MetadataWriter.cs,WriteImplementation,Cyclomatic complexity of the method is 14
Complex Method,IKVM.Reflection.Writer,MetadataWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\MetadataWriter.cs,WriteMemberForwarded,Cyclomatic complexity of the method is 9
Complex Method,IKVM.Reflection.Writer,ModuleWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ModuleWriter.cs,WriteModuleImpl,Cyclomatic complexity of the method is 63
Complex Method,IKVM.Reflection.Writer,ModuleWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ModuleWriter.cs,StrongName,Cyclomatic complexity of the method is 8
Complex Method,IKVM.Reflection.Writer,TextSection,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\TextSection.cs,Write,Cyclomatic complexity of the method is 16
Complex Method,IKVM.Reflection.Writer,TextSection,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\TextSection.cs,WriteRelocations,Cyclomatic complexity of the method is 8
Complex Method,IKVM.Reflection.Writer,TextSection,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\TextSection.cs,WriteRelocationBlock,Cyclomatic complexity of the method is 10
Complex Method,IKVM.Reflection.Writer,VersionInfo,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\VersionInfo.cs,SetAttribute,Cyclomatic complexity of the method is 9
Long Parameter List,IKVM.Reflection,Binder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Binder.cs,BindToMethod,The method has 7 parameters.
Long Parameter List,IKVM.Reflection,Binder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Binder.cs,SelectProperty,The method has 5 parameters.
Long Parameter List,IKVM.Reflection,DefaultBinder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Binder.cs,SelectProperty,The method has 5 parameters.
Long Parameter List,IKVM.Reflection,CustomAttributeData,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\CustomAttributeData.cs,CustomAttributeData,The method has 5 parameters.
Long Parameter List,IKVM.Reflection,ExceptionHandlingClause,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\ExceptionHandlingClause.cs,ExceptionHandlingClause,The method has 8 parameters.
Long Parameter List,IKVM.Reflection,Fusion,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Fusion.cs,CompareAssemblyIdentityNative,The method has 5 parameters.
Long Parameter List,IKVM.Reflection,Fusion,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Fusion.cs,CompareAssemblyIdentity,The method has 6 parameters.
Long Parameter List,IKVM.Reflection,Fusion,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Fusion.cs,CompareAssemblyIdentityPure,The method has 5 parameters.
Long Parameter List,IKVM.Reflection,MarshalSpec,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\MarshalSpec.cs,AddNamedArgument,The method has 5 parameters.
Long Parameter List,IKVM.Reflection,MethodSignature,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\MethodSignature.cs,MethodSignature,The method has 5 parameters.
Long Parameter List,IKVM.Reflection,MethodSignature,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\MethodSignature.cs,MakeFromBuilder,The method has 5 parameters.
Long Parameter List,IKVM.Reflection,PackedCustomModifiers,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\MethodSignature.cs,CreateFromExternal,The method has 5 parameters.
Long Parameter List,IKVM.Reflection,MissingGenericMethodBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Missing.cs,SetSignature,The method has 6 parameters.
Long Parameter List,IKVM.Reflection,Module,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Module.cs,GetMethod,The method has 6 parameters.
Long Parameter List,IKVM.Reflection,Signature,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Signature.cs,WritePropertySig,The method has 7 parameters.
Long Parameter List,IKVM.Reflection,__StandAloneMethodSig,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\StandAloneMethodSig.cs,__StandAloneMethodSig,The method has 7 parameters.
Long Parameter List,IKVM.Reflection,Type,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Type.cs,GetMethod,The method has 5 parameters.
Long Parameter List,IKVM.Reflection,Type,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Type.cs,GetMethodWithBinder,The method has 5 parameters.
Long Parameter List,IKVM.Reflection,Type,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Type.cs,GetMethod,The method has 6 parameters.
Long Parameter List,IKVM.Reflection,Type,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Type.cs,GetConstructor,The method has 5 parameters.
Long Parameter List,IKVM.Reflection,Type,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Type.cs,GetProperty,The method has 6 parameters.
Long Parameter List,IKVM.Reflection,Type,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Type.cs,GetPropertyWithBinder,The method has 6 parameters.
Long Parameter List,IKVM.Reflection,Type,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Type.cs,__MakeArrayType,The method has 5 parameters.
Long Parameter List,IKVM.Reflection,Type,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Type.cs,__CreateMissingMethod,The method has 6 parameters.
Long Parameter List,IKVM.Reflection,Type,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Type.cs,CreateMissingMethod,The method has 5 parameters.
Long Parameter List,IKVM.Reflection,Type,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Type.cs,__CreateMissingMethod,The method has 8 parameters.
Long Parameter List,IKVM.Reflection,Type,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Type.cs,__CreateMissingProperty,The method has 6 parameters.
Long Parameter List,IKVM.Reflection,MultiArrayType,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Type.cs,Make,The method has 5 parameters.
Long Parameter List,IKVM.Reflection,MultiArrayType,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Type.cs,MultiArrayType,The method has 5 parameters.
Long Parameter List,IKVM.Reflection,BuiltinArrayMethod,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Type.cs,BuiltinArrayMethod,The method has 6 parameters.
Long Parameter List,IKVM.Reflection,TypeNameParser,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\TypeNameParser.cs,GetType,The method has 6 parameters.
Long Parameter List,IKVM.Reflection,TypeNameParser,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\TypeNameParser.cs,Expand,The method has 6 parameters.
Long Parameter List,IKVM.Reflection,Universe,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Universe.cs,CompareAssemblyIdentity,The method has 5 parameters.
Long Parameter List,IKVM.Reflection,Universe,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Universe.cs,DefineDynamicAssembly,The method has 6 parameters.
Long Parameter List,IKVM.Reflection,Universe,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Universe.cs,DefineDynamicAssemblyImpl,The method has 6 parameters.
Long Parameter List,IKVM.Reflection,Universe,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Universe.cs,MakeStandAloneMethodSig,The method has 5 parameters.
Long Parameter List,IKVM.Reflection,Universe,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Universe.cs,MakeStandAloneMethodSig,The method has 6 parameters.
Long Parameter List,IKVM.Reflection.Emit,AssemblyBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\AssemblyBuilder.cs,AssemblyBuilder,The method has 6 parameters.
Long Parameter List,IKVM.Reflection.Emit,AssemblyBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\AssemblyBuilder.cs,DefineVersionInfoResource,The method has 5 parameters.
Long Parameter List,IKVM.Reflection.Emit,ConstructorBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ConstructorBuilder.cs,__SetSignature,The method has 6 parameters.
Long Parameter List,IKVM.Reflection.Emit,CustomAttributeBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\CustomAttributeBuilder.cs,CustomAttributeBuilder,The method has 6 parameters.
Long Parameter List,IKVM.Reflection.Emit,FieldBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\FieldBuilder.cs,FieldBuilder,The method has 5 parameters.
Long Parameter List,IKVM.Reflection.Emit,ILGenerator,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ILGenerator.cs,EmitCalli,The method has 5 parameters.
Long Parameter List,IKVM.Reflection.Emit,ILGenerator,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ILGenerator.cs,MarkSequencePoint,The method has 5 parameters.
Long Parameter List,IKVM.Reflection.Emit,MethodBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\MethodBuilder.cs,SetDllImportPseudoCustomAttribute,The method has 9 parameters.
Long Parameter List,IKVM.Reflection.Emit,MethodBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\MethodBuilder.cs,SetSignature,The method has 6 parameters.
Long Parameter List,IKVM.Reflection.Emit,ModuleBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ModuleBuilder.cs,DefineType,The method has 5 parameters.
Long Parameter List,IKVM.Reflection.Emit,ModuleBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ModuleBuilder.cs,__DefineField,The method has 5 parameters.
Long Parameter List,IKVM.Reflection.Emit,ModuleBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ModuleBuilder.cs,DefineGlobalMethod,The method has 5 parameters.
Long Parameter List,IKVM.Reflection.Emit,ModuleBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ModuleBuilder.cs,DefineGlobalMethod,The method has 9 parameters.
Long Parameter List,IKVM.Reflection.Emit,ModuleBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ModuleBuilder.cs,DefinePInvokeMethod,The method has 8 parameters.
Long Parameter List,IKVM.Reflection.Emit,ModuleBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ModuleBuilder.cs,DefinePInvokeMethod,The method has 9 parameters.
Long Parameter List,IKVM.Reflection.Emit,ModuleBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ModuleBuilder.cs,GetArrayMethod,The method has 5 parameters.
Long Parameter List,IKVM.Reflection.Emit,ModuleBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ModuleBuilder.cs,GetArrayMethodToken,The method has 5 parameters.
Long Parameter List,IKVM.Reflection.Emit,ArrayMethod,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ModuleBuilder.cs,ArrayMethod,The method has 6 parameters.
Long Parameter List,IKVM.Reflection.Emit,PropertyBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\PropertyBuilder.cs,PropertyBuilder,The method has 5 parameters.
Long Parameter List,IKVM.Reflection.Emit,SignatureHelper,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\SignatureHelper.cs,GetPropertySigHelper,The method has 7 parameters.
Long Parameter List,IKVM.Reflection.Emit,SignatureHelper,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\SignatureHelper.cs,GetPropertySigHelper,The method has 8 parameters.
Long Parameter List,IKVM.Reflection.Emit,TypeBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\TypeBuilder.cs,DefineConstructor,The method has 5 parameters.
Long Parameter List,IKVM.Reflection.Emit,TypeBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\TypeBuilder.cs,DefineMethod,The method has 5 parameters.
Long Parameter List,IKVM.Reflection.Emit,TypeBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\TypeBuilder.cs,DefineMethod,The method has 9 parameters.
Long Parameter List,IKVM.Reflection.Emit,TypeBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\TypeBuilder.cs,DefinePInvokeMethod,The method has 8 parameters.
Long Parameter List,IKVM.Reflection.Emit,TypeBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\TypeBuilder.cs,DefinePInvokeMethod,The method has 9 parameters.
Long Parameter List,IKVM.Reflection.Emit,TypeBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\TypeBuilder.cs,DefinePInvokeMethod,The method has 13 parameters.
Long Parameter List,IKVM.Reflection.Emit,TypeBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\TypeBuilder.cs,DefineField,The method has 5 parameters.
Long Parameter List,IKVM.Reflection.Emit,TypeBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\TypeBuilder.cs,DefineProperty,The method has 8 parameters.
Long Parameter List,IKVM.Reflection.Emit,TypeBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\TypeBuilder.cs,DefineProperty,The method has 9 parameters.
Long Parameter List,IKVM.Reflection.Emit,TypeBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\TypeBuilder.cs,__DefineProperty,The method has 7 parameters.
Long Parameter List,IKVM.Reflection.Emit,TypeBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\TypeBuilder.cs,DefinePropertyImpl,The method has 7 parameters.
Long Parameter List,IKVM.Reflection.Emit,TypeBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\TypeBuilder.cs,DefineNestedType,The method has 5 parameters.
Long Parameter List,IKVM.Reflection.Impl,IMetaDataImport,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Impl\PdbWriter.cs,GetTypeDefProps,The method has 6 parameters.
Long Parameter List,IKVM.Reflection.Impl,IMetaDataImport,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Impl\PdbWriter.cs,GetMethodProps,The method has 10 parameters.
Long Parameter List,IKVM.Reflection.Impl,ISymUnmanagedWriter2,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Impl\PdbWriter.cs,DefineLocalVariable,The method has 9 parameters.
Long Parameter List,IKVM.Reflection.Impl,ISymUnmanagedWriter2,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Impl\PdbWriter.cs,DefineSequencePoints,The method has 7 parameters.
Long Parameter List,IKVM.Reflection.Impl,ISymUnmanagedWriter2,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Impl\PdbWriter.cs,DefineLocalVariable2,The method has 9 parameters.
Long Parameter List,IKVM.Reflection.Impl,PdbWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Impl\PdbWriter.cs,DefineSequencePoints,The method has 6 parameters.
Long Parameter List,IKVM.Reflection.Impl,PdbWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Impl\PdbWriter.cs,DefineLocalVariable2,The method has 9 parameters.
Long Parameter List,IKVM.Reflection.Impl,PdbWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Impl\PdbWriter.cs,DefineLocalVariable,The method has 9 parameters.
Long Parameter List,IKVM.Reflection.Impl,PdbWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Impl\PdbWriter.cs,DefineField,The method has 8 parameters.
Long Parameter List,IKVM.Reflection.Impl,PdbWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Impl\PdbWriter.cs,DefineGlobalVariable,The method has 7 parameters.
Long Parameter List,IKVM.Reflection.Impl,PdbWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Impl\PdbWriter.cs,DefineParameter,The method has 7 parameters.
Long Parameter List,IKVM.Reflection.Impl,PdbWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Impl\PdbWriter.cs,SetMethodSourceRange,The method has 6 parameters.
Long Parameter List,IKVM.Reflection.Impl,PdbWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Impl\PdbWriter.cs,GetTypeDefProps,The method has 6 parameters.
Long Parameter List,IKVM.Reflection.Impl,PdbWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Impl\PdbWriter.cs,GetMethodProps,The method has 10 parameters.
Long Parameter List,IKVM.Reflection.Impl,ISymbolWriterImpl,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Impl\SymbolSupport.cs,DefineLocalVariable2,The method has 9 parameters.
Long Parameter List,IKVM.Reflection.Metadata,ModuleTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Add,The method has 5 parameters.
Long Parameter List,IKVM.Reflection.Metadata,MethodSemanticsTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,ComputeFlags,The method has 5 parameters.
Long Parameter List,IKVM.Reflection.Reader,MethodDefImpl,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\Method.cs,AddNamedArgument,The method has 5 parameters.
Long Parameter List,IKVM.Reflection.Reader,MethodDefImpl,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\Method.cs,AddNamedArgument,The method has 5 parameters.
Long Parameter List,IKVM.Reflection.Writer,ModuleWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ModuleWriter.cs,WriteModule,The method has 8 parameters.
Long Parameter List,IKVM.Reflection.Writer,ModuleWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ModuleWriter.cs,WriteModule,The method has 9 parameters.
Long Parameter List,IKVM.Reflection.Writer,ModuleWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ModuleWriter.cs,WriteModuleImpl,The method has 9 parameters.
Long Parameter List,IKVM.Reflection.Writer,ModuleWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ModuleWriter.cs,StrongName,The method has 6 parameters.
Long Parameter List,IKVM.Reflection.Writer,ResourceDirectoryEntry,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ResourceSection.cs,Write,The method has 7 parameters.
Long Parameter List,IKVM.Reflection.Writer,ResourceDirectoryEntry,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ResourceSection.cs,WriteEntry,The method has 5 parameters.
Long Parameter List,IKVM.Reflection.Writer,ResourceDirectoryEntry,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ResourceSection.cs,WriteNameOrOrdinal,The method has 5 parameters.
Long Identifier,IKVM.Reflection,MissingGenericMethodBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Missing.cs,SetSignature,The length of the parameter returnTypeRequiredCustomModifiers is 33.
Long Identifier,IKVM.Reflection,MissingGenericMethodBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Missing.cs,SetSignature,The length of the parameter returnTypeOptionalCustomModifiers is 33.
Long Identifier,IKVM.Reflection,MissingGenericMethodBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Missing.cs,SetSignature,The length of the parameter parameterTypeRequiredCustomModifiers is 36.
Long Identifier,IKVM.Reflection,MissingGenericMethodBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Missing.cs,SetSignature,The length of the parameter parameterTypeOptionalCustomModifiers is 36.
Long Identifier,IKVM.Reflection,Type,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Type.cs,__CreateMissingMethod,The length of the parameter returnTypeRequiredCustomModifiers is 33.
Long Identifier,IKVM.Reflection,Type,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Type.cs,__CreateMissingMethod,The length of the parameter returnTypeOptionalCustomModifiers is 33.
Long Identifier,IKVM.Reflection,Type,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Type.cs,__CreateMissingMethod,The length of the parameter parameterTypeRequiredCustomModifiers is 36.
Long Identifier,IKVM.Reflection,Type,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Type.cs,__CreateMissingMethod,The length of the parameter parameterTypeOptionalCustomModifiers is 36.
Long Identifier,IKVM.Reflection.Emit,ConstructorBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ConstructorBuilder.cs,__SetSignature,The length of the parameter returnTypeRequiredCustomModifiers is 33.
Long Identifier,IKVM.Reflection.Emit,ConstructorBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ConstructorBuilder.cs,__SetSignature,The length of the parameter returnTypeOptionalCustomModifiers is 33.
Long Identifier,IKVM.Reflection.Emit,ConstructorBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ConstructorBuilder.cs,__SetSignature,The length of the parameter parameterTypeRequiredCustomModifiers is 36.
Long Identifier,IKVM.Reflection.Emit,ConstructorBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ConstructorBuilder.cs,__SetSignature,The length of the parameter parameterTypeOptionalCustomModifiers is 36.
Long Identifier,IKVM.Reflection.Emit,ILGenerator,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ILGenerator.cs,WriteFatHeaderAndCode,The length of the parameter COR_ILEXCEPTION_CLAUSE_EXCEPTION is 32.
Long Identifier,IKVM.Reflection.Emit,ILGenerator,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ILGenerator.cs,WriteFatHeaderAndCode,The length of the parameter COR_ILEXCEPTION_CLAUSE_FINALLY is 30.
Long Identifier,IKVM.Reflection.Emit,MethodBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\MethodBuilder.cs,SetSignature,The length of the parameter returnTypeRequiredCustomModifiers is 33.
Long Identifier,IKVM.Reflection.Emit,MethodBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\MethodBuilder.cs,SetSignature,The length of the parameter returnTypeOptionalCustomModifiers is 33.
Long Identifier,IKVM.Reflection.Emit,MethodBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\MethodBuilder.cs,SetSignature,The length of the parameter parameterTypeRequiredCustomModifiers is 36.
Long Identifier,IKVM.Reflection.Emit,MethodBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\MethodBuilder.cs,SetSignature,The length of the parameter parameterTypeOptionalCustomModifiers is 36.
Long Identifier,IKVM.Reflection.Emit,ModuleBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ModuleBuilder.cs,DefineGlobalMethod,The length of the parameter requiredReturnTypeCustomModifiers is 33.
Long Identifier,IKVM.Reflection.Emit,ModuleBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ModuleBuilder.cs,DefineGlobalMethod,The length of the parameter optionalReturnTypeCustomModifiers is 33.
Long Identifier,IKVM.Reflection.Emit,ModuleBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ModuleBuilder.cs,DefineGlobalMethod,The length of the parameter requiredParameterTypeCustomModifiers is 36.
Long Identifier,IKVM.Reflection.Emit,ModuleBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ModuleBuilder.cs,DefineGlobalMethod,The length of the parameter optionalParameterTypeCustomModifiers is 36.
Long Identifier,IKVM.Reflection.Emit,SignatureHelper,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\SignatureHelper.cs,GetPropertySigHelper,The length of the parameter requiredReturnTypeCustomModifiers is 33.
Long Identifier,IKVM.Reflection.Emit,SignatureHelper,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\SignatureHelper.cs,GetPropertySigHelper,The length of the parameter optionalReturnTypeCustomModifiers is 33.
Long Identifier,IKVM.Reflection.Emit,SignatureHelper,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\SignatureHelper.cs,GetPropertySigHelper,The length of the parameter requiredParameterTypeCustomModifiers is 36.
Long Identifier,IKVM.Reflection.Emit,SignatureHelper,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\SignatureHelper.cs,GetPropertySigHelper,The length of the parameter optionalParameterTypeCustomModifiers is 36.
Long Identifier,IKVM.Reflection.Emit,SignatureHelper,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\SignatureHelper.cs,GetPropertySigHelper,The length of the parameter requiredReturnTypeCustomModifiers is 33.
Long Identifier,IKVM.Reflection.Emit,SignatureHelper,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\SignatureHelper.cs,GetPropertySigHelper,The length of the parameter optionalReturnTypeCustomModifiers is 33.
Long Identifier,IKVM.Reflection.Emit,SignatureHelper,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\SignatureHelper.cs,GetPropertySigHelper,The length of the parameter requiredParameterTypeCustomModifiers is 36.
Long Identifier,IKVM.Reflection.Emit,SignatureHelper,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\SignatureHelper.cs,GetPropertySigHelper,The length of the parameter optionalParameterTypeCustomModifiers is 36.
Long Identifier,IKVM.Reflection.Emit,TypeBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\TypeBuilder.cs,DefineMethod,The length of the parameter returnTypeRequiredCustomModifiers is 33.
Long Identifier,IKVM.Reflection.Emit,TypeBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\TypeBuilder.cs,DefineMethod,The length of the parameter returnTypeOptionalCustomModifiers is 33.
Long Identifier,IKVM.Reflection.Emit,TypeBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\TypeBuilder.cs,DefineMethod,The length of the parameter parameterTypeRequiredCustomModifiers is 36.
Long Identifier,IKVM.Reflection.Emit,TypeBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\TypeBuilder.cs,DefineMethod,The length of the parameter parameterTypeOptionalCustomModifiers is 36.
Long Identifier,IKVM.Reflection.Emit,TypeBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\TypeBuilder.cs,DefinePInvokeMethod,The length of the parameter returnTypeRequiredCustomModifiers is 33.
Long Identifier,IKVM.Reflection.Emit,TypeBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\TypeBuilder.cs,DefinePInvokeMethod,The length of the parameter returnTypeOptionalCustomModifiers is 33.
Long Identifier,IKVM.Reflection.Emit,TypeBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\TypeBuilder.cs,DefinePInvokeMethod,The length of the parameter parameterTypeRequiredCustomModifiers is 36.
Long Identifier,IKVM.Reflection.Emit,TypeBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\TypeBuilder.cs,DefinePInvokeMethod,The length of the parameter parameterTypeOptionalCustomModifiers is 36.
Long Identifier,IKVM.Reflection.Emit,TypeBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\TypeBuilder.cs,DefineProperty,The length of the parameter returnTypeRequiredCustomModifiers is 33.
Long Identifier,IKVM.Reflection.Emit,TypeBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\TypeBuilder.cs,DefineProperty,The length of the parameter returnTypeOptionalCustomModifiers is 33.
Long Identifier,IKVM.Reflection.Emit,TypeBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\TypeBuilder.cs,DefineProperty,The length of the parameter parameterTypeRequiredCustomModifiers is 36.
Long Identifier,IKVM.Reflection.Emit,TypeBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\TypeBuilder.cs,DefineProperty,The length of the parameter parameterTypeOptionalCustomModifiers is 36.
Long Identifier,IKVM.Reflection.Emit,TypeBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\TypeBuilder.cs,DefineProperty,The length of the parameter returnTypeRequiredCustomModifiers is 33.
Long Identifier,IKVM.Reflection.Emit,TypeBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\TypeBuilder.cs,DefineProperty,The length of the parameter returnTypeOptionalCustomModifiers is 33.
Long Identifier,IKVM.Reflection.Emit,TypeBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\TypeBuilder.cs,DefineProperty,The length of the parameter parameterTypeRequiredCustomModifiers is 36.
Long Identifier,IKVM.Reflection.Emit,TypeBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\TypeBuilder.cs,DefineProperty,The length of the parameter parameterTypeOptionalCustomModifiers is 36.
Long Statement,IKVM.Reflection,AssemblyName,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\AssemblyName.cs,GetPublicKeyToken,The length of the statement  "		// note that GetPublicKeyToken() has a side effect in this case' because we retain this token even after the public key subsequently gets changed " is 145.
Long Statement,IKVM.Reflection,AssemblyName,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\AssemblyName.cs,ReferenceMatchesDefinition,The length of the statement  "	return System.Reflection.AssemblyName.ReferenceMatchesDefinition (new System.Reflection.AssemblyName (reference.FullName)' new System.Reflection.AssemblyName (definition.FullName)); " is 181.
Long Statement,IKVM.Reflection,DefaultBinder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Binder.cs,MatchParameterTypes,The length of the statement  "		if (sourceType != targetType && !targetType.IsAssignableFrom (sourceType) && !IsAllowedPrimitiveConversion (sourceType' targetType)) { " is 134.
Long Statement,IKVM.Reflection,CustomAttributeData,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\CustomAttributeData.cs,AppendValue,The length of the statement  "		if (elementType.IsPrimitive || elementType == type.Module.universe.System_Object || elementType == type.Module.universe.System_String || elementType == type.Module.universe.System_Type) { " is 187.
Long Statement,IKVM.Reflection,CustomAttributeData,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\CustomAttributeData.cs,ReadDeclarativeSecurity,The length of the statement  "		ConstructorInfo constructor = u.System_Security_Permissions_PermissionSetAttribute.GetPseudoCustomAttributeConstructor (u.System_Security_Permissions_SecurityAction); " is 166.
Long Statement,IKVM.Reflection,CustomAttributeData,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\CustomAttributeData.cs,ReadDeclarativeSecurity,The length of the statement  "		args.Add (new CustomAttributeNamedArgument (GetProperty (u.System_Security_Permissions_PermissionSetAttribute' "XML"' u.System_String)' new CustomAttributeTypedArgument (u.System_String' xml))); " is 194.
Long Statement,IKVM.Reflection,CustomAttributeData,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\CustomAttributeData.cs,GetProperty,The length of the statement  "	return type.Module.universe.GetMissingPropertyOrThrow (type' name' PropertySignature.Create (CallingConventions.Standard | CallingConventions.HasThis' propertyType' null' new PackedCustomModifiers ())); " is 202.
Long Statement,IKVM.Reflection,CustomAttributeData,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\CustomAttributeData.cs,__ToBuilder,The length of the statement  "	return new CustomAttributeBuilder (Constructor' args' namedProperties.ToArray ()' propertyValues.ToArray ()' namedFields.ToArray ()' fieldValues.ToArray ()); " is 157.
Long Statement,IKVM.Reflection,EventInfo,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\EventInfo.cs,BindingFlagsMatch,The length of the statement  "	return BindingFlagsMatch (IsPublic' flags' BindingFlags.Public' BindingFlags.NonPublic) && BindingFlagsMatch (IsStatic' flags' BindingFlags.Static' BindingFlags.Instance); " is 171.
Long Statement,IKVM.Reflection,EventInfo,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\EventInfo.cs,BindingFlagsMatchInherited,The length of the statement  "	return IsNonPrivate && BindingFlagsMatch (IsPublic' flags' BindingFlags.Public' BindingFlags.NonPublic) && BindingFlagsMatch (IsStatic' flags' BindingFlags.Static | BindingFlags.FlattenHierarchy' BindingFlags.Instance); " is 219.
Long Statement,IKVM.Reflection,FieldInfo,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\FieldInfo.cs,BindingFlagsMatch,The length of the statement  "	return BindingFlagsMatch (IsPublic' flags' BindingFlags.Public' BindingFlags.NonPublic) && BindingFlagsMatch (IsStatic' flags' BindingFlags.Static' BindingFlags.Instance); " is 171.
Long Statement,IKVM.Reflection,FieldInfo,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\FieldInfo.cs,BindingFlagsMatchInherited,The length of the statement  "	return (Attributes & FieldAttributes.FieldAccessMask) > FieldAttributes.Private && BindingFlagsMatch (IsPublic' flags' BindingFlags.Public' BindingFlags.NonPublic) && BindingFlagsMatch (IsStatic' flags' BindingFlags.Static | BindingFlags.FlattenHierarchy' BindingFlags.Instance); " is 279.
Long Statement,IKVM.Reflection,Fusion,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Fusion.cs,CompareAssemblyIdentityNative,The length of the statement  "	Marshal.ThrowExceptionForHR (CompareAssemblyIdentity (assemblyIdentity1' unified1' assemblyIdentity2' unified2' out equivalent' out result)); " is 141.
Long Statement,IKVM.Reflection,Fusion,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Fusion.cs,CompareAssemblyIdentityPure,The length of the statement  "				result = partial ? AssemblyComparisonResult.NonEquivalentPartialVersion : AssemblyComparisonResult.NonEquivalentVersion; " is 120.
Long Statement,IKVM.Reflection,Fusion,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Fusion.cs,CompareAssemblyIdentityPure,The length of the statement  "				result = partial ? AssemblyComparisonResult.NonEquivalentPartialVersion : AssemblyComparisonResult.NonEquivalentVersion; " is 120.
Long Statement,IKVM.Reflection,Fusion,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Fusion.cs,ParseVersion,The length of the statement  "		// if the version consists of a single integer' it is invalid' but not invalid enough to fail the parse of the whole assembly name " is 130.
Long Statement,IKVM.Reflection,Fusion,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Fusion.cs,ParseVersion,The length of the statement  "		// this is a strange scenario' the version is invalid' but not invalid enough to fail the parse of the whole assembly name " is 122.
Long Statement,IKVM.Reflection,Fusion,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Fusion.cs,ParseVersion,The length of the statement  "	if (ushort.TryParse (parts [0]' System.Globalization.NumberStyles.Integer' null' out major) && ushort.TryParse (parts [1]' System.Globalization.NumberStyles.Integer' null' out minor) && (parts.Length <= 2 || parts [2] == "" || ushort.TryParse (parts [2]' System.Globalization.NumberStyles.Integer' null' out build)) && (parts.Length <= 3 || parts [3] == "" || (parts [2] != "" && ushort.TryParse (parts [3]' System.Globalization.NumberStyles.Integer' null' out revision)))) { " is 475.
Long Statement,IKVM.Reflection,GenericMethodInstance,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\GenericWrappers.cs,Equals,The length of the statement  "	return other != null && other.method.Equals (method) && other.declaringType.Equals (declaringType) && Util.ArrayEquals (other.methodArgs' methodArgs); " is 150.
Long Statement,IKVM.Reflection,MarshalSpec,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\MarshalSpec.cs,GetMarshalAsAttribute,The length of the statement  "		} else if (unmanagedType == UnmanagedType.Interface || unmanagedType == UnmanagedType.IDispatch || unmanagedType == UnmanagedType.IUnknown) { " is 141.
Long Statement,IKVM.Reflection,MarshalSpec,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\MarshalSpec.cs,WriteMarshallingDescriptor,The length of the statement  "	} else if (unmanagedType == UnmanagedType.Interface || unmanagedType == UnmanagedType.IDispatch || unmanagedType == UnmanagedType.IUnknown) { " is 141.
Long Statement,IKVM.Reflection,MethodBase,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\MethodBase.cs,BindingFlagsMatch,The length of the statement  "	return BindingFlagsMatch (IsPublic' flags' BindingFlags.Public' BindingFlags.NonPublic) && BindingFlagsMatch (IsStatic' flags' BindingFlags.Static' BindingFlags.Instance); " is 171.
Long Statement,IKVM.Reflection,MethodBase,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\MethodBase.cs,BindingFlagsMatchInherited,The length of the statement  "	return (Attributes & MethodAttributes.MemberAccessMask) > MethodAttributes.Private && BindingFlagsMatch (IsPublic' flags' BindingFlags.Public' BindingFlags.NonPublic) && BindingFlagsMatch (IsStatic' flags' BindingFlags.Static | BindingFlags.FlattenHierarchy' BindingFlags.Instance); " is 282.
Long Statement,IKVM.Reflection,MethodSignature,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\MethodSignature.cs,Equals,The length of the statement  "	return other != null && other.callingConvention == callingConvention && other.genericParamCount == genericParamCount && other.returnType.Equals (returnType) && Util.ArrayEquals (other.parameterTypes' parameterTypes) && other.modifiers.Equals (modifiers); " is 254.
Long Statement,IKVM.Reflection,MethodSignature,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\MethodSignature.cs,GetHashCode,The length of the statement  "	return genericParamCount ^ 77 * (int)callingConvention ^ 3 * returnType.GetHashCode () ^ Util.GetHashCode (parameterTypes) * 5 ^ modifiers.GetHashCode () * 55; " is 159.
Long Statement,IKVM.Reflection,MethodSignature,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\MethodSignature.cs,ReadSig,The length of the statement  "	return new MethodSignature (returnType' parameterTypes' PackedCustomModifiers.Wrap (modifiers)' callingConvention' genericParamCount); " is 134.
Long Statement,IKVM.Reflection,MethodSignature,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\MethodSignature.cs,ReadStandAloneMethodSig,The length of the statement  "	return new __StandAloneMethodSig (unmanaged' unmanagedCallingConvention' callingConvention' returnType' parameterTypes.ToArray ()' optionalParameterTypes.ToArray ()' PackedCustomModifiers.Wrap (customModifiers)); " is 212.
Long Statement,IKVM.Reflection,MethodSignature,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\MethodSignature.cs,Bind,The length of the statement  "	return new MethodSignature (returnType.BindTypeParameters (binder)' BindTypeParameters (binder' parameterTypes)' modifiers.Bind (binder)' callingConvention' genericParamCount); " is 176.
Long Statement,IKVM.Reflection,PackedCustomModifiers,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\MethodSignature.cs,CreateFromExternal,The length of the statement  "		Pack (ref modifiers' i + 1' CustomModifiers.FromReqOpt (Util.NullSafeElementAt (parameterRequired' i)' Util.NullSafeElementAt (parameterOptional' i))' parameterCount + 1); " is 171.
Long Statement,IKVM.Reflection,MissingGenericMethodBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Missing.cs,SetSignature,The length of the statement  "	method.signature = new MethodSignature (returnType ?? method.Module.universe.System_Void' Util.Copy (parameterTypes)' PackedCustomModifiers.CreateFromExternal (returnTypeCustomModifiers' parameterTypeCustomModifiers' parameterTypes.Length)' method.signature.CallingConvention' method.signature.GenericParameterCount); " is 317.
Long Statement,IKVM.Reflection,MissingGenericMethodBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Missing.cs,SetSignature,The length of the statement  "	method.signature = new MethodSignature (returnType ?? method.Module.universe.System_Void' Util.Copy (parameterTypes)' PackedCustomModifiers.CreateFromExternal (returnTypeOptionalCustomModifiers' returnTypeRequiredCustomModifiers' parameterTypeOptionalCustomModifiers' parameterTypeRequiredCustomModifiers' parameterTypes.Length)' method.signature.CallingConvention' method.signature.GenericParameterCount); " is 406.
Long Statement,IKVM.Reflection,MissingMethod,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Missing.cs,Equals,The length of the statement  "	return other != null && other.declaringType == declaringType && other.name == name && other.signature.Equals (signature); " is 121.
Long Statement,IKVM.Reflection,MissingField,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Missing.cs,Equals,The length of the statement  "	return other != null && other.declaringType == declaringType && other.name == name && other.signature.Equals (signature); " is 121.
Long Statement,IKVM.Reflection,Module,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Module.cs,GetMethod,The length of the statement  "	return IsResource () ? null : GetModuleType ().GetMethod (name' BindingFlags.Public | BindingFlags.Static | BindingFlags.Instance | BindingFlags.DeclaredOnly); " is 159.
Long Statement,IKVM.Reflection,Module,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Module.cs,GetMethod,The length of the statement  "	return IsResource () ? null : GetModuleType ().GetMethod (name' BindingFlags.Public | BindingFlags.Static | BindingFlags.Instance | BindingFlags.DeclaredOnly' null' types' null); " is 178.
Long Statement,IKVM.Reflection,Module,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Module.cs,GetMethod,The length of the statement  "	return IsResource () ? null : GetModuleType ().GetMethod (name' bindingAttr | BindingFlags.DeclaredOnly' binder' callConv' types' modifiers); " is 141.
Long Statement,IKVM.Reflection,Module,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Module.cs,GetMethods,The length of the statement  "	return IsResource () ? Empty<MethodInfo>.Array : GetModuleType ().GetMethods (bindingFlags | BindingFlags.DeclaredOnly); " is 120.
Long Statement,IKVM.Reflection,PropertyInfo,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\PropertyInfo.cs,BindingFlagsMatch,The length of the statement  "	return BindingFlagsMatch (IsPublic' flags' BindingFlags.Public' BindingFlags.NonPublic) && BindingFlagsMatch (IsStatic' flags' BindingFlags.Static' BindingFlags.Instance); " is 171.
Long Statement,IKVM.Reflection,PropertyInfo,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\PropertyInfo.cs,BindingFlagsMatchInherited,The length of the statement  "	return IsNonPrivate && BindingFlagsMatch (IsPublic' flags' BindingFlags.Public' BindingFlags.NonPublic) && BindingFlagsMatch (IsStatic' flags' BindingFlags.Static | BindingFlags.FlattenHierarchy' BindingFlags.Instance); " is 219.
Long Statement,IKVM.Reflection,PropertySignature,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\PropertySignature.cs,ExpandTypeParameters,The length of the statement  "	return new PropertySignature (callingConvention' propertyType.BindTypeParameters (declaringType)' BindTypeParameters (declaringType' parameterTypes)' customModifiers.Bind (declaringType)); " is 188.
Long Statement,IKVM.Reflection,Signature,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Signature.cs,ReadGenericInst,The length of the statement  "		// LAMESPEC the Type production (23.2.12) doesn't include CustomMod* for genericinst' but C++ uses it' the verifier allows it and ildasm also supports it " is 153.
Long Statement,IKVM.Reflection,Signature,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Signature.cs,ReadType,The length of the statement  "		return ReadType (module' br' context).__MakeArrayType (br.ReadCompressedInt ()' ReadArrayBounds (br)' ReadArrayBounds (br)' mods); " is 130.
Long Statement,IKVM.Reflection,Signature,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Signature.cs,WriteType,The length of the statement  "			// LAMESPEC the Type production (23.2.12) doesn't include CustomMod* for arrays' but the verifier allows it and ildasm also supports it " is 135.
Long Statement,IKVM.Reflection,__StandAloneMethodSig,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\StandAloneMethodSig.cs,Equals,The length of the statement  "	return other != null && other.unmanaged == unmanaged && other.unmanagedCallingConvention == unmanagedCallingConvention && other.callingConvention == callingConvention && other.returnType == returnType && Util.ArrayEquals (other.parameterTypes' parameterTypes) && Util.ArrayEquals (other.optionalParameterTypes' optionalParameterTypes) && other.customModifiers.Equals (customModifiers); " is 385.
Long Statement,IKVM.Reflection,StrongNameKeyPair,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\StrongNameKeyPair.cs,MonoGetPublicKey,The length of the statement  "	return keyPairArray != null ? new System.Reflection.StrongNameKeyPair (keyPairArray).PublicKey : new System.Reflection.StrongNameKeyPair (keyPairContainer).PublicKey; " is 166.
Long Statement,IKVM.Reflection,Type,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Type.cs,GetMemberByName,The length of the statement  "		for (Type type = this.BaseType; (found == null || typeof(T) == typeof(MethodInfo)) && type != null; type = type.BaseType) { " is 123.
Long Statement,IKVM.Reflection,Type,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Type.cs,GetMemberByName,The length of the statement  "							if ((mi = found as MethodInfo) != null && mi.MethodSignature.MatchParameterTypes (((MethodBase)member).MethodSignature)) { " is 122.
Long Statement,IKVM.Reflection,Type,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Type.cs,GetConstructor,The length of the statement  "	return GetMemberByName<ConstructorInfo> (ConstructorInfo.ConstructorName' bindingAttr | BindingFlags.DeclaredOnly' delegate (ConstructorInfo ctor) { " is 148.
Long Statement,IKVM.Reflection,Type,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Type.cs,GetConstructor,The length of the statement  "	}) ?? GetMethodWithBinder<ConstructorInfo> (ConstructorInfo.ConstructorName' bindingAttr' binder ?? DefaultBinder' types' modifiers); " is 133.
Long Statement,IKVM.Reflection,Type,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Type.cs,GetProperty,The length of the statement  "	return GetProperty (name' BindingFlags.Public | BindingFlags.Instance | BindingFlags.Static' null' returnType' types' modifiers); " is 129.
Long Statement,IKVM.Reflection,Type,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Type.cs,__MakeArrayType,The length of the statement  "	return __MakeArrayType (rank' sizes' lobounds' CustomModifiers.FromReqOpt (requiredCustomModifiers' optionalCustomModifiers)); " is 126.
Long Statement,IKVM.Reflection,Type,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Type.cs,__MakeGenericType,The length of the statement  "	return GenericTypeInstance.Make (this' Util.Copy (typeArguments)' customModifiers == null ? null : (CustomModifiers[])customModifiers.Clone ()); " is 144.
Long Statement,IKVM.Reflection,Type,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Type.cs,__MakeGenericType,The length of the statement  "			mods [i] = CustomModifiers.FromReqOpt (Util.NullSafeElementAt (requiredCustomModifiers' i)' Util.NullSafeElementAt (optionalCustomModifiers' i)); " is 145.
Long Statement,IKVM.Reflection,Type,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Type.cs,GetInterfaceMap,The length of the statement  "		map.InterfaceMethods = interfaceType.GetMethods (BindingFlags.DeclaredOnly | BindingFlags.Instance | BindingFlags.Public); " is 122.
Long Statement,IKVM.Reflection,Type,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Type.cs,GetInterfaceMap,The length of the statement  "				// TODO use proper method resolution (also take into account that no implicit base class implementation is used across assembly boundaries) " is 139.
Long Statement,IKVM.Reflection,Type,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Type.cs,GetInterfaceMap,The length of the statement  "					if (methods [j].Name == map.InterfaceMethods [i].Name && methods [j].MethodSignature.Equals (map.InterfaceMethods [i].MethodSignature)) { " is 137.
Long Statement,IKVM.Reflection,Type,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Type.cs,GetInterfaceMap,The length of the statement  "		for (Type baseType = this.BaseType; baseType != null && interfaceType.IsAssignableFrom (baseType); baseType = baseType.BaseType) { " is 130.
Long Statement,IKVM.Reflection,Type,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Type.cs,GetPseudoCustomAttributeConstructor,The length of the statement  "	MethodSignature methodSig = MethodSignature.MakeFromBuilder (u.System_Void' parameterTypes' new PackedCustomModifiers ()' CallingConventions.Standard | CallingConventions.HasThis' 0); " is 183.
Long Statement,IKVM.Reflection,Type,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Type.cs,__CreateMissingMethod,The length of the statement  "	return CreateMissingMethod (name' callingConvention' returnType' parameterTypes' PackedCustomModifiers.CreateFromExternal (returnTypeCustomModifiers' parameterTypeCustomModifiers' parameterTypes.Length)); " is 204.
Long Statement,IKVM.Reflection,Type,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Type.cs,CreateMissingMethod,The length of the statement  "	MethodSignature sig = new MethodSignature (returnType ?? this.Module.universe.System_Void' Util.Copy (parameterTypes)' customModifiers' callingConvention' 0); " is 158.
Long Statement,IKVM.Reflection,Type,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Type.cs,__CreateMissingMethod,The length of the statement  "	return CreateMissingMethod (name' callingConvention' returnType' parameterTypes' PackedCustomModifiers.CreateFromExternal (returnTypeOptionalCustomModifiers' returnTypeRequiredCustomModifiers' parameterTypeOptionalCustomModifiers' parameterTypeRequiredCustomModifiers' parameterTypes.Length)); " is 293.
Long Statement,IKVM.Reflection,Type,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Type.cs,__CreateMissingField,The length of the statement  "	return __CreateMissingField (name' fieldType' CustomModifiers.FromReqOpt (requiredCustomModifiers' optionalCustomModifiers)); " is 125.
Long Statement,IKVM.Reflection,Type,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Type.cs,__CreateMissingProperty,The length of the statement  "	PropertySignature sig = PropertySignature.Create (callingConvention' propertyType' parameterTypes' PackedCustomModifiers.CreateFromExternal (propertyTypeCustomModifiers' parameterTypeCustomModifiers' Util.NullSafeLength (parameterTypes))); " is 239.
Long Statement,IKVM.Reflection,Type,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Type.cs,ResolvePotentialEnumOrValueType,The length of the statement  "	if (this.Assembly == this.Universe.Mscorlib || this.Assembly.GetName ().Name.Equals ("mscorlib"' StringComparison.OrdinalIgnoreCase)) { " is 135.
Long Statement,IKVM.Reflection,ArrayType,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Type.cs,__GetDeclaredMethods,The length of the statement  "	list.Add (new BuiltinArrayMethod (this.Module' this' "Set"' CallingConventions.Standard | CallingConventions.HasThis' this.Module.universe.System_Void' new Type[] { " is 164.
Long Statement,IKVM.Reflection,ArrayType,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Type.cs,__GetDeclaredMethods,The length of the statement  "	list.Add (new BuiltinArrayMethod (this.Module' this' "Address"' CallingConventions.Standard | CallingConventions.HasThis' elementType.MakeByRefType ()' int32)); " is 160.
Long Statement,IKVM.Reflection,ArrayType,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Type.cs,__GetDeclaredMethods,The length of the statement  "	list.Add (new BuiltinArrayMethod (this.Module' this' "Get"' CallingConventions.Standard | CallingConventions.HasThis' elementType' int32)); " is 139.
Long Statement,IKVM.Reflection,ArrayType,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Type.cs,__GetDeclaredMethods,The length of the statement  "	list.Add (new ConstructorInfoImpl (new BuiltinArrayMethod (this.Module' this' ".ctor"' CallingConventions.Standard | CallingConventions.HasThis' this.Module.universe.System_Void' int32))); " is 188.
Long Statement,IKVM.Reflection,ArrayType,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Type.cs,__GetDeclaredMethods,The length of the statement  "		list.Add (new ConstructorInfoImpl (new BuiltinArrayMethod (this.Module' this' ".ctor"' CallingConventions.Standard | CallingConventions.HasThis' this.Module.universe.System_Void' int32))); " is 188.
Long Statement,IKVM.Reflection,MultiArrayType,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Type.cs,__GetDeclaredMethods,The length of the statement  "		new ConstructorInfoImpl (new BuiltinArrayMethod (this.Module' this' ".ctor"' CallingConventions.Standard | CallingConventions.HasThis' this.Module.universe.System_Void' getArgs))' " is 179.
Long Statement,IKVM.Reflection,MultiArrayType,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Type.cs,__GetDeclaredMethods,The length of the statement  "		new ConstructorInfoImpl (new BuiltinArrayMethod (this.Module' this' ".ctor"' CallingConventions.Standard | CallingConventions.HasThis' this.Module.universe.System_Void' ctorArgs))' " is 180.
Long Statement,IKVM.Reflection,MultiArrayType,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Type.cs,__GetDeclaredMethods,The length of the statement  "		new BuiltinArrayMethod (this.Module' this' "Set"' CallingConventions.Standard | CallingConventions.HasThis' this.Module.universe.System_Void' setArgs)' " is 151.
Long Statement,IKVM.Reflection,MultiArrayType,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Type.cs,__GetDeclaredMethods,The length of the statement  "		new BuiltinArrayMethod (this.Module' this' "Address"' CallingConventions.Standard | CallingConventions.HasThis' elementType.MakeByRefType ()' getArgs)' " is 151.
Long Statement,IKVM.Reflection,MultiArrayType,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Type.cs,__GetDeclaredMethods,The length of the statement  "		new BuiltinArrayMethod (this.Module' this' "Get"' CallingConventions.Standard | CallingConventions.HasThis' elementType' getArgs)' " is 130.
Long Statement,IKVM.Reflection,GenericTypeInstance,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Type.cs,Make,The length of the statement  "		// we must not instantiate the identity instance' because typeof(Foo<>).MakeGenericType(typeof(Foo<>).GetGenericArguments()) == typeof(Foo<>) " is 141.
Long Statement,IKVM.Reflection,TypeNameParser,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\TypeNameParser.cs,Expand,The length of the statement  "			typeArgs [i] = genericParameters [i].GetType (type.Assembly.universe' context' throwOnError' originalName' resolve' ignoreCase); " is 128.
Long Statement,IKVM.Reflection,Universe,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Universe.cs,GetUseNativeFusion,The length of the statement  "		return Environment.OSVersion.Platform == PlatformID.Win32NT && !MonoRuntime && Environment.GetEnvironmentVariable ("IKVM_DISABLE_FUSION") == null; " is 146.
Long Statement,IKVM.Reflection,Universe,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Universe.cs,ImportImpl,The length of the statement  "		// note that we can't pass in the namespace here' because .NET's Type.Namespace implementation is broken for nested types " is 121.
Long Statement,IKVM.Reflection,Universe,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Universe.cs,GetLoadedAssembly,The length of the statement  "			if (simpleName.Equals (assemblies [i].Name' StringComparison.InvariantCultureIgnoreCase) && CompareAssemblyIdentity (refname' false' assemblies [i].FullName' false' out result)) { " is 179.
Long Statement,IKVM.Reflection,Universe,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Universe.cs,GetDynamicAssembly,The length of the statement  "		if (simpleName.Equals (asm.Name' StringComparison.InvariantCultureIgnoreCase) && CompareAssemblyIdentity (refname' false' asm.FullName' false' out result)) { " is 157.
Long Statement,IKVM.Reflection,Universe,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Universe.cs,CompareAssemblyIdentity,The length of the statement  "	return useNativeFusion ? Fusion.CompareAssemblyIdentityNative (assemblyIdentity1' unified1' assemblyIdentity2' unified2' out result) : Fusion.CompareAssemblyIdentityPure (assemblyIdentity1' unified1' assemblyIdentity2' unified2' out result); " is 241.
Long Statement,IKVM.Reflection,Universe,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Universe.cs,DefineDynamicAssemblyImpl,The length of the statement  "	AssemblyBuilder asm = new AssemblyBuilder (this' name' dir' requiredPermissions' optionalPermissions' refusedPermissions); " is 122.
Long Statement,IKVM.Reflection,Universe,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Universe.cs,GetMissingTypeOrThrow,The length of the statement  "	throw new TypeLoadException (String.Format ("Type '{0}' not found in assembly '{1}'"' fullName' module.Assembly.FullName)); " is 123.
Long Statement,IKVM.Reflection,Universe,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Universe.cs,MakeStandAloneMethodSig,The length of the statement  "	return new __StandAloneMethodSig (true' callingConvention' 0' returnType ?? this.System_Void' Util.Copy (parameterTypes)' Type.EmptyTypes' PackedCustomModifiers.CreateFromExternal (returnTypeCustomModifiers' parameterTypeCustomModifiers' Util.NullSafeLength (parameterTypes))); " is 277.
Long Statement,IKVM.Reflection,Universe,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Universe.cs,MakeStandAloneMethodSig,The length of the statement  "	return new __StandAloneMethodSig (false' 0' callingConvention' returnType ?? this.System_Void' Util.Copy (parameterTypes)' Util.Copy (optionalParameterTypes)' PackedCustomModifiers.CreateFromExternal (returnTypeCustomModifiers' parameterTypeCustomModifiers' Util.NullSafeLength (parameterTypes) + Util.NullSafeLength (optionalParameterTypes))); " is 344.
Long Statement,IKVM.Reflection.Emit,AssemblyBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\AssemblyBuilder.cs,SaveImpl,The length of the statement  "		if (manifestModule == null && string.Compare (moduleBuilder.fileName' assemblyFileName' StringComparison.OrdinalIgnoreCase) == 0) { " is 131.
Long Statement,IKVM.Reflection.Emit,AssemblyBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\AssemblyBuilder.cs,SaveImpl,The length of the statement  "	System.Security.Permissions.SecurityAction requestOptional = System.Security.Permissions.SecurityAction.RequestOptional; " is 120.
Long Statement,IKVM.Reflection.Emit,AssemblyBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\AssemblyBuilder.cs,SaveImpl,The length of the statement  "	ResourceSection unmanagedResources = versionInfo != null || win32icon != null || win32manifest != null || win32resources != null ? new ResourceSection () : null; " is 161.
Long Statement,IKVM.Reflection.Emit,AssemblyBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\AssemblyBuilder.cs,SaveImpl,The length of the statement  "				ModuleWriter.WriteModule (null' null' moduleBuilder' fileKind' portableExecutableKind' imageFileMachine' moduleBuilder.unmanagedResources' entryPoint.MetadataToken); " is 165.
Long Statement,IKVM.Reflection.Emit,AssemblyBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\AssemblyBuilder.cs,SaveImpl,The length of the statement  "				ModuleWriter.WriteModule (null' null' moduleBuilder' fileKind' portableExecutableKind' imageFileMachine' moduleBuilder.unmanagedResources' 0); " is 142.
Long Statement,IKVM.Reflection.Emit,AssemblyBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\AssemblyBuilder.cs,SaveImpl,The length of the statement  "	ModuleWriter.WriteModule (keyPair' publicKey' manifestModule' fileKind' portableExecutableKind' imageFileMachine' unmanagedResources ?? manifestModule.unmanagedResources' entryPointToken' streamOrNull); " is 202.
Long Statement,IKVM.Reflection.Emit,AssemblyBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\AssemblyBuilder.cs,__DefineUnmanagedResource,The length of the statement  "	// The standard .NET DefineUnmanagedResource(byte[]) is useless' because it embeds "resource" (as-is) as the .rsrc section' " is 123.
Long Statement,IKVM.Reflection.Emit,AssemblyBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\AssemblyBuilder.cs,__DefineUnmanagedResource,The length of the statement  "	// but it doesn't set the PE file Resource Directory entry to point to it. That's why we have a renamed version' which behaves " is 126.
Long Statement,IKVM.Reflection.Emit,AssemblyBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\AssemblyBuilder.cs,DefineUnmanagedResource,The length of the statement  "	// This method reads the specified resource file (Win32 .res file) and converts it into the appropriate format and embeds it in the .rsrc section' " is 146.
Long Statement,IKVM.Reflection.Emit,ConstructorBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ConstructorBuilder.cs,__SetSignature,The length of the statement  "	methodBuilder.SetSignature (returnType' returnTypeRequiredCustomModifiers' returnTypeOptionalCustomModifiers' parameterTypes' parameterTypeRequiredCustomModifiers' parameterTypeOptionalCustomModifiers); " is 202.
Long Statement,IKVM.Reflection.Emit,CustomAttributeBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\CustomAttributeBuilder.cs,GetLegacyDeclSecurity,The length of the statement  "	if (con.DeclaringType == con.Module.universe.System_Security_Permissions_PermissionSetAttribute && blob == null && (namedFields == null || namedFields.Length == 0) && namedProperties != null && namedProperties.Length == 1 && namedProperties [0].Name == "XML") { " is 261.
Long Statement,IKVM.Reflection.Emit,CustomAttributeBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\CustomAttributeBuilder.cs,ToData,The length of the statement  "				namedArgs.Add (new CustomAttributeNamedArgument (namedProperties [i]' RewrapValue (namedProperties [i].PropertyType' propertyValues [i]))); " is 139.
Long Statement,IKVM.Reflection.Emit,CustomAttributeBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\CustomAttributeBuilder.cs,ToData,The length of the statement  "				namedArgs.Add (new CustomAttributeNamedArgument (namedFields [i]' RewrapValue (namedFields [i].FieldType' fieldValues [i]))); " is 125.
Long Statement,IKVM.Reflection.Emit,CustomModifiersBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\CustomModifiersBuilder.cs,Add,The length of the statement  "	foreach (CustomModifiers.Entry entry in CustomModifiers.FromReqOpt (requiredCustomModifiers' optionalCustomModifiers)) { " is 120.
Long Statement,IKVM.Reflection.Emit,EnumBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\EnumBuilder.cs,DefineLiteral,The length of the statement  "	FieldBuilder fb = typeBuilder.DefineField (literalName' typeBuilder' FieldAttributes.Public | FieldAttributes.Static | FieldAttributes.Literal); " is 144.
Long Statement,IKVM.Reflection.Emit,ILGenerator,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ILGenerator.cs,BeginCatchBlock,The length of the statement  "	if (exceptionBlockAssistanceMode == EBAM_COMPAT || (exceptionBlockAssistanceMode == EBAM_CLEVER && stackHeight != -1)) { " is 120.
Long Statement,IKVM.Reflection.Emit,ILGenerator,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ILGenerator.cs,BeginFinallyFaultBlock,The length of the statement  "	if (exceptionBlockAssistanceMode == EBAM_COMPAT || (exceptionBlockAssistanceMode == EBAM_CLEVER && stackHeight != -1)) { " is 120.
Long Statement,IKVM.Reflection.Emit,ILGenerator,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ILGenerator.cs,EndExceptionBlock,The length of the statement  "	if (exceptionBlockAssistanceMode == EBAM_COMPAT || (exceptionBlockAssistanceMode == EBAM_CLEVER && stackHeight != -1)) { " is 120.
Long Statement,IKVM.Reflection.Emit,ILGenerator,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ILGenerator.cs,Emit,The length of the statement  "		if (labelStackHeight [label.Index] != flowStackHeight && (labelStackHeight [label.Index] != 0 || flowStackHeight != -1)) { " is 122.
Long Statement,IKVM.Reflection.Emit,ILGenerator,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ILGenerator.cs,Emit,The length of the statement  "		Debug.Assert (labelStackHeight [label.Index] == -1 || labelStackHeight [label.Index] == flowStackHeight || (flowStackHeight == -1 && labelStackHeight [label.Index] == 0)); " is 171.
Long Statement,IKVM.Reflection.Emit,ILGenerator,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ILGenerator.cs,WriteByteBranchOffset,The length of the statement  "		throw new NotSupportedException ("Branch offset of " + offset + " does not fit in one-byte branch target at position " + code.Position); " is 136.
Long Statement,IKVM.Reflection.Emit,ILGenerator,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ILGenerator.cs,Emit,The length of the statement  "	code.Write (0x11000000 | moduleBuilder.StandAloneSig.FindOrAddRecord (moduleBuilder.Blobs.Add (signature.GetSignature (moduleBuilder)))); " is 137.
Long Statement,IKVM.Reflection.Emit,ILGenerator,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ILGenerator.cs,EmitCalli,The length of the statement  "	__EmitCalli (opc' moduleBuilder.universe.MakeStandAloneMethodSig (callingConvention' returnType' new CustomModifiers ()' parameterTypes' null)); " is 144.
Long Statement,IKVM.Reflection.Emit,ILGenerator,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ILGenerator.cs,EmitCalli,The length of the statement  "	__EmitCalli (opc' moduleBuilder.universe.MakeStandAloneMethodSig (callingConvention' returnType' new CustomModifiers ()' parameterTypes' optionalParameterTypes' null)); " is 168.
Long Statement,IKVM.Reflection.Emit,ILGenerator,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ILGenerator.cs,__EmitCalli,The length of the statement  "		UpdateStack (opc' (callingConvention & CallingConventions.HasThis | CallingConventions.ExplicitThis) == CallingConventions.HasThis' sig.ReturnType' sig.ParameterCount); " is 168.
Long Statement,IKVM.Reflection.Emit,ILGenerator,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ILGenerator.cs,WriteScope,The length of the statement  "			moduleBuilder.symbolWriter.DefineLocalVariable2 (local.name' 0' localVarSigTok' SymAddressKind.ILOffset' local.LocalIndex' 0' 0' startOffset' endOffset); " is 153.
Long Statement,IKVM.Reflection.Emit,MethodBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\MethodBuilder.cs,SetDllImportPseudoCustomAttribute,The length of the statement  "	SetDllImportPseudoCustomAttribute ((string)customBuilder.GetConstructorArgument (0)' (string)customBuilder.GetFieldValue ("EntryPoint")' callingConvention' charSet' (bool?)customBuilder.GetFieldValue ("BestFitMapping")' (bool?)customBuilder.GetFieldValue ("ThrowOnUnmappableChar")' (bool?)customBuilder.GetFieldValue ("SetLastError")' (bool?)customBuilder.GetFieldValue ("PreserveSig")' (bool?)customBuilder.GetFieldValue ("ExactSpelling")); " is 441.
Long Statement,IKVM.Reflection.Emit,MethodBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\MethodBuilder.cs,SetDllImportPseudoCustomAttribute,The length of the statement  "	rec.ImportScope = this.ModuleBuilder.ModuleRef.FindOrAddRecord (dllName == null ? 0 : this.ModuleBuilder.Strings.Add (dllName)); " is 128.
Long Statement,IKVM.Reflection.Emit,MethodBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\MethodBuilder.cs,SetSignature,The length of the statement  "	SetSignature (returnType' parameterTypes' PackedCustomModifiers.CreateFromExternal (returnTypeOptionalCustomModifiers' returnTypeRequiredCustomModifiers' parameterTypeOptionalCustomModifiers' parameterTypeRequiredCustomModifiers' Util.NullSafeLength (parameterTypes))); " is 269.
Long Statement,IKVM.Reflection.Emit,MethodBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\MethodBuilder.cs,__SetSignature,The length of the statement  "	SetSignature (returnType' parameterTypes' PackedCustomModifiers.CreateFromExternal (returnTypeCustomModifiers' parameterTypeCustomModifiers' Util.NullSafeLength (parameterTypes))); " is 180.
Long Statement,IKVM.Reflection.Emit,ModuleBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ModuleBuilder.cs,DefineEnum,The length of the statement  "	TypeBuilder tb = DefineType (name' (visibility & TypeAttributes.VisibilityMask) | TypeAttributes.Sealed' universe.System_Enum); " is 127.
Long Statement,IKVM.Reflection.Emit,ModuleBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ModuleBuilder.cs,DefineEnum,The length of the statement  "	FieldBuilder fb = tb.DefineField ("value__"' underlyingType' FieldAttributes.Public | FieldAttributes.SpecialName | FieldAttributes.RTSpecialName); " is 147.
Long Statement,IKVM.Reflection.Emit,ModuleBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ModuleBuilder.cs,__DefineModuleInitializer,The length of the statement  "	return moduleType.DefineConstructor (visibility | MethodAttributes.Static | MethodAttributes.SpecialName | MethodAttributes.RTSpecialName' CallingConventions.Standard' Type.EmptyTypes); " is 185.
Long Statement,IKVM.Reflection.Emit,ModuleBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ModuleBuilder.cs,DefineGlobalMethod,The length of the statement  "	return moduleType.DefineMethod (name' attributes' callingConvention' returnType' requiredReturnTypeCustomModifiers' optionalReturnTypeCustomModifiers' parameterTypes' requiredParameterTypeCustomModifiers' optionalParameterTypeCustomModifiers); " is 243.
Long Statement,IKVM.Reflection.Emit,ModuleBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ModuleBuilder.cs,DefinePInvokeMethod,The length of the statement  "	return moduleType.DefinePInvokeMethod (name' dllName' attributes' callingConvention' returnType' parameterTypes' nativeCallConv' nativeCharSet); " is 144.
Long Statement,IKVM.Reflection.Emit,ModuleBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ModuleBuilder.cs,DefinePInvokeMethod,The length of the statement  "	return moduleType.DefinePInvokeMethod (name' dllName' entryName' attributes' callingConvention' returnType' parameterTypes' nativeCallConv' nativeCharSet); " is 155.
Long Statement,IKVM.Reflection.Emit,ModuleBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ModuleBuilder.cs,AddDeclarativeSecurity,The length of the statement  "	rec.PermissionSet = this.Blobs.Add (ByteBuffer.Wrap (System.Text.Encoding.Unicode.GetBytes (permissionSet.ToXml ().ToString ()))); " is 130.
Long Statement,IKVM.Reflection.Emit,ModuleBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ModuleBuilder.cs,ApplyUnmanagedExports,The length of the statement  "					exp.rva = new RelativeVirtualAddress (rva.initializedDataOffset + (uint)(methods.IndexOf (unmanagedExports [i].mb) * size)); " is 124.
Long Statement,IKVM.Reflection.Emit,ModuleBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ModuleBuilder.cs,IsVisible,The length of the statement  "	return type.IsPublic || ((type.IsNestedFamily || type.IsNestedFamORAssem || type.IsNestedPublic) && IsVisible (type.DeclaringType)); " is 132.
Long Statement,IKVM.Reflection.Emit,ModuleBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ModuleBuilder.cs,DefineUnmanagedResource,The length of the statement  "	// This method reads the specified resource file (Win32 .res file) and converts it into the appropriate format and embeds it in the .rsrc section' " is 146.
Long Statement,IKVM.Reflection.Emit,ModuleBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ModuleBuilder.cs,GetSignatureToken,The length of the statement  "	return new SignatureToken (this.StandAloneSig.FindOrAddRecord (this.Blobs.Add (sigHelper.GetSignature (this))) | (StandAloneSigTable.Index << 24)); " is 147.
Long Statement,IKVM.Reflection.Emit,ModuleBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ModuleBuilder.cs,GetSignatureToken,The length of the statement  "	return new SignatureToken (this.StandAloneSig.FindOrAddRecord (this.Blobs.Add (ByteBuffer.Wrap (sigBytes' sigLength))) | (StandAloneSigTable.Index << 24)); " is 155.
Long Statement,IKVM.Reflection.Emit,ModuleBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ModuleBuilder.cs,SaveImpl,The length of the statement  "				// we manually add a TypeRef without looking it up in mscorlib' because Mono and Silverlight's mscorlib don't have these types " is 126.
Long Statement,IKVM.Reflection.Emit,ModuleBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ModuleBuilder.cs,SaveImpl,The length of the statement  "				placeholderTokens [index] = AddTypeRefByName (mscorlib' "System.Runtime.CompilerServices"' placeholderTypeNames [index]); " is 121.
Long Statement,IKVM.Reflection.Emit,ModuleBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ModuleBuilder.cs,SaveImpl,The length of the statement  "	ModuleWriter.WriteModule (null' null' this' PEFileKinds.Dll' portableExecutableKind' imageFileMachine' unmanagedResources' 0' streamOrNull); " is 140.
Long Statement,IKVM.Reflection.Emit,SignatureHelper,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\SignatureHelper.cs,GetPropertySigHelper,The length of the statement  "	return GetPropertySigHelper (mod' CallingConventions.Standard' returnType' requiredReturnTypeCustomModifiers' optionalReturnTypeCustomModifiers' parameterTypes' requiredParameterTypeCustomModifiers' optionalParameterTypeCustomModifiers); " is 237.
Long Statement,IKVM.Reflection.Emit,SignatureHelper,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\SignatureHelper.cs,GetPropertySigHelper,The length of the statement  "	sig.returnTypeCustomModifiers = CustomModifiers.FromReqOpt (requiredReturnTypeCustomModifiers' optionalReturnTypeCustomModifiers); " is 130.
Long Statement,IKVM.Reflection.Emit,SignatureHelper,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\SignatureHelper.cs,GetSignature,The length of the statement  "			Signature.WriteStandAloneMethodSig (module' bb' module.universe.MakeStandAloneMethodSig (unmanagedCallConv' returnType' returnTypeCustomModifiers' args.ToArray ()' customModifiers.ToArray ())); " is 193.
Long Statement,IKVM.Reflection.Emit,SignatureHelper,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\SignatureHelper.cs,GetSignature,The length of the statement  "			Signature.WriteStandAloneMethodSig (module' bb' module.universe.MakeStandAloneMethodSig (callingConvention' returnType' returnTypeCustomModifiers' args.ToArray ()' optionalArgs.ToArray ()' customModifiers.ToArray ())); " is 218.
Long Statement,IKVM.Reflection.Emit,SignatureHelper,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\SignatureHelper.cs,GetSignature,The length of the statement  "		Signature.WritePropertySig (module' bb' callingConvention' returnType' returnTypeCustomModifiers' args.ToArray ()' customModifiers.ToArray ()); " is 143.
Long Statement,IKVM.Reflection.Emit,SignatureHelper,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\SignatureHelper.cs,AddArguments,The length of the statement  "		__AddArgument (arguments [i]' false' CustomModifiers.FromReqOpt (requiredCustomModifiers [i]' optionalCustomModifiers [i])); " is 124.
Long Statement,IKVM.Reflection.Emit,TypeBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\TypeBuilder.cs,DefineDefaultConstructor,The length of the statement  "	ilgen.Emit (OpCodes.Call' BaseType.GetConstructor (BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic' null' Type.EmptyTypes' null)); " is 151.
Long Statement,IKVM.Reflection.Emit,TypeBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\TypeBuilder.cs,DefineConstructor,The length of the statement  "	string name = (attribs & MethodAttributes.Static) == 0 ? ConstructorInfo.ConstructorName : ConstructorInfo.TypeConstructorName; " is 127.
Long Statement,IKVM.Reflection.Emit,TypeBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\TypeBuilder.cs,DefineConstructor,The length of the statement  "	MethodBuilder mb = DefineMethod (name' attribs' callingConvention' null' null' null' parameterTypes' requiredCustomModifiers' optionalCustomModifiers); " is 151.
Long Statement,IKVM.Reflection.Emit,TypeBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\TypeBuilder.cs,DefineTypeInitializer,The length of the statement  "	MethodBuilder mb = DefineMethod (ConstructorInfo.TypeConstructorName' MethodAttributes.Private | MethodAttributes.Static | MethodAttributes.RTSpecialName | MethodAttributes.SpecialName' null' Type.EmptyTypes); " is 209.
Long Statement,IKVM.Reflection.Emit,TypeBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\TypeBuilder.cs,DefineMethod,The length of the statement  "	mb.SetSignature (returnType' returnTypeRequiredCustomModifiers' returnTypeOptionalCustomModifiers' parameterTypes' parameterTypeRequiredCustomModifiers' parameterTypeOptionalCustomModifiers); " is 191.
Long Statement,IKVM.Reflection.Emit,TypeBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\TypeBuilder.cs,DefinePInvokeMethod,The length of the statement  "	return DefinePInvokeMethod (name' dllName' null' attributes' callingConvention' returnType' null' null' parameterTypes' null' null' nativeCallConv' nativeCharSet); " is 163.
Long Statement,IKVM.Reflection.Emit,TypeBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\TypeBuilder.cs,DefinePInvokeMethod,The length of the statement  "	return DefinePInvokeMethod (name' dllName' entryName' attributes' callingConvention' returnType' null' null' parameterTypes' null' null' nativeCallConv' nativeCharSet); " is 168.
Long Statement,IKVM.Reflection.Emit,TypeBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\TypeBuilder.cs,DefinePInvokeMethod,The length of the statement  "	MethodBuilder mb = DefineMethod (name' attributes | MethodAttributes.PinvokeImpl' callingConvention' returnType' returnTypeRequiredCustomModifiers' returnTypeOptionalCustomModifiers' parameterTypes' parameterTypeRequiredCustomModifiers' parameterTypeOptionalCustomModifiers); " is 275.
Long Statement,IKVM.Reflection.Emit,TypeBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\TypeBuilder.cs,DefineField,The length of the statement  "	return __DefineField (fieldName' type' CustomModifiers.FromReqOpt (requiredCustomModifiers' optionalCustomModifiers)' attributes); " is 130.
Long Statement,IKVM.Reflection.Emit,TypeBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\TypeBuilder.cs,DefineProperty,The length of the statement  "	return DefinePropertyImpl (name' attributes' CallingConventions.Standard' true' returnType' parameterTypes' PackedCustomModifiers.CreateFromExternal (returnTypeOptionalCustomModifiers' returnTypeRequiredCustomModifiers' parameterTypeOptionalCustomModifiers' parameterTypeRequiredCustomModifiers' Util.NullSafeLength (parameterTypes))); " is 335.
Long Statement,IKVM.Reflection.Emit,TypeBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\TypeBuilder.cs,DefineProperty,The length of the statement  "	return DefinePropertyImpl (name' attributes' callingConvention' false' returnType' parameterTypes' PackedCustomModifiers.CreateFromExternal (returnTypeOptionalCustomModifiers' returnTypeRequiredCustomModifiers' parameterTypeOptionalCustomModifiers' parameterTypeRequiredCustomModifiers' Util.NullSafeLength (parameterTypes))); " is 326.
Long Statement,IKVM.Reflection.Emit,TypeBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\TypeBuilder.cs,__DefineProperty,The length of the statement  "	return DefinePropertyImpl (name' attributes' callingConvention' false' returnType' parameterTypes' PackedCustomModifiers.CreateFromExternal (returnTypeCustomModifiers' parameterTypeCustomModifiers' Util.NullSafeLength (parameterTypes))); " is 237.
Long Statement,IKVM.Reflection.Emit,TypeBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\TypeBuilder.cs,DefineInitializedData,The length of the statement  "		TypeBuilder tb = this.ModuleBuilder.DefineType ("$ArrayType$" + data.Length' TypeAttributes.Public | TypeAttributes.Sealed | TypeAttributes.ExplicitLayout' this.Module.universe.System_ValueType' PackingSize.Size1' data.Length); " is 227.
Long Statement,IKVM.Reflection.Impl,PdbWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Impl\PdbWriter.cs,DefineLocalVariable2,The length of the statement  "	currentMethod.scopeStack.Peek ().locals [name] = new LocalVar (attributes' signature' addrKind' addr1' addr2' addr3' startOffset' endOffset); " is 141.
Long Statement,IKVM.Reflection.Impl,PdbWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Impl\PdbWriter.cs,InitWriter,The length of the statement  "		// pro-actively delete the .pdb to get a meaningful IOException' instead of COMInteropException if the file can't be overwritten (or is corrupt' or who knows what) " is 163.
Long Statement,IKVM.Reflection.Impl,PdbWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Impl\PdbWriter.cs,Close,The length of the statement  "			symUnmanagedWriter.DefineSequencePoints (doc' method.offsets.Length' method.offsets' method.lines' method.columns' method.endLines' method.endColumns); " is 151.
Long Statement,IKVM.Reflection.Impl,PdbWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Impl\PdbWriter.cs,GetMethodProps,The length of the statement  "	if (pdwAttr != IntPtr.Zero || ppvSigBlob != IntPtr.Zero || pcbSigBlob != IntPtr.Zero || pulCodeRVA != IntPtr.Zero || pdwImplFlags != IntPtr.Zero) { " is 147.
Long Statement,IKVM.Reflection.Impl,SymbolSupport,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Impl\SymbolSupport.cs,CreateSymbolWriterFor,The length of the statement  "				throw new NotSupportedException("IKVM.Reflection compiled with NO_SYMBOL_WRITER does not support writing debugging symbols.");" is 126.
Long Statement,IKVM.Reflection.Impl,SymbolSupport,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Impl\SymbolSupport.cs,CreateSymbolWriterFor,The length of the statement  "		throw new NotSupportedException ("IKVM.Reflection must be compiled with MONO defined to support writing Mono debugging symbols."); " is 130.
Long Statement,IKVM.Reflection.Metadata,TypeDefTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,GetRowSize,The length of the statement  "	return rsc.AddFixed (4).WriteStringIndex ().WriteStringIndex ().WriteTypeDefOrRef ().WriteField ().WriteMethodDef ().Value; " is 123.
Long Statement,IKVM.Reflection.Metadata,MemberRefTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,FindOrAddRecord,The length of the statement  "		if (records [i].Class == record.Class && records [i].Name == record.Name && records [i].Signature == record.Signature) { " is 120.
Long Statement,IKVM.Reflection.Metadata,AssemblyRefTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,FindOrAddRecord,The length of the statement  "		if (records [i].Name == rec.Name && records [i].MajorVersion == rec.MajorVersion && records [i].MinorVersion == rec.MinorVersion && records [i].BuildNumber == rec.BuildNumber && records [i].RevisionNumber == rec.RevisionNumber && records [i].Flags == rec.Flags && records [i].PublicKeyOrToken == rec.PublicKeyOrToken && records [i].Culture == rec.Culture) { " is 357.
Long Statement,IKVM.Reflection.Metadata,ExportedTypeTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,FindOrAddRecord,The length of the statement  "		if (records [i].Implementation == rec.Implementation && records [i].TypeName == rec.TypeName && records [i].TypeNamespace == rec.TypeNamespace) { " is 145.
Long Statement,IKVM.Reflection.Reader,AssemblyReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\AssemblyReader.cs,GetModuleIndex,The length of the statement  "		if (name.Equals (manifestModule.GetString (manifestModule.File.records [i].Name)' StringComparison.InvariantCultureIgnoreCase)) { " is 129.
Long Statement,IKVM.Reflection.Reader,AssemblyReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\AssemblyReader.cs,GetModule,The length of the statement  "	string location = Path.Combine (Path.GetDirectoryName (this.location)' manifestModule.GetString (manifestModule.File.records [index].Name)); " is 140.
Long Statement,IKVM.Reflection.Reader,AssemblyReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\AssemblyReader.cs,LoadModule,The length of the statement  "		return externalModules [index] = new ModuleReader (this' manifestModule.universe' new MemoryStream (rawModule)' location); " is 122.
Long Statement,IKVM.Reflection.Reader,FieldDefImpl,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\Field.cs,GetCustomAttributesData,The length of the statement  "	if ((this.Attributes & FieldAttributes.HasFieldMarshal) != 0 && (attributeType == null || attributeType.IsAssignableFrom (module.universe.System_Runtime_InteropServices_MarshalAsAttribute))) { " is 192.
Long Statement,IKVM.Reflection.Reader,FieldDefImpl,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\Field.cs,GetCustomAttributesData,The length of the statement  "	if (declaringType.IsExplicitLayout && (attributeType == null || attributeType.IsAssignableFrom (module.universe.System_Runtime_InteropServices_FieldOffsetAttribute))) { " is 168.
Long Statement,IKVM.Reflection.Reader,FieldDefImpl,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\Field.cs,GetCustomAttributesData,The length of the statement  "			ConstructorInfo constructor = module.universe.System_Runtime_InteropServices_FieldOffsetAttribute.GetPseudoCustomAttributeConstructor (module.universe.System_Int32); " is 165.
Long Statement,IKVM.Reflection.Reader,MethodDefImpl,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\Method.cs,PopulateParameters,The length of the statement  "		int end = module.MethodDef.records.Length > index + 1 ? module.MethodDef.records [index + 1].ParamList - 1 : module.Param.records.Length; " is 137.
Long Statement,IKVM.Reflection.Reader,MethodDefImpl,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\Method.cs,GetCustomAttributesData,The length of the statement  "	if ((this.Attributes & MethodAttributes.PinvokeImpl) != 0 && (attributeType == null || attributeType.IsAssignableFrom (module.universe.System_Runtime_InteropServices_DllImportAttribute))) { " is 189.
Long Statement,IKVM.Reflection.Reader,MethodDefImpl,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\Method.cs,CreateDllImportPseudoCustomAttribute,The length of the statement  "		AddNamedArgument (list' type' "PreserveSig"' (int)GetMethodImplementationFlags ()' (int)MethodImplAttributes.PreserveSig); " is 122.
Long Statement,IKVM.Reflection.Reader,MethodDefImpl,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\Method.cs,CreateDllImportPseudoCustomAttribute,The length of the statement  "		AddNamedArgument (list' type' "CallingConvention"' module.universe.System_Runtime_InteropServices_CallingConvention' (int)callingConvention); " is 141.
Long Statement,IKVM.Reflection.Reader,ParameterInfoImpl,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\Method.cs,__GetCustomModifiers,The length of the statement  "	return position == -1 ? method.MethodSignature.GetReturnTypeCustomModifiers (method) : method.MethodSignature.GetParameterCustomModifiers (method' position); " is 157.
Long Statement,IKVM.Reflection.Reader,ParameterInfoImpl,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\Method.cs,GetCustomAttributesData,The length of the statement  "	if ((this.Attributes & ParameterAttributes.HasFieldMarshal) != 0 && (attributeType == null || attributeType.IsAssignableFrom (this.Module.universe.System_Runtime_InteropServices_MarshalAsAttribute))) { " is 201.
Long Statement,IKVM.Reflection.Reader,ModuleReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ModuleReader.cs,ResolveAssemblyRefImpl,The length of the statement  "	string name = String.Format ("{0}' Version={1}.{2}.{3}.{4}' Culture={5}' {6}={7}"' GetString (rec.Name)' rec.MajorVersion' rec.MinorVersion' rec.BuildNumber' rec.RevisionNumber' rec.Culture == 0 ? "neutral" : GetString (rec.Culture)' (rec.Flags & PublicKey) == 0 ? "PublicKeyToken" : "PublicKey"' PublicKeyOrTokenToString (rec.PublicKeyOrToken)); " is 346.
Long Statement,IKVM.Reflection.Reader,ModuleReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ModuleReader.cs,TokenOutOfRangeException,The length of the statement  "	return new ArgumentOutOfRangeException ("metadataToken"' String.Format ("Token 0x{0:x8} is not valid in the scope of module {1}."' metadataToken' this.Name)); " is 158.
Long Statement,IKVM.Reflection.Reader,ModuleReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ModuleReader.cs,ResolveField,The length of the statement  "		throw new ArgumentException (String.Format ("Token 0x{0:x8} is not a valid FieldInfo token in the scope of module {1}."' metadataToken' this.Name)' "metadataToken"); " is 165.
Long Statement,IKVM.Reflection.Reader,ModuleReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ModuleReader.cs,ResolveMethod,The length of the statement  "		throw new ArgumentException (String.Format ("Token 0x{0:x8} is not a valid MethodBase token in the scope of module {1}."' metadataToken' this.Name)' "metadataToken"); " is 166.
Long Statement,IKVM.Reflection.Reader,ModuleReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ModuleReader.cs,ResolveMethod,The length of the statement  "		MethodInfo method = (MethodInfo)ResolveMethod (MethodSpec.records [index].Method' genericTypeArguments' genericMethodArguments); " is 128.
Long Statement,IKVM.Reflection.Reader,ModuleReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ModuleReader.cs,ResolveMethod,The length of the statement  "		return method.MakeGenericMethod (Signature.ReadMethodSpec (this' instantiation' new GenericContext (genericTypeArguments' genericMethodArguments))); " is 148.
Long Statement,IKVM.Reflection.Reader,ModuleReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ModuleReader.cs,__ResolveOptionalParameterTypes,The length of the statement  "		return Signature.ReadOptionalParameterTypes (this' GetBlob (sig)' new GenericContext (genericTypeArguments' genericMethodArguments)' out customModifiers); " is 154.
Long Statement,IKVM.Reflection.Reader,ModuleReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ModuleReader.cs,GetMemberRef,The length of the statement  "				MethodSignature methodSig = MethodSignature.ReadSig (this' ByteReader.FromBlob (blobHeap' sig)' new GenericContext (genericTypeArguments' genericMethodArguments)); " is 163.
Long Statement,IKVM.Reflection.Reader,ModuleReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ModuleReader.cs,__ResolveStandAloneMethodSig,The length of the statement  "		return MethodSignature.ReadStandAloneMethodSig (this' GetStandAloneSig (index)' new GenericContext (genericTypeArguments' genericMethodArguments)); " is 147.
Long Statement,IKVM.Reflection.Reader,ModuleReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ModuleReader.cs,__GetReferencedAssemblies,The length of the statement  "		name.Version = new Version (AssemblyRef.records [i].MajorVersion' AssemblyRef.records [i].MinorVersion' AssemblyRef.records [i].BuildNumber' AssemblyRef.records [i].RevisionNumber); " is 181.
Long Statement,IKVM.Reflection.Reader,ModuleReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ModuleReader.cs,ResolveExportedType,The length of the statement  "		return ResolveExportedType ((implementation & 0xFFFFFF) - 1).ResolveNestedType (typeName).SetMetadataTokenForMissing (token); " is 125.
Long Statement,IKVM.Reflection.Reader,PropertyInfoImpl,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\PropertyInfoImpl.cs,GetAccessors,The length of the statement  "	return module.MethodSemantics.GetMethods (module' this.MetadataToken' nonPublic' MethodSemanticsTable.Getter | MethodSemanticsTable.Setter | MethodSemanticsTable.Other); " is 169.
Long Statement,IKVM.Reflection.Reader,TypeDefImpl,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\TypeDefImpl.cs,__GetDeclaredEvents,The length of the statement  "		int end = module.EventMap.records.Length > i + 1 ? module.EventMap.records [i + 1].EventList - 1 : module.Event.records.Length; " is 127.
Long Statement,IKVM.Reflection.Reader,TypeDefImpl,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\TypeDefImpl.cs,__GetDeclaredFields,The length of the statement  "	int end = module.TypeDef.records.Length > index + 1 ? module.TypeDef.records [index + 1].FieldList - 1 : module.Field.records.Length; " is 133.
Long Statement,IKVM.Reflection.Reader,TypeDefImpl,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\TypeDefImpl.cs,__GetDeclaredMethods,The length of the statement  "	int end = module.TypeDef.records.Length > index + 1 ? module.TypeDef.records [index + 1].MethodList - 1 : module.MethodDef.records.Length; " is 138.
Long Statement,IKVM.Reflection.Reader,TypeDefImpl,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\TypeDefImpl.cs,__GetMethodImplMap,The length of the statement  "		MethodInfo declaration = (MethodInfo)module.ResolveMethod (module.MethodImpl.records [i].MethodDeclaration' typeArgs' null); " is 124.
Long Statement,IKVM.Reflection.Reader,TypeDefImpl,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\TypeDefImpl.cs,__GetDeclaredProperties,The length of the statement  "		int end = module.PropertyMap.records.Length > i + 1 ? module.PropertyMap.records [i + 1].PropertyList - 1 : module.Property.records.Length; " is 139.
Long Statement,IKVM.Reflection.Writer,UserStringHeap,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\Heaps.cs,Add,The length of the statement  "			throw new FileFormatLimitationExceededException ("No logical space left to create more user strings."' FileFormatLimitationExceededException.META_E_STRINGSPACE_FULL); " is 166.
Long Statement,IKVM.Reflection.Writer,ModuleWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ModuleWriter.cs,WriteModule,The length of the statement  "	WriteModule (keyPair' publicKey' moduleBuilder' fileKind' portableExecutableKind' imageFileMachine' resources' entryPointToken' null); " is 134.
Long Statement,IKVM.Reflection.Writer,ModuleWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ModuleWriter.cs,WriteModule,The length of the statement  "			WriteModuleImpl (keyPair' publicKey' moduleBuilder' fileKind' portableExecutableKind' imageFileMachine' resources' entryPointToken' fs); " is 136.
Long Statement,IKVM.Reflection.Writer,ModuleWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ModuleWriter.cs,WriteModule,The length of the statement  "		WriteModuleImpl (keyPair' publicKey' moduleBuilder' fileKind' portableExecutableKind' imageFileMachine' resources' entryPointToken' stream); " is 140.
Long Statement,IKVM.Reflection.Writer,ModuleWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ModuleWriter.cs,WriteModuleImpl,The length of the statement  "	moduleBuilder.ModuleTable.Add (0' moduleBuilder.Strings.Add (moduleBuilder.moduleName)' moduleBuilder.Guids.Add (moduleBuilder.ModuleVersionId)' 0' 0); " is 151.
Long Statement,IKVM.Reflection.Writer,ModuleWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ModuleWriter.cs,WriteModuleImpl,The length of the statement  "	text.Characteristics = SectionHeader.IMAGE_SCN_CNT_CODE | SectionHeader.IMAGE_SCN_MEM_EXECUTE | SectionHeader.IMAGE_SCN_MEM_READ; " is 129.
Long Statement,IKVM.Reflection.Writer,ModuleWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ModuleWriter.cs,WriteModuleImpl,The length of the statement  "	sdata.Characteristics = SectionHeader.IMAGE_SCN_CNT_INITIALIZED_DATA | SectionHeader.IMAGE_SCN_MEM_READ | SectionHeader.IMAGE_SCN_MEM_WRITE; " is 140.
Long Statement,IKVM.Reflection.Writer,ModuleWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ModuleWriter.cs,WriteModuleImpl,The length of the statement  "	reloc.Characteristics = SectionHeader.IMAGE_SCN_MEM_READ | SectionHeader.IMAGE_SCN_CNT_INITIALIZED_DATA | SectionHeader.IMAGE_SCN_MEM_DISCARDABLE; " is 146.
Long Statement,IKVM.Reflection.Writer,ModuleWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ModuleWriter.cs,WriteModuleImpl,The length of the statement  "		StrongName (stream' keyPair' writer.HeaderSize' text.PointerToRawData' code.StrongNameSignatureRVA - text.VirtualAddress + text.PointerToRawData' code.StrongNameSignatureLength); " is 178.
Long Statement,IKVM.Reflection.Writer,ModuleWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ModuleWriter.cs,ComputeStrongNameSignatureLength,The length of the statement  "		// it must be the ECMA pseudo public key' we don't know the key size of the real key' but currently both Mono and Microsoft use a 1024 bit key size " is 147.
Long Statement,IKVM.Reflection.Writer,ResourceSection,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ResourceSection.cs,AddManifest,The length of the statement  "	root [new OrdinalOrName (RT_MANIFEST)] [new OrdinalOrName (resourceID)] [new OrdinalOrName (0)].Data = ByteBuffer.Wrap (manifest); " is 130.
Long Statement,IKVM.Reflection.Writer,OrdinalOrName,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ResourceSection.cs,IsGreaterThan,The length of the statement  "	return this.Name == null ? this.Ordinal > other.Ordinal : String.Compare (this.Name' other.Name' StringComparison.OrdinalIgnoreCase) > 0; " is 137.
Long Statement,IKVM.Reflection.Writer,OrdinalOrName,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ResourceSection.cs,IsEqual,The length of the statement  "	return this.Name == null ? this.Ordinal == other.Ordinal : String.Compare (this.Name' other.Name' StringComparison.OrdinalIgnoreCase) == 0; " is 139.
Long Statement,IKVM.Reflection.Writer,TextSection,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\TextSection.cs,Write,The length of the statement  "	for (int i = (int)(ExportDirectoryRVA - (DebugDirectoryRVA + DebugDirectoryLength + DebugDirectoryContentsLength)); i > 0; i--) { " is 129.
Long Statement,IKVM.Reflection.Writer,VersionInfo,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\VersionInfo.cs,Write,The length of the statement  "		// AssemblyName.CultureInfo throws an ArgumentException if AssemblyBuilder.__SetAssemblyCulture() was used to specify a non-existing culture " is 140.
Complex Conditional,IKVM.Reflection,AssemblyName,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\AssemblyName.cs,AssemblyName,The conditional expression  "parsed.Culture == null || parsed.PublicKeyToken == null || parsed.Version == null || parsed.Version.Build == -1 || parsed.Version.Revision == -1"  is complex.
Complex Conditional,IKVM.Reflection,CustomAttributeData,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\CustomAttributeData.cs,AppendValue,The conditional expression  "elementType.IsPrimitive || elementType == type.Module.universe.System_Object || elementType == type.Module.universe.System_String || elementType == type.Module.universe.System_Type"  is complex.
Complex Conditional,IKVM.Reflection,Fusion,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Fusion.cs,ParseAssemblySimpleName,The conditional expression  "ch == '=' || (quoteOrComma == ''' && (ch == '\'' || ch == '"'))"  is complex.
Complex Conditional,IKVM.Reflection,Fusion,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Fusion.cs,ParseVersion,The conditional expression  "ushort.TryParse (parts [0]' System.Globalization.NumberStyles.Integer' null' out major) && ushort.TryParse (parts [1]' System.Globalization.NumberStyles.Integer' null' out minor) && (parts.Length <= 2 || parts [2] == "" || ushort.TryParse (parts [2]' System.Globalization.NumberStyles.Integer' null' out build)) && (parts.Length <= 3 || parts [3] == "" || (parts [2] != "" && ushort.TryParse (parts [3]' System.Globalization.NumberStyles.Integer' null' out revision)))"  is complex.
Complex Conditional,IKVM.Reflection.Emit,AssemblyBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\AssemblyBuilder.cs,__Save,The conditional expression  "!stream.CanRead || !stream.CanWrite || !stream.CanSeek || stream.Position != 0"  is complex.
Complex Conditional,IKVM.Reflection.Emit,AssemblyBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\AssemblyBuilder.cs,__DefineUnmanagedResource,The conditional expression  "versionInfo != null || win32icon != null || win32manifest != null || win32resources != null"  is complex.
Complex Conditional,IKVM.Reflection.Emit,CustomAttributeBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\CustomAttributeBuilder.cs,GetLegacyDeclSecurity,The conditional expression  "con.DeclaringType == con.Module.universe.System_Security_Permissions_PermissionSetAttribute && blob == null && (namedFields == null || namedFields.Length == 0) && namedProperties != null && namedProperties.Length == 1 && namedProperties [0].Name == "XML""  is complex.
Complex Conditional,IKVM.Reflection.Emit,ILGenerator,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ILGenerator.cs,Emit,The conditional expression  "(opc == OpCodes.Ldloc || opc == OpCodes.Ldloca || opc == OpCodes.Stloc) && local.LocalIndex < 256"  is complex.
Complex Conditional,IKVM.Reflection.Emit,ILGenerator,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ILGenerator.cs,WriteBody,The conditional expression  "locals.Count == 0 && exceptions.Count == 0 && maxStack <= 8 && code.Length < 64 && !fatHeader"  is complex.
Complex Conditional,IKVM.Reflection.Emit,ILGenerator,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ILGenerator.cs,WriteFatHeaderAndCode,The conditional expression  "block.tryOffset > 65535 || block.tryLength > 255 || block.handlerOffset > 65535 || block.handlerLength > 255"  is complex.
Complex Conditional,IKVM.Reflection.Emit,ModuleBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ModuleBuilder.cs,__Save,The conditional expression  "!stream.CanRead || !stream.CanWrite || !stream.CanSeek || stream.Position != 0"  is complex.
Complex Conditional,IKVM.Reflection.Impl,PdbWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Impl\PdbWriter.cs,GetMethodProps,The conditional expression  "pdwAttr != IntPtr.Zero || ppvSigBlob != IntPtr.Zero || pcbSigBlob != IntPtr.Zero || pulCodeRVA != IntPtr.Zero || pdwImplFlags != IntPtr.Zero"  is complex.
Complex Conditional,IKVM.Reflection.Metadata,AssemblyRefTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,FindOrAddRecord,The conditional expression  "records [i].Name == rec.Name && records [i].MajorVersion == rec.MajorVersion && records [i].MinorVersion == rec.MinorVersion && records [i].BuildNumber == rec.BuildNumber && records [i].RevisionNumber == rec.RevisionNumber && records [i].Flags == rec.Flags && records [i].PublicKeyOrToken == rec.PublicKeyOrToken && records [i].Culture == rec.Culture"  is complex.
Complex Conditional,IKVM.Reflection.Writer,UserStringHeap,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\Heaps.cs,WriteImpl,The conditional expression  "ch > 0x7E || (ch >= 0x01 && ch <= 0x08) || (ch >= 0x0E && ch <= 0x1F) || ch == 0x27 || ch == 0x2D"  is complex.
Empty Catch Block,IKVM.Reflection.Writer,ModuleWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ModuleWriter.cs,WriteModule,The method has an empty catch block.
Empty Catch Block,IKVM.Reflection.Writer,VersionInfo,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\VersionInfo.cs,Write,The method has an empty catch block.
Magic Number,IKVM.Reflection,AssemblyName,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\AssemblyName.cs,AssemblyName,The following statement contains a magic number: if (parsed.Version != null && parsed.Version.Major != 65535 && parsed.Version.Minor != 65535) {  	// our Fusion parser returns -1 for build and revision for incomplete version numbers (and we want 65535)  	version = new Version (parsed.Version.Major' parsed.Version.Minor' parsed.Version.Build & 0xFFFF' parsed.Version.Revision & 0xFFFF);  }  
Magic Number,IKVM.Reflection,AssemblyName,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\AssemblyName.cs,AssemblyName,The following statement contains a magic number: if (parsed.Version != null && parsed.Version.Major != 65535 && parsed.Version.Minor != 65535) {  	// our Fusion parser returns -1 for build and revision for incomplete version numbers (and we want 65535)  	version = new Version (parsed.Version.Major' parsed.Version.Minor' parsed.Version.Build & 0xFFFF' parsed.Version.Revision & 0xFFFF);  }  
Magic Number,IKVM.Reflection,AssemblyName,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\AssemblyName.cs,AssemblyName,The following statement contains a magic number: if (parsed.PublicKeyToken != null) {  	if (parsed.PublicKeyToken.Equals ("null"' StringComparison.InvariantCultureIgnoreCase)) {  		publicKeyToken = Empty<byte>.Array;  	} else if (parsed.PublicKeyToken.Length != 16) {  		throw new FileLoadException ();  	} else {  		publicKeyToken = new byte[8];  		for (int i = 0' pos = 0; i < publicKeyToken.Length; i++' pos += 2) {  			publicKeyToken [i] = (byte)("0123456789abcdef".IndexOf (char.ToLowerInvariant (parsed.PublicKeyToken [pos])) * 16 + "0123456789abcdef".IndexOf (char.ToLowerInvariant (parsed.PublicKeyToken [pos + 1])));  		}  	}  }  
Magic Number,IKVM.Reflection,AssemblyName,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\AssemblyName.cs,AssemblyName,The following statement contains a magic number: if (parsed.PublicKeyToken != null) {  	if (parsed.PublicKeyToken.Equals ("null"' StringComparison.InvariantCultureIgnoreCase)) {  		publicKeyToken = Empty<byte>.Array;  	} else if (parsed.PublicKeyToken.Length != 16) {  		throw new FileLoadException ();  	} else {  		publicKeyToken = new byte[8];  		for (int i = 0' pos = 0; i < publicKeyToken.Length; i++' pos += 2) {  			publicKeyToken [i] = (byte)("0123456789abcdef".IndexOf (char.ToLowerInvariant (parsed.PublicKeyToken [pos])) * 16 + "0123456789abcdef".IndexOf (char.ToLowerInvariant (parsed.PublicKeyToken [pos + 1])));  		}  	}  }  
Magic Number,IKVM.Reflection,AssemblyName,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\AssemblyName.cs,AssemblyName,The following statement contains a magic number: if (parsed.PublicKeyToken != null) {  	if (parsed.PublicKeyToken.Equals ("null"' StringComparison.InvariantCultureIgnoreCase)) {  		publicKeyToken = Empty<byte>.Array;  	} else if (parsed.PublicKeyToken.Length != 16) {  		throw new FileLoadException ();  	} else {  		publicKeyToken = new byte[8];  		for (int i = 0' pos = 0; i < publicKeyToken.Length; i++' pos += 2) {  			publicKeyToken [i] = (byte)("0123456789abcdef".IndexOf (char.ToLowerInvariant (parsed.PublicKeyToken [pos])) * 16 + "0123456789abcdef".IndexOf (char.ToLowerInvariant (parsed.PublicKeyToken [pos + 1])));  		}  	}  }  
Magic Number,IKVM.Reflection,AssemblyName,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\AssemblyName.cs,AssemblyName,The following statement contains a magic number: if (parsed.PublicKeyToken != null) {  	if (parsed.PublicKeyToken.Equals ("null"' StringComparison.InvariantCultureIgnoreCase)) {  		publicKeyToken = Empty<byte>.Array;  	} else if (parsed.PublicKeyToken.Length != 16) {  		throw new FileLoadException ();  	} else {  		publicKeyToken = new byte[8];  		for (int i = 0' pos = 0; i < publicKeyToken.Length; i++' pos += 2) {  			publicKeyToken [i] = (byte)("0123456789abcdef".IndexOf (char.ToLowerInvariant (parsed.PublicKeyToken [pos])) * 16 + "0123456789abcdef".IndexOf (char.ToLowerInvariant (parsed.PublicKeyToken [pos + 1])));  		}  	}  }  
Magic Number,IKVM.Reflection,AssemblyName,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\AssemblyName.cs,AssemblyName,The following statement contains a magic number: if (parsed.PublicKeyToken.Equals ("null"' StringComparison.InvariantCultureIgnoreCase)) {  	publicKeyToken = Empty<byte>.Array;  } else if (parsed.PublicKeyToken.Length != 16) {  	throw new FileLoadException ();  } else {  	publicKeyToken = new byte[8];  	for (int i = 0' pos = 0; i < publicKeyToken.Length; i++' pos += 2) {  		publicKeyToken [i] = (byte)("0123456789abcdef".IndexOf (char.ToLowerInvariant (parsed.PublicKeyToken [pos])) * 16 + "0123456789abcdef".IndexOf (char.ToLowerInvariant (parsed.PublicKeyToken [pos + 1])));  	}  }  
Magic Number,IKVM.Reflection,AssemblyName,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\AssemblyName.cs,AssemblyName,The following statement contains a magic number: if (parsed.PublicKeyToken.Equals ("null"' StringComparison.InvariantCultureIgnoreCase)) {  	publicKeyToken = Empty<byte>.Array;  } else if (parsed.PublicKeyToken.Length != 16) {  	throw new FileLoadException ();  } else {  	publicKeyToken = new byte[8];  	for (int i = 0' pos = 0; i < publicKeyToken.Length; i++' pos += 2) {  		publicKeyToken [i] = (byte)("0123456789abcdef".IndexOf (char.ToLowerInvariant (parsed.PublicKeyToken [pos])) * 16 + "0123456789abcdef".IndexOf (char.ToLowerInvariant (parsed.PublicKeyToken [pos + 1])));  	}  }  
Magic Number,IKVM.Reflection,AssemblyName,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\AssemblyName.cs,AssemblyName,The following statement contains a magic number: if (parsed.PublicKeyToken.Equals ("null"' StringComparison.InvariantCultureIgnoreCase)) {  	publicKeyToken = Empty<byte>.Array;  } else if (parsed.PublicKeyToken.Length != 16) {  	throw new FileLoadException ();  } else {  	publicKeyToken = new byte[8];  	for (int i = 0' pos = 0; i < publicKeyToken.Length; i++' pos += 2) {  		publicKeyToken [i] = (byte)("0123456789abcdef".IndexOf (char.ToLowerInvariant (parsed.PublicKeyToken [pos])) * 16 + "0123456789abcdef".IndexOf (char.ToLowerInvariant (parsed.PublicKeyToken [pos + 1])));  	}  }  
Magic Number,IKVM.Reflection,AssemblyName,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\AssemblyName.cs,AssemblyName,The following statement contains a magic number: if (parsed.PublicKeyToken.Equals ("null"' StringComparison.InvariantCultureIgnoreCase)) {  	publicKeyToken = Empty<byte>.Array;  } else if (parsed.PublicKeyToken.Length != 16) {  	throw new FileLoadException ();  } else {  	publicKeyToken = new byte[8];  	for (int i = 0' pos = 0; i < publicKeyToken.Length; i++' pos += 2) {  		publicKeyToken [i] = (byte)("0123456789abcdef".IndexOf (char.ToLowerInvariant (parsed.PublicKeyToken [pos])) * 16 + "0123456789abcdef".IndexOf (char.ToLowerInvariant (parsed.PublicKeyToken [pos + 1])));  	}  }  
Magic Number,IKVM.Reflection,AssemblyName,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\AssemblyName.cs,AssemblyName,The following statement contains a magic number: if (parsed.PublicKeyToken.Length != 16) {  	throw new FileLoadException ();  } else {  	publicKeyToken = new byte[8];  	for (int i = 0' pos = 0; i < publicKeyToken.Length; i++' pos += 2) {  		publicKeyToken [i] = (byte)("0123456789abcdef".IndexOf (char.ToLowerInvariant (parsed.PublicKeyToken [pos])) * 16 + "0123456789abcdef".IndexOf (char.ToLowerInvariant (parsed.PublicKeyToken [pos + 1])));  	}  }  
Magic Number,IKVM.Reflection,AssemblyName,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\AssemblyName.cs,AssemblyName,The following statement contains a magic number: if (parsed.PublicKeyToken.Length != 16) {  	throw new FileLoadException ();  } else {  	publicKeyToken = new byte[8];  	for (int i = 0' pos = 0; i < publicKeyToken.Length; i++' pos += 2) {  		publicKeyToken [i] = (byte)("0123456789abcdef".IndexOf (char.ToLowerInvariant (parsed.PublicKeyToken [pos])) * 16 + "0123456789abcdef".IndexOf (char.ToLowerInvariant (parsed.PublicKeyToken [pos + 1])));  	}  }  
Magic Number,IKVM.Reflection,AssemblyName,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\AssemblyName.cs,AssemblyName,The following statement contains a magic number: if (parsed.PublicKeyToken.Length != 16) {  	throw new FileLoadException ();  } else {  	publicKeyToken = new byte[8];  	for (int i = 0' pos = 0; i < publicKeyToken.Length; i++' pos += 2) {  		publicKeyToken [i] = (byte)("0123456789abcdef".IndexOf (char.ToLowerInvariant (parsed.PublicKeyToken [pos])) * 16 + "0123456789abcdef".IndexOf (char.ToLowerInvariant (parsed.PublicKeyToken [pos + 1])));  	}  }  
Magic Number,IKVM.Reflection,AssemblyName,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\AssemblyName.cs,AssemblyName,The following statement contains a magic number: if (parsed.PublicKeyToken.Length != 16) {  	throw new FileLoadException ();  } else {  	publicKeyToken = new byte[8];  	for (int i = 0' pos = 0; i < publicKeyToken.Length; i++' pos += 2) {  		publicKeyToken [i] = (byte)("0123456789abcdef".IndexOf (char.ToLowerInvariant (parsed.PublicKeyToken [pos])) * 16 + "0123456789abcdef".IndexOf (char.ToLowerInvariant (parsed.PublicKeyToken [pos + 1])));  	}  }  
Magic Number,IKVM.Reflection,AssemblyName,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\AssemblyName.cs,AssemblyName,The following statement contains a magic number: publicKeyToken = new byte[8];  
Magic Number,IKVM.Reflection,AssemblyName,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\AssemblyName.cs,AssemblyName,The following statement contains a magic number: for (int i = 0' pos = 0; i < publicKeyToken.Length; i++' pos += 2) {  	publicKeyToken [i] = (byte)("0123456789abcdef".IndexOf (char.ToLowerInvariant (parsed.PublicKeyToken [pos])) * 16 + "0123456789abcdef".IndexOf (char.ToLowerInvariant (parsed.PublicKeyToken [pos + 1])));  }  
Magic Number,IKVM.Reflection,AssemblyName,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\AssemblyName.cs,AssemblyName,The following statement contains a magic number: for (int i = 0' pos = 0; i < publicKeyToken.Length; i++' pos += 2) {  	publicKeyToken [i] = (byte)("0123456789abcdef".IndexOf (char.ToLowerInvariant (parsed.PublicKeyToken [pos])) * 16 + "0123456789abcdef".IndexOf (char.ToLowerInvariant (parsed.PublicKeyToken [pos + 1])));  }  
Magic Number,IKVM.Reflection,AssemblyName,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\AssemblyName.cs,AssemblyName,The following statement contains a magic number: pos += 2
Magic Number,IKVM.Reflection,AssemblyName,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\AssemblyName.cs,AssemblyName,The following statement contains a magic number: publicKeyToken [i] = (byte)("0123456789abcdef".IndexOf (char.ToLowerInvariant (parsed.PublicKeyToken [pos])) * 16 + "0123456789abcdef".IndexOf (char.ToLowerInvariant (parsed.PublicKeyToken [pos + 1])));  
Magic Number,IKVM.Reflection,AssemblyName,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\AssemblyName.cs,AppendPublicKey,The following statement contains a magic number: for (int i = 0; i < publicKey.Length; i++) {  	sb.Append ("0123456789abcdef" [publicKey [i] >> 4]);  	sb.Append ("0123456789abcdef" [publicKey [i] & 0x0F]);  }  
Magic Number,IKVM.Reflection,AssemblyName,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\AssemblyName.cs,AppendPublicKey,The following statement contains a magic number: sb.Append ("0123456789abcdef" [publicKey [i] >> 4]);  
Magic Number,IKVM.Reflection,DefaultBinder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Binder.cs,SelectBestMatch,The following statement contains a magic number: switch (MatchSignatures (mb1.MethodSignature' mb2.MethodSignature' types)) {  case 1:  	return mb1;  case 2:  	return mb2;  }  
Magic Number,IKVM.Reflection,DefaultBinder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Binder.cs,MatchTypes,The following statement contains a magic number: if (type2 == type) {  	return 2;  }  
Magic Number,IKVM.Reflection,DefaultBinder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Binder.cs,MatchTypes,The following statement contains a magic number: return 2;  
Magic Number,IKVM.Reflection,DefaultBinder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Binder.cs,MatchTypes,The following statement contains a magic number: return conv == type2.IsAssignableFrom (type1) ? 0 : conv ? 2 : 1;  
Magic Number,IKVM.Reflection,DefaultBinder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Binder.cs,SelectProperty,The following statement contains a magic number: for (int i = 1; i < matchCount; i++) {  	int best = MatchTypes (bestMatch.PropertyType' match [i].PropertyType' returnType);  	if (best == 0 && indexes != null) {  		best = MatchSignatures (bestMatch.PropertySignature' match [i].PropertySignature' indexes);  	}  	if (best == 0) {  		int depth1 = GetInheritanceDepth (bestMatch.DeclaringType);  		int depth2 = GetInheritanceDepth (match [i].DeclaringType);  		if (bestMatch.Name == match [i].Name && depth1 != depth2) {  			if (depth1 > depth2) {  				best = 1;  			} else {  				best = 2;  			}  		} else {  			ambiguous = true;  		}  	}  	if (best == 2) {  		ambiguous = false;  		bestMatch = match [i];  	}  }  
Magic Number,IKVM.Reflection,DefaultBinder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Binder.cs,SelectProperty,The following statement contains a magic number: for (int i = 1; i < matchCount; i++) {  	int best = MatchTypes (bestMatch.PropertyType' match [i].PropertyType' returnType);  	if (best == 0 && indexes != null) {  		best = MatchSignatures (bestMatch.PropertySignature' match [i].PropertySignature' indexes);  	}  	if (best == 0) {  		int depth1 = GetInheritanceDepth (bestMatch.DeclaringType);  		int depth2 = GetInheritanceDepth (match [i].DeclaringType);  		if (bestMatch.Name == match [i].Name && depth1 != depth2) {  			if (depth1 > depth2) {  				best = 1;  			} else {  				best = 2;  			}  		} else {  			ambiguous = true;  		}  	}  	if (best == 2) {  		ambiguous = false;  		bestMatch = match [i];  	}  }  
Magic Number,IKVM.Reflection,DefaultBinder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Binder.cs,SelectProperty,The following statement contains a magic number: if (best == 0) {  	int depth1 = GetInheritanceDepth (bestMatch.DeclaringType);  	int depth2 = GetInheritanceDepth (match [i].DeclaringType);  	if (bestMatch.Name == match [i].Name && depth1 != depth2) {  		if (depth1 > depth2) {  			best = 1;  		} else {  			best = 2;  		}  	} else {  		ambiguous = true;  	}  }  
Magic Number,IKVM.Reflection,DefaultBinder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Binder.cs,SelectProperty,The following statement contains a magic number: if (bestMatch.Name == match [i].Name && depth1 != depth2) {  	if (depth1 > depth2) {  		best = 1;  	} else {  		best = 2;  	}  } else {  	ambiguous = true;  }  
Magic Number,IKVM.Reflection,DefaultBinder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Binder.cs,SelectProperty,The following statement contains a magic number: if (depth1 > depth2) {  	best = 1;  } else {  	best = 2;  }  
Magic Number,IKVM.Reflection,DefaultBinder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Binder.cs,SelectProperty,The following statement contains a magic number: best = 2;  
Magic Number,IKVM.Reflection,DefaultBinder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Binder.cs,SelectProperty,The following statement contains a magic number: if (best == 2) {  	ambiguous = false;  	bestMatch = match [i];  }  
Magic Number,IKVM.Reflection,CustomAttributeData,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\CustomAttributeData.cs,ReadDeclarativeSecurity,The following statement contains a magic number: if (br.PeekByte () == '.') {  	br.ReadByte ();  	int count = br.ReadCompressedInt ();  	for (int j = 0; j < count; j++) {  		Type type = ReadType (asm' br);  		ConstructorInfo constructor = type.GetPseudoCustomAttributeConstructor (u.System_Security_Permissions_SecurityAction);  		// LAMESPEC there is an additional length here (probably of the named argument list)  		byte[] blob = br.ReadBytes (br.ReadCompressedInt ());  		list.Add (new CustomAttributeData (asm' constructor' action' blob' index));  	}  } else {  	// .NET 1.x format (xml)  	char[] buf = new char[br.Length / 2];  	for (int i = 0; i < buf.Length; i++) {  		buf [i] = br.ReadChar ();  	}  	string xml = new String (buf);  	ConstructorInfo constructor = u.System_Security_Permissions_PermissionSetAttribute.GetPseudoCustomAttributeConstructor (u.System_Security_Permissions_SecurityAction);  	List<CustomAttributeNamedArgument> args = new List<CustomAttributeNamedArgument> ();  	args.Add (new CustomAttributeNamedArgument (GetProperty (u.System_Security_Permissions_PermissionSetAttribute' "XML"' u.System_String)' new CustomAttributeTypedArgument (u.System_String' xml)));  	list.Add (new CustomAttributeData (asm.ManifestModule' constructor' new object[] {  		action  	}' args));  }  
Magic Number,IKVM.Reflection,CustomAttributeNamedArgument,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\CustomAttributeNamedArgument.cs,GetHashCode,The following statement contains a magic number: return member.GetHashCode () ^ 53 * value.GetHashCode ();  
Magic Number,IKVM.Reflection,CustomAttributeTypedArgument,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\CustomAttributeTypedArgument.cs,GetHashCode,The following statement contains a magic number: return type.GetHashCode () ^ 77 * (value == null ? 0 : value.GetHashCode ());  
Magic Number,IKVM.Reflection,Fusion,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Fusion.cs,ParseAssemblyName,The following statement contains a magic number: if (res != ParseAssemblyResult.OK || pos == fullName.Length) {  	return res;  } else {  	System.Collections.Generic.Dictionary<string' string> unknownAttributes = null;  	bool hasProcessorArchitecture = false;  	string[] parts = fullName.Substring (pos).Split (''');  	for (int i = 0; i < parts.Length; i++) {  		string[] kv = parts [i].Split ('=');  		if (kv.Length != 2) {  			return ParseAssemblyResult.GenericError;  		}  		switch (kv [0].Trim ().ToLowerInvariant ()) {  		case "version":  			if (parsedName.Version != null) {  				return ParseAssemblyResult.DuplicateKey;  			}  			if (!ParseVersion (kv [1].Trim ()' out parsedName.Version)) {  				return ParseAssemblyResult.GenericError;  			}  			break;  		case "culture":  			if (parsedName.Culture != null) {  				return ParseAssemblyResult.DuplicateKey;  			}  			if (!ParseCulture (kv [1].Trim ()' out parsedName.Culture)) {  				return ParseAssemblyResult.GenericError;  			}  			break;  		case "publickeytoken":  			if (parsedName.PublicKeyToken != null) {  				return ParseAssemblyResult.DuplicateKey;  			}  			if (!ParsePublicKeyToken (kv [1].Trim ()' out parsedName.PublicKeyToken)) {  				return ParseAssemblyResult.GenericError;  			}  			break;  		case "publickey":  			if (parsedName.PublicKeyToken != null) {  				return ParseAssemblyResult.DuplicateKey;  			}  			if (!ParsePublicKey (kv [1].Trim ()' out parsedName.PublicKeyToken)) {  				return ParseAssemblyResult.GenericError;  			}  			parsedName.HasPublicKey = true;  			break;  		case "retargetable":  			if (parsedName.Retargetable.HasValue) {  				return ParseAssemblyResult.DuplicateKey;  			}  			switch (kv [1].Trim ().ToLowerInvariant ()) {  			case "yes":  				parsedName.Retargetable = true;  				break;  			case "no":  				parsedName.Retargetable = false;  				break;  			default:  				return ParseAssemblyResult.GenericError;  			}  			break;  		case "processorarchitecture":  			if (hasProcessorArchitecture) {  				return ParseAssemblyResult.DuplicateKey;  			}  			hasProcessorArchitecture = true;  			switch (kv [1].Trim ().ToLowerInvariant ()) {  			case "none":  				parsedName.ProcessorArchitecture = ProcessorArchitecture.None;  				break;  			case "msil":  				parsedName.ProcessorArchitecture = ProcessorArchitecture.MSIL;  				break;  			case "x86":  				parsedName.ProcessorArchitecture = ProcessorArchitecture.X86;  				break;  			case "ia64":  				parsedName.ProcessorArchitecture = ProcessorArchitecture.IA64;  				break;  			case "amd64":  				parsedName.ProcessorArchitecture = ProcessorArchitecture.Amd64;  				break;  			case "arm":  				parsedName.ProcessorArchitecture = ProcessorArchitecture.Arm;  				break;  			default:  				return ParseAssemblyResult.GenericError;  			}  			break;  		default:  			if (kv [1].Trim () == "") {  				return ParseAssemblyResult.GenericError;  			}  			if (unknownAttributes == null) {  				unknownAttributes = new System.Collections.Generic.Dictionary<string' string> ();  			}  			if (unknownAttributes.ContainsKey (kv [0].Trim ().ToLowerInvariant ())) {  				return ParseAssemblyResult.DuplicateKey;  			}  			unknownAttributes.Add (kv [0].Trim ().ToLowerInvariant ()' null);  			break;  		}  	}  }  
Magic Number,IKVM.Reflection,Fusion,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Fusion.cs,ParseAssemblyName,The following statement contains a magic number: for (int i = 0; i < parts.Length; i++) {  	string[] kv = parts [i].Split ('=');  	if (kv.Length != 2) {  		return ParseAssemblyResult.GenericError;  	}  	switch (kv [0].Trim ().ToLowerInvariant ()) {  	case "version":  		if (parsedName.Version != null) {  			return ParseAssemblyResult.DuplicateKey;  		}  		if (!ParseVersion (kv [1].Trim ()' out parsedName.Version)) {  			return ParseAssemblyResult.GenericError;  		}  		break;  	case "culture":  		if (parsedName.Culture != null) {  			return ParseAssemblyResult.DuplicateKey;  		}  		if (!ParseCulture (kv [1].Trim ()' out parsedName.Culture)) {  			return ParseAssemblyResult.GenericError;  		}  		break;  	case "publickeytoken":  		if (parsedName.PublicKeyToken != null) {  			return ParseAssemblyResult.DuplicateKey;  		}  		if (!ParsePublicKeyToken (kv [1].Trim ()' out parsedName.PublicKeyToken)) {  			return ParseAssemblyResult.GenericError;  		}  		break;  	case "publickey":  		if (parsedName.PublicKeyToken != null) {  			return ParseAssemblyResult.DuplicateKey;  		}  		if (!ParsePublicKey (kv [1].Trim ()' out parsedName.PublicKeyToken)) {  			return ParseAssemblyResult.GenericError;  		}  		parsedName.HasPublicKey = true;  		break;  	case "retargetable":  		if (parsedName.Retargetable.HasValue) {  			return ParseAssemblyResult.DuplicateKey;  		}  		switch (kv [1].Trim ().ToLowerInvariant ()) {  		case "yes":  			parsedName.Retargetable = true;  			break;  		case "no":  			parsedName.Retargetable = false;  			break;  		default:  			return ParseAssemblyResult.GenericError;  		}  		break;  	case "processorarchitecture":  		if (hasProcessorArchitecture) {  			return ParseAssemblyResult.DuplicateKey;  		}  		hasProcessorArchitecture = true;  		switch (kv [1].Trim ().ToLowerInvariant ()) {  		case "none":  			parsedName.ProcessorArchitecture = ProcessorArchitecture.None;  			break;  		case "msil":  			parsedName.ProcessorArchitecture = ProcessorArchitecture.MSIL;  			break;  		case "x86":  			parsedName.ProcessorArchitecture = ProcessorArchitecture.X86;  			break;  		case "ia64":  			parsedName.ProcessorArchitecture = ProcessorArchitecture.IA64;  			break;  		case "amd64":  			parsedName.ProcessorArchitecture = ProcessorArchitecture.Amd64;  			break;  		case "arm":  			parsedName.ProcessorArchitecture = ProcessorArchitecture.Arm;  			break;  		default:  			return ParseAssemblyResult.GenericError;  		}  		break;  	default:  		if (kv [1].Trim () == "") {  			return ParseAssemblyResult.GenericError;  		}  		if (unknownAttributes == null) {  			unknownAttributes = new System.Collections.Generic.Dictionary<string' string> ();  		}  		if (unknownAttributes.ContainsKey (kv [0].Trim ().ToLowerInvariant ())) {  			return ParseAssemblyResult.DuplicateKey;  		}  		unknownAttributes.Add (kv [0].Trim ().ToLowerInvariant ()' null);  		break;  	}  }  
Magic Number,IKVM.Reflection,Fusion,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Fusion.cs,ParseAssemblyName,The following statement contains a magic number: if (kv.Length != 2) {  	return ParseAssemblyResult.GenericError;  }  
Magic Number,IKVM.Reflection,Fusion,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Fusion.cs,ParseVersion,The following statement contains a magic number: if (parts.Length < 2 || parts.Length > 4) {  	version = null;  	ushort dummy;  	// if the version consists of a single integer' it is invalid' but not invalid enough to fail the parse of the whole assembly name  	return parts.Length == 1 && ushort.TryParse (parts [0]' System.Globalization.NumberStyles.Integer' null' out dummy);  }  
Magic Number,IKVM.Reflection,Fusion,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Fusion.cs,ParseVersion,The following statement contains a magic number: if (parts.Length < 2 || parts.Length > 4) {  	version = null;  	ushort dummy;  	// if the version consists of a single integer' it is invalid' but not invalid enough to fail the parse of the whole assembly name  	return parts.Length == 1 && ushort.TryParse (parts [0]' System.Globalization.NumberStyles.Integer' null' out dummy);  }  
Magic Number,IKVM.Reflection,Fusion,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Fusion.cs,ParseVersion,The following statement contains a magic number: if (ushort.TryParse (parts [0]' System.Globalization.NumberStyles.Integer' null' out major) && ushort.TryParse (parts [1]' System.Globalization.NumberStyles.Integer' null' out minor) && (parts.Length <= 2 || parts [2] == "" || ushort.TryParse (parts [2]' System.Globalization.NumberStyles.Integer' null' out build)) && (parts.Length <= 3 || parts [3] == "" || (parts [2] != "" && ushort.TryParse (parts [3]' System.Globalization.NumberStyles.Integer' null' out revision)))) {  	if (parts.Length == 4 && parts [3] != "" && parts [2] != "") {  		version = new Version (major' minor' build' revision);  	} else if (parts.Length == 3 && parts [2] != "") {  		version = new Version (major' minor' build);  	} else {  		version = new Version (major' minor);  	}  	return true;  }  
Magic Number,IKVM.Reflection,Fusion,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Fusion.cs,ParseVersion,The following statement contains a magic number: if (ushort.TryParse (parts [0]' System.Globalization.NumberStyles.Integer' null' out major) && ushort.TryParse (parts [1]' System.Globalization.NumberStyles.Integer' null' out minor) && (parts.Length <= 2 || parts [2] == "" || ushort.TryParse (parts [2]' System.Globalization.NumberStyles.Integer' null' out build)) && (parts.Length <= 3 || parts [3] == "" || (parts [2] != "" && ushort.TryParse (parts [3]' System.Globalization.NumberStyles.Integer' null' out revision)))) {  	if (parts.Length == 4 && parts [3] != "" && parts [2] != "") {  		version = new Version (major' minor' build' revision);  	} else if (parts.Length == 3 && parts [2] != "") {  		version = new Version (major' minor' build);  	} else {  		version = new Version (major' minor);  	}  	return true;  }  
Magic Number,IKVM.Reflection,Fusion,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Fusion.cs,ParseVersion,The following statement contains a magic number: if (ushort.TryParse (parts [0]' System.Globalization.NumberStyles.Integer' null' out major) && ushort.TryParse (parts [1]' System.Globalization.NumberStyles.Integer' null' out minor) && (parts.Length <= 2 || parts [2] == "" || ushort.TryParse (parts [2]' System.Globalization.NumberStyles.Integer' null' out build)) && (parts.Length <= 3 || parts [3] == "" || (parts [2] != "" && ushort.TryParse (parts [3]' System.Globalization.NumberStyles.Integer' null' out revision)))) {  	if (parts.Length == 4 && parts [3] != "" && parts [2] != "") {  		version = new Version (major' minor' build' revision);  	} else if (parts.Length == 3 && parts [2] != "") {  		version = new Version (major' minor' build);  	} else {  		version = new Version (major' minor);  	}  	return true;  }  
Magic Number,IKVM.Reflection,Fusion,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Fusion.cs,ParseVersion,The following statement contains a magic number: if (ushort.TryParse (parts [0]' System.Globalization.NumberStyles.Integer' null' out major) && ushort.TryParse (parts [1]' System.Globalization.NumberStyles.Integer' null' out minor) && (parts.Length <= 2 || parts [2] == "" || ushort.TryParse (parts [2]' System.Globalization.NumberStyles.Integer' null' out build)) && (parts.Length <= 3 || parts [3] == "" || (parts [2] != "" && ushort.TryParse (parts [3]' System.Globalization.NumberStyles.Integer' null' out revision)))) {  	if (parts.Length == 4 && parts [3] != "" && parts [2] != "") {  		version = new Version (major' minor' build' revision);  	} else if (parts.Length == 3 && parts [2] != "") {  		version = new Version (major' minor' build);  	} else {  		version = new Version (major' minor);  	}  	return true;  }  
Magic Number,IKVM.Reflection,Fusion,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Fusion.cs,ParseVersion,The following statement contains a magic number: if (ushort.TryParse (parts [0]' System.Globalization.NumberStyles.Integer' null' out major) && ushort.TryParse (parts [1]' System.Globalization.NumberStyles.Integer' null' out minor) && (parts.Length <= 2 || parts [2] == "" || ushort.TryParse (parts [2]' System.Globalization.NumberStyles.Integer' null' out build)) && (parts.Length <= 3 || parts [3] == "" || (parts [2] != "" && ushort.TryParse (parts [3]' System.Globalization.NumberStyles.Integer' null' out revision)))) {  	if (parts.Length == 4 && parts [3] != "" && parts [2] != "") {  		version = new Version (major' minor' build' revision);  	} else if (parts.Length == 3 && parts [2] != "") {  		version = new Version (major' minor' build);  	} else {  		version = new Version (major' minor);  	}  	return true;  }  
Magic Number,IKVM.Reflection,Fusion,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Fusion.cs,ParseVersion,The following statement contains a magic number: if (ushort.TryParse (parts [0]' System.Globalization.NumberStyles.Integer' null' out major) && ushort.TryParse (parts [1]' System.Globalization.NumberStyles.Integer' null' out minor) && (parts.Length <= 2 || parts [2] == "" || ushort.TryParse (parts [2]' System.Globalization.NumberStyles.Integer' null' out build)) && (parts.Length <= 3 || parts [3] == "" || (parts [2] != "" && ushort.TryParse (parts [3]' System.Globalization.NumberStyles.Integer' null' out revision)))) {  	if (parts.Length == 4 && parts [3] != "" && parts [2] != "") {  		version = new Version (major' minor' build' revision);  	} else if (parts.Length == 3 && parts [2] != "") {  		version = new Version (major' minor' build);  	} else {  		version = new Version (major' minor);  	}  	return true;  }  
Magic Number,IKVM.Reflection,Fusion,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Fusion.cs,ParseVersion,The following statement contains a magic number: if (ushort.TryParse (parts [0]' System.Globalization.NumberStyles.Integer' null' out major) && ushort.TryParse (parts [1]' System.Globalization.NumberStyles.Integer' null' out minor) && (parts.Length <= 2 || parts [2] == "" || ushort.TryParse (parts [2]' System.Globalization.NumberStyles.Integer' null' out build)) && (parts.Length <= 3 || parts [3] == "" || (parts [2] != "" && ushort.TryParse (parts [3]' System.Globalization.NumberStyles.Integer' null' out revision)))) {  	if (parts.Length == 4 && parts [3] != "" && parts [2] != "") {  		version = new Version (major' minor' build' revision);  	} else if (parts.Length == 3 && parts [2] != "") {  		version = new Version (major' minor' build);  	} else {  		version = new Version (major' minor);  	}  	return true;  }  
Magic Number,IKVM.Reflection,Fusion,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Fusion.cs,ParseVersion,The following statement contains a magic number: if (ushort.TryParse (parts [0]' System.Globalization.NumberStyles.Integer' null' out major) && ushort.TryParse (parts [1]' System.Globalization.NumberStyles.Integer' null' out minor) && (parts.Length <= 2 || parts [2] == "" || ushort.TryParse (parts [2]' System.Globalization.NumberStyles.Integer' null' out build)) && (parts.Length <= 3 || parts [3] == "" || (parts [2] != "" && ushort.TryParse (parts [3]' System.Globalization.NumberStyles.Integer' null' out revision)))) {  	if (parts.Length == 4 && parts [3] != "" && parts [2] != "") {  		version = new Version (major' minor' build' revision);  	} else if (parts.Length == 3 && parts [2] != "") {  		version = new Version (major' minor' build);  	} else {  		version = new Version (major' minor);  	}  	return true;  }  
Magic Number,IKVM.Reflection,Fusion,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Fusion.cs,ParseVersion,The following statement contains a magic number: if (ushort.TryParse (parts [0]' System.Globalization.NumberStyles.Integer' null' out major) && ushort.TryParse (parts [1]' System.Globalization.NumberStyles.Integer' null' out minor) && (parts.Length <= 2 || parts [2] == "" || ushort.TryParse (parts [2]' System.Globalization.NumberStyles.Integer' null' out build)) && (parts.Length <= 3 || parts [3] == "" || (parts [2] != "" && ushort.TryParse (parts [3]' System.Globalization.NumberStyles.Integer' null' out revision)))) {  	if (parts.Length == 4 && parts [3] != "" && parts [2] != "") {  		version = new Version (major' minor' build' revision);  	} else if (parts.Length == 3 && parts [2] != "") {  		version = new Version (major' minor' build);  	} else {  		version = new Version (major' minor);  	}  	return true;  }  
Magic Number,IKVM.Reflection,Fusion,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Fusion.cs,ParseVersion,The following statement contains a magic number: if (ushort.TryParse (parts [0]' System.Globalization.NumberStyles.Integer' null' out major) && ushort.TryParse (parts [1]' System.Globalization.NumberStyles.Integer' null' out minor) && (parts.Length <= 2 || parts [2] == "" || ushort.TryParse (parts [2]' System.Globalization.NumberStyles.Integer' null' out build)) && (parts.Length <= 3 || parts [3] == "" || (parts [2] != "" && ushort.TryParse (parts [3]' System.Globalization.NumberStyles.Integer' null' out revision)))) {  	if (parts.Length == 4 && parts [3] != "" && parts [2] != "") {  		version = new Version (major' minor' build' revision);  	} else if (parts.Length == 3 && parts [2] != "") {  		version = new Version (major' minor' build);  	} else {  		version = new Version (major' minor);  	}  	return true;  }  
Magic Number,IKVM.Reflection,Fusion,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Fusion.cs,ParseVersion,The following statement contains a magic number: if (ushort.TryParse (parts [0]' System.Globalization.NumberStyles.Integer' null' out major) && ushort.TryParse (parts [1]' System.Globalization.NumberStyles.Integer' null' out minor) && (parts.Length <= 2 || parts [2] == "" || ushort.TryParse (parts [2]' System.Globalization.NumberStyles.Integer' null' out build)) && (parts.Length <= 3 || parts [3] == "" || (parts [2] != "" && ushort.TryParse (parts [3]' System.Globalization.NumberStyles.Integer' null' out revision)))) {  	if (parts.Length == 4 && parts [3] != "" && parts [2] != "") {  		version = new Version (major' minor' build' revision);  	} else if (parts.Length == 3 && parts [2] != "") {  		version = new Version (major' minor' build);  	} else {  		version = new Version (major' minor);  	}  	return true;  }  
Magic Number,IKVM.Reflection,Fusion,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Fusion.cs,ParseVersion,The following statement contains a magic number: if (ushort.TryParse (parts [0]' System.Globalization.NumberStyles.Integer' null' out major) && ushort.TryParse (parts [1]' System.Globalization.NumberStyles.Integer' null' out minor) && (parts.Length <= 2 || parts [2] == "" || ushort.TryParse (parts [2]' System.Globalization.NumberStyles.Integer' null' out build)) && (parts.Length <= 3 || parts [3] == "" || (parts [2] != "" && ushort.TryParse (parts [3]' System.Globalization.NumberStyles.Integer' null' out revision)))) {  	if (parts.Length == 4 && parts [3] != "" && parts [2] != "") {  		version = new Version (major' minor' build' revision);  	} else if (parts.Length == 3 && parts [2] != "") {  		version = new Version (major' minor' build);  	} else {  		version = new Version (major' minor);  	}  	return true;  }  
Magic Number,IKVM.Reflection,Fusion,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Fusion.cs,ParseVersion,The following statement contains a magic number: if (parts.Length == 4 && parts [3] != "" && parts [2] != "") {  	version = new Version (major' minor' build' revision);  } else if (parts.Length == 3 && parts [2] != "") {  	version = new Version (major' minor' build);  } else {  	version = new Version (major' minor);  }  
Magic Number,IKVM.Reflection,Fusion,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Fusion.cs,ParseVersion,The following statement contains a magic number: if (parts.Length == 4 && parts [3] != "" && parts [2] != "") {  	version = new Version (major' minor' build' revision);  } else if (parts.Length == 3 && parts [2] != "") {  	version = new Version (major' minor' build);  } else {  	version = new Version (major' minor);  }  
Magic Number,IKVM.Reflection,Fusion,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Fusion.cs,ParseVersion,The following statement contains a magic number: if (parts.Length == 4 && parts [3] != "" && parts [2] != "") {  	version = new Version (major' minor' build' revision);  } else if (parts.Length == 3 && parts [2] != "") {  	version = new Version (major' minor' build);  } else {  	version = new Version (major' minor);  }  
Magic Number,IKVM.Reflection,Fusion,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Fusion.cs,ParseVersion,The following statement contains a magic number: if (parts.Length == 4 && parts [3] != "" && parts [2] != "") {  	version = new Version (major' minor' build' revision);  } else if (parts.Length == 3 && parts [2] != "") {  	version = new Version (major' minor' build);  } else {  	version = new Version (major' minor);  }  
Magic Number,IKVM.Reflection,Fusion,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Fusion.cs,ParseVersion,The following statement contains a magic number: if (parts.Length == 4 && parts [3] != "" && parts [2] != "") {  	version = new Version (major' minor' build' revision);  } else if (parts.Length == 3 && parts [2] != "") {  	version = new Version (major' minor' build);  } else {  	version = new Version (major' minor);  }  
Magic Number,IKVM.Reflection,Fusion,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Fusion.cs,ParseVersion,The following statement contains a magic number: if (parts.Length == 3 && parts [2] != "") {  	version = new Version (major' minor' build);  } else {  	version = new Version (major' minor);  }  
Magic Number,IKVM.Reflection,Fusion,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Fusion.cs,ParseVersion,The following statement contains a magic number: if (parts.Length == 3 && parts [2] != "") {  	version = new Version (major' minor' build);  } else {  	version = new Version (major' minor);  }  
Magic Number,IKVM.Reflection,GenericMethodInstance,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\GenericWrappers.cs,GetHashCode,The following statement contains a magic number: return declaringType.GetHashCode () * 33 ^ method.GetHashCode () ^ Util.GetHashCode (methodArgs);  
Magic Number,IKVM.Reflection,GenericMethodInstance,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\GenericWrappers.cs,ImportTo,The following statement contains a magic number: if (methodArgs == null) {  	return module.ImportMethodOrField (declaringType' method.Name' method.MethodSignature);  } else {  	Writer.ByteBuffer spec = new Writer.ByteBuffer (10);  	Signature.WriteMethodSpec (module' spec' methodArgs);  	Metadata.MethodSpecTable.Record rec = new Metadata.MethodSpecTable.Record ();  	Emit.MethodBuilder mb = method as Emit.MethodBuilder;  	if (mb != null && mb.ModuleBuilder == module && !declaringType.IsGenericType) {  		rec.Method = mb.MetadataToken;  	} else {  		rec.Method = module.ImportMember (GetGenericMethodDefinition ());  	}  	rec.Instantiation = module.Blobs.Add (spec);  	return 0x2B000000 | module.MethodSpec.FindOrAddRecord (rec);  }  
Magic Number,IKVM.Reflection,GenericFieldInstance,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\GenericWrappers.cs,GetHashCode,The following statement contains a magic number: return declaringType.GetHashCode () * 3 ^ field.GetHashCode ();  
Magic Number,IKVM.Reflection,GenericPropertyInfo,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\GenericWrappers.cs,GetHashCode,The following statement contains a magic number: return typeInstance.GetHashCode () * 537 + property.GetHashCode ();  
Magic Number,IKVM.Reflection,GenericEventInfo,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\GenericWrappers.cs,GetHashCode,The following statement contains a magic number: return typeInstance.GetHashCode () * 777 + eventInfo.GetHashCode ();  
Magic Number,IKVM.Reflection,MethodBody,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\MethodBody.cs,MethodBody,The following statement contains a magic number: if ((b & 3) == CorILMethod_TinyFormat) {  	initLocals = true;  	body = br.ReadBytes (b >> 2);  	maxStack = 8;  } else if ((b & 3) == CorILMethod_FatFormat) {  	initLocals = (b & CorILMethod_InitLocals) != 0;  	short flagsAndSize = (short)(b | (br.ReadByte () << 8));  	if ((flagsAndSize >> 12) != 3) {  		throw new BadImageFormatException ("Fat format method header size should be 3");  	}  	maxStack = br.ReadUInt16 ();  	int codeLength = br.ReadInt32 ();  	localVarSigTok = br.ReadInt32 ();  	body = br.ReadBytes (codeLength);  	if ((b & CorILMethod_MoreSects) != 0) {  		module.stream.Position = (module.stream.Position + 3) & ~3;  		int hdr = br.ReadInt32 ();  		if ((hdr & CorILMethod_Sect_MoreSects) != 0 || (hdr & CorILMethod_Sect_EHTable) == 0) {  			throw new NotImplementedException ();  		} else if ((hdr & CorILMethod_Sect_FatFormat) != 0) {  			int count = ComputeExceptionCount ((hdr >> 8) & 0xFFFFFF' 24);  			for (int i = 0; i < count; i++) {  				int flags = br.ReadInt32 ();  				int tryOffset = br.ReadInt32 ();  				int tryLength = br.ReadInt32 ();  				int handlerOffset = br.ReadInt32 ();  				int handlerLength = br.ReadInt32 ();  				int classTokenOrFilterOffset = br.ReadInt32 ();  				exceptionClauses.Add (new ExceptionHandlingClause (module' flags' tryOffset' tryLength' handlerOffset' handlerLength' classTokenOrFilterOffset' context));  			}  		} else {  			int count = ComputeExceptionCount ((hdr >> 8) & 0xFF' 12);  			for (int i = 0; i < count; i++) {  				int flags = br.ReadUInt16 ();  				int tryOffset = br.ReadUInt16 ();  				int tryLength = br.ReadByte ();  				int handlerOffset = br.ReadUInt16 ();  				int handlerLength = br.ReadByte ();  				int classTokenOrFilterOffset = br.ReadInt32 ();  				exceptionClauses.Add (new ExceptionHandlingClause (module' flags' tryOffset' tryLength' handlerOffset' handlerLength' classTokenOrFilterOffset' context));  			}  		}  	}  	if (localVarSigTok != 0) {  		ByteReader sig = module.GetStandAloneSig ((localVarSigTok & 0xFFFFFF) - 1);  		Signature.ReadLocalVarSig (module' sig' context' locals);  	}  } else {  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection,MethodBody,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\MethodBody.cs,MethodBody,The following statement contains a magic number: if ((b & 3) == CorILMethod_TinyFormat) {  	initLocals = true;  	body = br.ReadBytes (b >> 2);  	maxStack = 8;  } else if ((b & 3) == CorILMethod_FatFormat) {  	initLocals = (b & CorILMethod_InitLocals) != 0;  	short flagsAndSize = (short)(b | (br.ReadByte () << 8));  	if ((flagsAndSize >> 12) != 3) {  		throw new BadImageFormatException ("Fat format method header size should be 3");  	}  	maxStack = br.ReadUInt16 ();  	int codeLength = br.ReadInt32 ();  	localVarSigTok = br.ReadInt32 ();  	body = br.ReadBytes (codeLength);  	if ((b & CorILMethod_MoreSects) != 0) {  		module.stream.Position = (module.stream.Position + 3) & ~3;  		int hdr = br.ReadInt32 ();  		if ((hdr & CorILMethod_Sect_MoreSects) != 0 || (hdr & CorILMethod_Sect_EHTable) == 0) {  			throw new NotImplementedException ();  		} else if ((hdr & CorILMethod_Sect_FatFormat) != 0) {  			int count = ComputeExceptionCount ((hdr >> 8) & 0xFFFFFF' 24);  			for (int i = 0; i < count; i++) {  				int flags = br.ReadInt32 ();  				int tryOffset = br.ReadInt32 ();  				int tryLength = br.ReadInt32 ();  				int handlerOffset = br.ReadInt32 ();  				int handlerLength = br.ReadInt32 ();  				int classTokenOrFilterOffset = br.ReadInt32 ();  				exceptionClauses.Add (new ExceptionHandlingClause (module' flags' tryOffset' tryLength' handlerOffset' handlerLength' classTokenOrFilterOffset' context));  			}  		} else {  			int count = ComputeExceptionCount ((hdr >> 8) & 0xFF' 12);  			for (int i = 0; i < count; i++) {  				int flags = br.ReadUInt16 ();  				int tryOffset = br.ReadUInt16 ();  				int tryLength = br.ReadByte ();  				int handlerOffset = br.ReadUInt16 ();  				int handlerLength = br.ReadByte ();  				int classTokenOrFilterOffset = br.ReadInt32 ();  				exceptionClauses.Add (new ExceptionHandlingClause (module' flags' tryOffset' tryLength' handlerOffset' handlerLength' classTokenOrFilterOffset' context));  			}  		}  	}  	if (localVarSigTok != 0) {  		ByteReader sig = module.GetStandAloneSig ((localVarSigTok & 0xFFFFFF) - 1);  		Signature.ReadLocalVarSig (module' sig' context' locals);  	}  } else {  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection,MethodBody,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\MethodBody.cs,MethodBody,The following statement contains a magic number: if ((b & 3) == CorILMethod_TinyFormat) {  	initLocals = true;  	body = br.ReadBytes (b >> 2);  	maxStack = 8;  } else if ((b & 3) == CorILMethod_FatFormat) {  	initLocals = (b & CorILMethod_InitLocals) != 0;  	short flagsAndSize = (short)(b | (br.ReadByte () << 8));  	if ((flagsAndSize >> 12) != 3) {  		throw new BadImageFormatException ("Fat format method header size should be 3");  	}  	maxStack = br.ReadUInt16 ();  	int codeLength = br.ReadInt32 ();  	localVarSigTok = br.ReadInt32 ();  	body = br.ReadBytes (codeLength);  	if ((b & CorILMethod_MoreSects) != 0) {  		module.stream.Position = (module.stream.Position + 3) & ~3;  		int hdr = br.ReadInt32 ();  		if ((hdr & CorILMethod_Sect_MoreSects) != 0 || (hdr & CorILMethod_Sect_EHTable) == 0) {  			throw new NotImplementedException ();  		} else if ((hdr & CorILMethod_Sect_FatFormat) != 0) {  			int count = ComputeExceptionCount ((hdr >> 8) & 0xFFFFFF' 24);  			for (int i = 0; i < count; i++) {  				int flags = br.ReadInt32 ();  				int tryOffset = br.ReadInt32 ();  				int tryLength = br.ReadInt32 ();  				int handlerOffset = br.ReadInt32 ();  				int handlerLength = br.ReadInt32 ();  				int classTokenOrFilterOffset = br.ReadInt32 ();  				exceptionClauses.Add (new ExceptionHandlingClause (module' flags' tryOffset' tryLength' handlerOffset' handlerLength' classTokenOrFilterOffset' context));  			}  		} else {  			int count = ComputeExceptionCount ((hdr >> 8) & 0xFF' 12);  			for (int i = 0; i < count; i++) {  				int flags = br.ReadUInt16 ();  				int tryOffset = br.ReadUInt16 ();  				int tryLength = br.ReadByte ();  				int handlerOffset = br.ReadUInt16 ();  				int handlerLength = br.ReadByte ();  				int classTokenOrFilterOffset = br.ReadInt32 ();  				exceptionClauses.Add (new ExceptionHandlingClause (module' flags' tryOffset' tryLength' handlerOffset' handlerLength' classTokenOrFilterOffset' context));  			}  		}  	}  	if (localVarSigTok != 0) {  		ByteReader sig = module.GetStandAloneSig ((localVarSigTok & 0xFFFFFF) - 1);  		Signature.ReadLocalVarSig (module' sig' context' locals);  	}  } else {  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection,MethodBody,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\MethodBody.cs,MethodBody,The following statement contains a magic number: if ((b & 3) == CorILMethod_TinyFormat) {  	initLocals = true;  	body = br.ReadBytes (b >> 2);  	maxStack = 8;  } else if ((b & 3) == CorILMethod_FatFormat) {  	initLocals = (b & CorILMethod_InitLocals) != 0;  	short flagsAndSize = (short)(b | (br.ReadByte () << 8));  	if ((flagsAndSize >> 12) != 3) {  		throw new BadImageFormatException ("Fat format method header size should be 3");  	}  	maxStack = br.ReadUInt16 ();  	int codeLength = br.ReadInt32 ();  	localVarSigTok = br.ReadInt32 ();  	body = br.ReadBytes (codeLength);  	if ((b & CorILMethod_MoreSects) != 0) {  		module.stream.Position = (module.stream.Position + 3) & ~3;  		int hdr = br.ReadInt32 ();  		if ((hdr & CorILMethod_Sect_MoreSects) != 0 || (hdr & CorILMethod_Sect_EHTable) == 0) {  			throw new NotImplementedException ();  		} else if ((hdr & CorILMethod_Sect_FatFormat) != 0) {  			int count = ComputeExceptionCount ((hdr >> 8) & 0xFFFFFF' 24);  			for (int i = 0; i < count; i++) {  				int flags = br.ReadInt32 ();  				int tryOffset = br.ReadInt32 ();  				int tryLength = br.ReadInt32 ();  				int handlerOffset = br.ReadInt32 ();  				int handlerLength = br.ReadInt32 ();  				int classTokenOrFilterOffset = br.ReadInt32 ();  				exceptionClauses.Add (new ExceptionHandlingClause (module' flags' tryOffset' tryLength' handlerOffset' handlerLength' classTokenOrFilterOffset' context));  			}  		} else {  			int count = ComputeExceptionCount ((hdr >> 8) & 0xFF' 12);  			for (int i = 0; i < count; i++) {  				int flags = br.ReadUInt16 ();  				int tryOffset = br.ReadUInt16 ();  				int tryLength = br.ReadByte ();  				int handlerOffset = br.ReadUInt16 ();  				int handlerLength = br.ReadByte ();  				int classTokenOrFilterOffset = br.ReadInt32 ();  				exceptionClauses.Add (new ExceptionHandlingClause (module' flags' tryOffset' tryLength' handlerOffset' handlerLength' classTokenOrFilterOffset' context));  			}  		}  	}  	if (localVarSigTok != 0) {  		ByteReader sig = module.GetStandAloneSig ((localVarSigTok & 0xFFFFFF) - 1);  		Signature.ReadLocalVarSig (module' sig' context' locals);  	}  } else {  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection,MethodBody,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\MethodBody.cs,MethodBody,The following statement contains a magic number: if ((b & 3) == CorILMethod_TinyFormat) {  	initLocals = true;  	body = br.ReadBytes (b >> 2);  	maxStack = 8;  } else if ((b & 3) == CorILMethod_FatFormat) {  	initLocals = (b & CorILMethod_InitLocals) != 0;  	short flagsAndSize = (short)(b | (br.ReadByte () << 8));  	if ((flagsAndSize >> 12) != 3) {  		throw new BadImageFormatException ("Fat format method header size should be 3");  	}  	maxStack = br.ReadUInt16 ();  	int codeLength = br.ReadInt32 ();  	localVarSigTok = br.ReadInt32 ();  	body = br.ReadBytes (codeLength);  	if ((b & CorILMethod_MoreSects) != 0) {  		module.stream.Position = (module.stream.Position + 3) & ~3;  		int hdr = br.ReadInt32 ();  		if ((hdr & CorILMethod_Sect_MoreSects) != 0 || (hdr & CorILMethod_Sect_EHTable) == 0) {  			throw new NotImplementedException ();  		} else if ((hdr & CorILMethod_Sect_FatFormat) != 0) {  			int count = ComputeExceptionCount ((hdr >> 8) & 0xFFFFFF' 24);  			for (int i = 0; i < count; i++) {  				int flags = br.ReadInt32 ();  				int tryOffset = br.ReadInt32 ();  				int tryLength = br.ReadInt32 ();  				int handlerOffset = br.ReadInt32 ();  				int handlerLength = br.ReadInt32 ();  				int classTokenOrFilterOffset = br.ReadInt32 ();  				exceptionClauses.Add (new ExceptionHandlingClause (module' flags' tryOffset' tryLength' handlerOffset' handlerLength' classTokenOrFilterOffset' context));  			}  		} else {  			int count = ComputeExceptionCount ((hdr >> 8) & 0xFF' 12);  			for (int i = 0; i < count; i++) {  				int flags = br.ReadUInt16 ();  				int tryOffset = br.ReadUInt16 ();  				int tryLength = br.ReadByte ();  				int handlerOffset = br.ReadUInt16 ();  				int handlerLength = br.ReadByte ();  				int classTokenOrFilterOffset = br.ReadInt32 ();  				exceptionClauses.Add (new ExceptionHandlingClause (module' flags' tryOffset' tryLength' handlerOffset' handlerLength' classTokenOrFilterOffset' context));  			}  		}  	}  	if (localVarSigTok != 0) {  		ByteReader sig = module.GetStandAloneSig ((localVarSigTok & 0xFFFFFF) - 1);  		Signature.ReadLocalVarSig (module' sig' context' locals);  	}  } else {  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection,MethodBody,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\MethodBody.cs,MethodBody,The following statement contains a magic number: if ((b & 3) == CorILMethod_TinyFormat) {  	initLocals = true;  	body = br.ReadBytes (b >> 2);  	maxStack = 8;  } else if ((b & 3) == CorILMethod_FatFormat) {  	initLocals = (b & CorILMethod_InitLocals) != 0;  	short flagsAndSize = (short)(b | (br.ReadByte () << 8));  	if ((flagsAndSize >> 12) != 3) {  		throw new BadImageFormatException ("Fat format method header size should be 3");  	}  	maxStack = br.ReadUInt16 ();  	int codeLength = br.ReadInt32 ();  	localVarSigTok = br.ReadInt32 ();  	body = br.ReadBytes (codeLength);  	if ((b & CorILMethod_MoreSects) != 0) {  		module.stream.Position = (module.stream.Position + 3) & ~3;  		int hdr = br.ReadInt32 ();  		if ((hdr & CorILMethod_Sect_MoreSects) != 0 || (hdr & CorILMethod_Sect_EHTable) == 0) {  			throw new NotImplementedException ();  		} else if ((hdr & CorILMethod_Sect_FatFormat) != 0) {  			int count = ComputeExceptionCount ((hdr >> 8) & 0xFFFFFF' 24);  			for (int i = 0; i < count; i++) {  				int flags = br.ReadInt32 ();  				int tryOffset = br.ReadInt32 ();  				int tryLength = br.ReadInt32 ();  				int handlerOffset = br.ReadInt32 ();  				int handlerLength = br.ReadInt32 ();  				int classTokenOrFilterOffset = br.ReadInt32 ();  				exceptionClauses.Add (new ExceptionHandlingClause (module' flags' tryOffset' tryLength' handlerOffset' handlerLength' classTokenOrFilterOffset' context));  			}  		} else {  			int count = ComputeExceptionCount ((hdr >> 8) & 0xFF' 12);  			for (int i = 0; i < count; i++) {  				int flags = br.ReadUInt16 ();  				int tryOffset = br.ReadUInt16 ();  				int tryLength = br.ReadByte ();  				int handlerOffset = br.ReadUInt16 ();  				int handlerLength = br.ReadByte ();  				int classTokenOrFilterOffset = br.ReadInt32 ();  				exceptionClauses.Add (new ExceptionHandlingClause (module' flags' tryOffset' tryLength' handlerOffset' handlerLength' classTokenOrFilterOffset' context));  			}  		}  	}  	if (localVarSigTok != 0) {  		ByteReader sig = module.GetStandAloneSig ((localVarSigTok & 0xFFFFFF) - 1);  		Signature.ReadLocalVarSig (module' sig' context' locals);  	}  } else {  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection,MethodBody,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\MethodBody.cs,MethodBody,The following statement contains a magic number: if ((b & 3) == CorILMethod_TinyFormat) {  	initLocals = true;  	body = br.ReadBytes (b >> 2);  	maxStack = 8;  } else if ((b & 3) == CorILMethod_FatFormat) {  	initLocals = (b & CorILMethod_InitLocals) != 0;  	short flagsAndSize = (short)(b | (br.ReadByte () << 8));  	if ((flagsAndSize >> 12) != 3) {  		throw new BadImageFormatException ("Fat format method header size should be 3");  	}  	maxStack = br.ReadUInt16 ();  	int codeLength = br.ReadInt32 ();  	localVarSigTok = br.ReadInt32 ();  	body = br.ReadBytes (codeLength);  	if ((b & CorILMethod_MoreSects) != 0) {  		module.stream.Position = (module.stream.Position + 3) & ~3;  		int hdr = br.ReadInt32 ();  		if ((hdr & CorILMethod_Sect_MoreSects) != 0 || (hdr & CorILMethod_Sect_EHTable) == 0) {  			throw new NotImplementedException ();  		} else if ((hdr & CorILMethod_Sect_FatFormat) != 0) {  			int count = ComputeExceptionCount ((hdr >> 8) & 0xFFFFFF' 24);  			for (int i = 0; i < count; i++) {  				int flags = br.ReadInt32 ();  				int tryOffset = br.ReadInt32 ();  				int tryLength = br.ReadInt32 ();  				int handlerOffset = br.ReadInt32 ();  				int handlerLength = br.ReadInt32 ();  				int classTokenOrFilterOffset = br.ReadInt32 ();  				exceptionClauses.Add (new ExceptionHandlingClause (module' flags' tryOffset' tryLength' handlerOffset' handlerLength' classTokenOrFilterOffset' context));  			}  		} else {  			int count = ComputeExceptionCount ((hdr >> 8) & 0xFF' 12);  			for (int i = 0; i < count; i++) {  				int flags = br.ReadUInt16 ();  				int tryOffset = br.ReadUInt16 ();  				int tryLength = br.ReadByte ();  				int handlerOffset = br.ReadUInt16 ();  				int handlerLength = br.ReadByte ();  				int classTokenOrFilterOffset = br.ReadInt32 ();  				exceptionClauses.Add (new ExceptionHandlingClause (module' flags' tryOffset' tryLength' handlerOffset' handlerLength' classTokenOrFilterOffset' context));  			}  		}  	}  	if (localVarSigTok != 0) {  		ByteReader sig = module.GetStandAloneSig ((localVarSigTok & 0xFFFFFF) - 1);  		Signature.ReadLocalVarSig (module' sig' context' locals);  	}  } else {  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection,MethodBody,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\MethodBody.cs,MethodBody,The following statement contains a magic number: if ((b & 3) == CorILMethod_TinyFormat) {  	initLocals = true;  	body = br.ReadBytes (b >> 2);  	maxStack = 8;  } else if ((b & 3) == CorILMethod_FatFormat) {  	initLocals = (b & CorILMethod_InitLocals) != 0;  	short flagsAndSize = (short)(b | (br.ReadByte () << 8));  	if ((flagsAndSize >> 12) != 3) {  		throw new BadImageFormatException ("Fat format method header size should be 3");  	}  	maxStack = br.ReadUInt16 ();  	int codeLength = br.ReadInt32 ();  	localVarSigTok = br.ReadInt32 ();  	body = br.ReadBytes (codeLength);  	if ((b & CorILMethod_MoreSects) != 0) {  		module.stream.Position = (module.stream.Position + 3) & ~3;  		int hdr = br.ReadInt32 ();  		if ((hdr & CorILMethod_Sect_MoreSects) != 0 || (hdr & CorILMethod_Sect_EHTable) == 0) {  			throw new NotImplementedException ();  		} else if ((hdr & CorILMethod_Sect_FatFormat) != 0) {  			int count = ComputeExceptionCount ((hdr >> 8) & 0xFFFFFF' 24);  			for (int i = 0; i < count; i++) {  				int flags = br.ReadInt32 ();  				int tryOffset = br.ReadInt32 ();  				int tryLength = br.ReadInt32 ();  				int handlerOffset = br.ReadInt32 ();  				int handlerLength = br.ReadInt32 ();  				int classTokenOrFilterOffset = br.ReadInt32 ();  				exceptionClauses.Add (new ExceptionHandlingClause (module' flags' tryOffset' tryLength' handlerOffset' handlerLength' classTokenOrFilterOffset' context));  			}  		} else {  			int count = ComputeExceptionCount ((hdr >> 8) & 0xFF' 12);  			for (int i = 0; i < count; i++) {  				int flags = br.ReadUInt16 ();  				int tryOffset = br.ReadUInt16 ();  				int tryLength = br.ReadByte ();  				int handlerOffset = br.ReadUInt16 ();  				int handlerLength = br.ReadByte ();  				int classTokenOrFilterOffset = br.ReadInt32 ();  				exceptionClauses.Add (new ExceptionHandlingClause (module' flags' tryOffset' tryLength' handlerOffset' handlerLength' classTokenOrFilterOffset' context));  			}  		}  	}  	if (localVarSigTok != 0) {  		ByteReader sig = module.GetStandAloneSig ((localVarSigTok & 0xFFFFFF) - 1);  		Signature.ReadLocalVarSig (module' sig' context' locals);  	}  } else {  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection,MethodBody,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\MethodBody.cs,MethodBody,The following statement contains a magic number: if ((b & 3) == CorILMethod_TinyFormat) {  	initLocals = true;  	body = br.ReadBytes (b >> 2);  	maxStack = 8;  } else if ((b & 3) == CorILMethod_FatFormat) {  	initLocals = (b & CorILMethod_InitLocals) != 0;  	short flagsAndSize = (short)(b | (br.ReadByte () << 8));  	if ((flagsAndSize >> 12) != 3) {  		throw new BadImageFormatException ("Fat format method header size should be 3");  	}  	maxStack = br.ReadUInt16 ();  	int codeLength = br.ReadInt32 ();  	localVarSigTok = br.ReadInt32 ();  	body = br.ReadBytes (codeLength);  	if ((b & CorILMethod_MoreSects) != 0) {  		module.stream.Position = (module.stream.Position + 3) & ~3;  		int hdr = br.ReadInt32 ();  		if ((hdr & CorILMethod_Sect_MoreSects) != 0 || (hdr & CorILMethod_Sect_EHTable) == 0) {  			throw new NotImplementedException ();  		} else if ((hdr & CorILMethod_Sect_FatFormat) != 0) {  			int count = ComputeExceptionCount ((hdr >> 8) & 0xFFFFFF' 24);  			for (int i = 0; i < count; i++) {  				int flags = br.ReadInt32 ();  				int tryOffset = br.ReadInt32 ();  				int tryLength = br.ReadInt32 ();  				int handlerOffset = br.ReadInt32 ();  				int handlerLength = br.ReadInt32 ();  				int classTokenOrFilterOffset = br.ReadInt32 ();  				exceptionClauses.Add (new ExceptionHandlingClause (module' flags' tryOffset' tryLength' handlerOffset' handlerLength' classTokenOrFilterOffset' context));  			}  		} else {  			int count = ComputeExceptionCount ((hdr >> 8) & 0xFF' 12);  			for (int i = 0; i < count; i++) {  				int flags = br.ReadUInt16 ();  				int tryOffset = br.ReadUInt16 ();  				int tryLength = br.ReadByte ();  				int handlerOffset = br.ReadUInt16 ();  				int handlerLength = br.ReadByte ();  				int classTokenOrFilterOffset = br.ReadInt32 ();  				exceptionClauses.Add (new ExceptionHandlingClause (module' flags' tryOffset' tryLength' handlerOffset' handlerLength' classTokenOrFilterOffset' context));  			}  		}  	}  	if (localVarSigTok != 0) {  		ByteReader sig = module.GetStandAloneSig ((localVarSigTok & 0xFFFFFF) - 1);  		Signature.ReadLocalVarSig (module' sig' context' locals);  	}  } else {  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection,MethodBody,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\MethodBody.cs,MethodBody,The following statement contains a magic number: if ((b & 3) == CorILMethod_TinyFormat) {  	initLocals = true;  	body = br.ReadBytes (b >> 2);  	maxStack = 8;  } else if ((b & 3) == CorILMethod_FatFormat) {  	initLocals = (b & CorILMethod_InitLocals) != 0;  	short flagsAndSize = (short)(b | (br.ReadByte () << 8));  	if ((flagsAndSize >> 12) != 3) {  		throw new BadImageFormatException ("Fat format method header size should be 3");  	}  	maxStack = br.ReadUInt16 ();  	int codeLength = br.ReadInt32 ();  	localVarSigTok = br.ReadInt32 ();  	body = br.ReadBytes (codeLength);  	if ((b & CorILMethod_MoreSects) != 0) {  		module.stream.Position = (module.stream.Position + 3) & ~3;  		int hdr = br.ReadInt32 ();  		if ((hdr & CorILMethod_Sect_MoreSects) != 0 || (hdr & CorILMethod_Sect_EHTable) == 0) {  			throw new NotImplementedException ();  		} else if ((hdr & CorILMethod_Sect_FatFormat) != 0) {  			int count = ComputeExceptionCount ((hdr >> 8) & 0xFFFFFF' 24);  			for (int i = 0; i < count; i++) {  				int flags = br.ReadInt32 ();  				int tryOffset = br.ReadInt32 ();  				int tryLength = br.ReadInt32 ();  				int handlerOffset = br.ReadInt32 ();  				int handlerLength = br.ReadInt32 ();  				int classTokenOrFilterOffset = br.ReadInt32 ();  				exceptionClauses.Add (new ExceptionHandlingClause (module' flags' tryOffset' tryLength' handlerOffset' handlerLength' classTokenOrFilterOffset' context));  			}  		} else {  			int count = ComputeExceptionCount ((hdr >> 8) & 0xFF' 12);  			for (int i = 0; i < count; i++) {  				int flags = br.ReadUInt16 ();  				int tryOffset = br.ReadUInt16 ();  				int tryLength = br.ReadByte ();  				int handlerOffset = br.ReadUInt16 ();  				int handlerLength = br.ReadByte ();  				int classTokenOrFilterOffset = br.ReadInt32 ();  				exceptionClauses.Add (new ExceptionHandlingClause (module' flags' tryOffset' tryLength' handlerOffset' handlerLength' classTokenOrFilterOffset' context));  			}  		}  	}  	if (localVarSigTok != 0) {  		ByteReader sig = module.GetStandAloneSig ((localVarSigTok & 0xFFFFFF) - 1);  		Signature.ReadLocalVarSig (module' sig' context' locals);  	}  } else {  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection,MethodBody,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\MethodBody.cs,MethodBody,The following statement contains a magic number: if ((b & 3) == CorILMethod_TinyFormat) {  	initLocals = true;  	body = br.ReadBytes (b >> 2);  	maxStack = 8;  } else if ((b & 3) == CorILMethod_FatFormat) {  	initLocals = (b & CorILMethod_InitLocals) != 0;  	short flagsAndSize = (short)(b | (br.ReadByte () << 8));  	if ((flagsAndSize >> 12) != 3) {  		throw new BadImageFormatException ("Fat format method header size should be 3");  	}  	maxStack = br.ReadUInt16 ();  	int codeLength = br.ReadInt32 ();  	localVarSigTok = br.ReadInt32 ();  	body = br.ReadBytes (codeLength);  	if ((b & CorILMethod_MoreSects) != 0) {  		module.stream.Position = (module.stream.Position + 3) & ~3;  		int hdr = br.ReadInt32 ();  		if ((hdr & CorILMethod_Sect_MoreSects) != 0 || (hdr & CorILMethod_Sect_EHTable) == 0) {  			throw new NotImplementedException ();  		} else if ((hdr & CorILMethod_Sect_FatFormat) != 0) {  			int count = ComputeExceptionCount ((hdr >> 8) & 0xFFFFFF' 24);  			for (int i = 0; i < count; i++) {  				int flags = br.ReadInt32 ();  				int tryOffset = br.ReadInt32 ();  				int tryLength = br.ReadInt32 ();  				int handlerOffset = br.ReadInt32 ();  				int handlerLength = br.ReadInt32 ();  				int classTokenOrFilterOffset = br.ReadInt32 ();  				exceptionClauses.Add (new ExceptionHandlingClause (module' flags' tryOffset' tryLength' handlerOffset' handlerLength' classTokenOrFilterOffset' context));  			}  		} else {  			int count = ComputeExceptionCount ((hdr >> 8) & 0xFF' 12);  			for (int i = 0; i < count; i++) {  				int flags = br.ReadUInt16 ();  				int tryOffset = br.ReadUInt16 ();  				int tryLength = br.ReadByte ();  				int handlerOffset = br.ReadUInt16 ();  				int handlerLength = br.ReadByte ();  				int classTokenOrFilterOffset = br.ReadInt32 ();  				exceptionClauses.Add (new ExceptionHandlingClause (module' flags' tryOffset' tryLength' handlerOffset' handlerLength' classTokenOrFilterOffset' context));  			}  		}  	}  	if (localVarSigTok != 0) {  		ByteReader sig = module.GetStandAloneSig ((localVarSigTok & 0xFFFFFF) - 1);  		Signature.ReadLocalVarSig (module' sig' context' locals);  	}  } else {  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection,MethodBody,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\MethodBody.cs,MethodBody,The following statement contains a magic number: if ((b & 3) == CorILMethod_TinyFormat) {  	initLocals = true;  	body = br.ReadBytes (b >> 2);  	maxStack = 8;  } else if ((b & 3) == CorILMethod_FatFormat) {  	initLocals = (b & CorILMethod_InitLocals) != 0;  	short flagsAndSize = (short)(b | (br.ReadByte () << 8));  	if ((flagsAndSize >> 12) != 3) {  		throw new BadImageFormatException ("Fat format method header size should be 3");  	}  	maxStack = br.ReadUInt16 ();  	int codeLength = br.ReadInt32 ();  	localVarSigTok = br.ReadInt32 ();  	body = br.ReadBytes (codeLength);  	if ((b & CorILMethod_MoreSects) != 0) {  		module.stream.Position = (module.stream.Position + 3) & ~3;  		int hdr = br.ReadInt32 ();  		if ((hdr & CorILMethod_Sect_MoreSects) != 0 || (hdr & CorILMethod_Sect_EHTable) == 0) {  			throw new NotImplementedException ();  		} else if ((hdr & CorILMethod_Sect_FatFormat) != 0) {  			int count = ComputeExceptionCount ((hdr >> 8) & 0xFFFFFF' 24);  			for (int i = 0; i < count; i++) {  				int flags = br.ReadInt32 ();  				int tryOffset = br.ReadInt32 ();  				int tryLength = br.ReadInt32 ();  				int handlerOffset = br.ReadInt32 ();  				int handlerLength = br.ReadInt32 ();  				int classTokenOrFilterOffset = br.ReadInt32 ();  				exceptionClauses.Add (new ExceptionHandlingClause (module' flags' tryOffset' tryLength' handlerOffset' handlerLength' classTokenOrFilterOffset' context));  			}  		} else {  			int count = ComputeExceptionCount ((hdr >> 8) & 0xFF' 12);  			for (int i = 0; i < count; i++) {  				int flags = br.ReadUInt16 ();  				int tryOffset = br.ReadUInt16 ();  				int tryLength = br.ReadByte ();  				int handlerOffset = br.ReadUInt16 ();  				int handlerLength = br.ReadByte ();  				int classTokenOrFilterOffset = br.ReadInt32 ();  				exceptionClauses.Add (new ExceptionHandlingClause (module' flags' tryOffset' tryLength' handlerOffset' handlerLength' classTokenOrFilterOffset' context));  			}  		}  	}  	if (localVarSigTok != 0) {  		ByteReader sig = module.GetStandAloneSig ((localVarSigTok & 0xFFFFFF) - 1);  		Signature.ReadLocalVarSig (module' sig' context' locals);  	}  } else {  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection,MethodBody,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\MethodBody.cs,MethodBody,The following statement contains a magic number: if ((b & 3) == CorILMethod_TinyFormat) {  	initLocals = true;  	body = br.ReadBytes (b >> 2);  	maxStack = 8;  } else if ((b & 3) == CorILMethod_FatFormat) {  	initLocals = (b & CorILMethod_InitLocals) != 0;  	short flagsAndSize = (short)(b | (br.ReadByte () << 8));  	if ((flagsAndSize >> 12) != 3) {  		throw new BadImageFormatException ("Fat format method header size should be 3");  	}  	maxStack = br.ReadUInt16 ();  	int codeLength = br.ReadInt32 ();  	localVarSigTok = br.ReadInt32 ();  	body = br.ReadBytes (codeLength);  	if ((b & CorILMethod_MoreSects) != 0) {  		module.stream.Position = (module.stream.Position + 3) & ~3;  		int hdr = br.ReadInt32 ();  		if ((hdr & CorILMethod_Sect_MoreSects) != 0 || (hdr & CorILMethod_Sect_EHTable) == 0) {  			throw new NotImplementedException ();  		} else if ((hdr & CorILMethod_Sect_FatFormat) != 0) {  			int count = ComputeExceptionCount ((hdr >> 8) & 0xFFFFFF' 24);  			for (int i = 0; i < count; i++) {  				int flags = br.ReadInt32 ();  				int tryOffset = br.ReadInt32 ();  				int tryLength = br.ReadInt32 ();  				int handlerOffset = br.ReadInt32 ();  				int handlerLength = br.ReadInt32 ();  				int classTokenOrFilterOffset = br.ReadInt32 ();  				exceptionClauses.Add (new ExceptionHandlingClause (module' flags' tryOffset' tryLength' handlerOffset' handlerLength' classTokenOrFilterOffset' context));  			}  		} else {  			int count = ComputeExceptionCount ((hdr >> 8) & 0xFF' 12);  			for (int i = 0; i < count; i++) {  				int flags = br.ReadUInt16 ();  				int tryOffset = br.ReadUInt16 ();  				int tryLength = br.ReadByte ();  				int handlerOffset = br.ReadUInt16 ();  				int handlerLength = br.ReadByte ();  				int classTokenOrFilterOffset = br.ReadInt32 ();  				exceptionClauses.Add (new ExceptionHandlingClause (module' flags' tryOffset' tryLength' handlerOffset' handlerLength' classTokenOrFilterOffset' context));  			}  		}  	}  	if (localVarSigTok != 0) {  		ByteReader sig = module.GetStandAloneSig ((localVarSigTok & 0xFFFFFF) - 1);  		Signature.ReadLocalVarSig (module' sig' context' locals);  	}  } else {  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection,MethodBody,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\MethodBody.cs,MethodBody,The following statement contains a magic number: body = br.ReadBytes (b >> 2);  
Magic Number,IKVM.Reflection,MethodBody,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\MethodBody.cs,MethodBody,The following statement contains a magic number: maxStack = 8;  
Magic Number,IKVM.Reflection,MethodBody,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\MethodBody.cs,MethodBody,The following statement contains a magic number: if ((b & 3) == CorILMethod_FatFormat) {  	initLocals = (b & CorILMethod_InitLocals) != 0;  	short flagsAndSize = (short)(b | (br.ReadByte () << 8));  	if ((flagsAndSize >> 12) != 3) {  		throw new BadImageFormatException ("Fat format method header size should be 3");  	}  	maxStack = br.ReadUInt16 ();  	int codeLength = br.ReadInt32 ();  	localVarSigTok = br.ReadInt32 ();  	body = br.ReadBytes (codeLength);  	if ((b & CorILMethod_MoreSects) != 0) {  		module.stream.Position = (module.stream.Position + 3) & ~3;  		int hdr = br.ReadInt32 ();  		if ((hdr & CorILMethod_Sect_MoreSects) != 0 || (hdr & CorILMethod_Sect_EHTable) == 0) {  			throw new NotImplementedException ();  		} else if ((hdr & CorILMethod_Sect_FatFormat) != 0) {  			int count = ComputeExceptionCount ((hdr >> 8) & 0xFFFFFF' 24);  			for (int i = 0; i < count; i++) {  				int flags = br.ReadInt32 ();  				int tryOffset = br.ReadInt32 ();  				int tryLength = br.ReadInt32 ();  				int handlerOffset = br.ReadInt32 ();  				int handlerLength = br.ReadInt32 ();  				int classTokenOrFilterOffset = br.ReadInt32 ();  				exceptionClauses.Add (new ExceptionHandlingClause (module' flags' tryOffset' tryLength' handlerOffset' handlerLength' classTokenOrFilterOffset' context));  			}  		} else {  			int count = ComputeExceptionCount ((hdr >> 8) & 0xFF' 12);  			for (int i = 0; i < count; i++) {  				int flags = br.ReadUInt16 ();  				int tryOffset = br.ReadUInt16 ();  				int tryLength = br.ReadByte ();  				int handlerOffset = br.ReadUInt16 ();  				int handlerLength = br.ReadByte ();  				int classTokenOrFilterOffset = br.ReadInt32 ();  				exceptionClauses.Add (new ExceptionHandlingClause (module' flags' tryOffset' tryLength' handlerOffset' handlerLength' classTokenOrFilterOffset' context));  			}  		}  	}  	if (localVarSigTok != 0) {  		ByteReader sig = module.GetStandAloneSig ((localVarSigTok & 0xFFFFFF) - 1);  		Signature.ReadLocalVarSig (module' sig' context' locals);  	}  } else {  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection,MethodBody,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\MethodBody.cs,MethodBody,The following statement contains a magic number: if ((b & 3) == CorILMethod_FatFormat) {  	initLocals = (b & CorILMethod_InitLocals) != 0;  	short flagsAndSize = (short)(b | (br.ReadByte () << 8));  	if ((flagsAndSize >> 12) != 3) {  		throw new BadImageFormatException ("Fat format method header size should be 3");  	}  	maxStack = br.ReadUInt16 ();  	int codeLength = br.ReadInt32 ();  	localVarSigTok = br.ReadInt32 ();  	body = br.ReadBytes (codeLength);  	if ((b & CorILMethod_MoreSects) != 0) {  		module.stream.Position = (module.stream.Position + 3) & ~3;  		int hdr = br.ReadInt32 ();  		if ((hdr & CorILMethod_Sect_MoreSects) != 0 || (hdr & CorILMethod_Sect_EHTable) == 0) {  			throw new NotImplementedException ();  		} else if ((hdr & CorILMethod_Sect_FatFormat) != 0) {  			int count = ComputeExceptionCount ((hdr >> 8) & 0xFFFFFF' 24);  			for (int i = 0; i < count; i++) {  				int flags = br.ReadInt32 ();  				int tryOffset = br.ReadInt32 ();  				int tryLength = br.ReadInt32 ();  				int handlerOffset = br.ReadInt32 ();  				int handlerLength = br.ReadInt32 ();  				int classTokenOrFilterOffset = br.ReadInt32 ();  				exceptionClauses.Add (new ExceptionHandlingClause (module' flags' tryOffset' tryLength' handlerOffset' handlerLength' classTokenOrFilterOffset' context));  			}  		} else {  			int count = ComputeExceptionCount ((hdr >> 8) & 0xFF' 12);  			for (int i = 0; i < count; i++) {  				int flags = br.ReadUInt16 ();  				int tryOffset = br.ReadUInt16 ();  				int tryLength = br.ReadByte ();  				int handlerOffset = br.ReadUInt16 ();  				int handlerLength = br.ReadByte ();  				int classTokenOrFilterOffset = br.ReadInt32 ();  				exceptionClauses.Add (new ExceptionHandlingClause (module' flags' tryOffset' tryLength' handlerOffset' handlerLength' classTokenOrFilterOffset' context));  			}  		}  	}  	if (localVarSigTok != 0) {  		ByteReader sig = module.GetStandAloneSig ((localVarSigTok & 0xFFFFFF) - 1);  		Signature.ReadLocalVarSig (module' sig' context' locals);  	}  } else {  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection,MethodBody,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\MethodBody.cs,MethodBody,The following statement contains a magic number: if ((b & 3) == CorILMethod_FatFormat) {  	initLocals = (b & CorILMethod_InitLocals) != 0;  	short flagsAndSize = (short)(b | (br.ReadByte () << 8));  	if ((flagsAndSize >> 12) != 3) {  		throw new BadImageFormatException ("Fat format method header size should be 3");  	}  	maxStack = br.ReadUInt16 ();  	int codeLength = br.ReadInt32 ();  	localVarSigTok = br.ReadInt32 ();  	body = br.ReadBytes (codeLength);  	if ((b & CorILMethod_MoreSects) != 0) {  		module.stream.Position = (module.stream.Position + 3) & ~3;  		int hdr = br.ReadInt32 ();  		if ((hdr & CorILMethod_Sect_MoreSects) != 0 || (hdr & CorILMethod_Sect_EHTable) == 0) {  			throw new NotImplementedException ();  		} else if ((hdr & CorILMethod_Sect_FatFormat) != 0) {  			int count = ComputeExceptionCount ((hdr >> 8) & 0xFFFFFF' 24);  			for (int i = 0; i < count; i++) {  				int flags = br.ReadInt32 ();  				int tryOffset = br.ReadInt32 ();  				int tryLength = br.ReadInt32 ();  				int handlerOffset = br.ReadInt32 ();  				int handlerLength = br.ReadInt32 ();  				int classTokenOrFilterOffset = br.ReadInt32 ();  				exceptionClauses.Add (new ExceptionHandlingClause (module' flags' tryOffset' tryLength' handlerOffset' handlerLength' classTokenOrFilterOffset' context));  			}  		} else {  			int count = ComputeExceptionCount ((hdr >> 8) & 0xFF' 12);  			for (int i = 0; i < count; i++) {  				int flags = br.ReadUInt16 ();  				int tryOffset = br.ReadUInt16 ();  				int tryLength = br.ReadByte ();  				int handlerOffset = br.ReadUInt16 ();  				int handlerLength = br.ReadByte ();  				int classTokenOrFilterOffset = br.ReadInt32 ();  				exceptionClauses.Add (new ExceptionHandlingClause (module' flags' tryOffset' tryLength' handlerOffset' handlerLength' classTokenOrFilterOffset' context));  			}  		}  	}  	if (localVarSigTok != 0) {  		ByteReader sig = module.GetStandAloneSig ((localVarSigTok & 0xFFFFFF) - 1);  		Signature.ReadLocalVarSig (module' sig' context' locals);  	}  } else {  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection,MethodBody,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\MethodBody.cs,MethodBody,The following statement contains a magic number: if ((b & 3) == CorILMethod_FatFormat) {  	initLocals = (b & CorILMethod_InitLocals) != 0;  	short flagsAndSize = (short)(b | (br.ReadByte () << 8));  	if ((flagsAndSize >> 12) != 3) {  		throw new BadImageFormatException ("Fat format method header size should be 3");  	}  	maxStack = br.ReadUInt16 ();  	int codeLength = br.ReadInt32 ();  	localVarSigTok = br.ReadInt32 ();  	body = br.ReadBytes (codeLength);  	if ((b & CorILMethod_MoreSects) != 0) {  		module.stream.Position = (module.stream.Position + 3) & ~3;  		int hdr = br.ReadInt32 ();  		if ((hdr & CorILMethod_Sect_MoreSects) != 0 || (hdr & CorILMethod_Sect_EHTable) == 0) {  			throw new NotImplementedException ();  		} else if ((hdr & CorILMethod_Sect_FatFormat) != 0) {  			int count = ComputeExceptionCount ((hdr >> 8) & 0xFFFFFF' 24);  			for (int i = 0; i < count; i++) {  				int flags = br.ReadInt32 ();  				int tryOffset = br.ReadInt32 ();  				int tryLength = br.ReadInt32 ();  				int handlerOffset = br.ReadInt32 ();  				int handlerLength = br.ReadInt32 ();  				int classTokenOrFilterOffset = br.ReadInt32 ();  				exceptionClauses.Add (new ExceptionHandlingClause (module' flags' tryOffset' tryLength' handlerOffset' handlerLength' classTokenOrFilterOffset' context));  			}  		} else {  			int count = ComputeExceptionCount ((hdr >> 8) & 0xFF' 12);  			for (int i = 0; i < count; i++) {  				int flags = br.ReadUInt16 ();  				int tryOffset = br.ReadUInt16 ();  				int tryLength = br.ReadByte ();  				int handlerOffset = br.ReadUInt16 ();  				int handlerLength = br.ReadByte ();  				int classTokenOrFilterOffset = br.ReadInt32 ();  				exceptionClauses.Add (new ExceptionHandlingClause (module' flags' tryOffset' tryLength' handlerOffset' handlerLength' classTokenOrFilterOffset' context));  			}  		}  	}  	if (localVarSigTok != 0) {  		ByteReader sig = module.GetStandAloneSig ((localVarSigTok & 0xFFFFFF) - 1);  		Signature.ReadLocalVarSig (module' sig' context' locals);  	}  } else {  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection,MethodBody,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\MethodBody.cs,MethodBody,The following statement contains a magic number: if ((b & 3) == CorILMethod_FatFormat) {  	initLocals = (b & CorILMethod_InitLocals) != 0;  	short flagsAndSize = (short)(b | (br.ReadByte () << 8));  	if ((flagsAndSize >> 12) != 3) {  		throw new BadImageFormatException ("Fat format method header size should be 3");  	}  	maxStack = br.ReadUInt16 ();  	int codeLength = br.ReadInt32 ();  	localVarSigTok = br.ReadInt32 ();  	body = br.ReadBytes (codeLength);  	if ((b & CorILMethod_MoreSects) != 0) {  		module.stream.Position = (module.stream.Position + 3) & ~3;  		int hdr = br.ReadInt32 ();  		if ((hdr & CorILMethod_Sect_MoreSects) != 0 || (hdr & CorILMethod_Sect_EHTable) == 0) {  			throw new NotImplementedException ();  		} else if ((hdr & CorILMethod_Sect_FatFormat) != 0) {  			int count = ComputeExceptionCount ((hdr >> 8) & 0xFFFFFF' 24);  			for (int i = 0; i < count; i++) {  				int flags = br.ReadInt32 ();  				int tryOffset = br.ReadInt32 ();  				int tryLength = br.ReadInt32 ();  				int handlerOffset = br.ReadInt32 ();  				int handlerLength = br.ReadInt32 ();  				int classTokenOrFilterOffset = br.ReadInt32 ();  				exceptionClauses.Add (new ExceptionHandlingClause (module' flags' tryOffset' tryLength' handlerOffset' handlerLength' classTokenOrFilterOffset' context));  			}  		} else {  			int count = ComputeExceptionCount ((hdr >> 8) & 0xFF' 12);  			for (int i = 0; i < count; i++) {  				int flags = br.ReadUInt16 ();  				int tryOffset = br.ReadUInt16 ();  				int tryLength = br.ReadByte ();  				int handlerOffset = br.ReadUInt16 ();  				int handlerLength = br.ReadByte ();  				int classTokenOrFilterOffset = br.ReadInt32 ();  				exceptionClauses.Add (new ExceptionHandlingClause (module' flags' tryOffset' tryLength' handlerOffset' handlerLength' classTokenOrFilterOffset' context));  			}  		}  	}  	if (localVarSigTok != 0) {  		ByteReader sig = module.GetStandAloneSig ((localVarSigTok & 0xFFFFFF) - 1);  		Signature.ReadLocalVarSig (module' sig' context' locals);  	}  } else {  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection,MethodBody,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\MethodBody.cs,MethodBody,The following statement contains a magic number: if ((b & 3) == CorILMethod_FatFormat) {  	initLocals = (b & CorILMethod_InitLocals) != 0;  	short flagsAndSize = (short)(b | (br.ReadByte () << 8));  	if ((flagsAndSize >> 12) != 3) {  		throw new BadImageFormatException ("Fat format method header size should be 3");  	}  	maxStack = br.ReadUInt16 ();  	int codeLength = br.ReadInt32 ();  	localVarSigTok = br.ReadInt32 ();  	body = br.ReadBytes (codeLength);  	if ((b & CorILMethod_MoreSects) != 0) {  		module.stream.Position = (module.stream.Position + 3) & ~3;  		int hdr = br.ReadInt32 ();  		if ((hdr & CorILMethod_Sect_MoreSects) != 0 || (hdr & CorILMethod_Sect_EHTable) == 0) {  			throw new NotImplementedException ();  		} else if ((hdr & CorILMethod_Sect_FatFormat) != 0) {  			int count = ComputeExceptionCount ((hdr >> 8) & 0xFFFFFF' 24);  			for (int i = 0; i < count; i++) {  				int flags = br.ReadInt32 ();  				int tryOffset = br.ReadInt32 ();  				int tryLength = br.ReadInt32 ();  				int handlerOffset = br.ReadInt32 ();  				int handlerLength = br.ReadInt32 ();  				int classTokenOrFilterOffset = br.ReadInt32 ();  				exceptionClauses.Add (new ExceptionHandlingClause (module' flags' tryOffset' tryLength' handlerOffset' handlerLength' classTokenOrFilterOffset' context));  			}  		} else {  			int count = ComputeExceptionCount ((hdr >> 8) & 0xFF' 12);  			for (int i = 0; i < count; i++) {  				int flags = br.ReadUInt16 ();  				int tryOffset = br.ReadUInt16 ();  				int tryLength = br.ReadByte ();  				int handlerOffset = br.ReadUInt16 ();  				int handlerLength = br.ReadByte ();  				int classTokenOrFilterOffset = br.ReadInt32 ();  				exceptionClauses.Add (new ExceptionHandlingClause (module' flags' tryOffset' tryLength' handlerOffset' handlerLength' classTokenOrFilterOffset' context));  			}  		}  	}  	if (localVarSigTok != 0) {  		ByteReader sig = module.GetStandAloneSig ((localVarSigTok & 0xFFFFFF) - 1);  		Signature.ReadLocalVarSig (module' sig' context' locals);  	}  } else {  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection,MethodBody,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\MethodBody.cs,MethodBody,The following statement contains a magic number: if ((b & 3) == CorILMethod_FatFormat) {  	initLocals = (b & CorILMethod_InitLocals) != 0;  	short flagsAndSize = (short)(b | (br.ReadByte () << 8));  	if ((flagsAndSize >> 12) != 3) {  		throw new BadImageFormatException ("Fat format method header size should be 3");  	}  	maxStack = br.ReadUInt16 ();  	int codeLength = br.ReadInt32 ();  	localVarSigTok = br.ReadInt32 ();  	body = br.ReadBytes (codeLength);  	if ((b & CorILMethod_MoreSects) != 0) {  		module.stream.Position = (module.stream.Position + 3) & ~3;  		int hdr = br.ReadInt32 ();  		if ((hdr & CorILMethod_Sect_MoreSects) != 0 || (hdr & CorILMethod_Sect_EHTable) == 0) {  			throw new NotImplementedException ();  		} else if ((hdr & CorILMethod_Sect_FatFormat) != 0) {  			int count = ComputeExceptionCount ((hdr >> 8) & 0xFFFFFF' 24);  			for (int i = 0; i < count; i++) {  				int flags = br.ReadInt32 ();  				int tryOffset = br.ReadInt32 ();  				int tryLength = br.ReadInt32 ();  				int handlerOffset = br.ReadInt32 ();  				int handlerLength = br.ReadInt32 ();  				int classTokenOrFilterOffset = br.ReadInt32 ();  				exceptionClauses.Add (new ExceptionHandlingClause (module' flags' tryOffset' tryLength' handlerOffset' handlerLength' classTokenOrFilterOffset' context));  			}  		} else {  			int count = ComputeExceptionCount ((hdr >> 8) & 0xFF' 12);  			for (int i = 0; i < count; i++) {  				int flags = br.ReadUInt16 ();  				int tryOffset = br.ReadUInt16 ();  				int tryLength = br.ReadByte ();  				int handlerOffset = br.ReadUInt16 ();  				int handlerLength = br.ReadByte ();  				int classTokenOrFilterOffset = br.ReadInt32 ();  				exceptionClauses.Add (new ExceptionHandlingClause (module' flags' tryOffset' tryLength' handlerOffset' handlerLength' classTokenOrFilterOffset' context));  			}  		}  	}  	if (localVarSigTok != 0) {  		ByteReader sig = module.GetStandAloneSig ((localVarSigTok & 0xFFFFFF) - 1);  		Signature.ReadLocalVarSig (module' sig' context' locals);  	}  } else {  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection,MethodBody,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\MethodBody.cs,MethodBody,The following statement contains a magic number: if ((b & 3) == CorILMethod_FatFormat) {  	initLocals = (b & CorILMethod_InitLocals) != 0;  	short flagsAndSize = (short)(b | (br.ReadByte () << 8));  	if ((flagsAndSize >> 12) != 3) {  		throw new BadImageFormatException ("Fat format method header size should be 3");  	}  	maxStack = br.ReadUInt16 ();  	int codeLength = br.ReadInt32 ();  	localVarSigTok = br.ReadInt32 ();  	body = br.ReadBytes (codeLength);  	if ((b & CorILMethod_MoreSects) != 0) {  		module.stream.Position = (module.stream.Position + 3) & ~3;  		int hdr = br.ReadInt32 ();  		if ((hdr & CorILMethod_Sect_MoreSects) != 0 || (hdr & CorILMethod_Sect_EHTable) == 0) {  			throw new NotImplementedException ();  		} else if ((hdr & CorILMethod_Sect_FatFormat) != 0) {  			int count = ComputeExceptionCount ((hdr >> 8) & 0xFFFFFF' 24);  			for (int i = 0; i < count; i++) {  				int flags = br.ReadInt32 ();  				int tryOffset = br.ReadInt32 ();  				int tryLength = br.ReadInt32 ();  				int handlerOffset = br.ReadInt32 ();  				int handlerLength = br.ReadInt32 ();  				int classTokenOrFilterOffset = br.ReadInt32 ();  				exceptionClauses.Add (new ExceptionHandlingClause (module' flags' tryOffset' tryLength' handlerOffset' handlerLength' classTokenOrFilterOffset' context));  			}  		} else {  			int count = ComputeExceptionCount ((hdr >> 8) & 0xFF' 12);  			for (int i = 0; i < count; i++) {  				int flags = br.ReadUInt16 ();  				int tryOffset = br.ReadUInt16 ();  				int tryLength = br.ReadByte ();  				int handlerOffset = br.ReadUInt16 ();  				int handlerLength = br.ReadByte ();  				int classTokenOrFilterOffset = br.ReadInt32 ();  				exceptionClauses.Add (new ExceptionHandlingClause (module' flags' tryOffset' tryLength' handlerOffset' handlerLength' classTokenOrFilterOffset' context));  			}  		}  	}  	if (localVarSigTok != 0) {  		ByteReader sig = module.GetStandAloneSig ((localVarSigTok & 0xFFFFFF) - 1);  		Signature.ReadLocalVarSig (module' sig' context' locals);  	}  } else {  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection,MethodBody,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\MethodBody.cs,MethodBody,The following statement contains a magic number: if ((b & 3) == CorILMethod_FatFormat) {  	initLocals = (b & CorILMethod_InitLocals) != 0;  	short flagsAndSize = (short)(b | (br.ReadByte () << 8));  	if ((flagsAndSize >> 12) != 3) {  		throw new BadImageFormatException ("Fat format method header size should be 3");  	}  	maxStack = br.ReadUInt16 ();  	int codeLength = br.ReadInt32 ();  	localVarSigTok = br.ReadInt32 ();  	body = br.ReadBytes (codeLength);  	if ((b & CorILMethod_MoreSects) != 0) {  		module.stream.Position = (module.stream.Position + 3) & ~3;  		int hdr = br.ReadInt32 ();  		if ((hdr & CorILMethod_Sect_MoreSects) != 0 || (hdr & CorILMethod_Sect_EHTable) == 0) {  			throw new NotImplementedException ();  		} else if ((hdr & CorILMethod_Sect_FatFormat) != 0) {  			int count = ComputeExceptionCount ((hdr >> 8) & 0xFFFFFF' 24);  			for (int i = 0; i < count; i++) {  				int flags = br.ReadInt32 ();  				int tryOffset = br.ReadInt32 ();  				int tryLength = br.ReadInt32 ();  				int handlerOffset = br.ReadInt32 ();  				int handlerLength = br.ReadInt32 ();  				int classTokenOrFilterOffset = br.ReadInt32 ();  				exceptionClauses.Add (new ExceptionHandlingClause (module' flags' tryOffset' tryLength' handlerOffset' handlerLength' classTokenOrFilterOffset' context));  			}  		} else {  			int count = ComputeExceptionCount ((hdr >> 8) & 0xFF' 12);  			for (int i = 0; i < count; i++) {  				int flags = br.ReadUInt16 ();  				int tryOffset = br.ReadUInt16 ();  				int tryLength = br.ReadByte ();  				int handlerOffset = br.ReadUInt16 ();  				int handlerLength = br.ReadByte ();  				int classTokenOrFilterOffset = br.ReadInt32 ();  				exceptionClauses.Add (new ExceptionHandlingClause (module' flags' tryOffset' tryLength' handlerOffset' handlerLength' classTokenOrFilterOffset' context));  			}  		}  	}  	if (localVarSigTok != 0) {  		ByteReader sig = module.GetStandAloneSig ((localVarSigTok & 0xFFFFFF) - 1);  		Signature.ReadLocalVarSig (module' sig' context' locals);  	}  } else {  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection,MethodBody,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\MethodBody.cs,MethodBody,The following statement contains a magic number: if ((b & 3) == CorILMethod_FatFormat) {  	initLocals = (b & CorILMethod_InitLocals) != 0;  	short flagsAndSize = (short)(b | (br.ReadByte () << 8));  	if ((flagsAndSize >> 12) != 3) {  		throw new BadImageFormatException ("Fat format method header size should be 3");  	}  	maxStack = br.ReadUInt16 ();  	int codeLength = br.ReadInt32 ();  	localVarSigTok = br.ReadInt32 ();  	body = br.ReadBytes (codeLength);  	if ((b & CorILMethod_MoreSects) != 0) {  		module.stream.Position = (module.stream.Position + 3) & ~3;  		int hdr = br.ReadInt32 ();  		if ((hdr & CorILMethod_Sect_MoreSects) != 0 || (hdr & CorILMethod_Sect_EHTable) == 0) {  			throw new NotImplementedException ();  		} else if ((hdr & CorILMethod_Sect_FatFormat) != 0) {  			int count = ComputeExceptionCount ((hdr >> 8) & 0xFFFFFF' 24);  			for (int i = 0; i < count; i++) {  				int flags = br.ReadInt32 ();  				int tryOffset = br.ReadInt32 ();  				int tryLength = br.ReadInt32 ();  				int handlerOffset = br.ReadInt32 ();  				int handlerLength = br.ReadInt32 ();  				int classTokenOrFilterOffset = br.ReadInt32 ();  				exceptionClauses.Add (new ExceptionHandlingClause (module' flags' tryOffset' tryLength' handlerOffset' handlerLength' classTokenOrFilterOffset' context));  			}  		} else {  			int count = ComputeExceptionCount ((hdr >> 8) & 0xFF' 12);  			for (int i = 0; i < count; i++) {  				int flags = br.ReadUInt16 ();  				int tryOffset = br.ReadUInt16 ();  				int tryLength = br.ReadByte ();  				int handlerOffset = br.ReadUInt16 ();  				int handlerLength = br.ReadByte ();  				int classTokenOrFilterOffset = br.ReadInt32 ();  				exceptionClauses.Add (new ExceptionHandlingClause (module' flags' tryOffset' tryLength' handlerOffset' handlerLength' classTokenOrFilterOffset' context));  			}  		}  	}  	if (localVarSigTok != 0) {  		ByteReader sig = module.GetStandAloneSig ((localVarSigTok & 0xFFFFFF) - 1);  		Signature.ReadLocalVarSig (module' sig' context' locals);  	}  } else {  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection,MethodBody,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\MethodBody.cs,MethodBody,The following statement contains a magic number: if ((flagsAndSize >> 12) != 3) {  	throw new BadImageFormatException ("Fat format method header size should be 3");  }  
Magic Number,IKVM.Reflection,MethodBody,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\MethodBody.cs,MethodBody,The following statement contains a magic number: if ((flagsAndSize >> 12) != 3) {  	throw new BadImageFormatException ("Fat format method header size should be 3");  }  
Magic Number,IKVM.Reflection,MethodBody,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\MethodBody.cs,MethodBody,The following statement contains a magic number: if ((b & CorILMethod_MoreSects) != 0) {  	module.stream.Position = (module.stream.Position + 3) & ~3;  	int hdr = br.ReadInt32 ();  	if ((hdr & CorILMethod_Sect_MoreSects) != 0 || (hdr & CorILMethod_Sect_EHTable) == 0) {  		throw new NotImplementedException ();  	} else if ((hdr & CorILMethod_Sect_FatFormat) != 0) {  		int count = ComputeExceptionCount ((hdr >> 8) & 0xFFFFFF' 24);  		for (int i = 0; i < count; i++) {  			int flags = br.ReadInt32 ();  			int tryOffset = br.ReadInt32 ();  			int tryLength = br.ReadInt32 ();  			int handlerOffset = br.ReadInt32 ();  			int handlerLength = br.ReadInt32 ();  			int classTokenOrFilterOffset = br.ReadInt32 ();  			exceptionClauses.Add (new ExceptionHandlingClause (module' flags' tryOffset' tryLength' handlerOffset' handlerLength' classTokenOrFilterOffset' context));  		}  	} else {  		int count = ComputeExceptionCount ((hdr >> 8) & 0xFF' 12);  		for (int i = 0; i < count; i++) {  			int flags = br.ReadUInt16 ();  			int tryOffset = br.ReadUInt16 ();  			int tryLength = br.ReadByte ();  			int handlerOffset = br.ReadUInt16 ();  			int handlerLength = br.ReadByte ();  			int classTokenOrFilterOffset = br.ReadInt32 ();  			exceptionClauses.Add (new ExceptionHandlingClause (module' flags' tryOffset' tryLength' handlerOffset' handlerLength' classTokenOrFilterOffset' context));  		}  	}  }  
Magic Number,IKVM.Reflection,MethodBody,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\MethodBody.cs,MethodBody,The following statement contains a magic number: if ((b & CorILMethod_MoreSects) != 0) {  	module.stream.Position = (module.stream.Position + 3) & ~3;  	int hdr = br.ReadInt32 ();  	if ((hdr & CorILMethod_Sect_MoreSects) != 0 || (hdr & CorILMethod_Sect_EHTable) == 0) {  		throw new NotImplementedException ();  	} else if ((hdr & CorILMethod_Sect_FatFormat) != 0) {  		int count = ComputeExceptionCount ((hdr >> 8) & 0xFFFFFF' 24);  		for (int i = 0; i < count; i++) {  			int flags = br.ReadInt32 ();  			int tryOffset = br.ReadInt32 ();  			int tryLength = br.ReadInt32 ();  			int handlerOffset = br.ReadInt32 ();  			int handlerLength = br.ReadInt32 ();  			int classTokenOrFilterOffset = br.ReadInt32 ();  			exceptionClauses.Add (new ExceptionHandlingClause (module' flags' tryOffset' tryLength' handlerOffset' handlerLength' classTokenOrFilterOffset' context));  		}  	} else {  		int count = ComputeExceptionCount ((hdr >> 8) & 0xFF' 12);  		for (int i = 0; i < count; i++) {  			int flags = br.ReadUInt16 ();  			int tryOffset = br.ReadUInt16 ();  			int tryLength = br.ReadByte ();  			int handlerOffset = br.ReadUInt16 ();  			int handlerLength = br.ReadByte ();  			int classTokenOrFilterOffset = br.ReadInt32 ();  			exceptionClauses.Add (new ExceptionHandlingClause (module' flags' tryOffset' tryLength' handlerOffset' handlerLength' classTokenOrFilterOffset' context));  		}  	}  }  
Magic Number,IKVM.Reflection,MethodBody,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\MethodBody.cs,MethodBody,The following statement contains a magic number: if ((b & CorILMethod_MoreSects) != 0) {  	module.stream.Position = (module.stream.Position + 3) & ~3;  	int hdr = br.ReadInt32 ();  	if ((hdr & CorILMethod_Sect_MoreSects) != 0 || (hdr & CorILMethod_Sect_EHTable) == 0) {  		throw new NotImplementedException ();  	} else if ((hdr & CorILMethod_Sect_FatFormat) != 0) {  		int count = ComputeExceptionCount ((hdr >> 8) & 0xFFFFFF' 24);  		for (int i = 0; i < count; i++) {  			int flags = br.ReadInt32 ();  			int tryOffset = br.ReadInt32 ();  			int tryLength = br.ReadInt32 ();  			int handlerOffset = br.ReadInt32 ();  			int handlerLength = br.ReadInt32 ();  			int classTokenOrFilterOffset = br.ReadInt32 ();  			exceptionClauses.Add (new ExceptionHandlingClause (module' flags' tryOffset' tryLength' handlerOffset' handlerLength' classTokenOrFilterOffset' context));  		}  	} else {  		int count = ComputeExceptionCount ((hdr >> 8) & 0xFF' 12);  		for (int i = 0; i < count; i++) {  			int flags = br.ReadUInt16 ();  			int tryOffset = br.ReadUInt16 ();  			int tryLength = br.ReadByte ();  			int handlerOffset = br.ReadUInt16 ();  			int handlerLength = br.ReadByte ();  			int classTokenOrFilterOffset = br.ReadInt32 ();  			exceptionClauses.Add (new ExceptionHandlingClause (module' flags' tryOffset' tryLength' handlerOffset' handlerLength' classTokenOrFilterOffset' context));  		}  	}  }  
Magic Number,IKVM.Reflection,MethodBody,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\MethodBody.cs,MethodBody,The following statement contains a magic number: if ((b & CorILMethod_MoreSects) != 0) {  	module.stream.Position = (module.stream.Position + 3) & ~3;  	int hdr = br.ReadInt32 ();  	if ((hdr & CorILMethod_Sect_MoreSects) != 0 || (hdr & CorILMethod_Sect_EHTable) == 0) {  		throw new NotImplementedException ();  	} else if ((hdr & CorILMethod_Sect_FatFormat) != 0) {  		int count = ComputeExceptionCount ((hdr >> 8) & 0xFFFFFF' 24);  		for (int i = 0; i < count; i++) {  			int flags = br.ReadInt32 ();  			int tryOffset = br.ReadInt32 ();  			int tryLength = br.ReadInt32 ();  			int handlerOffset = br.ReadInt32 ();  			int handlerLength = br.ReadInt32 ();  			int classTokenOrFilterOffset = br.ReadInt32 ();  			exceptionClauses.Add (new ExceptionHandlingClause (module' flags' tryOffset' tryLength' handlerOffset' handlerLength' classTokenOrFilterOffset' context));  		}  	} else {  		int count = ComputeExceptionCount ((hdr >> 8) & 0xFF' 12);  		for (int i = 0; i < count; i++) {  			int flags = br.ReadUInt16 ();  			int tryOffset = br.ReadUInt16 ();  			int tryLength = br.ReadByte ();  			int handlerOffset = br.ReadUInt16 ();  			int handlerLength = br.ReadByte ();  			int classTokenOrFilterOffset = br.ReadInt32 ();  			exceptionClauses.Add (new ExceptionHandlingClause (module' flags' tryOffset' tryLength' handlerOffset' handlerLength' classTokenOrFilterOffset' context));  		}  	}  }  
Magic Number,IKVM.Reflection,MethodBody,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\MethodBody.cs,MethodBody,The following statement contains a magic number: if ((b & CorILMethod_MoreSects) != 0) {  	module.stream.Position = (module.stream.Position + 3) & ~3;  	int hdr = br.ReadInt32 ();  	if ((hdr & CorILMethod_Sect_MoreSects) != 0 || (hdr & CorILMethod_Sect_EHTable) == 0) {  		throw new NotImplementedException ();  	} else if ((hdr & CorILMethod_Sect_FatFormat) != 0) {  		int count = ComputeExceptionCount ((hdr >> 8) & 0xFFFFFF' 24);  		for (int i = 0; i < count; i++) {  			int flags = br.ReadInt32 ();  			int tryOffset = br.ReadInt32 ();  			int tryLength = br.ReadInt32 ();  			int handlerOffset = br.ReadInt32 ();  			int handlerLength = br.ReadInt32 ();  			int classTokenOrFilterOffset = br.ReadInt32 ();  			exceptionClauses.Add (new ExceptionHandlingClause (module' flags' tryOffset' tryLength' handlerOffset' handlerLength' classTokenOrFilterOffset' context));  		}  	} else {  		int count = ComputeExceptionCount ((hdr >> 8) & 0xFF' 12);  		for (int i = 0; i < count; i++) {  			int flags = br.ReadUInt16 ();  			int tryOffset = br.ReadUInt16 ();  			int tryLength = br.ReadByte ();  			int handlerOffset = br.ReadUInt16 ();  			int handlerLength = br.ReadByte ();  			int classTokenOrFilterOffset = br.ReadInt32 ();  			exceptionClauses.Add (new ExceptionHandlingClause (module' flags' tryOffset' tryLength' handlerOffset' handlerLength' classTokenOrFilterOffset' context));  		}  	}  }  
Magic Number,IKVM.Reflection,MethodBody,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\MethodBody.cs,MethodBody,The following statement contains a magic number: if ((b & CorILMethod_MoreSects) != 0) {  	module.stream.Position = (module.stream.Position + 3) & ~3;  	int hdr = br.ReadInt32 ();  	if ((hdr & CorILMethod_Sect_MoreSects) != 0 || (hdr & CorILMethod_Sect_EHTable) == 0) {  		throw new NotImplementedException ();  	} else if ((hdr & CorILMethod_Sect_FatFormat) != 0) {  		int count = ComputeExceptionCount ((hdr >> 8) & 0xFFFFFF' 24);  		for (int i = 0; i < count; i++) {  			int flags = br.ReadInt32 ();  			int tryOffset = br.ReadInt32 ();  			int tryLength = br.ReadInt32 ();  			int handlerOffset = br.ReadInt32 ();  			int handlerLength = br.ReadInt32 ();  			int classTokenOrFilterOffset = br.ReadInt32 ();  			exceptionClauses.Add (new ExceptionHandlingClause (module' flags' tryOffset' tryLength' handlerOffset' handlerLength' classTokenOrFilterOffset' context));  		}  	} else {  		int count = ComputeExceptionCount ((hdr >> 8) & 0xFF' 12);  		for (int i = 0; i < count; i++) {  			int flags = br.ReadUInt16 ();  			int tryOffset = br.ReadUInt16 ();  			int tryLength = br.ReadByte ();  			int handlerOffset = br.ReadUInt16 ();  			int handlerLength = br.ReadByte ();  			int classTokenOrFilterOffset = br.ReadInt32 ();  			exceptionClauses.Add (new ExceptionHandlingClause (module' flags' tryOffset' tryLength' handlerOffset' handlerLength' classTokenOrFilterOffset' context));  		}  	}  }  
Magic Number,IKVM.Reflection,MethodBody,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\MethodBody.cs,MethodBody,The following statement contains a magic number: module.stream.Position = (module.stream.Position + 3) & ~3;  
Magic Number,IKVM.Reflection,MethodBody,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\MethodBody.cs,MethodBody,The following statement contains a magic number: module.stream.Position = (module.stream.Position + 3) & ~3;  
Magic Number,IKVM.Reflection,MethodBody,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\MethodBody.cs,MethodBody,The following statement contains a magic number: if ((hdr & CorILMethod_Sect_MoreSects) != 0 || (hdr & CorILMethod_Sect_EHTable) == 0) {  	throw new NotImplementedException ();  } else if ((hdr & CorILMethod_Sect_FatFormat) != 0) {  	int count = ComputeExceptionCount ((hdr >> 8) & 0xFFFFFF' 24);  	for (int i = 0; i < count; i++) {  		int flags = br.ReadInt32 ();  		int tryOffset = br.ReadInt32 ();  		int tryLength = br.ReadInt32 ();  		int handlerOffset = br.ReadInt32 ();  		int handlerLength = br.ReadInt32 ();  		int classTokenOrFilterOffset = br.ReadInt32 ();  		exceptionClauses.Add (new ExceptionHandlingClause (module' flags' tryOffset' tryLength' handlerOffset' handlerLength' classTokenOrFilterOffset' context));  	}  } else {  	int count = ComputeExceptionCount ((hdr >> 8) & 0xFF' 12);  	for (int i = 0; i < count; i++) {  		int flags = br.ReadUInt16 ();  		int tryOffset = br.ReadUInt16 ();  		int tryLength = br.ReadByte ();  		int handlerOffset = br.ReadUInt16 ();  		int handlerLength = br.ReadByte ();  		int classTokenOrFilterOffset = br.ReadInt32 ();  		exceptionClauses.Add (new ExceptionHandlingClause (module' flags' tryOffset' tryLength' handlerOffset' handlerLength' classTokenOrFilterOffset' context));  	}  }  
Magic Number,IKVM.Reflection,MethodBody,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\MethodBody.cs,MethodBody,The following statement contains a magic number: if ((hdr & CorILMethod_Sect_MoreSects) != 0 || (hdr & CorILMethod_Sect_EHTable) == 0) {  	throw new NotImplementedException ();  } else if ((hdr & CorILMethod_Sect_FatFormat) != 0) {  	int count = ComputeExceptionCount ((hdr >> 8) & 0xFFFFFF' 24);  	for (int i = 0; i < count; i++) {  		int flags = br.ReadInt32 ();  		int tryOffset = br.ReadInt32 ();  		int tryLength = br.ReadInt32 ();  		int handlerOffset = br.ReadInt32 ();  		int handlerLength = br.ReadInt32 ();  		int classTokenOrFilterOffset = br.ReadInt32 ();  		exceptionClauses.Add (new ExceptionHandlingClause (module' flags' tryOffset' tryLength' handlerOffset' handlerLength' classTokenOrFilterOffset' context));  	}  } else {  	int count = ComputeExceptionCount ((hdr >> 8) & 0xFF' 12);  	for (int i = 0; i < count; i++) {  		int flags = br.ReadUInt16 ();  		int tryOffset = br.ReadUInt16 ();  		int tryLength = br.ReadByte ();  		int handlerOffset = br.ReadUInt16 ();  		int handlerLength = br.ReadByte ();  		int classTokenOrFilterOffset = br.ReadInt32 ();  		exceptionClauses.Add (new ExceptionHandlingClause (module' flags' tryOffset' tryLength' handlerOffset' handlerLength' classTokenOrFilterOffset' context));  	}  }  
Magic Number,IKVM.Reflection,MethodBody,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\MethodBody.cs,MethodBody,The following statement contains a magic number: if ((hdr & CorILMethod_Sect_MoreSects) != 0 || (hdr & CorILMethod_Sect_EHTable) == 0) {  	throw new NotImplementedException ();  } else if ((hdr & CorILMethod_Sect_FatFormat) != 0) {  	int count = ComputeExceptionCount ((hdr >> 8) & 0xFFFFFF' 24);  	for (int i = 0; i < count; i++) {  		int flags = br.ReadInt32 ();  		int tryOffset = br.ReadInt32 ();  		int tryLength = br.ReadInt32 ();  		int handlerOffset = br.ReadInt32 ();  		int handlerLength = br.ReadInt32 ();  		int classTokenOrFilterOffset = br.ReadInt32 ();  		exceptionClauses.Add (new ExceptionHandlingClause (module' flags' tryOffset' tryLength' handlerOffset' handlerLength' classTokenOrFilterOffset' context));  	}  } else {  	int count = ComputeExceptionCount ((hdr >> 8) & 0xFF' 12);  	for (int i = 0; i < count; i++) {  		int flags = br.ReadUInt16 ();  		int tryOffset = br.ReadUInt16 ();  		int tryLength = br.ReadByte ();  		int handlerOffset = br.ReadUInt16 ();  		int handlerLength = br.ReadByte ();  		int classTokenOrFilterOffset = br.ReadInt32 ();  		exceptionClauses.Add (new ExceptionHandlingClause (module' flags' tryOffset' tryLength' handlerOffset' handlerLength' classTokenOrFilterOffset' context));  	}  }  
Magic Number,IKVM.Reflection,MethodBody,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\MethodBody.cs,MethodBody,The following statement contains a magic number: if ((hdr & CorILMethod_Sect_MoreSects) != 0 || (hdr & CorILMethod_Sect_EHTable) == 0) {  	throw new NotImplementedException ();  } else if ((hdr & CorILMethod_Sect_FatFormat) != 0) {  	int count = ComputeExceptionCount ((hdr >> 8) & 0xFFFFFF' 24);  	for (int i = 0; i < count; i++) {  		int flags = br.ReadInt32 ();  		int tryOffset = br.ReadInt32 ();  		int tryLength = br.ReadInt32 ();  		int handlerOffset = br.ReadInt32 ();  		int handlerLength = br.ReadInt32 ();  		int classTokenOrFilterOffset = br.ReadInt32 ();  		exceptionClauses.Add (new ExceptionHandlingClause (module' flags' tryOffset' tryLength' handlerOffset' handlerLength' classTokenOrFilterOffset' context));  	}  } else {  	int count = ComputeExceptionCount ((hdr >> 8) & 0xFF' 12);  	for (int i = 0; i < count; i++) {  		int flags = br.ReadUInt16 ();  		int tryOffset = br.ReadUInt16 ();  		int tryLength = br.ReadByte ();  		int handlerOffset = br.ReadUInt16 ();  		int handlerLength = br.ReadByte ();  		int classTokenOrFilterOffset = br.ReadInt32 ();  		exceptionClauses.Add (new ExceptionHandlingClause (module' flags' tryOffset' tryLength' handlerOffset' handlerLength' classTokenOrFilterOffset' context));  	}  }  
Magic Number,IKVM.Reflection,MethodBody,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\MethodBody.cs,MethodBody,The following statement contains a magic number: if ((hdr & CorILMethod_Sect_FatFormat) != 0) {  	int count = ComputeExceptionCount ((hdr >> 8) & 0xFFFFFF' 24);  	for (int i = 0; i < count; i++) {  		int flags = br.ReadInt32 ();  		int tryOffset = br.ReadInt32 ();  		int tryLength = br.ReadInt32 ();  		int handlerOffset = br.ReadInt32 ();  		int handlerLength = br.ReadInt32 ();  		int classTokenOrFilterOffset = br.ReadInt32 ();  		exceptionClauses.Add (new ExceptionHandlingClause (module' flags' tryOffset' tryLength' handlerOffset' handlerLength' classTokenOrFilterOffset' context));  	}  } else {  	int count = ComputeExceptionCount ((hdr >> 8) & 0xFF' 12);  	for (int i = 0; i < count; i++) {  		int flags = br.ReadUInt16 ();  		int tryOffset = br.ReadUInt16 ();  		int tryLength = br.ReadByte ();  		int handlerOffset = br.ReadUInt16 ();  		int handlerLength = br.ReadByte ();  		int classTokenOrFilterOffset = br.ReadInt32 ();  		exceptionClauses.Add (new ExceptionHandlingClause (module' flags' tryOffset' tryLength' handlerOffset' handlerLength' classTokenOrFilterOffset' context));  	}  }  
Magic Number,IKVM.Reflection,MethodBody,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\MethodBody.cs,MethodBody,The following statement contains a magic number: if ((hdr & CorILMethod_Sect_FatFormat) != 0) {  	int count = ComputeExceptionCount ((hdr >> 8) & 0xFFFFFF' 24);  	for (int i = 0; i < count; i++) {  		int flags = br.ReadInt32 ();  		int tryOffset = br.ReadInt32 ();  		int tryLength = br.ReadInt32 ();  		int handlerOffset = br.ReadInt32 ();  		int handlerLength = br.ReadInt32 ();  		int classTokenOrFilterOffset = br.ReadInt32 ();  		exceptionClauses.Add (new ExceptionHandlingClause (module' flags' tryOffset' tryLength' handlerOffset' handlerLength' classTokenOrFilterOffset' context));  	}  } else {  	int count = ComputeExceptionCount ((hdr >> 8) & 0xFF' 12);  	for (int i = 0; i < count; i++) {  		int flags = br.ReadUInt16 ();  		int tryOffset = br.ReadUInt16 ();  		int tryLength = br.ReadByte ();  		int handlerOffset = br.ReadUInt16 ();  		int handlerLength = br.ReadByte ();  		int classTokenOrFilterOffset = br.ReadInt32 ();  		exceptionClauses.Add (new ExceptionHandlingClause (module' flags' tryOffset' tryLength' handlerOffset' handlerLength' classTokenOrFilterOffset' context));  	}  }  
Magic Number,IKVM.Reflection,MethodBody,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\MethodBody.cs,MethodBody,The following statement contains a magic number: if ((hdr & CorILMethod_Sect_FatFormat) != 0) {  	int count = ComputeExceptionCount ((hdr >> 8) & 0xFFFFFF' 24);  	for (int i = 0; i < count; i++) {  		int flags = br.ReadInt32 ();  		int tryOffset = br.ReadInt32 ();  		int tryLength = br.ReadInt32 ();  		int handlerOffset = br.ReadInt32 ();  		int handlerLength = br.ReadInt32 ();  		int classTokenOrFilterOffset = br.ReadInt32 ();  		exceptionClauses.Add (new ExceptionHandlingClause (module' flags' tryOffset' tryLength' handlerOffset' handlerLength' classTokenOrFilterOffset' context));  	}  } else {  	int count = ComputeExceptionCount ((hdr >> 8) & 0xFF' 12);  	for (int i = 0; i < count; i++) {  		int flags = br.ReadUInt16 ();  		int tryOffset = br.ReadUInt16 ();  		int tryLength = br.ReadByte ();  		int handlerOffset = br.ReadUInt16 ();  		int handlerLength = br.ReadByte ();  		int classTokenOrFilterOffset = br.ReadInt32 ();  		exceptionClauses.Add (new ExceptionHandlingClause (module' flags' tryOffset' tryLength' handlerOffset' handlerLength' classTokenOrFilterOffset' context));  	}  }  
Magic Number,IKVM.Reflection,MethodBody,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\MethodBody.cs,MethodBody,The following statement contains a magic number: if ((hdr & CorILMethod_Sect_FatFormat) != 0) {  	int count = ComputeExceptionCount ((hdr >> 8) & 0xFFFFFF' 24);  	for (int i = 0; i < count; i++) {  		int flags = br.ReadInt32 ();  		int tryOffset = br.ReadInt32 ();  		int tryLength = br.ReadInt32 ();  		int handlerOffset = br.ReadInt32 ();  		int handlerLength = br.ReadInt32 ();  		int classTokenOrFilterOffset = br.ReadInt32 ();  		exceptionClauses.Add (new ExceptionHandlingClause (module' flags' tryOffset' tryLength' handlerOffset' handlerLength' classTokenOrFilterOffset' context));  	}  } else {  	int count = ComputeExceptionCount ((hdr >> 8) & 0xFF' 12);  	for (int i = 0; i < count; i++) {  		int flags = br.ReadUInt16 ();  		int tryOffset = br.ReadUInt16 ();  		int tryLength = br.ReadByte ();  		int handlerOffset = br.ReadUInt16 ();  		int handlerLength = br.ReadByte ();  		int classTokenOrFilterOffset = br.ReadInt32 ();  		exceptionClauses.Add (new ExceptionHandlingClause (module' flags' tryOffset' tryLength' handlerOffset' handlerLength' classTokenOrFilterOffset' context));  	}  }  
Magic Number,IKVM.Reflection,MethodSignature,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\MethodSignature.cs,GetHashCode,The following statement contains a magic number: return genericParamCount ^ 77 * (int)callingConvention ^ 3 * returnType.GetHashCode () ^ Util.GetHashCode (parameterTypes) * 5 ^ modifiers.GetHashCode () * 55;  
Magic Number,IKVM.Reflection,MethodSignature,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\MethodSignature.cs,GetHashCode,The following statement contains a magic number: return genericParamCount ^ 77 * (int)callingConvention ^ 3 * returnType.GetHashCode () ^ Util.GetHashCode (parameterTypes) * 5 ^ modifiers.GetHashCode () * 55;  
Magic Number,IKVM.Reflection,MethodSignature,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\MethodSignature.cs,GetHashCode,The following statement contains a magic number: return genericParamCount ^ 77 * (int)callingConvention ^ 3 * returnType.GetHashCode () ^ Util.GetHashCode (parameterTypes) * 5 ^ modifiers.GetHashCode () * 55;  
Magic Number,IKVM.Reflection,MethodSignature,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\MethodSignature.cs,GetHashCode,The following statement contains a magic number: return genericParamCount ^ 77 * (int)callingConvention ^ 3 * returnType.GetHashCode () ^ Util.GetHashCode (parameterTypes) * 5 ^ modifiers.GetHashCode () * 55;  
Magic Number,IKVM.Reflection,MethodSignature,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\MethodSignature.cs,ReadSig,The following statement contains a magic number: switch (flags & 7) {  case DEFAULT:  	callingConvention = CallingConventions.Standard;  	break;  case VARARG:  	callingConvention = CallingConventions.VarArgs;  	break;  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection,MethodSignature,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\MethodSignature.cs,ReadStandAloneMethodSig,The following statement contains a magic number: switch (flags & 7) {  case DEFAULT:  	callingConvention = CallingConventions.Standard;  	unmanaged = false;  	break;  case 0x01:  	// C  	unmanagedCallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl;  	unmanaged = true;  	break;  case 0x02:  	// STDCALL  	unmanagedCallingConvention = System.Runtime.InteropServices.CallingConvention.StdCall;  	unmanaged = true;  	break;  case 0x03:  	// THISCALL  	unmanagedCallingConvention = System.Runtime.InteropServices.CallingConvention.ThisCall;  	unmanaged = true;  	break;  case 0x04:  	// FASTCALL  	unmanagedCallingConvention = System.Runtime.InteropServices.CallingConvention.FastCall;  	unmanaged = true;  	break;  case VARARG:  	callingConvention = CallingConventions.VarArgs;  	unmanaged = false;  	break;  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection,ParameterInfo,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\ParameterInfo.cs,GetHashCode,The following statement contains a magic number: return this.Member.GetHashCode () * 1777 + this.Position;  
Magic Number,IKVM.Reflection,Signature,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Signature.cs,ReadLocalVarSig,The following statement contains a magic number: if (br.Length < 2 || br.ReadByte () != LOCAL_SIG) {  	throw new BadImageFormatException ("Invalid local variable signature");  }  
Magic Number,IKVM.Reflection,Signature,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Signature.cs,ReadTypeDefOrRefEncoded,The following statement contains a magic number: switch (encoded & 3) {  case 0:  	return module.ResolveType ((TypeDefTable.Index << 24) + (encoded >> 2)' null' null);  case 1:  	return module.ResolveType ((TypeRefTable.Index << 24) + (encoded >> 2)' null' null);  case 2:  	return module.ResolveType ((TypeSpecTable.Index << 24) + (encoded >> 2)' context);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection,Signature,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Signature.cs,ReadTypeDefOrRefEncoded,The following statement contains a magic number: switch (encoded & 3) {  case 0:  	return module.ResolveType ((TypeDefTable.Index << 24) + (encoded >> 2)' null' null);  case 1:  	return module.ResolveType ((TypeRefTable.Index << 24) + (encoded >> 2)' null' null);  case 2:  	return module.ResolveType ((TypeSpecTable.Index << 24) + (encoded >> 2)' context);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection,Signature,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Signature.cs,ReadTypeDefOrRefEncoded,The following statement contains a magic number: switch (encoded & 3) {  case 0:  	return module.ResolveType ((TypeDefTable.Index << 24) + (encoded >> 2)' null' null);  case 1:  	return module.ResolveType ((TypeRefTable.Index << 24) + (encoded >> 2)' null' null);  case 2:  	return module.ResolveType ((TypeSpecTable.Index << 24) + (encoded >> 2)' context);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection,Signature,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Signature.cs,ReadTypeDefOrRefEncoded,The following statement contains a magic number: switch (encoded & 3) {  case 0:  	return module.ResolveType ((TypeDefTable.Index << 24) + (encoded >> 2)' null' null);  case 1:  	return module.ResolveType ((TypeRefTable.Index << 24) + (encoded >> 2)' null' null);  case 2:  	return module.ResolveType ((TypeSpecTable.Index << 24) + (encoded >> 2)' context);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection,Signature,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Signature.cs,ReadTypeDefOrRefEncoded,The following statement contains a magic number: switch (encoded & 3) {  case 0:  	return module.ResolveType ((TypeDefTable.Index << 24) + (encoded >> 2)' null' null);  case 1:  	return module.ResolveType ((TypeRefTable.Index << 24) + (encoded >> 2)' null' null);  case 2:  	return module.ResolveType ((TypeSpecTable.Index << 24) + (encoded >> 2)' context);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection,Signature,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Signature.cs,ReadTypeDefOrRefEncoded,The following statement contains a magic number: switch (encoded & 3) {  case 0:  	return module.ResolveType ((TypeDefTable.Index << 24) + (encoded >> 2)' null' null);  case 1:  	return module.ResolveType ((TypeRefTable.Index << 24) + (encoded >> 2)' null' null);  case 2:  	return module.ResolveType ((TypeSpecTable.Index << 24) + (encoded >> 2)' context);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection,Signature,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Signature.cs,ReadTypeDefOrRefEncoded,The following statement contains a magic number: switch (encoded & 3) {  case 0:  	return module.ResolveType ((TypeDefTable.Index << 24) + (encoded >> 2)' null' null);  case 1:  	return module.ResolveType ((TypeRefTable.Index << 24) + (encoded >> 2)' null' null);  case 2:  	return module.ResolveType ((TypeSpecTable.Index << 24) + (encoded >> 2)' context);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection,Signature,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Signature.cs,ReadTypeDefOrRefEncoded,The following statement contains a magic number: switch (encoded & 3) {  case 0:  	return module.ResolveType ((TypeDefTable.Index << 24) + (encoded >> 2)' null' null);  case 1:  	return module.ResolveType ((TypeRefTable.Index << 24) + (encoded >> 2)' null' null);  case 2:  	return module.ResolveType ((TypeSpecTable.Index << 24) + (encoded >> 2)' context);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection,Signature,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Signature.cs,ReadTypeDefOrRefEncoded,The following statement contains a magic number: return module.ResolveType ((TypeDefTable.Index << 24) + (encoded >> 2)' null' null);  
Magic Number,IKVM.Reflection,Signature,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Signature.cs,ReadTypeDefOrRefEncoded,The following statement contains a magic number: return module.ResolveType ((TypeDefTable.Index << 24) + (encoded >> 2)' null' null);  
Magic Number,IKVM.Reflection,Signature,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Signature.cs,ReadTypeDefOrRefEncoded,The following statement contains a magic number: return module.ResolveType ((TypeRefTable.Index << 24) + (encoded >> 2)' null' null);  
Magic Number,IKVM.Reflection,Signature,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Signature.cs,ReadTypeDefOrRefEncoded,The following statement contains a magic number: return module.ResolveType ((TypeRefTable.Index << 24) + (encoded >> 2)' null' null);  
Magic Number,IKVM.Reflection,Signature,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Signature.cs,ReadTypeDefOrRefEncoded,The following statement contains a magic number: return module.ResolveType ((TypeSpecTable.Index << 24) + (encoded >> 2)' context);  
Magic Number,IKVM.Reflection,Signature,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Signature.cs,ReadTypeDefOrRefEncoded,The following statement contains a magic number: return module.ResolveType ((TypeSpecTable.Index << 24) + (encoded >> 2)' context);  
Magic Number,IKVM.Reflection,StrongNameKeyPair,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\StrongNameKeyPair.cs,CreateRSA,The following statement contains a magic number: try {  	if (keyPairArray != null) {  		RSACryptoServiceProvider rsa = new RSACryptoServiceProvider ();  		rsa.ImportCspBlob (keyPairArray);  		return rsa;  	} else {  		CspParameters parm = new CspParameters ();  		parm.KeyContainerName = keyPairContainer;  		// MONOBUG Mono doesn't like it when Flags or KeyNumber are set  		if (!Universe.MonoRuntime) {  			parm.Flags = CspProviderFlags.UseMachineKeyStore | CspProviderFlags.UseExistingKey;  			parm.KeyNumber = 2;  			// Signature  		}  		return new RSACryptoServiceProvider (parm);  	}  } catch {  	throw new ArgumentException ("Unable to obtain public key for StrongNameKeyPair.");  }  
Magic Number,IKVM.Reflection,StrongNameKeyPair,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\StrongNameKeyPair.cs,CreateRSA,The following statement contains a magic number: if (keyPairArray != null) {  	RSACryptoServiceProvider rsa = new RSACryptoServiceProvider ();  	rsa.ImportCspBlob (keyPairArray);  	return rsa;  } else {  	CspParameters parm = new CspParameters ();  	parm.KeyContainerName = keyPairContainer;  	// MONOBUG Mono doesn't like it when Flags or KeyNumber are set  	if (!Universe.MonoRuntime) {  		parm.Flags = CspProviderFlags.UseMachineKeyStore | CspProviderFlags.UseExistingKey;  		parm.KeyNumber = 2;  		// Signature  	}  	return new RSACryptoServiceProvider (parm);  }  
Magic Number,IKVM.Reflection,StrongNameKeyPair,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\StrongNameKeyPair.cs,CreateRSA,The following statement contains a magic number: if (!Universe.MonoRuntime) {  	parm.Flags = CspProviderFlags.UseMachineKeyStore | CspProviderFlags.UseExistingKey;  	parm.KeyNumber = 2;  	// Signature  }  
Magic Number,IKVM.Reflection,StrongNameKeyPair,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\StrongNameKeyPair.cs,CreateRSA,The following statement contains a magic number: parm.KeyNumber = 2;  
Magic Number,IKVM.Reflection,ArrayType,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Type.cs,GetHashCode,The following statement contains a magic number: return elementType.GetHashCode () * 5;  
Magic Number,IKVM.Reflection,MultiArrayType,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Type.cs,__GetDeclaredMethods,The following statement contains a magic number: for (int i = 0; i < rank; i++) {  	setArgs [i] = int32;  	getArgs [i] = int32;  	ctorArgs [i * 2 + 0] = int32;  	ctorArgs [i * 2 + 1] = int32;  }  
Magic Number,IKVM.Reflection,MultiArrayType,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Type.cs,__GetDeclaredMethods,The following statement contains a magic number: for (int i = 0; i < rank; i++) {  	setArgs [i] = int32;  	getArgs [i] = int32;  	ctorArgs [i * 2 + 0] = int32;  	ctorArgs [i * 2 + 1] = int32;  }  
Magic Number,IKVM.Reflection,MultiArrayType,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Type.cs,__GetDeclaredMethods,The following statement contains a magic number: ctorArgs [i * 2 + 0] = int32;  
Magic Number,IKVM.Reflection,MultiArrayType,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Type.cs,__GetDeclaredMethods,The following statement contains a magic number: ctorArgs [i * 2 + 1] = int32;  
Magic Number,IKVM.Reflection,MultiArrayType,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Type.cs,GetHashCode,The following statement contains a magic number: return elementType.GetHashCode () * 9 + rank;  
Magic Number,IKVM.Reflection,ByRefType,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Type.cs,GetHashCode,The following statement contains a magic number: return elementType.GetHashCode () * 3;  
Magic Number,IKVM.Reflection,PointerType,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Type.cs,GetHashCode,The following statement contains a magic number: return elementType.GetHashCode () * 7;  
Magic Number,IKVM.Reflection,GenericTypeInstance,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Type.cs,GetHashCode,The following statement contains a magic number: return type.GetHashCode () * 3 ^ Util.GetHashCode (args);  
Magic Number,IKVM.Reflection,TypeName,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\TypeNameParser.cs,GetHashCode,The following statement contains a magic number: return ns == null ? name.GetHashCode () : ns.GetHashCode () * 37 + name.GetHashCode ();  
Magic Number,IKVM.Reflection,TypeNameParser,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\TypeNameParser.cs,Escape,The following statement contains a magic number: for (int pos = 0; pos < name.Length; pos++) {  	char c = name [pos];  	switch (c) {  	case '\\':  	case '+':  	case ''':  	case '[':  	case ']':  	case '*':  	case '&':  		if (sb == null) {  			sb = new StringBuilder (name' 0' pos' name.Length + 3);  		}  		sb.Append ("\\").Append (c);  		break;  	default:  		if (sb != null) {  			sb.Append (c);  		}  		break;  	}  }  
Magic Number,IKVM.Reflection,TypeNameParser,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\TypeNameParser.cs,Escape,The following statement contains a magic number: switch (c) {  case '\\':  case '+':  case ''':  case '[':  case ']':  case '*':  case '&':  	if (sb == null) {  		sb = new StringBuilder (name' 0' pos' name.Length + 3);  	}  	sb.Append ("\\").Append (c);  	break;  default:  	if (sb != null) {  		sb.Append (c);  	}  	break;  }  
Magic Number,IKVM.Reflection,TypeNameParser,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\TypeNameParser.cs,Escape,The following statement contains a magic number: if (sb == null) {  	sb = new StringBuilder (name' 0' pos' name.Length + 3);  }  
Magic Number,IKVM.Reflection,TypeNameParser,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\TypeNameParser.cs,Escape,The following statement contains a magic number: sb = new StringBuilder (name' 0' pos' name.Length + 3);  
Magic Number,IKVM.Reflection,Util,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Util.cs,GetHashCode,The following statement contains a magic number: foreach (Type t in types) {  	if (t != null) {  		h *= 3;  		h ^= t.GetHashCode ();  	}  }  
Magic Number,IKVM.Reflection,Util,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Util.cs,GetHashCode,The following statement contains a magic number: if (t != null) {  	h *= 3;  	h ^= t.GetHashCode ();  }  
Magic Number,IKVM.Reflection,Util,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Util.cs,GetHashCode,The following statement contains a magic number: h *= 3;  
Magic Number,IKVM.Reflection.Emit,AssemblyBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\AssemblyBuilder.cs,SaveImpl,The following statement contains a magic number: if (versionInfo != null) {  	versionInfo.SetName (GetName ());  	versionInfo.SetFileName (assemblyFileName);  	foreach (CustomAttributeBuilder cab in customAttributes) {  		// .NET doesn't support copying blob custom attributes into the version info  		if (!cab.HasBlob) {  			versionInfo.SetAttribute (cab);  		}  	}  	ByteBuffer versionInfoData = new ByteBuffer (512);  	versionInfo.Write (versionInfoData);  	unmanagedResources.AddVersionInfo (versionInfoData);  }  
Magic Number,IKVM.Reflection.Emit,AssemblyBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\AssemblyBuilder.cs,SaveImpl,The following statement contains a magic number: if (win32manifest != null) {  	unmanagedResources.AddManifest (win32manifest' fileKind == PEFileKinds.Dll ? (ushort)2 : (ushort)1);  }  
Magic Number,IKVM.Reflection.Emit,AssemblyBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\AssemblyBuilder.cs,SaveImpl,The following statement contains a magic number: unmanagedResources.AddManifest (win32manifest' fileKind == PEFileKinds.Dll ? (ushort)2 : (ushort)1);  
Magic Number,IKVM.Reflection.Emit,AssemblyBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\AssemblyBuilder.cs,AddFile,The following statement contains a magic number: using (FileStream fs = new FileStream (fullPath' FileMode.Open' FileAccess.Read)) {  	using (CryptoStream cs = new CryptoStream (Stream.Null' hash' CryptoStreamMode.Write)) {  		byte[] buf = new byte[8192];  		ModuleWriter.HashChunk (fs' cs' buf' (int)fs.Length);  	}  }  
Magic Number,IKVM.Reflection.Emit,AssemblyBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\AssemblyBuilder.cs,AddFile,The following statement contains a magic number: using (CryptoStream cs = new CryptoStream (Stream.Null' hash' CryptoStreamMode.Write)) {  	byte[] buf = new byte[8192];  	ModuleWriter.HashChunk (fs' cs' buf' (int)fs.Length);  }  
Magic Number,IKVM.Reflection.Emit,CustomAttributeBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\CustomAttributeBuilder.cs,WriteBlob,The following statement contains a magic number: if (blob != null) {  	bb = ByteBuffer.Wrap (blob);  } else {  	bb = new ByteBuffer (100);  	BlobWriter bw = new BlobWriter (moduleBuilder.Assembly' this' bb);  	bw.WriteCustomAttributeBlob ();  }  
Magic Number,IKVM.Reflection.Emit,CustomAttributeBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\CustomAttributeBuilder.cs,WriteBlob,The following statement contains a magic number: bb = new ByteBuffer (100);  
Magic Number,IKVM.Reflection.Emit,FieldBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\FieldBuilder.cs,SetDataAndRvaImpl,The following statement contains a magic number: bb.Align (8);  
Magic Number,IKVM.Reflection.Emit,ILGenerator,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ILGenerator.cs,Emit,The following statement contains a magic number: if (opc.Value < 0) {  	code.Write ((byte)(opc.Value >> 8));  }  
Magic Number,IKVM.Reflection.Emit,ILGenerator,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ILGenerator.cs,Emit,The following statement contains a magic number: code.Write ((byte)(opc.Value >> 8));  
Magic Number,IKVM.Reflection.Emit,ILGenerator,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ILGenerator.cs,Emit,The following statement contains a magic number: if (labels [label.Index] != -1) {  	if (labelStackHeight [label.Index] != flowStackHeight && (labelStackHeight [label.Index] != 0 || flowStackHeight != -1)) {  		// the "backward branch constraint" prohibits this' so we don't need to support it  		throw new NotSupportedException ("'Backward branch constraints' violated");  	}  	if (opc.OperandType == OperandType.ShortInlineBrTarget) {  		WriteByteBranchOffset (labels [label.Index] - (code.Position + 1));  	} else {  		code.Write (labels [label.Index] - (code.Position + 4));  	}  } else {  	Debug.Assert (labelStackHeight [label.Index] == -1 || labelStackHeight [label.Index] == flowStackHeight || (flowStackHeight == -1 && labelStackHeight [label.Index] == 0));  	labelStackHeight [label.Index] = flowStackHeight;  	LabelFixup fix = new LabelFixup ();  	fix.label = label.Index;  	fix.offset = code.Position;  	labelFixups.Add (fix);  	if (opc.OperandType == OperandType.ShortInlineBrTarget) {  		code.Write ((byte)1);  	} else {  		code.Write (4);  	}  }  
Magic Number,IKVM.Reflection.Emit,ILGenerator,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ILGenerator.cs,Emit,The following statement contains a magic number: if (labels [label.Index] != -1) {  	if (labelStackHeight [label.Index] != flowStackHeight && (labelStackHeight [label.Index] != 0 || flowStackHeight != -1)) {  		// the "backward branch constraint" prohibits this' so we don't need to support it  		throw new NotSupportedException ("'Backward branch constraints' violated");  	}  	if (opc.OperandType == OperandType.ShortInlineBrTarget) {  		WriteByteBranchOffset (labels [label.Index] - (code.Position + 1));  	} else {  		code.Write (labels [label.Index] - (code.Position + 4));  	}  } else {  	Debug.Assert (labelStackHeight [label.Index] == -1 || labelStackHeight [label.Index] == flowStackHeight || (flowStackHeight == -1 && labelStackHeight [label.Index] == 0));  	labelStackHeight [label.Index] = flowStackHeight;  	LabelFixup fix = new LabelFixup ();  	fix.label = label.Index;  	fix.offset = code.Position;  	labelFixups.Add (fix);  	if (opc.OperandType == OperandType.ShortInlineBrTarget) {  		code.Write ((byte)1);  	} else {  		code.Write (4);  	}  }  
Magic Number,IKVM.Reflection.Emit,ILGenerator,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ILGenerator.cs,Emit,The following statement contains a magic number: if (opc.OperandType == OperandType.ShortInlineBrTarget) {  	WriteByteBranchOffset (labels [label.Index] - (code.Position + 1));  } else {  	code.Write (labels [label.Index] - (code.Position + 4));  }  
Magic Number,IKVM.Reflection.Emit,ILGenerator,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ILGenerator.cs,Emit,The following statement contains a magic number: code.Write (labels [label.Index] - (code.Position + 4));  
Magic Number,IKVM.Reflection.Emit,ILGenerator,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ILGenerator.cs,Emit,The following statement contains a magic number: if (opc.OperandType == OperandType.ShortInlineBrTarget) {  	code.Write ((byte)1);  } else {  	code.Write (4);  }  
Magic Number,IKVM.Reflection.Emit,ILGenerator,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ILGenerator.cs,Emit,The following statement contains a magic number: code.Write (4);  
Magic Number,IKVM.Reflection.Emit,ILGenerator,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ILGenerator.cs,WriteByteBranchOffset,The following statement contains a magic number: if (offset < -128 || offset > 127) {  	throw new NotSupportedException ("Branch offset of " + offset + " does not fit in one-byte branch target at position " + code.Position);  }  
Magic Number,IKVM.Reflection.Emit,ILGenerator,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ILGenerator.cs,WriteByteBranchOffset,The following statement contains a magic number: if (offset < -128 || offset > 127) {  	throw new NotSupportedException ("Branch offset of " + offset + " does not fit in one-byte branch target at position " + code.Position);  }  
Magic Number,IKVM.Reflection.Emit,ILGenerator,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ILGenerator.cs,Emit,The following statement contains a magic number: if ((opc == OpCodes.Ldloc || opc == OpCodes.Ldloca || opc == OpCodes.Stloc) && local.LocalIndex < 256) {  	if (opc == OpCodes.Ldloc) {  		switch (local.LocalIndex) {  		case 0:  			Emit (OpCodes.Ldloc_0);  			break;  		case 1:  			Emit (OpCodes.Ldloc_1);  			break;  		case 2:  			Emit (OpCodes.Ldloc_2);  			break;  		case 3:  			Emit (OpCodes.Ldloc_3);  			break;  		default:  			Emit (OpCodes.Ldloc_S);  			code.Write ((byte)local.LocalIndex);  			break;  		}  	} else if (opc == OpCodes.Ldloca) {  		Emit (OpCodes.Ldloca_S);  		code.Write ((byte)local.LocalIndex);  	} else if (opc == OpCodes.Stloc) {  		switch (local.LocalIndex) {  		case 0:  			Emit (OpCodes.Stloc_0);  			break;  		case 1:  			Emit (OpCodes.Stloc_1);  			break;  		case 2:  			Emit (OpCodes.Stloc_2);  			break;  		case 3:  			Emit (OpCodes.Stloc_3);  			break;  		default:  			Emit (OpCodes.Stloc_S);  			code.Write ((byte)local.LocalIndex);  			break;  		}  	}  } else {  	Emit (opc);  	switch (opc.OperandType) {  	case OperandType.InlineVar:  		code.Write ((ushort)local.LocalIndex);  		break;  	case OperandType.ShortInlineVar:  		code.Write ((byte)local.LocalIndex);  		break;  	}  }  
Magic Number,IKVM.Reflection.Emit,ILGenerator,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ILGenerator.cs,Emit,The following statement contains a magic number: if ((opc == OpCodes.Ldloc || opc == OpCodes.Ldloca || opc == OpCodes.Stloc) && local.LocalIndex < 256) {  	if (opc == OpCodes.Ldloc) {  		switch (local.LocalIndex) {  		case 0:  			Emit (OpCodes.Ldloc_0);  			break;  		case 1:  			Emit (OpCodes.Ldloc_1);  			break;  		case 2:  			Emit (OpCodes.Ldloc_2);  			break;  		case 3:  			Emit (OpCodes.Ldloc_3);  			break;  		default:  			Emit (OpCodes.Ldloc_S);  			code.Write ((byte)local.LocalIndex);  			break;  		}  	} else if (opc == OpCodes.Ldloca) {  		Emit (OpCodes.Ldloca_S);  		code.Write ((byte)local.LocalIndex);  	} else if (opc == OpCodes.Stloc) {  		switch (local.LocalIndex) {  		case 0:  			Emit (OpCodes.Stloc_0);  			break;  		case 1:  			Emit (OpCodes.Stloc_1);  			break;  		case 2:  			Emit (OpCodes.Stloc_2);  			break;  		case 3:  			Emit (OpCodes.Stloc_3);  			break;  		default:  			Emit (OpCodes.Stloc_S);  			code.Write ((byte)local.LocalIndex);  			break;  		}  	}  } else {  	Emit (opc);  	switch (opc.OperandType) {  	case OperandType.InlineVar:  		code.Write ((ushort)local.LocalIndex);  		break;  	case OperandType.ShortInlineVar:  		code.Write ((byte)local.LocalIndex);  		break;  	}  }  
Magic Number,IKVM.Reflection.Emit,ILGenerator,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ILGenerator.cs,Emit,The following statement contains a magic number: if ((opc == OpCodes.Ldloc || opc == OpCodes.Ldloca || opc == OpCodes.Stloc) && local.LocalIndex < 256) {  	if (opc == OpCodes.Ldloc) {  		switch (local.LocalIndex) {  		case 0:  			Emit (OpCodes.Ldloc_0);  			break;  		case 1:  			Emit (OpCodes.Ldloc_1);  			break;  		case 2:  			Emit (OpCodes.Ldloc_2);  			break;  		case 3:  			Emit (OpCodes.Ldloc_3);  			break;  		default:  			Emit (OpCodes.Ldloc_S);  			code.Write ((byte)local.LocalIndex);  			break;  		}  	} else if (opc == OpCodes.Ldloca) {  		Emit (OpCodes.Ldloca_S);  		code.Write ((byte)local.LocalIndex);  	} else if (opc == OpCodes.Stloc) {  		switch (local.LocalIndex) {  		case 0:  			Emit (OpCodes.Stloc_0);  			break;  		case 1:  			Emit (OpCodes.Stloc_1);  			break;  		case 2:  			Emit (OpCodes.Stloc_2);  			break;  		case 3:  			Emit (OpCodes.Stloc_3);  			break;  		default:  			Emit (OpCodes.Stloc_S);  			code.Write ((byte)local.LocalIndex);  			break;  		}  	}  } else {  	Emit (opc);  	switch (opc.OperandType) {  	case OperandType.InlineVar:  		code.Write ((ushort)local.LocalIndex);  		break;  	case OperandType.ShortInlineVar:  		code.Write ((byte)local.LocalIndex);  		break;  	}  }  
Magic Number,IKVM.Reflection.Emit,ILGenerator,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ILGenerator.cs,Emit,The following statement contains a magic number: if ((opc == OpCodes.Ldloc || opc == OpCodes.Ldloca || opc == OpCodes.Stloc) && local.LocalIndex < 256) {  	if (opc == OpCodes.Ldloc) {  		switch (local.LocalIndex) {  		case 0:  			Emit (OpCodes.Ldloc_0);  			break;  		case 1:  			Emit (OpCodes.Ldloc_1);  			break;  		case 2:  			Emit (OpCodes.Ldloc_2);  			break;  		case 3:  			Emit (OpCodes.Ldloc_3);  			break;  		default:  			Emit (OpCodes.Ldloc_S);  			code.Write ((byte)local.LocalIndex);  			break;  		}  	} else if (opc == OpCodes.Ldloca) {  		Emit (OpCodes.Ldloca_S);  		code.Write ((byte)local.LocalIndex);  	} else if (opc == OpCodes.Stloc) {  		switch (local.LocalIndex) {  		case 0:  			Emit (OpCodes.Stloc_0);  			break;  		case 1:  			Emit (OpCodes.Stloc_1);  			break;  		case 2:  			Emit (OpCodes.Stloc_2);  			break;  		case 3:  			Emit (OpCodes.Stloc_3);  			break;  		default:  			Emit (OpCodes.Stloc_S);  			code.Write ((byte)local.LocalIndex);  			break;  		}  	}  } else {  	Emit (opc);  	switch (opc.OperandType) {  	case OperandType.InlineVar:  		code.Write ((ushort)local.LocalIndex);  		break;  	case OperandType.ShortInlineVar:  		code.Write ((byte)local.LocalIndex);  		break;  	}  }  
Magic Number,IKVM.Reflection.Emit,ILGenerator,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ILGenerator.cs,Emit,The following statement contains a magic number: if ((opc == OpCodes.Ldloc || opc == OpCodes.Ldloca || opc == OpCodes.Stloc) && local.LocalIndex < 256) {  	if (opc == OpCodes.Ldloc) {  		switch (local.LocalIndex) {  		case 0:  			Emit (OpCodes.Ldloc_0);  			break;  		case 1:  			Emit (OpCodes.Ldloc_1);  			break;  		case 2:  			Emit (OpCodes.Ldloc_2);  			break;  		case 3:  			Emit (OpCodes.Ldloc_3);  			break;  		default:  			Emit (OpCodes.Ldloc_S);  			code.Write ((byte)local.LocalIndex);  			break;  		}  	} else if (opc == OpCodes.Ldloca) {  		Emit (OpCodes.Ldloca_S);  		code.Write ((byte)local.LocalIndex);  	} else if (opc == OpCodes.Stloc) {  		switch (local.LocalIndex) {  		case 0:  			Emit (OpCodes.Stloc_0);  			break;  		case 1:  			Emit (OpCodes.Stloc_1);  			break;  		case 2:  			Emit (OpCodes.Stloc_2);  			break;  		case 3:  			Emit (OpCodes.Stloc_3);  			break;  		default:  			Emit (OpCodes.Stloc_S);  			code.Write ((byte)local.LocalIndex);  			break;  		}  	}  } else {  	Emit (opc);  	switch (opc.OperandType) {  	case OperandType.InlineVar:  		code.Write ((ushort)local.LocalIndex);  		break;  	case OperandType.ShortInlineVar:  		code.Write ((byte)local.LocalIndex);  		break;  	}  }  
Magic Number,IKVM.Reflection.Emit,ILGenerator,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ILGenerator.cs,Emit,The following statement contains a magic number: if (opc == OpCodes.Ldloc) {  	switch (local.LocalIndex) {  	case 0:  		Emit (OpCodes.Ldloc_0);  		break;  	case 1:  		Emit (OpCodes.Ldloc_1);  		break;  	case 2:  		Emit (OpCodes.Ldloc_2);  		break;  	case 3:  		Emit (OpCodes.Ldloc_3);  		break;  	default:  		Emit (OpCodes.Ldloc_S);  		code.Write ((byte)local.LocalIndex);  		break;  	}  } else if (opc == OpCodes.Ldloca) {  	Emit (OpCodes.Ldloca_S);  	code.Write ((byte)local.LocalIndex);  } else if (opc == OpCodes.Stloc) {  	switch (local.LocalIndex) {  	case 0:  		Emit (OpCodes.Stloc_0);  		break;  	case 1:  		Emit (OpCodes.Stloc_1);  		break;  	case 2:  		Emit (OpCodes.Stloc_2);  		break;  	case 3:  		Emit (OpCodes.Stloc_3);  		break;  	default:  		Emit (OpCodes.Stloc_S);  		code.Write ((byte)local.LocalIndex);  		break;  	}  }  
Magic Number,IKVM.Reflection.Emit,ILGenerator,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ILGenerator.cs,Emit,The following statement contains a magic number: if (opc == OpCodes.Ldloc) {  	switch (local.LocalIndex) {  	case 0:  		Emit (OpCodes.Ldloc_0);  		break;  	case 1:  		Emit (OpCodes.Ldloc_1);  		break;  	case 2:  		Emit (OpCodes.Ldloc_2);  		break;  	case 3:  		Emit (OpCodes.Ldloc_3);  		break;  	default:  		Emit (OpCodes.Ldloc_S);  		code.Write ((byte)local.LocalIndex);  		break;  	}  } else if (opc == OpCodes.Ldloca) {  	Emit (OpCodes.Ldloca_S);  	code.Write ((byte)local.LocalIndex);  } else if (opc == OpCodes.Stloc) {  	switch (local.LocalIndex) {  	case 0:  		Emit (OpCodes.Stloc_0);  		break;  	case 1:  		Emit (OpCodes.Stloc_1);  		break;  	case 2:  		Emit (OpCodes.Stloc_2);  		break;  	case 3:  		Emit (OpCodes.Stloc_3);  		break;  	default:  		Emit (OpCodes.Stloc_S);  		code.Write ((byte)local.LocalIndex);  		break;  	}  }  
Magic Number,IKVM.Reflection.Emit,ILGenerator,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ILGenerator.cs,Emit,The following statement contains a magic number: if (opc == OpCodes.Ldloc) {  	switch (local.LocalIndex) {  	case 0:  		Emit (OpCodes.Ldloc_0);  		break;  	case 1:  		Emit (OpCodes.Ldloc_1);  		break;  	case 2:  		Emit (OpCodes.Ldloc_2);  		break;  	case 3:  		Emit (OpCodes.Ldloc_3);  		break;  	default:  		Emit (OpCodes.Ldloc_S);  		code.Write ((byte)local.LocalIndex);  		break;  	}  } else if (opc == OpCodes.Ldloca) {  	Emit (OpCodes.Ldloca_S);  	code.Write ((byte)local.LocalIndex);  } else if (opc == OpCodes.Stloc) {  	switch (local.LocalIndex) {  	case 0:  		Emit (OpCodes.Stloc_0);  		break;  	case 1:  		Emit (OpCodes.Stloc_1);  		break;  	case 2:  		Emit (OpCodes.Stloc_2);  		break;  	case 3:  		Emit (OpCodes.Stloc_3);  		break;  	default:  		Emit (OpCodes.Stloc_S);  		code.Write ((byte)local.LocalIndex);  		break;  	}  }  
Magic Number,IKVM.Reflection.Emit,ILGenerator,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ILGenerator.cs,Emit,The following statement contains a magic number: if (opc == OpCodes.Ldloc) {  	switch (local.LocalIndex) {  	case 0:  		Emit (OpCodes.Ldloc_0);  		break;  	case 1:  		Emit (OpCodes.Ldloc_1);  		break;  	case 2:  		Emit (OpCodes.Ldloc_2);  		break;  	case 3:  		Emit (OpCodes.Ldloc_3);  		break;  	default:  		Emit (OpCodes.Ldloc_S);  		code.Write ((byte)local.LocalIndex);  		break;  	}  } else if (opc == OpCodes.Ldloca) {  	Emit (OpCodes.Ldloca_S);  	code.Write ((byte)local.LocalIndex);  } else if (opc == OpCodes.Stloc) {  	switch (local.LocalIndex) {  	case 0:  		Emit (OpCodes.Stloc_0);  		break;  	case 1:  		Emit (OpCodes.Stloc_1);  		break;  	case 2:  		Emit (OpCodes.Stloc_2);  		break;  	case 3:  		Emit (OpCodes.Stloc_3);  		break;  	default:  		Emit (OpCodes.Stloc_S);  		code.Write ((byte)local.LocalIndex);  		break;  	}  }  
Magic Number,IKVM.Reflection.Emit,ILGenerator,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ILGenerator.cs,Emit,The following statement contains a magic number: switch (local.LocalIndex) {  case 0:  	Emit (OpCodes.Ldloc_0);  	break;  case 1:  	Emit (OpCodes.Ldloc_1);  	break;  case 2:  	Emit (OpCodes.Ldloc_2);  	break;  case 3:  	Emit (OpCodes.Ldloc_3);  	break;  default:  	Emit (OpCodes.Ldloc_S);  	code.Write ((byte)local.LocalIndex);  	break;  }  
Magic Number,IKVM.Reflection.Emit,ILGenerator,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ILGenerator.cs,Emit,The following statement contains a magic number: switch (local.LocalIndex) {  case 0:  	Emit (OpCodes.Ldloc_0);  	break;  case 1:  	Emit (OpCodes.Ldloc_1);  	break;  case 2:  	Emit (OpCodes.Ldloc_2);  	break;  case 3:  	Emit (OpCodes.Ldloc_3);  	break;  default:  	Emit (OpCodes.Ldloc_S);  	code.Write ((byte)local.LocalIndex);  	break;  }  
Magic Number,IKVM.Reflection.Emit,ILGenerator,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ILGenerator.cs,Emit,The following statement contains a magic number: if (opc == OpCodes.Ldloca) {  	Emit (OpCodes.Ldloca_S);  	code.Write ((byte)local.LocalIndex);  } else if (opc == OpCodes.Stloc) {  	switch (local.LocalIndex) {  	case 0:  		Emit (OpCodes.Stloc_0);  		break;  	case 1:  		Emit (OpCodes.Stloc_1);  		break;  	case 2:  		Emit (OpCodes.Stloc_2);  		break;  	case 3:  		Emit (OpCodes.Stloc_3);  		break;  	default:  		Emit (OpCodes.Stloc_S);  		code.Write ((byte)local.LocalIndex);  		break;  	}  }  
Magic Number,IKVM.Reflection.Emit,ILGenerator,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ILGenerator.cs,Emit,The following statement contains a magic number: if (opc == OpCodes.Ldloca) {  	Emit (OpCodes.Ldloca_S);  	code.Write ((byte)local.LocalIndex);  } else if (opc == OpCodes.Stloc) {  	switch (local.LocalIndex) {  	case 0:  		Emit (OpCodes.Stloc_0);  		break;  	case 1:  		Emit (OpCodes.Stloc_1);  		break;  	case 2:  		Emit (OpCodes.Stloc_2);  		break;  	case 3:  		Emit (OpCodes.Stloc_3);  		break;  	default:  		Emit (OpCodes.Stloc_S);  		code.Write ((byte)local.LocalIndex);  		break;  	}  }  
Magic Number,IKVM.Reflection.Emit,ILGenerator,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ILGenerator.cs,Emit,The following statement contains a magic number: if (opc == OpCodes.Stloc) {  	switch (local.LocalIndex) {  	case 0:  		Emit (OpCodes.Stloc_0);  		break;  	case 1:  		Emit (OpCodes.Stloc_1);  		break;  	case 2:  		Emit (OpCodes.Stloc_2);  		break;  	case 3:  		Emit (OpCodes.Stloc_3);  		break;  	default:  		Emit (OpCodes.Stloc_S);  		code.Write ((byte)local.LocalIndex);  		break;  	}  }  
Magic Number,IKVM.Reflection.Emit,ILGenerator,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ILGenerator.cs,Emit,The following statement contains a magic number: if (opc == OpCodes.Stloc) {  	switch (local.LocalIndex) {  	case 0:  		Emit (OpCodes.Stloc_0);  		break;  	case 1:  		Emit (OpCodes.Stloc_1);  		break;  	case 2:  		Emit (OpCodes.Stloc_2);  		break;  	case 3:  		Emit (OpCodes.Stloc_3);  		break;  	default:  		Emit (OpCodes.Stloc_S);  		code.Write ((byte)local.LocalIndex);  		break;  	}  }  
Magic Number,IKVM.Reflection.Emit,ILGenerator,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ILGenerator.cs,Emit,The following statement contains a magic number: switch (local.LocalIndex) {  case 0:  	Emit (OpCodes.Stloc_0);  	break;  case 1:  	Emit (OpCodes.Stloc_1);  	break;  case 2:  	Emit (OpCodes.Stloc_2);  	break;  case 3:  	Emit (OpCodes.Stloc_3);  	break;  default:  	Emit (OpCodes.Stloc_S);  	code.Write ((byte)local.LocalIndex);  	break;  }  
Magic Number,IKVM.Reflection.Emit,ILGenerator,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ILGenerator.cs,Emit,The following statement contains a magic number: switch (local.LocalIndex) {  case 0:  	Emit (OpCodes.Stloc_0);  	break;  case 1:  	Emit (OpCodes.Stloc_1);  	break;  case 2:  	Emit (OpCodes.Stloc_2);  	break;  case 3:  	Emit (OpCodes.Stloc_3);  	break;  default:  	Emit (OpCodes.Stloc_S);  	code.Write ((byte)local.LocalIndex);  	break;  }  
Magic Number,IKVM.Reflection.Emit,ILGenerator,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ILGenerator.cs,__EmitCall,The following statement contains a magic number: if (optionalParameterTypes == null || optionalParameterTypes.Length == 0) {  	Emit (opc' method);  } else {  	Emit (opc);  	UpdateStack (opc' method.HasThis' method.ReturnType' method.ParameterCount + optionalParameterTypes.Length);  	ByteBuffer sig = new ByteBuffer (16);  	method.MethodSignature.WriteMethodRefSig (moduleBuilder' sig' optionalParameterTypes' customModifiers);  	MemberRefTable.Record record = new MemberRefTable.Record ();  	if (method.Module == moduleBuilder) {  		record.Class = method.MetadataToken;  	} else {  		record.Class = moduleBuilder.GetTypeTokenForMemberRef (method.DeclaringType ?? method.Module.GetModuleType ());  	}  	record.Name = moduleBuilder.Strings.Add (method.Name);  	record.Signature = moduleBuilder.Blobs.Add (sig);  	code.Write (0x0A000000 | moduleBuilder.MemberRef.FindOrAddRecord (record));  }  
Magic Number,IKVM.Reflection.Emit,ILGenerator,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ILGenerator.cs,WriteBody,The following statement contains a magic number: if (locals.Count == 0 && exceptions.Count == 0 && maxStack <= 8 && code.Length < 64 && !fatHeader) {  	rva = WriteTinyHeaderAndCode (bb);  } else {  	rva = WriteFatHeaderAndCode (bb' ref localVarSigTok' initLocals);  }  
Magic Number,IKVM.Reflection.Emit,ILGenerator,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ILGenerator.cs,WriteBody,The following statement contains a magic number: if (locals.Count == 0 && exceptions.Count == 0 && maxStack <= 8 && code.Length < 64 && !fatHeader) {  	rva = WriteTinyHeaderAndCode (bb);  } else {  	rva = WriteFatHeaderAndCode (bb' ref localVarSigTok' initLocals);  }  
Magic Number,IKVM.Reflection.Emit,ILGenerator,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ILGenerator.cs,ResolveBranches,The following statement contains a magic number: foreach (LabelFixup fixup in labelFixups) {  	// is it a switch?  	if (fixup.label == -1) {  		code.Position = fixup.offset;  		int count = code.GetInt32AtCurrentPosition ();  		int offset = fixup.offset + 4 + 4 * count;  		code.Position += 4;  		for (int i = 0; i < count; i++) {  			int index = code.GetInt32AtCurrentPosition ();  			code.Write (labels [index] - offset);  		}  	} else {  		code.Position = fixup.offset;  		byte size = code.GetByteAtCurrentPosition ();  		int branchOffset = labels [fixup.label] - (code.Position + size);  		if (size == 1) {  			WriteByteBranchOffset (branchOffset);  		} else {  			code.Write (branchOffset);  		}  	}  }  
Magic Number,IKVM.Reflection.Emit,ILGenerator,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ILGenerator.cs,ResolveBranches,The following statement contains a magic number: foreach (LabelFixup fixup in labelFixups) {  	// is it a switch?  	if (fixup.label == -1) {  		code.Position = fixup.offset;  		int count = code.GetInt32AtCurrentPosition ();  		int offset = fixup.offset + 4 + 4 * count;  		code.Position += 4;  		for (int i = 0; i < count; i++) {  			int index = code.GetInt32AtCurrentPosition ();  			code.Write (labels [index] - offset);  		}  	} else {  		code.Position = fixup.offset;  		byte size = code.GetByteAtCurrentPosition ();  		int branchOffset = labels [fixup.label] - (code.Position + size);  		if (size == 1) {  			WriteByteBranchOffset (branchOffset);  		} else {  			code.Write (branchOffset);  		}  	}  }  
Magic Number,IKVM.Reflection.Emit,ILGenerator,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ILGenerator.cs,ResolveBranches,The following statement contains a magic number: foreach (LabelFixup fixup in labelFixups) {  	// is it a switch?  	if (fixup.label == -1) {  		code.Position = fixup.offset;  		int count = code.GetInt32AtCurrentPosition ();  		int offset = fixup.offset + 4 + 4 * count;  		code.Position += 4;  		for (int i = 0; i < count; i++) {  			int index = code.GetInt32AtCurrentPosition ();  			code.Write (labels [index] - offset);  		}  	} else {  		code.Position = fixup.offset;  		byte size = code.GetByteAtCurrentPosition ();  		int branchOffset = labels [fixup.label] - (code.Position + size);  		if (size == 1) {  			WriteByteBranchOffset (branchOffset);  		} else {  			code.Write (branchOffset);  		}  	}  }  
Magic Number,IKVM.Reflection.Emit,ILGenerator,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ILGenerator.cs,ResolveBranches,The following statement contains a magic number: if (fixup.label == -1) {  	code.Position = fixup.offset;  	int count = code.GetInt32AtCurrentPosition ();  	int offset = fixup.offset + 4 + 4 * count;  	code.Position += 4;  	for (int i = 0; i < count; i++) {  		int index = code.GetInt32AtCurrentPosition ();  		code.Write (labels [index] - offset);  	}  } else {  	code.Position = fixup.offset;  	byte size = code.GetByteAtCurrentPosition ();  	int branchOffset = labels [fixup.label] - (code.Position + size);  	if (size == 1) {  		WriteByteBranchOffset (branchOffset);  	} else {  		code.Write (branchOffset);  	}  }  
Magic Number,IKVM.Reflection.Emit,ILGenerator,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ILGenerator.cs,ResolveBranches,The following statement contains a magic number: if (fixup.label == -1) {  	code.Position = fixup.offset;  	int count = code.GetInt32AtCurrentPosition ();  	int offset = fixup.offset + 4 + 4 * count;  	code.Position += 4;  	for (int i = 0; i < count; i++) {  		int index = code.GetInt32AtCurrentPosition ();  		code.Write (labels [index] - offset);  	}  } else {  	code.Position = fixup.offset;  	byte size = code.GetByteAtCurrentPosition ();  	int branchOffset = labels [fixup.label] - (code.Position + size);  	if (size == 1) {  		WriteByteBranchOffset (branchOffset);  	} else {  		code.Write (branchOffset);  	}  }  
Magic Number,IKVM.Reflection.Emit,ILGenerator,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ILGenerator.cs,ResolveBranches,The following statement contains a magic number: if (fixup.label == -1) {  	code.Position = fixup.offset;  	int count = code.GetInt32AtCurrentPosition ();  	int offset = fixup.offset + 4 + 4 * count;  	code.Position += 4;  	for (int i = 0; i < count; i++) {  		int index = code.GetInt32AtCurrentPosition ();  		code.Write (labels [index] - offset);  	}  } else {  	code.Position = fixup.offset;  	byte size = code.GetByteAtCurrentPosition ();  	int branchOffset = labels [fixup.label] - (code.Position + size);  	if (size == 1) {  		WriteByteBranchOffset (branchOffset);  	} else {  		code.Write (branchOffset);  	}  }  
Magic Number,IKVM.Reflection.Emit,ILGenerator,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ILGenerator.cs,ResolveBranches,The following statement contains a magic number: code.Position += 4;  
Magic Number,IKVM.Reflection.Emit,ILGenerator,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ILGenerator.cs,WriteTinyHeaderAndCode,The following statement contains a magic number: bb.Write ((byte)(CorILMethod_TinyFormat | (code.Length << 2)));  
Magic Number,IKVM.Reflection.Emit,ILGenerator,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ILGenerator.cs,WriteFatHeaderAndCode,The following statement contains a magic number: bb.Align (4);  
Magic Number,IKVM.Reflection.Emit,ILGenerator,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ILGenerator.cs,WriteFatHeaderAndCode,The following statement contains a magic number: if (locals.Count != 0) {  	ByteBuffer localVarSig = new ByteBuffer (locals.Count + 2);  	Signature.WriteLocalVarSig (moduleBuilder' localVarSig' locals' localCustomModifiers);  	localVarSigTok = 0x11000000 | moduleBuilder.StandAloneSig.FindOrAddRecord (moduleBuilder.Blobs.Add (localVarSig));  }  
Magic Number,IKVM.Reflection.Emit,ILGenerator,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ILGenerator.cs,WriteFatHeaderAndCode,The following statement contains a magic number: if (exceptions.Count > 0) {  	bb.Align (4);  	bool fat = false;  	foreach (ExceptionBlock block in exceptions) {  		if (block.tryOffset > 65535 || block.tryLength > 255 || block.handlerOffset > 65535 || block.handlerLength > 255) {  			fat = true;  			break;  		}  	}  	exceptions.Sort (exceptions [0]);  	if (exceptions.Count * 12 + 4 > 255) {  		fat = true;  	}  	const byte CorILMethod_Sect_EHTable = 0x1;  	const byte CorILMethod_Sect_FatFormat = 0x40;  	const short COR_ILEXCEPTION_CLAUSE_EXCEPTION = 0x0000;  	const short COR_ILEXCEPTION_CLAUSE_FILTER = 0x0001;  	const short COR_ILEXCEPTION_CLAUSE_FINALLY = 0x0002;  	const short COR_ILEXCEPTION_CLAUSE_FAULT = 0x0004;  	if (fat) {  		bb.Write ((byte)(CorILMethod_Sect_EHTable | CorILMethod_Sect_FatFormat));  		int dataSize = exceptions.Count * 24 + 4;  		bb.Write ((byte)dataSize);  		bb.Write ((short)(dataSize >> 8));  		foreach (ExceptionBlock block in exceptions) {  			if (block.exceptionType == FAULT) {  				bb.Write ((int)COR_ILEXCEPTION_CLAUSE_FAULT);  			} else if (block.exceptionType == FILTER) {  				bb.Write ((int)COR_ILEXCEPTION_CLAUSE_FILTER);  			} else if (block.exceptionType == FINALLY) {  				bb.Write ((int)COR_ILEXCEPTION_CLAUSE_FINALLY);  			} else {  				bb.Write ((int)COR_ILEXCEPTION_CLAUSE_EXCEPTION);  			}  			bb.Write (block.tryOffset);  			bb.Write (block.tryLength);  			bb.Write (block.handlerOffset);  			bb.Write (block.handlerLength);  			if (block.exceptionType != FAULT && block.exceptionType != FILTER && block.exceptionType != FINALLY) {  				bb.Write (moduleBuilder.GetTypeTokenForMemberRef (block.exceptionType));  			} else {  				bb.Write (block.filterOffset);  			}  		}  	} else {  		bb.Write (CorILMethod_Sect_EHTable);  		bb.Write ((byte)(exceptions.Count * 12 + 4));  		bb.Write ((short)0);  		foreach (ExceptionBlock block in exceptions) {  			if (block.exceptionType == FAULT) {  				bb.Write (COR_ILEXCEPTION_CLAUSE_FAULT);  			} else if (block.exceptionType == FILTER) {  				bb.Write (COR_ILEXCEPTION_CLAUSE_FILTER);  			} else if (block.exceptionType == FINALLY) {  				bb.Write (COR_ILEXCEPTION_CLAUSE_FINALLY);  			} else {  				bb.Write (COR_ILEXCEPTION_CLAUSE_EXCEPTION);  			}  			bb.Write ((short)block.tryOffset);  			bb.Write ((byte)block.tryLength);  			bb.Write ((short)block.handlerOffset);  			bb.Write ((byte)block.handlerLength);  			if (block.exceptionType != FAULT && block.exceptionType != FILTER && block.exceptionType != FINALLY) {  				bb.Write (moduleBuilder.GetTypeTokenForMemberRef (block.exceptionType));  			} else {  				bb.Write (block.filterOffset);  			}  		}  	}  }  
Magic Number,IKVM.Reflection.Emit,ILGenerator,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ILGenerator.cs,WriteFatHeaderAndCode,The following statement contains a magic number: if (exceptions.Count > 0) {  	bb.Align (4);  	bool fat = false;  	foreach (ExceptionBlock block in exceptions) {  		if (block.tryOffset > 65535 || block.tryLength > 255 || block.handlerOffset > 65535 || block.handlerLength > 255) {  			fat = true;  			break;  		}  	}  	exceptions.Sort (exceptions [0]);  	if (exceptions.Count * 12 + 4 > 255) {  		fat = true;  	}  	const byte CorILMethod_Sect_EHTable = 0x1;  	const byte CorILMethod_Sect_FatFormat = 0x40;  	const short COR_ILEXCEPTION_CLAUSE_EXCEPTION = 0x0000;  	const short COR_ILEXCEPTION_CLAUSE_FILTER = 0x0001;  	const short COR_ILEXCEPTION_CLAUSE_FINALLY = 0x0002;  	const short COR_ILEXCEPTION_CLAUSE_FAULT = 0x0004;  	if (fat) {  		bb.Write ((byte)(CorILMethod_Sect_EHTable | CorILMethod_Sect_FatFormat));  		int dataSize = exceptions.Count * 24 + 4;  		bb.Write ((byte)dataSize);  		bb.Write ((short)(dataSize >> 8));  		foreach (ExceptionBlock block in exceptions) {  			if (block.exceptionType == FAULT) {  				bb.Write ((int)COR_ILEXCEPTION_CLAUSE_FAULT);  			} else if (block.exceptionType == FILTER) {  				bb.Write ((int)COR_ILEXCEPTION_CLAUSE_FILTER);  			} else if (block.exceptionType == FINALLY) {  				bb.Write ((int)COR_ILEXCEPTION_CLAUSE_FINALLY);  			} else {  				bb.Write ((int)COR_ILEXCEPTION_CLAUSE_EXCEPTION);  			}  			bb.Write (block.tryOffset);  			bb.Write (block.tryLength);  			bb.Write (block.handlerOffset);  			bb.Write (block.handlerLength);  			if (block.exceptionType != FAULT && block.exceptionType != FILTER && block.exceptionType != FINALLY) {  				bb.Write (moduleBuilder.GetTypeTokenForMemberRef (block.exceptionType));  			} else {  				bb.Write (block.filterOffset);  			}  		}  	} else {  		bb.Write (CorILMethod_Sect_EHTable);  		bb.Write ((byte)(exceptions.Count * 12 + 4));  		bb.Write ((short)0);  		foreach (ExceptionBlock block in exceptions) {  			if (block.exceptionType == FAULT) {  				bb.Write (COR_ILEXCEPTION_CLAUSE_FAULT);  			} else if (block.exceptionType == FILTER) {  				bb.Write (COR_ILEXCEPTION_CLAUSE_FILTER);  			} else if (block.exceptionType == FINALLY) {  				bb.Write (COR_ILEXCEPTION_CLAUSE_FINALLY);  			} else {  				bb.Write (COR_ILEXCEPTION_CLAUSE_EXCEPTION);  			}  			bb.Write ((short)block.tryOffset);  			bb.Write ((byte)block.tryLength);  			bb.Write ((short)block.handlerOffset);  			bb.Write ((byte)block.handlerLength);  			if (block.exceptionType != FAULT && block.exceptionType != FILTER && block.exceptionType != FINALLY) {  				bb.Write (moduleBuilder.GetTypeTokenForMemberRef (block.exceptionType));  			} else {  				bb.Write (block.filterOffset);  			}  		}  	}  }  
Magic Number,IKVM.Reflection.Emit,ILGenerator,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ILGenerator.cs,WriteFatHeaderAndCode,The following statement contains a magic number: if (exceptions.Count > 0) {  	bb.Align (4);  	bool fat = false;  	foreach (ExceptionBlock block in exceptions) {  		if (block.tryOffset > 65535 || block.tryLength > 255 || block.handlerOffset > 65535 || block.handlerLength > 255) {  			fat = true;  			break;  		}  	}  	exceptions.Sort (exceptions [0]);  	if (exceptions.Count * 12 + 4 > 255) {  		fat = true;  	}  	const byte CorILMethod_Sect_EHTable = 0x1;  	const byte CorILMethod_Sect_FatFormat = 0x40;  	const short COR_ILEXCEPTION_CLAUSE_EXCEPTION = 0x0000;  	const short COR_ILEXCEPTION_CLAUSE_FILTER = 0x0001;  	const short COR_ILEXCEPTION_CLAUSE_FINALLY = 0x0002;  	const short COR_ILEXCEPTION_CLAUSE_FAULT = 0x0004;  	if (fat) {  		bb.Write ((byte)(CorILMethod_Sect_EHTable | CorILMethod_Sect_FatFormat));  		int dataSize = exceptions.Count * 24 + 4;  		bb.Write ((byte)dataSize);  		bb.Write ((short)(dataSize >> 8));  		foreach (ExceptionBlock block in exceptions) {  			if (block.exceptionType == FAULT) {  				bb.Write ((int)COR_ILEXCEPTION_CLAUSE_FAULT);  			} else if (block.exceptionType == FILTER) {  				bb.Write ((int)COR_ILEXCEPTION_CLAUSE_FILTER);  			} else if (block.exceptionType == FINALLY) {  				bb.Write ((int)COR_ILEXCEPTION_CLAUSE_FINALLY);  			} else {  				bb.Write ((int)COR_ILEXCEPTION_CLAUSE_EXCEPTION);  			}  			bb.Write (block.tryOffset);  			bb.Write (block.tryLength);  			bb.Write (block.handlerOffset);  			bb.Write (block.handlerLength);  			if (block.exceptionType != FAULT && block.exceptionType != FILTER && block.exceptionType != FINALLY) {  				bb.Write (moduleBuilder.GetTypeTokenForMemberRef (block.exceptionType));  			} else {  				bb.Write (block.filterOffset);  			}  		}  	} else {  		bb.Write (CorILMethod_Sect_EHTable);  		bb.Write ((byte)(exceptions.Count * 12 + 4));  		bb.Write ((short)0);  		foreach (ExceptionBlock block in exceptions) {  			if (block.exceptionType == FAULT) {  				bb.Write (COR_ILEXCEPTION_CLAUSE_FAULT);  			} else if (block.exceptionType == FILTER) {  				bb.Write (COR_ILEXCEPTION_CLAUSE_FILTER);  			} else if (block.exceptionType == FINALLY) {  				bb.Write (COR_ILEXCEPTION_CLAUSE_FINALLY);  			} else {  				bb.Write (COR_ILEXCEPTION_CLAUSE_EXCEPTION);  			}  			bb.Write ((short)block.tryOffset);  			bb.Write ((byte)block.tryLength);  			bb.Write ((short)block.handlerOffset);  			bb.Write ((byte)block.handlerLength);  			if (block.exceptionType != FAULT && block.exceptionType != FILTER && block.exceptionType != FINALLY) {  				bb.Write (moduleBuilder.GetTypeTokenForMemberRef (block.exceptionType));  			} else {  				bb.Write (block.filterOffset);  			}  		}  	}  }  
Magic Number,IKVM.Reflection.Emit,ILGenerator,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ILGenerator.cs,WriteFatHeaderAndCode,The following statement contains a magic number: if (exceptions.Count > 0) {  	bb.Align (4);  	bool fat = false;  	foreach (ExceptionBlock block in exceptions) {  		if (block.tryOffset > 65535 || block.tryLength > 255 || block.handlerOffset > 65535 || block.handlerLength > 255) {  			fat = true;  			break;  		}  	}  	exceptions.Sort (exceptions [0]);  	if (exceptions.Count * 12 + 4 > 255) {  		fat = true;  	}  	const byte CorILMethod_Sect_EHTable = 0x1;  	const byte CorILMethod_Sect_FatFormat = 0x40;  	const short COR_ILEXCEPTION_CLAUSE_EXCEPTION = 0x0000;  	const short COR_ILEXCEPTION_CLAUSE_FILTER = 0x0001;  	const short COR_ILEXCEPTION_CLAUSE_FINALLY = 0x0002;  	const short COR_ILEXCEPTION_CLAUSE_FAULT = 0x0004;  	if (fat) {  		bb.Write ((byte)(CorILMethod_Sect_EHTable | CorILMethod_Sect_FatFormat));  		int dataSize = exceptions.Count * 24 + 4;  		bb.Write ((byte)dataSize);  		bb.Write ((short)(dataSize >> 8));  		foreach (ExceptionBlock block in exceptions) {  			if (block.exceptionType == FAULT) {  				bb.Write ((int)COR_ILEXCEPTION_CLAUSE_FAULT);  			} else if (block.exceptionType == FILTER) {  				bb.Write ((int)COR_ILEXCEPTION_CLAUSE_FILTER);  			} else if (block.exceptionType == FINALLY) {  				bb.Write ((int)COR_ILEXCEPTION_CLAUSE_FINALLY);  			} else {  				bb.Write ((int)COR_ILEXCEPTION_CLAUSE_EXCEPTION);  			}  			bb.Write (block.tryOffset);  			bb.Write (block.tryLength);  			bb.Write (block.handlerOffset);  			bb.Write (block.handlerLength);  			if (block.exceptionType != FAULT && block.exceptionType != FILTER && block.exceptionType != FINALLY) {  				bb.Write (moduleBuilder.GetTypeTokenForMemberRef (block.exceptionType));  			} else {  				bb.Write (block.filterOffset);  			}  		}  	} else {  		bb.Write (CorILMethod_Sect_EHTable);  		bb.Write ((byte)(exceptions.Count * 12 + 4));  		bb.Write ((short)0);  		foreach (ExceptionBlock block in exceptions) {  			if (block.exceptionType == FAULT) {  				bb.Write (COR_ILEXCEPTION_CLAUSE_FAULT);  			} else if (block.exceptionType == FILTER) {  				bb.Write (COR_ILEXCEPTION_CLAUSE_FILTER);  			} else if (block.exceptionType == FINALLY) {  				bb.Write (COR_ILEXCEPTION_CLAUSE_FINALLY);  			} else {  				bb.Write (COR_ILEXCEPTION_CLAUSE_EXCEPTION);  			}  			bb.Write ((short)block.tryOffset);  			bb.Write ((byte)block.tryLength);  			bb.Write ((short)block.handlerOffset);  			bb.Write ((byte)block.handlerLength);  			if (block.exceptionType != FAULT && block.exceptionType != FILTER && block.exceptionType != FINALLY) {  				bb.Write (moduleBuilder.GetTypeTokenForMemberRef (block.exceptionType));  			} else {  				bb.Write (block.filterOffset);  			}  		}  	}  }  
Magic Number,IKVM.Reflection.Emit,ILGenerator,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ILGenerator.cs,WriteFatHeaderAndCode,The following statement contains a magic number: if (exceptions.Count > 0) {  	bb.Align (4);  	bool fat = false;  	foreach (ExceptionBlock block in exceptions) {  		if (block.tryOffset > 65535 || block.tryLength > 255 || block.handlerOffset > 65535 || block.handlerLength > 255) {  			fat = true;  			break;  		}  	}  	exceptions.Sort (exceptions [0]);  	if (exceptions.Count * 12 + 4 > 255) {  		fat = true;  	}  	const byte CorILMethod_Sect_EHTable = 0x1;  	const byte CorILMethod_Sect_FatFormat = 0x40;  	const short COR_ILEXCEPTION_CLAUSE_EXCEPTION = 0x0000;  	const short COR_ILEXCEPTION_CLAUSE_FILTER = 0x0001;  	const short COR_ILEXCEPTION_CLAUSE_FINALLY = 0x0002;  	const short COR_ILEXCEPTION_CLAUSE_FAULT = 0x0004;  	if (fat) {  		bb.Write ((byte)(CorILMethod_Sect_EHTable | CorILMethod_Sect_FatFormat));  		int dataSize = exceptions.Count * 24 + 4;  		bb.Write ((byte)dataSize);  		bb.Write ((short)(dataSize >> 8));  		foreach (ExceptionBlock block in exceptions) {  			if (block.exceptionType == FAULT) {  				bb.Write ((int)COR_ILEXCEPTION_CLAUSE_FAULT);  			} else if (block.exceptionType == FILTER) {  				bb.Write ((int)COR_ILEXCEPTION_CLAUSE_FILTER);  			} else if (block.exceptionType == FINALLY) {  				bb.Write ((int)COR_ILEXCEPTION_CLAUSE_FINALLY);  			} else {  				bb.Write ((int)COR_ILEXCEPTION_CLAUSE_EXCEPTION);  			}  			bb.Write (block.tryOffset);  			bb.Write (block.tryLength);  			bb.Write (block.handlerOffset);  			bb.Write (block.handlerLength);  			if (block.exceptionType != FAULT && block.exceptionType != FILTER && block.exceptionType != FINALLY) {  				bb.Write (moduleBuilder.GetTypeTokenForMemberRef (block.exceptionType));  			} else {  				bb.Write (block.filterOffset);  			}  		}  	} else {  		bb.Write (CorILMethod_Sect_EHTable);  		bb.Write ((byte)(exceptions.Count * 12 + 4));  		bb.Write ((short)0);  		foreach (ExceptionBlock block in exceptions) {  			if (block.exceptionType == FAULT) {  				bb.Write (COR_ILEXCEPTION_CLAUSE_FAULT);  			} else if (block.exceptionType == FILTER) {  				bb.Write (COR_ILEXCEPTION_CLAUSE_FILTER);  			} else if (block.exceptionType == FINALLY) {  				bb.Write (COR_ILEXCEPTION_CLAUSE_FINALLY);  			} else {  				bb.Write (COR_ILEXCEPTION_CLAUSE_EXCEPTION);  			}  			bb.Write ((short)block.tryOffset);  			bb.Write ((byte)block.tryLength);  			bb.Write ((short)block.handlerOffset);  			bb.Write ((byte)block.handlerLength);  			if (block.exceptionType != FAULT && block.exceptionType != FILTER && block.exceptionType != FINALLY) {  				bb.Write (moduleBuilder.GetTypeTokenForMemberRef (block.exceptionType));  			} else {  				bb.Write (block.filterOffset);  			}  		}  	}  }  
Magic Number,IKVM.Reflection.Emit,ILGenerator,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ILGenerator.cs,WriteFatHeaderAndCode,The following statement contains a magic number: if (exceptions.Count > 0) {  	bb.Align (4);  	bool fat = false;  	foreach (ExceptionBlock block in exceptions) {  		if (block.tryOffset > 65535 || block.tryLength > 255 || block.handlerOffset > 65535 || block.handlerLength > 255) {  			fat = true;  			break;  		}  	}  	exceptions.Sort (exceptions [0]);  	if (exceptions.Count * 12 + 4 > 255) {  		fat = true;  	}  	const byte CorILMethod_Sect_EHTable = 0x1;  	const byte CorILMethod_Sect_FatFormat = 0x40;  	const short COR_ILEXCEPTION_CLAUSE_EXCEPTION = 0x0000;  	const short COR_ILEXCEPTION_CLAUSE_FILTER = 0x0001;  	const short COR_ILEXCEPTION_CLAUSE_FINALLY = 0x0002;  	const short COR_ILEXCEPTION_CLAUSE_FAULT = 0x0004;  	if (fat) {  		bb.Write ((byte)(CorILMethod_Sect_EHTable | CorILMethod_Sect_FatFormat));  		int dataSize = exceptions.Count * 24 + 4;  		bb.Write ((byte)dataSize);  		bb.Write ((short)(dataSize >> 8));  		foreach (ExceptionBlock block in exceptions) {  			if (block.exceptionType == FAULT) {  				bb.Write ((int)COR_ILEXCEPTION_CLAUSE_FAULT);  			} else if (block.exceptionType == FILTER) {  				bb.Write ((int)COR_ILEXCEPTION_CLAUSE_FILTER);  			} else if (block.exceptionType == FINALLY) {  				bb.Write ((int)COR_ILEXCEPTION_CLAUSE_FINALLY);  			} else {  				bb.Write ((int)COR_ILEXCEPTION_CLAUSE_EXCEPTION);  			}  			bb.Write (block.tryOffset);  			bb.Write (block.tryLength);  			bb.Write (block.handlerOffset);  			bb.Write (block.handlerLength);  			if (block.exceptionType != FAULT && block.exceptionType != FILTER && block.exceptionType != FINALLY) {  				bb.Write (moduleBuilder.GetTypeTokenForMemberRef (block.exceptionType));  			} else {  				bb.Write (block.filterOffset);  			}  		}  	} else {  		bb.Write (CorILMethod_Sect_EHTable);  		bb.Write ((byte)(exceptions.Count * 12 + 4));  		bb.Write ((short)0);  		foreach (ExceptionBlock block in exceptions) {  			if (block.exceptionType == FAULT) {  				bb.Write (COR_ILEXCEPTION_CLAUSE_FAULT);  			} else if (block.exceptionType == FILTER) {  				bb.Write (COR_ILEXCEPTION_CLAUSE_FILTER);  			} else if (block.exceptionType == FINALLY) {  				bb.Write (COR_ILEXCEPTION_CLAUSE_FINALLY);  			} else {  				bb.Write (COR_ILEXCEPTION_CLAUSE_EXCEPTION);  			}  			bb.Write ((short)block.tryOffset);  			bb.Write ((byte)block.tryLength);  			bb.Write ((short)block.handlerOffset);  			bb.Write ((byte)block.handlerLength);  			if (block.exceptionType != FAULT && block.exceptionType != FILTER && block.exceptionType != FINALLY) {  				bb.Write (moduleBuilder.GetTypeTokenForMemberRef (block.exceptionType));  			} else {  				bb.Write (block.filterOffset);  			}  		}  	}  }  
Magic Number,IKVM.Reflection.Emit,ILGenerator,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ILGenerator.cs,WriteFatHeaderAndCode,The following statement contains a magic number: if (exceptions.Count > 0) {  	bb.Align (4);  	bool fat = false;  	foreach (ExceptionBlock block in exceptions) {  		if (block.tryOffset > 65535 || block.tryLength > 255 || block.handlerOffset > 65535 || block.handlerLength > 255) {  			fat = true;  			break;  		}  	}  	exceptions.Sort (exceptions [0]);  	if (exceptions.Count * 12 + 4 > 255) {  		fat = true;  	}  	const byte CorILMethod_Sect_EHTable = 0x1;  	const byte CorILMethod_Sect_FatFormat = 0x40;  	const short COR_ILEXCEPTION_CLAUSE_EXCEPTION = 0x0000;  	const short COR_ILEXCEPTION_CLAUSE_FILTER = 0x0001;  	const short COR_ILEXCEPTION_CLAUSE_FINALLY = 0x0002;  	const short COR_ILEXCEPTION_CLAUSE_FAULT = 0x0004;  	if (fat) {  		bb.Write ((byte)(CorILMethod_Sect_EHTable | CorILMethod_Sect_FatFormat));  		int dataSize = exceptions.Count * 24 + 4;  		bb.Write ((byte)dataSize);  		bb.Write ((short)(dataSize >> 8));  		foreach (ExceptionBlock block in exceptions) {  			if (block.exceptionType == FAULT) {  				bb.Write ((int)COR_ILEXCEPTION_CLAUSE_FAULT);  			} else if (block.exceptionType == FILTER) {  				bb.Write ((int)COR_ILEXCEPTION_CLAUSE_FILTER);  			} else if (block.exceptionType == FINALLY) {  				bb.Write ((int)COR_ILEXCEPTION_CLAUSE_FINALLY);  			} else {  				bb.Write ((int)COR_ILEXCEPTION_CLAUSE_EXCEPTION);  			}  			bb.Write (block.tryOffset);  			bb.Write (block.tryLength);  			bb.Write (block.handlerOffset);  			bb.Write (block.handlerLength);  			if (block.exceptionType != FAULT && block.exceptionType != FILTER && block.exceptionType != FINALLY) {  				bb.Write (moduleBuilder.GetTypeTokenForMemberRef (block.exceptionType));  			} else {  				bb.Write (block.filterOffset);  			}  		}  	} else {  		bb.Write (CorILMethod_Sect_EHTable);  		bb.Write ((byte)(exceptions.Count * 12 + 4));  		bb.Write ((short)0);  		foreach (ExceptionBlock block in exceptions) {  			if (block.exceptionType == FAULT) {  				bb.Write (COR_ILEXCEPTION_CLAUSE_FAULT);  			} else if (block.exceptionType == FILTER) {  				bb.Write (COR_ILEXCEPTION_CLAUSE_FILTER);  			} else if (block.exceptionType == FINALLY) {  				bb.Write (COR_ILEXCEPTION_CLAUSE_FINALLY);  			} else {  				bb.Write (COR_ILEXCEPTION_CLAUSE_EXCEPTION);  			}  			bb.Write ((short)block.tryOffset);  			bb.Write ((byte)block.tryLength);  			bb.Write ((short)block.handlerOffset);  			bb.Write ((byte)block.handlerLength);  			if (block.exceptionType != FAULT && block.exceptionType != FILTER && block.exceptionType != FINALLY) {  				bb.Write (moduleBuilder.GetTypeTokenForMemberRef (block.exceptionType));  			} else {  				bb.Write (block.filterOffset);  			}  		}  	}  }  
Magic Number,IKVM.Reflection.Emit,ILGenerator,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ILGenerator.cs,WriteFatHeaderAndCode,The following statement contains a magic number: if (exceptions.Count > 0) {  	bb.Align (4);  	bool fat = false;  	foreach (ExceptionBlock block in exceptions) {  		if (block.tryOffset > 65535 || block.tryLength > 255 || block.handlerOffset > 65535 || block.handlerLength > 255) {  			fat = true;  			break;  		}  	}  	exceptions.Sort (exceptions [0]);  	if (exceptions.Count * 12 + 4 > 255) {  		fat = true;  	}  	const byte CorILMethod_Sect_EHTable = 0x1;  	const byte CorILMethod_Sect_FatFormat = 0x40;  	const short COR_ILEXCEPTION_CLAUSE_EXCEPTION = 0x0000;  	const short COR_ILEXCEPTION_CLAUSE_FILTER = 0x0001;  	const short COR_ILEXCEPTION_CLAUSE_FINALLY = 0x0002;  	const short COR_ILEXCEPTION_CLAUSE_FAULT = 0x0004;  	if (fat) {  		bb.Write ((byte)(CorILMethod_Sect_EHTable | CorILMethod_Sect_FatFormat));  		int dataSize = exceptions.Count * 24 + 4;  		bb.Write ((byte)dataSize);  		bb.Write ((short)(dataSize >> 8));  		foreach (ExceptionBlock block in exceptions) {  			if (block.exceptionType == FAULT) {  				bb.Write ((int)COR_ILEXCEPTION_CLAUSE_FAULT);  			} else if (block.exceptionType == FILTER) {  				bb.Write ((int)COR_ILEXCEPTION_CLAUSE_FILTER);  			} else if (block.exceptionType == FINALLY) {  				bb.Write ((int)COR_ILEXCEPTION_CLAUSE_FINALLY);  			} else {  				bb.Write ((int)COR_ILEXCEPTION_CLAUSE_EXCEPTION);  			}  			bb.Write (block.tryOffset);  			bb.Write (block.tryLength);  			bb.Write (block.handlerOffset);  			bb.Write (block.handlerLength);  			if (block.exceptionType != FAULT && block.exceptionType != FILTER && block.exceptionType != FINALLY) {  				bb.Write (moduleBuilder.GetTypeTokenForMemberRef (block.exceptionType));  			} else {  				bb.Write (block.filterOffset);  			}  		}  	} else {  		bb.Write (CorILMethod_Sect_EHTable);  		bb.Write ((byte)(exceptions.Count * 12 + 4));  		bb.Write ((short)0);  		foreach (ExceptionBlock block in exceptions) {  			if (block.exceptionType == FAULT) {  				bb.Write (COR_ILEXCEPTION_CLAUSE_FAULT);  			} else if (block.exceptionType == FILTER) {  				bb.Write (COR_ILEXCEPTION_CLAUSE_FILTER);  			} else if (block.exceptionType == FINALLY) {  				bb.Write (COR_ILEXCEPTION_CLAUSE_FINALLY);  			} else {  				bb.Write (COR_ILEXCEPTION_CLAUSE_EXCEPTION);  			}  			bb.Write ((short)block.tryOffset);  			bb.Write ((byte)block.tryLength);  			bb.Write ((short)block.handlerOffset);  			bb.Write ((byte)block.handlerLength);  			if (block.exceptionType != FAULT && block.exceptionType != FILTER && block.exceptionType != FINALLY) {  				bb.Write (moduleBuilder.GetTypeTokenForMemberRef (block.exceptionType));  			} else {  				bb.Write (block.filterOffset);  			}  		}  	}  }  
Magic Number,IKVM.Reflection.Emit,ILGenerator,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ILGenerator.cs,WriteFatHeaderAndCode,The following statement contains a magic number: if (exceptions.Count > 0) {  	bb.Align (4);  	bool fat = false;  	foreach (ExceptionBlock block in exceptions) {  		if (block.tryOffset > 65535 || block.tryLength > 255 || block.handlerOffset > 65535 || block.handlerLength > 255) {  			fat = true;  			break;  		}  	}  	exceptions.Sort (exceptions [0]);  	if (exceptions.Count * 12 + 4 > 255) {  		fat = true;  	}  	const byte CorILMethod_Sect_EHTable = 0x1;  	const byte CorILMethod_Sect_FatFormat = 0x40;  	const short COR_ILEXCEPTION_CLAUSE_EXCEPTION = 0x0000;  	const short COR_ILEXCEPTION_CLAUSE_FILTER = 0x0001;  	const short COR_ILEXCEPTION_CLAUSE_FINALLY = 0x0002;  	const short COR_ILEXCEPTION_CLAUSE_FAULT = 0x0004;  	if (fat) {  		bb.Write ((byte)(CorILMethod_Sect_EHTable | CorILMethod_Sect_FatFormat));  		int dataSize = exceptions.Count * 24 + 4;  		bb.Write ((byte)dataSize);  		bb.Write ((short)(dataSize >> 8));  		foreach (ExceptionBlock block in exceptions) {  			if (block.exceptionType == FAULT) {  				bb.Write ((int)COR_ILEXCEPTION_CLAUSE_FAULT);  			} else if (block.exceptionType == FILTER) {  				bb.Write ((int)COR_ILEXCEPTION_CLAUSE_FILTER);  			} else if (block.exceptionType == FINALLY) {  				bb.Write ((int)COR_ILEXCEPTION_CLAUSE_FINALLY);  			} else {  				bb.Write ((int)COR_ILEXCEPTION_CLAUSE_EXCEPTION);  			}  			bb.Write (block.tryOffset);  			bb.Write (block.tryLength);  			bb.Write (block.handlerOffset);  			bb.Write (block.handlerLength);  			if (block.exceptionType != FAULT && block.exceptionType != FILTER && block.exceptionType != FINALLY) {  				bb.Write (moduleBuilder.GetTypeTokenForMemberRef (block.exceptionType));  			} else {  				bb.Write (block.filterOffset);  			}  		}  	} else {  		bb.Write (CorILMethod_Sect_EHTable);  		bb.Write ((byte)(exceptions.Count * 12 + 4));  		bb.Write ((short)0);  		foreach (ExceptionBlock block in exceptions) {  			if (block.exceptionType == FAULT) {  				bb.Write (COR_ILEXCEPTION_CLAUSE_FAULT);  			} else if (block.exceptionType == FILTER) {  				bb.Write (COR_ILEXCEPTION_CLAUSE_FILTER);  			} else if (block.exceptionType == FINALLY) {  				bb.Write (COR_ILEXCEPTION_CLAUSE_FINALLY);  			} else {  				bb.Write (COR_ILEXCEPTION_CLAUSE_EXCEPTION);  			}  			bb.Write ((short)block.tryOffset);  			bb.Write ((byte)block.tryLength);  			bb.Write ((short)block.handlerOffset);  			bb.Write ((byte)block.handlerLength);  			if (block.exceptionType != FAULT && block.exceptionType != FILTER && block.exceptionType != FINALLY) {  				bb.Write (moduleBuilder.GetTypeTokenForMemberRef (block.exceptionType));  			} else {  				bb.Write (block.filterOffset);  			}  		}  	}  }  
Magic Number,IKVM.Reflection.Emit,ILGenerator,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ILGenerator.cs,WriteFatHeaderAndCode,The following statement contains a magic number: if (exceptions.Count > 0) {  	bb.Align (4);  	bool fat = false;  	foreach (ExceptionBlock block in exceptions) {  		if (block.tryOffset > 65535 || block.tryLength > 255 || block.handlerOffset > 65535 || block.handlerLength > 255) {  			fat = true;  			break;  		}  	}  	exceptions.Sort (exceptions [0]);  	if (exceptions.Count * 12 + 4 > 255) {  		fat = true;  	}  	const byte CorILMethod_Sect_EHTable = 0x1;  	const byte CorILMethod_Sect_FatFormat = 0x40;  	const short COR_ILEXCEPTION_CLAUSE_EXCEPTION = 0x0000;  	const short COR_ILEXCEPTION_CLAUSE_FILTER = 0x0001;  	const short COR_ILEXCEPTION_CLAUSE_FINALLY = 0x0002;  	const short COR_ILEXCEPTION_CLAUSE_FAULT = 0x0004;  	if (fat) {  		bb.Write ((byte)(CorILMethod_Sect_EHTable | CorILMethod_Sect_FatFormat));  		int dataSize = exceptions.Count * 24 + 4;  		bb.Write ((byte)dataSize);  		bb.Write ((short)(dataSize >> 8));  		foreach (ExceptionBlock block in exceptions) {  			if (block.exceptionType == FAULT) {  				bb.Write ((int)COR_ILEXCEPTION_CLAUSE_FAULT);  			} else if (block.exceptionType == FILTER) {  				bb.Write ((int)COR_ILEXCEPTION_CLAUSE_FILTER);  			} else if (block.exceptionType == FINALLY) {  				bb.Write ((int)COR_ILEXCEPTION_CLAUSE_FINALLY);  			} else {  				bb.Write ((int)COR_ILEXCEPTION_CLAUSE_EXCEPTION);  			}  			bb.Write (block.tryOffset);  			bb.Write (block.tryLength);  			bb.Write (block.handlerOffset);  			bb.Write (block.handlerLength);  			if (block.exceptionType != FAULT && block.exceptionType != FILTER && block.exceptionType != FINALLY) {  				bb.Write (moduleBuilder.GetTypeTokenForMemberRef (block.exceptionType));  			} else {  				bb.Write (block.filterOffset);  			}  		}  	} else {  		bb.Write (CorILMethod_Sect_EHTable);  		bb.Write ((byte)(exceptions.Count * 12 + 4));  		bb.Write ((short)0);  		foreach (ExceptionBlock block in exceptions) {  			if (block.exceptionType == FAULT) {  				bb.Write (COR_ILEXCEPTION_CLAUSE_FAULT);  			} else if (block.exceptionType == FILTER) {  				bb.Write (COR_ILEXCEPTION_CLAUSE_FILTER);  			} else if (block.exceptionType == FINALLY) {  				bb.Write (COR_ILEXCEPTION_CLAUSE_FINALLY);  			} else {  				bb.Write (COR_ILEXCEPTION_CLAUSE_EXCEPTION);  			}  			bb.Write ((short)block.tryOffset);  			bb.Write ((byte)block.tryLength);  			bb.Write ((short)block.handlerOffset);  			bb.Write ((byte)block.handlerLength);  			if (block.exceptionType != FAULT && block.exceptionType != FILTER && block.exceptionType != FINALLY) {  				bb.Write (moduleBuilder.GetTypeTokenForMemberRef (block.exceptionType));  			} else {  				bb.Write (block.filterOffset);  			}  		}  	}  }  
Magic Number,IKVM.Reflection.Emit,ILGenerator,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ILGenerator.cs,WriteFatHeaderAndCode,The following statement contains a magic number: if (exceptions.Count > 0) {  	bb.Align (4);  	bool fat = false;  	foreach (ExceptionBlock block in exceptions) {  		if (block.tryOffset > 65535 || block.tryLength > 255 || block.handlerOffset > 65535 || block.handlerLength > 255) {  			fat = true;  			break;  		}  	}  	exceptions.Sort (exceptions [0]);  	if (exceptions.Count * 12 + 4 > 255) {  		fat = true;  	}  	const byte CorILMethod_Sect_EHTable = 0x1;  	const byte CorILMethod_Sect_FatFormat = 0x40;  	const short COR_ILEXCEPTION_CLAUSE_EXCEPTION = 0x0000;  	const short COR_ILEXCEPTION_CLAUSE_FILTER = 0x0001;  	const short COR_ILEXCEPTION_CLAUSE_FINALLY = 0x0002;  	const short COR_ILEXCEPTION_CLAUSE_FAULT = 0x0004;  	if (fat) {  		bb.Write ((byte)(CorILMethod_Sect_EHTable | CorILMethod_Sect_FatFormat));  		int dataSize = exceptions.Count * 24 + 4;  		bb.Write ((byte)dataSize);  		bb.Write ((short)(dataSize >> 8));  		foreach (ExceptionBlock block in exceptions) {  			if (block.exceptionType == FAULT) {  				bb.Write ((int)COR_ILEXCEPTION_CLAUSE_FAULT);  			} else if (block.exceptionType == FILTER) {  				bb.Write ((int)COR_ILEXCEPTION_CLAUSE_FILTER);  			} else if (block.exceptionType == FINALLY) {  				bb.Write ((int)COR_ILEXCEPTION_CLAUSE_FINALLY);  			} else {  				bb.Write ((int)COR_ILEXCEPTION_CLAUSE_EXCEPTION);  			}  			bb.Write (block.tryOffset);  			bb.Write (block.tryLength);  			bb.Write (block.handlerOffset);  			bb.Write (block.handlerLength);  			if (block.exceptionType != FAULT && block.exceptionType != FILTER && block.exceptionType != FINALLY) {  				bb.Write (moduleBuilder.GetTypeTokenForMemberRef (block.exceptionType));  			} else {  				bb.Write (block.filterOffset);  			}  		}  	} else {  		bb.Write (CorILMethod_Sect_EHTable);  		bb.Write ((byte)(exceptions.Count * 12 + 4));  		bb.Write ((short)0);  		foreach (ExceptionBlock block in exceptions) {  			if (block.exceptionType == FAULT) {  				bb.Write (COR_ILEXCEPTION_CLAUSE_FAULT);  			} else if (block.exceptionType == FILTER) {  				bb.Write (COR_ILEXCEPTION_CLAUSE_FILTER);  			} else if (block.exceptionType == FINALLY) {  				bb.Write (COR_ILEXCEPTION_CLAUSE_FINALLY);  			} else {  				bb.Write (COR_ILEXCEPTION_CLAUSE_EXCEPTION);  			}  			bb.Write ((short)block.tryOffset);  			bb.Write ((byte)block.tryLength);  			bb.Write ((short)block.handlerOffset);  			bb.Write ((byte)block.handlerLength);  			if (block.exceptionType != FAULT && block.exceptionType != FILTER && block.exceptionType != FINALLY) {  				bb.Write (moduleBuilder.GetTypeTokenForMemberRef (block.exceptionType));  			} else {  				bb.Write (block.filterOffset);  			}  		}  	}  }  
Magic Number,IKVM.Reflection.Emit,ILGenerator,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ILGenerator.cs,WriteFatHeaderAndCode,The following statement contains a magic number: if (exceptions.Count > 0) {  	bb.Align (4);  	bool fat = false;  	foreach (ExceptionBlock block in exceptions) {  		if (block.tryOffset > 65535 || block.tryLength > 255 || block.handlerOffset > 65535 || block.handlerLength > 255) {  			fat = true;  			break;  		}  	}  	exceptions.Sort (exceptions [0]);  	if (exceptions.Count * 12 + 4 > 255) {  		fat = true;  	}  	const byte CorILMethod_Sect_EHTable = 0x1;  	const byte CorILMethod_Sect_FatFormat = 0x40;  	const short COR_ILEXCEPTION_CLAUSE_EXCEPTION = 0x0000;  	const short COR_ILEXCEPTION_CLAUSE_FILTER = 0x0001;  	const short COR_ILEXCEPTION_CLAUSE_FINALLY = 0x0002;  	const short COR_ILEXCEPTION_CLAUSE_FAULT = 0x0004;  	if (fat) {  		bb.Write ((byte)(CorILMethod_Sect_EHTable | CorILMethod_Sect_FatFormat));  		int dataSize = exceptions.Count * 24 + 4;  		bb.Write ((byte)dataSize);  		bb.Write ((short)(dataSize >> 8));  		foreach (ExceptionBlock block in exceptions) {  			if (block.exceptionType == FAULT) {  				bb.Write ((int)COR_ILEXCEPTION_CLAUSE_FAULT);  			} else if (block.exceptionType == FILTER) {  				bb.Write ((int)COR_ILEXCEPTION_CLAUSE_FILTER);  			} else if (block.exceptionType == FINALLY) {  				bb.Write ((int)COR_ILEXCEPTION_CLAUSE_FINALLY);  			} else {  				bb.Write ((int)COR_ILEXCEPTION_CLAUSE_EXCEPTION);  			}  			bb.Write (block.tryOffset);  			bb.Write (block.tryLength);  			bb.Write (block.handlerOffset);  			bb.Write (block.handlerLength);  			if (block.exceptionType != FAULT && block.exceptionType != FILTER && block.exceptionType != FINALLY) {  				bb.Write (moduleBuilder.GetTypeTokenForMemberRef (block.exceptionType));  			} else {  				bb.Write (block.filterOffset);  			}  		}  	} else {  		bb.Write (CorILMethod_Sect_EHTable);  		bb.Write ((byte)(exceptions.Count * 12 + 4));  		bb.Write ((short)0);  		foreach (ExceptionBlock block in exceptions) {  			if (block.exceptionType == FAULT) {  				bb.Write (COR_ILEXCEPTION_CLAUSE_FAULT);  			} else if (block.exceptionType == FILTER) {  				bb.Write (COR_ILEXCEPTION_CLAUSE_FILTER);  			} else if (block.exceptionType == FINALLY) {  				bb.Write (COR_ILEXCEPTION_CLAUSE_FINALLY);  			} else {  				bb.Write (COR_ILEXCEPTION_CLAUSE_EXCEPTION);  			}  			bb.Write ((short)block.tryOffset);  			bb.Write ((byte)block.tryLength);  			bb.Write ((short)block.handlerOffset);  			bb.Write ((byte)block.handlerLength);  			if (block.exceptionType != FAULT && block.exceptionType != FILTER && block.exceptionType != FINALLY) {  				bb.Write (moduleBuilder.GetTypeTokenForMemberRef (block.exceptionType));  			} else {  				bb.Write (block.filterOffset);  			}  		}  	}  }  
Magic Number,IKVM.Reflection.Emit,ILGenerator,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ILGenerator.cs,WriteFatHeaderAndCode,The following statement contains a magic number: if (exceptions.Count > 0) {  	bb.Align (4);  	bool fat = false;  	foreach (ExceptionBlock block in exceptions) {  		if (block.tryOffset > 65535 || block.tryLength > 255 || block.handlerOffset > 65535 || block.handlerLength > 255) {  			fat = true;  			break;  		}  	}  	exceptions.Sort (exceptions [0]);  	if (exceptions.Count * 12 + 4 > 255) {  		fat = true;  	}  	const byte CorILMethod_Sect_EHTable = 0x1;  	const byte CorILMethod_Sect_FatFormat = 0x40;  	const short COR_ILEXCEPTION_CLAUSE_EXCEPTION = 0x0000;  	const short COR_ILEXCEPTION_CLAUSE_FILTER = 0x0001;  	const short COR_ILEXCEPTION_CLAUSE_FINALLY = 0x0002;  	const short COR_ILEXCEPTION_CLAUSE_FAULT = 0x0004;  	if (fat) {  		bb.Write ((byte)(CorILMethod_Sect_EHTable | CorILMethod_Sect_FatFormat));  		int dataSize = exceptions.Count * 24 + 4;  		bb.Write ((byte)dataSize);  		bb.Write ((short)(dataSize >> 8));  		foreach (ExceptionBlock block in exceptions) {  			if (block.exceptionType == FAULT) {  				bb.Write ((int)COR_ILEXCEPTION_CLAUSE_FAULT);  			} else if (block.exceptionType == FILTER) {  				bb.Write ((int)COR_ILEXCEPTION_CLAUSE_FILTER);  			} else if (block.exceptionType == FINALLY) {  				bb.Write ((int)COR_ILEXCEPTION_CLAUSE_FINALLY);  			} else {  				bb.Write ((int)COR_ILEXCEPTION_CLAUSE_EXCEPTION);  			}  			bb.Write (block.tryOffset);  			bb.Write (block.tryLength);  			bb.Write (block.handlerOffset);  			bb.Write (block.handlerLength);  			if (block.exceptionType != FAULT && block.exceptionType != FILTER && block.exceptionType != FINALLY) {  				bb.Write (moduleBuilder.GetTypeTokenForMemberRef (block.exceptionType));  			} else {  				bb.Write (block.filterOffset);  			}  		}  	} else {  		bb.Write (CorILMethod_Sect_EHTable);  		bb.Write ((byte)(exceptions.Count * 12 + 4));  		bb.Write ((short)0);  		foreach (ExceptionBlock block in exceptions) {  			if (block.exceptionType == FAULT) {  				bb.Write (COR_ILEXCEPTION_CLAUSE_FAULT);  			} else if (block.exceptionType == FILTER) {  				bb.Write (COR_ILEXCEPTION_CLAUSE_FILTER);  			} else if (block.exceptionType == FINALLY) {  				bb.Write (COR_ILEXCEPTION_CLAUSE_FINALLY);  			} else {  				bb.Write (COR_ILEXCEPTION_CLAUSE_EXCEPTION);  			}  			bb.Write ((short)block.tryOffset);  			bb.Write ((byte)block.tryLength);  			bb.Write ((short)block.handlerOffset);  			bb.Write ((byte)block.handlerLength);  			if (block.exceptionType != FAULT && block.exceptionType != FILTER && block.exceptionType != FINALLY) {  				bb.Write (moduleBuilder.GetTypeTokenForMemberRef (block.exceptionType));  			} else {  				bb.Write (block.filterOffset);  			}  		}  	}  }  
Magic Number,IKVM.Reflection.Emit,ILGenerator,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ILGenerator.cs,WriteFatHeaderAndCode,The following statement contains a magic number: bb.Align (4);  
Magic Number,IKVM.Reflection.Emit,ILGenerator,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ILGenerator.cs,WriteFatHeaderAndCode,The following statement contains a magic number: foreach (ExceptionBlock block in exceptions) {  	if (block.tryOffset > 65535 || block.tryLength > 255 || block.handlerOffset > 65535 || block.handlerLength > 255) {  		fat = true;  		break;  	}  }  
Magic Number,IKVM.Reflection.Emit,ILGenerator,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ILGenerator.cs,WriteFatHeaderAndCode,The following statement contains a magic number: foreach (ExceptionBlock block in exceptions) {  	if (block.tryOffset > 65535 || block.tryLength > 255 || block.handlerOffset > 65535 || block.handlerLength > 255) {  		fat = true;  		break;  	}  }  
Magic Number,IKVM.Reflection.Emit,ILGenerator,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ILGenerator.cs,WriteFatHeaderAndCode,The following statement contains a magic number: foreach (ExceptionBlock block in exceptions) {  	if (block.tryOffset > 65535 || block.tryLength > 255 || block.handlerOffset > 65535 || block.handlerLength > 255) {  		fat = true;  		break;  	}  }  
Magic Number,IKVM.Reflection.Emit,ILGenerator,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ILGenerator.cs,WriteFatHeaderAndCode,The following statement contains a magic number: foreach (ExceptionBlock block in exceptions) {  	if (block.tryOffset > 65535 || block.tryLength > 255 || block.handlerOffset > 65535 || block.handlerLength > 255) {  		fat = true;  		break;  	}  }  
Magic Number,IKVM.Reflection.Emit,ILGenerator,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ILGenerator.cs,WriteFatHeaderAndCode,The following statement contains a magic number: if (block.tryOffset > 65535 || block.tryLength > 255 || block.handlerOffset > 65535 || block.handlerLength > 255) {  	fat = true;  	break;  }  
Magic Number,IKVM.Reflection.Emit,ILGenerator,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ILGenerator.cs,WriteFatHeaderAndCode,The following statement contains a magic number: if (block.tryOffset > 65535 || block.tryLength > 255 || block.handlerOffset > 65535 || block.handlerLength > 255) {  	fat = true;  	break;  }  
Magic Number,IKVM.Reflection.Emit,ILGenerator,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ILGenerator.cs,WriteFatHeaderAndCode,The following statement contains a magic number: if (block.tryOffset > 65535 || block.tryLength > 255 || block.handlerOffset > 65535 || block.handlerLength > 255) {  	fat = true;  	break;  }  
Magic Number,IKVM.Reflection.Emit,ILGenerator,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ILGenerator.cs,WriteFatHeaderAndCode,The following statement contains a magic number: if (block.tryOffset > 65535 || block.tryLength > 255 || block.handlerOffset > 65535 || block.handlerLength > 255) {  	fat = true;  	break;  }  
Magic Number,IKVM.Reflection.Emit,ILGenerator,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ILGenerator.cs,WriteFatHeaderAndCode,The following statement contains a magic number: if (exceptions.Count * 12 + 4 > 255) {  	fat = true;  }  
Magic Number,IKVM.Reflection.Emit,ILGenerator,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ILGenerator.cs,WriteFatHeaderAndCode,The following statement contains a magic number: if (exceptions.Count * 12 + 4 > 255) {  	fat = true;  }  
Magic Number,IKVM.Reflection.Emit,ILGenerator,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ILGenerator.cs,WriteFatHeaderAndCode,The following statement contains a magic number: if (exceptions.Count * 12 + 4 > 255) {  	fat = true;  }  
Magic Number,IKVM.Reflection.Emit,ILGenerator,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ILGenerator.cs,WriteFatHeaderAndCode,The following statement contains a magic number: if (fat) {  	bb.Write ((byte)(CorILMethod_Sect_EHTable | CorILMethod_Sect_FatFormat));  	int dataSize = exceptions.Count * 24 + 4;  	bb.Write ((byte)dataSize);  	bb.Write ((short)(dataSize >> 8));  	foreach (ExceptionBlock block in exceptions) {  		if (block.exceptionType == FAULT) {  			bb.Write ((int)COR_ILEXCEPTION_CLAUSE_FAULT);  		} else if (block.exceptionType == FILTER) {  			bb.Write ((int)COR_ILEXCEPTION_CLAUSE_FILTER);  		} else if (block.exceptionType == FINALLY) {  			bb.Write ((int)COR_ILEXCEPTION_CLAUSE_FINALLY);  		} else {  			bb.Write ((int)COR_ILEXCEPTION_CLAUSE_EXCEPTION);  		}  		bb.Write (block.tryOffset);  		bb.Write (block.tryLength);  		bb.Write (block.handlerOffset);  		bb.Write (block.handlerLength);  		if (block.exceptionType != FAULT && block.exceptionType != FILTER && block.exceptionType != FINALLY) {  			bb.Write (moduleBuilder.GetTypeTokenForMemberRef (block.exceptionType));  		} else {  			bb.Write (block.filterOffset);  		}  	}  } else {  	bb.Write (CorILMethod_Sect_EHTable);  	bb.Write ((byte)(exceptions.Count * 12 + 4));  	bb.Write ((short)0);  	foreach (ExceptionBlock block in exceptions) {  		if (block.exceptionType == FAULT) {  			bb.Write (COR_ILEXCEPTION_CLAUSE_FAULT);  		} else if (block.exceptionType == FILTER) {  			bb.Write (COR_ILEXCEPTION_CLAUSE_FILTER);  		} else if (block.exceptionType == FINALLY) {  			bb.Write (COR_ILEXCEPTION_CLAUSE_FINALLY);  		} else {  			bb.Write (COR_ILEXCEPTION_CLAUSE_EXCEPTION);  		}  		bb.Write ((short)block.tryOffset);  		bb.Write ((byte)block.tryLength);  		bb.Write ((short)block.handlerOffset);  		bb.Write ((byte)block.handlerLength);  		if (block.exceptionType != FAULT && block.exceptionType != FILTER && block.exceptionType != FINALLY) {  			bb.Write (moduleBuilder.GetTypeTokenForMemberRef (block.exceptionType));  		} else {  			bb.Write (block.filterOffset);  		}  	}  }  
Magic Number,IKVM.Reflection.Emit,ILGenerator,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ILGenerator.cs,WriteFatHeaderAndCode,The following statement contains a magic number: if (fat) {  	bb.Write ((byte)(CorILMethod_Sect_EHTable | CorILMethod_Sect_FatFormat));  	int dataSize = exceptions.Count * 24 + 4;  	bb.Write ((byte)dataSize);  	bb.Write ((short)(dataSize >> 8));  	foreach (ExceptionBlock block in exceptions) {  		if (block.exceptionType == FAULT) {  			bb.Write ((int)COR_ILEXCEPTION_CLAUSE_FAULT);  		} else if (block.exceptionType == FILTER) {  			bb.Write ((int)COR_ILEXCEPTION_CLAUSE_FILTER);  		} else if (block.exceptionType == FINALLY) {  			bb.Write ((int)COR_ILEXCEPTION_CLAUSE_FINALLY);  		} else {  			bb.Write ((int)COR_ILEXCEPTION_CLAUSE_EXCEPTION);  		}  		bb.Write (block.tryOffset);  		bb.Write (block.tryLength);  		bb.Write (block.handlerOffset);  		bb.Write (block.handlerLength);  		if (block.exceptionType != FAULT && block.exceptionType != FILTER && block.exceptionType != FINALLY) {  			bb.Write (moduleBuilder.GetTypeTokenForMemberRef (block.exceptionType));  		} else {  			bb.Write (block.filterOffset);  		}  	}  } else {  	bb.Write (CorILMethod_Sect_EHTable);  	bb.Write ((byte)(exceptions.Count * 12 + 4));  	bb.Write ((short)0);  	foreach (ExceptionBlock block in exceptions) {  		if (block.exceptionType == FAULT) {  			bb.Write (COR_ILEXCEPTION_CLAUSE_FAULT);  		} else if (block.exceptionType == FILTER) {  			bb.Write (COR_ILEXCEPTION_CLAUSE_FILTER);  		} else if (block.exceptionType == FINALLY) {  			bb.Write (COR_ILEXCEPTION_CLAUSE_FINALLY);  		} else {  			bb.Write (COR_ILEXCEPTION_CLAUSE_EXCEPTION);  		}  		bb.Write ((short)block.tryOffset);  		bb.Write ((byte)block.tryLength);  		bb.Write ((short)block.handlerOffset);  		bb.Write ((byte)block.handlerLength);  		if (block.exceptionType != FAULT && block.exceptionType != FILTER && block.exceptionType != FINALLY) {  			bb.Write (moduleBuilder.GetTypeTokenForMemberRef (block.exceptionType));  		} else {  			bb.Write (block.filterOffset);  		}  	}  }  
Magic Number,IKVM.Reflection.Emit,ILGenerator,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ILGenerator.cs,WriteFatHeaderAndCode,The following statement contains a magic number: if (fat) {  	bb.Write ((byte)(CorILMethod_Sect_EHTable | CorILMethod_Sect_FatFormat));  	int dataSize = exceptions.Count * 24 + 4;  	bb.Write ((byte)dataSize);  	bb.Write ((short)(dataSize >> 8));  	foreach (ExceptionBlock block in exceptions) {  		if (block.exceptionType == FAULT) {  			bb.Write ((int)COR_ILEXCEPTION_CLAUSE_FAULT);  		} else if (block.exceptionType == FILTER) {  			bb.Write ((int)COR_ILEXCEPTION_CLAUSE_FILTER);  		} else if (block.exceptionType == FINALLY) {  			bb.Write ((int)COR_ILEXCEPTION_CLAUSE_FINALLY);  		} else {  			bb.Write ((int)COR_ILEXCEPTION_CLAUSE_EXCEPTION);  		}  		bb.Write (block.tryOffset);  		bb.Write (block.tryLength);  		bb.Write (block.handlerOffset);  		bb.Write (block.handlerLength);  		if (block.exceptionType != FAULT && block.exceptionType != FILTER && block.exceptionType != FINALLY) {  			bb.Write (moduleBuilder.GetTypeTokenForMemberRef (block.exceptionType));  		} else {  			bb.Write (block.filterOffset);  		}  	}  } else {  	bb.Write (CorILMethod_Sect_EHTable);  	bb.Write ((byte)(exceptions.Count * 12 + 4));  	bb.Write ((short)0);  	foreach (ExceptionBlock block in exceptions) {  		if (block.exceptionType == FAULT) {  			bb.Write (COR_ILEXCEPTION_CLAUSE_FAULT);  		} else if (block.exceptionType == FILTER) {  			bb.Write (COR_ILEXCEPTION_CLAUSE_FILTER);  		} else if (block.exceptionType == FINALLY) {  			bb.Write (COR_ILEXCEPTION_CLAUSE_FINALLY);  		} else {  			bb.Write (COR_ILEXCEPTION_CLAUSE_EXCEPTION);  		}  		bb.Write ((short)block.tryOffset);  		bb.Write ((byte)block.tryLength);  		bb.Write ((short)block.handlerOffset);  		bb.Write ((byte)block.handlerLength);  		if (block.exceptionType != FAULT && block.exceptionType != FILTER && block.exceptionType != FINALLY) {  			bb.Write (moduleBuilder.GetTypeTokenForMemberRef (block.exceptionType));  		} else {  			bb.Write (block.filterOffset);  		}  	}  }  
Magic Number,IKVM.Reflection.Emit,ILGenerator,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ILGenerator.cs,WriteFatHeaderAndCode,The following statement contains a magic number: if (fat) {  	bb.Write ((byte)(CorILMethod_Sect_EHTable | CorILMethod_Sect_FatFormat));  	int dataSize = exceptions.Count * 24 + 4;  	bb.Write ((byte)dataSize);  	bb.Write ((short)(dataSize >> 8));  	foreach (ExceptionBlock block in exceptions) {  		if (block.exceptionType == FAULT) {  			bb.Write ((int)COR_ILEXCEPTION_CLAUSE_FAULT);  		} else if (block.exceptionType == FILTER) {  			bb.Write ((int)COR_ILEXCEPTION_CLAUSE_FILTER);  		} else if (block.exceptionType == FINALLY) {  			bb.Write ((int)COR_ILEXCEPTION_CLAUSE_FINALLY);  		} else {  			bb.Write ((int)COR_ILEXCEPTION_CLAUSE_EXCEPTION);  		}  		bb.Write (block.tryOffset);  		bb.Write (block.tryLength);  		bb.Write (block.handlerOffset);  		bb.Write (block.handlerLength);  		if (block.exceptionType != FAULT && block.exceptionType != FILTER && block.exceptionType != FINALLY) {  			bb.Write (moduleBuilder.GetTypeTokenForMemberRef (block.exceptionType));  		} else {  			bb.Write (block.filterOffset);  		}  	}  } else {  	bb.Write (CorILMethod_Sect_EHTable);  	bb.Write ((byte)(exceptions.Count * 12 + 4));  	bb.Write ((short)0);  	foreach (ExceptionBlock block in exceptions) {  		if (block.exceptionType == FAULT) {  			bb.Write (COR_ILEXCEPTION_CLAUSE_FAULT);  		} else if (block.exceptionType == FILTER) {  			bb.Write (COR_ILEXCEPTION_CLAUSE_FILTER);  		} else if (block.exceptionType == FINALLY) {  			bb.Write (COR_ILEXCEPTION_CLAUSE_FINALLY);  		} else {  			bb.Write (COR_ILEXCEPTION_CLAUSE_EXCEPTION);  		}  		bb.Write ((short)block.tryOffset);  		bb.Write ((byte)block.tryLength);  		bb.Write ((short)block.handlerOffset);  		bb.Write ((byte)block.handlerLength);  		if (block.exceptionType != FAULT && block.exceptionType != FILTER && block.exceptionType != FINALLY) {  			bb.Write (moduleBuilder.GetTypeTokenForMemberRef (block.exceptionType));  		} else {  			bb.Write (block.filterOffset);  		}  	}  }  
Magic Number,IKVM.Reflection.Emit,ILGenerator,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ILGenerator.cs,WriteFatHeaderAndCode,The following statement contains a magic number: if (fat) {  	bb.Write ((byte)(CorILMethod_Sect_EHTable | CorILMethod_Sect_FatFormat));  	int dataSize = exceptions.Count * 24 + 4;  	bb.Write ((byte)dataSize);  	bb.Write ((short)(dataSize >> 8));  	foreach (ExceptionBlock block in exceptions) {  		if (block.exceptionType == FAULT) {  			bb.Write ((int)COR_ILEXCEPTION_CLAUSE_FAULT);  		} else if (block.exceptionType == FILTER) {  			bb.Write ((int)COR_ILEXCEPTION_CLAUSE_FILTER);  		} else if (block.exceptionType == FINALLY) {  			bb.Write ((int)COR_ILEXCEPTION_CLAUSE_FINALLY);  		} else {  			bb.Write ((int)COR_ILEXCEPTION_CLAUSE_EXCEPTION);  		}  		bb.Write (block.tryOffset);  		bb.Write (block.tryLength);  		bb.Write (block.handlerOffset);  		bb.Write (block.handlerLength);  		if (block.exceptionType != FAULT && block.exceptionType != FILTER && block.exceptionType != FINALLY) {  			bb.Write (moduleBuilder.GetTypeTokenForMemberRef (block.exceptionType));  		} else {  			bb.Write (block.filterOffset);  		}  	}  } else {  	bb.Write (CorILMethod_Sect_EHTable);  	bb.Write ((byte)(exceptions.Count * 12 + 4));  	bb.Write ((short)0);  	foreach (ExceptionBlock block in exceptions) {  		if (block.exceptionType == FAULT) {  			bb.Write (COR_ILEXCEPTION_CLAUSE_FAULT);  		} else if (block.exceptionType == FILTER) {  			bb.Write (COR_ILEXCEPTION_CLAUSE_FILTER);  		} else if (block.exceptionType == FINALLY) {  			bb.Write (COR_ILEXCEPTION_CLAUSE_FINALLY);  		} else {  			bb.Write (COR_ILEXCEPTION_CLAUSE_EXCEPTION);  		}  		bb.Write ((short)block.tryOffset);  		bb.Write ((byte)block.tryLength);  		bb.Write ((short)block.handlerOffset);  		bb.Write ((byte)block.handlerLength);  		if (block.exceptionType != FAULT && block.exceptionType != FILTER && block.exceptionType != FINALLY) {  			bb.Write (moduleBuilder.GetTypeTokenForMemberRef (block.exceptionType));  		} else {  			bb.Write (block.filterOffset);  		}  	}  }  
Magic Number,IKVM.Reflection.Emit,ILGenerator,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ILGenerator.cs,WriteFatHeaderAndCode,The following statement contains a magic number: bb.Write ((short)(dataSize >> 8));  
Magic Number,IKVM.Reflection.Emit,ILGenerator,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ILGenerator.cs,WriteFatHeaderAndCode,The following statement contains a magic number: bb.Write ((byte)(exceptions.Count * 12 + 4));  
Magic Number,IKVM.Reflection.Emit,ILGenerator,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ILGenerator.cs,WriteFatHeaderAndCode,The following statement contains a magic number: bb.Write ((byte)(exceptions.Count * 12 + 4));  
Magic Number,IKVM.Reflection.Emit,MethodBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\MethodBuilder.cs,GetILGenerator,The following statement contains a magic number: return GetILGenerator (16);  
Magic Number,IKVM.Reflection.Emit,ModuleBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ModuleBuilder.cs,DefineManifestResource,The following statement contains a magic number: manifestResources.Align (8);  
Magic Number,IKVM.Reflection.Emit,ModuleBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ModuleBuilder.cs,DefineManifestResource,The following statement contains a magic number: manifestResources.Write (savePosition - (manifestResources.Position + 4));  
Magic Number,IKVM.Reflection.Emit,ModuleBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ModuleBuilder.cs,GetTypeTokenForMemberRef,The following statement contains a magic number: if (type.__IsMissing) {  	return ImportType (type);  } else if (type.IsGenericTypeDefinition) {  	int token;  	if (!memberRefTypeTokens.TryGetValue (type' out token)) {  		ByteBuffer spec = new ByteBuffer (5);  		Signature.WriteTypeSpec (this' spec' type);  		token = 0x1B000000 | this.TypeSpec.AddRecord (this.Blobs.Add (spec));  		memberRefTypeTokens.Add (type' token);  	}  	return token;  } else if (type.IsModulePseudoType) {  	return 0x1A000000 | this.ModuleRef.FindOrAddRecord (this.Strings.Add (type.Module.ScopeName));  } else {  	return GetTypeToken (type).Token;  }  
Magic Number,IKVM.Reflection.Emit,ModuleBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ModuleBuilder.cs,GetTypeTokenForMemberRef,The following statement contains a magic number: if (type.IsGenericTypeDefinition) {  	int token;  	if (!memberRefTypeTokens.TryGetValue (type' out token)) {  		ByteBuffer spec = new ByteBuffer (5);  		Signature.WriteTypeSpec (this' spec' type);  		token = 0x1B000000 | this.TypeSpec.AddRecord (this.Blobs.Add (spec));  		memberRefTypeTokens.Add (type' token);  	}  	return token;  } else if (type.IsModulePseudoType) {  	return 0x1A000000 | this.ModuleRef.FindOrAddRecord (this.Strings.Add (type.Module.ScopeName));  } else {  	return GetTypeToken (type).Token;  }  
Magic Number,IKVM.Reflection.Emit,ModuleBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ModuleBuilder.cs,GetTypeTokenForMemberRef,The following statement contains a magic number: if (!memberRefTypeTokens.TryGetValue (type' out token)) {  	ByteBuffer spec = new ByteBuffer (5);  	Signature.WriteTypeSpec (this' spec' type);  	token = 0x1B000000 | this.TypeSpec.AddRecord (this.Blobs.Add (spec));  	memberRefTypeTokens.Add (type' token);  }  
Magic Number,IKVM.Reflection.Emit,ModuleBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ModuleBuilder.cs,ImportMethodOrField,The following statement contains a magic number: if (!importedMemberRefs.TryGetValue (new MemberRefKey (declaringType' name' sig)' out token)) {  	MemberRefTable.Record rec = new MemberRefTable.Record ();  	rec.Class = GetTypeTokenForMemberRef (declaringType);  	rec.Name = this.Strings.Add (name);  	ByteBuffer bb = new ByteBuffer (16);  	sig.WriteSig (this' bb);  	rec.Signature = this.Blobs.Add (bb);  	token = 0x0A000000 | this.MemberRef.AddRecord (rec);  	importedMemberRefs.Add (new MemberRefKey (declaringType' name' sig)' token);  }  
Magic Number,IKVM.Reflection.Emit,ModuleBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ModuleBuilder.cs,ImportType,The following statement contains a magic number: if (!typeTokens.TryGetValue (type' out token)) {  	if (type.HasElementType || type.IsGenericTypeInstance || type.__IsFunctionPointer) {  		ByteBuffer spec = new ByteBuffer (5);  		Signature.WriteTypeSpec (this' spec' type);  		token = 0x1B000000 | this.TypeSpec.AddRecord (this.Blobs.Add (spec));  	} else {  		TypeRefTable.Record rec = new TypeRefTable.Record ();  		if (type.IsNested) {  			rec.ResolutionScope = GetTypeToken (type.DeclaringType).Token;  		} else {  			rec.ResolutionScope = ImportAssemblyRef (type.Assembly);  		}  		rec.TypeName = this.Strings.Add (type.__Name);  		string ns = type.__Namespace;  		rec.TypeNameSpace = ns == null ? 0 : this.Strings.Add (ns);  		token = 0x01000000 | this.TypeRef.AddRecord (rec);  	}  	typeTokens.Add (type' token);  }  
Magic Number,IKVM.Reflection.Emit,ModuleBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ModuleBuilder.cs,ImportType,The following statement contains a magic number: if (type.HasElementType || type.IsGenericTypeInstance || type.__IsFunctionPointer) {  	ByteBuffer spec = new ByteBuffer (5);  	Signature.WriteTypeSpec (this' spec' type);  	token = 0x1B000000 | this.TypeSpec.AddRecord (this.Blobs.Add (spec));  } else {  	TypeRefTable.Record rec = new TypeRefTable.Record ();  	if (type.IsNested) {  		rec.ResolutionScope = GetTypeToken (type.DeclaringType).Token;  	} else {  		rec.ResolutionScope = ImportAssemblyRef (type.Assembly);  	}  	rec.TypeName = this.Strings.Add (type.__Name);  	string ns = type.__Namespace;  	rec.TypeNameSpace = ns == null ? 0 : this.Strings.Add (ns);  	token = 0x01000000 | this.TypeRef.AddRecord (rec);  }  
Magic Number,IKVM.Reflection.Emit,ModuleBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ModuleBuilder.cs,ApplyUnmanagedExports,The following statement contains a magic number: if (unmanagedExports.Count != 0) {  	int type;  	int size;  	if (imageFileMachine == ImageFileMachine.I386) {  		type = 0x05;  		size = 4;  	} else {  		type = 0x06;  		size = 8;  	}  	List<MethodBuilder> methods = new List<MethodBuilder> ();  	for (int i = 0; i < unmanagedExports.Count; i++) {  		if (unmanagedExports [i].mb != null) {  			methods.Add (unmanagedExports [i].mb);  		}  	}  	if (methods.Count != 0) {  		RelativeVirtualAddress rva = __AddVTableFixups (methods.ToArray ()' type);  		for (int i = 0; i < unmanagedExports.Count; i++) {  			if (unmanagedExports [i].mb != null) {  				UnmanagedExport exp = unmanagedExports [i];  				exp.rva = new RelativeVirtualAddress (rva.initializedDataOffset + (uint)(methods.IndexOf (unmanagedExports [i].mb) * size));  				unmanagedExports [i] = exp;  			}  		}  	}  }  
Magic Number,IKVM.Reflection.Emit,ModuleBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ModuleBuilder.cs,ApplyUnmanagedExports,The following statement contains a magic number: if (unmanagedExports.Count != 0) {  	int type;  	int size;  	if (imageFileMachine == ImageFileMachine.I386) {  		type = 0x05;  		size = 4;  	} else {  		type = 0x06;  		size = 8;  	}  	List<MethodBuilder> methods = new List<MethodBuilder> ();  	for (int i = 0; i < unmanagedExports.Count; i++) {  		if (unmanagedExports [i].mb != null) {  			methods.Add (unmanagedExports [i].mb);  		}  	}  	if (methods.Count != 0) {  		RelativeVirtualAddress rva = __AddVTableFixups (methods.ToArray ()' type);  		for (int i = 0; i < unmanagedExports.Count; i++) {  			if (unmanagedExports [i].mb != null) {  				UnmanagedExport exp = unmanagedExports [i];  				exp.rva = new RelativeVirtualAddress (rva.initializedDataOffset + (uint)(methods.IndexOf (unmanagedExports [i].mb) * size));  				unmanagedExports [i] = exp;  			}  		}  	}  }  
Magic Number,IKVM.Reflection.Emit,ModuleBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ModuleBuilder.cs,ApplyUnmanagedExports,The following statement contains a magic number: if (imageFileMachine == ImageFileMachine.I386) {  	type = 0x05;  	size = 4;  } else {  	type = 0x06;  	size = 8;  }  
Magic Number,IKVM.Reflection.Emit,ModuleBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ModuleBuilder.cs,ApplyUnmanagedExports,The following statement contains a magic number: if (imageFileMachine == ImageFileMachine.I386) {  	type = 0x05;  	size = 4;  } else {  	type = 0x06;  	size = 8;  }  
Magic Number,IKVM.Reflection.Emit,ModuleBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ModuleBuilder.cs,ApplyUnmanagedExports,The following statement contains a magic number: size = 4;  
Magic Number,IKVM.Reflection.Emit,ModuleBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ModuleBuilder.cs,ApplyUnmanagedExports,The following statement contains a magic number: size = 8;  
Magic Number,IKVM.Reflection.Emit,ModuleBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ModuleBuilder.cs,GetHeaderLength,The following statement contains a magic number: return 4 + // Signature  2 + // MajorVersion  2 + // MinorVersion  4 + // Reserved  4 + // ImageRuntimeVersion Length  StringToPaddedUTF8Length (asm.ImageRuntimeVersion) + 2 + // Flags  2 + // Streams  4 + // #~ Offset  4 + // #~ Size  4 + // StringToPaddedUTF8Length("#~")  4 + // #Strings Offset  4 + // #Strings Size  12 + // StringToPaddedUTF8Length("#Strings")  4 + // #US Offset  4 + // #US Size  4 + // StringToPaddedUTF8Length("#US")  4 + // #GUID Offset  4 + // #GUID Size  8 + // StringToPaddedUTF8Length("#GUID")  (Blobs.IsEmpty ? 0 : (4 + // #Blob Offset  4 + // #Blob Size  8// StringToPaddedUTF8Length("#Blob")  ));  
Magic Number,IKVM.Reflection.Emit,ModuleBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ModuleBuilder.cs,GetHeaderLength,The following statement contains a magic number: return 4 + // Signature  2 + // MajorVersion  2 + // MinorVersion  4 + // Reserved  4 + // ImageRuntimeVersion Length  StringToPaddedUTF8Length (asm.ImageRuntimeVersion) + 2 + // Flags  2 + // Streams  4 + // #~ Offset  4 + // #~ Size  4 + // StringToPaddedUTF8Length("#~")  4 + // #Strings Offset  4 + // #Strings Size  12 + // StringToPaddedUTF8Length("#Strings")  4 + // #US Offset  4 + // #US Size  4 + // StringToPaddedUTF8Length("#US")  4 + // #GUID Offset  4 + // #GUID Size  8 + // StringToPaddedUTF8Length("#GUID")  (Blobs.IsEmpty ? 0 : (4 + // #Blob Offset  4 + // #Blob Size  8// StringToPaddedUTF8Length("#Blob")  ));  
Magic Number,IKVM.Reflection.Emit,ModuleBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ModuleBuilder.cs,GetHeaderLength,The following statement contains a magic number: return 4 + // Signature  2 + // MajorVersion  2 + // MinorVersion  4 + // Reserved  4 + // ImageRuntimeVersion Length  StringToPaddedUTF8Length (asm.ImageRuntimeVersion) + 2 + // Flags  2 + // Streams  4 + // #~ Offset  4 + // #~ Size  4 + // StringToPaddedUTF8Length("#~")  4 + // #Strings Offset  4 + // #Strings Size  12 + // StringToPaddedUTF8Length("#Strings")  4 + // #US Offset  4 + // #US Size  4 + // StringToPaddedUTF8Length("#US")  4 + // #GUID Offset  4 + // #GUID Size  8 + // StringToPaddedUTF8Length("#GUID")  (Blobs.IsEmpty ? 0 : (4 + // #Blob Offset  4 + // #Blob Size  8// StringToPaddedUTF8Length("#Blob")  ));  
Magic Number,IKVM.Reflection.Emit,ModuleBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ModuleBuilder.cs,GetHeaderLength,The following statement contains a magic number: return 4 + // Signature  2 + // MajorVersion  2 + // MinorVersion  4 + // Reserved  4 + // ImageRuntimeVersion Length  StringToPaddedUTF8Length (asm.ImageRuntimeVersion) + 2 + // Flags  2 + // Streams  4 + // #~ Offset  4 + // #~ Size  4 + // StringToPaddedUTF8Length("#~")  4 + // #Strings Offset  4 + // #Strings Size  12 + // StringToPaddedUTF8Length("#Strings")  4 + // #US Offset  4 + // #US Size  4 + // StringToPaddedUTF8Length("#US")  4 + // #GUID Offset  4 + // #GUID Size  8 + // StringToPaddedUTF8Length("#GUID")  (Blobs.IsEmpty ? 0 : (4 + // #Blob Offset  4 + // #Blob Size  8// StringToPaddedUTF8Length("#Blob")  ));  
Magic Number,IKVM.Reflection.Emit,ModuleBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ModuleBuilder.cs,GetHeaderLength,The following statement contains a magic number: return 4 + // Signature  2 + // MajorVersion  2 + // MinorVersion  4 + // Reserved  4 + // ImageRuntimeVersion Length  StringToPaddedUTF8Length (asm.ImageRuntimeVersion) + 2 + // Flags  2 + // Streams  4 + // #~ Offset  4 + // #~ Size  4 + // StringToPaddedUTF8Length("#~")  4 + // #Strings Offset  4 + // #Strings Size  12 + // StringToPaddedUTF8Length("#Strings")  4 + // #US Offset  4 + // #US Size  4 + // StringToPaddedUTF8Length("#US")  4 + // #GUID Offset  4 + // #GUID Size  8 + // StringToPaddedUTF8Length("#GUID")  (Blobs.IsEmpty ? 0 : (4 + // #Blob Offset  4 + // #Blob Size  8// StringToPaddedUTF8Length("#Blob")  ));  
Magic Number,IKVM.Reflection.Emit,ModuleBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ModuleBuilder.cs,GetHeaderLength,The following statement contains a magic number: return 4 + // Signature  2 + // MajorVersion  2 + // MinorVersion  4 + // Reserved  4 + // ImageRuntimeVersion Length  StringToPaddedUTF8Length (asm.ImageRuntimeVersion) + 2 + // Flags  2 + // Streams  4 + // #~ Offset  4 + // #~ Size  4 + // StringToPaddedUTF8Length("#~")  4 + // #Strings Offset  4 + // #Strings Size  12 + // StringToPaddedUTF8Length("#Strings")  4 + // #US Offset  4 + // #US Size  4 + // StringToPaddedUTF8Length("#US")  4 + // #GUID Offset  4 + // #GUID Size  8 + // StringToPaddedUTF8Length("#GUID")  (Blobs.IsEmpty ? 0 : (4 + // #Blob Offset  4 + // #Blob Size  8// StringToPaddedUTF8Length("#Blob")  ));  
Magic Number,IKVM.Reflection.Emit,ModuleBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ModuleBuilder.cs,GetHeaderLength,The following statement contains a magic number: return 4 + // Signature  2 + // MajorVersion  2 + // MinorVersion  4 + // Reserved  4 + // ImageRuntimeVersion Length  StringToPaddedUTF8Length (asm.ImageRuntimeVersion) + 2 + // Flags  2 + // Streams  4 + // #~ Offset  4 + // #~ Size  4 + // StringToPaddedUTF8Length("#~")  4 + // #Strings Offset  4 + // #Strings Size  12 + // StringToPaddedUTF8Length("#Strings")  4 + // #US Offset  4 + // #US Size  4 + // StringToPaddedUTF8Length("#US")  4 + // #GUID Offset  4 + // #GUID Size  8 + // StringToPaddedUTF8Length("#GUID")  (Blobs.IsEmpty ? 0 : (4 + // #Blob Offset  4 + // #Blob Size  8// StringToPaddedUTF8Length("#Blob")  ));  
Magic Number,IKVM.Reflection.Emit,ModuleBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ModuleBuilder.cs,GetHeaderLength,The following statement contains a magic number: return 4 + // Signature  2 + // MajorVersion  2 + // MinorVersion  4 + // Reserved  4 + // ImageRuntimeVersion Length  StringToPaddedUTF8Length (asm.ImageRuntimeVersion) + 2 + // Flags  2 + // Streams  4 + // #~ Offset  4 + // #~ Size  4 + // StringToPaddedUTF8Length("#~")  4 + // #Strings Offset  4 + // #Strings Size  12 + // StringToPaddedUTF8Length("#Strings")  4 + // #US Offset  4 + // #US Size  4 + // StringToPaddedUTF8Length("#US")  4 + // #GUID Offset  4 + // #GUID Size  8 + // StringToPaddedUTF8Length("#GUID")  (Blobs.IsEmpty ? 0 : (4 + // #Blob Offset  4 + // #Blob Size  8// StringToPaddedUTF8Length("#Blob")  ));  
Magic Number,IKVM.Reflection.Emit,ModuleBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ModuleBuilder.cs,GetHeaderLength,The following statement contains a magic number: return 4 + // Signature  2 + // MajorVersion  2 + // MinorVersion  4 + // Reserved  4 + // ImageRuntimeVersion Length  StringToPaddedUTF8Length (asm.ImageRuntimeVersion) + 2 + // Flags  2 + // Streams  4 + // #~ Offset  4 + // #~ Size  4 + // StringToPaddedUTF8Length("#~")  4 + // #Strings Offset  4 + // #Strings Size  12 + // StringToPaddedUTF8Length("#Strings")  4 + // #US Offset  4 + // #US Size  4 + // StringToPaddedUTF8Length("#US")  4 + // #GUID Offset  4 + // #GUID Size  8 + // StringToPaddedUTF8Length("#GUID")  (Blobs.IsEmpty ? 0 : (4 + // #Blob Offset  4 + // #Blob Size  8// StringToPaddedUTF8Length("#Blob")  ));  
Magic Number,IKVM.Reflection.Emit,ModuleBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ModuleBuilder.cs,GetHeaderLength,The following statement contains a magic number: return 4 + // Signature  2 + // MajorVersion  2 + // MinorVersion  4 + // Reserved  4 + // ImageRuntimeVersion Length  StringToPaddedUTF8Length (asm.ImageRuntimeVersion) + 2 + // Flags  2 + // Streams  4 + // #~ Offset  4 + // #~ Size  4 + // StringToPaddedUTF8Length("#~")  4 + // #Strings Offset  4 + // #Strings Size  12 + // StringToPaddedUTF8Length("#Strings")  4 + // #US Offset  4 + // #US Size  4 + // StringToPaddedUTF8Length("#US")  4 + // #GUID Offset  4 + // #GUID Size  8 + // StringToPaddedUTF8Length("#GUID")  (Blobs.IsEmpty ? 0 : (4 + // #Blob Offset  4 + // #Blob Size  8// StringToPaddedUTF8Length("#Blob")  ));  
Magic Number,IKVM.Reflection.Emit,ModuleBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ModuleBuilder.cs,GetHeaderLength,The following statement contains a magic number: return 4 + // Signature  2 + // MajorVersion  2 + // MinorVersion  4 + // Reserved  4 + // ImageRuntimeVersion Length  StringToPaddedUTF8Length (asm.ImageRuntimeVersion) + 2 + // Flags  2 + // Streams  4 + // #~ Offset  4 + // #~ Size  4 + // StringToPaddedUTF8Length("#~")  4 + // #Strings Offset  4 + // #Strings Size  12 + // StringToPaddedUTF8Length("#Strings")  4 + // #US Offset  4 + // #US Size  4 + // StringToPaddedUTF8Length("#US")  4 + // #GUID Offset  4 + // #GUID Size  8 + // StringToPaddedUTF8Length("#GUID")  (Blobs.IsEmpty ? 0 : (4 + // #Blob Offset  4 + // #Blob Size  8// StringToPaddedUTF8Length("#Blob")  ));  
Magic Number,IKVM.Reflection.Emit,ModuleBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ModuleBuilder.cs,GetHeaderLength,The following statement contains a magic number: return 4 + // Signature  2 + // MajorVersion  2 + // MinorVersion  4 + // Reserved  4 + // ImageRuntimeVersion Length  StringToPaddedUTF8Length (asm.ImageRuntimeVersion) + 2 + // Flags  2 + // Streams  4 + // #~ Offset  4 + // #~ Size  4 + // StringToPaddedUTF8Length("#~")  4 + // #Strings Offset  4 + // #Strings Size  12 + // StringToPaddedUTF8Length("#Strings")  4 + // #US Offset  4 + // #US Size  4 + // StringToPaddedUTF8Length("#US")  4 + // #GUID Offset  4 + // #GUID Size  8 + // StringToPaddedUTF8Length("#GUID")  (Blobs.IsEmpty ? 0 : (4 + // #Blob Offset  4 + // #Blob Size  8// StringToPaddedUTF8Length("#Blob")  ));  
Magic Number,IKVM.Reflection.Emit,ModuleBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ModuleBuilder.cs,GetHeaderLength,The following statement contains a magic number: return 4 + // Signature  2 + // MajorVersion  2 + // MinorVersion  4 + // Reserved  4 + // ImageRuntimeVersion Length  StringToPaddedUTF8Length (asm.ImageRuntimeVersion) + 2 + // Flags  2 + // Streams  4 + // #~ Offset  4 + // #~ Size  4 + // StringToPaddedUTF8Length("#~")  4 + // #Strings Offset  4 + // #Strings Size  12 + // StringToPaddedUTF8Length("#Strings")  4 + // #US Offset  4 + // #US Size  4 + // StringToPaddedUTF8Length("#US")  4 + // #GUID Offset  4 + // #GUID Size  8 + // StringToPaddedUTF8Length("#GUID")  (Blobs.IsEmpty ? 0 : (4 + // #Blob Offset  4 + // #Blob Size  8// StringToPaddedUTF8Length("#Blob")  ));  
Magic Number,IKVM.Reflection.Emit,ModuleBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ModuleBuilder.cs,GetHeaderLength,The following statement contains a magic number: return 4 + // Signature  2 + // MajorVersion  2 + // MinorVersion  4 + // Reserved  4 + // ImageRuntimeVersion Length  StringToPaddedUTF8Length (asm.ImageRuntimeVersion) + 2 + // Flags  2 + // Streams  4 + // #~ Offset  4 + // #~ Size  4 + // StringToPaddedUTF8Length("#~")  4 + // #Strings Offset  4 + // #Strings Size  12 + // StringToPaddedUTF8Length("#Strings")  4 + // #US Offset  4 + // #US Size  4 + // StringToPaddedUTF8Length("#US")  4 + // #GUID Offset  4 + // #GUID Size  8 + // StringToPaddedUTF8Length("#GUID")  (Blobs.IsEmpty ? 0 : (4 + // #Blob Offset  4 + // #Blob Size  8// StringToPaddedUTF8Length("#Blob")  ));  
Magic Number,IKVM.Reflection.Emit,ModuleBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ModuleBuilder.cs,GetHeaderLength,The following statement contains a magic number: return 4 + // Signature  2 + // MajorVersion  2 + // MinorVersion  4 + // Reserved  4 + // ImageRuntimeVersion Length  StringToPaddedUTF8Length (asm.ImageRuntimeVersion) + 2 + // Flags  2 + // Streams  4 + // #~ Offset  4 + // #~ Size  4 + // StringToPaddedUTF8Length("#~")  4 + // #Strings Offset  4 + // #Strings Size  12 + // StringToPaddedUTF8Length("#Strings")  4 + // #US Offset  4 + // #US Size  4 + // StringToPaddedUTF8Length("#US")  4 + // #GUID Offset  4 + // #GUID Size  8 + // StringToPaddedUTF8Length("#GUID")  (Blobs.IsEmpty ? 0 : (4 + // #Blob Offset  4 + // #Blob Size  8// StringToPaddedUTF8Length("#Blob")  ));  
Magic Number,IKVM.Reflection.Emit,ModuleBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ModuleBuilder.cs,GetHeaderLength,The following statement contains a magic number: return 4 + // Signature  2 + // MajorVersion  2 + // MinorVersion  4 + // Reserved  4 + // ImageRuntimeVersion Length  StringToPaddedUTF8Length (asm.ImageRuntimeVersion) + 2 + // Flags  2 + // Streams  4 + // #~ Offset  4 + // #~ Size  4 + // StringToPaddedUTF8Length("#~")  4 + // #Strings Offset  4 + // #Strings Size  12 + // StringToPaddedUTF8Length("#Strings")  4 + // #US Offset  4 + // #US Size  4 + // StringToPaddedUTF8Length("#US")  4 + // #GUID Offset  4 + // #GUID Size  8 + // StringToPaddedUTF8Length("#GUID")  (Blobs.IsEmpty ? 0 : (4 + // #Blob Offset  4 + // #Blob Size  8// StringToPaddedUTF8Length("#Blob")  ));  
Magic Number,IKVM.Reflection.Emit,ModuleBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ModuleBuilder.cs,GetHeaderLength,The following statement contains a magic number: return 4 + // Signature  2 + // MajorVersion  2 + // MinorVersion  4 + // Reserved  4 + // ImageRuntimeVersion Length  StringToPaddedUTF8Length (asm.ImageRuntimeVersion) + 2 + // Flags  2 + // Streams  4 + // #~ Offset  4 + // #~ Size  4 + // StringToPaddedUTF8Length("#~")  4 + // #Strings Offset  4 + // #Strings Size  12 + // StringToPaddedUTF8Length("#Strings")  4 + // #US Offset  4 + // #US Size  4 + // StringToPaddedUTF8Length("#US")  4 + // #GUID Offset  4 + // #GUID Size  8 + // StringToPaddedUTF8Length("#GUID")  (Blobs.IsEmpty ? 0 : (4 + // #Blob Offset  4 + // #Blob Size  8// StringToPaddedUTF8Length("#Blob")  ));  
Magic Number,IKVM.Reflection.Emit,ModuleBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ModuleBuilder.cs,GetHeaderLength,The following statement contains a magic number: return 4 + // Signature  2 + // MajorVersion  2 + // MinorVersion  4 + // Reserved  4 + // ImageRuntimeVersion Length  StringToPaddedUTF8Length (asm.ImageRuntimeVersion) + 2 + // Flags  2 + // Streams  4 + // #~ Offset  4 + // #~ Size  4 + // StringToPaddedUTF8Length("#~")  4 + // #Strings Offset  4 + // #Strings Size  12 + // StringToPaddedUTF8Length("#Strings")  4 + // #US Offset  4 + // #US Size  4 + // StringToPaddedUTF8Length("#US")  4 + // #GUID Offset  4 + // #GUID Size  8 + // StringToPaddedUTF8Length("#GUID")  (Blobs.IsEmpty ? 0 : (4 + // #Blob Offset  4 + // #Blob Size  8// StringToPaddedUTF8Length("#Blob")  ));  
Magic Number,IKVM.Reflection.Emit,ModuleBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ModuleBuilder.cs,GetHeaderLength,The following statement contains a magic number: return 4 + // Signature  2 + // MajorVersion  2 + // MinorVersion  4 + // Reserved  4 + // ImageRuntimeVersion Length  StringToPaddedUTF8Length (asm.ImageRuntimeVersion) + 2 + // Flags  2 + // Streams  4 + // #~ Offset  4 + // #~ Size  4 + // StringToPaddedUTF8Length("#~")  4 + // #Strings Offset  4 + // #Strings Size  12 + // StringToPaddedUTF8Length("#Strings")  4 + // #US Offset  4 + // #US Size  4 + // StringToPaddedUTF8Length("#US")  4 + // #GUID Offset  4 + // #GUID Size  8 + // StringToPaddedUTF8Length("#GUID")  (Blobs.IsEmpty ? 0 : (4 + // #Blob Offset  4 + // #Blob Size  8// StringToPaddedUTF8Length("#Blob")  ));  
Magic Number,IKVM.Reflection.Emit,ModuleBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ModuleBuilder.cs,GetHeaderLength,The following statement contains a magic number: return 4 + // Signature  2 + // MajorVersion  2 + // MinorVersion  4 + // Reserved  4 + // ImageRuntimeVersion Length  StringToPaddedUTF8Length (asm.ImageRuntimeVersion) + 2 + // Flags  2 + // Streams  4 + // #~ Offset  4 + // #~ Size  4 + // StringToPaddedUTF8Length("#~")  4 + // #Strings Offset  4 + // #Strings Size  12 + // StringToPaddedUTF8Length("#Strings")  4 + // #US Offset  4 + // #US Size  4 + // StringToPaddedUTF8Length("#US")  4 + // #GUID Offset  4 + // #GUID Size  8 + // StringToPaddedUTF8Length("#GUID")  (Blobs.IsEmpty ? 0 : (4 + // #Blob Offset  4 + // #Blob Size  8// StringToPaddedUTF8Length("#Blob")  ));  
Magic Number,IKVM.Reflection.Emit,ModuleBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ModuleBuilder.cs,GetHeaderLength,The following statement contains a magic number: return 4 + // Signature  2 + // MajorVersion  2 + // MinorVersion  4 + // Reserved  4 + // ImageRuntimeVersion Length  StringToPaddedUTF8Length (asm.ImageRuntimeVersion) + 2 + // Flags  2 + // Streams  4 + // #~ Offset  4 + // #~ Size  4 + // StringToPaddedUTF8Length("#~")  4 + // #Strings Offset  4 + // #Strings Size  12 + // StringToPaddedUTF8Length("#Strings")  4 + // #US Offset  4 + // #US Size  4 + // StringToPaddedUTF8Length("#US")  4 + // #GUID Offset  4 + // #GUID Size  8 + // StringToPaddedUTF8Length("#GUID")  (Blobs.IsEmpty ? 0 : (4 + // #Blob Offset  4 + // #Blob Size  8// StringToPaddedUTF8Length("#Blob")  ));  
Magic Number,IKVM.Reflection.Emit,ModuleBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ModuleBuilder.cs,GetHeaderLength,The following statement contains a magic number: return 4 + // Signature  2 + // MajorVersion  2 + // MinorVersion  4 + // Reserved  4 + // ImageRuntimeVersion Length  StringToPaddedUTF8Length (asm.ImageRuntimeVersion) + 2 + // Flags  2 + // Streams  4 + // #~ Offset  4 + // #~ Size  4 + // StringToPaddedUTF8Length("#~")  4 + // #Strings Offset  4 + // #Strings Size  12 + // StringToPaddedUTF8Length("#Strings")  4 + // #US Offset  4 + // #US Size  4 + // StringToPaddedUTF8Length("#US")  4 + // #GUID Offset  4 + // #GUID Size  8 + // StringToPaddedUTF8Length("#GUID")  (Blobs.IsEmpty ? 0 : (4 + // #Blob Offset  4 + // #Blob Size  8// StringToPaddedUTF8Length("#Blob")  ));  
Magic Number,IKVM.Reflection.Emit,ModuleBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ModuleBuilder.cs,WriteMetadata,The following statement contains a magic number: if (Blobs.IsEmpty) {  	mw.Write ((ushort)4);  	// Streams  } else {  	mw.Write ((ushort)5);  	// Streams  }  
Magic Number,IKVM.Reflection.Emit,ModuleBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ModuleBuilder.cs,WriteMetadata,The following statement contains a magic number: if (Blobs.IsEmpty) {  	mw.Write ((ushort)4);  	// Streams  } else {  	mw.Write ((ushort)5);  	// Streams  }  
Magic Number,IKVM.Reflection.Emit,ModuleBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ModuleBuilder.cs,WriteMetadata,The following statement contains a magic number: mw.Write ((ushort)4);  
Magic Number,IKVM.Reflection.Emit,ModuleBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ModuleBuilder.cs,WriteMetadata,The following statement contains a magic number: mw.Write ((ushort)5);  
Magic Number,IKVM.Reflection.Emit,ModuleBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ModuleBuilder.cs,StringToPaddedUTF8Length,The following statement contains a magic number: return (System.Text.Encoding.UTF8.GetByteCount (str) + 4) & ~3;  
Magic Number,IKVM.Reflection.Emit,ModuleBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ModuleBuilder.cs,StringToPaddedUTF8Length,The following statement contains a magic number: return (System.Text.Encoding.UTF8.GetByteCount (str) + 4) & ~3;  
Magic Number,IKVM.Reflection.Emit,ModuleBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ModuleBuilder.cs,ResolveMethod,The following statement contains a magic number: if ((metadataToken >> 24) == MemberRefTable.Index) {  	foreach (KeyValuePair<MemberInfo' int> kv in importedMembers) {  		if (kv.Value == metadataToken) {  			return (MethodBase)kv.Key;  		}  	}  }  
Magic Number,IKVM.Reflection.Emit,ModuleBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ModuleBuilder.cs,GetStringConstant,The following statement contains a magic number: return new StringToken (this.UserStrings.Add (str) | (0x70 << 24));  
Magic Number,IKVM.Reflection.Emit,ModuleBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ModuleBuilder.cs,GetSignatureToken,The following statement contains a magic number: return new SignatureToken (this.StandAloneSig.FindOrAddRecord (this.Blobs.Add (sigHelper.GetSignature (this))) | (StandAloneSigTable.Index << 24));  
Magic Number,IKVM.Reflection.Emit,ModuleBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ModuleBuilder.cs,GetSignatureToken,The following statement contains a magic number: return new SignatureToken (this.StandAloneSig.FindOrAddRecord (this.Blobs.Add (ByteBuffer.Wrap (sigBytes' sigLength))) | (StandAloneSigTable.Index << 24));  
Magic Number,IKVM.Reflection.Emit,ModuleBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ModuleBuilder.cs,SaveImpl,The following statement contains a magic number: if (attributes.Count > 0) {  	int mscorlib = ImportAssemblyRef (universe.Mscorlib);  	int[] placeholderTokens = new int[4];  	string[] placeholderTypeNames = new string[] {  		"AssemblyAttributesGoHere"'  		"AssemblyAttributesGoHereM"'  		"AssemblyAttributesGoHereS"'  		"AssemblyAttributesGoHereSM"  	};  	foreach (CustomAttributeData cad in attributes) {  		int index;  		if (cad.Constructor.DeclaringType.BaseType == universe.System_Security_Permissions_CodeAccessSecurityAttribute) {  			if (cad.Constructor.DeclaringType.IsAllowMultipleCustomAttribute) {  				index = 3;  			} else {  				index = 2;  			}  		} else if (cad.Constructor.DeclaringType.IsAllowMultipleCustomAttribute) {  			index = 1;  		} else {  			index = 0;  		}  		if (placeholderTokens [index] == 0) {  			// we manually add a TypeRef without looking it up in mscorlib' because Mono and Silverlight's mscorlib don't have these types  			placeholderTokens [index] = AddTypeRefByName (mscorlib' "System.Runtime.CompilerServices"' placeholderTypeNames [index]);  		}  		SetCustomAttribute (placeholderTokens [index]' cad.__ToBuilder ());  	}  }  
Magic Number,IKVM.Reflection.Emit,ModuleBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ModuleBuilder.cs,SaveImpl,The following statement contains a magic number: if (attributes.Count > 0) {  	int mscorlib = ImportAssemblyRef (universe.Mscorlib);  	int[] placeholderTokens = new int[4];  	string[] placeholderTypeNames = new string[] {  		"AssemblyAttributesGoHere"'  		"AssemblyAttributesGoHereM"'  		"AssemblyAttributesGoHereS"'  		"AssemblyAttributesGoHereSM"  	};  	foreach (CustomAttributeData cad in attributes) {  		int index;  		if (cad.Constructor.DeclaringType.BaseType == universe.System_Security_Permissions_CodeAccessSecurityAttribute) {  			if (cad.Constructor.DeclaringType.IsAllowMultipleCustomAttribute) {  				index = 3;  			} else {  				index = 2;  			}  		} else if (cad.Constructor.DeclaringType.IsAllowMultipleCustomAttribute) {  			index = 1;  		} else {  			index = 0;  		}  		if (placeholderTokens [index] == 0) {  			// we manually add a TypeRef without looking it up in mscorlib' because Mono and Silverlight's mscorlib don't have these types  			placeholderTokens [index] = AddTypeRefByName (mscorlib' "System.Runtime.CompilerServices"' placeholderTypeNames [index]);  		}  		SetCustomAttribute (placeholderTokens [index]' cad.__ToBuilder ());  	}  }  
Magic Number,IKVM.Reflection.Emit,ModuleBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ModuleBuilder.cs,SaveImpl,The following statement contains a magic number: if (attributes.Count > 0) {  	int mscorlib = ImportAssemblyRef (universe.Mscorlib);  	int[] placeholderTokens = new int[4];  	string[] placeholderTypeNames = new string[] {  		"AssemblyAttributesGoHere"'  		"AssemblyAttributesGoHereM"'  		"AssemblyAttributesGoHereS"'  		"AssemblyAttributesGoHereSM"  	};  	foreach (CustomAttributeData cad in attributes) {  		int index;  		if (cad.Constructor.DeclaringType.BaseType == universe.System_Security_Permissions_CodeAccessSecurityAttribute) {  			if (cad.Constructor.DeclaringType.IsAllowMultipleCustomAttribute) {  				index = 3;  			} else {  				index = 2;  			}  		} else if (cad.Constructor.DeclaringType.IsAllowMultipleCustomAttribute) {  			index = 1;  		} else {  			index = 0;  		}  		if (placeholderTokens [index] == 0) {  			// we manually add a TypeRef without looking it up in mscorlib' because Mono and Silverlight's mscorlib don't have these types  			placeholderTokens [index] = AddTypeRefByName (mscorlib' "System.Runtime.CompilerServices"' placeholderTypeNames [index]);  		}  		SetCustomAttribute (placeholderTokens [index]' cad.__ToBuilder ());  	}  }  
Magic Number,IKVM.Reflection.Emit,ModuleBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ModuleBuilder.cs,SaveImpl,The following statement contains a magic number: foreach (CustomAttributeData cad in attributes) {  	int index;  	if (cad.Constructor.DeclaringType.BaseType == universe.System_Security_Permissions_CodeAccessSecurityAttribute) {  		if (cad.Constructor.DeclaringType.IsAllowMultipleCustomAttribute) {  			index = 3;  		} else {  			index = 2;  		}  	} else if (cad.Constructor.DeclaringType.IsAllowMultipleCustomAttribute) {  		index = 1;  	} else {  		index = 0;  	}  	if (placeholderTokens [index] == 0) {  		// we manually add a TypeRef without looking it up in mscorlib' because Mono and Silverlight's mscorlib don't have these types  		placeholderTokens [index] = AddTypeRefByName (mscorlib' "System.Runtime.CompilerServices"' placeholderTypeNames [index]);  	}  	SetCustomAttribute (placeholderTokens [index]' cad.__ToBuilder ());  }  
Magic Number,IKVM.Reflection.Emit,ModuleBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ModuleBuilder.cs,SaveImpl,The following statement contains a magic number: foreach (CustomAttributeData cad in attributes) {  	int index;  	if (cad.Constructor.DeclaringType.BaseType == universe.System_Security_Permissions_CodeAccessSecurityAttribute) {  		if (cad.Constructor.DeclaringType.IsAllowMultipleCustomAttribute) {  			index = 3;  		} else {  			index = 2;  		}  	} else if (cad.Constructor.DeclaringType.IsAllowMultipleCustomAttribute) {  		index = 1;  	} else {  		index = 0;  	}  	if (placeholderTokens [index] == 0) {  		// we manually add a TypeRef without looking it up in mscorlib' because Mono and Silverlight's mscorlib don't have these types  		placeholderTokens [index] = AddTypeRefByName (mscorlib' "System.Runtime.CompilerServices"' placeholderTypeNames [index]);  	}  	SetCustomAttribute (placeholderTokens [index]' cad.__ToBuilder ());  }  
Magic Number,IKVM.Reflection.Emit,ModuleBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ModuleBuilder.cs,SaveImpl,The following statement contains a magic number: if (cad.Constructor.DeclaringType.BaseType == universe.System_Security_Permissions_CodeAccessSecurityAttribute) {  	if (cad.Constructor.DeclaringType.IsAllowMultipleCustomAttribute) {  		index = 3;  	} else {  		index = 2;  	}  } else if (cad.Constructor.DeclaringType.IsAllowMultipleCustomAttribute) {  	index = 1;  } else {  	index = 0;  }  
Magic Number,IKVM.Reflection.Emit,ModuleBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ModuleBuilder.cs,SaveImpl,The following statement contains a magic number: if (cad.Constructor.DeclaringType.BaseType == universe.System_Security_Permissions_CodeAccessSecurityAttribute) {  	if (cad.Constructor.DeclaringType.IsAllowMultipleCustomAttribute) {  		index = 3;  	} else {  		index = 2;  	}  } else if (cad.Constructor.DeclaringType.IsAllowMultipleCustomAttribute) {  	index = 1;  } else {  	index = 0;  }  
Magic Number,IKVM.Reflection.Emit,ModuleBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ModuleBuilder.cs,SaveImpl,The following statement contains a magic number: if (cad.Constructor.DeclaringType.IsAllowMultipleCustomAttribute) {  	index = 3;  } else {  	index = 2;  }  
Magic Number,IKVM.Reflection.Emit,ModuleBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ModuleBuilder.cs,SaveImpl,The following statement contains a magic number: if (cad.Constructor.DeclaringType.IsAllowMultipleCustomAttribute) {  	index = 3;  } else {  	index = 2;  }  
Magic Number,IKVM.Reflection.Emit,ModuleBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ModuleBuilder.cs,SaveImpl,The following statement contains a magic number: index = 3;  
Magic Number,IKVM.Reflection.Emit,ModuleBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ModuleBuilder.cs,SaveImpl,The following statement contains a magic number: index = 2;  
Magic Number,IKVM.Reflection.Emit,ModuleBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ModuleBuilder.cs,__GetReferencedTypes,The following statement contains a magic number: foreach (KeyValuePair<Type' int> kv in typeTokens) {  	if (kv.Value >> 24 == TypeRefTable.Index) {  		list.Add (kv.Key);  	}  }  
Magic Number,IKVM.Reflection.Emit,ModuleBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ModuleBuilder.cs,__GetReferencedTypes,The following statement contains a magic number: if (kv.Value >> 24 == TypeRefTable.Index) {  	list.Add (kv.Key);  }  
Magic Number,IKVM.Reflection.Emit,ModuleBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ModuleBuilder.cs,__AddVTableFixups,The following statement contains a magic number: initializedData.Align (8);  
Magic Number,IKVM.Reflection.Emit,ModuleBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ModuleBuilder.cs,__AddVTableFixups,The following statement contains a magic number: foreach (MethodBuilder mb in methods) {  	initializedData.Write (mb.MetadataToken);  	if (fixups.SlotWidth == 8) {  		initializedData.Write (0);  	}  }  
Magic Number,IKVM.Reflection.Emit,ModuleBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ModuleBuilder.cs,__AddVTableFixups,The following statement contains a magic number: if (fixups.SlotWidth == 8) {  	initializedData.Write (0);  }  
Magic Number,IKVM.Reflection.Emit,ModuleBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ModuleBuilder.cs,SetInterfaceImplementationCustomAttribute,The following statement contains a magic number: switch (token >> 24) {  case TypeDefTable.Index:  	token = (token & 0xFFFFFF) << 2 | 0;  	break;  case TypeRefTable.Index:  	token = (token & 0xFFFFFF) << 2 | 1;  	break;  case TypeSpecTable.Index:  	token = (token & 0xFFFFFF) << 2 | 2;  	break;  default:  	throw new InvalidOperationException ();  }  
Magic Number,IKVM.Reflection.Emit,ModuleBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ModuleBuilder.cs,SetInterfaceImplementationCustomAttribute,The following statement contains a magic number: switch (token >> 24) {  case TypeDefTable.Index:  	token = (token & 0xFFFFFF) << 2 | 0;  	break;  case TypeRefTable.Index:  	token = (token & 0xFFFFFF) << 2 | 1;  	break;  case TypeSpecTable.Index:  	token = (token & 0xFFFFFF) << 2 | 2;  	break;  default:  	throw new InvalidOperationException ();  }  
Magic Number,IKVM.Reflection.Emit,ModuleBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ModuleBuilder.cs,SetInterfaceImplementationCustomAttribute,The following statement contains a magic number: switch (token >> 24) {  case TypeDefTable.Index:  	token = (token & 0xFFFFFF) << 2 | 0;  	break;  case TypeRefTable.Index:  	token = (token & 0xFFFFFF) << 2 | 1;  	break;  case TypeSpecTable.Index:  	token = (token & 0xFFFFFF) << 2 | 2;  	break;  default:  	throw new InvalidOperationException ();  }  
Magic Number,IKVM.Reflection.Emit,ModuleBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ModuleBuilder.cs,SetInterfaceImplementationCustomAttribute,The following statement contains a magic number: switch (token >> 24) {  case TypeDefTable.Index:  	token = (token & 0xFFFFFF) << 2 | 0;  	break;  case TypeRefTable.Index:  	token = (token & 0xFFFFFF) << 2 | 1;  	break;  case TypeSpecTable.Index:  	token = (token & 0xFFFFFF) << 2 | 2;  	break;  default:  	throw new InvalidOperationException ();  }  
Magic Number,IKVM.Reflection.Emit,ModuleBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ModuleBuilder.cs,SetInterfaceImplementationCustomAttribute,The following statement contains a magic number: switch (token >> 24) {  case TypeDefTable.Index:  	token = (token & 0xFFFFFF) << 2 | 0;  	break;  case TypeRefTable.Index:  	token = (token & 0xFFFFFF) << 2 | 1;  	break;  case TypeSpecTable.Index:  	token = (token & 0xFFFFFF) << 2 | 2;  	break;  default:  	throw new InvalidOperationException ();  }  
Magic Number,IKVM.Reflection.Emit,ModuleBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ModuleBuilder.cs,SetInterfaceImplementationCustomAttribute,The following statement contains a magic number: token = (token & 0xFFFFFF) << 2 | 0;  
Magic Number,IKVM.Reflection.Emit,ModuleBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ModuleBuilder.cs,SetInterfaceImplementationCustomAttribute,The following statement contains a magic number: token = (token & 0xFFFFFF) << 2 | 1;  
Magic Number,IKVM.Reflection.Emit,ModuleBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ModuleBuilder.cs,SetInterfaceImplementationCustomAttribute,The following statement contains a magic number: token = (token & 0xFFFFFF) << 2 | 2;  
Magic Number,IKVM.Reflection.Emit,ModuleBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ModuleBuilder.cs,SetInterfaceImplementationCustomAttribute,The following statement contains a magic number: token = (token & 0xFFFFFF) << 2 | 2;  
Magic Number,IKVM.Reflection.Emit,ModuleBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ModuleBuilder.cs,ResolveInterfaceImplPseudoTokens,The following statement contains a magic number: if (interfaceImplCustomAttributes != null) {  	foreach (InterfaceImplCustomAttribute rec in interfaceImplCustomAttributes) {  		for (int i = 0; i < InterfaceImpl.records.Length; i++) {  			if (InterfaceImpl.records [i].Class == rec.type && InterfaceImpl.records [i].Interface == rec.interfaceType) {  				RegisterTokenFixup (rec.pseudoToken' (InterfaceImplTable.Index << 24) | (i + 1));  				break;  			}  		}  	}  }  
Magic Number,IKVM.Reflection.Emit,ModuleBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ModuleBuilder.cs,ResolveInterfaceImplPseudoTokens,The following statement contains a magic number: foreach (InterfaceImplCustomAttribute rec in interfaceImplCustomAttributes) {  	for (int i = 0; i < InterfaceImpl.records.Length; i++) {  		if (InterfaceImpl.records [i].Class == rec.type && InterfaceImpl.records [i].Interface == rec.interfaceType) {  			RegisterTokenFixup (rec.pseudoToken' (InterfaceImplTable.Index << 24) | (i + 1));  			break;  		}  	}  }  
Magic Number,IKVM.Reflection.Emit,ModuleBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ModuleBuilder.cs,ResolveInterfaceImplPseudoTokens,The following statement contains a magic number: for (int i = 0; i < InterfaceImpl.records.Length; i++) {  	if (InterfaceImpl.records [i].Class == rec.type && InterfaceImpl.records [i].Interface == rec.interfaceType) {  		RegisterTokenFixup (rec.pseudoToken' (InterfaceImplTable.Index << 24) | (i + 1));  		break;  	}  }  
Magic Number,IKVM.Reflection.Emit,ModuleBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ModuleBuilder.cs,ResolveInterfaceImplPseudoTokens,The following statement contains a magic number: if (InterfaceImpl.records [i].Class == rec.type && InterfaceImpl.records [i].Interface == rec.interfaceType) {  	RegisterTokenFixup (rec.pseudoToken' (InterfaceImplTable.Index << 24) | (i + 1));  	break;  }  
Magic Number,IKVM.Reflection.Emit,ModuleBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ModuleBuilder.cs,ResolveInterfaceImplPseudoTokens,The following statement contains a magic number: RegisterTokenFixup (rec.pseudoToken' (InterfaceImplTable.Index << 24) | (i + 1));  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following statement contains a magic number: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,TakesSingleByteArgument,The following statement contains a magic number: switch (inst.Value) {  case 14:  case 15:  case 16:  case 17:  case 18:  case 19:  case 31:  case 43:  case 44:  case 45:  case 46:  case 47:  case 48:  case 49:  case 50:  case 51:  case 52:  case 53:  case 54:  case 55:  case 222:  case -494:  	return true;  default:  	return false;  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,TakesSingleByteArgument,The following statement contains a magic number: switch (inst.Value) {  case 14:  case 15:  case 16:  case 17:  case 18:  case 19:  case 31:  case 43:  case 44:  case 45:  case 46:  case 47:  case 48:  case 49:  case 50:  case 51:  case 52:  case 53:  case 54:  case 55:  case 222:  case -494:  	return true;  default:  	return false;  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,TakesSingleByteArgument,The following statement contains a magic number: switch (inst.Value) {  case 14:  case 15:  case 16:  case 17:  case 18:  case 19:  case 31:  case 43:  case 44:  case 45:  case 46:  case 47:  case 48:  case 49:  case 50:  case 51:  case 52:  case 53:  case 54:  case 55:  case 222:  case -494:  	return true;  default:  	return false;  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,TakesSingleByteArgument,The following statement contains a magic number: switch (inst.Value) {  case 14:  case 15:  case 16:  case 17:  case 18:  case 19:  case 31:  case 43:  case 44:  case 45:  case 46:  case 47:  case 48:  case 49:  case 50:  case 51:  case 52:  case 53:  case 54:  case 55:  case 222:  case -494:  	return true;  default:  	return false;  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,TakesSingleByteArgument,The following statement contains a magic number: switch (inst.Value) {  case 14:  case 15:  case 16:  case 17:  case 18:  case 19:  case 31:  case 43:  case 44:  case 45:  case 46:  case 47:  case 48:  case 49:  case 50:  case 51:  case 52:  case 53:  case 54:  case 55:  case 222:  case -494:  	return true;  default:  	return false;  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,TakesSingleByteArgument,The following statement contains a magic number: switch (inst.Value) {  case 14:  case 15:  case 16:  case 17:  case 18:  case 19:  case 31:  case 43:  case 44:  case 45:  case 46:  case 47:  case 48:  case 49:  case 50:  case 51:  case 52:  case 53:  case 54:  case 55:  case 222:  case -494:  	return true;  default:  	return false;  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,TakesSingleByteArgument,The following statement contains a magic number: switch (inst.Value) {  case 14:  case 15:  case 16:  case 17:  case 18:  case 19:  case 31:  case 43:  case 44:  case 45:  case 46:  case 47:  case 48:  case 49:  case 50:  case 51:  case 52:  case 53:  case 54:  case 55:  case 222:  case -494:  	return true;  default:  	return false;  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,TakesSingleByteArgument,The following statement contains a magic number: switch (inst.Value) {  case 14:  case 15:  case 16:  case 17:  case 18:  case 19:  case 31:  case 43:  case 44:  case 45:  case 46:  case 47:  case 48:  case 49:  case 50:  case 51:  case 52:  case 53:  case 54:  case 55:  case 222:  case -494:  	return true;  default:  	return false;  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,TakesSingleByteArgument,The following statement contains a magic number: switch (inst.Value) {  case 14:  case 15:  case 16:  case 17:  case 18:  case 19:  case 31:  case 43:  case 44:  case 45:  case 46:  case 47:  case 48:  case 49:  case 50:  case 51:  case 52:  case 53:  case 54:  case 55:  case 222:  case -494:  	return true;  default:  	return false;  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,TakesSingleByteArgument,The following statement contains a magic number: switch (inst.Value) {  case 14:  case 15:  case 16:  case 17:  case 18:  case 19:  case 31:  case 43:  case 44:  case 45:  case 46:  case 47:  case 48:  case 49:  case 50:  case 51:  case 52:  case 53:  case 54:  case 55:  case 222:  case -494:  	return true;  default:  	return false;  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,TakesSingleByteArgument,The following statement contains a magic number: switch (inst.Value) {  case 14:  case 15:  case 16:  case 17:  case 18:  case 19:  case 31:  case 43:  case 44:  case 45:  case 46:  case 47:  case 48:  case 49:  case 50:  case 51:  case 52:  case 53:  case 54:  case 55:  case 222:  case -494:  	return true;  default:  	return false;  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,TakesSingleByteArgument,The following statement contains a magic number: switch (inst.Value) {  case 14:  case 15:  case 16:  case 17:  case 18:  case 19:  case 31:  case 43:  case 44:  case 45:  case 46:  case 47:  case 48:  case 49:  case 50:  case 51:  case 52:  case 53:  case 54:  case 55:  case 222:  case -494:  	return true;  default:  	return false;  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,TakesSingleByteArgument,The following statement contains a magic number: switch (inst.Value) {  case 14:  case 15:  case 16:  case 17:  case 18:  case 19:  case 31:  case 43:  case 44:  case 45:  case 46:  case 47:  case 48:  case 49:  case 50:  case 51:  case 52:  case 53:  case 54:  case 55:  case 222:  case -494:  	return true;  default:  	return false;  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,TakesSingleByteArgument,The following statement contains a magic number: switch (inst.Value) {  case 14:  case 15:  case 16:  case 17:  case 18:  case 19:  case 31:  case 43:  case 44:  case 45:  case 46:  case 47:  case 48:  case 49:  case 50:  case 51:  case 52:  case 53:  case 54:  case 55:  case 222:  case -494:  	return true;  default:  	return false;  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,TakesSingleByteArgument,The following statement contains a magic number: switch (inst.Value) {  case 14:  case 15:  case 16:  case 17:  case 18:  case 19:  case 31:  case 43:  case 44:  case 45:  case 46:  case 47:  case 48:  case 49:  case 50:  case 51:  case 52:  case 53:  case 54:  case 55:  case 222:  case -494:  	return true;  default:  	return false;  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,TakesSingleByteArgument,The following statement contains a magic number: switch (inst.Value) {  case 14:  case 15:  case 16:  case 17:  case 18:  case 19:  case 31:  case 43:  case 44:  case 45:  case 46:  case 47:  case 48:  case 49:  case 50:  case 51:  case 52:  case 53:  case 54:  case 55:  case 222:  case -494:  	return true;  default:  	return false;  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,TakesSingleByteArgument,The following statement contains a magic number: switch (inst.Value) {  case 14:  case 15:  case 16:  case 17:  case 18:  case 19:  case 31:  case 43:  case 44:  case 45:  case 46:  case 47:  case 48:  case 49:  case 50:  case 51:  case 52:  case 53:  case 54:  case 55:  case 222:  case -494:  	return true;  default:  	return false;  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,TakesSingleByteArgument,The following statement contains a magic number: switch (inst.Value) {  case 14:  case 15:  case 16:  case 17:  case 18:  case 19:  case 31:  case 43:  case 44:  case 45:  case 46:  case 47:  case 48:  case 49:  case 50:  case 51:  case 52:  case 53:  case 54:  case 55:  case 222:  case -494:  	return true;  default:  	return false;  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,TakesSingleByteArgument,The following statement contains a magic number: switch (inst.Value) {  case 14:  case 15:  case 16:  case 17:  case 18:  case 19:  case 31:  case 43:  case 44:  case 45:  case 46:  case 47:  case 48:  case 49:  case 50:  case 51:  case 52:  case 53:  case 54:  case 55:  case 222:  case -494:  	return true;  default:  	return false;  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,TakesSingleByteArgument,The following statement contains a magic number: switch (inst.Value) {  case 14:  case 15:  case 16:  case 17:  case 18:  case 19:  case 31:  case 43:  case 44:  case 45:  case 46:  case 47:  case 48:  case 49:  case 50:  case 51:  case 52:  case 53:  case 54:  case 55:  case 222:  case -494:  	return true;  default:  	return false;  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,TakesSingleByteArgument,The following statement contains a magic number: switch (inst.Value) {  case 14:  case 15:  case 16:  case 17:  case 18:  case 19:  case 31:  case 43:  case 44:  case 45:  case 46:  case 47:  case 48:  case 49:  case 50:  case 51:  case 52:  case 53:  case 54:  case 55:  case 222:  case -494:  	return true;  default:  	return false;  }  
Magic Number,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,TakesSingleByteArgument,The following statement contains a magic number: switch (inst.Value) {  case 14:  case 15:  case 16:  case 17:  case 18:  case 19:  case 31:  case 43:  case 44:  case 45:  case 46:  case 47:  case 48:  case 49:  case 50:  case 51:  case 52:  case 53:  case 54:  case 55:  case 222:  case -494:  	return true;  default:  	return false;  }  
Magic Number,IKVM.Reflection.Emit,GenericTypeParameterBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\TypeBuilder.cs,SetCustomAttribute,The following statement contains a magic number: this.ModuleBuilder.SetCustomAttribute ((GenericParamTable.Index << 24) | paramPseudoIndex' customBuilder);  
Magic Number,IKVM.Reflection.Emit,GenericTypeParameterBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\TypeBuilder.cs,GetModuleBuilderToken,The following statement contains a magic number: if (typeToken == 0) {  	ByteBuffer spec = new ByteBuffer (5);  	Signature.WriteTypeSpec (this.ModuleBuilder' spec' this);  	typeToken = 0x1B000000 | this.ModuleBuilder.TypeSpec.AddRecord (this.ModuleBuilder.Blobs.Add (spec));  }  
Magic Number,IKVM.Reflection.Metadata,MetadataRW,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\MetadataRW.cs,MetadataRW,The following statement contains a magic number: this.bigResolutionScope = IsBig (2' module.ModuleTable' module.ModuleRef' module.AssemblyRef' module.TypeRef);  
Magic Number,IKVM.Reflection.Metadata,MetadataRW,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\MetadataRW.cs,MetadataRW,The following statement contains a magic number: this.bigTypeDefOrRef = IsBig (2' module.TypeDef' module.TypeRef' module.TypeSpec);  
Magic Number,IKVM.Reflection.Metadata,MetadataRW,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\MetadataRW.cs,MetadataRW,The following statement contains a magic number: this.bigMemberRefParent = IsBig (3' module.TypeDef' module.TypeRef' module.ModuleRef' module.MethodDef' module.TypeSpec);  
Magic Number,IKVM.Reflection.Metadata,MetadataRW,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\MetadataRW.cs,MetadataRW,The following statement contains a magic number: this.bigHasCustomAttribute = IsBig (5' module.MethodDef' module.Field' module.TypeRef' module.TypeDef' module.Param' module.InterfaceImpl' module.MemberRef' module.ModuleTable' /*module.Permission'*/module.Property' module.Event' module.StandAloneSig' module.ModuleRef' module.TypeSpec' module.AssemblyTable' module.AssemblyRef' module.File' module.ExportedType' module.ManifestResource);  
Magic Number,IKVM.Reflection.Metadata,MetadataRW,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\MetadataRW.cs,MetadataRW,The following statement contains a magic number: this.bigCustomAttributeType = IsBig (3' module.MethodDef' module.MemberRef);  
Magic Number,IKVM.Reflection.Metadata,MetadataRW,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\MetadataRW.cs,MetadataRW,The following statement contains a magic number: this.bigHasConstant = IsBig (2' module.Field' module.Param' module.Property);  
Magic Number,IKVM.Reflection.Metadata,MetadataRW,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\MetadataRW.cs,MetadataRW,The following statement contains a magic number: this.bigHasDeclSecurity = IsBig (2' module.TypeDef' module.MethodDef' module.AssemblyTable);  
Magic Number,IKVM.Reflection.Metadata,MetadataRW,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\MetadataRW.cs,MetadataRW,The following statement contains a magic number: this.bigImplementation = IsBig (2' module.File' module.AssemblyRef' module.ExportedType);  
Magic Number,IKVM.Reflection.Metadata,Table,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,AddRecord,The following statement contains a magic number: if (rowCount == records.Length) {  	T[] newarr = new T[records.Length * 2];  	Array.Copy (records' newarr' records.Length);  	records = newarr;  }  
Magic Number,IKVM.Reflection.Metadata,ModuleTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,GetRowSize,The following statement contains a magic number: return rsc.AddFixed (2).WriteStringIndex ().WriteGuidIndex ().WriteGuidIndex ().WriteGuidIndex ().Value;  
Magic Number,IKVM.Reflection.Metadata,TypeDefTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,GetRowSize,The following statement contains a magic number: return rsc.AddFixed (4).WriteStringIndex ().WriteStringIndex ().WriteTypeDefOrRef ().WriteField ().WriteMethodDef ().Value;  
Magic Number,IKVM.Reflection.Metadata,FieldTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,GetRowSize,The following statement contains a magic number: return rsc.AddFixed (2).WriteStringIndex ().WriteBlobIndex ().Value;  
Magic Number,IKVM.Reflection.Metadata,MethodDefTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,GetRowSize,The following statement contains a magic number: return rsc.AddFixed (8).WriteStringIndex ().WriteBlobIndex ().WriteParam ().Value;  
Magic Number,IKVM.Reflection.Metadata,ParamTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,GetRowSize,The following statement contains a magic number: return rsc.AddFixed (4).WriteStringIndex ().Value;  
Magic Number,IKVM.Reflection.Metadata,InterfaceImplTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: for (int i = 0; i < rowCount; i++) {  	int token = records [i].Interface;  	switch (token >> 24) {  	case 0:  		break;  	case TypeDefTable.Index:  		token = (token & 0xFFFFFF) << 2 | 0;  		break;  	case TypeRefTable.Index:  		token = (token & 0xFFFFFF) << 2 | 1;  		break;  	case TypeSpecTable.Index:  		token = (token & 0xFFFFFF) << 2 | 2;  		break;  	default:  		throw new InvalidOperationException ();  	}  	records [i].Interface = token;  }  
Magic Number,IKVM.Reflection.Metadata,InterfaceImplTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: for (int i = 0; i < rowCount; i++) {  	int token = records [i].Interface;  	switch (token >> 24) {  	case 0:  		break;  	case TypeDefTable.Index:  		token = (token & 0xFFFFFF) << 2 | 0;  		break;  	case TypeRefTable.Index:  		token = (token & 0xFFFFFF) << 2 | 1;  		break;  	case TypeSpecTable.Index:  		token = (token & 0xFFFFFF) << 2 | 2;  		break;  	default:  		throw new InvalidOperationException ();  	}  	records [i].Interface = token;  }  
Magic Number,IKVM.Reflection.Metadata,InterfaceImplTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: for (int i = 0; i < rowCount; i++) {  	int token = records [i].Interface;  	switch (token >> 24) {  	case 0:  		break;  	case TypeDefTable.Index:  		token = (token & 0xFFFFFF) << 2 | 0;  		break;  	case TypeRefTable.Index:  		token = (token & 0xFFFFFF) << 2 | 1;  		break;  	case TypeSpecTable.Index:  		token = (token & 0xFFFFFF) << 2 | 2;  		break;  	default:  		throw new InvalidOperationException ();  	}  	records [i].Interface = token;  }  
Magic Number,IKVM.Reflection.Metadata,InterfaceImplTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: for (int i = 0; i < rowCount; i++) {  	int token = records [i].Interface;  	switch (token >> 24) {  	case 0:  		break;  	case TypeDefTable.Index:  		token = (token & 0xFFFFFF) << 2 | 0;  		break;  	case TypeRefTable.Index:  		token = (token & 0xFFFFFF) << 2 | 1;  		break;  	case TypeSpecTable.Index:  		token = (token & 0xFFFFFF) << 2 | 2;  		break;  	default:  		throw new InvalidOperationException ();  	}  	records [i].Interface = token;  }  
Magic Number,IKVM.Reflection.Metadata,InterfaceImplTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: for (int i = 0; i < rowCount; i++) {  	int token = records [i].Interface;  	switch (token >> 24) {  	case 0:  		break;  	case TypeDefTable.Index:  		token = (token & 0xFFFFFF) << 2 | 0;  		break;  	case TypeRefTable.Index:  		token = (token & 0xFFFFFF) << 2 | 1;  		break;  	case TypeSpecTable.Index:  		token = (token & 0xFFFFFF) << 2 | 2;  		break;  	default:  		throw new InvalidOperationException ();  	}  	records [i].Interface = token;  }  
Magic Number,IKVM.Reflection.Metadata,InterfaceImplTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: switch (token >> 24) {  case 0:  	break;  case TypeDefTable.Index:  	token = (token & 0xFFFFFF) << 2 | 0;  	break;  case TypeRefTable.Index:  	token = (token & 0xFFFFFF) << 2 | 1;  	break;  case TypeSpecTable.Index:  	token = (token & 0xFFFFFF) << 2 | 2;  	break;  default:  	throw new InvalidOperationException ();  }  
Magic Number,IKVM.Reflection.Metadata,InterfaceImplTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: switch (token >> 24) {  case 0:  	break;  case TypeDefTable.Index:  	token = (token & 0xFFFFFF) << 2 | 0;  	break;  case TypeRefTable.Index:  	token = (token & 0xFFFFFF) << 2 | 1;  	break;  case TypeSpecTable.Index:  	token = (token & 0xFFFFFF) << 2 | 2;  	break;  default:  	throw new InvalidOperationException ();  }  
Magic Number,IKVM.Reflection.Metadata,InterfaceImplTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: switch (token >> 24) {  case 0:  	break;  case TypeDefTable.Index:  	token = (token & 0xFFFFFF) << 2 | 0;  	break;  case TypeRefTable.Index:  	token = (token & 0xFFFFFF) << 2 | 1;  	break;  case TypeSpecTable.Index:  	token = (token & 0xFFFFFF) << 2 | 2;  	break;  default:  	throw new InvalidOperationException ();  }  
Magic Number,IKVM.Reflection.Metadata,InterfaceImplTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: switch (token >> 24) {  case 0:  	break;  case TypeDefTable.Index:  	token = (token & 0xFFFFFF) << 2 | 0;  	break;  case TypeRefTable.Index:  	token = (token & 0xFFFFFF) << 2 | 1;  	break;  case TypeSpecTable.Index:  	token = (token & 0xFFFFFF) << 2 | 2;  	break;  default:  	throw new InvalidOperationException ();  }  
Magic Number,IKVM.Reflection.Metadata,InterfaceImplTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: switch (token >> 24) {  case 0:  	break;  case TypeDefTable.Index:  	token = (token & 0xFFFFFF) << 2 | 0;  	break;  case TypeRefTable.Index:  	token = (token & 0xFFFFFF) << 2 | 1;  	break;  case TypeSpecTable.Index:  	token = (token & 0xFFFFFF) << 2 | 2;  	break;  default:  	throw new InvalidOperationException ();  }  
Magic Number,IKVM.Reflection.Metadata,InterfaceImplTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: token = (token & 0xFFFFFF) << 2 | 0;  
Magic Number,IKVM.Reflection.Metadata,InterfaceImplTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: token = (token & 0xFFFFFF) << 2 | 1;  
Magic Number,IKVM.Reflection.Metadata,InterfaceImplTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: token = (token & 0xFFFFFF) << 2 | 2;  
Magic Number,IKVM.Reflection.Metadata,InterfaceImplTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: token = (token & 0xFFFFFF) << 2 | 2;  
Magic Number,IKVM.Reflection.Metadata,ConstantTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,GetRowSize,The following statement contains a magic number: return rsc.AddFixed (2).WriteHasConstant ().WriteBlobIndex ().Value;  
Magic Number,IKVM.Reflection.Metadata,ConstantTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: for (int i = 0; i < rowCount; i++) {  	int token = records [i].Parent;  	moduleBuilder.FixupPseudoToken (ref token);  	// do the HasConstant encoding' so that we can sort the table  	switch (token >> 24) {  	case FieldTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 2 | 0;  		break;  	case ParamTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 2 | 1;  		break;  	case PropertyTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 2 | 2;  		break;  	default:  		throw new InvalidOperationException ();  	}  }  
Magic Number,IKVM.Reflection.Metadata,ConstantTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: for (int i = 0; i < rowCount; i++) {  	int token = records [i].Parent;  	moduleBuilder.FixupPseudoToken (ref token);  	// do the HasConstant encoding' so that we can sort the table  	switch (token >> 24) {  	case FieldTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 2 | 0;  		break;  	case ParamTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 2 | 1;  		break;  	case PropertyTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 2 | 2;  		break;  	default:  		throw new InvalidOperationException ();  	}  }  
Magic Number,IKVM.Reflection.Metadata,ConstantTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: for (int i = 0; i < rowCount; i++) {  	int token = records [i].Parent;  	moduleBuilder.FixupPseudoToken (ref token);  	// do the HasConstant encoding' so that we can sort the table  	switch (token >> 24) {  	case FieldTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 2 | 0;  		break;  	case ParamTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 2 | 1;  		break;  	case PropertyTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 2 | 2;  		break;  	default:  		throw new InvalidOperationException ();  	}  }  
Magic Number,IKVM.Reflection.Metadata,ConstantTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: for (int i = 0; i < rowCount; i++) {  	int token = records [i].Parent;  	moduleBuilder.FixupPseudoToken (ref token);  	// do the HasConstant encoding' so that we can sort the table  	switch (token >> 24) {  	case FieldTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 2 | 0;  		break;  	case ParamTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 2 | 1;  		break;  	case PropertyTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 2 | 2;  		break;  	default:  		throw new InvalidOperationException ();  	}  }  
Magic Number,IKVM.Reflection.Metadata,ConstantTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: for (int i = 0; i < rowCount; i++) {  	int token = records [i].Parent;  	moduleBuilder.FixupPseudoToken (ref token);  	// do the HasConstant encoding' so that we can sort the table  	switch (token >> 24) {  	case FieldTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 2 | 0;  		break;  	case ParamTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 2 | 1;  		break;  	case PropertyTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 2 | 2;  		break;  	default:  		throw new InvalidOperationException ();  	}  }  
Magic Number,IKVM.Reflection.Metadata,ConstantTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: switch (token >> 24) {  case FieldTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 2 | 0;  	break;  case ParamTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 2 | 1;  	break;  case PropertyTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 2 | 2;  	break;  default:  	throw new InvalidOperationException ();  }  
Magic Number,IKVM.Reflection.Metadata,ConstantTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: switch (token >> 24) {  case FieldTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 2 | 0;  	break;  case ParamTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 2 | 1;  	break;  case PropertyTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 2 | 2;  	break;  default:  	throw new InvalidOperationException ();  }  
Magic Number,IKVM.Reflection.Metadata,ConstantTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: switch (token >> 24) {  case FieldTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 2 | 0;  	break;  case ParamTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 2 | 1;  	break;  case PropertyTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 2 | 2;  	break;  default:  	throw new InvalidOperationException ();  }  
Magic Number,IKVM.Reflection.Metadata,ConstantTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: switch (token >> 24) {  case FieldTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 2 | 0;  	break;  case ParamTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 2 | 1;  	break;  case PropertyTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 2 | 2;  	break;  default:  	throw new InvalidOperationException ();  }  
Magic Number,IKVM.Reflection.Metadata,ConstantTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: switch (token >> 24) {  case FieldTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 2 | 0;  	break;  case ParamTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 2 | 1;  	break;  case PropertyTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 2 | 2;  	break;  default:  	throw new InvalidOperationException ();  }  
Magic Number,IKVM.Reflection.Metadata,ConstantTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: records [i].Parent = (token & 0xFFFFFF) << 2 | 0;  
Magic Number,IKVM.Reflection.Metadata,ConstantTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: records [i].Parent = (token & 0xFFFFFF) << 2 | 1;  
Magic Number,IKVM.Reflection.Metadata,ConstantTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: records [i].Parent = (token & 0xFFFFFF) << 2 | 2;  
Magic Number,IKVM.Reflection.Metadata,ConstantTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: records [i].Parent = (token & 0xFFFFFF) << 2 | 2;  
Magic Number,IKVM.Reflection.Metadata,ConstantTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,GetRawConstantValue,The following statement contains a magic number: foreach (int i in Filter (parent)) {  	ByteReader br = module.GetBlob (module.Constant.records [i].Value);  	switch (module.Constant.records [i].Type) {  	// see ModuleBuilder.AddConstant for the encodings  	case Signature.ELEMENT_TYPE_BOOLEAN:  		return br.ReadByte () != 0;  	case Signature.ELEMENT_TYPE_I1:  		return br.ReadSByte ();  	case Signature.ELEMENT_TYPE_I2:  		return br.ReadInt16 ();  	case Signature.ELEMENT_TYPE_I4:  		return br.ReadInt32 ();  	case Signature.ELEMENT_TYPE_I8:  		return br.ReadInt64 ();  	case Signature.ELEMENT_TYPE_U1:  		return br.ReadByte ();  	case Signature.ELEMENT_TYPE_U2:  		return br.ReadUInt16 ();  	case Signature.ELEMENT_TYPE_U4:  		return br.ReadUInt32 ();  	case Signature.ELEMENT_TYPE_U8:  		return br.ReadUInt64 ();  	case Signature.ELEMENT_TYPE_R4:  		return br.ReadSingle ();  	case Signature.ELEMENT_TYPE_R8:  		return br.ReadDouble ();  	case Signature.ELEMENT_TYPE_CHAR:  		return br.ReadChar ();  	case Signature.ELEMENT_TYPE_STRING: {  		char[] chars = new char[br.Length / 2];  		for (int j = 0; j < chars.Length; j++) {  			chars [j] = br.ReadChar ();  		}  		return new String (chars);  	}  	case Signature.ELEMENT_TYPE_CLASS:  		if (br.ReadInt32 () != 0) {  			throw new BadImageFormatException ();  		}  		return null;  	default:  		throw new BadImageFormatException ();  	}  }  
Magic Number,IKVM.Reflection.Metadata,ConstantTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,GetRawConstantValue,The following statement contains a magic number: switch (module.Constant.records [i].Type) {  // see ModuleBuilder.AddConstant for the encodings  case Signature.ELEMENT_TYPE_BOOLEAN:  	return br.ReadByte () != 0;  case Signature.ELEMENT_TYPE_I1:  	return br.ReadSByte ();  case Signature.ELEMENT_TYPE_I2:  	return br.ReadInt16 ();  case Signature.ELEMENT_TYPE_I4:  	return br.ReadInt32 ();  case Signature.ELEMENT_TYPE_I8:  	return br.ReadInt64 ();  case Signature.ELEMENT_TYPE_U1:  	return br.ReadByte ();  case Signature.ELEMENT_TYPE_U2:  	return br.ReadUInt16 ();  case Signature.ELEMENT_TYPE_U4:  	return br.ReadUInt32 ();  case Signature.ELEMENT_TYPE_U8:  	return br.ReadUInt64 ();  case Signature.ELEMENT_TYPE_R4:  	return br.ReadSingle ();  case Signature.ELEMENT_TYPE_R8:  	return br.ReadDouble ();  case Signature.ELEMENT_TYPE_CHAR:  	return br.ReadChar ();  case Signature.ELEMENT_TYPE_STRING: {  	char[] chars = new char[br.Length / 2];  	for (int j = 0; j < chars.Length; j++) {  		chars [j] = br.ReadChar ();  	}  	return new String (chars);  }  case Signature.ELEMENT_TYPE_CLASS:  	if (br.ReadInt32 () != 0) {  		throw new BadImageFormatException ();  	}  	return null;  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Metadata,CustomAttributeTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: for (int i = 0; i < rowCount; i++) {  	moduleBuilder.FixupPseudoToken (ref records [i].Type);  	int token = records [i].Parent;  	moduleBuilder.FixupPseudoToken (ref token);  	// do the HasCustomAttribute encoding' so that we can sort the table  	switch (token >> 24) {  	case MethodDefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 0;  		break;  	case FieldTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 1;  		break;  	case TypeRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 2;  		break;  	case TypeDefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 3;  		break;  	case ParamTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 4;  		break;  	case InterfaceImplTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 5;  		break;  	case MemberRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 6;  		break;  	case ModuleTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 7;  		break;  	// Permission (8) table doesn't exist in the spec  	case PropertyTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 9;  		break;  	case EventTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 10;  		break;  	case StandAloneSigTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 11;  		break;  	case ModuleRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 12;  		break;  	case TypeSpecTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 13;  		break;  	case AssemblyTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 14;  		break;  	case AssemblyRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 15;  		break;  	case FileTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 16;  		break;  	case ExportedTypeTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 17;  		break;  	case ManifestResourceTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 18;  		break;  	case GenericParamTable.Index:  		records [i].Parent = (genericParamFixup [(token & 0xFFFFFF) - 1] + 1) << 5 | 19;  		break;  	default:  		throw new InvalidOperationException ();  	}  }  
Magic Number,IKVM.Reflection.Metadata,CustomAttributeTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: for (int i = 0; i < rowCount; i++) {  	moduleBuilder.FixupPseudoToken (ref records [i].Type);  	int token = records [i].Parent;  	moduleBuilder.FixupPseudoToken (ref token);  	// do the HasCustomAttribute encoding' so that we can sort the table  	switch (token >> 24) {  	case MethodDefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 0;  		break;  	case FieldTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 1;  		break;  	case TypeRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 2;  		break;  	case TypeDefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 3;  		break;  	case ParamTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 4;  		break;  	case InterfaceImplTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 5;  		break;  	case MemberRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 6;  		break;  	case ModuleTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 7;  		break;  	// Permission (8) table doesn't exist in the spec  	case PropertyTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 9;  		break;  	case EventTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 10;  		break;  	case StandAloneSigTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 11;  		break;  	case ModuleRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 12;  		break;  	case TypeSpecTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 13;  		break;  	case AssemblyTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 14;  		break;  	case AssemblyRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 15;  		break;  	case FileTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 16;  		break;  	case ExportedTypeTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 17;  		break;  	case ManifestResourceTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 18;  		break;  	case GenericParamTable.Index:  		records [i].Parent = (genericParamFixup [(token & 0xFFFFFF) - 1] + 1) << 5 | 19;  		break;  	default:  		throw new InvalidOperationException ();  	}  }  
Magic Number,IKVM.Reflection.Metadata,CustomAttributeTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: for (int i = 0; i < rowCount; i++) {  	moduleBuilder.FixupPseudoToken (ref records [i].Type);  	int token = records [i].Parent;  	moduleBuilder.FixupPseudoToken (ref token);  	// do the HasCustomAttribute encoding' so that we can sort the table  	switch (token >> 24) {  	case MethodDefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 0;  		break;  	case FieldTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 1;  		break;  	case TypeRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 2;  		break;  	case TypeDefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 3;  		break;  	case ParamTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 4;  		break;  	case InterfaceImplTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 5;  		break;  	case MemberRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 6;  		break;  	case ModuleTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 7;  		break;  	// Permission (8) table doesn't exist in the spec  	case PropertyTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 9;  		break;  	case EventTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 10;  		break;  	case StandAloneSigTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 11;  		break;  	case ModuleRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 12;  		break;  	case TypeSpecTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 13;  		break;  	case AssemblyTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 14;  		break;  	case AssemblyRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 15;  		break;  	case FileTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 16;  		break;  	case ExportedTypeTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 17;  		break;  	case ManifestResourceTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 18;  		break;  	case GenericParamTable.Index:  		records [i].Parent = (genericParamFixup [(token & 0xFFFFFF) - 1] + 1) << 5 | 19;  		break;  	default:  		throw new InvalidOperationException ();  	}  }  
Magic Number,IKVM.Reflection.Metadata,CustomAttributeTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: for (int i = 0; i < rowCount; i++) {  	moduleBuilder.FixupPseudoToken (ref records [i].Type);  	int token = records [i].Parent;  	moduleBuilder.FixupPseudoToken (ref token);  	// do the HasCustomAttribute encoding' so that we can sort the table  	switch (token >> 24) {  	case MethodDefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 0;  		break;  	case FieldTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 1;  		break;  	case TypeRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 2;  		break;  	case TypeDefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 3;  		break;  	case ParamTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 4;  		break;  	case InterfaceImplTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 5;  		break;  	case MemberRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 6;  		break;  	case ModuleTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 7;  		break;  	// Permission (8) table doesn't exist in the spec  	case PropertyTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 9;  		break;  	case EventTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 10;  		break;  	case StandAloneSigTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 11;  		break;  	case ModuleRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 12;  		break;  	case TypeSpecTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 13;  		break;  	case AssemblyTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 14;  		break;  	case AssemblyRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 15;  		break;  	case FileTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 16;  		break;  	case ExportedTypeTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 17;  		break;  	case ManifestResourceTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 18;  		break;  	case GenericParamTable.Index:  		records [i].Parent = (genericParamFixup [(token & 0xFFFFFF) - 1] + 1) << 5 | 19;  		break;  	default:  		throw new InvalidOperationException ();  	}  }  
Magic Number,IKVM.Reflection.Metadata,CustomAttributeTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: for (int i = 0; i < rowCount; i++) {  	moduleBuilder.FixupPseudoToken (ref records [i].Type);  	int token = records [i].Parent;  	moduleBuilder.FixupPseudoToken (ref token);  	// do the HasCustomAttribute encoding' so that we can sort the table  	switch (token >> 24) {  	case MethodDefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 0;  		break;  	case FieldTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 1;  		break;  	case TypeRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 2;  		break;  	case TypeDefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 3;  		break;  	case ParamTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 4;  		break;  	case InterfaceImplTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 5;  		break;  	case MemberRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 6;  		break;  	case ModuleTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 7;  		break;  	// Permission (8) table doesn't exist in the spec  	case PropertyTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 9;  		break;  	case EventTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 10;  		break;  	case StandAloneSigTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 11;  		break;  	case ModuleRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 12;  		break;  	case TypeSpecTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 13;  		break;  	case AssemblyTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 14;  		break;  	case AssemblyRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 15;  		break;  	case FileTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 16;  		break;  	case ExportedTypeTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 17;  		break;  	case ManifestResourceTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 18;  		break;  	case GenericParamTable.Index:  		records [i].Parent = (genericParamFixup [(token & 0xFFFFFF) - 1] + 1) << 5 | 19;  		break;  	default:  		throw new InvalidOperationException ();  	}  }  
Magic Number,IKVM.Reflection.Metadata,CustomAttributeTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: for (int i = 0; i < rowCount; i++) {  	moduleBuilder.FixupPseudoToken (ref records [i].Type);  	int token = records [i].Parent;  	moduleBuilder.FixupPseudoToken (ref token);  	// do the HasCustomAttribute encoding' so that we can sort the table  	switch (token >> 24) {  	case MethodDefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 0;  		break;  	case FieldTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 1;  		break;  	case TypeRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 2;  		break;  	case TypeDefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 3;  		break;  	case ParamTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 4;  		break;  	case InterfaceImplTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 5;  		break;  	case MemberRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 6;  		break;  	case ModuleTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 7;  		break;  	// Permission (8) table doesn't exist in the spec  	case PropertyTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 9;  		break;  	case EventTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 10;  		break;  	case StandAloneSigTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 11;  		break;  	case ModuleRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 12;  		break;  	case TypeSpecTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 13;  		break;  	case AssemblyTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 14;  		break;  	case AssemblyRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 15;  		break;  	case FileTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 16;  		break;  	case ExportedTypeTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 17;  		break;  	case ManifestResourceTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 18;  		break;  	case GenericParamTable.Index:  		records [i].Parent = (genericParamFixup [(token & 0xFFFFFF) - 1] + 1) << 5 | 19;  		break;  	default:  		throw new InvalidOperationException ();  	}  }  
Magic Number,IKVM.Reflection.Metadata,CustomAttributeTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: for (int i = 0; i < rowCount; i++) {  	moduleBuilder.FixupPseudoToken (ref records [i].Type);  	int token = records [i].Parent;  	moduleBuilder.FixupPseudoToken (ref token);  	// do the HasCustomAttribute encoding' so that we can sort the table  	switch (token >> 24) {  	case MethodDefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 0;  		break;  	case FieldTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 1;  		break;  	case TypeRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 2;  		break;  	case TypeDefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 3;  		break;  	case ParamTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 4;  		break;  	case InterfaceImplTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 5;  		break;  	case MemberRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 6;  		break;  	case ModuleTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 7;  		break;  	// Permission (8) table doesn't exist in the spec  	case PropertyTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 9;  		break;  	case EventTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 10;  		break;  	case StandAloneSigTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 11;  		break;  	case ModuleRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 12;  		break;  	case TypeSpecTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 13;  		break;  	case AssemblyTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 14;  		break;  	case AssemblyRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 15;  		break;  	case FileTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 16;  		break;  	case ExportedTypeTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 17;  		break;  	case ManifestResourceTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 18;  		break;  	case GenericParamTable.Index:  		records [i].Parent = (genericParamFixup [(token & 0xFFFFFF) - 1] + 1) << 5 | 19;  		break;  	default:  		throw new InvalidOperationException ();  	}  }  
Magic Number,IKVM.Reflection.Metadata,CustomAttributeTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: for (int i = 0; i < rowCount; i++) {  	moduleBuilder.FixupPseudoToken (ref records [i].Type);  	int token = records [i].Parent;  	moduleBuilder.FixupPseudoToken (ref token);  	// do the HasCustomAttribute encoding' so that we can sort the table  	switch (token >> 24) {  	case MethodDefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 0;  		break;  	case FieldTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 1;  		break;  	case TypeRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 2;  		break;  	case TypeDefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 3;  		break;  	case ParamTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 4;  		break;  	case InterfaceImplTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 5;  		break;  	case MemberRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 6;  		break;  	case ModuleTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 7;  		break;  	// Permission (8) table doesn't exist in the spec  	case PropertyTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 9;  		break;  	case EventTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 10;  		break;  	case StandAloneSigTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 11;  		break;  	case ModuleRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 12;  		break;  	case TypeSpecTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 13;  		break;  	case AssemblyTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 14;  		break;  	case AssemblyRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 15;  		break;  	case FileTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 16;  		break;  	case ExportedTypeTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 17;  		break;  	case ManifestResourceTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 18;  		break;  	case GenericParamTable.Index:  		records [i].Parent = (genericParamFixup [(token & 0xFFFFFF) - 1] + 1) << 5 | 19;  		break;  	default:  		throw new InvalidOperationException ();  	}  }  
Magic Number,IKVM.Reflection.Metadata,CustomAttributeTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: for (int i = 0; i < rowCount; i++) {  	moduleBuilder.FixupPseudoToken (ref records [i].Type);  	int token = records [i].Parent;  	moduleBuilder.FixupPseudoToken (ref token);  	// do the HasCustomAttribute encoding' so that we can sort the table  	switch (token >> 24) {  	case MethodDefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 0;  		break;  	case FieldTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 1;  		break;  	case TypeRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 2;  		break;  	case TypeDefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 3;  		break;  	case ParamTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 4;  		break;  	case InterfaceImplTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 5;  		break;  	case MemberRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 6;  		break;  	case ModuleTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 7;  		break;  	// Permission (8) table doesn't exist in the spec  	case PropertyTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 9;  		break;  	case EventTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 10;  		break;  	case StandAloneSigTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 11;  		break;  	case ModuleRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 12;  		break;  	case TypeSpecTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 13;  		break;  	case AssemblyTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 14;  		break;  	case AssemblyRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 15;  		break;  	case FileTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 16;  		break;  	case ExportedTypeTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 17;  		break;  	case ManifestResourceTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 18;  		break;  	case GenericParamTable.Index:  		records [i].Parent = (genericParamFixup [(token & 0xFFFFFF) - 1] + 1) << 5 | 19;  		break;  	default:  		throw new InvalidOperationException ();  	}  }  
Magic Number,IKVM.Reflection.Metadata,CustomAttributeTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: for (int i = 0; i < rowCount; i++) {  	moduleBuilder.FixupPseudoToken (ref records [i].Type);  	int token = records [i].Parent;  	moduleBuilder.FixupPseudoToken (ref token);  	// do the HasCustomAttribute encoding' so that we can sort the table  	switch (token >> 24) {  	case MethodDefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 0;  		break;  	case FieldTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 1;  		break;  	case TypeRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 2;  		break;  	case TypeDefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 3;  		break;  	case ParamTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 4;  		break;  	case InterfaceImplTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 5;  		break;  	case MemberRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 6;  		break;  	case ModuleTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 7;  		break;  	// Permission (8) table doesn't exist in the spec  	case PropertyTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 9;  		break;  	case EventTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 10;  		break;  	case StandAloneSigTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 11;  		break;  	case ModuleRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 12;  		break;  	case TypeSpecTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 13;  		break;  	case AssemblyTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 14;  		break;  	case AssemblyRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 15;  		break;  	case FileTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 16;  		break;  	case ExportedTypeTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 17;  		break;  	case ManifestResourceTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 18;  		break;  	case GenericParamTable.Index:  		records [i].Parent = (genericParamFixup [(token & 0xFFFFFF) - 1] + 1) << 5 | 19;  		break;  	default:  		throw new InvalidOperationException ();  	}  }  
Magic Number,IKVM.Reflection.Metadata,CustomAttributeTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: for (int i = 0; i < rowCount; i++) {  	moduleBuilder.FixupPseudoToken (ref records [i].Type);  	int token = records [i].Parent;  	moduleBuilder.FixupPseudoToken (ref token);  	// do the HasCustomAttribute encoding' so that we can sort the table  	switch (token >> 24) {  	case MethodDefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 0;  		break;  	case FieldTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 1;  		break;  	case TypeRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 2;  		break;  	case TypeDefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 3;  		break;  	case ParamTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 4;  		break;  	case InterfaceImplTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 5;  		break;  	case MemberRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 6;  		break;  	case ModuleTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 7;  		break;  	// Permission (8) table doesn't exist in the spec  	case PropertyTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 9;  		break;  	case EventTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 10;  		break;  	case StandAloneSigTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 11;  		break;  	case ModuleRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 12;  		break;  	case TypeSpecTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 13;  		break;  	case AssemblyTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 14;  		break;  	case AssemblyRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 15;  		break;  	case FileTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 16;  		break;  	case ExportedTypeTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 17;  		break;  	case ManifestResourceTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 18;  		break;  	case GenericParamTable.Index:  		records [i].Parent = (genericParamFixup [(token & 0xFFFFFF) - 1] + 1) << 5 | 19;  		break;  	default:  		throw new InvalidOperationException ();  	}  }  
Magic Number,IKVM.Reflection.Metadata,CustomAttributeTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: for (int i = 0; i < rowCount; i++) {  	moduleBuilder.FixupPseudoToken (ref records [i].Type);  	int token = records [i].Parent;  	moduleBuilder.FixupPseudoToken (ref token);  	// do the HasCustomAttribute encoding' so that we can sort the table  	switch (token >> 24) {  	case MethodDefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 0;  		break;  	case FieldTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 1;  		break;  	case TypeRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 2;  		break;  	case TypeDefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 3;  		break;  	case ParamTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 4;  		break;  	case InterfaceImplTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 5;  		break;  	case MemberRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 6;  		break;  	case ModuleTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 7;  		break;  	// Permission (8) table doesn't exist in the spec  	case PropertyTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 9;  		break;  	case EventTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 10;  		break;  	case StandAloneSigTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 11;  		break;  	case ModuleRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 12;  		break;  	case TypeSpecTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 13;  		break;  	case AssemblyTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 14;  		break;  	case AssemblyRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 15;  		break;  	case FileTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 16;  		break;  	case ExportedTypeTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 17;  		break;  	case ManifestResourceTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 18;  		break;  	case GenericParamTable.Index:  		records [i].Parent = (genericParamFixup [(token & 0xFFFFFF) - 1] + 1) << 5 | 19;  		break;  	default:  		throw new InvalidOperationException ();  	}  }  
Magic Number,IKVM.Reflection.Metadata,CustomAttributeTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: for (int i = 0; i < rowCount; i++) {  	moduleBuilder.FixupPseudoToken (ref records [i].Type);  	int token = records [i].Parent;  	moduleBuilder.FixupPseudoToken (ref token);  	// do the HasCustomAttribute encoding' so that we can sort the table  	switch (token >> 24) {  	case MethodDefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 0;  		break;  	case FieldTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 1;  		break;  	case TypeRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 2;  		break;  	case TypeDefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 3;  		break;  	case ParamTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 4;  		break;  	case InterfaceImplTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 5;  		break;  	case MemberRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 6;  		break;  	case ModuleTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 7;  		break;  	// Permission (8) table doesn't exist in the spec  	case PropertyTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 9;  		break;  	case EventTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 10;  		break;  	case StandAloneSigTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 11;  		break;  	case ModuleRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 12;  		break;  	case TypeSpecTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 13;  		break;  	case AssemblyTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 14;  		break;  	case AssemblyRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 15;  		break;  	case FileTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 16;  		break;  	case ExportedTypeTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 17;  		break;  	case ManifestResourceTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 18;  		break;  	case GenericParamTable.Index:  		records [i].Parent = (genericParamFixup [(token & 0xFFFFFF) - 1] + 1) << 5 | 19;  		break;  	default:  		throw new InvalidOperationException ();  	}  }  
Magic Number,IKVM.Reflection.Metadata,CustomAttributeTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: for (int i = 0; i < rowCount; i++) {  	moduleBuilder.FixupPseudoToken (ref records [i].Type);  	int token = records [i].Parent;  	moduleBuilder.FixupPseudoToken (ref token);  	// do the HasCustomAttribute encoding' so that we can sort the table  	switch (token >> 24) {  	case MethodDefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 0;  		break;  	case FieldTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 1;  		break;  	case TypeRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 2;  		break;  	case TypeDefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 3;  		break;  	case ParamTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 4;  		break;  	case InterfaceImplTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 5;  		break;  	case MemberRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 6;  		break;  	case ModuleTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 7;  		break;  	// Permission (8) table doesn't exist in the spec  	case PropertyTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 9;  		break;  	case EventTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 10;  		break;  	case StandAloneSigTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 11;  		break;  	case ModuleRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 12;  		break;  	case TypeSpecTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 13;  		break;  	case AssemblyTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 14;  		break;  	case AssemblyRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 15;  		break;  	case FileTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 16;  		break;  	case ExportedTypeTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 17;  		break;  	case ManifestResourceTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 18;  		break;  	case GenericParamTable.Index:  		records [i].Parent = (genericParamFixup [(token & 0xFFFFFF) - 1] + 1) << 5 | 19;  		break;  	default:  		throw new InvalidOperationException ();  	}  }  
Magic Number,IKVM.Reflection.Metadata,CustomAttributeTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: for (int i = 0; i < rowCount; i++) {  	moduleBuilder.FixupPseudoToken (ref records [i].Type);  	int token = records [i].Parent;  	moduleBuilder.FixupPseudoToken (ref token);  	// do the HasCustomAttribute encoding' so that we can sort the table  	switch (token >> 24) {  	case MethodDefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 0;  		break;  	case FieldTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 1;  		break;  	case TypeRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 2;  		break;  	case TypeDefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 3;  		break;  	case ParamTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 4;  		break;  	case InterfaceImplTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 5;  		break;  	case MemberRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 6;  		break;  	case ModuleTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 7;  		break;  	// Permission (8) table doesn't exist in the spec  	case PropertyTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 9;  		break;  	case EventTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 10;  		break;  	case StandAloneSigTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 11;  		break;  	case ModuleRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 12;  		break;  	case TypeSpecTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 13;  		break;  	case AssemblyTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 14;  		break;  	case AssemblyRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 15;  		break;  	case FileTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 16;  		break;  	case ExportedTypeTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 17;  		break;  	case ManifestResourceTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 18;  		break;  	case GenericParamTable.Index:  		records [i].Parent = (genericParamFixup [(token & 0xFFFFFF) - 1] + 1) << 5 | 19;  		break;  	default:  		throw new InvalidOperationException ();  	}  }  
Magic Number,IKVM.Reflection.Metadata,CustomAttributeTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: for (int i = 0; i < rowCount; i++) {  	moduleBuilder.FixupPseudoToken (ref records [i].Type);  	int token = records [i].Parent;  	moduleBuilder.FixupPseudoToken (ref token);  	// do the HasCustomAttribute encoding' so that we can sort the table  	switch (token >> 24) {  	case MethodDefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 0;  		break;  	case FieldTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 1;  		break;  	case TypeRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 2;  		break;  	case TypeDefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 3;  		break;  	case ParamTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 4;  		break;  	case InterfaceImplTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 5;  		break;  	case MemberRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 6;  		break;  	case ModuleTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 7;  		break;  	// Permission (8) table doesn't exist in the spec  	case PropertyTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 9;  		break;  	case EventTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 10;  		break;  	case StandAloneSigTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 11;  		break;  	case ModuleRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 12;  		break;  	case TypeSpecTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 13;  		break;  	case AssemblyTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 14;  		break;  	case AssemblyRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 15;  		break;  	case FileTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 16;  		break;  	case ExportedTypeTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 17;  		break;  	case ManifestResourceTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 18;  		break;  	case GenericParamTable.Index:  		records [i].Parent = (genericParamFixup [(token & 0xFFFFFF) - 1] + 1) << 5 | 19;  		break;  	default:  		throw new InvalidOperationException ();  	}  }  
Magic Number,IKVM.Reflection.Metadata,CustomAttributeTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: for (int i = 0; i < rowCount; i++) {  	moduleBuilder.FixupPseudoToken (ref records [i].Type);  	int token = records [i].Parent;  	moduleBuilder.FixupPseudoToken (ref token);  	// do the HasCustomAttribute encoding' so that we can sort the table  	switch (token >> 24) {  	case MethodDefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 0;  		break;  	case FieldTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 1;  		break;  	case TypeRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 2;  		break;  	case TypeDefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 3;  		break;  	case ParamTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 4;  		break;  	case InterfaceImplTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 5;  		break;  	case MemberRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 6;  		break;  	case ModuleTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 7;  		break;  	// Permission (8) table doesn't exist in the spec  	case PropertyTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 9;  		break;  	case EventTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 10;  		break;  	case StandAloneSigTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 11;  		break;  	case ModuleRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 12;  		break;  	case TypeSpecTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 13;  		break;  	case AssemblyTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 14;  		break;  	case AssemblyRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 15;  		break;  	case FileTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 16;  		break;  	case ExportedTypeTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 17;  		break;  	case ManifestResourceTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 18;  		break;  	case GenericParamTable.Index:  		records [i].Parent = (genericParamFixup [(token & 0xFFFFFF) - 1] + 1) << 5 | 19;  		break;  	default:  		throw new InvalidOperationException ();  	}  }  
Magic Number,IKVM.Reflection.Metadata,CustomAttributeTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: for (int i = 0; i < rowCount; i++) {  	moduleBuilder.FixupPseudoToken (ref records [i].Type);  	int token = records [i].Parent;  	moduleBuilder.FixupPseudoToken (ref token);  	// do the HasCustomAttribute encoding' so that we can sort the table  	switch (token >> 24) {  	case MethodDefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 0;  		break;  	case FieldTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 1;  		break;  	case TypeRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 2;  		break;  	case TypeDefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 3;  		break;  	case ParamTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 4;  		break;  	case InterfaceImplTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 5;  		break;  	case MemberRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 6;  		break;  	case ModuleTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 7;  		break;  	// Permission (8) table doesn't exist in the spec  	case PropertyTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 9;  		break;  	case EventTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 10;  		break;  	case StandAloneSigTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 11;  		break;  	case ModuleRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 12;  		break;  	case TypeSpecTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 13;  		break;  	case AssemblyTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 14;  		break;  	case AssemblyRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 15;  		break;  	case FileTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 16;  		break;  	case ExportedTypeTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 17;  		break;  	case ManifestResourceTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 18;  		break;  	case GenericParamTable.Index:  		records [i].Parent = (genericParamFixup [(token & 0xFFFFFF) - 1] + 1) << 5 | 19;  		break;  	default:  		throw new InvalidOperationException ();  	}  }  
Magic Number,IKVM.Reflection.Metadata,CustomAttributeTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: for (int i = 0; i < rowCount; i++) {  	moduleBuilder.FixupPseudoToken (ref records [i].Type);  	int token = records [i].Parent;  	moduleBuilder.FixupPseudoToken (ref token);  	// do the HasCustomAttribute encoding' so that we can sort the table  	switch (token >> 24) {  	case MethodDefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 0;  		break;  	case FieldTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 1;  		break;  	case TypeRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 2;  		break;  	case TypeDefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 3;  		break;  	case ParamTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 4;  		break;  	case InterfaceImplTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 5;  		break;  	case MemberRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 6;  		break;  	case ModuleTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 7;  		break;  	// Permission (8) table doesn't exist in the spec  	case PropertyTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 9;  		break;  	case EventTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 10;  		break;  	case StandAloneSigTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 11;  		break;  	case ModuleRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 12;  		break;  	case TypeSpecTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 13;  		break;  	case AssemblyTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 14;  		break;  	case AssemblyRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 15;  		break;  	case FileTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 16;  		break;  	case ExportedTypeTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 17;  		break;  	case ManifestResourceTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 18;  		break;  	case GenericParamTable.Index:  		records [i].Parent = (genericParamFixup [(token & 0xFFFFFF) - 1] + 1) << 5 | 19;  		break;  	default:  		throw new InvalidOperationException ();  	}  }  
Magic Number,IKVM.Reflection.Metadata,CustomAttributeTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: for (int i = 0; i < rowCount; i++) {  	moduleBuilder.FixupPseudoToken (ref records [i].Type);  	int token = records [i].Parent;  	moduleBuilder.FixupPseudoToken (ref token);  	// do the HasCustomAttribute encoding' so that we can sort the table  	switch (token >> 24) {  	case MethodDefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 0;  		break;  	case FieldTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 1;  		break;  	case TypeRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 2;  		break;  	case TypeDefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 3;  		break;  	case ParamTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 4;  		break;  	case InterfaceImplTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 5;  		break;  	case MemberRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 6;  		break;  	case ModuleTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 7;  		break;  	// Permission (8) table doesn't exist in the spec  	case PropertyTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 9;  		break;  	case EventTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 10;  		break;  	case StandAloneSigTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 11;  		break;  	case ModuleRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 12;  		break;  	case TypeSpecTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 13;  		break;  	case AssemblyTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 14;  		break;  	case AssemblyRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 15;  		break;  	case FileTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 16;  		break;  	case ExportedTypeTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 17;  		break;  	case ManifestResourceTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 18;  		break;  	case GenericParamTable.Index:  		records [i].Parent = (genericParamFixup [(token & 0xFFFFFF) - 1] + 1) << 5 | 19;  		break;  	default:  		throw new InvalidOperationException ();  	}  }  
Magic Number,IKVM.Reflection.Metadata,CustomAttributeTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: for (int i = 0; i < rowCount; i++) {  	moduleBuilder.FixupPseudoToken (ref records [i].Type);  	int token = records [i].Parent;  	moduleBuilder.FixupPseudoToken (ref token);  	// do the HasCustomAttribute encoding' so that we can sort the table  	switch (token >> 24) {  	case MethodDefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 0;  		break;  	case FieldTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 1;  		break;  	case TypeRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 2;  		break;  	case TypeDefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 3;  		break;  	case ParamTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 4;  		break;  	case InterfaceImplTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 5;  		break;  	case MemberRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 6;  		break;  	case ModuleTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 7;  		break;  	// Permission (8) table doesn't exist in the spec  	case PropertyTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 9;  		break;  	case EventTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 10;  		break;  	case StandAloneSigTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 11;  		break;  	case ModuleRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 12;  		break;  	case TypeSpecTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 13;  		break;  	case AssemblyTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 14;  		break;  	case AssemblyRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 15;  		break;  	case FileTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 16;  		break;  	case ExportedTypeTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 17;  		break;  	case ManifestResourceTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 18;  		break;  	case GenericParamTable.Index:  		records [i].Parent = (genericParamFixup [(token & 0xFFFFFF) - 1] + 1) << 5 | 19;  		break;  	default:  		throw new InvalidOperationException ();  	}  }  
Magic Number,IKVM.Reflection.Metadata,CustomAttributeTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: for (int i = 0; i < rowCount; i++) {  	moduleBuilder.FixupPseudoToken (ref records [i].Type);  	int token = records [i].Parent;  	moduleBuilder.FixupPseudoToken (ref token);  	// do the HasCustomAttribute encoding' so that we can sort the table  	switch (token >> 24) {  	case MethodDefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 0;  		break;  	case FieldTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 1;  		break;  	case TypeRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 2;  		break;  	case TypeDefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 3;  		break;  	case ParamTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 4;  		break;  	case InterfaceImplTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 5;  		break;  	case MemberRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 6;  		break;  	case ModuleTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 7;  		break;  	// Permission (8) table doesn't exist in the spec  	case PropertyTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 9;  		break;  	case EventTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 10;  		break;  	case StandAloneSigTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 11;  		break;  	case ModuleRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 12;  		break;  	case TypeSpecTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 13;  		break;  	case AssemblyTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 14;  		break;  	case AssemblyRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 15;  		break;  	case FileTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 16;  		break;  	case ExportedTypeTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 17;  		break;  	case ManifestResourceTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 18;  		break;  	case GenericParamTable.Index:  		records [i].Parent = (genericParamFixup [(token & 0xFFFFFF) - 1] + 1) << 5 | 19;  		break;  	default:  		throw new InvalidOperationException ();  	}  }  
Magic Number,IKVM.Reflection.Metadata,CustomAttributeTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: for (int i = 0; i < rowCount; i++) {  	moduleBuilder.FixupPseudoToken (ref records [i].Type);  	int token = records [i].Parent;  	moduleBuilder.FixupPseudoToken (ref token);  	// do the HasCustomAttribute encoding' so that we can sort the table  	switch (token >> 24) {  	case MethodDefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 0;  		break;  	case FieldTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 1;  		break;  	case TypeRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 2;  		break;  	case TypeDefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 3;  		break;  	case ParamTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 4;  		break;  	case InterfaceImplTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 5;  		break;  	case MemberRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 6;  		break;  	case ModuleTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 7;  		break;  	// Permission (8) table doesn't exist in the spec  	case PropertyTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 9;  		break;  	case EventTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 10;  		break;  	case StandAloneSigTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 11;  		break;  	case ModuleRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 12;  		break;  	case TypeSpecTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 13;  		break;  	case AssemblyTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 14;  		break;  	case AssemblyRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 15;  		break;  	case FileTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 16;  		break;  	case ExportedTypeTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 17;  		break;  	case ManifestResourceTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 18;  		break;  	case GenericParamTable.Index:  		records [i].Parent = (genericParamFixup [(token & 0xFFFFFF) - 1] + 1) << 5 | 19;  		break;  	default:  		throw new InvalidOperationException ();  	}  }  
Magic Number,IKVM.Reflection.Metadata,CustomAttributeTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: for (int i = 0; i < rowCount; i++) {  	moduleBuilder.FixupPseudoToken (ref records [i].Type);  	int token = records [i].Parent;  	moduleBuilder.FixupPseudoToken (ref token);  	// do the HasCustomAttribute encoding' so that we can sort the table  	switch (token >> 24) {  	case MethodDefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 0;  		break;  	case FieldTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 1;  		break;  	case TypeRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 2;  		break;  	case TypeDefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 3;  		break;  	case ParamTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 4;  		break;  	case InterfaceImplTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 5;  		break;  	case MemberRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 6;  		break;  	case ModuleTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 7;  		break;  	// Permission (8) table doesn't exist in the spec  	case PropertyTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 9;  		break;  	case EventTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 10;  		break;  	case StandAloneSigTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 11;  		break;  	case ModuleRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 12;  		break;  	case TypeSpecTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 13;  		break;  	case AssemblyTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 14;  		break;  	case AssemblyRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 15;  		break;  	case FileTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 16;  		break;  	case ExportedTypeTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 17;  		break;  	case ManifestResourceTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 18;  		break;  	case GenericParamTable.Index:  		records [i].Parent = (genericParamFixup [(token & 0xFFFFFF) - 1] + 1) << 5 | 19;  		break;  	default:  		throw new InvalidOperationException ();  	}  }  
Magic Number,IKVM.Reflection.Metadata,CustomAttributeTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: for (int i = 0; i < rowCount; i++) {  	moduleBuilder.FixupPseudoToken (ref records [i].Type);  	int token = records [i].Parent;  	moduleBuilder.FixupPseudoToken (ref token);  	// do the HasCustomAttribute encoding' so that we can sort the table  	switch (token >> 24) {  	case MethodDefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 0;  		break;  	case FieldTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 1;  		break;  	case TypeRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 2;  		break;  	case TypeDefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 3;  		break;  	case ParamTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 4;  		break;  	case InterfaceImplTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 5;  		break;  	case MemberRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 6;  		break;  	case ModuleTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 7;  		break;  	// Permission (8) table doesn't exist in the spec  	case PropertyTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 9;  		break;  	case EventTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 10;  		break;  	case StandAloneSigTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 11;  		break;  	case ModuleRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 12;  		break;  	case TypeSpecTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 13;  		break;  	case AssemblyTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 14;  		break;  	case AssemblyRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 15;  		break;  	case FileTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 16;  		break;  	case ExportedTypeTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 17;  		break;  	case ManifestResourceTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 18;  		break;  	case GenericParamTable.Index:  		records [i].Parent = (genericParamFixup [(token & 0xFFFFFF) - 1] + 1) << 5 | 19;  		break;  	default:  		throw new InvalidOperationException ();  	}  }  
Magic Number,IKVM.Reflection.Metadata,CustomAttributeTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: for (int i = 0; i < rowCount; i++) {  	moduleBuilder.FixupPseudoToken (ref records [i].Type);  	int token = records [i].Parent;  	moduleBuilder.FixupPseudoToken (ref token);  	// do the HasCustomAttribute encoding' so that we can sort the table  	switch (token >> 24) {  	case MethodDefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 0;  		break;  	case FieldTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 1;  		break;  	case TypeRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 2;  		break;  	case TypeDefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 3;  		break;  	case ParamTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 4;  		break;  	case InterfaceImplTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 5;  		break;  	case MemberRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 6;  		break;  	case ModuleTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 7;  		break;  	// Permission (8) table doesn't exist in the spec  	case PropertyTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 9;  		break;  	case EventTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 10;  		break;  	case StandAloneSigTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 11;  		break;  	case ModuleRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 12;  		break;  	case TypeSpecTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 13;  		break;  	case AssemblyTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 14;  		break;  	case AssemblyRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 15;  		break;  	case FileTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 16;  		break;  	case ExportedTypeTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 17;  		break;  	case ManifestResourceTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 18;  		break;  	case GenericParamTable.Index:  		records [i].Parent = (genericParamFixup [(token & 0xFFFFFF) - 1] + 1) << 5 | 19;  		break;  	default:  		throw new InvalidOperationException ();  	}  }  
Magic Number,IKVM.Reflection.Metadata,CustomAttributeTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: for (int i = 0; i < rowCount; i++) {  	moduleBuilder.FixupPseudoToken (ref records [i].Type);  	int token = records [i].Parent;  	moduleBuilder.FixupPseudoToken (ref token);  	// do the HasCustomAttribute encoding' so that we can sort the table  	switch (token >> 24) {  	case MethodDefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 0;  		break;  	case FieldTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 1;  		break;  	case TypeRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 2;  		break;  	case TypeDefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 3;  		break;  	case ParamTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 4;  		break;  	case InterfaceImplTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 5;  		break;  	case MemberRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 6;  		break;  	case ModuleTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 7;  		break;  	// Permission (8) table doesn't exist in the spec  	case PropertyTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 9;  		break;  	case EventTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 10;  		break;  	case StandAloneSigTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 11;  		break;  	case ModuleRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 12;  		break;  	case TypeSpecTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 13;  		break;  	case AssemblyTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 14;  		break;  	case AssemblyRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 15;  		break;  	case FileTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 16;  		break;  	case ExportedTypeTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 17;  		break;  	case ManifestResourceTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 18;  		break;  	case GenericParamTable.Index:  		records [i].Parent = (genericParamFixup [(token & 0xFFFFFF) - 1] + 1) << 5 | 19;  		break;  	default:  		throw new InvalidOperationException ();  	}  }  
Magic Number,IKVM.Reflection.Metadata,CustomAttributeTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: for (int i = 0; i < rowCount; i++) {  	moduleBuilder.FixupPseudoToken (ref records [i].Type);  	int token = records [i].Parent;  	moduleBuilder.FixupPseudoToken (ref token);  	// do the HasCustomAttribute encoding' so that we can sort the table  	switch (token >> 24) {  	case MethodDefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 0;  		break;  	case FieldTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 1;  		break;  	case TypeRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 2;  		break;  	case TypeDefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 3;  		break;  	case ParamTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 4;  		break;  	case InterfaceImplTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 5;  		break;  	case MemberRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 6;  		break;  	case ModuleTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 7;  		break;  	// Permission (8) table doesn't exist in the spec  	case PropertyTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 9;  		break;  	case EventTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 10;  		break;  	case StandAloneSigTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 11;  		break;  	case ModuleRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 12;  		break;  	case TypeSpecTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 13;  		break;  	case AssemblyTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 14;  		break;  	case AssemblyRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 15;  		break;  	case FileTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 16;  		break;  	case ExportedTypeTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 17;  		break;  	case ManifestResourceTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 18;  		break;  	case GenericParamTable.Index:  		records [i].Parent = (genericParamFixup [(token & 0xFFFFFF) - 1] + 1) << 5 | 19;  		break;  	default:  		throw new InvalidOperationException ();  	}  }  
Magic Number,IKVM.Reflection.Metadata,CustomAttributeTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: for (int i = 0; i < rowCount; i++) {  	moduleBuilder.FixupPseudoToken (ref records [i].Type);  	int token = records [i].Parent;  	moduleBuilder.FixupPseudoToken (ref token);  	// do the HasCustomAttribute encoding' so that we can sort the table  	switch (token >> 24) {  	case MethodDefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 0;  		break;  	case FieldTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 1;  		break;  	case TypeRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 2;  		break;  	case TypeDefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 3;  		break;  	case ParamTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 4;  		break;  	case InterfaceImplTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 5;  		break;  	case MemberRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 6;  		break;  	case ModuleTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 7;  		break;  	// Permission (8) table doesn't exist in the spec  	case PropertyTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 9;  		break;  	case EventTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 10;  		break;  	case StandAloneSigTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 11;  		break;  	case ModuleRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 12;  		break;  	case TypeSpecTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 13;  		break;  	case AssemblyTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 14;  		break;  	case AssemblyRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 15;  		break;  	case FileTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 16;  		break;  	case ExportedTypeTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 17;  		break;  	case ManifestResourceTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 18;  		break;  	case GenericParamTable.Index:  		records [i].Parent = (genericParamFixup [(token & 0xFFFFFF) - 1] + 1) << 5 | 19;  		break;  	default:  		throw new InvalidOperationException ();  	}  }  
Magic Number,IKVM.Reflection.Metadata,CustomAttributeTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: for (int i = 0; i < rowCount; i++) {  	moduleBuilder.FixupPseudoToken (ref records [i].Type);  	int token = records [i].Parent;  	moduleBuilder.FixupPseudoToken (ref token);  	// do the HasCustomAttribute encoding' so that we can sort the table  	switch (token >> 24) {  	case MethodDefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 0;  		break;  	case FieldTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 1;  		break;  	case TypeRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 2;  		break;  	case TypeDefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 3;  		break;  	case ParamTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 4;  		break;  	case InterfaceImplTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 5;  		break;  	case MemberRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 6;  		break;  	case ModuleTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 7;  		break;  	// Permission (8) table doesn't exist in the spec  	case PropertyTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 9;  		break;  	case EventTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 10;  		break;  	case StandAloneSigTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 11;  		break;  	case ModuleRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 12;  		break;  	case TypeSpecTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 13;  		break;  	case AssemblyTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 14;  		break;  	case AssemblyRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 15;  		break;  	case FileTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 16;  		break;  	case ExportedTypeTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 17;  		break;  	case ManifestResourceTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 18;  		break;  	case GenericParamTable.Index:  		records [i].Parent = (genericParamFixup [(token & 0xFFFFFF) - 1] + 1) << 5 | 19;  		break;  	default:  		throw new InvalidOperationException ();  	}  }  
Magic Number,IKVM.Reflection.Metadata,CustomAttributeTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: for (int i = 0; i < rowCount; i++) {  	moduleBuilder.FixupPseudoToken (ref records [i].Type);  	int token = records [i].Parent;  	moduleBuilder.FixupPseudoToken (ref token);  	// do the HasCustomAttribute encoding' so that we can sort the table  	switch (token >> 24) {  	case MethodDefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 0;  		break;  	case FieldTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 1;  		break;  	case TypeRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 2;  		break;  	case TypeDefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 3;  		break;  	case ParamTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 4;  		break;  	case InterfaceImplTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 5;  		break;  	case MemberRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 6;  		break;  	case ModuleTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 7;  		break;  	// Permission (8) table doesn't exist in the spec  	case PropertyTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 9;  		break;  	case EventTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 10;  		break;  	case StandAloneSigTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 11;  		break;  	case ModuleRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 12;  		break;  	case TypeSpecTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 13;  		break;  	case AssemblyTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 14;  		break;  	case AssemblyRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 15;  		break;  	case FileTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 16;  		break;  	case ExportedTypeTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 17;  		break;  	case ManifestResourceTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 18;  		break;  	case GenericParamTable.Index:  		records [i].Parent = (genericParamFixup [(token & 0xFFFFFF) - 1] + 1) << 5 | 19;  		break;  	default:  		throw new InvalidOperationException ();  	}  }  
Magic Number,IKVM.Reflection.Metadata,CustomAttributeTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: for (int i = 0; i < rowCount; i++) {  	moduleBuilder.FixupPseudoToken (ref records [i].Type);  	int token = records [i].Parent;  	moduleBuilder.FixupPseudoToken (ref token);  	// do the HasCustomAttribute encoding' so that we can sort the table  	switch (token >> 24) {  	case MethodDefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 0;  		break;  	case FieldTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 1;  		break;  	case TypeRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 2;  		break;  	case TypeDefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 3;  		break;  	case ParamTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 4;  		break;  	case InterfaceImplTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 5;  		break;  	case MemberRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 6;  		break;  	case ModuleTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 7;  		break;  	// Permission (8) table doesn't exist in the spec  	case PropertyTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 9;  		break;  	case EventTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 10;  		break;  	case StandAloneSigTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 11;  		break;  	case ModuleRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 12;  		break;  	case TypeSpecTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 13;  		break;  	case AssemblyTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 14;  		break;  	case AssemblyRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 15;  		break;  	case FileTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 16;  		break;  	case ExportedTypeTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 17;  		break;  	case ManifestResourceTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 18;  		break;  	case GenericParamTable.Index:  		records [i].Parent = (genericParamFixup [(token & 0xFFFFFF) - 1] + 1) << 5 | 19;  		break;  	default:  		throw new InvalidOperationException ();  	}  }  
Magic Number,IKVM.Reflection.Metadata,CustomAttributeTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: for (int i = 0; i < rowCount; i++) {  	moduleBuilder.FixupPseudoToken (ref records [i].Type);  	int token = records [i].Parent;  	moduleBuilder.FixupPseudoToken (ref token);  	// do the HasCustomAttribute encoding' so that we can sort the table  	switch (token >> 24) {  	case MethodDefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 0;  		break;  	case FieldTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 1;  		break;  	case TypeRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 2;  		break;  	case TypeDefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 3;  		break;  	case ParamTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 4;  		break;  	case InterfaceImplTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 5;  		break;  	case MemberRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 6;  		break;  	case ModuleTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 7;  		break;  	// Permission (8) table doesn't exist in the spec  	case PropertyTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 9;  		break;  	case EventTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 10;  		break;  	case StandAloneSigTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 11;  		break;  	case ModuleRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 12;  		break;  	case TypeSpecTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 13;  		break;  	case AssemblyTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 14;  		break;  	case AssemblyRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 15;  		break;  	case FileTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 16;  		break;  	case ExportedTypeTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 17;  		break;  	case ManifestResourceTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 18;  		break;  	case GenericParamTable.Index:  		records [i].Parent = (genericParamFixup [(token & 0xFFFFFF) - 1] + 1) << 5 | 19;  		break;  	default:  		throw new InvalidOperationException ();  	}  }  
Magic Number,IKVM.Reflection.Metadata,CustomAttributeTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: for (int i = 0; i < rowCount; i++) {  	moduleBuilder.FixupPseudoToken (ref records [i].Type);  	int token = records [i].Parent;  	moduleBuilder.FixupPseudoToken (ref token);  	// do the HasCustomAttribute encoding' so that we can sort the table  	switch (token >> 24) {  	case MethodDefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 0;  		break;  	case FieldTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 1;  		break;  	case TypeRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 2;  		break;  	case TypeDefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 3;  		break;  	case ParamTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 4;  		break;  	case InterfaceImplTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 5;  		break;  	case MemberRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 6;  		break;  	case ModuleTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 7;  		break;  	// Permission (8) table doesn't exist in the spec  	case PropertyTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 9;  		break;  	case EventTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 10;  		break;  	case StandAloneSigTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 11;  		break;  	case ModuleRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 12;  		break;  	case TypeSpecTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 13;  		break;  	case AssemblyTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 14;  		break;  	case AssemblyRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 15;  		break;  	case FileTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 16;  		break;  	case ExportedTypeTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 17;  		break;  	case ManifestResourceTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 18;  		break;  	case GenericParamTable.Index:  		records [i].Parent = (genericParamFixup [(token & 0xFFFFFF) - 1] + 1) << 5 | 19;  		break;  	default:  		throw new InvalidOperationException ();  	}  }  
Magic Number,IKVM.Reflection.Metadata,CustomAttributeTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: for (int i = 0; i < rowCount; i++) {  	moduleBuilder.FixupPseudoToken (ref records [i].Type);  	int token = records [i].Parent;  	moduleBuilder.FixupPseudoToken (ref token);  	// do the HasCustomAttribute encoding' so that we can sort the table  	switch (token >> 24) {  	case MethodDefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 0;  		break;  	case FieldTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 1;  		break;  	case TypeRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 2;  		break;  	case TypeDefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 3;  		break;  	case ParamTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 4;  		break;  	case InterfaceImplTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 5;  		break;  	case MemberRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 6;  		break;  	case ModuleTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 7;  		break;  	// Permission (8) table doesn't exist in the spec  	case PropertyTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 9;  		break;  	case EventTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 10;  		break;  	case StandAloneSigTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 11;  		break;  	case ModuleRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 12;  		break;  	case TypeSpecTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 13;  		break;  	case AssemblyTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 14;  		break;  	case AssemblyRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 15;  		break;  	case FileTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 16;  		break;  	case ExportedTypeTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 17;  		break;  	case ManifestResourceTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 18;  		break;  	case GenericParamTable.Index:  		records [i].Parent = (genericParamFixup [(token & 0xFFFFFF) - 1] + 1) << 5 | 19;  		break;  	default:  		throw new InvalidOperationException ();  	}  }  
Magic Number,IKVM.Reflection.Metadata,CustomAttributeTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: for (int i = 0; i < rowCount; i++) {  	moduleBuilder.FixupPseudoToken (ref records [i].Type);  	int token = records [i].Parent;  	moduleBuilder.FixupPseudoToken (ref token);  	// do the HasCustomAttribute encoding' so that we can sort the table  	switch (token >> 24) {  	case MethodDefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 0;  		break;  	case FieldTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 1;  		break;  	case TypeRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 2;  		break;  	case TypeDefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 3;  		break;  	case ParamTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 4;  		break;  	case InterfaceImplTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 5;  		break;  	case MemberRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 6;  		break;  	case ModuleTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 7;  		break;  	// Permission (8) table doesn't exist in the spec  	case PropertyTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 9;  		break;  	case EventTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 10;  		break;  	case StandAloneSigTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 11;  		break;  	case ModuleRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 12;  		break;  	case TypeSpecTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 13;  		break;  	case AssemblyTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 14;  		break;  	case AssemblyRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 15;  		break;  	case FileTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 16;  		break;  	case ExportedTypeTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 17;  		break;  	case ManifestResourceTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 18;  		break;  	case GenericParamTable.Index:  		records [i].Parent = (genericParamFixup [(token & 0xFFFFFF) - 1] + 1) << 5 | 19;  		break;  	default:  		throw new InvalidOperationException ();  	}  }  
Magic Number,IKVM.Reflection.Metadata,CustomAttributeTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: for (int i = 0; i < rowCount; i++) {  	moduleBuilder.FixupPseudoToken (ref records [i].Type);  	int token = records [i].Parent;  	moduleBuilder.FixupPseudoToken (ref token);  	// do the HasCustomAttribute encoding' so that we can sort the table  	switch (token >> 24) {  	case MethodDefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 0;  		break;  	case FieldTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 1;  		break;  	case TypeRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 2;  		break;  	case TypeDefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 3;  		break;  	case ParamTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 4;  		break;  	case InterfaceImplTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 5;  		break;  	case MemberRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 6;  		break;  	case ModuleTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 7;  		break;  	// Permission (8) table doesn't exist in the spec  	case PropertyTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 9;  		break;  	case EventTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 10;  		break;  	case StandAloneSigTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 11;  		break;  	case ModuleRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 12;  		break;  	case TypeSpecTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 13;  		break;  	case AssemblyTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 14;  		break;  	case AssemblyRefTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 15;  		break;  	case FileTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 16;  		break;  	case ExportedTypeTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 17;  		break;  	case ManifestResourceTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 5 | 18;  		break;  	case GenericParamTable.Index:  		records [i].Parent = (genericParamFixup [(token & 0xFFFFFF) - 1] + 1) << 5 | 19;  		break;  	default:  		throw new InvalidOperationException ();  	}  }  
Magic Number,IKVM.Reflection.Metadata,CustomAttributeTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: switch (token >> 24) {  case MethodDefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 0;  	break;  case FieldTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 1;  	break;  case TypeRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 2;  	break;  case TypeDefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 3;  	break;  case ParamTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 4;  	break;  case InterfaceImplTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 5;  	break;  case MemberRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 6;  	break;  case ModuleTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 7;  	break;  // Permission (8) table doesn't exist in the spec  case PropertyTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 9;  	break;  case EventTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 10;  	break;  case StandAloneSigTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 11;  	break;  case ModuleRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 12;  	break;  case TypeSpecTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 13;  	break;  case AssemblyTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 14;  	break;  case AssemblyRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 15;  	break;  case FileTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 16;  	break;  case ExportedTypeTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 17;  	break;  case ManifestResourceTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 18;  	break;  case GenericParamTable.Index:  	records [i].Parent = (genericParamFixup [(token & 0xFFFFFF) - 1] + 1) << 5 | 19;  	break;  default:  	throw new InvalidOperationException ();  }  
Magic Number,IKVM.Reflection.Metadata,CustomAttributeTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: switch (token >> 24) {  case MethodDefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 0;  	break;  case FieldTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 1;  	break;  case TypeRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 2;  	break;  case TypeDefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 3;  	break;  case ParamTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 4;  	break;  case InterfaceImplTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 5;  	break;  case MemberRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 6;  	break;  case ModuleTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 7;  	break;  // Permission (8) table doesn't exist in the spec  case PropertyTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 9;  	break;  case EventTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 10;  	break;  case StandAloneSigTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 11;  	break;  case ModuleRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 12;  	break;  case TypeSpecTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 13;  	break;  case AssemblyTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 14;  	break;  case AssemblyRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 15;  	break;  case FileTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 16;  	break;  case ExportedTypeTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 17;  	break;  case ManifestResourceTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 18;  	break;  case GenericParamTable.Index:  	records [i].Parent = (genericParamFixup [(token & 0xFFFFFF) - 1] + 1) << 5 | 19;  	break;  default:  	throw new InvalidOperationException ();  }  
Magic Number,IKVM.Reflection.Metadata,CustomAttributeTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: switch (token >> 24) {  case MethodDefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 0;  	break;  case FieldTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 1;  	break;  case TypeRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 2;  	break;  case TypeDefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 3;  	break;  case ParamTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 4;  	break;  case InterfaceImplTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 5;  	break;  case MemberRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 6;  	break;  case ModuleTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 7;  	break;  // Permission (8) table doesn't exist in the spec  case PropertyTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 9;  	break;  case EventTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 10;  	break;  case StandAloneSigTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 11;  	break;  case ModuleRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 12;  	break;  case TypeSpecTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 13;  	break;  case AssemblyTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 14;  	break;  case AssemblyRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 15;  	break;  case FileTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 16;  	break;  case ExportedTypeTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 17;  	break;  case ManifestResourceTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 18;  	break;  case GenericParamTable.Index:  	records [i].Parent = (genericParamFixup [(token & 0xFFFFFF) - 1] + 1) << 5 | 19;  	break;  default:  	throw new InvalidOperationException ();  }  
Magic Number,IKVM.Reflection.Metadata,CustomAttributeTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: switch (token >> 24) {  case MethodDefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 0;  	break;  case FieldTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 1;  	break;  case TypeRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 2;  	break;  case TypeDefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 3;  	break;  case ParamTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 4;  	break;  case InterfaceImplTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 5;  	break;  case MemberRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 6;  	break;  case ModuleTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 7;  	break;  // Permission (8) table doesn't exist in the spec  case PropertyTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 9;  	break;  case EventTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 10;  	break;  case StandAloneSigTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 11;  	break;  case ModuleRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 12;  	break;  case TypeSpecTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 13;  	break;  case AssemblyTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 14;  	break;  case AssemblyRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 15;  	break;  case FileTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 16;  	break;  case ExportedTypeTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 17;  	break;  case ManifestResourceTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 18;  	break;  case GenericParamTable.Index:  	records [i].Parent = (genericParamFixup [(token & 0xFFFFFF) - 1] + 1) << 5 | 19;  	break;  default:  	throw new InvalidOperationException ();  }  
Magic Number,IKVM.Reflection.Metadata,CustomAttributeTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: switch (token >> 24) {  case MethodDefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 0;  	break;  case FieldTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 1;  	break;  case TypeRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 2;  	break;  case TypeDefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 3;  	break;  case ParamTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 4;  	break;  case InterfaceImplTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 5;  	break;  case MemberRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 6;  	break;  case ModuleTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 7;  	break;  // Permission (8) table doesn't exist in the spec  case PropertyTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 9;  	break;  case EventTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 10;  	break;  case StandAloneSigTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 11;  	break;  case ModuleRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 12;  	break;  case TypeSpecTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 13;  	break;  case AssemblyTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 14;  	break;  case AssemblyRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 15;  	break;  case FileTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 16;  	break;  case ExportedTypeTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 17;  	break;  case ManifestResourceTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 18;  	break;  case GenericParamTable.Index:  	records [i].Parent = (genericParamFixup [(token & 0xFFFFFF) - 1] + 1) << 5 | 19;  	break;  default:  	throw new InvalidOperationException ();  }  
Magic Number,IKVM.Reflection.Metadata,CustomAttributeTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: switch (token >> 24) {  case MethodDefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 0;  	break;  case FieldTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 1;  	break;  case TypeRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 2;  	break;  case TypeDefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 3;  	break;  case ParamTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 4;  	break;  case InterfaceImplTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 5;  	break;  case MemberRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 6;  	break;  case ModuleTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 7;  	break;  // Permission (8) table doesn't exist in the spec  case PropertyTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 9;  	break;  case EventTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 10;  	break;  case StandAloneSigTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 11;  	break;  case ModuleRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 12;  	break;  case TypeSpecTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 13;  	break;  case AssemblyTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 14;  	break;  case AssemblyRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 15;  	break;  case FileTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 16;  	break;  case ExportedTypeTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 17;  	break;  case ManifestResourceTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 18;  	break;  case GenericParamTable.Index:  	records [i].Parent = (genericParamFixup [(token & 0xFFFFFF) - 1] + 1) << 5 | 19;  	break;  default:  	throw new InvalidOperationException ();  }  
Magic Number,IKVM.Reflection.Metadata,CustomAttributeTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: switch (token >> 24) {  case MethodDefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 0;  	break;  case FieldTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 1;  	break;  case TypeRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 2;  	break;  case TypeDefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 3;  	break;  case ParamTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 4;  	break;  case InterfaceImplTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 5;  	break;  case MemberRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 6;  	break;  case ModuleTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 7;  	break;  // Permission (8) table doesn't exist in the spec  case PropertyTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 9;  	break;  case EventTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 10;  	break;  case StandAloneSigTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 11;  	break;  case ModuleRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 12;  	break;  case TypeSpecTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 13;  	break;  case AssemblyTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 14;  	break;  case AssemblyRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 15;  	break;  case FileTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 16;  	break;  case ExportedTypeTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 17;  	break;  case ManifestResourceTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 18;  	break;  case GenericParamTable.Index:  	records [i].Parent = (genericParamFixup [(token & 0xFFFFFF) - 1] + 1) << 5 | 19;  	break;  default:  	throw new InvalidOperationException ();  }  
Magic Number,IKVM.Reflection.Metadata,CustomAttributeTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: switch (token >> 24) {  case MethodDefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 0;  	break;  case FieldTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 1;  	break;  case TypeRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 2;  	break;  case TypeDefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 3;  	break;  case ParamTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 4;  	break;  case InterfaceImplTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 5;  	break;  case MemberRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 6;  	break;  case ModuleTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 7;  	break;  // Permission (8) table doesn't exist in the spec  case PropertyTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 9;  	break;  case EventTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 10;  	break;  case StandAloneSigTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 11;  	break;  case ModuleRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 12;  	break;  case TypeSpecTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 13;  	break;  case AssemblyTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 14;  	break;  case AssemblyRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 15;  	break;  case FileTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 16;  	break;  case ExportedTypeTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 17;  	break;  case ManifestResourceTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 18;  	break;  case GenericParamTable.Index:  	records [i].Parent = (genericParamFixup [(token & 0xFFFFFF) - 1] + 1) << 5 | 19;  	break;  default:  	throw new InvalidOperationException ();  }  
Magic Number,IKVM.Reflection.Metadata,CustomAttributeTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: switch (token >> 24) {  case MethodDefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 0;  	break;  case FieldTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 1;  	break;  case TypeRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 2;  	break;  case TypeDefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 3;  	break;  case ParamTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 4;  	break;  case InterfaceImplTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 5;  	break;  case MemberRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 6;  	break;  case ModuleTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 7;  	break;  // Permission (8) table doesn't exist in the spec  case PropertyTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 9;  	break;  case EventTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 10;  	break;  case StandAloneSigTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 11;  	break;  case ModuleRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 12;  	break;  case TypeSpecTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 13;  	break;  case AssemblyTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 14;  	break;  case AssemblyRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 15;  	break;  case FileTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 16;  	break;  case ExportedTypeTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 17;  	break;  case ManifestResourceTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 18;  	break;  case GenericParamTable.Index:  	records [i].Parent = (genericParamFixup [(token & 0xFFFFFF) - 1] + 1) << 5 | 19;  	break;  default:  	throw new InvalidOperationException ();  }  
Magic Number,IKVM.Reflection.Metadata,CustomAttributeTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: switch (token >> 24) {  case MethodDefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 0;  	break;  case FieldTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 1;  	break;  case TypeRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 2;  	break;  case TypeDefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 3;  	break;  case ParamTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 4;  	break;  case InterfaceImplTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 5;  	break;  case MemberRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 6;  	break;  case ModuleTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 7;  	break;  // Permission (8) table doesn't exist in the spec  case PropertyTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 9;  	break;  case EventTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 10;  	break;  case StandAloneSigTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 11;  	break;  case ModuleRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 12;  	break;  case TypeSpecTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 13;  	break;  case AssemblyTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 14;  	break;  case AssemblyRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 15;  	break;  case FileTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 16;  	break;  case ExportedTypeTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 17;  	break;  case ManifestResourceTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 18;  	break;  case GenericParamTable.Index:  	records [i].Parent = (genericParamFixup [(token & 0xFFFFFF) - 1] + 1) << 5 | 19;  	break;  default:  	throw new InvalidOperationException ();  }  
Magic Number,IKVM.Reflection.Metadata,CustomAttributeTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: switch (token >> 24) {  case MethodDefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 0;  	break;  case FieldTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 1;  	break;  case TypeRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 2;  	break;  case TypeDefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 3;  	break;  case ParamTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 4;  	break;  case InterfaceImplTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 5;  	break;  case MemberRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 6;  	break;  case ModuleTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 7;  	break;  // Permission (8) table doesn't exist in the spec  case PropertyTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 9;  	break;  case EventTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 10;  	break;  case StandAloneSigTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 11;  	break;  case ModuleRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 12;  	break;  case TypeSpecTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 13;  	break;  case AssemblyTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 14;  	break;  case AssemblyRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 15;  	break;  case FileTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 16;  	break;  case ExportedTypeTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 17;  	break;  case ManifestResourceTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 18;  	break;  case GenericParamTable.Index:  	records [i].Parent = (genericParamFixup [(token & 0xFFFFFF) - 1] + 1) << 5 | 19;  	break;  default:  	throw new InvalidOperationException ();  }  
Magic Number,IKVM.Reflection.Metadata,CustomAttributeTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: switch (token >> 24) {  case MethodDefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 0;  	break;  case FieldTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 1;  	break;  case TypeRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 2;  	break;  case TypeDefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 3;  	break;  case ParamTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 4;  	break;  case InterfaceImplTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 5;  	break;  case MemberRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 6;  	break;  case ModuleTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 7;  	break;  // Permission (8) table doesn't exist in the spec  case PropertyTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 9;  	break;  case EventTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 10;  	break;  case StandAloneSigTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 11;  	break;  case ModuleRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 12;  	break;  case TypeSpecTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 13;  	break;  case AssemblyTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 14;  	break;  case AssemblyRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 15;  	break;  case FileTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 16;  	break;  case ExportedTypeTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 17;  	break;  case ManifestResourceTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 18;  	break;  case GenericParamTable.Index:  	records [i].Parent = (genericParamFixup [(token & 0xFFFFFF) - 1] + 1) << 5 | 19;  	break;  default:  	throw new InvalidOperationException ();  }  
Magic Number,IKVM.Reflection.Metadata,CustomAttributeTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: switch (token >> 24) {  case MethodDefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 0;  	break;  case FieldTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 1;  	break;  case TypeRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 2;  	break;  case TypeDefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 3;  	break;  case ParamTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 4;  	break;  case InterfaceImplTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 5;  	break;  case MemberRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 6;  	break;  case ModuleTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 7;  	break;  // Permission (8) table doesn't exist in the spec  case PropertyTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 9;  	break;  case EventTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 10;  	break;  case StandAloneSigTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 11;  	break;  case ModuleRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 12;  	break;  case TypeSpecTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 13;  	break;  case AssemblyTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 14;  	break;  case AssemblyRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 15;  	break;  case FileTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 16;  	break;  case ExportedTypeTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 17;  	break;  case ManifestResourceTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 18;  	break;  case GenericParamTable.Index:  	records [i].Parent = (genericParamFixup [(token & 0xFFFFFF) - 1] + 1) << 5 | 19;  	break;  default:  	throw new InvalidOperationException ();  }  
Magic Number,IKVM.Reflection.Metadata,CustomAttributeTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: switch (token >> 24) {  case MethodDefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 0;  	break;  case FieldTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 1;  	break;  case TypeRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 2;  	break;  case TypeDefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 3;  	break;  case ParamTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 4;  	break;  case InterfaceImplTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 5;  	break;  case MemberRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 6;  	break;  case ModuleTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 7;  	break;  // Permission (8) table doesn't exist in the spec  case PropertyTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 9;  	break;  case EventTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 10;  	break;  case StandAloneSigTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 11;  	break;  case ModuleRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 12;  	break;  case TypeSpecTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 13;  	break;  case AssemblyTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 14;  	break;  case AssemblyRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 15;  	break;  case FileTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 16;  	break;  case ExportedTypeTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 17;  	break;  case ManifestResourceTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 18;  	break;  case GenericParamTable.Index:  	records [i].Parent = (genericParamFixup [(token & 0xFFFFFF) - 1] + 1) << 5 | 19;  	break;  default:  	throw new InvalidOperationException ();  }  
Magic Number,IKVM.Reflection.Metadata,CustomAttributeTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: switch (token >> 24) {  case MethodDefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 0;  	break;  case FieldTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 1;  	break;  case TypeRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 2;  	break;  case TypeDefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 3;  	break;  case ParamTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 4;  	break;  case InterfaceImplTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 5;  	break;  case MemberRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 6;  	break;  case ModuleTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 7;  	break;  // Permission (8) table doesn't exist in the spec  case PropertyTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 9;  	break;  case EventTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 10;  	break;  case StandAloneSigTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 11;  	break;  case ModuleRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 12;  	break;  case TypeSpecTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 13;  	break;  case AssemblyTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 14;  	break;  case AssemblyRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 15;  	break;  case FileTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 16;  	break;  case ExportedTypeTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 17;  	break;  case ManifestResourceTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 18;  	break;  case GenericParamTable.Index:  	records [i].Parent = (genericParamFixup [(token & 0xFFFFFF) - 1] + 1) << 5 | 19;  	break;  default:  	throw new InvalidOperationException ();  }  
Magic Number,IKVM.Reflection.Metadata,CustomAttributeTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: switch (token >> 24) {  case MethodDefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 0;  	break;  case FieldTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 1;  	break;  case TypeRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 2;  	break;  case TypeDefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 3;  	break;  case ParamTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 4;  	break;  case InterfaceImplTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 5;  	break;  case MemberRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 6;  	break;  case ModuleTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 7;  	break;  // Permission (8) table doesn't exist in the spec  case PropertyTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 9;  	break;  case EventTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 10;  	break;  case StandAloneSigTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 11;  	break;  case ModuleRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 12;  	break;  case TypeSpecTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 13;  	break;  case AssemblyTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 14;  	break;  case AssemblyRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 15;  	break;  case FileTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 16;  	break;  case ExportedTypeTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 17;  	break;  case ManifestResourceTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 18;  	break;  case GenericParamTable.Index:  	records [i].Parent = (genericParamFixup [(token & 0xFFFFFF) - 1] + 1) << 5 | 19;  	break;  default:  	throw new InvalidOperationException ();  }  
Magic Number,IKVM.Reflection.Metadata,CustomAttributeTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: switch (token >> 24) {  case MethodDefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 0;  	break;  case FieldTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 1;  	break;  case TypeRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 2;  	break;  case TypeDefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 3;  	break;  case ParamTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 4;  	break;  case InterfaceImplTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 5;  	break;  case MemberRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 6;  	break;  case ModuleTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 7;  	break;  // Permission (8) table doesn't exist in the spec  case PropertyTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 9;  	break;  case EventTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 10;  	break;  case StandAloneSigTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 11;  	break;  case ModuleRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 12;  	break;  case TypeSpecTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 13;  	break;  case AssemblyTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 14;  	break;  case AssemblyRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 15;  	break;  case FileTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 16;  	break;  case ExportedTypeTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 17;  	break;  case ManifestResourceTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 18;  	break;  case GenericParamTable.Index:  	records [i].Parent = (genericParamFixup [(token & 0xFFFFFF) - 1] + 1) << 5 | 19;  	break;  default:  	throw new InvalidOperationException ();  }  
Magic Number,IKVM.Reflection.Metadata,CustomAttributeTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: switch (token >> 24) {  case MethodDefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 0;  	break;  case FieldTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 1;  	break;  case TypeRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 2;  	break;  case TypeDefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 3;  	break;  case ParamTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 4;  	break;  case InterfaceImplTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 5;  	break;  case MemberRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 6;  	break;  case ModuleTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 7;  	break;  // Permission (8) table doesn't exist in the spec  case PropertyTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 9;  	break;  case EventTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 10;  	break;  case StandAloneSigTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 11;  	break;  case ModuleRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 12;  	break;  case TypeSpecTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 13;  	break;  case AssemblyTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 14;  	break;  case AssemblyRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 15;  	break;  case FileTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 16;  	break;  case ExportedTypeTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 17;  	break;  case ManifestResourceTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 18;  	break;  case GenericParamTable.Index:  	records [i].Parent = (genericParamFixup [(token & 0xFFFFFF) - 1] + 1) << 5 | 19;  	break;  default:  	throw new InvalidOperationException ();  }  
Magic Number,IKVM.Reflection.Metadata,CustomAttributeTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: switch (token >> 24) {  case MethodDefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 0;  	break;  case FieldTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 1;  	break;  case TypeRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 2;  	break;  case TypeDefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 3;  	break;  case ParamTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 4;  	break;  case InterfaceImplTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 5;  	break;  case MemberRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 6;  	break;  case ModuleTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 7;  	break;  // Permission (8) table doesn't exist in the spec  case PropertyTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 9;  	break;  case EventTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 10;  	break;  case StandAloneSigTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 11;  	break;  case ModuleRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 12;  	break;  case TypeSpecTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 13;  	break;  case AssemblyTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 14;  	break;  case AssemblyRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 15;  	break;  case FileTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 16;  	break;  case ExportedTypeTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 17;  	break;  case ManifestResourceTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 18;  	break;  case GenericParamTable.Index:  	records [i].Parent = (genericParamFixup [(token & 0xFFFFFF) - 1] + 1) << 5 | 19;  	break;  default:  	throw new InvalidOperationException ();  }  
Magic Number,IKVM.Reflection.Metadata,CustomAttributeTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: switch (token >> 24) {  case MethodDefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 0;  	break;  case FieldTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 1;  	break;  case TypeRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 2;  	break;  case TypeDefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 3;  	break;  case ParamTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 4;  	break;  case InterfaceImplTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 5;  	break;  case MemberRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 6;  	break;  case ModuleTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 7;  	break;  // Permission (8) table doesn't exist in the spec  case PropertyTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 9;  	break;  case EventTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 10;  	break;  case StandAloneSigTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 11;  	break;  case ModuleRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 12;  	break;  case TypeSpecTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 13;  	break;  case AssemblyTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 14;  	break;  case AssemblyRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 15;  	break;  case FileTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 16;  	break;  case ExportedTypeTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 17;  	break;  case ManifestResourceTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 18;  	break;  case GenericParamTable.Index:  	records [i].Parent = (genericParamFixup [(token & 0xFFFFFF) - 1] + 1) << 5 | 19;  	break;  default:  	throw new InvalidOperationException ();  }  
Magic Number,IKVM.Reflection.Metadata,CustomAttributeTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: switch (token >> 24) {  case MethodDefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 0;  	break;  case FieldTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 1;  	break;  case TypeRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 2;  	break;  case TypeDefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 3;  	break;  case ParamTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 4;  	break;  case InterfaceImplTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 5;  	break;  case MemberRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 6;  	break;  case ModuleTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 7;  	break;  // Permission (8) table doesn't exist in the spec  case PropertyTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 9;  	break;  case EventTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 10;  	break;  case StandAloneSigTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 11;  	break;  case ModuleRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 12;  	break;  case TypeSpecTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 13;  	break;  case AssemblyTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 14;  	break;  case AssemblyRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 15;  	break;  case FileTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 16;  	break;  case ExportedTypeTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 17;  	break;  case ManifestResourceTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 18;  	break;  case GenericParamTable.Index:  	records [i].Parent = (genericParamFixup [(token & 0xFFFFFF) - 1] + 1) << 5 | 19;  	break;  default:  	throw new InvalidOperationException ();  }  
Magic Number,IKVM.Reflection.Metadata,CustomAttributeTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: switch (token >> 24) {  case MethodDefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 0;  	break;  case FieldTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 1;  	break;  case TypeRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 2;  	break;  case TypeDefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 3;  	break;  case ParamTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 4;  	break;  case InterfaceImplTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 5;  	break;  case MemberRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 6;  	break;  case ModuleTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 7;  	break;  // Permission (8) table doesn't exist in the spec  case PropertyTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 9;  	break;  case EventTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 10;  	break;  case StandAloneSigTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 11;  	break;  case ModuleRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 12;  	break;  case TypeSpecTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 13;  	break;  case AssemblyTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 14;  	break;  case AssemblyRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 15;  	break;  case FileTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 16;  	break;  case ExportedTypeTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 17;  	break;  case ManifestResourceTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 18;  	break;  case GenericParamTable.Index:  	records [i].Parent = (genericParamFixup [(token & 0xFFFFFF) - 1] + 1) << 5 | 19;  	break;  default:  	throw new InvalidOperationException ();  }  
Magic Number,IKVM.Reflection.Metadata,CustomAttributeTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: switch (token >> 24) {  case MethodDefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 0;  	break;  case FieldTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 1;  	break;  case TypeRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 2;  	break;  case TypeDefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 3;  	break;  case ParamTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 4;  	break;  case InterfaceImplTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 5;  	break;  case MemberRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 6;  	break;  case ModuleTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 7;  	break;  // Permission (8) table doesn't exist in the spec  case PropertyTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 9;  	break;  case EventTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 10;  	break;  case StandAloneSigTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 11;  	break;  case ModuleRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 12;  	break;  case TypeSpecTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 13;  	break;  case AssemblyTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 14;  	break;  case AssemblyRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 15;  	break;  case FileTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 16;  	break;  case ExportedTypeTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 17;  	break;  case ManifestResourceTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 18;  	break;  case GenericParamTable.Index:  	records [i].Parent = (genericParamFixup [(token & 0xFFFFFF) - 1] + 1) << 5 | 19;  	break;  default:  	throw new InvalidOperationException ();  }  
Magic Number,IKVM.Reflection.Metadata,CustomAttributeTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: switch (token >> 24) {  case MethodDefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 0;  	break;  case FieldTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 1;  	break;  case TypeRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 2;  	break;  case TypeDefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 3;  	break;  case ParamTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 4;  	break;  case InterfaceImplTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 5;  	break;  case MemberRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 6;  	break;  case ModuleTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 7;  	break;  // Permission (8) table doesn't exist in the spec  case PropertyTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 9;  	break;  case EventTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 10;  	break;  case StandAloneSigTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 11;  	break;  case ModuleRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 12;  	break;  case TypeSpecTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 13;  	break;  case AssemblyTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 14;  	break;  case AssemblyRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 15;  	break;  case FileTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 16;  	break;  case ExportedTypeTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 17;  	break;  case ManifestResourceTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 18;  	break;  case GenericParamTable.Index:  	records [i].Parent = (genericParamFixup [(token & 0xFFFFFF) - 1] + 1) << 5 | 19;  	break;  default:  	throw new InvalidOperationException ();  }  
Magic Number,IKVM.Reflection.Metadata,CustomAttributeTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: switch (token >> 24) {  case MethodDefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 0;  	break;  case FieldTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 1;  	break;  case TypeRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 2;  	break;  case TypeDefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 3;  	break;  case ParamTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 4;  	break;  case InterfaceImplTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 5;  	break;  case MemberRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 6;  	break;  case ModuleTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 7;  	break;  // Permission (8) table doesn't exist in the spec  case PropertyTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 9;  	break;  case EventTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 10;  	break;  case StandAloneSigTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 11;  	break;  case ModuleRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 12;  	break;  case TypeSpecTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 13;  	break;  case AssemblyTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 14;  	break;  case AssemblyRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 15;  	break;  case FileTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 16;  	break;  case ExportedTypeTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 17;  	break;  case ManifestResourceTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 18;  	break;  case GenericParamTable.Index:  	records [i].Parent = (genericParamFixup [(token & 0xFFFFFF) - 1] + 1) << 5 | 19;  	break;  default:  	throw new InvalidOperationException ();  }  
Magic Number,IKVM.Reflection.Metadata,CustomAttributeTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: switch (token >> 24) {  case MethodDefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 0;  	break;  case FieldTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 1;  	break;  case TypeRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 2;  	break;  case TypeDefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 3;  	break;  case ParamTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 4;  	break;  case InterfaceImplTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 5;  	break;  case MemberRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 6;  	break;  case ModuleTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 7;  	break;  // Permission (8) table doesn't exist in the spec  case PropertyTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 9;  	break;  case EventTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 10;  	break;  case StandAloneSigTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 11;  	break;  case ModuleRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 12;  	break;  case TypeSpecTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 13;  	break;  case AssemblyTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 14;  	break;  case AssemblyRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 15;  	break;  case FileTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 16;  	break;  case ExportedTypeTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 17;  	break;  case ManifestResourceTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 18;  	break;  case GenericParamTable.Index:  	records [i].Parent = (genericParamFixup [(token & 0xFFFFFF) - 1] + 1) << 5 | 19;  	break;  default:  	throw new InvalidOperationException ();  }  
Magic Number,IKVM.Reflection.Metadata,CustomAttributeTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: switch (token >> 24) {  case MethodDefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 0;  	break;  case FieldTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 1;  	break;  case TypeRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 2;  	break;  case TypeDefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 3;  	break;  case ParamTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 4;  	break;  case InterfaceImplTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 5;  	break;  case MemberRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 6;  	break;  case ModuleTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 7;  	break;  // Permission (8) table doesn't exist in the spec  case PropertyTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 9;  	break;  case EventTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 10;  	break;  case StandAloneSigTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 11;  	break;  case ModuleRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 12;  	break;  case TypeSpecTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 13;  	break;  case AssemblyTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 14;  	break;  case AssemblyRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 15;  	break;  case FileTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 16;  	break;  case ExportedTypeTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 17;  	break;  case ManifestResourceTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 18;  	break;  case GenericParamTable.Index:  	records [i].Parent = (genericParamFixup [(token & 0xFFFFFF) - 1] + 1) << 5 | 19;  	break;  default:  	throw new InvalidOperationException ();  }  
Magic Number,IKVM.Reflection.Metadata,CustomAttributeTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: switch (token >> 24) {  case MethodDefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 0;  	break;  case FieldTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 1;  	break;  case TypeRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 2;  	break;  case TypeDefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 3;  	break;  case ParamTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 4;  	break;  case InterfaceImplTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 5;  	break;  case MemberRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 6;  	break;  case ModuleTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 7;  	break;  // Permission (8) table doesn't exist in the spec  case PropertyTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 9;  	break;  case EventTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 10;  	break;  case StandAloneSigTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 11;  	break;  case ModuleRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 12;  	break;  case TypeSpecTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 13;  	break;  case AssemblyTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 14;  	break;  case AssemblyRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 15;  	break;  case FileTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 16;  	break;  case ExportedTypeTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 17;  	break;  case ManifestResourceTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 18;  	break;  case GenericParamTable.Index:  	records [i].Parent = (genericParamFixup [(token & 0xFFFFFF) - 1] + 1) << 5 | 19;  	break;  default:  	throw new InvalidOperationException ();  }  
Magic Number,IKVM.Reflection.Metadata,CustomAttributeTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: switch (token >> 24) {  case MethodDefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 0;  	break;  case FieldTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 1;  	break;  case TypeRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 2;  	break;  case TypeDefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 3;  	break;  case ParamTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 4;  	break;  case InterfaceImplTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 5;  	break;  case MemberRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 6;  	break;  case ModuleTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 7;  	break;  // Permission (8) table doesn't exist in the spec  case PropertyTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 9;  	break;  case EventTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 10;  	break;  case StandAloneSigTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 11;  	break;  case ModuleRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 12;  	break;  case TypeSpecTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 13;  	break;  case AssemblyTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 14;  	break;  case AssemblyRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 15;  	break;  case FileTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 16;  	break;  case ExportedTypeTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 17;  	break;  case ManifestResourceTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 18;  	break;  case GenericParamTable.Index:  	records [i].Parent = (genericParamFixup [(token & 0xFFFFFF) - 1] + 1) << 5 | 19;  	break;  default:  	throw new InvalidOperationException ();  }  
Magic Number,IKVM.Reflection.Metadata,CustomAttributeTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: switch (token >> 24) {  case MethodDefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 0;  	break;  case FieldTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 1;  	break;  case TypeRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 2;  	break;  case TypeDefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 3;  	break;  case ParamTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 4;  	break;  case InterfaceImplTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 5;  	break;  case MemberRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 6;  	break;  case ModuleTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 7;  	break;  // Permission (8) table doesn't exist in the spec  case PropertyTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 9;  	break;  case EventTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 10;  	break;  case StandAloneSigTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 11;  	break;  case ModuleRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 12;  	break;  case TypeSpecTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 13;  	break;  case AssemblyTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 14;  	break;  case AssemblyRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 15;  	break;  case FileTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 16;  	break;  case ExportedTypeTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 17;  	break;  case ManifestResourceTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 18;  	break;  case GenericParamTable.Index:  	records [i].Parent = (genericParamFixup [(token & 0xFFFFFF) - 1] + 1) << 5 | 19;  	break;  default:  	throw new InvalidOperationException ();  }  
Magic Number,IKVM.Reflection.Metadata,CustomAttributeTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: switch (token >> 24) {  case MethodDefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 0;  	break;  case FieldTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 1;  	break;  case TypeRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 2;  	break;  case TypeDefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 3;  	break;  case ParamTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 4;  	break;  case InterfaceImplTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 5;  	break;  case MemberRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 6;  	break;  case ModuleTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 7;  	break;  // Permission (8) table doesn't exist in the spec  case PropertyTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 9;  	break;  case EventTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 10;  	break;  case StandAloneSigTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 11;  	break;  case ModuleRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 12;  	break;  case TypeSpecTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 13;  	break;  case AssemblyTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 14;  	break;  case AssemblyRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 15;  	break;  case FileTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 16;  	break;  case ExportedTypeTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 17;  	break;  case ManifestResourceTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 18;  	break;  case GenericParamTable.Index:  	records [i].Parent = (genericParamFixup [(token & 0xFFFFFF) - 1] + 1) << 5 | 19;  	break;  default:  	throw new InvalidOperationException ();  }  
Magic Number,IKVM.Reflection.Metadata,CustomAttributeTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: switch (token >> 24) {  case MethodDefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 0;  	break;  case FieldTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 1;  	break;  case TypeRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 2;  	break;  case TypeDefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 3;  	break;  case ParamTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 4;  	break;  case InterfaceImplTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 5;  	break;  case MemberRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 6;  	break;  case ModuleTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 7;  	break;  // Permission (8) table doesn't exist in the spec  case PropertyTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 9;  	break;  case EventTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 10;  	break;  case StandAloneSigTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 11;  	break;  case ModuleRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 12;  	break;  case TypeSpecTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 13;  	break;  case AssemblyTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 14;  	break;  case AssemblyRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 15;  	break;  case FileTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 16;  	break;  case ExportedTypeTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 17;  	break;  case ManifestResourceTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 18;  	break;  case GenericParamTable.Index:  	records [i].Parent = (genericParamFixup [(token & 0xFFFFFF) - 1] + 1) << 5 | 19;  	break;  default:  	throw new InvalidOperationException ();  }  
Magic Number,IKVM.Reflection.Metadata,CustomAttributeTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: switch (token >> 24) {  case MethodDefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 0;  	break;  case FieldTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 1;  	break;  case TypeRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 2;  	break;  case TypeDefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 3;  	break;  case ParamTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 4;  	break;  case InterfaceImplTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 5;  	break;  case MemberRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 6;  	break;  case ModuleTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 7;  	break;  // Permission (8) table doesn't exist in the spec  case PropertyTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 9;  	break;  case EventTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 10;  	break;  case StandAloneSigTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 11;  	break;  case ModuleRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 12;  	break;  case TypeSpecTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 13;  	break;  case AssemblyTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 14;  	break;  case AssemblyRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 15;  	break;  case FileTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 16;  	break;  case ExportedTypeTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 17;  	break;  case ManifestResourceTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 18;  	break;  case GenericParamTable.Index:  	records [i].Parent = (genericParamFixup [(token & 0xFFFFFF) - 1] + 1) << 5 | 19;  	break;  default:  	throw new InvalidOperationException ();  }  
Magic Number,IKVM.Reflection.Metadata,CustomAttributeTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: switch (token >> 24) {  case MethodDefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 0;  	break;  case FieldTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 1;  	break;  case TypeRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 2;  	break;  case TypeDefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 3;  	break;  case ParamTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 4;  	break;  case InterfaceImplTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 5;  	break;  case MemberRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 6;  	break;  case ModuleTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 7;  	break;  // Permission (8) table doesn't exist in the spec  case PropertyTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 9;  	break;  case EventTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 10;  	break;  case StandAloneSigTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 11;  	break;  case ModuleRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 12;  	break;  case TypeSpecTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 13;  	break;  case AssemblyTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 14;  	break;  case AssemblyRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 15;  	break;  case FileTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 16;  	break;  case ExportedTypeTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 17;  	break;  case ManifestResourceTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 18;  	break;  case GenericParamTable.Index:  	records [i].Parent = (genericParamFixup [(token & 0xFFFFFF) - 1] + 1) << 5 | 19;  	break;  default:  	throw new InvalidOperationException ();  }  
Magic Number,IKVM.Reflection.Metadata,CustomAttributeTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: switch (token >> 24) {  case MethodDefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 0;  	break;  case FieldTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 1;  	break;  case TypeRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 2;  	break;  case TypeDefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 3;  	break;  case ParamTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 4;  	break;  case InterfaceImplTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 5;  	break;  case MemberRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 6;  	break;  case ModuleTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 7;  	break;  // Permission (8) table doesn't exist in the spec  case PropertyTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 9;  	break;  case EventTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 10;  	break;  case StandAloneSigTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 11;  	break;  case ModuleRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 12;  	break;  case TypeSpecTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 13;  	break;  case AssemblyTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 14;  	break;  case AssemblyRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 15;  	break;  case FileTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 16;  	break;  case ExportedTypeTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 17;  	break;  case ManifestResourceTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 18;  	break;  case GenericParamTable.Index:  	records [i].Parent = (genericParamFixup [(token & 0xFFFFFF) - 1] + 1) << 5 | 19;  	break;  default:  	throw new InvalidOperationException ();  }  
Magic Number,IKVM.Reflection.Metadata,CustomAttributeTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: switch (token >> 24) {  case MethodDefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 0;  	break;  case FieldTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 1;  	break;  case TypeRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 2;  	break;  case TypeDefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 3;  	break;  case ParamTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 4;  	break;  case InterfaceImplTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 5;  	break;  case MemberRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 6;  	break;  case ModuleTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 7;  	break;  // Permission (8) table doesn't exist in the spec  case PropertyTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 9;  	break;  case EventTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 10;  	break;  case StandAloneSigTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 11;  	break;  case ModuleRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 12;  	break;  case TypeSpecTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 13;  	break;  case AssemblyTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 14;  	break;  case AssemblyRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 15;  	break;  case FileTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 16;  	break;  case ExportedTypeTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 17;  	break;  case ManifestResourceTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 18;  	break;  case GenericParamTable.Index:  	records [i].Parent = (genericParamFixup [(token & 0xFFFFFF) - 1] + 1) << 5 | 19;  	break;  default:  	throw new InvalidOperationException ();  }  
Magic Number,IKVM.Reflection.Metadata,CustomAttributeTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: switch (token >> 24) {  case MethodDefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 0;  	break;  case FieldTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 1;  	break;  case TypeRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 2;  	break;  case TypeDefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 3;  	break;  case ParamTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 4;  	break;  case InterfaceImplTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 5;  	break;  case MemberRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 6;  	break;  case ModuleTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 7;  	break;  // Permission (8) table doesn't exist in the spec  case PropertyTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 9;  	break;  case EventTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 10;  	break;  case StandAloneSigTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 11;  	break;  case ModuleRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 12;  	break;  case TypeSpecTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 13;  	break;  case AssemblyTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 14;  	break;  case AssemblyRefTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 15;  	break;  case FileTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 16;  	break;  case ExportedTypeTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 17;  	break;  case ManifestResourceTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 5 | 18;  	break;  case GenericParamTable.Index:  	records [i].Parent = (genericParamFixup [(token & 0xFFFFFF) - 1] + 1) << 5 | 19;  	break;  default:  	throw new InvalidOperationException ();  }  
Magic Number,IKVM.Reflection.Metadata,CustomAttributeTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: records [i].Parent = (token & 0xFFFFFF) << 5 | 0;  
Magic Number,IKVM.Reflection.Metadata,CustomAttributeTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: records [i].Parent = (token & 0xFFFFFF) << 5 | 1;  
Magic Number,IKVM.Reflection.Metadata,CustomAttributeTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: records [i].Parent = (token & 0xFFFFFF) << 5 | 2;  
Magic Number,IKVM.Reflection.Metadata,CustomAttributeTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: records [i].Parent = (token & 0xFFFFFF) << 5 | 2;  
Magic Number,IKVM.Reflection.Metadata,CustomAttributeTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: records [i].Parent = (token & 0xFFFFFF) << 5 | 3;  
Magic Number,IKVM.Reflection.Metadata,CustomAttributeTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: records [i].Parent = (token & 0xFFFFFF) << 5 | 3;  
Magic Number,IKVM.Reflection.Metadata,CustomAttributeTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: records [i].Parent = (token & 0xFFFFFF) << 5 | 4;  
Magic Number,IKVM.Reflection.Metadata,CustomAttributeTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: records [i].Parent = (token & 0xFFFFFF) << 5 | 4;  
Magic Number,IKVM.Reflection.Metadata,CustomAttributeTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: records [i].Parent = (token & 0xFFFFFF) << 5 | 5;  
Magic Number,IKVM.Reflection.Metadata,CustomAttributeTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: records [i].Parent = (token & 0xFFFFFF) << 5 | 5;  
Magic Number,IKVM.Reflection.Metadata,CustomAttributeTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: records [i].Parent = (token & 0xFFFFFF) << 5 | 6;  
Magic Number,IKVM.Reflection.Metadata,CustomAttributeTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: records [i].Parent = (token & 0xFFFFFF) << 5 | 6;  
Magic Number,IKVM.Reflection.Metadata,CustomAttributeTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: records [i].Parent = (token & 0xFFFFFF) << 5 | 7;  
Magic Number,IKVM.Reflection.Metadata,CustomAttributeTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: records [i].Parent = (token & 0xFFFFFF) << 5 | 7;  
Magic Number,IKVM.Reflection.Metadata,CustomAttributeTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: records [i].Parent = (token & 0xFFFFFF) << 5 | 9;  
Magic Number,IKVM.Reflection.Metadata,CustomAttributeTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: records [i].Parent = (token & 0xFFFFFF) << 5 | 9;  
Magic Number,IKVM.Reflection.Metadata,CustomAttributeTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: records [i].Parent = (token & 0xFFFFFF) << 5 | 10;  
Magic Number,IKVM.Reflection.Metadata,CustomAttributeTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: records [i].Parent = (token & 0xFFFFFF) << 5 | 10;  
Magic Number,IKVM.Reflection.Metadata,CustomAttributeTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: records [i].Parent = (token & 0xFFFFFF) << 5 | 11;  
Magic Number,IKVM.Reflection.Metadata,CustomAttributeTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: records [i].Parent = (token & 0xFFFFFF) << 5 | 11;  
Magic Number,IKVM.Reflection.Metadata,CustomAttributeTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: records [i].Parent = (token & 0xFFFFFF) << 5 | 12;  
Magic Number,IKVM.Reflection.Metadata,CustomAttributeTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: records [i].Parent = (token & 0xFFFFFF) << 5 | 12;  
Magic Number,IKVM.Reflection.Metadata,CustomAttributeTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: records [i].Parent = (token & 0xFFFFFF) << 5 | 13;  
Magic Number,IKVM.Reflection.Metadata,CustomAttributeTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: records [i].Parent = (token & 0xFFFFFF) << 5 | 13;  
Magic Number,IKVM.Reflection.Metadata,CustomAttributeTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: records [i].Parent = (token & 0xFFFFFF) << 5 | 14;  
Magic Number,IKVM.Reflection.Metadata,CustomAttributeTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: records [i].Parent = (token & 0xFFFFFF) << 5 | 14;  
Magic Number,IKVM.Reflection.Metadata,CustomAttributeTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: records [i].Parent = (token & 0xFFFFFF) << 5 | 15;  
Magic Number,IKVM.Reflection.Metadata,CustomAttributeTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: records [i].Parent = (token & 0xFFFFFF) << 5 | 15;  
Magic Number,IKVM.Reflection.Metadata,CustomAttributeTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: records [i].Parent = (token & 0xFFFFFF) << 5 | 16;  
Magic Number,IKVM.Reflection.Metadata,CustomAttributeTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: records [i].Parent = (token & 0xFFFFFF) << 5 | 16;  
Magic Number,IKVM.Reflection.Metadata,CustomAttributeTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: records [i].Parent = (token & 0xFFFFFF) << 5 | 17;  
Magic Number,IKVM.Reflection.Metadata,CustomAttributeTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: records [i].Parent = (token & 0xFFFFFF) << 5 | 17;  
Magic Number,IKVM.Reflection.Metadata,CustomAttributeTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: records [i].Parent = (token & 0xFFFFFF) << 5 | 18;  
Magic Number,IKVM.Reflection.Metadata,CustomAttributeTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: records [i].Parent = (token & 0xFFFFFF) << 5 | 18;  
Magic Number,IKVM.Reflection.Metadata,CustomAttributeTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: records [i].Parent = (genericParamFixup [(token & 0xFFFFFF) - 1] + 1) << 5 | 19;  
Magic Number,IKVM.Reflection.Metadata,CustomAttributeTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: records [i].Parent = (genericParamFixup [(token & 0xFFFFFF) - 1] + 1) << 5 | 19;  
Magic Number,IKVM.Reflection.Metadata,FieldMarshalTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: for (int i = 0; i < rowCount; i++) {  	int token = moduleBuilder.ResolvePseudoToken (records [i].Parent);  	// do the HasFieldMarshal encoding' so that we can sort the table  	switch (token >> 24) {  	case FieldTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 1 | 0;  		break;  	case ParamTable.Index:  		records [i].Parent = (token & 0xFFFFFF) << 1 | 1;  		break;  	default:  		throw new InvalidOperationException ();  	}  }  
Magic Number,IKVM.Reflection.Metadata,FieldMarshalTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: switch (token >> 24) {  case FieldTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 1 | 0;  	break;  case ParamTable.Index:  	records [i].Parent = (token & 0xFFFFFF) << 1 | 1;  	break;  default:  	throw new InvalidOperationException ();  }  
Magic Number,IKVM.Reflection.Metadata,DeclSecurityTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,GetRowSize,The following statement contains a magic number: return rsc.AddFixed (2).WriteHasDeclSecurity ().WriteBlobIndex ().Value;  
Magic Number,IKVM.Reflection.Metadata,DeclSecurityTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: for (int i = 0; i < rowCount; i++) {  	int token = records [i].Parent;  	moduleBuilder.FixupPseudoToken (ref token);  	// do the HasDeclSecurity encoding' so that we can sort the table  	switch (token >> 24) {  	case TypeDefTable.Index:  		token = (token & 0xFFFFFF) << 2 | 0;  		break;  	case MethodDefTable.Index:  		token = (token & 0xFFFFFF) << 2 | 1;  		break;  	case AssemblyTable.Index:  		token = (token & 0xFFFFFF) << 2 | 2;  		break;  	default:  		throw new InvalidOperationException ();  	}  	records [i].Parent = token;  }  
Magic Number,IKVM.Reflection.Metadata,DeclSecurityTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: for (int i = 0; i < rowCount; i++) {  	int token = records [i].Parent;  	moduleBuilder.FixupPseudoToken (ref token);  	// do the HasDeclSecurity encoding' so that we can sort the table  	switch (token >> 24) {  	case TypeDefTable.Index:  		token = (token & 0xFFFFFF) << 2 | 0;  		break;  	case MethodDefTable.Index:  		token = (token & 0xFFFFFF) << 2 | 1;  		break;  	case AssemblyTable.Index:  		token = (token & 0xFFFFFF) << 2 | 2;  		break;  	default:  		throw new InvalidOperationException ();  	}  	records [i].Parent = token;  }  
Magic Number,IKVM.Reflection.Metadata,DeclSecurityTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: for (int i = 0; i < rowCount; i++) {  	int token = records [i].Parent;  	moduleBuilder.FixupPseudoToken (ref token);  	// do the HasDeclSecurity encoding' so that we can sort the table  	switch (token >> 24) {  	case TypeDefTable.Index:  		token = (token & 0xFFFFFF) << 2 | 0;  		break;  	case MethodDefTable.Index:  		token = (token & 0xFFFFFF) << 2 | 1;  		break;  	case AssemblyTable.Index:  		token = (token & 0xFFFFFF) << 2 | 2;  		break;  	default:  		throw new InvalidOperationException ();  	}  	records [i].Parent = token;  }  
Magic Number,IKVM.Reflection.Metadata,DeclSecurityTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: for (int i = 0; i < rowCount; i++) {  	int token = records [i].Parent;  	moduleBuilder.FixupPseudoToken (ref token);  	// do the HasDeclSecurity encoding' so that we can sort the table  	switch (token >> 24) {  	case TypeDefTable.Index:  		token = (token & 0xFFFFFF) << 2 | 0;  		break;  	case MethodDefTable.Index:  		token = (token & 0xFFFFFF) << 2 | 1;  		break;  	case AssemblyTable.Index:  		token = (token & 0xFFFFFF) << 2 | 2;  		break;  	default:  		throw new InvalidOperationException ();  	}  	records [i].Parent = token;  }  
Magic Number,IKVM.Reflection.Metadata,DeclSecurityTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: for (int i = 0; i < rowCount; i++) {  	int token = records [i].Parent;  	moduleBuilder.FixupPseudoToken (ref token);  	// do the HasDeclSecurity encoding' so that we can sort the table  	switch (token >> 24) {  	case TypeDefTable.Index:  		token = (token & 0xFFFFFF) << 2 | 0;  		break;  	case MethodDefTable.Index:  		token = (token & 0xFFFFFF) << 2 | 1;  		break;  	case AssemblyTable.Index:  		token = (token & 0xFFFFFF) << 2 | 2;  		break;  	default:  		throw new InvalidOperationException ();  	}  	records [i].Parent = token;  }  
Magic Number,IKVM.Reflection.Metadata,DeclSecurityTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: switch (token >> 24) {  case TypeDefTable.Index:  	token = (token & 0xFFFFFF) << 2 | 0;  	break;  case MethodDefTable.Index:  	token = (token & 0xFFFFFF) << 2 | 1;  	break;  case AssemblyTable.Index:  	token = (token & 0xFFFFFF) << 2 | 2;  	break;  default:  	throw new InvalidOperationException ();  }  
Magic Number,IKVM.Reflection.Metadata,DeclSecurityTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: switch (token >> 24) {  case TypeDefTable.Index:  	token = (token & 0xFFFFFF) << 2 | 0;  	break;  case MethodDefTable.Index:  	token = (token & 0xFFFFFF) << 2 | 1;  	break;  case AssemblyTable.Index:  	token = (token & 0xFFFFFF) << 2 | 2;  	break;  default:  	throw new InvalidOperationException ();  }  
Magic Number,IKVM.Reflection.Metadata,DeclSecurityTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: switch (token >> 24) {  case TypeDefTable.Index:  	token = (token & 0xFFFFFF) << 2 | 0;  	break;  case MethodDefTable.Index:  	token = (token & 0xFFFFFF) << 2 | 1;  	break;  case AssemblyTable.Index:  	token = (token & 0xFFFFFF) << 2 | 2;  	break;  default:  	throw new InvalidOperationException ();  }  
Magic Number,IKVM.Reflection.Metadata,DeclSecurityTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: switch (token >> 24) {  case TypeDefTable.Index:  	token = (token & 0xFFFFFF) << 2 | 0;  	break;  case MethodDefTable.Index:  	token = (token & 0xFFFFFF) << 2 | 1;  	break;  case AssemblyTable.Index:  	token = (token & 0xFFFFFF) << 2 | 2;  	break;  default:  	throw new InvalidOperationException ();  }  
Magic Number,IKVM.Reflection.Metadata,DeclSecurityTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: switch (token >> 24) {  case TypeDefTable.Index:  	token = (token & 0xFFFFFF) << 2 | 0;  	break;  case MethodDefTable.Index:  	token = (token & 0xFFFFFF) << 2 | 1;  	break;  case AssemblyTable.Index:  	token = (token & 0xFFFFFF) << 2 | 2;  	break;  default:  	throw new InvalidOperationException ();  }  
Magic Number,IKVM.Reflection.Metadata,DeclSecurityTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: token = (token & 0xFFFFFF) << 2 | 0;  
Magic Number,IKVM.Reflection.Metadata,DeclSecurityTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: token = (token & 0xFFFFFF) << 2 | 1;  
Magic Number,IKVM.Reflection.Metadata,DeclSecurityTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: token = (token & 0xFFFFFF) << 2 | 2;  
Magic Number,IKVM.Reflection.Metadata,DeclSecurityTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: token = (token & 0xFFFFFF) << 2 | 2;  
Magic Number,IKVM.Reflection.Metadata,ClassLayoutTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,GetRowSize,The following statement contains a magic number: return rsc.AddFixed (6).WriteTypeDef ().Value;  
Magic Number,IKVM.Reflection.Metadata,FieldLayoutTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,GetRowSize,The following statement contains a magic number: return rsc.AddFixed (4).WriteField ().Value;  
Magic Number,IKVM.Reflection.Metadata,EventTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,GetRowSize,The following statement contains a magic number: return rsc.AddFixed (2).WriteStringIndex ().WriteTypeDefOrRef ().Value;  
Magic Number,IKVM.Reflection.Metadata,PropertyTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,GetRowSize,The following statement contains a magic number: return rsc.AddFixed (2).WriteStringIndex ().WriteBlobIndex ().Value;  
Magic Number,IKVM.Reflection.Metadata,MethodSemanticsTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,GetRowSize,The following statement contains a magic number: return rsc.AddFixed (2).WriteMethodDef ().WriteHasSemantics ().Value;  
Magic Number,IKVM.Reflection.Metadata,MethodSemanticsTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: for (int i = 0; i < rowCount; i++) {  	moduleBuilder.FixupPseudoToken (ref records [i].Method);  	int token = records [i].Association;  	// do the HasSemantics encoding' so that we can sort the table  	switch (token >> 24) {  	case EventTable.Index:  		token = (token & 0xFFFFFF) << 1 | 0;  		break;  	case PropertyTable.Index:  		token = (token & 0xFFFFFF) << 1 | 1;  		break;  	default:  		throw new InvalidOperationException ();  	}  	records [i].Association = token;  }  
Magic Number,IKVM.Reflection.Metadata,MethodSemanticsTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: switch (token >> 24) {  case EventTable.Index:  	token = (token & 0xFFFFFF) << 1 | 0;  	break;  case PropertyTable.Index:  	token = (token & 0xFFFFFF) << 1 | 1;  	break;  default:  	throw new InvalidOperationException ();  }  
Magic Number,IKVM.Reflection.Metadata,MethodSemanticsTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,GetMethod,The following statement contains a magic number: foreach (int i in Filter (token)) {  	if ((records [i].Semantics & semantics) != 0) {  		MethodBase method = module.ResolveMethod ((MethodDefTable.Index << 24) + records [i].Method);  		if (nonPublic || method.IsPublic) {  			return (MethodInfo)method;  		}  	}  }  
Magic Number,IKVM.Reflection.Metadata,MethodSemanticsTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,GetMethod,The following statement contains a magic number: if ((records [i].Semantics & semantics) != 0) {  	MethodBase method = module.ResolveMethod ((MethodDefTable.Index << 24) + records [i].Method);  	if (nonPublic || method.IsPublic) {  		return (MethodInfo)method;  	}  }  
Magic Number,IKVM.Reflection.Metadata,MethodSemanticsTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,GetMethods,The following statement contains a magic number: foreach (int i in Filter (token)) {  	if ((records [i].Semantics & semantics) != 0) {  		MethodInfo method = (MethodInfo)module.ResolveMethod ((MethodDefTable.Index << 24) + records [i].Method);  		if (nonPublic || method.IsPublic) {  			methods.Add (method);  		}  	}  }  
Magic Number,IKVM.Reflection.Metadata,MethodSemanticsTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,GetMethods,The following statement contains a magic number: if ((records [i].Semantics & semantics) != 0) {  	MethodInfo method = (MethodInfo)module.ResolveMethod ((MethodDefTable.Index << 24) + records [i].Method);  	if (nonPublic || method.IsPublic) {  		methods.Add (method);  	}  }  
Magic Number,IKVM.Reflection.Metadata,MethodSemanticsTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,ComputeFlags,The following statement contains a magic number: foreach (int i in Filter (token)) {  	MethodBase method = module.ResolveMethod ((MethodDefTable.Index << 24) + records [i].Method);  	isPublic |= method.IsPublic;  	isNonPrivate |= (method.Attributes & MethodAttributes.MemberAccessMask) > MethodAttributes.Private;  	isStatic |= method.IsStatic;  }  
Magic Number,IKVM.Reflection.Metadata,ImplMapTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,GetRowSize,The following statement contains a magic number: return rsc.AddFixed (2).WriteMemberForwarded ().WriteStringIndex ().WriteModuleRef ().Value;  
Magic Number,IKVM.Reflection.Metadata,FieldRVATable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,GetRowSize,The following statement contains a magic number: return rsc.AddFixed (4).WriteField ().Value;  
Magic Number,IKVM.Reflection.Metadata,AssemblyTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,GetRowSize,The following statement contains a magic number: return rsc.AddFixed (16).WriteBlobIndex ().WriteStringIndex ().WriteStringIndex ().Value;  
Magic Number,IKVM.Reflection.Metadata,AssemblyRefTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,GetRowSize,The following statement contains a magic number: return rsc.AddFixed (12).WriteBlobIndex ().WriteStringIndex ().WriteStringIndex ().WriteBlobIndex ().Value;  
Magic Number,IKVM.Reflection.Metadata,FileTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,GetRowSize,The following statement contains a magic number: return rsc.AddFixed (4).WriteStringIndex ().WriteBlobIndex ().Value;  
Magic Number,IKVM.Reflection.Metadata,ExportedTypeTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,GetRowSize,The following statement contains a magic number: return rsc.AddFixed (8).WriteStringIndex ().WriteStringIndex ().WriteImplementation ().Value;  
Magic Number,IKVM.Reflection.Metadata,ManifestResourceTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,GetRowSize,The following statement contains a magic number: return rsc.AddFixed (8).WriteStringIndex ().WriteImplementation ().Value;  
Magic Number,IKVM.Reflection.Metadata,GenericParamTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,GetRowSize,The following statement contains a magic number: return rsc.AddFixed (4).WriteTypeOrMethodDef ().WriteStringIndex ().Value;  
Magic Number,IKVM.Reflection.Metadata,GenericParamTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: for (int i = 0; i < rowCount; i++) {  	int token = records [i].Owner;  	moduleBuilder.FixupPseudoToken (ref token);  	// do the TypeOrMethodDef encoding' so that we can sort the table  	switch (token >> 24) {  	case TypeDefTable.Index:  		records [i].Owner = (token & 0xFFFFFF) << 1 | 0;  		break;  	case MethodDefTable.Index:  		records [i].Owner = (token & 0xFFFFFF) << 1 | 1;  		break;  	default:  		throw new InvalidOperationException ();  	}  	records [i].unsortedIndex = i;  }  
Magic Number,IKVM.Reflection.Metadata,GenericParamTable,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Metadata\Tables.cs,Fixup,The following statement contains a magic number: switch (token >> 24) {  case TypeDefTable.Index:  	records [i].Owner = (token & 0xFFFFFF) << 1 | 0;  	break;  case MethodDefTable.Index:  	records [i].Owner = (token & 0xFFFFFF) << 1 | 1;  	break;  default:  	throw new InvalidOperationException ();  }  
Magic Number,IKVM.Reflection.Reader,ByteReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ByteReader.cs,ReadCompressedInt,The following statement contains a magic number: if (b1 <= 0x7F) {  	return b1;  } else if ((b1 & 0xC0) == 0x80) {  	byte b2 = ReadByte ();  	return ((b1 & 0x3F) << 8) | b2;  } else {  	byte b2 = ReadByte ();  	byte b3 = ReadByte ();  	byte b4 = ReadByte ();  	return ((b1 & 0x3F) << 24) + (b2 << 16) + (b3 << 8) + b4;  }  
Magic Number,IKVM.Reflection.Reader,ByteReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ByteReader.cs,ReadCompressedInt,The following statement contains a magic number: if (b1 <= 0x7F) {  	return b1;  } else if ((b1 & 0xC0) == 0x80) {  	byte b2 = ReadByte ();  	return ((b1 & 0x3F) << 8) | b2;  } else {  	byte b2 = ReadByte ();  	byte b3 = ReadByte ();  	byte b4 = ReadByte ();  	return ((b1 & 0x3F) << 24) + (b2 << 16) + (b3 << 8) + b4;  }  
Magic Number,IKVM.Reflection.Reader,ByteReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ByteReader.cs,ReadCompressedInt,The following statement contains a magic number: if (b1 <= 0x7F) {  	return b1;  } else if ((b1 & 0xC0) == 0x80) {  	byte b2 = ReadByte ();  	return ((b1 & 0x3F) << 8) | b2;  } else {  	byte b2 = ReadByte ();  	byte b3 = ReadByte ();  	byte b4 = ReadByte ();  	return ((b1 & 0x3F) << 24) + (b2 << 16) + (b3 << 8) + b4;  }  
Magic Number,IKVM.Reflection.Reader,ByteReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ByteReader.cs,ReadCompressedInt,The following statement contains a magic number: if (b1 <= 0x7F) {  	return b1;  } else if ((b1 & 0xC0) == 0x80) {  	byte b2 = ReadByte ();  	return ((b1 & 0x3F) << 8) | b2;  } else {  	byte b2 = ReadByte ();  	byte b3 = ReadByte ();  	byte b4 = ReadByte ();  	return ((b1 & 0x3F) << 24) + (b2 << 16) + (b3 << 8) + b4;  }  
Magic Number,IKVM.Reflection.Reader,ByteReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ByteReader.cs,ReadCompressedInt,The following statement contains a magic number: if ((b1 & 0xC0) == 0x80) {  	byte b2 = ReadByte ();  	return ((b1 & 0x3F) << 8) | b2;  } else {  	byte b2 = ReadByte ();  	byte b3 = ReadByte ();  	byte b4 = ReadByte ();  	return ((b1 & 0x3F) << 24) + (b2 << 16) + (b3 << 8) + b4;  }  
Magic Number,IKVM.Reflection.Reader,ByteReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ByteReader.cs,ReadCompressedInt,The following statement contains a magic number: if ((b1 & 0xC0) == 0x80) {  	byte b2 = ReadByte ();  	return ((b1 & 0x3F) << 8) | b2;  } else {  	byte b2 = ReadByte ();  	byte b3 = ReadByte ();  	byte b4 = ReadByte ();  	return ((b1 & 0x3F) << 24) + (b2 << 16) + (b3 << 8) + b4;  }  
Magic Number,IKVM.Reflection.Reader,ByteReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ByteReader.cs,ReadCompressedInt,The following statement contains a magic number: if ((b1 & 0xC0) == 0x80) {  	byte b2 = ReadByte ();  	return ((b1 & 0x3F) << 8) | b2;  } else {  	byte b2 = ReadByte ();  	byte b3 = ReadByte ();  	byte b4 = ReadByte ();  	return ((b1 & 0x3F) << 24) + (b2 << 16) + (b3 << 8) + b4;  }  
Magic Number,IKVM.Reflection.Reader,ByteReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ByteReader.cs,ReadCompressedInt,The following statement contains a magic number: if ((b1 & 0xC0) == 0x80) {  	byte b2 = ReadByte ();  	return ((b1 & 0x3F) << 8) | b2;  } else {  	byte b2 = ReadByte ();  	byte b3 = ReadByte ();  	byte b4 = ReadByte ();  	return ((b1 & 0x3F) << 24) + (b2 << 16) + (b3 << 8) + b4;  }  
Magic Number,IKVM.Reflection.Reader,ByteReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ByteReader.cs,ReadCompressedInt,The following statement contains a magic number: return ((b1 & 0x3F) << 8) | b2;  
Magic Number,IKVM.Reflection.Reader,ByteReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ByteReader.cs,ReadCompressedInt,The following statement contains a magic number: return ((b1 & 0x3F) << 24) + (b2 << 16) + (b3 << 8) + b4;  
Magic Number,IKVM.Reflection.Reader,ByteReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ByteReader.cs,ReadCompressedInt,The following statement contains a magic number: return ((b1 & 0x3F) << 24) + (b2 << 16) + (b3 << 8) + b4;  
Magic Number,IKVM.Reflection.Reader,ByteReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ByteReader.cs,ReadCompressedInt,The following statement contains a magic number: return ((b1 & 0x3F) << 24) + (b2 << 16) + (b3 << 8) + b4;  
Magic Number,IKVM.Reflection.Reader,ByteReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ByteReader.cs,ReadInt16,The following statement contains a magic number: if (end - pos < 2)  	throw new BadImageFormatException ();  
Magic Number,IKVM.Reflection.Reader,ByteReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ByteReader.cs,ReadInt16,The following statement contains a magic number: return (short)(b1 | (b2 << 8));  
Magic Number,IKVM.Reflection.Reader,ByteReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ByteReader.cs,ReadInt32,The following statement contains a magic number: if (end - pos < 4)  	throw new BadImageFormatException ();  
Magic Number,IKVM.Reflection.Reader,ByteReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ByteReader.cs,ReadInt32,The following statement contains a magic number: return (int)(b1 | (b2 << 8) | (b3 << 16) | (b4 << 24));  
Magic Number,IKVM.Reflection.Reader,ByteReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ByteReader.cs,ReadInt32,The following statement contains a magic number: return (int)(b1 | (b2 << 8) | (b3 << 16) | (b4 << 24));  
Magic Number,IKVM.Reflection.Reader,ByteReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ByteReader.cs,ReadInt32,The following statement contains a magic number: return (int)(b1 | (b2 << 8) | (b3 << 16) | (b4 << 24));  
Magic Number,IKVM.Reflection.Reader,ByteReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ByteReader.cs,ReadInt64,The following statement contains a magic number: return (long)(lo | (hi << 32));  
Magic Number,IKVM.Reflection.Reader,EventInfoImpl,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\EventInfoImpl.cs,GetHashCode,The following statement contains a magic number: return declaringType.GetHashCode () * 123 + index;  
Magic Number,IKVM.Reflection.Reader,GenericTypeParameter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\GenericTypeParameter.cs,BindTypeParameters,The following statement contains a magic number: if ((owner >> 24) == MethodDefTable.Index) {  	return binder.BindMethodParameter (this);  } else {  	return binder.BindTypeParameter (this);  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadInt16,The following statement contains a magic number: if (pos > bufferLength - 2) {  	FillBuffer (2);  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadInt16,The following statement contains a magic number: if (pos > bufferLength - 2) {  	FillBuffer (2);  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadInt16,The following statement contains a magic number: FillBuffer (2);  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadInt16,The following statement contains a magic number: return (short)(b1 | (b2 << 8));  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadInt32,The following statement contains a magic number: if (pos > bufferLength - 4) {  	FillBuffer (4);  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadInt32,The following statement contains a magic number: if (pos > bufferLength - 4) {  	FillBuffer (4);  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadInt32,The following statement contains a magic number: FillBuffer (4);  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadInt32,The following statement contains a magic number: return b1 | (b2 << 8) | (b3 << 16) | (b4 << 24);  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadInt32,The following statement contains a magic number: return b1 | (b2 << 8) | (b3 << 16) | (b4 << 24);  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadInt32,The following statement contains a magic number: return b1 | (b2 << 8) | (b3 << 16) | (b4 << 24);  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadResolutionScope,The following statement contains a magic number: switch (codedIndex & 3) {  case 0:  	return (ModuleTable.Index << 24) + (codedIndex >> 2);  case 1:  	return (ModuleRefTable.Index << 24) + (codedIndex >> 2);  case 2:  	return (AssemblyRefTable.Index << 24) + (codedIndex >> 2);  case 3:  	return (TypeRefTable.Index << 24) + (codedIndex >> 2);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadResolutionScope,The following statement contains a magic number: switch (codedIndex & 3) {  case 0:  	return (ModuleTable.Index << 24) + (codedIndex >> 2);  case 1:  	return (ModuleRefTable.Index << 24) + (codedIndex >> 2);  case 2:  	return (AssemblyRefTable.Index << 24) + (codedIndex >> 2);  case 3:  	return (TypeRefTable.Index << 24) + (codedIndex >> 2);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadResolutionScope,The following statement contains a magic number: switch (codedIndex & 3) {  case 0:  	return (ModuleTable.Index << 24) + (codedIndex >> 2);  case 1:  	return (ModuleRefTable.Index << 24) + (codedIndex >> 2);  case 2:  	return (AssemblyRefTable.Index << 24) + (codedIndex >> 2);  case 3:  	return (TypeRefTable.Index << 24) + (codedIndex >> 2);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadResolutionScope,The following statement contains a magic number: switch (codedIndex & 3) {  case 0:  	return (ModuleTable.Index << 24) + (codedIndex >> 2);  case 1:  	return (ModuleRefTable.Index << 24) + (codedIndex >> 2);  case 2:  	return (AssemblyRefTable.Index << 24) + (codedIndex >> 2);  case 3:  	return (TypeRefTable.Index << 24) + (codedIndex >> 2);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadResolutionScope,The following statement contains a magic number: switch (codedIndex & 3) {  case 0:  	return (ModuleTable.Index << 24) + (codedIndex >> 2);  case 1:  	return (ModuleRefTable.Index << 24) + (codedIndex >> 2);  case 2:  	return (AssemblyRefTable.Index << 24) + (codedIndex >> 2);  case 3:  	return (TypeRefTable.Index << 24) + (codedIndex >> 2);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadResolutionScope,The following statement contains a magic number: switch (codedIndex & 3) {  case 0:  	return (ModuleTable.Index << 24) + (codedIndex >> 2);  case 1:  	return (ModuleRefTable.Index << 24) + (codedIndex >> 2);  case 2:  	return (AssemblyRefTable.Index << 24) + (codedIndex >> 2);  case 3:  	return (TypeRefTable.Index << 24) + (codedIndex >> 2);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadResolutionScope,The following statement contains a magic number: switch (codedIndex & 3) {  case 0:  	return (ModuleTable.Index << 24) + (codedIndex >> 2);  case 1:  	return (ModuleRefTable.Index << 24) + (codedIndex >> 2);  case 2:  	return (AssemblyRefTable.Index << 24) + (codedIndex >> 2);  case 3:  	return (TypeRefTable.Index << 24) + (codedIndex >> 2);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadResolutionScope,The following statement contains a magic number: switch (codedIndex & 3) {  case 0:  	return (ModuleTable.Index << 24) + (codedIndex >> 2);  case 1:  	return (ModuleRefTable.Index << 24) + (codedIndex >> 2);  case 2:  	return (AssemblyRefTable.Index << 24) + (codedIndex >> 2);  case 3:  	return (TypeRefTable.Index << 24) + (codedIndex >> 2);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadResolutionScope,The following statement contains a magic number: switch (codedIndex & 3) {  case 0:  	return (ModuleTable.Index << 24) + (codedIndex >> 2);  case 1:  	return (ModuleRefTable.Index << 24) + (codedIndex >> 2);  case 2:  	return (AssemblyRefTable.Index << 24) + (codedIndex >> 2);  case 3:  	return (TypeRefTable.Index << 24) + (codedIndex >> 2);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadResolutionScope,The following statement contains a magic number: switch (codedIndex & 3) {  case 0:  	return (ModuleTable.Index << 24) + (codedIndex >> 2);  case 1:  	return (ModuleRefTable.Index << 24) + (codedIndex >> 2);  case 2:  	return (AssemblyRefTable.Index << 24) + (codedIndex >> 2);  case 3:  	return (TypeRefTable.Index << 24) + (codedIndex >> 2);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadResolutionScope,The following statement contains a magic number: switch (codedIndex & 3) {  case 0:  	return (ModuleTable.Index << 24) + (codedIndex >> 2);  case 1:  	return (ModuleRefTable.Index << 24) + (codedIndex >> 2);  case 2:  	return (AssemblyRefTable.Index << 24) + (codedIndex >> 2);  case 3:  	return (TypeRefTable.Index << 24) + (codedIndex >> 2);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadResolutionScope,The following statement contains a magic number: return (ModuleTable.Index << 24) + (codedIndex >> 2);  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadResolutionScope,The following statement contains a magic number: return (ModuleTable.Index << 24) + (codedIndex >> 2);  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadResolutionScope,The following statement contains a magic number: return (ModuleRefTable.Index << 24) + (codedIndex >> 2);  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadResolutionScope,The following statement contains a magic number: return (ModuleRefTable.Index << 24) + (codedIndex >> 2);  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadResolutionScope,The following statement contains a magic number: return (AssemblyRefTable.Index << 24) + (codedIndex >> 2);  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadResolutionScope,The following statement contains a magic number: return (AssemblyRefTable.Index << 24) + (codedIndex >> 2);  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadResolutionScope,The following statement contains a magic number: return (TypeRefTable.Index << 24) + (codedIndex >> 2);  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadResolutionScope,The following statement contains a magic number: return (TypeRefTable.Index << 24) + (codedIndex >> 2);  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadTypeDefOrRef,The following statement contains a magic number: switch (codedIndex & 3) {  case 0:  	return (TypeDefTable.Index << 24) + (codedIndex >> 2);  case 1:  	return (TypeRefTable.Index << 24) + (codedIndex >> 2);  case 2:  	return (TypeSpecTable.Index << 24) + (codedIndex >> 2);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadTypeDefOrRef,The following statement contains a magic number: switch (codedIndex & 3) {  case 0:  	return (TypeDefTable.Index << 24) + (codedIndex >> 2);  case 1:  	return (TypeRefTable.Index << 24) + (codedIndex >> 2);  case 2:  	return (TypeSpecTable.Index << 24) + (codedIndex >> 2);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadTypeDefOrRef,The following statement contains a magic number: switch (codedIndex & 3) {  case 0:  	return (TypeDefTable.Index << 24) + (codedIndex >> 2);  case 1:  	return (TypeRefTable.Index << 24) + (codedIndex >> 2);  case 2:  	return (TypeSpecTable.Index << 24) + (codedIndex >> 2);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadTypeDefOrRef,The following statement contains a magic number: switch (codedIndex & 3) {  case 0:  	return (TypeDefTable.Index << 24) + (codedIndex >> 2);  case 1:  	return (TypeRefTable.Index << 24) + (codedIndex >> 2);  case 2:  	return (TypeSpecTable.Index << 24) + (codedIndex >> 2);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadTypeDefOrRef,The following statement contains a magic number: switch (codedIndex & 3) {  case 0:  	return (TypeDefTable.Index << 24) + (codedIndex >> 2);  case 1:  	return (TypeRefTable.Index << 24) + (codedIndex >> 2);  case 2:  	return (TypeSpecTable.Index << 24) + (codedIndex >> 2);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadTypeDefOrRef,The following statement contains a magic number: switch (codedIndex & 3) {  case 0:  	return (TypeDefTable.Index << 24) + (codedIndex >> 2);  case 1:  	return (TypeRefTable.Index << 24) + (codedIndex >> 2);  case 2:  	return (TypeSpecTable.Index << 24) + (codedIndex >> 2);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadTypeDefOrRef,The following statement contains a magic number: switch (codedIndex & 3) {  case 0:  	return (TypeDefTable.Index << 24) + (codedIndex >> 2);  case 1:  	return (TypeRefTable.Index << 24) + (codedIndex >> 2);  case 2:  	return (TypeSpecTable.Index << 24) + (codedIndex >> 2);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadTypeDefOrRef,The following statement contains a magic number: switch (codedIndex & 3) {  case 0:  	return (TypeDefTable.Index << 24) + (codedIndex >> 2);  case 1:  	return (TypeRefTable.Index << 24) + (codedIndex >> 2);  case 2:  	return (TypeSpecTable.Index << 24) + (codedIndex >> 2);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadTypeDefOrRef,The following statement contains a magic number: return (TypeDefTable.Index << 24) + (codedIndex >> 2);  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadTypeDefOrRef,The following statement contains a magic number: return (TypeDefTable.Index << 24) + (codedIndex >> 2);  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadTypeDefOrRef,The following statement contains a magic number: return (TypeRefTable.Index << 24) + (codedIndex >> 2);  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadTypeDefOrRef,The following statement contains a magic number: return (TypeRefTable.Index << 24) + (codedIndex >> 2);  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadTypeDefOrRef,The following statement contains a magic number: return (TypeSpecTable.Index << 24) + (codedIndex >> 2);  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadTypeDefOrRef,The following statement contains a magic number: return (TypeSpecTable.Index << 24) + (codedIndex >> 2);  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadMemberRefParent,The following statement contains a magic number: switch (codedIndex & 7) {  case 0:  	return (TypeDefTable.Index << 24) + (codedIndex >> 3);  case 1:  	return (TypeRefTable.Index << 24) + (codedIndex >> 3);  case 2:  	return (ModuleRefTable.Index << 24) + (codedIndex >> 3);  case 3:  	return (MethodDefTable.Index << 24) + (codedIndex >> 3);  case 4:  	return (TypeSpecTable.Index << 24) + (codedIndex >> 3);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadMemberRefParent,The following statement contains a magic number: switch (codedIndex & 7) {  case 0:  	return (TypeDefTable.Index << 24) + (codedIndex >> 3);  case 1:  	return (TypeRefTable.Index << 24) + (codedIndex >> 3);  case 2:  	return (ModuleRefTable.Index << 24) + (codedIndex >> 3);  case 3:  	return (MethodDefTable.Index << 24) + (codedIndex >> 3);  case 4:  	return (TypeSpecTable.Index << 24) + (codedIndex >> 3);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadMemberRefParent,The following statement contains a magic number: switch (codedIndex & 7) {  case 0:  	return (TypeDefTable.Index << 24) + (codedIndex >> 3);  case 1:  	return (TypeRefTable.Index << 24) + (codedIndex >> 3);  case 2:  	return (ModuleRefTable.Index << 24) + (codedIndex >> 3);  case 3:  	return (MethodDefTable.Index << 24) + (codedIndex >> 3);  case 4:  	return (TypeSpecTable.Index << 24) + (codedIndex >> 3);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadMemberRefParent,The following statement contains a magic number: switch (codedIndex & 7) {  case 0:  	return (TypeDefTable.Index << 24) + (codedIndex >> 3);  case 1:  	return (TypeRefTable.Index << 24) + (codedIndex >> 3);  case 2:  	return (ModuleRefTable.Index << 24) + (codedIndex >> 3);  case 3:  	return (MethodDefTable.Index << 24) + (codedIndex >> 3);  case 4:  	return (TypeSpecTable.Index << 24) + (codedIndex >> 3);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadMemberRefParent,The following statement contains a magic number: switch (codedIndex & 7) {  case 0:  	return (TypeDefTable.Index << 24) + (codedIndex >> 3);  case 1:  	return (TypeRefTable.Index << 24) + (codedIndex >> 3);  case 2:  	return (ModuleRefTable.Index << 24) + (codedIndex >> 3);  case 3:  	return (MethodDefTable.Index << 24) + (codedIndex >> 3);  case 4:  	return (TypeSpecTable.Index << 24) + (codedIndex >> 3);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadMemberRefParent,The following statement contains a magic number: switch (codedIndex & 7) {  case 0:  	return (TypeDefTable.Index << 24) + (codedIndex >> 3);  case 1:  	return (TypeRefTable.Index << 24) + (codedIndex >> 3);  case 2:  	return (ModuleRefTable.Index << 24) + (codedIndex >> 3);  case 3:  	return (MethodDefTable.Index << 24) + (codedIndex >> 3);  case 4:  	return (TypeSpecTable.Index << 24) + (codedIndex >> 3);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadMemberRefParent,The following statement contains a magic number: switch (codedIndex & 7) {  case 0:  	return (TypeDefTable.Index << 24) + (codedIndex >> 3);  case 1:  	return (TypeRefTable.Index << 24) + (codedIndex >> 3);  case 2:  	return (ModuleRefTable.Index << 24) + (codedIndex >> 3);  case 3:  	return (MethodDefTable.Index << 24) + (codedIndex >> 3);  case 4:  	return (TypeSpecTable.Index << 24) + (codedIndex >> 3);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadMemberRefParent,The following statement contains a magic number: switch (codedIndex & 7) {  case 0:  	return (TypeDefTable.Index << 24) + (codedIndex >> 3);  case 1:  	return (TypeRefTable.Index << 24) + (codedIndex >> 3);  case 2:  	return (ModuleRefTable.Index << 24) + (codedIndex >> 3);  case 3:  	return (MethodDefTable.Index << 24) + (codedIndex >> 3);  case 4:  	return (TypeSpecTable.Index << 24) + (codedIndex >> 3);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadMemberRefParent,The following statement contains a magic number: switch (codedIndex & 7) {  case 0:  	return (TypeDefTable.Index << 24) + (codedIndex >> 3);  case 1:  	return (TypeRefTable.Index << 24) + (codedIndex >> 3);  case 2:  	return (ModuleRefTable.Index << 24) + (codedIndex >> 3);  case 3:  	return (MethodDefTable.Index << 24) + (codedIndex >> 3);  case 4:  	return (TypeSpecTable.Index << 24) + (codedIndex >> 3);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadMemberRefParent,The following statement contains a magic number: switch (codedIndex & 7) {  case 0:  	return (TypeDefTable.Index << 24) + (codedIndex >> 3);  case 1:  	return (TypeRefTable.Index << 24) + (codedIndex >> 3);  case 2:  	return (ModuleRefTable.Index << 24) + (codedIndex >> 3);  case 3:  	return (MethodDefTable.Index << 24) + (codedIndex >> 3);  case 4:  	return (TypeSpecTable.Index << 24) + (codedIndex >> 3);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadMemberRefParent,The following statement contains a magic number: switch (codedIndex & 7) {  case 0:  	return (TypeDefTable.Index << 24) + (codedIndex >> 3);  case 1:  	return (TypeRefTable.Index << 24) + (codedIndex >> 3);  case 2:  	return (ModuleRefTable.Index << 24) + (codedIndex >> 3);  case 3:  	return (MethodDefTable.Index << 24) + (codedIndex >> 3);  case 4:  	return (TypeSpecTable.Index << 24) + (codedIndex >> 3);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadMemberRefParent,The following statement contains a magic number: switch (codedIndex & 7) {  case 0:  	return (TypeDefTable.Index << 24) + (codedIndex >> 3);  case 1:  	return (TypeRefTable.Index << 24) + (codedIndex >> 3);  case 2:  	return (ModuleRefTable.Index << 24) + (codedIndex >> 3);  case 3:  	return (MethodDefTable.Index << 24) + (codedIndex >> 3);  case 4:  	return (TypeSpecTable.Index << 24) + (codedIndex >> 3);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadMemberRefParent,The following statement contains a magic number: switch (codedIndex & 7) {  case 0:  	return (TypeDefTable.Index << 24) + (codedIndex >> 3);  case 1:  	return (TypeRefTable.Index << 24) + (codedIndex >> 3);  case 2:  	return (ModuleRefTable.Index << 24) + (codedIndex >> 3);  case 3:  	return (MethodDefTable.Index << 24) + (codedIndex >> 3);  case 4:  	return (TypeSpecTable.Index << 24) + (codedIndex >> 3);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadMemberRefParent,The following statement contains a magic number: switch (codedIndex & 7) {  case 0:  	return (TypeDefTable.Index << 24) + (codedIndex >> 3);  case 1:  	return (TypeRefTable.Index << 24) + (codedIndex >> 3);  case 2:  	return (ModuleRefTable.Index << 24) + (codedIndex >> 3);  case 3:  	return (MethodDefTable.Index << 24) + (codedIndex >> 3);  case 4:  	return (TypeSpecTable.Index << 24) + (codedIndex >> 3);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadMemberRefParent,The following statement contains a magic number: return (TypeDefTable.Index << 24) + (codedIndex >> 3);  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadMemberRefParent,The following statement contains a magic number: return (TypeDefTable.Index << 24) + (codedIndex >> 3);  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadMemberRefParent,The following statement contains a magic number: return (TypeRefTable.Index << 24) + (codedIndex >> 3);  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadMemberRefParent,The following statement contains a magic number: return (TypeRefTable.Index << 24) + (codedIndex >> 3);  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadMemberRefParent,The following statement contains a magic number: return (ModuleRefTable.Index << 24) + (codedIndex >> 3);  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadMemberRefParent,The following statement contains a magic number: return (ModuleRefTable.Index << 24) + (codedIndex >> 3);  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadMemberRefParent,The following statement contains a magic number: return (MethodDefTable.Index << 24) + (codedIndex >> 3);  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadMemberRefParent,The following statement contains a magic number: return (MethodDefTable.Index << 24) + (codedIndex >> 3);  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadMemberRefParent,The following statement contains a magic number: return (TypeSpecTable.Index << 24) + (codedIndex >> 3);  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadMemberRefParent,The following statement contains a magic number: return (TypeSpecTable.Index << 24) + (codedIndex >> 3);  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasCustomAttribute,The following statement contains a magic number: switch (codedIndex & 31) {  case 0:  	return (MethodDefTable.Index << 24) + (codedIndex >> 5);  case 1:  	return (FieldTable.Index << 24) + (codedIndex >> 5);  case 2:  	return (TypeRefTable.Index << 24) + (codedIndex >> 5);  case 3:  	return (TypeDefTable.Index << 24) + (codedIndex >> 5);  case 4:  	return (ParamTable.Index << 24) + (codedIndex >> 5);  case 5:  	return (InterfaceImplTable.Index << 24) + (codedIndex >> 5);  case 6:  	return (MemberRefTable.Index << 24) + (codedIndex >> 5);  case 7:  	return (ModuleTable.Index << 24) + (codedIndex >> 5);  case 8:  	throw new BadImageFormatException ();  case 9:  	return (PropertyTable.Index << 24) + (codedIndex >> 5);  case 10:  	return (EventTable.Index << 24) + (codedIndex >> 5);  case 11:  	return (StandAloneSigTable.Index << 24) + (codedIndex >> 5);  case 12:  	return (ModuleRefTable.Index << 24) + (codedIndex >> 5);  case 13:  	return (TypeSpecTable.Index << 24) + (codedIndex >> 5);  case 14:  	return (AssemblyTable.Index << 24) + (codedIndex >> 5);  case 15:  	return (AssemblyRefTable.Index << 24) + (codedIndex >> 5);  case 16:  	return (FileTable.Index << 24) + (codedIndex >> 5);  case 17:  	return (ExportedTypeTable.Index << 24) + (codedIndex >> 5);  case 18:  	return (ManifestResourceTable.Index << 24) + (codedIndex >> 5);  case 19:  	return (GenericParamTable.Index << 24) + (codedIndex >> 5);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasCustomAttribute,The following statement contains a magic number: switch (codedIndex & 31) {  case 0:  	return (MethodDefTable.Index << 24) + (codedIndex >> 5);  case 1:  	return (FieldTable.Index << 24) + (codedIndex >> 5);  case 2:  	return (TypeRefTable.Index << 24) + (codedIndex >> 5);  case 3:  	return (TypeDefTable.Index << 24) + (codedIndex >> 5);  case 4:  	return (ParamTable.Index << 24) + (codedIndex >> 5);  case 5:  	return (InterfaceImplTable.Index << 24) + (codedIndex >> 5);  case 6:  	return (MemberRefTable.Index << 24) + (codedIndex >> 5);  case 7:  	return (ModuleTable.Index << 24) + (codedIndex >> 5);  case 8:  	throw new BadImageFormatException ();  case 9:  	return (PropertyTable.Index << 24) + (codedIndex >> 5);  case 10:  	return (EventTable.Index << 24) + (codedIndex >> 5);  case 11:  	return (StandAloneSigTable.Index << 24) + (codedIndex >> 5);  case 12:  	return (ModuleRefTable.Index << 24) + (codedIndex >> 5);  case 13:  	return (TypeSpecTable.Index << 24) + (codedIndex >> 5);  case 14:  	return (AssemblyTable.Index << 24) + (codedIndex >> 5);  case 15:  	return (AssemblyRefTable.Index << 24) + (codedIndex >> 5);  case 16:  	return (FileTable.Index << 24) + (codedIndex >> 5);  case 17:  	return (ExportedTypeTable.Index << 24) + (codedIndex >> 5);  case 18:  	return (ManifestResourceTable.Index << 24) + (codedIndex >> 5);  case 19:  	return (GenericParamTable.Index << 24) + (codedIndex >> 5);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasCustomAttribute,The following statement contains a magic number: switch (codedIndex & 31) {  case 0:  	return (MethodDefTable.Index << 24) + (codedIndex >> 5);  case 1:  	return (FieldTable.Index << 24) + (codedIndex >> 5);  case 2:  	return (TypeRefTable.Index << 24) + (codedIndex >> 5);  case 3:  	return (TypeDefTable.Index << 24) + (codedIndex >> 5);  case 4:  	return (ParamTable.Index << 24) + (codedIndex >> 5);  case 5:  	return (InterfaceImplTable.Index << 24) + (codedIndex >> 5);  case 6:  	return (MemberRefTable.Index << 24) + (codedIndex >> 5);  case 7:  	return (ModuleTable.Index << 24) + (codedIndex >> 5);  case 8:  	throw new BadImageFormatException ();  case 9:  	return (PropertyTable.Index << 24) + (codedIndex >> 5);  case 10:  	return (EventTable.Index << 24) + (codedIndex >> 5);  case 11:  	return (StandAloneSigTable.Index << 24) + (codedIndex >> 5);  case 12:  	return (ModuleRefTable.Index << 24) + (codedIndex >> 5);  case 13:  	return (TypeSpecTable.Index << 24) + (codedIndex >> 5);  case 14:  	return (AssemblyTable.Index << 24) + (codedIndex >> 5);  case 15:  	return (AssemblyRefTable.Index << 24) + (codedIndex >> 5);  case 16:  	return (FileTable.Index << 24) + (codedIndex >> 5);  case 17:  	return (ExportedTypeTable.Index << 24) + (codedIndex >> 5);  case 18:  	return (ManifestResourceTable.Index << 24) + (codedIndex >> 5);  case 19:  	return (GenericParamTable.Index << 24) + (codedIndex >> 5);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasCustomAttribute,The following statement contains a magic number: switch (codedIndex & 31) {  case 0:  	return (MethodDefTable.Index << 24) + (codedIndex >> 5);  case 1:  	return (FieldTable.Index << 24) + (codedIndex >> 5);  case 2:  	return (TypeRefTable.Index << 24) + (codedIndex >> 5);  case 3:  	return (TypeDefTable.Index << 24) + (codedIndex >> 5);  case 4:  	return (ParamTable.Index << 24) + (codedIndex >> 5);  case 5:  	return (InterfaceImplTable.Index << 24) + (codedIndex >> 5);  case 6:  	return (MemberRefTable.Index << 24) + (codedIndex >> 5);  case 7:  	return (ModuleTable.Index << 24) + (codedIndex >> 5);  case 8:  	throw new BadImageFormatException ();  case 9:  	return (PropertyTable.Index << 24) + (codedIndex >> 5);  case 10:  	return (EventTable.Index << 24) + (codedIndex >> 5);  case 11:  	return (StandAloneSigTable.Index << 24) + (codedIndex >> 5);  case 12:  	return (ModuleRefTable.Index << 24) + (codedIndex >> 5);  case 13:  	return (TypeSpecTable.Index << 24) + (codedIndex >> 5);  case 14:  	return (AssemblyTable.Index << 24) + (codedIndex >> 5);  case 15:  	return (AssemblyRefTable.Index << 24) + (codedIndex >> 5);  case 16:  	return (FileTable.Index << 24) + (codedIndex >> 5);  case 17:  	return (ExportedTypeTable.Index << 24) + (codedIndex >> 5);  case 18:  	return (ManifestResourceTable.Index << 24) + (codedIndex >> 5);  case 19:  	return (GenericParamTable.Index << 24) + (codedIndex >> 5);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasCustomAttribute,The following statement contains a magic number: switch (codedIndex & 31) {  case 0:  	return (MethodDefTable.Index << 24) + (codedIndex >> 5);  case 1:  	return (FieldTable.Index << 24) + (codedIndex >> 5);  case 2:  	return (TypeRefTable.Index << 24) + (codedIndex >> 5);  case 3:  	return (TypeDefTable.Index << 24) + (codedIndex >> 5);  case 4:  	return (ParamTable.Index << 24) + (codedIndex >> 5);  case 5:  	return (InterfaceImplTable.Index << 24) + (codedIndex >> 5);  case 6:  	return (MemberRefTable.Index << 24) + (codedIndex >> 5);  case 7:  	return (ModuleTable.Index << 24) + (codedIndex >> 5);  case 8:  	throw new BadImageFormatException ();  case 9:  	return (PropertyTable.Index << 24) + (codedIndex >> 5);  case 10:  	return (EventTable.Index << 24) + (codedIndex >> 5);  case 11:  	return (StandAloneSigTable.Index << 24) + (codedIndex >> 5);  case 12:  	return (ModuleRefTable.Index << 24) + (codedIndex >> 5);  case 13:  	return (TypeSpecTable.Index << 24) + (codedIndex >> 5);  case 14:  	return (AssemblyTable.Index << 24) + (codedIndex >> 5);  case 15:  	return (AssemblyRefTable.Index << 24) + (codedIndex >> 5);  case 16:  	return (FileTable.Index << 24) + (codedIndex >> 5);  case 17:  	return (ExportedTypeTable.Index << 24) + (codedIndex >> 5);  case 18:  	return (ManifestResourceTable.Index << 24) + (codedIndex >> 5);  case 19:  	return (GenericParamTable.Index << 24) + (codedIndex >> 5);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasCustomAttribute,The following statement contains a magic number: switch (codedIndex & 31) {  case 0:  	return (MethodDefTable.Index << 24) + (codedIndex >> 5);  case 1:  	return (FieldTable.Index << 24) + (codedIndex >> 5);  case 2:  	return (TypeRefTable.Index << 24) + (codedIndex >> 5);  case 3:  	return (TypeDefTable.Index << 24) + (codedIndex >> 5);  case 4:  	return (ParamTable.Index << 24) + (codedIndex >> 5);  case 5:  	return (InterfaceImplTable.Index << 24) + (codedIndex >> 5);  case 6:  	return (MemberRefTable.Index << 24) + (codedIndex >> 5);  case 7:  	return (ModuleTable.Index << 24) + (codedIndex >> 5);  case 8:  	throw new BadImageFormatException ();  case 9:  	return (PropertyTable.Index << 24) + (codedIndex >> 5);  case 10:  	return (EventTable.Index << 24) + (codedIndex >> 5);  case 11:  	return (StandAloneSigTable.Index << 24) + (codedIndex >> 5);  case 12:  	return (ModuleRefTable.Index << 24) + (codedIndex >> 5);  case 13:  	return (TypeSpecTable.Index << 24) + (codedIndex >> 5);  case 14:  	return (AssemblyTable.Index << 24) + (codedIndex >> 5);  case 15:  	return (AssemblyRefTable.Index << 24) + (codedIndex >> 5);  case 16:  	return (FileTable.Index << 24) + (codedIndex >> 5);  case 17:  	return (ExportedTypeTable.Index << 24) + (codedIndex >> 5);  case 18:  	return (ManifestResourceTable.Index << 24) + (codedIndex >> 5);  case 19:  	return (GenericParamTable.Index << 24) + (codedIndex >> 5);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasCustomAttribute,The following statement contains a magic number: switch (codedIndex & 31) {  case 0:  	return (MethodDefTable.Index << 24) + (codedIndex >> 5);  case 1:  	return (FieldTable.Index << 24) + (codedIndex >> 5);  case 2:  	return (TypeRefTable.Index << 24) + (codedIndex >> 5);  case 3:  	return (TypeDefTable.Index << 24) + (codedIndex >> 5);  case 4:  	return (ParamTable.Index << 24) + (codedIndex >> 5);  case 5:  	return (InterfaceImplTable.Index << 24) + (codedIndex >> 5);  case 6:  	return (MemberRefTable.Index << 24) + (codedIndex >> 5);  case 7:  	return (ModuleTable.Index << 24) + (codedIndex >> 5);  case 8:  	throw new BadImageFormatException ();  case 9:  	return (PropertyTable.Index << 24) + (codedIndex >> 5);  case 10:  	return (EventTable.Index << 24) + (codedIndex >> 5);  case 11:  	return (StandAloneSigTable.Index << 24) + (codedIndex >> 5);  case 12:  	return (ModuleRefTable.Index << 24) + (codedIndex >> 5);  case 13:  	return (TypeSpecTable.Index << 24) + (codedIndex >> 5);  case 14:  	return (AssemblyTable.Index << 24) + (codedIndex >> 5);  case 15:  	return (AssemblyRefTable.Index << 24) + (codedIndex >> 5);  case 16:  	return (FileTable.Index << 24) + (codedIndex >> 5);  case 17:  	return (ExportedTypeTable.Index << 24) + (codedIndex >> 5);  case 18:  	return (ManifestResourceTable.Index << 24) + (codedIndex >> 5);  case 19:  	return (GenericParamTable.Index << 24) + (codedIndex >> 5);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasCustomAttribute,The following statement contains a magic number: switch (codedIndex & 31) {  case 0:  	return (MethodDefTable.Index << 24) + (codedIndex >> 5);  case 1:  	return (FieldTable.Index << 24) + (codedIndex >> 5);  case 2:  	return (TypeRefTable.Index << 24) + (codedIndex >> 5);  case 3:  	return (TypeDefTable.Index << 24) + (codedIndex >> 5);  case 4:  	return (ParamTable.Index << 24) + (codedIndex >> 5);  case 5:  	return (InterfaceImplTable.Index << 24) + (codedIndex >> 5);  case 6:  	return (MemberRefTable.Index << 24) + (codedIndex >> 5);  case 7:  	return (ModuleTable.Index << 24) + (codedIndex >> 5);  case 8:  	throw new BadImageFormatException ();  case 9:  	return (PropertyTable.Index << 24) + (codedIndex >> 5);  case 10:  	return (EventTable.Index << 24) + (codedIndex >> 5);  case 11:  	return (StandAloneSigTable.Index << 24) + (codedIndex >> 5);  case 12:  	return (ModuleRefTable.Index << 24) + (codedIndex >> 5);  case 13:  	return (TypeSpecTable.Index << 24) + (codedIndex >> 5);  case 14:  	return (AssemblyTable.Index << 24) + (codedIndex >> 5);  case 15:  	return (AssemblyRefTable.Index << 24) + (codedIndex >> 5);  case 16:  	return (FileTable.Index << 24) + (codedIndex >> 5);  case 17:  	return (ExportedTypeTable.Index << 24) + (codedIndex >> 5);  case 18:  	return (ManifestResourceTable.Index << 24) + (codedIndex >> 5);  case 19:  	return (GenericParamTable.Index << 24) + (codedIndex >> 5);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasCustomAttribute,The following statement contains a magic number: switch (codedIndex & 31) {  case 0:  	return (MethodDefTable.Index << 24) + (codedIndex >> 5);  case 1:  	return (FieldTable.Index << 24) + (codedIndex >> 5);  case 2:  	return (TypeRefTable.Index << 24) + (codedIndex >> 5);  case 3:  	return (TypeDefTable.Index << 24) + (codedIndex >> 5);  case 4:  	return (ParamTable.Index << 24) + (codedIndex >> 5);  case 5:  	return (InterfaceImplTable.Index << 24) + (codedIndex >> 5);  case 6:  	return (MemberRefTable.Index << 24) + (codedIndex >> 5);  case 7:  	return (ModuleTable.Index << 24) + (codedIndex >> 5);  case 8:  	throw new BadImageFormatException ();  case 9:  	return (PropertyTable.Index << 24) + (codedIndex >> 5);  case 10:  	return (EventTable.Index << 24) + (codedIndex >> 5);  case 11:  	return (StandAloneSigTable.Index << 24) + (codedIndex >> 5);  case 12:  	return (ModuleRefTable.Index << 24) + (codedIndex >> 5);  case 13:  	return (TypeSpecTable.Index << 24) + (codedIndex >> 5);  case 14:  	return (AssemblyTable.Index << 24) + (codedIndex >> 5);  case 15:  	return (AssemblyRefTable.Index << 24) + (codedIndex >> 5);  case 16:  	return (FileTable.Index << 24) + (codedIndex >> 5);  case 17:  	return (ExportedTypeTable.Index << 24) + (codedIndex >> 5);  case 18:  	return (ManifestResourceTable.Index << 24) + (codedIndex >> 5);  case 19:  	return (GenericParamTable.Index << 24) + (codedIndex >> 5);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasCustomAttribute,The following statement contains a magic number: switch (codedIndex & 31) {  case 0:  	return (MethodDefTable.Index << 24) + (codedIndex >> 5);  case 1:  	return (FieldTable.Index << 24) + (codedIndex >> 5);  case 2:  	return (TypeRefTable.Index << 24) + (codedIndex >> 5);  case 3:  	return (TypeDefTable.Index << 24) + (codedIndex >> 5);  case 4:  	return (ParamTable.Index << 24) + (codedIndex >> 5);  case 5:  	return (InterfaceImplTable.Index << 24) + (codedIndex >> 5);  case 6:  	return (MemberRefTable.Index << 24) + (codedIndex >> 5);  case 7:  	return (ModuleTable.Index << 24) + (codedIndex >> 5);  case 8:  	throw new BadImageFormatException ();  case 9:  	return (PropertyTable.Index << 24) + (codedIndex >> 5);  case 10:  	return (EventTable.Index << 24) + (codedIndex >> 5);  case 11:  	return (StandAloneSigTable.Index << 24) + (codedIndex >> 5);  case 12:  	return (ModuleRefTable.Index << 24) + (codedIndex >> 5);  case 13:  	return (TypeSpecTable.Index << 24) + (codedIndex >> 5);  case 14:  	return (AssemblyTable.Index << 24) + (codedIndex >> 5);  case 15:  	return (AssemblyRefTable.Index << 24) + (codedIndex >> 5);  case 16:  	return (FileTable.Index << 24) + (codedIndex >> 5);  case 17:  	return (ExportedTypeTable.Index << 24) + (codedIndex >> 5);  case 18:  	return (ManifestResourceTable.Index << 24) + (codedIndex >> 5);  case 19:  	return (GenericParamTable.Index << 24) + (codedIndex >> 5);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasCustomAttribute,The following statement contains a magic number: switch (codedIndex & 31) {  case 0:  	return (MethodDefTable.Index << 24) + (codedIndex >> 5);  case 1:  	return (FieldTable.Index << 24) + (codedIndex >> 5);  case 2:  	return (TypeRefTable.Index << 24) + (codedIndex >> 5);  case 3:  	return (TypeDefTable.Index << 24) + (codedIndex >> 5);  case 4:  	return (ParamTable.Index << 24) + (codedIndex >> 5);  case 5:  	return (InterfaceImplTable.Index << 24) + (codedIndex >> 5);  case 6:  	return (MemberRefTable.Index << 24) + (codedIndex >> 5);  case 7:  	return (ModuleTable.Index << 24) + (codedIndex >> 5);  case 8:  	throw new BadImageFormatException ();  case 9:  	return (PropertyTable.Index << 24) + (codedIndex >> 5);  case 10:  	return (EventTable.Index << 24) + (codedIndex >> 5);  case 11:  	return (StandAloneSigTable.Index << 24) + (codedIndex >> 5);  case 12:  	return (ModuleRefTable.Index << 24) + (codedIndex >> 5);  case 13:  	return (TypeSpecTable.Index << 24) + (codedIndex >> 5);  case 14:  	return (AssemblyTable.Index << 24) + (codedIndex >> 5);  case 15:  	return (AssemblyRefTable.Index << 24) + (codedIndex >> 5);  case 16:  	return (FileTable.Index << 24) + (codedIndex >> 5);  case 17:  	return (ExportedTypeTable.Index << 24) + (codedIndex >> 5);  case 18:  	return (ManifestResourceTable.Index << 24) + (codedIndex >> 5);  case 19:  	return (GenericParamTable.Index << 24) + (codedIndex >> 5);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasCustomAttribute,The following statement contains a magic number: switch (codedIndex & 31) {  case 0:  	return (MethodDefTable.Index << 24) + (codedIndex >> 5);  case 1:  	return (FieldTable.Index << 24) + (codedIndex >> 5);  case 2:  	return (TypeRefTable.Index << 24) + (codedIndex >> 5);  case 3:  	return (TypeDefTable.Index << 24) + (codedIndex >> 5);  case 4:  	return (ParamTable.Index << 24) + (codedIndex >> 5);  case 5:  	return (InterfaceImplTable.Index << 24) + (codedIndex >> 5);  case 6:  	return (MemberRefTable.Index << 24) + (codedIndex >> 5);  case 7:  	return (ModuleTable.Index << 24) + (codedIndex >> 5);  case 8:  	throw new BadImageFormatException ();  case 9:  	return (PropertyTable.Index << 24) + (codedIndex >> 5);  case 10:  	return (EventTable.Index << 24) + (codedIndex >> 5);  case 11:  	return (StandAloneSigTable.Index << 24) + (codedIndex >> 5);  case 12:  	return (ModuleRefTable.Index << 24) + (codedIndex >> 5);  case 13:  	return (TypeSpecTable.Index << 24) + (codedIndex >> 5);  case 14:  	return (AssemblyTable.Index << 24) + (codedIndex >> 5);  case 15:  	return (AssemblyRefTable.Index << 24) + (codedIndex >> 5);  case 16:  	return (FileTable.Index << 24) + (codedIndex >> 5);  case 17:  	return (ExportedTypeTable.Index << 24) + (codedIndex >> 5);  case 18:  	return (ManifestResourceTable.Index << 24) + (codedIndex >> 5);  case 19:  	return (GenericParamTable.Index << 24) + (codedIndex >> 5);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasCustomAttribute,The following statement contains a magic number: switch (codedIndex & 31) {  case 0:  	return (MethodDefTable.Index << 24) + (codedIndex >> 5);  case 1:  	return (FieldTable.Index << 24) + (codedIndex >> 5);  case 2:  	return (TypeRefTable.Index << 24) + (codedIndex >> 5);  case 3:  	return (TypeDefTable.Index << 24) + (codedIndex >> 5);  case 4:  	return (ParamTable.Index << 24) + (codedIndex >> 5);  case 5:  	return (InterfaceImplTable.Index << 24) + (codedIndex >> 5);  case 6:  	return (MemberRefTable.Index << 24) + (codedIndex >> 5);  case 7:  	return (ModuleTable.Index << 24) + (codedIndex >> 5);  case 8:  	throw new BadImageFormatException ();  case 9:  	return (PropertyTable.Index << 24) + (codedIndex >> 5);  case 10:  	return (EventTable.Index << 24) + (codedIndex >> 5);  case 11:  	return (StandAloneSigTable.Index << 24) + (codedIndex >> 5);  case 12:  	return (ModuleRefTable.Index << 24) + (codedIndex >> 5);  case 13:  	return (TypeSpecTable.Index << 24) + (codedIndex >> 5);  case 14:  	return (AssemblyTable.Index << 24) + (codedIndex >> 5);  case 15:  	return (AssemblyRefTable.Index << 24) + (codedIndex >> 5);  case 16:  	return (FileTable.Index << 24) + (codedIndex >> 5);  case 17:  	return (ExportedTypeTable.Index << 24) + (codedIndex >> 5);  case 18:  	return (ManifestResourceTable.Index << 24) + (codedIndex >> 5);  case 19:  	return (GenericParamTable.Index << 24) + (codedIndex >> 5);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasCustomAttribute,The following statement contains a magic number: switch (codedIndex & 31) {  case 0:  	return (MethodDefTable.Index << 24) + (codedIndex >> 5);  case 1:  	return (FieldTable.Index << 24) + (codedIndex >> 5);  case 2:  	return (TypeRefTable.Index << 24) + (codedIndex >> 5);  case 3:  	return (TypeDefTable.Index << 24) + (codedIndex >> 5);  case 4:  	return (ParamTable.Index << 24) + (codedIndex >> 5);  case 5:  	return (InterfaceImplTable.Index << 24) + (codedIndex >> 5);  case 6:  	return (MemberRefTable.Index << 24) + (codedIndex >> 5);  case 7:  	return (ModuleTable.Index << 24) + (codedIndex >> 5);  case 8:  	throw new BadImageFormatException ();  case 9:  	return (PropertyTable.Index << 24) + (codedIndex >> 5);  case 10:  	return (EventTable.Index << 24) + (codedIndex >> 5);  case 11:  	return (StandAloneSigTable.Index << 24) + (codedIndex >> 5);  case 12:  	return (ModuleRefTable.Index << 24) + (codedIndex >> 5);  case 13:  	return (TypeSpecTable.Index << 24) + (codedIndex >> 5);  case 14:  	return (AssemblyTable.Index << 24) + (codedIndex >> 5);  case 15:  	return (AssemblyRefTable.Index << 24) + (codedIndex >> 5);  case 16:  	return (FileTable.Index << 24) + (codedIndex >> 5);  case 17:  	return (ExportedTypeTable.Index << 24) + (codedIndex >> 5);  case 18:  	return (ManifestResourceTable.Index << 24) + (codedIndex >> 5);  case 19:  	return (GenericParamTable.Index << 24) + (codedIndex >> 5);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasCustomAttribute,The following statement contains a magic number: switch (codedIndex & 31) {  case 0:  	return (MethodDefTable.Index << 24) + (codedIndex >> 5);  case 1:  	return (FieldTable.Index << 24) + (codedIndex >> 5);  case 2:  	return (TypeRefTable.Index << 24) + (codedIndex >> 5);  case 3:  	return (TypeDefTable.Index << 24) + (codedIndex >> 5);  case 4:  	return (ParamTable.Index << 24) + (codedIndex >> 5);  case 5:  	return (InterfaceImplTable.Index << 24) + (codedIndex >> 5);  case 6:  	return (MemberRefTable.Index << 24) + (codedIndex >> 5);  case 7:  	return (ModuleTable.Index << 24) + (codedIndex >> 5);  case 8:  	throw new BadImageFormatException ();  case 9:  	return (PropertyTable.Index << 24) + (codedIndex >> 5);  case 10:  	return (EventTable.Index << 24) + (codedIndex >> 5);  case 11:  	return (StandAloneSigTable.Index << 24) + (codedIndex >> 5);  case 12:  	return (ModuleRefTable.Index << 24) + (codedIndex >> 5);  case 13:  	return (TypeSpecTable.Index << 24) + (codedIndex >> 5);  case 14:  	return (AssemblyTable.Index << 24) + (codedIndex >> 5);  case 15:  	return (AssemblyRefTable.Index << 24) + (codedIndex >> 5);  case 16:  	return (FileTable.Index << 24) + (codedIndex >> 5);  case 17:  	return (ExportedTypeTable.Index << 24) + (codedIndex >> 5);  case 18:  	return (ManifestResourceTable.Index << 24) + (codedIndex >> 5);  case 19:  	return (GenericParamTable.Index << 24) + (codedIndex >> 5);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasCustomAttribute,The following statement contains a magic number: switch (codedIndex & 31) {  case 0:  	return (MethodDefTable.Index << 24) + (codedIndex >> 5);  case 1:  	return (FieldTable.Index << 24) + (codedIndex >> 5);  case 2:  	return (TypeRefTable.Index << 24) + (codedIndex >> 5);  case 3:  	return (TypeDefTable.Index << 24) + (codedIndex >> 5);  case 4:  	return (ParamTable.Index << 24) + (codedIndex >> 5);  case 5:  	return (InterfaceImplTable.Index << 24) + (codedIndex >> 5);  case 6:  	return (MemberRefTable.Index << 24) + (codedIndex >> 5);  case 7:  	return (ModuleTable.Index << 24) + (codedIndex >> 5);  case 8:  	throw new BadImageFormatException ();  case 9:  	return (PropertyTable.Index << 24) + (codedIndex >> 5);  case 10:  	return (EventTable.Index << 24) + (codedIndex >> 5);  case 11:  	return (StandAloneSigTable.Index << 24) + (codedIndex >> 5);  case 12:  	return (ModuleRefTable.Index << 24) + (codedIndex >> 5);  case 13:  	return (TypeSpecTable.Index << 24) + (codedIndex >> 5);  case 14:  	return (AssemblyTable.Index << 24) + (codedIndex >> 5);  case 15:  	return (AssemblyRefTable.Index << 24) + (codedIndex >> 5);  case 16:  	return (FileTable.Index << 24) + (codedIndex >> 5);  case 17:  	return (ExportedTypeTable.Index << 24) + (codedIndex >> 5);  case 18:  	return (ManifestResourceTable.Index << 24) + (codedIndex >> 5);  case 19:  	return (GenericParamTable.Index << 24) + (codedIndex >> 5);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasCustomAttribute,The following statement contains a magic number: switch (codedIndex & 31) {  case 0:  	return (MethodDefTable.Index << 24) + (codedIndex >> 5);  case 1:  	return (FieldTable.Index << 24) + (codedIndex >> 5);  case 2:  	return (TypeRefTable.Index << 24) + (codedIndex >> 5);  case 3:  	return (TypeDefTable.Index << 24) + (codedIndex >> 5);  case 4:  	return (ParamTable.Index << 24) + (codedIndex >> 5);  case 5:  	return (InterfaceImplTable.Index << 24) + (codedIndex >> 5);  case 6:  	return (MemberRefTable.Index << 24) + (codedIndex >> 5);  case 7:  	return (ModuleTable.Index << 24) + (codedIndex >> 5);  case 8:  	throw new BadImageFormatException ();  case 9:  	return (PropertyTable.Index << 24) + (codedIndex >> 5);  case 10:  	return (EventTable.Index << 24) + (codedIndex >> 5);  case 11:  	return (StandAloneSigTable.Index << 24) + (codedIndex >> 5);  case 12:  	return (ModuleRefTable.Index << 24) + (codedIndex >> 5);  case 13:  	return (TypeSpecTable.Index << 24) + (codedIndex >> 5);  case 14:  	return (AssemblyTable.Index << 24) + (codedIndex >> 5);  case 15:  	return (AssemblyRefTable.Index << 24) + (codedIndex >> 5);  case 16:  	return (FileTable.Index << 24) + (codedIndex >> 5);  case 17:  	return (ExportedTypeTable.Index << 24) + (codedIndex >> 5);  case 18:  	return (ManifestResourceTable.Index << 24) + (codedIndex >> 5);  case 19:  	return (GenericParamTable.Index << 24) + (codedIndex >> 5);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasCustomAttribute,The following statement contains a magic number: switch (codedIndex & 31) {  case 0:  	return (MethodDefTable.Index << 24) + (codedIndex >> 5);  case 1:  	return (FieldTable.Index << 24) + (codedIndex >> 5);  case 2:  	return (TypeRefTable.Index << 24) + (codedIndex >> 5);  case 3:  	return (TypeDefTable.Index << 24) + (codedIndex >> 5);  case 4:  	return (ParamTable.Index << 24) + (codedIndex >> 5);  case 5:  	return (InterfaceImplTable.Index << 24) + (codedIndex >> 5);  case 6:  	return (MemberRefTable.Index << 24) + (codedIndex >> 5);  case 7:  	return (ModuleTable.Index << 24) + (codedIndex >> 5);  case 8:  	throw new BadImageFormatException ();  case 9:  	return (PropertyTable.Index << 24) + (codedIndex >> 5);  case 10:  	return (EventTable.Index << 24) + (codedIndex >> 5);  case 11:  	return (StandAloneSigTable.Index << 24) + (codedIndex >> 5);  case 12:  	return (ModuleRefTable.Index << 24) + (codedIndex >> 5);  case 13:  	return (TypeSpecTable.Index << 24) + (codedIndex >> 5);  case 14:  	return (AssemblyTable.Index << 24) + (codedIndex >> 5);  case 15:  	return (AssemblyRefTable.Index << 24) + (codedIndex >> 5);  case 16:  	return (FileTable.Index << 24) + (codedIndex >> 5);  case 17:  	return (ExportedTypeTable.Index << 24) + (codedIndex >> 5);  case 18:  	return (ManifestResourceTable.Index << 24) + (codedIndex >> 5);  case 19:  	return (GenericParamTable.Index << 24) + (codedIndex >> 5);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasCustomAttribute,The following statement contains a magic number: switch (codedIndex & 31) {  case 0:  	return (MethodDefTable.Index << 24) + (codedIndex >> 5);  case 1:  	return (FieldTable.Index << 24) + (codedIndex >> 5);  case 2:  	return (TypeRefTable.Index << 24) + (codedIndex >> 5);  case 3:  	return (TypeDefTable.Index << 24) + (codedIndex >> 5);  case 4:  	return (ParamTable.Index << 24) + (codedIndex >> 5);  case 5:  	return (InterfaceImplTable.Index << 24) + (codedIndex >> 5);  case 6:  	return (MemberRefTable.Index << 24) + (codedIndex >> 5);  case 7:  	return (ModuleTable.Index << 24) + (codedIndex >> 5);  case 8:  	throw new BadImageFormatException ();  case 9:  	return (PropertyTable.Index << 24) + (codedIndex >> 5);  case 10:  	return (EventTable.Index << 24) + (codedIndex >> 5);  case 11:  	return (StandAloneSigTable.Index << 24) + (codedIndex >> 5);  case 12:  	return (ModuleRefTable.Index << 24) + (codedIndex >> 5);  case 13:  	return (TypeSpecTable.Index << 24) + (codedIndex >> 5);  case 14:  	return (AssemblyTable.Index << 24) + (codedIndex >> 5);  case 15:  	return (AssemblyRefTable.Index << 24) + (codedIndex >> 5);  case 16:  	return (FileTable.Index << 24) + (codedIndex >> 5);  case 17:  	return (ExportedTypeTable.Index << 24) + (codedIndex >> 5);  case 18:  	return (ManifestResourceTable.Index << 24) + (codedIndex >> 5);  case 19:  	return (GenericParamTable.Index << 24) + (codedIndex >> 5);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasCustomAttribute,The following statement contains a magic number: switch (codedIndex & 31) {  case 0:  	return (MethodDefTable.Index << 24) + (codedIndex >> 5);  case 1:  	return (FieldTable.Index << 24) + (codedIndex >> 5);  case 2:  	return (TypeRefTable.Index << 24) + (codedIndex >> 5);  case 3:  	return (TypeDefTable.Index << 24) + (codedIndex >> 5);  case 4:  	return (ParamTable.Index << 24) + (codedIndex >> 5);  case 5:  	return (InterfaceImplTable.Index << 24) + (codedIndex >> 5);  case 6:  	return (MemberRefTable.Index << 24) + (codedIndex >> 5);  case 7:  	return (ModuleTable.Index << 24) + (codedIndex >> 5);  case 8:  	throw new BadImageFormatException ();  case 9:  	return (PropertyTable.Index << 24) + (codedIndex >> 5);  case 10:  	return (EventTable.Index << 24) + (codedIndex >> 5);  case 11:  	return (StandAloneSigTable.Index << 24) + (codedIndex >> 5);  case 12:  	return (ModuleRefTable.Index << 24) + (codedIndex >> 5);  case 13:  	return (TypeSpecTable.Index << 24) + (codedIndex >> 5);  case 14:  	return (AssemblyTable.Index << 24) + (codedIndex >> 5);  case 15:  	return (AssemblyRefTable.Index << 24) + (codedIndex >> 5);  case 16:  	return (FileTable.Index << 24) + (codedIndex >> 5);  case 17:  	return (ExportedTypeTable.Index << 24) + (codedIndex >> 5);  case 18:  	return (ManifestResourceTable.Index << 24) + (codedIndex >> 5);  case 19:  	return (GenericParamTable.Index << 24) + (codedIndex >> 5);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasCustomAttribute,The following statement contains a magic number: switch (codedIndex & 31) {  case 0:  	return (MethodDefTable.Index << 24) + (codedIndex >> 5);  case 1:  	return (FieldTable.Index << 24) + (codedIndex >> 5);  case 2:  	return (TypeRefTable.Index << 24) + (codedIndex >> 5);  case 3:  	return (TypeDefTable.Index << 24) + (codedIndex >> 5);  case 4:  	return (ParamTable.Index << 24) + (codedIndex >> 5);  case 5:  	return (InterfaceImplTable.Index << 24) + (codedIndex >> 5);  case 6:  	return (MemberRefTable.Index << 24) + (codedIndex >> 5);  case 7:  	return (ModuleTable.Index << 24) + (codedIndex >> 5);  case 8:  	throw new BadImageFormatException ();  case 9:  	return (PropertyTable.Index << 24) + (codedIndex >> 5);  case 10:  	return (EventTable.Index << 24) + (codedIndex >> 5);  case 11:  	return (StandAloneSigTable.Index << 24) + (codedIndex >> 5);  case 12:  	return (ModuleRefTable.Index << 24) + (codedIndex >> 5);  case 13:  	return (TypeSpecTable.Index << 24) + (codedIndex >> 5);  case 14:  	return (AssemblyTable.Index << 24) + (codedIndex >> 5);  case 15:  	return (AssemblyRefTable.Index << 24) + (codedIndex >> 5);  case 16:  	return (FileTable.Index << 24) + (codedIndex >> 5);  case 17:  	return (ExportedTypeTable.Index << 24) + (codedIndex >> 5);  case 18:  	return (ManifestResourceTable.Index << 24) + (codedIndex >> 5);  case 19:  	return (GenericParamTable.Index << 24) + (codedIndex >> 5);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasCustomAttribute,The following statement contains a magic number: switch (codedIndex & 31) {  case 0:  	return (MethodDefTable.Index << 24) + (codedIndex >> 5);  case 1:  	return (FieldTable.Index << 24) + (codedIndex >> 5);  case 2:  	return (TypeRefTable.Index << 24) + (codedIndex >> 5);  case 3:  	return (TypeDefTable.Index << 24) + (codedIndex >> 5);  case 4:  	return (ParamTable.Index << 24) + (codedIndex >> 5);  case 5:  	return (InterfaceImplTable.Index << 24) + (codedIndex >> 5);  case 6:  	return (MemberRefTable.Index << 24) + (codedIndex >> 5);  case 7:  	return (ModuleTable.Index << 24) + (codedIndex >> 5);  case 8:  	throw new BadImageFormatException ();  case 9:  	return (PropertyTable.Index << 24) + (codedIndex >> 5);  case 10:  	return (EventTable.Index << 24) + (codedIndex >> 5);  case 11:  	return (StandAloneSigTable.Index << 24) + (codedIndex >> 5);  case 12:  	return (ModuleRefTable.Index << 24) + (codedIndex >> 5);  case 13:  	return (TypeSpecTable.Index << 24) + (codedIndex >> 5);  case 14:  	return (AssemblyTable.Index << 24) + (codedIndex >> 5);  case 15:  	return (AssemblyRefTable.Index << 24) + (codedIndex >> 5);  case 16:  	return (FileTable.Index << 24) + (codedIndex >> 5);  case 17:  	return (ExportedTypeTable.Index << 24) + (codedIndex >> 5);  case 18:  	return (ManifestResourceTable.Index << 24) + (codedIndex >> 5);  case 19:  	return (GenericParamTable.Index << 24) + (codedIndex >> 5);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasCustomAttribute,The following statement contains a magic number: switch (codedIndex & 31) {  case 0:  	return (MethodDefTable.Index << 24) + (codedIndex >> 5);  case 1:  	return (FieldTable.Index << 24) + (codedIndex >> 5);  case 2:  	return (TypeRefTable.Index << 24) + (codedIndex >> 5);  case 3:  	return (TypeDefTable.Index << 24) + (codedIndex >> 5);  case 4:  	return (ParamTable.Index << 24) + (codedIndex >> 5);  case 5:  	return (InterfaceImplTable.Index << 24) + (codedIndex >> 5);  case 6:  	return (MemberRefTable.Index << 24) + (codedIndex >> 5);  case 7:  	return (ModuleTable.Index << 24) + (codedIndex >> 5);  case 8:  	throw new BadImageFormatException ();  case 9:  	return (PropertyTable.Index << 24) + (codedIndex >> 5);  case 10:  	return (EventTable.Index << 24) + (codedIndex >> 5);  case 11:  	return (StandAloneSigTable.Index << 24) + (codedIndex >> 5);  case 12:  	return (ModuleRefTable.Index << 24) + (codedIndex >> 5);  case 13:  	return (TypeSpecTable.Index << 24) + (codedIndex >> 5);  case 14:  	return (AssemblyTable.Index << 24) + (codedIndex >> 5);  case 15:  	return (AssemblyRefTable.Index << 24) + (codedIndex >> 5);  case 16:  	return (FileTable.Index << 24) + (codedIndex >> 5);  case 17:  	return (ExportedTypeTable.Index << 24) + (codedIndex >> 5);  case 18:  	return (ManifestResourceTable.Index << 24) + (codedIndex >> 5);  case 19:  	return (GenericParamTable.Index << 24) + (codedIndex >> 5);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasCustomAttribute,The following statement contains a magic number: switch (codedIndex & 31) {  case 0:  	return (MethodDefTable.Index << 24) + (codedIndex >> 5);  case 1:  	return (FieldTable.Index << 24) + (codedIndex >> 5);  case 2:  	return (TypeRefTable.Index << 24) + (codedIndex >> 5);  case 3:  	return (TypeDefTable.Index << 24) + (codedIndex >> 5);  case 4:  	return (ParamTable.Index << 24) + (codedIndex >> 5);  case 5:  	return (InterfaceImplTable.Index << 24) + (codedIndex >> 5);  case 6:  	return (MemberRefTable.Index << 24) + (codedIndex >> 5);  case 7:  	return (ModuleTable.Index << 24) + (codedIndex >> 5);  case 8:  	throw new BadImageFormatException ();  case 9:  	return (PropertyTable.Index << 24) + (codedIndex >> 5);  case 10:  	return (EventTable.Index << 24) + (codedIndex >> 5);  case 11:  	return (StandAloneSigTable.Index << 24) + (codedIndex >> 5);  case 12:  	return (ModuleRefTable.Index << 24) + (codedIndex >> 5);  case 13:  	return (TypeSpecTable.Index << 24) + (codedIndex >> 5);  case 14:  	return (AssemblyTable.Index << 24) + (codedIndex >> 5);  case 15:  	return (AssemblyRefTable.Index << 24) + (codedIndex >> 5);  case 16:  	return (FileTable.Index << 24) + (codedIndex >> 5);  case 17:  	return (ExportedTypeTable.Index << 24) + (codedIndex >> 5);  case 18:  	return (ManifestResourceTable.Index << 24) + (codedIndex >> 5);  case 19:  	return (GenericParamTable.Index << 24) + (codedIndex >> 5);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasCustomAttribute,The following statement contains a magic number: switch (codedIndex & 31) {  case 0:  	return (MethodDefTable.Index << 24) + (codedIndex >> 5);  case 1:  	return (FieldTable.Index << 24) + (codedIndex >> 5);  case 2:  	return (TypeRefTable.Index << 24) + (codedIndex >> 5);  case 3:  	return (TypeDefTable.Index << 24) + (codedIndex >> 5);  case 4:  	return (ParamTable.Index << 24) + (codedIndex >> 5);  case 5:  	return (InterfaceImplTable.Index << 24) + (codedIndex >> 5);  case 6:  	return (MemberRefTable.Index << 24) + (codedIndex >> 5);  case 7:  	return (ModuleTable.Index << 24) + (codedIndex >> 5);  case 8:  	throw new BadImageFormatException ();  case 9:  	return (PropertyTable.Index << 24) + (codedIndex >> 5);  case 10:  	return (EventTable.Index << 24) + (codedIndex >> 5);  case 11:  	return (StandAloneSigTable.Index << 24) + (codedIndex >> 5);  case 12:  	return (ModuleRefTable.Index << 24) + (codedIndex >> 5);  case 13:  	return (TypeSpecTable.Index << 24) + (codedIndex >> 5);  case 14:  	return (AssemblyTable.Index << 24) + (codedIndex >> 5);  case 15:  	return (AssemblyRefTable.Index << 24) + (codedIndex >> 5);  case 16:  	return (FileTable.Index << 24) + (codedIndex >> 5);  case 17:  	return (ExportedTypeTable.Index << 24) + (codedIndex >> 5);  case 18:  	return (ManifestResourceTable.Index << 24) + (codedIndex >> 5);  case 19:  	return (GenericParamTable.Index << 24) + (codedIndex >> 5);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasCustomAttribute,The following statement contains a magic number: switch (codedIndex & 31) {  case 0:  	return (MethodDefTable.Index << 24) + (codedIndex >> 5);  case 1:  	return (FieldTable.Index << 24) + (codedIndex >> 5);  case 2:  	return (TypeRefTable.Index << 24) + (codedIndex >> 5);  case 3:  	return (TypeDefTable.Index << 24) + (codedIndex >> 5);  case 4:  	return (ParamTable.Index << 24) + (codedIndex >> 5);  case 5:  	return (InterfaceImplTable.Index << 24) + (codedIndex >> 5);  case 6:  	return (MemberRefTable.Index << 24) + (codedIndex >> 5);  case 7:  	return (ModuleTable.Index << 24) + (codedIndex >> 5);  case 8:  	throw new BadImageFormatException ();  case 9:  	return (PropertyTable.Index << 24) + (codedIndex >> 5);  case 10:  	return (EventTable.Index << 24) + (codedIndex >> 5);  case 11:  	return (StandAloneSigTable.Index << 24) + (codedIndex >> 5);  case 12:  	return (ModuleRefTable.Index << 24) + (codedIndex >> 5);  case 13:  	return (TypeSpecTable.Index << 24) + (codedIndex >> 5);  case 14:  	return (AssemblyTable.Index << 24) + (codedIndex >> 5);  case 15:  	return (AssemblyRefTable.Index << 24) + (codedIndex >> 5);  case 16:  	return (FileTable.Index << 24) + (codedIndex >> 5);  case 17:  	return (ExportedTypeTable.Index << 24) + (codedIndex >> 5);  case 18:  	return (ManifestResourceTable.Index << 24) + (codedIndex >> 5);  case 19:  	return (GenericParamTable.Index << 24) + (codedIndex >> 5);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasCustomAttribute,The following statement contains a magic number: switch (codedIndex & 31) {  case 0:  	return (MethodDefTable.Index << 24) + (codedIndex >> 5);  case 1:  	return (FieldTable.Index << 24) + (codedIndex >> 5);  case 2:  	return (TypeRefTable.Index << 24) + (codedIndex >> 5);  case 3:  	return (TypeDefTable.Index << 24) + (codedIndex >> 5);  case 4:  	return (ParamTable.Index << 24) + (codedIndex >> 5);  case 5:  	return (InterfaceImplTable.Index << 24) + (codedIndex >> 5);  case 6:  	return (MemberRefTable.Index << 24) + (codedIndex >> 5);  case 7:  	return (ModuleTable.Index << 24) + (codedIndex >> 5);  case 8:  	throw new BadImageFormatException ();  case 9:  	return (PropertyTable.Index << 24) + (codedIndex >> 5);  case 10:  	return (EventTable.Index << 24) + (codedIndex >> 5);  case 11:  	return (StandAloneSigTable.Index << 24) + (codedIndex >> 5);  case 12:  	return (ModuleRefTable.Index << 24) + (codedIndex >> 5);  case 13:  	return (TypeSpecTable.Index << 24) + (codedIndex >> 5);  case 14:  	return (AssemblyTable.Index << 24) + (codedIndex >> 5);  case 15:  	return (AssemblyRefTable.Index << 24) + (codedIndex >> 5);  case 16:  	return (FileTable.Index << 24) + (codedIndex >> 5);  case 17:  	return (ExportedTypeTable.Index << 24) + (codedIndex >> 5);  case 18:  	return (ManifestResourceTable.Index << 24) + (codedIndex >> 5);  case 19:  	return (GenericParamTable.Index << 24) + (codedIndex >> 5);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasCustomAttribute,The following statement contains a magic number: switch (codedIndex & 31) {  case 0:  	return (MethodDefTable.Index << 24) + (codedIndex >> 5);  case 1:  	return (FieldTable.Index << 24) + (codedIndex >> 5);  case 2:  	return (TypeRefTable.Index << 24) + (codedIndex >> 5);  case 3:  	return (TypeDefTable.Index << 24) + (codedIndex >> 5);  case 4:  	return (ParamTable.Index << 24) + (codedIndex >> 5);  case 5:  	return (InterfaceImplTable.Index << 24) + (codedIndex >> 5);  case 6:  	return (MemberRefTable.Index << 24) + (codedIndex >> 5);  case 7:  	return (ModuleTable.Index << 24) + (codedIndex >> 5);  case 8:  	throw new BadImageFormatException ();  case 9:  	return (PropertyTable.Index << 24) + (codedIndex >> 5);  case 10:  	return (EventTable.Index << 24) + (codedIndex >> 5);  case 11:  	return (StandAloneSigTable.Index << 24) + (codedIndex >> 5);  case 12:  	return (ModuleRefTable.Index << 24) + (codedIndex >> 5);  case 13:  	return (TypeSpecTable.Index << 24) + (codedIndex >> 5);  case 14:  	return (AssemblyTable.Index << 24) + (codedIndex >> 5);  case 15:  	return (AssemblyRefTable.Index << 24) + (codedIndex >> 5);  case 16:  	return (FileTable.Index << 24) + (codedIndex >> 5);  case 17:  	return (ExportedTypeTable.Index << 24) + (codedIndex >> 5);  case 18:  	return (ManifestResourceTable.Index << 24) + (codedIndex >> 5);  case 19:  	return (GenericParamTable.Index << 24) + (codedIndex >> 5);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasCustomAttribute,The following statement contains a magic number: switch (codedIndex & 31) {  case 0:  	return (MethodDefTable.Index << 24) + (codedIndex >> 5);  case 1:  	return (FieldTable.Index << 24) + (codedIndex >> 5);  case 2:  	return (TypeRefTable.Index << 24) + (codedIndex >> 5);  case 3:  	return (TypeDefTable.Index << 24) + (codedIndex >> 5);  case 4:  	return (ParamTable.Index << 24) + (codedIndex >> 5);  case 5:  	return (InterfaceImplTable.Index << 24) + (codedIndex >> 5);  case 6:  	return (MemberRefTable.Index << 24) + (codedIndex >> 5);  case 7:  	return (ModuleTable.Index << 24) + (codedIndex >> 5);  case 8:  	throw new BadImageFormatException ();  case 9:  	return (PropertyTable.Index << 24) + (codedIndex >> 5);  case 10:  	return (EventTable.Index << 24) + (codedIndex >> 5);  case 11:  	return (StandAloneSigTable.Index << 24) + (codedIndex >> 5);  case 12:  	return (ModuleRefTable.Index << 24) + (codedIndex >> 5);  case 13:  	return (TypeSpecTable.Index << 24) + (codedIndex >> 5);  case 14:  	return (AssemblyTable.Index << 24) + (codedIndex >> 5);  case 15:  	return (AssemblyRefTable.Index << 24) + (codedIndex >> 5);  case 16:  	return (FileTable.Index << 24) + (codedIndex >> 5);  case 17:  	return (ExportedTypeTable.Index << 24) + (codedIndex >> 5);  case 18:  	return (ManifestResourceTable.Index << 24) + (codedIndex >> 5);  case 19:  	return (GenericParamTable.Index << 24) + (codedIndex >> 5);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasCustomAttribute,The following statement contains a magic number: switch (codedIndex & 31) {  case 0:  	return (MethodDefTable.Index << 24) + (codedIndex >> 5);  case 1:  	return (FieldTable.Index << 24) + (codedIndex >> 5);  case 2:  	return (TypeRefTable.Index << 24) + (codedIndex >> 5);  case 3:  	return (TypeDefTable.Index << 24) + (codedIndex >> 5);  case 4:  	return (ParamTable.Index << 24) + (codedIndex >> 5);  case 5:  	return (InterfaceImplTable.Index << 24) + (codedIndex >> 5);  case 6:  	return (MemberRefTable.Index << 24) + (codedIndex >> 5);  case 7:  	return (ModuleTable.Index << 24) + (codedIndex >> 5);  case 8:  	throw new BadImageFormatException ();  case 9:  	return (PropertyTable.Index << 24) + (codedIndex >> 5);  case 10:  	return (EventTable.Index << 24) + (codedIndex >> 5);  case 11:  	return (StandAloneSigTable.Index << 24) + (codedIndex >> 5);  case 12:  	return (ModuleRefTable.Index << 24) + (codedIndex >> 5);  case 13:  	return (TypeSpecTable.Index << 24) + (codedIndex >> 5);  case 14:  	return (AssemblyTable.Index << 24) + (codedIndex >> 5);  case 15:  	return (AssemblyRefTable.Index << 24) + (codedIndex >> 5);  case 16:  	return (FileTable.Index << 24) + (codedIndex >> 5);  case 17:  	return (ExportedTypeTable.Index << 24) + (codedIndex >> 5);  case 18:  	return (ManifestResourceTable.Index << 24) + (codedIndex >> 5);  case 19:  	return (GenericParamTable.Index << 24) + (codedIndex >> 5);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasCustomAttribute,The following statement contains a magic number: switch (codedIndex & 31) {  case 0:  	return (MethodDefTable.Index << 24) + (codedIndex >> 5);  case 1:  	return (FieldTable.Index << 24) + (codedIndex >> 5);  case 2:  	return (TypeRefTable.Index << 24) + (codedIndex >> 5);  case 3:  	return (TypeDefTable.Index << 24) + (codedIndex >> 5);  case 4:  	return (ParamTable.Index << 24) + (codedIndex >> 5);  case 5:  	return (InterfaceImplTable.Index << 24) + (codedIndex >> 5);  case 6:  	return (MemberRefTable.Index << 24) + (codedIndex >> 5);  case 7:  	return (ModuleTable.Index << 24) + (codedIndex >> 5);  case 8:  	throw new BadImageFormatException ();  case 9:  	return (PropertyTable.Index << 24) + (codedIndex >> 5);  case 10:  	return (EventTable.Index << 24) + (codedIndex >> 5);  case 11:  	return (StandAloneSigTable.Index << 24) + (codedIndex >> 5);  case 12:  	return (ModuleRefTable.Index << 24) + (codedIndex >> 5);  case 13:  	return (TypeSpecTable.Index << 24) + (codedIndex >> 5);  case 14:  	return (AssemblyTable.Index << 24) + (codedIndex >> 5);  case 15:  	return (AssemblyRefTable.Index << 24) + (codedIndex >> 5);  case 16:  	return (FileTable.Index << 24) + (codedIndex >> 5);  case 17:  	return (ExportedTypeTable.Index << 24) + (codedIndex >> 5);  case 18:  	return (ManifestResourceTable.Index << 24) + (codedIndex >> 5);  case 19:  	return (GenericParamTable.Index << 24) + (codedIndex >> 5);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasCustomAttribute,The following statement contains a magic number: switch (codedIndex & 31) {  case 0:  	return (MethodDefTable.Index << 24) + (codedIndex >> 5);  case 1:  	return (FieldTable.Index << 24) + (codedIndex >> 5);  case 2:  	return (TypeRefTable.Index << 24) + (codedIndex >> 5);  case 3:  	return (TypeDefTable.Index << 24) + (codedIndex >> 5);  case 4:  	return (ParamTable.Index << 24) + (codedIndex >> 5);  case 5:  	return (InterfaceImplTable.Index << 24) + (codedIndex >> 5);  case 6:  	return (MemberRefTable.Index << 24) + (codedIndex >> 5);  case 7:  	return (ModuleTable.Index << 24) + (codedIndex >> 5);  case 8:  	throw new BadImageFormatException ();  case 9:  	return (PropertyTable.Index << 24) + (codedIndex >> 5);  case 10:  	return (EventTable.Index << 24) + (codedIndex >> 5);  case 11:  	return (StandAloneSigTable.Index << 24) + (codedIndex >> 5);  case 12:  	return (ModuleRefTable.Index << 24) + (codedIndex >> 5);  case 13:  	return (TypeSpecTable.Index << 24) + (codedIndex >> 5);  case 14:  	return (AssemblyTable.Index << 24) + (codedIndex >> 5);  case 15:  	return (AssemblyRefTable.Index << 24) + (codedIndex >> 5);  case 16:  	return (FileTable.Index << 24) + (codedIndex >> 5);  case 17:  	return (ExportedTypeTable.Index << 24) + (codedIndex >> 5);  case 18:  	return (ManifestResourceTable.Index << 24) + (codedIndex >> 5);  case 19:  	return (GenericParamTable.Index << 24) + (codedIndex >> 5);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasCustomAttribute,The following statement contains a magic number: switch (codedIndex & 31) {  case 0:  	return (MethodDefTable.Index << 24) + (codedIndex >> 5);  case 1:  	return (FieldTable.Index << 24) + (codedIndex >> 5);  case 2:  	return (TypeRefTable.Index << 24) + (codedIndex >> 5);  case 3:  	return (TypeDefTable.Index << 24) + (codedIndex >> 5);  case 4:  	return (ParamTable.Index << 24) + (codedIndex >> 5);  case 5:  	return (InterfaceImplTable.Index << 24) + (codedIndex >> 5);  case 6:  	return (MemberRefTable.Index << 24) + (codedIndex >> 5);  case 7:  	return (ModuleTable.Index << 24) + (codedIndex >> 5);  case 8:  	throw new BadImageFormatException ();  case 9:  	return (PropertyTable.Index << 24) + (codedIndex >> 5);  case 10:  	return (EventTable.Index << 24) + (codedIndex >> 5);  case 11:  	return (StandAloneSigTable.Index << 24) + (codedIndex >> 5);  case 12:  	return (ModuleRefTable.Index << 24) + (codedIndex >> 5);  case 13:  	return (TypeSpecTable.Index << 24) + (codedIndex >> 5);  case 14:  	return (AssemblyTable.Index << 24) + (codedIndex >> 5);  case 15:  	return (AssemblyRefTable.Index << 24) + (codedIndex >> 5);  case 16:  	return (FileTable.Index << 24) + (codedIndex >> 5);  case 17:  	return (ExportedTypeTable.Index << 24) + (codedIndex >> 5);  case 18:  	return (ManifestResourceTable.Index << 24) + (codedIndex >> 5);  case 19:  	return (GenericParamTable.Index << 24) + (codedIndex >> 5);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasCustomAttribute,The following statement contains a magic number: switch (codedIndex & 31) {  case 0:  	return (MethodDefTable.Index << 24) + (codedIndex >> 5);  case 1:  	return (FieldTable.Index << 24) + (codedIndex >> 5);  case 2:  	return (TypeRefTable.Index << 24) + (codedIndex >> 5);  case 3:  	return (TypeDefTable.Index << 24) + (codedIndex >> 5);  case 4:  	return (ParamTable.Index << 24) + (codedIndex >> 5);  case 5:  	return (InterfaceImplTable.Index << 24) + (codedIndex >> 5);  case 6:  	return (MemberRefTable.Index << 24) + (codedIndex >> 5);  case 7:  	return (ModuleTable.Index << 24) + (codedIndex >> 5);  case 8:  	throw new BadImageFormatException ();  case 9:  	return (PropertyTable.Index << 24) + (codedIndex >> 5);  case 10:  	return (EventTable.Index << 24) + (codedIndex >> 5);  case 11:  	return (StandAloneSigTable.Index << 24) + (codedIndex >> 5);  case 12:  	return (ModuleRefTable.Index << 24) + (codedIndex >> 5);  case 13:  	return (TypeSpecTable.Index << 24) + (codedIndex >> 5);  case 14:  	return (AssemblyTable.Index << 24) + (codedIndex >> 5);  case 15:  	return (AssemblyRefTable.Index << 24) + (codedIndex >> 5);  case 16:  	return (FileTable.Index << 24) + (codedIndex >> 5);  case 17:  	return (ExportedTypeTable.Index << 24) + (codedIndex >> 5);  case 18:  	return (ManifestResourceTable.Index << 24) + (codedIndex >> 5);  case 19:  	return (GenericParamTable.Index << 24) + (codedIndex >> 5);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasCustomAttribute,The following statement contains a magic number: switch (codedIndex & 31) {  case 0:  	return (MethodDefTable.Index << 24) + (codedIndex >> 5);  case 1:  	return (FieldTable.Index << 24) + (codedIndex >> 5);  case 2:  	return (TypeRefTable.Index << 24) + (codedIndex >> 5);  case 3:  	return (TypeDefTable.Index << 24) + (codedIndex >> 5);  case 4:  	return (ParamTable.Index << 24) + (codedIndex >> 5);  case 5:  	return (InterfaceImplTable.Index << 24) + (codedIndex >> 5);  case 6:  	return (MemberRefTable.Index << 24) + (codedIndex >> 5);  case 7:  	return (ModuleTable.Index << 24) + (codedIndex >> 5);  case 8:  	throw new BadImageFormatException ();  case 9:  	return (PropertyTable.Index << 24) + (codedIndex >> 5);  case 10:  	return (EventTable.Index << 24) + (codedIndex >> 5);  case 11:  	return (StandAloneSigTable.Index << 24) + (codedIndex >> 5);  case 12:  	return (ModuleRefTable.Index << 24) + (codedIndex >> 5);  case 13:  	return (TypeSpecTable.Index << 24) + (codedIndex >> 5);  case 14:  	return (AssemblyTable.Index << 24) + (codedIndex >> 5);  case 15:  	return (AssemblyRefTable.Index << 24) + (codedIndex >> 5);  case 16:  	return (FileTable.Index << 24) + (codedIndex >> 5);  case 17:  	return (ExportedTypeTable.Index << 24) + (codedIndex >> 5);  case 18:  	return (ManifestResourceTable.Index << 24) + (codedIndex >> 5);  case 19:  	return (GenericParamTable.Index << 24) + (codedIndex >> 5);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasCustomAttribute,The following statement contains a magic number: switch (codedIndex & 31) {  case 0:  	return (MethodDefTable.Index << 24) + (codedIndex >> 5);  case 1:  	return (FieldTable.Index << 24) + (codedIndex >> 5);  case 2:  	return (TypeRefTable.Index << 24) + (codedIndex >> 5);  case 3:  	return (TypeDefTable.Index << 24) + (codedIndex >> 5);  case 4:  	return (ParamTable.Index << 24) + (codedIndex >> 5);  case 5:  	return (InterfaceImplTable.Index << 24) + (codedIndex >> 5);  case 6:  	return (MemberRefTable.Index << 24) + (codedIndex >> 5);  case 7:  	return (ModuleTable.Index << 24) + (codedIndex >> 5);  case 8:  	throw new BadImageFormatException ();  case 9:  	return (PropertyTable.Index << 24) + (codedIndex >> 5);  case 10:  	return (EventTable.Index << 24) + (codedIndex >> 5);  case 11:  	return (StandAloneSigTable.Index << 24) + (codedIndex >> 5);  case 12:  	return (ModuleRefTable.Index << 24) + (codedIndex >> 5);  case 13:  	return (TypeSpecTable.Index << 24) + (codedIndex >> 5);  case 14:  	return (AssemblyTable.Index << 24) + (codedIndex >> 5);  case 15:  	return (AssemblyRefTable.Index << 24) + (codedIndex >> 5);  case 16:  	return (FileTable.Index << 24) + (codedIndex >> 5);  case 17:  	return (ExportedTypeTable.Index << 24) + (codedIndex >> 5);  case 18:  	return (ManifestResourceTable.Index << 24) + (codedIndex >> 5);  case 19:  	return (GenericParamTable.Index << 24) + (codedIndex >> 5);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasCustomAttribute,The following statement contains a magic number: switch (codedIndex & 31) {  case 0:  	return (MethodDefTable.Index << 24) + (codedIndex >> 5);  case 1:  	return (FieldTable.Index << 24) + (codedIndex >> 5);  case 2:  	return (TypeRefTable.Index << 24) + (codedIndex >> 5);  case 3:  	return (TypeDefTable.Index << 24) + (codedIndex >> 5);  case 4:  	return (ParamTable.Index << 24) + (codedIndex >> 5);  case 5:  	return (InterfaceImplTable.Index << 24) + (codedIndex >> 5);  case 6:  	return (MemberRefTable.Index << 24) + (codedIndex >> 5);  case 7:  	return (ModuleTable.Index << 24) + (codedIndex >> 5);  case 8:  	throw new BadImageFormatException ();  case 9:  	return (PropertyTable.Index << 24) + (codedIndex >> 5);  case 10:  	return (EventTable.Index << 24) + (codedIndex >> 5);  case 11:  	return (StandAloneSigTable.Index << 24) + (codedIndex >> 5);  case 12:  	return (ModuleRefTable.Index << 24) + (codedIndex >> 5);  case 13:  	return (TypeSpecTable.Index << 24) + (codedIndex >> 5);  case 14:  	return (AssemblyTable.Index << 24) + (codedIndex >> 5);  case 15:  	return (AssemblyRefTable.Index << 24) + (codedIndex >> 5);  case 16:  	return (FileTable.Index << 24) + (codedIndex >> 5);  case 17:  	return (ExportedTypeTable.Index << 24) + (codedIndex >> 5);  case 18:  	return (ManifestResourceTable.Index << 24) + (codedIndex >> 5);  case 19:  	return (GenericParamTable.Index << 24) + (codedIndex >> 5);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasCustomAttribute,The following statement contains a magic number: switch (codedIndex & 31) {  case 0:  	return (MethodDefTable.Index << 24) + (codedIndex >> 5);  case 1:  	return (FieldTable.Index << 24) + (codedIndex >> 5);  case 2:  	return (TypeRefTable.Index << 24) + (codedIndex >> 5);  case 3:  	return (TypeDefTable.Index << 24) + (codedIndex >> 5);  case 4:  	return (ParamTable.Index << 24) + (codedIndex >> 5);  case 5:  	return (InterfaceImplTable.Index << 24) + (codedIndex >> 5);  case 6:  	return (MemberRefTable.Index << 24) + (codedIndex >> 5);  case 7:  	return (ModuleTable.Index << 24) + (codedIndex >> 5);  case 8:  	throw new BadImageFormatException ();  case 9:  	return (PropertyTable.Index << 24) + (codedIndex >> 5);  case 10:  	return (EventTable.Index << 24) + (codedIndex >> 5);  case 11:  	return (StandAloneSigTable.Index << 24) + (codedIndex >> 5);  case 12:  	return (ModuleRefTable.Index << 24) + (codedIndex >> 5);  case 13:  	return (TypeSpecTable.Index << 24) + (codedIndex >> 5);  case 14:  	return (AssemblyTable.Index << 24) + (codedIndex >> 5);  case 15:  	return (AssemblyRefTable.Index << 24) + (codedIndex >> 5);  case 16:  	return (FileTable.Index << 24) + (codedIndex >> 5);  case 17:  	return (ExportedTypeTable.Index << 24) + (codedIndex >> 5);  case 18:  	return (ManifestResourceTable.Index << 24) + (codedIndex >> 5);  case 19:  	return (GenericParamTable.Index << 24) + (codedIndex >> 5);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasCustomAttribute,The following statement contains a magic number: switch (codedIndex & 31) {  case 0:  	return (MethodDefTable.Index << 24) + (codedIndex >> 5);  case 1:  	return (FieldTable.Index << 24) + (codedIndex >> 5);  case 2:  	return (TypeRefTable.Index << 24) + (codedIndex >> 5);  case 3:  	return (TypeDefTable.Index << 24) + (codedIndex >> 5);  case 4:  	return (ParamTable.Index << 24) + (codedIndex >> 5);  case 5:  	return (InterfaceImplTable.Index << 24) + (codedIndex >> 5);  case 6:  	return (MemberRefTable.Index << 24) + (codedIndex >> 5);  case 7:  	return (ModuleTable.Index << 24) + (codedIndex >> 5);  case 8:  	throw new BadImageFormatException ();  case 9:  	return (PropertyTable.Index << 24) + (codedIndex >> 5);  case 10:  	return (EventTable.Index << 24) + (codedIndex >> 5);  case 11:  	return (StandAloneSigTable.Index << 24) + (codedIndex >> 5);  case 12:  	return (ModuleRefTable.Index << 24) + (codedIndex >> 5);  case 13:  	return (TypeSpecTable.Index << 24) + (codedIndex >> 5);  case 14:  	return (AssemblyTable.Index << 24) + (codedIndex >> 5);  case 15:  	return (AssemblyRefTable.Index << 24) + (codedIndex >> 5);  case 16:  	return (FileTable.Index << 24) + (codedIndex >> 5);  case 17:  	return (ExportedTypeTable.Index << 24) + (codedIndex >> 5);  case 18:  	return (ManifestResourceTable.Index << 24) + (codedIndex >> 5);  case 19:  	return (GenericParamTable.Index << 24) + (codedIndex >> 5);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasCustomAttribute,The following statement contains a magic number: switch (codedIndex & 31) {  case 0:  	return (MethodDefTable.Index << 24) + (codedIndex >> 5);  case 1:  	return (FieldTable.Index << 24) + (codedIndex >> 5);  case 2:  	return (TypeRefTable.Index << 24) + (codedIndex >> 5);  case 3:  	return (TypeDefTable.Index << 24) + (codedIndex >> 5);  case 4:  	return (ParamTable.Index << 24) + (codedIndex >> 5);  case 5:  	return (InterfaceImplTable.Index << 24) + (codedIndex >> 5);  case 6:  	return (MemberRefTable.Index << 24) + (codedIndex >> 5);  case 7:  	return (ModuleTable.Index << 24) + (codedIndex >> 5);  case 8:  	throw new BadImageFormatException ();  case 9:  	return (PropertyTable.Index << 24) + (codedIndex >> 5);  case 10:  	return (EventTable.Index << 24) + (codedIndex >> 5);  case 11:  	return (StandAloneSigTable.Index << 24) + (codedIndex >> 5);  case 12:  	return (ModuleRefTable.Index << 24) + (codedIndex >> 5);  case 13:  	return (TypeSpecTable.Index << 24) + (codedIndex >> 5);  case 14:  	return (AssemblyTable.Index << 24) + (codedIndex >> 5);  case 15:  	return (AssemblyRefTable.Index << 24) + (codedIndex >> 5);  case 16:  	return (FileTable.Index << 24) + (codedIndex >> 5);  case 17:  	return (ExportedTypeTable.Index << 24) + (codedIndex >> 5);  case 18:  	return (ManifestResourceTable.Index << 24) + (codedIndex >> 5);  case 19:  	return (GenericParamTable.Index << 24) + (codedIndex >> 5);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasCustomAttribute,The following statement contains a magic number: switch (codedIndex & 31) {  case 0:  	return (MethodDefTable.Index << 24) + (codedIndex >> 5);  case 1:  	return (FieldTable.Index << 24) + (codedIndex >> 5);  case 2:  	return (TypeRefTable.Index << 24) + (codedIndex >> 5);  case 3:  	return (TypeDefTable.Index << 24) + (codedIndex >> 5);  case 4:  	return (ParamTable.Index << 24) + (codedIndex >> 5);  case 5:  	return (InterfaceImplTable.Index << 24) + (codedIndex >> 5);  case 6:  	return (MemberRefTable.Index << 24) + (codedIndex >> 5);  case 7:  	return (ModuleTable.Index << 24) + (codedIndex >> 5);  case 8:  	throw new BadImageFormatException ();  case 9:  	return (PropertyTable.Index << 24) + (codedIndex >> 5);  case 10:  	return (EventTable.Index << 24) + (codedIndex >> 5);  case 11:  	return (StandAloneSigTable.Index << 24) + (codedIndex >> 5);  case 12:  	return (ModuleRefTable.Index << 24) + (codedIndex >> 5);  case 13:  	return (TypeSpecTable.Index << 24) + (codedIndex >> 5);  case 14:  	return (AssemblyTable.Index << 24) + (codedIndex >> 5);  case 15:  	return (AssemblyRefTable.Index << 24) + (codedIndex >> 5);  case 16:  	return (FileTable.Index << 24) + (codedIndex >> 5);  case 17:  	return (ExportedTypeTable.Index << 24) + (codedIndex >> 5);  case 18:  	return (ManifestResourceTable.Index << 24) + (codedIndex >> 5);  case 19:  	return (GenericParamTable.Index << 24) + (codedIndex >> 5);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasCustomAttribute,The following statement contains a magic number: switch (codedIndex & 31) {  case 0:  	return (MethodDefTable.Index << 24) + (codedIndex >> 5);  case 1:  	return (FieldTable.Index << 24) + (codedIndex >> 5);  case 2:  	return (TypeRefTable.Index << 24) + (codedIndex >> 5);  case 3:  	return (TypeDefTable.Index << 24) + (codedIndex >> 5);  case 4:  	return (ParamTable.Index << 24) + (codedIndex >> 5);  case 5:  	return (InterfaceImplTable.Index << 24) + (codedIndex >> 5);  case 6:  	return (MemberRefTable.Index << 24) + (codedIndex >> 5);  case 7:  	return (ModuleTable.Index << 24) + (codedIndex >> 5);  case 8:  	throw new BadImageFormatException ();  case 9:  	return (PropertyTable.Index << 24) + (codedIndex >> 5);  case 10:  	return (EventTable.Index << 24) + (codedIndex >> 5);  case 11:  	return (StandAloneSigTable.Index << 24) + (codedIndex >> 5);  case 12:  	return (ModuleRefTable.Index << 24) + (codedIndex >> 5);  case 13:  	return (TypeSpecTable.Index << 24) + (codedIndex >> 5);  case 14:  	return (AssemblyTable.Index << 24) + (codedIndex >> 5);  case 15:  	return (AssemblyRefTable.Index << 24) + (codedIndex >> 5);  case 16:  	return (FileTable.Index << 24) + (codedIndex >> 5);  case 17:  	return (ExportedTypeTable.Index << 24) + (codedIndex >> 5);  case 18:  	return (ManifestResourceTable.Index << 24) + (codedIndex >> 5);  case 19:  	return (GenericParamTable.Index << 24) + (codedIndex >> 5);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasCustomAttribute,The following statement contains a magic number: switch (codedIndex & 31) {  case 0:  	return (MethodDefTable.Index << 24) + (codedIndex >> 5);  case 1:  	return (FieldTable.Index << 24) + (codedIndex >> 5);  case 2:  	return (TypeRefTable.Index << 24) + (codedIndex >> 5);  case 3:  	return (TypeDefTable.Index << 24) + (codedIndex >> 5);  case 4:  	return (ParamTable.Index << 24) + (codedIndex >> 5);  case 5:  	return (InterfaceImplTable.Index << 24) + (codedIndex >> 5);  case 6:  	return (MemberRefTable.Index << 24) + (codedIndex >> 5);  case 7:  	return (ModuleTable.Index << 24) + (codedIndex >> 5);  case 8:  	throw new BadImageFormatException ();  case 9:  	return (PropertyTable.Index << 24) + (codedIndex >> 5);  case 10:  	return (EventTable.Index << 24) + (codedIndex >> 5);  case 11:  	return (StandAloneSigTable.Index << 24) + (codedIndex >> 5);  case 12:  	return (ModuleRefTable.Index << 24) + (codedIndex >> 5);  case 13:  	return (TypeSpecTable.Index << 24) + (codedIndex >> 5);  case 14:  	return (AssemblyTable.Index << 24) + (codedIndex >> 5);  case 15:  	return (AssemblyRefTable.Index << 24) + (codedIndex >> 5);  case 16:  	return (FileTable.Index << 24) + (codedIndex >> 5);  case 17:  	return (ExportedTypeTable.Index << 24) + (codedIndex >> 5);  case 18:  	return (ManifestResourceTable.Index << 24) + (codedIndex >> 5);  case 19:  	return (GenericParamTable.Index << 24) + (codedIndex >> 5);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasCustomAttribute,The following statement contains a magic number: switch (codedIndex & 31) {  case 0:  	return (MethodDefTable.Index << 24) + (codedIndex >> 5);  case 1:  	return (FieldTable.Index << 24) + (codedIndex >> 5);  case 2:  	return (TypeRefTable.Index << 24) + (codedIndex >> 5);  case 3:  	return (TypeDefTable.Index << 24) + (codedIndex >> 5);  case 4:  	return (ParamTable.Index << 24) + (codedIndex >> 5);  case 5:  	return (InterfaceImplTable.Index << 24) + (codedIndex >> 5);  case 6:  	return (MemberRefTable.Index << 24) + (codedIndex >> 5);  case 7:  	return (ModuleTable.Index << 24) + (codedIndex >> 5);  case 8:  	throw new BadImageFormatException ();  case 9:  	return (PropertyTable.Index << 24) + (codedIndex >> 5);  case 10:  	return (EventTable.Index << 24) + (codedIndex >> 5);  case 11:  	return (StandAloneSigTable.Index << 24) + (codedIndex >> 5);  case 12:  	return (ModuleRefTable.Index << 24) + (codedIndex >> 5);  case 13:  	return (TypeSpecTable.Index << 24) + (codedIndex >> 5);  case 14:  	return (AssemblyTable.Index << 24) + (codedIndex >> 5);  case 15:  	return (AssemblyRefTable.Index << 24) + (codedIndex >> 5);  case 16:  	return (FileTable.Index << 24) + (codedIndex >> 5);  case 17:  	return (ExportedTypeTable.Index << 24) + (codedIndex >> 5);  case 18:  	return (ManifestResourceTable.Index << 24) + (codedIndex >> 5);  case 19:  	return (GenericParamTable.Index << 24) + (codedIndex >> 5);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasCustomAttribute,The following statement contains a magic number: switch (codedIndex & 31) {  case 0:  	return (MethodDefTable.Index << 24) + (codedIndex >> 5);  case 1:  	return (FieldTable.Index << 24) + (codedIndex >> 5);  case 2:  	return (TypeRefTable.Index << 24) + (codedIndex >> 5);  case 3:  	return (TypeDefTable.Index << 24) + (codedIndex >> 5);  case 4:  	return (ParamTable.Index << 24) + (codedIndex >> 5);  case 5:  	return (InterfaceImplTable.Index << 24) + (codedIndex >> 5);  case 6:  	return (MemberRefTable.Index << 24) + (codedIndex >> 5);  case 7:  	return (ModuleTable.Index << 24) + (codedIndex >> 5);  case 8:  	throw new BadImageFormatException ();  case 9:  	return (PropertyTable.Index << 24) + (codedIndex >> 5);  case 10:  	return (EventTable.Index << 24) + (codedIndex >> 5);  case 11:  	return (StandAloneSigTable.Index << 24) + (codedIndex >> 5);  case 12:  	return (ModuleRefTable.Index << 24) + (codedIndex >> 5);  case 13:  	return (TypeSpecTable.Index << 24) + (codedIndex >> 5);  case 14:  	return (AssemblyTable.Index << 24) + (codedIndex >> 5);  case 15:  	return (AssemblyRefTable.Index << 24) + (codedIndex >> 5);  case 16:  	return (FileTable.Index << 24) + (codedIndex >> 5);  case 17:  	return (ExportedTypeTable.Index << 24) + (codedIndex >> 5);  case 18:  	return (ManifestResourceTable.Index << 24) + (codedIndex >> 5);  case 19:  	return (GenericParamTable.Index << 24) + (codedIndex >> 5);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasCustomAttribute,The following statement contains a magic number: switch (codedIndex & 31) {  case 0:  	return (MethodDefTable.Index << 24) + (codedIndex >> 5);  case 1:  	return (FieldTable.Index << 24) + (codedIndex >> 5);  case 2:  	return (TypeRefTable.Index << 24) + (codedIndex >> 5);  case 3:  	return (TypeDefTable.Index << 24) + (codedIndex >> 5);  case 4:  	return (ParamTable.Index << 24) + (codedIndex >> 5);  case 5:  	return (InterfaceImplTable.Index << 24) + (codedIndex >> 5);  case 6:  	return (MemberRefTable.Index << 24) + (codedIndex >> 5);  case 7:  	return (ModuleTable.Index << 24) + (codedIndex >> 5);  case 8:  	throw new BadImageFormatException ();  case 9:  	return (PropertyTable.Index << 24) + (codedIndex >> 5);  case 10:  	return (EventTable.Index << 24) + (codedIndex >> 5);  case 11:  	return (StandAloneSigTable.Index << 24) + (codedIndex >> 5);  case 12:  	return (ModuleRefTable.Index << 24) + (codedIndex >> 5);  case 13:  	return (TypeSpecTable.Index << 24) + (codedIndex >> 5);  case 14:  	return (AssemblyTable.Index << 24) + (codedIndex >> 5);  case 15:  	return (AssemblyRefTable.Index << 24) + (codedIndex >> 5);  case 16:  	return (FileTable.Index << 24) + (codedIndex >> 5);  case 17:  	return (ExportedTypeTable.Index << 24) + (codedIndex >> 5);  case 18:  	return (ManifestResourceTable.Index << 24) + (codedIndex >> 5);  case 19:  	return (GenericParamTable.Index << 24) + (codedIndex >> 5);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasCustomAttribute,The following statement contains a magic number: switch (codedIndex & 31) {  case 0:  	return (MethodDefTable.Index << 24) + (codedIndex >> 5);  case 1:  	return (FieldTable.Index << 24) + (codedIndex >> 5);  case 2:  	return (TypeRefTable.Index << 24) + (codedIndex >> 5);  case 3:  	return (TypeDefTable.Index << 24) + (codedIndex >> 5);  case 4:  	return (ParamTable.Index << 24) + (codedIndex >> 5);  case 5:  	return (InterfaceImplTable.Index << 24) + (codedIndex >> 5);  case 6:  	return (MemberRefTable.Index << 24) + (codedIndex >> 5);  case 7:  	return (ModuleTable.Index << 24) + (codedIndex >> 5);  case 8:  	throw new BadImageFormatException ();  case 9:  	return (PropertyTable.Index << 24) + (codedIndex >> 5);  case 10:  	return (EventTable.Index << 24) + (codedIndex >> 5);  case 11:  	return (StandAloneSigTable.Index << 24) + (codedIndex >> 5);  case 12:  	return (ModuleRefTable.Index << 24) + (codedIndex >> 5);  case 13:  	return (TypeSpecTable.Index << 24) + (codedIndex >> 5);  case 14:  	return (AssemblyTable.Index << 24) + (codedIndex >> 5);  case 15:  	return (AssemblyRefTable.Index << 24) + (codedIndex >> 5);  case 16:  	return (FileTable.Index << 24) + (codedIndex >> 5);  case 17:  	return (ExportedTypeTable.Index << 24) + (codedIndex >> 5);  case 18:  	return (ManifestResourceTable.Index << 24) + (codedIndex >> 5);  case 19:  	return (GenericParamTable.Index << 24) + (codedIndex >> 5);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasCustomAttribute,The following statement contains a magic number: switch (codedIndex & 31) {  case 0:  	return (MethodDefTable.Index << 24) + (codedIndex >> 5);  case 1:  	return (FieldTable.Index << 24) + (codedIndex >> 5);  case 2:  	return (TypeRefTable.Index << 24) + (codedIndex >> 5);  case 3:  	return (TypeDefTable.Index << 24) + (codedIndex >> 5);  case 4:  	return (ParamTable.Index << 24) + (codedIndex >> 5);  case 5:  	return (InterfaceImplTable.Index << 24) + (codedIndex >> 5);  case 6:  	return (MemberRefTable.Index << 24) + (codedIndex >> 5);  case 7:  	return (ModuleTable.Index << 24) + (codedIndex >> 5);  case 8:  	throw new BadImageFormatException ();  case 9:  	return (PropertyTable.Index << 24) + (codedIndex >> 5);  case 10:  	return (EventTable.Index << 24) + (codedIndex >> 5);  case 11:  	return (StandAloneSigTable.Index << 24) + (codedIndex >> 5);  case 12:  	return (ModuleRefTable.Index << 24) + (codedIndex >> 5);  case 13:  	return (TypeSpecTable.Index << 24) + (codedIndex >> 5);  case 14:  	return (AssemblyTable.Index << 24) + (codedIndex >> 5);  case 15:  	return (AssemblyRefTable.Index << 24) + (codedIndex >> 5);  case 16:  	return (FileTable.Index << 24) + (codedIndex >> 5);  case 17:  	return (ExportedTypeTable.Index << 24) + (codedIndex >> 5);  case 18:  	return (ManifestResourceTable.Index << 24) + (codedIndex >> 5);  case 19:  	return (GenericParamTable.Index << 24) + (codedIndex >> 5);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasCustomAttribute,The following statement contains a magic number: switch (codedIndex & 31) {  case 0:  	return (MethodDefTable.Index << 24) + (codedIndex >> 5);  case 1:  	return (FieldTable.Index << 24) + (codedIndex >> 5);  case 2:  	return (TypeRefTable.Index << 24) + (codedIndex >> 5);  case 3:  	return (TypeDefTable.Index << 24) + (codedIndex >> 5);  case 4:  	return (ParamTable.Index << 24) + (codedIndex >> 5);  case 5:  	return (InterfaceImplTable.Index << 24) + (codedIndex >> 5);  case 6:  	return (MemberRefTable.Index << 24) + (codedIndex >> 5);  case 7:  	return (ModuleTable.Index << 24) + (codedIndex >> 5);  case 8:  	throw new BadImageFormatException ();  case 9:  	return (PropertyTable.Index << 24) + (codedIndex >> 5);  case 10:  	return (EventTable.Index << 24) + (codedIndex >> 5);  case 11:  	return (StandAloneSigTable.Index << 24) + (codedIndex >> 5);  case 12:  	return (ModuleRefTable.Index << 24) + (codedIndex >> 5);  case 13:  	return (TypeSpecTable.Index << 24) + (codedIndex >> 5);  case 14:  	return (AssemblyTable.Index << 24) + (codedIndex >> 5);  case 15:  	return (AssemblyRefTable.Index << 24) + (codedIndex >> 5);  case 16:  	return (FileTable.Index << 24) + (codedIndex >> 5);  case 17:  	return (ExportedTypeTable.Index << 24) + (codedIndex >> 5);  case 18:  	return (ManifestResourceTable.Index << 24) + (codedIndex >> 5);  case 19:  	return (GenericParamTable.Index << 24) + (codedIndex >> 5);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasCustomAttribute,The following statement contains a magic number: switch (codedIndex & 31) {  case 0:  	return (MethodDefTable.Index << 24) + (codedIndex >> 5);  case 1:  	return (FieldTable.Index << 24) + (codedIndex >> 5);  case 2:  	return (TypeRefTable.Index << 24) + (codedIndex >> 5);  case 3:  	return (TypeDefTable.Index << 24) + (codedIndex >> 5);  case 4:  	return (ParamTable.Index << 24) + (codedIndex >> 5);  case 5:  	return (InterfaceImplTable.Index << 24) + (codedIndex >> 5);  case 6:  	return (MemberRefTable.Index << 24) + (codedIndex >> 5);  case 7:  	return (ModuleTable.Index << 24) + (codedIndex >> 5);  case 8:  	throw new BadImageFormatException ();  case 9:  	return (PropertyTable.Index << 24) + (codedIndex >> 5);  case 10:  	return (EventTable.Index << 24) + (codedIndex >> 5);  case 11:  	return (StandAloneSigTable.Index << 24) + (codedIndex >> 5);  case 12:  	return (ModuleRefTable.Index << 24) + (codedIndex >> 5);  case 13:  	return (TypeSpecTable.Index << 24) + (codedIndex >> 5);  case 14:  	return (AssemblyTable.Index << 24) + (codedIndex >> 5);  case 15:  	return (AssemblyRefTable.Index << 24) + (codedIndex >> 5);  case 16:  	return (FileTable.Index << 24) + (codedIndex >> 5);  case 17:  	return (ExportedTypeTable.Index << 24) + (codedIndex >> 5);  case 18:  	return (ManifestResourceTable.Index << 24) + (codedIndex >> 5);  case 19:  	return (GenericParamTable.Index << 24) + (codedIndex >> 5);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasCustomAttribute,The following statement contains a magic number: switch (codedIndex & 31) {  case 0:  	return (MethodDefTable.Index << 24) + (codedIndex >> 5);  case 1:  	return (FieldTable.Index << 24) + (codedIndex >> 5);  case 2:  	return (TypeRefTable.Index << 24) + (codedIndex >> 5);  case 3:  	return (TypeDefTable.Index << 24) + (codedIndex >> 5);  case 4:  	return (ParamTable.Index << 24) + (codedIndex >> 5);  case 5:  	return (InterfaceImplTable.Index << 24) + (codedIndex >> 5);  case 6:  	return (MemberRefTable.Index << 24) + (codedIndex >> 5);  case 7:  	return (ModuleTable.Index << 24) + (codedIndex >> 5);  case 8:  	throw new BadImageFormatException ();  case 9:  	return (PropertyTable.Index << 24) + (codedIndex >> 5);  case 10:  	return (EventTable.Index << 24) + (codedIndex >> 5);  case 11:  	return (StandAloneSigTable.Index << 24) + (codedIndex >> 5);  case 12:  	return (ModuleRefTable.Index << 24) + (codedIndex >> 5);  case 13:  	return (TypeSpecTable.Index << 24) + (codedIndex >> 5);  case 14:  	return (AssemblyTable.Index << 24) + (codedIndex >> 5);  case 15:  	return (AssemblyRefTable.Index << 24) + (codedIndex >> 5);  case 16:  	return (FileTable.Index << 24) + (codedIndex >> 5);  case 17:  	return (ExportedTypeTable.Index << 24) + (codedIndex >> 5);  case 18:  	return (ManifestResourceTable.Index << 24) + (codedIndex >> 5);  case 19:  	return (GenericParamTable.Index << 24) + (codedIndex >> 5);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasCustomAttribute,The following statement contains a magic number: switch (codedIndex & 31) {  case 0:  	return (MethodDefTable.Index << 24) + (codedIndex >> 5);  case 1:  	return (FieldTable.Index << 24) + (codedIndex >> 5);  case 2:  	return (TypeRefTable.Index << 24) + (codedIndex >> 5);  case 3:  	return (TypeDefTable.Index << 24) + (codedIndex >> 5);  case 4:  	return (ParamTable.Index << 24) + (codedIndex >> 5);  case 5:  	return (InterfaceImplTable.Index << 24) + (codedIndex >> 5);  case 6:  	return (MemberRefTable.Index << 24) + (codedIndex >> 5);  case 7:  	return (ModuleTable.Index << 24) + (codedIndex >> 5);  case 8:  	throw new BadImageFormatException ();  case 9:  	return (PropertyTable.Index << 24) + (codedIndex >> 5);  case 10:  	return (EventTable.Index << 24) + (codedIndex >> 5);  case 11:  	return (StandAloneSigTable.Index << 24) + (codedIndex >> 5);  case 12:  	return (ModuleRefTable.Index << 24) + (codedIndex >> 5);  case 13:  	return (TypeSpecTable.Index << 24) + (codedIndex >> 5);  case 14:  	return (AssemblyTable.Index << 24) + (codedIndex >> 5);  case 15:  	return (AssemblyRefTable.Index << 24) + (codedIndex >> 5);  case 16:  	return (FileTable.Index << 24) + (codedIndex >> 5);  case 17:  	return (ExportedTypeTable.Index << 24) + (codedIndex >> 5);  case 18:  	return (ManifestResourceTable.Index << 24) + (codedIndex >> 5);  case 19:  	return (GenericParamTable.Index << 24) + (codedIndex >> 5);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasCustomAttribute,The following statement contains a magic number: switch (codedIndex & 31) {  case 0:  	return (MethodDefTable.Index << 24) + (codedIndex >> 5);  case 1:  	return (FieldTable.Index << 24) + (codedIndex >> 5);  case 2:  	return (TypeRefTable.Index << 24) + (codedIndex >> 5);  case 3:  	return (TypeDefTable.Index << 24) + (codedIndex >> 5);  case 4:  	return (ParamTable.Index << 24) + (codedIndex >> 5);  case 5:  	return (InterfaceImplTable.Index << 24) + (codedIndex >> 5);  case 6:  	return (MemberRefTable.Index << 24) + (codedIndex >> 5);  case 7:  	return (ModuleTable.Index << 24) + (codedIndex >> 5);  case 8:  	throw new BadImageFormatException ();  case 9:  	return (PropertyTable.Index << 24) + (codedIndex >> 5);  case 10:  	return (EventTable.Index << 24) + (codedIndex >> 5);  case 11:  	return (StandAloneSigTable.Index << 24) + (codedIndex >> 5);  case 12:  	return (ModuleRefTable.Index << 24) + (codedIndex >> 5);  case 13:  	return (TypeSpecTable.Index << 24) + (codedIndex >> 5);  case 14:  	return (AssemblyTable.Index << 24) + (codedIndex >> 5);  case 15:  	return (AssemblyRefTable.Index << 24) + (codedIndex >> 5);  case 16:  	return (FileTable.Index << 24) + (codedIndex >> 5);  case 17:  	return (ExportedTypeTable.Index << 24) + (codedIndex >> 5);  case 18:  	return (ManifestResourceTable.Index << 24) + (codedIndex >> 5);  case 19:  	return (GenericParamTable.Index << 24) + (codedIndex >> 5);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasCustomAttribute,The following statement contains a magic number: switch (codedIndex & 31) {  case 0:  	return (MethodDefTable.Index << 24) + (codedIndex >> 5);  case 1:  	return (FieldTable.Index << 24) + (codedIndex >> 5);  case 2:  	return (TypeRefTable.Index << 24) + (codedIndex >> 5);  case 3:  	return (TypeDefTable.Index << 24) + (codedIndex >> 5);  case 4:  	return (ParamTable.Index << 24) + (codedIndex >> 5);  case 5:  	return (InterfaceImplTable.Index << 24) + (codedIndex >> 5);  case 6:  	return (MemberRefTable.Index << 24) + (codedIndex >> 5);  case 7:  	return (ModuleTable.Index << 24) + (codedIndex >> 5);  case 8:  	throw new BadImageFormatException ();  case 9:  	return (PropertyTable.Index << 24) + (codedIndex >> 5);  case 10:  	return (EventTable.Index << 24) + (codedIndex >> 5);  case 11:  	return (StandAloneSigTable.Index << 24) + (codedIndex >> 5);  case 12:  	return (ModuleRefTable.Index << 24) + (codedIndex >> 5);  case 13:  	return (TypeSpecTable.Index << 24) + (codedIndex >> 5);  case 14:  	return (AssemblyTable.Index << 24) + (codedIndex >> 5);  case 15:  	return (AssemblyRefTable.Index << 24) + (codedIndex >> 5);  case 16:  	return (FileTable.Index << 24) + (codedIndex >> 5);  case 17:  	return (ExportedTypeTable.Index << 24) + (codedIndex >> 5);  case 18:  	return (ManifestResourceTable.Index << 24) + (codedIndex >> 5);  case 19:  	return (GenericParamTable.Index << 24) + (codedIndex >> 5);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasCustomAttribute,The following statement contains a magic number: switch (codedIndex & 31) {  case 0:  	return (MethodDefTable.Index << 24) + (codedIndex >> 5);  case 1:  	return (FieldTable.Index << 24) + (codedIndex >> 5);  case 2:  	return (TypeRefTable.Index << 24) + (codedIndex >> 5);  case 3:  	return (TypeDefTable.Index << 24) + (codedIndex >> 5);  case 4:  	return (ParamTable.Index << 24) + (codedIndex >> 5);  case 5:  	return (InterfaceImplTable.Index << 24) + (codedIndex >> 5);  case 6:  	return (MemberRefTable.Index << 24) + (codedIndex >> 5);  case 7:  	return (ModuleTable.Index << 24) + (codedIndex >> 5);  case 8:  	throw new BadImageFormatException ();  case 9:  	return (PropertyTable.Index << 24) + (codedIndex >> 5);  case 10:  	return (EventTable.Index << 24) + (codedIndex >> 5);  case 11:  	return (StandAloneSigTable.Index << 24) + (codedIndex >> 5);  case 12:  	return (ModuleRefTable.Index << 24) + (codedIndex >> 5);  case 13:  	return (TypeSpecTable.Index << 24) + (codedIndex >> 5);  case 14:  	return (AssemblyTable.Index << 24) + (codedIndex >> 5);  case 15:  	return (AssemblyRefTable.Index << 24) + (codedIndex >> 5);  case 16:  	return (FileTable.Index << 24) + (codedIndex >> 5);  case 17:  	return (ExportedTypeTable.Index << 24) + (codedIndex >> 5);  case 18:  	return (ManifestResourceTable.Index << 24) + (codedIndex >> 5);  case 19:  	return (GenericParamTable.Index << 24) + (codedIndex >> 5);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasCustomAttribute,The following statement contains a magic number: switch (codedIndex & 31) {  case 0:  	return (MethodDefTable.Index << 24) + (codedIndex >> 5);  case 1:  	return (FieldTable.Index << 24) + (codedIndex >> 5);  case 2:  	return (TypeRefTable.Index << 24) + (codedIndex >> 5);  case 3:  	return (TypeDefTable.Index << 24) + (codedIndex >> 5);  case 4:  	return (ParamTable.Index << 24) + (codedIndex >> 5);  case 5:  	return (InterfaceImplTable.Index << 24) + (codedIndex >> 5);  case 6:  	return (MemberRefTable.Index << 24) + (codedIndex >> 5);  case 7:  	return (ModuleTable.Index << 24) + (codedIndex >> 5);  case 8:  	throw new BadImageFormatException ();  case 9:  	return (PropertyTable.Index << 24) + (codedIndex >> 5);  case 10:  	return (EventTable.Index << 24) + (codedIndex >> 5);  case 11:  	return (StandAloneSigTable.Index << 24) + (codedIndex >> 5);  case 12:  	return (ModuleRefTable.Index << 24) + (codedIndex >> 5);  case 13:  	return (TypeSpecTable.Index << 24) + (codedIndex >> 5);  case 14:  	return (AssemblyTable.Index << 24) + (codedIndex >> 5);  case 15:  	return (AssemblyRefTable.Index << 24) + (codedIndex >> 5);  case 16:  	return (FileTable.Index << 24) + (codedIndex >> 5);  case 17:  	return (ExportedTypeTable.Index << 24) + (codedIndex >> 5);  case 18:  	return (ManifestResourceTable.Index << 24) + (codedIndex >> 5);  case 19:  	return (GenericParamTable.Index << 24) + (codedIndex >> 5);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasCustomAttribute,The following statement contains a magic number: switch (codedIndex & 31) {  case 0:  	return (MethodDefTable.Index << 24) + (codedIndex >> 5);  case 1:  	return (FieldTable.Index << 24) + (codedIndex >> 5);  case 2:  	return (TypeRefTable.Index << 24) + (codedIndex >> 5);  case 3:  	return (TypeDefTable.Index << 24) + (codedIndex >> 5);  case 4:  	return (ParamTable.Index << 24) + (codedIndex >> 5);  case 5:  	return (InterfaceImplTable.Index << 24) + (codedIndex >> 5);  case 6:  	return (MemberRefTable.Index << 24) + (codedIndex >> 5);  case 7:  	return (ModuleTable.Index << 24) + (codedIndex >> 5);  case 8:  	throw new BadImageFormatException ();  case 9:  	return (PropertyTable.Index << 24) + (codedIndex >> 5);  case 10:  	return (EventTable.Index << 24) + (codedIndex >> 5);  case 11:  	return (StandAloneSigTable.Index << 24) + (codedIndex >> 5);  case 12:  	return (ModuleRefTable.Index << 24) + (codedIndex >> 5);  case 13:  	return (TypeSpecTable.Index << 24) + (codedIndex >> 5);  case 14:  	return (AssemblyTable.Index << 24) + (codedIndex >> 5);  case 15:  	return (AssemblyRefTable.Index << 24) + (codedIndex >> 5);  case 16:  	return (FileTable.Index << 24) + (codedIndex >> 5);  case 17:  	return (ExportedTypeTable.Index << 24) + (codedIndex >> 5);  case 18:  	return (ManifestResourceTable.Index << 24) + (codedIndex >> 5);  case 19:  	return (GenericParamTable.Index << 24) + (codedIndex >> 5);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasCustomAttribute,The following statement contains a magic number: return (MethodDefTable.Index << 24) + (codedIndex >> 5);  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasCustomAttribute,The following statement contains a magic number: return (MethodDefTable.Index << 24) + (codedIndex >> 5);  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasCustomAttribute,The following statement contains a magic number: return (FieldTable.Index << 24) + (codedIndex >> 5);  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasCustomAttribute,The following statement contains a magic number: return (FieldTable.Index << 24) + (codedIndex >> 5);  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasCustomAttribute,The following statement contains a magic number: return (TypeRefTable.Index << 24) + (codedIndex >> 5);  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasCustomAttribute,The following statement contains a magic number: return (TypeRefTable.Index << 24) + (codedIndex >> 5);  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasCustomAttribute,The following statement contains a magic number: return (TypeDefTable.Index << 24) + (codedIndex >> 5);  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasCustomAttribute,The following statement contains a magic number: return (TypeDefTable.Index << 24) + (codedIndex >> 5);  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasCustomAttribute,The following statement contains a magic number: return (ParamTable.Index << 24) + (codedIndex >> 5);  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasCustomAttribute,The following statement contains a magic number: return (ParamTable.Index << 24) + (codedIndex >> 5);  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasCustomAttribute,The following statement contains a magic number: return (InterfaceImplTable.Index << 24) + (codedIndex >> 5);  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasCustomAttribute,The following statement contains a magic number: return (InterfaceImplTable.Index << 24) + (codedIndex >> 5);  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasCustomAttribute,The following statement contains a magic number: return (MemberRefTable.Index << 24) + (codedIndex >> 5);  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasCustomAttribute,The following statement contains a magic number: return (MemberRefTable.Index << 24) + (codedIndex >> 5);  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasCustomAttribute,The following statement contains a magic number: return (ModuleTable.Index << 24) + (codedIndex >> 5);  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasCustomAttribute,The following statement contains a magic number: return (ModuleTable.Index << 24) + (codedIndex >> 5);  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasCustomAttribute,The following statement contains a magic number: return (PropertyTable.Index << 24) + (codedIndex >> 5);  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasCustomAttribute,The following statement contains a magic number: return (PropertyTable.Index << 24) + (codedIndex >> 5);  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasCustomAttribute,The following statement contains a magic number: return (EventTable.Index << 24) + (codedIndex >> 5);  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasCustomAttribute,The following statement contains a magic number: return (EventTable.Index << 24) + (codedIndex >> 5);  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasCustomAttribute,The following statement contains a magic number: return (StandAloneSigTable.Index << 24) + (codedIndex >> 5);  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasCustomAttribute,The following statement contains a magic number: return (StandAloneSigTable.Index << 24) + (codedIndex >> 5);  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasCustomAttribute,The following statement contains a magic number: return (ModuleRefTable.Index << 24) + (codedIndex >> 5);  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasCustomAttribute,The following statement contains a magic number: return (ModuleRefTable.Index << 24) + (codedIndex >> 5);  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasCustomAttribute,The following statement contains a magic number: return (TypeSpecTable.Index << 24) + (codedIndex >> 5);  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasCustomAttribute,The following statement contains a magic number: return (TypeSpecTable.Index << 24) + (codedIndex >> 5);  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasCustomAttribute,The following statement contains a magic number: return (AssemblyTable.Index << 24) + (codedIndex >> 5);  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasCustomAttribute,The following statement contains a magic number: return (AssemblyTable.Index << 24) + (codedIndex >> 5);  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasCustomAttribute,The following statement contains a magic number: return (AssemblyRefTable.Index << 24) + (codedIndex >> 5);  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasCustomAttribute,The following statement contains a magic number: return (AssemblyRefTable.Index << 24) + (codedIndex >> 5);  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasCustomAttribute,The following statement contains a magic number: return (FileTable.Index << 24) + (codedIndex >> 5);  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasCustomAttribute,The following statement contains a magic number: return (FileTable.Index << 24) + (codedIndex >> 5);  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasCustomAttribute,The following statement contains a magic number: return (ExportedTypeTable.Index << 24) + (codedIndex >> 5);  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasCustomAttribute,The following statement contains a magic number: return (ExportedTypeTable.Index << 24) + (codedIndex >> 5);  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasCustomAttribute,The following statement contains a magic number: return (ManifestResourceTable.Index << 24) + (codedIndex >> 5);  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasCustomAttribute,The following statement contains a magic number: return (ManifestResourceTable.Index << 24) + (codedIndex >> 5);  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasCustomAttribute,The following statement contains a magic number: return (GenericParamTable.Index << 24) + (codedIndex >> 5);  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasCustomAttribute,The following statement contains a magic number: return (GenericParamTable.Index << 24) + (codedIndex >> 5);  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadCustomAttributeType,The following statement contains a magic number: switch (codedIndex & 7) {  case 2:  	return (MethodDefTable.Index << 24) + (codedIndex >> 3);  case 3:  	return (MemberRefTable.Index << 24) + (codedIndex >> 3);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadCustomAttributeType,The following statement contains a magic number: switch (codedIndex & 7) {  case 2:  	return (MethodDefTable.Index << 24) + (codedIndex >> 3);  case 3:  	return (MemberRefTable.Index << 24) + (codedIndex >> 3);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadCustomAttributeType,The following statement contains a magic number: switch (codedIndex & 7) {  case 2:  	return (MethodDefTable.Index << 24) + (codedIndex >> 3);  case 3:  	return (MemberRefTable.Index << 24) + (codedIndex >> 3);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadCustomAttributeType,The following statement contains a magic number: switch (codedIndex & 7) {  case 2:  	return (MethodDefTable.Index << 24) + (codedIndex >> 3);  case 3:  	return (MemberRefTable.Index << 24) + (codedIndex >> 3);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadCustomAttributeType,The following statement contains a magic number: switch (codedIndex & 7) {  case 2:  	return (MethodDefTable.Index << 24) + (codedIndex >> 3);  case 3:  	return (MemberRefTable.Index << 24) + (codedIndex >> 3);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadCustomAttributeType,The following statement contains a magic number: switch (codedIndex & 7) {  case 2:  	return (MethodDefTable.Index << 24) + (codedIndex >> 3);  case 3:  	return (MemberRefTable.Index << 24) + (codedIndex >> 3);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadCustomAttributeType,The following statement contains a magic number: switch (codedIndex & 7) {  case 2:  	return (MethodDefTable.Index << 24) + (codedIndex >> 3);  case 3:  	return (MemberRefTable.Index << 24) + (codedIndex >> 3);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadCustomAttributeType,The following statement contains a magic number: return (MethodDefTable.Index << 24) + (codedIndex >> 3);  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadCustomAttributeType,The following statement contains a magic number: return (MethodDefTable.Index << 24) + (codedIndex >> 3);  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadCustomAttributeType,The following statement contains a magic number: return (MemberRefTable.Index << 24) + (codedIndex >> 3);  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadCustomAttributeType,The following statement contains a magic number: return (MemberRefTable.Index << 24) + (codedIndex >> 3);  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadMethodDefOrRef,The following statement contains a magic number: switch (codedIndex & 1) {  case 0:  	return (MethodDefTable.Index << 24) + (codedIndex >> 1);  case 1:  	return (MemberRefTable.Index << 24) + (codedIndex >> 1);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadMethodDefOrRef,The following statement contains a magic number: switch (codedIndex & 1) {  case 0:  	return (MethodDefTable.Index << 24) + (codedIndex >> 1);  case 1:  	return (MemberRefTable.Index << 24) + (codedIndex >> 1);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadMethodDefOrRef,The following statement contains a magic number: return (MethodDefTable.Index << 24) + (codedIndex >> 1);  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadMethodDefOrRef,The following statement contains a magic number: return (MemberRefTable.Index << 24) + (codedIndex >> 1);  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasConstant,The following statement contains a magic number: switch (codedIndex & 3) {  case 0:  	return (FieldTable.Index << 24) + (codedIndex >> 2);  case 1:  	return (ParamTable.Index << 24) + (codedIndex >> 2);  case 2:  	return (PropertyTable.Index << 24) + (codedIndex >> 2);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasConstant,The following statement contains a magic number: switch (codedIndex & 3) {  case 0:  	return (FieldTable.Index << 24) + (codedIndex >> 2);  case 1:  	return (ParamTable.Index << 24) + (codedIndex >> 2);  case 2:  	return (PropertyTable.Index << 24) + (codedIndex >> 2);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasConstant,The following statement contains a magic number: switch (codedIndex & 3) {  case 0:  	return (FieldTable.Index << 24) + (codedIndex >> 2);  case 1:  	return (ParamTable.Index << 24) + (codedIndex >> 2);  case 2:  	return (PropertyTable.Index << 24) + (codedIndex >> 2);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasConstant,The following statement contains a magic number: switch (codedIndex & 3) {  case 0:  	return (FieldTable.Index << 24) + (codedIndex >> 2);  case 1:  	return (ParamTable.Index << 24) + (codedIndex >> 2);  case 2:  	return (PropertyTable.Index << 24) + (codedIndex >> 2);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasConstant,The following statement contains a magic number: switch (codedIndex & 3) {  case 0:  	return (FieldTable.Index << 24) + (codedIndex >> 2);  case 1:  	return (ParamTable.Index << 24) + (codedIndex >> 2);  case 2:  	return (PropertyTable.Index << 24) + (codedIndex >> 2);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasConstant,The following statement contains a magic number: switch (codedIndex & 3) {  case 0:  	return (FieldTable.Index << 24) + (codedIndex >> 2);  case 1:  	return (ParamTable.Index << 24) + (codedIndex >> 2);  case 2:  	return (PropertyTable.Index << 24) + (codedIndex >> 2);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasConstant,The following statement contains a magic number: switch (codedIndex & 3) {  case 0:  	return (FieldTable.Index << 24) + (codedIndex >> 2);  case 1:  	return (ParamTable.Index << 24) + (codedIndex >> 2);  case 2:  	return (PropertyTable.Index << 24) + (codedIndex >> 2);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasConstant,The following statement contains a magic number: switch (codedIndex & 3) {  case 0:  	return (FieldTable.Index << 24) + (codedIndex >> 2);  case 1:  	return (ParamTable.Index << 24) + (codedIndex >> 2);  case 2:  	return (PropertyTable.Index << 24) + (codedIndex >> 2);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasConstant,The following statement contains a magic number: return (FieldTable.Index << 24) + (codedIndex >> 2);  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasConstant,The following statement contains a magic number: return (FieldTable.Index << 24) + (codedIndex >> 2);  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasConstant,The following statement contains a magic number: return (ParamTable.Index << 24) + (codedIndex >> 2);  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasConstant,The following statement contains a magic number: return (ParamTable.Index << 24) + (codedIndex >> 2);  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasConstant,The following statement contains a magic number: return (PropertyTable.Index << 24) + (codedIndex >> 2);  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasConstant,The following statement contains a magic number: return (PropertyTable.Index << 24) + (codedIndex >> 2);  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasSemantics,The following statement contains a magic number: switch (codedIndex & 1) {  case 0:  	return (EventTable.Index << 24) + (codedIndex >> 1);  case 1:  	return (PropertyTable.Index << 24) + (codedIndex >> 1);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasSemantics,The following statement contains a magic number: switch (codedIndex & 1) {  case 0:  	return (EventTable.Index << 24) + (codedIndex >> 1);  case 1:  	return (PropertyTable.Index << 24) + (codedIndex >> 1);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasSemantics,The following statement contains a magic number: return (EventTable.Index << 24) + (codedIndex >> 1);  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasSemantics,The following statement contains a magic number: return (PropertyTable.Index << 24) + (codedIndex >> 1);  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasFieldMarshal,The following statement contains a magic number: switch (codedIndex & 1) {  case 0:  	return (FieldTable.Index << 24) + (codedIndex >> 1);  case 1:  	return (ParamTable.Index << 24) + (codedIndex >> 1);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasFieldMarshal,The following statement contains a magic number: switch (codedIndex & 1) {  case 0:  	return (FieldTable.Index << 24) + (codedIndex >> 1);  case 1:  	return (ParamTable.Index << 24) + (codedIndex >> 1);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasFieldMarshal,The following statement contains a magic number: return (FieldTable.Index << 24) + (codedIndex >> 1);  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasFieldMarshal,The following statement contains a magic number: return (ParamTable.Index << 24) + (codedIndex >> 1);  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasDeclSecurity,The following statement contains a magic number: switch (codedIndex & 3) {  case 0:  	return (TypeDefTable.Index << 24) + (codedIndex >> 2);  case 1:  	return (MethodDefTable.Index << 24) + (codedIndex >> 2);  case 2:  	return (AssemblyTable.Index << 24) + (codedIndex >> 2);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasDeclSecurity,The following statement contains a magic number: switch (codedIndex & 3) {  case 0:  	return (TypeDefTable.Index << 24) + (codedIndex >> 2);  case 1:  	return (MethodDefTable.Index << 24) + (codedIndex >> 2);  case 2:  	return (AssemblyTable.Index << 24) + (codedIndex >> 2);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasDeclSecurity,The following statement contains a magic number: switch (codedIndex & 3) {  case 0:  	return (TypeDefTable.Index << 24) + (codedIndex >> 2);  case 1:  	return (MethodDefTable.Index << 24) + (codedIndex >> 2);  case 2:  	return (AssemblyTable.Index << 24) + (codedIndex >> 2);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasDeclSecurity,The following statement contains a magic number: switch (codedIndex & 3) {  case 0:  	return (TypeDefTable.Index << 24) + (codedIndex >> 2);  case 1:  	return (MethodDefTable.Index << 24) + (codedIndex >> 2);  case 2:  	return (AssemblyTable.Index << 24) + (codedIndex >> 2);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasDeclSecurity,The following statement contains a magic number: switch (codedIndex & 3) {  case 0:  	return (TypeDefTable.Index << 24) + (codedIndex >> 2);  case 1:  	return (MethodDefTable.Index << 24) + (codedIndex >> 2);  case 2:  	return (AssemblyTable.Index << 24) + (codedIndex >> 2);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasDeclSecurity,The following statement contains a magic number: switch (codedIndex & 3) {  case 0:  	return (TypeDefTable.Index << 24) + (codedIndex >> 2);  case 1:  	return (MethodDefTable.Index << 24) + (codedIndex >> 2);  case 2:  	return (AssemblyTable.Index << 24) + (codedIndex >> 2);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasDeclSecurity,The following statement contains a magic number: switch (codedIndex & 3) {  case 0:  	return (TypeDefTable.Index << 24) + (codedIndex >> 2);  case 1:  	return (MethodDefTable.Index << 24) + (codedIndex >> 2);  case 2:  	return (AssemblyTable.Index << 24) + (codedIndex >> 2);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasDeclSecurity,The following statement contains a magic number: switch (codedIndex & 3) {  case 0:  	return (TypeDefTable.Index << 24) + (codedIndex >> 2);  case 1:  	return (MethodDefTable.Index << 24) + (codedIndex >> 2);  case 2:  	return (AssemblyTable.Index << 24) + (codedIndex >> 2);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasDeclSecurity,The following statement contains a magic number: return (TypeDefTable.Index << 24) + (codedIndex >> 2);  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasDeclSecurity,The following statement contains a magic number: return (TypeDefTable.Index << 24) + (codedIndex >> 2);  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasDeclSecurity,The following statement contains a magic number: return (MethodDefTable.Index << 24) + (codedIndex >> 2);  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasDeclSecurity,The following statement contains a magic number: return (MethodDefTable.Index << 24) + (codedIndex >> 2);  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasDeclSecurity,The following statement contains a magic number: return (AssemblyTable.Index << 24) + (codedIndex >> 2);  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadHasDeclSecurity,The following statement contains a magic number: return (AssemblyTable.Index << 24) + (codedIndex >> 2);  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadTypeOrMethodDef,The following statement contains a magic number: switch (codedIndex & 1) {  case 0:  	return (TypeDefTable.Index << 24) + (codedIndex >> 1);  case 1:  	return (MethodDefTable.Index << 24) + (codedIndex >> 1);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadTypeOrMethodDef,The following statement contains a magic number: switch (codedIndex & 1) {  case 0:  	return (TypeDefTable.Index << 24) + (codedIndex >> 1);  case 1:  	return (MethodDefTable.Index << 24) + (codedIndex >> 1);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadTypeOrMethodDef,The following statement contains a magic number: return (TypeDefTable.Index << 24) + (codedIndex >> 1);  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadTypeOrMethodDef,The following statement contains a magic number: return (MethodDefTable.Index << 24) + (codedIndex >> 1);  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadMemberForwarded,The following statement contains a magic number: switch (codedIndex & 1) {  case 0:  	return (FieldTable.Index << 24) + (codedIndex >> 1);  case 1:  	return (MethodDefTable.Index << 24) + (codedIndex >> 1);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadMemberForwarded,The following statement contains a magic number: switch (codedIndex & 1) {  case 0:  	return (FieldTable.Index << 24) + (codedIndex >> 1);  case 1:  	return (MethodDefTable.Index << 24) + (codedIndex >> 1);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadMemberForwarded,The following statement contains a magic number: return (FieldTable.Index << 24) + (codedIndex >> 1);  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadMemberForwarded,The following statement contains a magic number: return (MethodDefTable.Index << 24) + (codedIndex >> 1);  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadImplementation,The following statement contains a magic number: switch (codedIndex & 3) {  case 0:  	return (FileTable.Index << 24) + (codedIndex >> 2);  case 1:  	return (AssemblyRefTable.Index << 24) + (codedIndex >> 2);  case 2:  	return (ExportedTypeTable.Index << 24) + (codedIndex >> 2);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadImplementation,The following statement contains a magic number: switch (codedIndex & 3) {  case 0:  	return (FileTable.Index << 24) + (codedIndex >> 2);  case 1:  	return (AssemblyRefTable.Index << 24) + (codedIndex >> 2);  case 2:  	return (ExportedTypeTable.Index << 24) + (codedIndex >> 2);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadImplementation,The following statement contains a magic number: switch (codedIndex & 3) {  case 0:  	return (FileTable.Index << 24) + (codedIndex >> 2);  case 1:  	return (AssemblyRefTable.Index << 24) + (codedIndex >> 2);  case 2:  	return (ExportedTypeTable.Index << 24) + (codedIndex >> 2);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadImplementation,The following statement contains a magic number: switch (codedIndex & 3) {  case 0:  	return (FileTable.Index << 24) + (codedIndex >> 2);  case 1:  	return (AssemblyRefTable.Index << 24) + (codedIndex >> 2);  case 2:  	return (ExportedTypeTable.Index << 24) + (codedIndex >> 2);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadImplementation,The following statement contains a magic number: switch (codedIndex & 3) {  case 0:  	return (FileTable.Index << 24) + (codedIndex >> 2);  case 1:  	return (AssemblyRefTable.Index << 24) + (codedIndex >> 2);  case 2:  	return (ExportedTypeTable.Index << 24) + (codedIndex >> 2);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadImplementation,The following statement contains a magic number: switch (codedIndex & 3) {  case 0:  	return (FileTable.Index << 24) + (codedIndex >> 2);  case 1:  	return (AssemblyRefTable.Index << 24) + (codedIndex >> 2);  case 2:  	return (ExportedTypeTable.Index << 24) + (codedIndex >> 2);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadImplementation,The following statement contains a magic number: switch (codedIndex & 3) {  case 0:  	return (FileTable.Index << 24) + (codedIndex >> 2);  case 1:  	return (AssemblyRefTable.Index << 24) + (codedIndex >> 2);  case 2:  	return (ExportedTypeTable.Index << 24) + (codedIndex >> 2);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadImplementation,The following statement contains a magic number: switch (codedIndex & 3) {  case 0:  	return (FileTable.Index << 24) + (codedIndex >> 2);  case 1:  	return (AssemblyRefTable.Index << 24) + (codedIndex >> 2);  case 2:  	return (ExportedTypeTable.Index << 24) + (codedIndex >> 2);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadImplementation,The following statement contains a magic number: return (FileTable.Index << 24) + (codedIndex >> 2);  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadImplementation,The following statement contains a magic number: return (FileTable.Index << 24) + (codedIndex >> 2);  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadImplementation,The following statement contains a magic number: return (AssemblyRefTable.Index << 24) + (codedIndex >> 2);  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadImplementation,The following statement contains a magic number: return (AssemblyRefTable.Index << 24) + (codedIndex >> 2);  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadImplementation,The following statement contains a magic number: return (ExportedTypeTable.Index << 24) + (codedIndex >> 2);  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadImplementation,The following statement contains a magic number: return (ExportedTypeTable.Index << 24) + (codedIndex >> 2);  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadTypeDef,The following statement contains a magic number: return ReadIndex (bigTypeDef) | (TypeDefTable.Index << 24);  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadGenericParam,The following statement contains a magic number: return ReadIndex (bigGenericParam) | (GenericParamTable.Index << 24);  
Magic Number,IKVM.Reflection.Reader,MetadataReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\MetadataReader.cs,ReadModuleRef,The following statement contains a magic number: return ReadIndex (bigModuleRef) | (ModuleRefTable.Index << 24);  
Magic Number,IKVM.Reflection.Reader,ModuleReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ModuleReader.cs,ReadTables,The following statement contains a magic number: metadataStreamVersion = MajorVersion << 16 | MinorVersion;  
Magic Number,IKVM.Reflection.Reader,ModuleReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ModuleReader.cs,ReadTables,The following statement contains a magic number: for (int i = 0; i < 64; i++) {  	if ((Valid & (1UL << i)) != 0) {  		tables [i].Sorted = (Sorted & (1UL << i)) != 0;  		tables [i].RowCount = br.ReadInt32 ();  	} else if (tables [i] != null) {  		tables [i].RowCount = 0;  	}  }  
Magic Number,IKVM.Reflection.Reader,ModuleReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ModuleReader.cs,ReadTables,The following statement contains a magic number: for (int i = 0; i < 64; i++) {  	if ((Valid & (1UL << i)) != 0) {  		tables [i].Read (mr);  	}  }  
Magic Number,IKVM.Reflection.Reader,ModuleReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ModuleReader.cs,PopulateTypeDef,The following statement contains a magic number: if (typeDefs == null) {  	typeDefs = new TypeDefImpl[TypeDef.records.Length];  	for (int i = 0; i < typeDefs.Length; i++) {  		TypeDefImpl type = new TypeDefImpl (this' i);  		typeDefs [i] = type;  		if (type.IsModulePseudoType) {  			moduleType = type;  		} else if (!type.IsNestedByFlags) {  			types.Add (new TypeName (type.__Namespace' type.__Name)' type);  		}  	}  	// add forwarded types to forwardedTypes dictionary (because Module.GetType(string) should return them)  	for (int i = 0; i < ExportedType.records.Length; i++) {  		int implementation = ExportedType.records [i].Implementation;  		if (implementation >> 24 == AssemblyRefTable.Index) {  			TypeName typeName = GetTypeName (ExportedType.records [i].TypeNamespace' ExportedType.records [i].TypeName);  			forwardedTypes.Add (typeName' new LazyForwardedType ((implementation & 0xFFFFFF) - 1));  		}  	}  }  
Magic Number,IKVM.Reflection.Reader,ModuleReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ModuleReader.cs,PopulateTypeDef,The following statement contains a magic number: for (int i = 0; i < ExportedType.records.Length; i++) {  	int implementation = ExportedType.records [i].Implementation;  	if (implementation >> 24 == AssemblyRefTable.Index) {  		TypeName typeName = GetTypeName (ExportedType.records [i].TypeNamespace' ExportedType.records [i].TypeName);  		forwardedTypes.Add (typeName' new LazyForwardedType ((implementation & 0xFFFFFF) - 1));  	}  }  
Magic Number,IKVM.Reflection.Reader,ModuleReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ModuleReader.cs,PopulateTypeDef,The following statement contains a magic number: if (implementation >> 24 == AssemblyRefTable.Index) {  	TypeName typeName = GetTypeName (ExportedType.records [i].TypeNamespace' ExportedType.records [i].TypeName);  	forwardedTypes.Add (typeName' new LazyForwardedType ((implementation & 0xFFFFFF) - 1));  }  
Magic Number,IKVM.Reflection.Reader,ModuleReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ModuleReader.cs,ReadCompressedInt,The following statement contains a magic number: if (b1 <= 0x7F) {  	return b1;  } else if ((b1 & 0xC0) == 0x80) {  	byte b2 = buffer [offset++];  	return ((b1 & 0x3F) << 8) | b2;  } else {  	byte b2 = buffer [offset++];  	byte b3 = buffer [offset++];  	byte b4 = buffer [offset++];  	return ((b1 & 0x3F) << 24) + (b2 << 16) + (b3 << 8) + b4;  }  
Magic Number,IKVM.Reflection.Reader,ModuleReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ModuleReader.cs,ReadCompressedInt,The following statement contains a magic number: if (b1 <= 0x7F) {  	return b1;  } else if ((b1 & 0xC0) == 0x80) {  	byte b2 = buffer [offset++];  	return ((b1 & 0x3F) << 8) | b2;  } else {  	byte b2 = buffer [offset++];  	byte b3 = buffer [offset++];  	byte b4 = buffer [offset++];  	return ((b1 & 0x3F) << 24) + (b2 << 16) + (b3 << 8) + b4;  }  
Magic Number,IKVM.Reflection.Reader,ModuleReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ModuleReader.cs,ReadCompressedInt,The following statement contains a magic number: if (b1 <= 0x7F) {  	return b1;  } else if ((b1 & 0xC0) == 0x80) {  	byte b2 = buffer [offset++];  	return ((b1 & 0x3F) << 8) | b2;  } else {  	byte b2 = buffer [offset++];  	byte b3 = buffer [offset++];  	byte b4 = buffer [offset++];  	return ((b1 & 0x3F) << 24) + (b2 << 16) + (b3 << 8) + b4;  }  
Magic Number,IKVM.Reflection.Reader,ModuleReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ModuleReader.cs,ReadCompressedInt,The following statement contains a magic number: if (b1 <= 0x7F) {  	return b1;  } else if ((b1 & 0xC0) == 0x80) {  	byte b2 = buffer [offset++];  	return ((b1 & 0x3F) << 8) | b2;  } else {  	byte b2 = buffer [offset++];  	byte b3 = buffer [offset++];  	byte b4 = buffer [offset++];  	return ((b1 & 0x3F) << 24) + (b2 << 16) + (b3 << 8) + b4;  }  
Magic Number,IKVM.Reflection.Reader,ModuleReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ModuleReader.cs,ReadCompressedInt,The following statement contains a magic number: if ((b1 & 0xC0) == 0x80) {  	byte b2 = buffer [offset++];  	return ((b1 & 0x3F) << 8) | b2;  } else {  	byte b2 = buffer [offset++];  	byte b3 = buffer [offset++];  	byte b4 = buffer [offset++];  	return ((b1 & 0x3F) << 24) + (b2 << 16) + (b3 << 8) + b4;  }  
Magic Number,IKVM.Reflection.Reader,ModuleReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ModuleReader.cs,ReadCompressedInt,The following statement contains a magic number: if ((b1 & 0xC0) == 0x80) {  	byte b2 = buffer [offset++];  	return ((b1 & 0x3F) << 8) | b2;  } else {  	byte b2 = buffer [offset++];  	byte b3 = buffer [offset++];  	byte b4 = buffer [offset++];  	return ((b1 & 0x3F) << 24) + (b2 << 16) + (b3 << 8) + b4;  }  
Magic Number,IKVM.Reflection.Reader,ModuleReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ModuleReader.cs,ReadCompressedInt,The following statement contains a magic number: if ((b1 & 0xC0) == 0x80) {  	byte b2 = buffer [offset++];  	return ((b1 & 0x3F) << 8) | b2;  } else {  	byte b2 = buffer [offset++];  	byte b3 = buffer [offset++];  	byte b4 = buffer [offset++];  	return ((b1 & 0x3F) << 24) + (b2 << 16) + (b3 << 8) + b4;  }  
Magic Number,IKVM.Reflection.Reader,ModuleReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ModuleReader.cs,ReadCompressedInt,The following statement contains a magic number: if ((b1 & 0xC0) == 0x80) {  	byte b2 = buffer [offset++];  	return ((b1 & 0x3F) << 8) | b2;  } else {  	byte b2 = buffer [offset++];  	byte b3 = buffer [offset++];  	byte b4 = buffer [offset++];  	return ((b1 & 0x3F) << 24) + (b2 << 16) + (b3 << 8) + b4;  }  
Magic Number,IKVM.Reflection.Reader,ModuleReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ModuleReader.cs,ReadCompressedInt,The following statement contains a magic number: return ((b1 & 0x3F) << 8) | b2;  
Magic Number,IKVM.Reflection.Reader,ModuleReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ModuleReader.cs,ReadCompressedInt,The following statement contains a magic number: return ((b1 & 0x3F) << 24) + (b2 << 16) + (b3 << 8) + b4;  
Magic Number,IKVM.Reflection.Reader,ModuleReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ModuleReader.cs,ReadCompressedInt,The following statement contains a magic number: return ((b1 & 0x3F) << 24) + (b2 << 16) + (b3 << 8) + b4;  
Magic Number,IKVM.Reflection.Reader,ModuleReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ModuleReader.cs,ReadCompressedInt,The following statement contains a magic number: return ((b1 & 0x3F) << 24) + (b2 << 16) + (b3 << 8) + b4;  
Magic Number,IKVM.Reflection.Reader,ModuleReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ModuleReader.cs,ResolveString,The following statement contains a magic number: if (!strings.TryGetValue (metadataToken' out str)) {  	if ((metadataToken >> 24) != 0x70) {  		throw TokenOutOfRangeException (metadataToken);  	}  	int index = metadataToken & 0xFFFFFF;  	int len = ReadCompressedInt (userStringHeap' ref index) & ~1;  	StringBuilder sb = new StringBuilder (len / 2);  	for (int i = 0; i < len; i += 2) {  		char ch = (char)(userStringHeap [index + i] | userStringHeap [index + i + 1] << 8);  		sb.Append (ch);  	}  	str = sb.ToString ();  	strings.Add (metadataToken' str);  }  
Magic Number,IKVM.Reflection.Reader,ModuleReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ModuleReader.cs,ResolveString,The following statement contains a magic number: if (!strings.TryGetValue (metadataToken' out str)) {  	if ((metadataToken >> 24) != 0x70) {  		throw TokenOutOfRangeException (metadataToken);  	}  	int index = metadataToken & 0xFFFFFF;  	int len = ReadCompressedInt (userStringHeap' ref index) & ~1;  	StringBuilder sb = new StringBuilder (len / 2);  	for (int i = 0; i < len; i += 2) {  		char ch = (char)(userStringHeap [index + i] | userStringHeap [index + i + 1] << 8);  		sb.Append (ch);  	}  	str = sb.ToString ();  	strings.Add (metadataToken' str);  }  
Magic Number,IKVM.Reflection.Reader,ModuleReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ModuleReader.cs,ResolveString,The following statement contains a magic number: if (!strings.TryGetValue (metadataToken' out str)) {  	if ((metadataToken >> 24) != 0x70) {  		throw TokenOutOfRangeException (metadataToken);  	}  	int index = metadataToken & 0xFFFFFF;  	int len = ReadCompressedInt (userStringHeap' ref index) & ~1;  	StringBuilder sb = new StringBuilder (len / 2);  	for (int i = 0; i < len; i += 2) {  		char ch = (char)(userStringHeap [index + i] | userStringHeap [index + i + 1] << 8);  		sb.Append (ch);  	}  	str = sb.ToString ();  	strings.Add (metadataToken' str);  }  
Magic Number,IKVM.Reflection.Reader,ModuleReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ModuleReader.cs,ResolveString,The following statement contains a magic number: if (!strings.TryGetValue (metadataToken' out str)) {  	if ((metadataToken >> 24) != 0x70) {  		throw TokenOutOfRangeException (metadataToken);  	}  	int index = metadataToken & 0xFFFFFF;  	int len = ReadCompressedInt (userStringHeap' ref index) & ~1;  	StringBuilder sb = new StringBuilder (len / 2);  	for (int i = 0; i < len; i += 2) {  		char ch = (char)(userStringHeap [index + i] | userStringHeap [index + i + 1] << 8);  		sb.Append (ch);  	}  	str = sb.ToString ();  	strings.Add (metadataToken' str);  }  
Magic Number,IKVM.Reflection.Reader,ModuleReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ModuleReader.cs,ResolveString,The following statement contains a magic number: if ((metadataToken >> 24) != 0x70) {  	throw TokenOutOfRangeException (metadataToken);  }  
Magic Number,IKVM.Reflection.Reader,ModuleReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ModuleReader.cs,ResolveString,The following statement contains a magic number: for (int i = 0; i < len; i += 2) {  	char ch = (char)(userStringHeap [index + i] | userStringHeap [index + i + 1] << 8);  	sb.Append (ch);  }  
Magic Number,IKVM.Reflection.Reader,ModuleReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ModuleReader.cs,ResolveString,The following statement contains a magic number: for (int i = 0; i < len; i += 2) {  	char ch = (char)(userStringHeap [index + i] | userStringHeap [index + i + 1] << 8);  	sb.Append (ch);  }  
Magic Number,IKVM.Reflection.Reader,ModuleReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ModuleReader.cs,ResolveString,The following statement contains a magic number: i += 2
Magic Number,IKVM.Reflection.Reader,ModuleReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ModuleReader.cs,ResolveType,The following statement contains a magic number: if (index < 0) {  	throw TokenOutOfRangeException (metadataToken);  } else if ((metadataToken >> 24) == TypeDefTable.Index && index < TypeDef.RowCount) {  	PopulateTypeDef ();  	return typeDefs [index];  } else if ((metadataToken >> 24) == TypeRefTable.Index && index < TypeRef.RowCount) {  	if (typeRefs == null) {  		typeRefs = new Type[TypeRef.records.Length];  	}  	if (typeRefs [index] == null) {  		int scope = TypeRef.records [index].ResolutionScope;  		switch (scope >> 24) {  		case AssemblyRefTable.Index: {  			Assembly assembly = ResolveAssemblyRef ((scope & 0xFFFFFF) - 1);  			TypeName typeName = GetTypeName (TypeRef.records [index].TypeNameSpace' TypeRef.records [index].TypeName);  			typeRefs [index] = assembly.ResolveType (typeName);  			break;  		}  		case TypeRefTable.Index: {  			Type outer = ResolveType (scope' null);  			TypeName typeName = GetTypeName (TypeRef.records [index].TypeNameSpace' TypeRef.records [index].TypeName);  			typeRefs [index] = outer.ResolveNestedType (typeName);  			break;  		}  		case ModuleTable.Index:  		case ModuleRefTable.Index: {  			Module module;  			if (scope >> 24 == ModuleTable.Index) {  				if (scope == 0 || scope == 1) {  					module = this;  				} else {  					throw new NotImplementedException ("self reference scope?");  				}  			} else {  				module = ResolveModuleRef (ModuleRef.records [(scope & 0xFFFFFF) - 1]);  			}  			TypeName typeName = GetTypeName (TypeRef.records [index].TypeNameSpace' TypeRef.records [index].TypeName);  			typeRefs [index] = module.FindType (typeName) ?? module.universe.GetMissingTypeOrThrow (module' null' typeName);  			break;  		}  		default:  			throw new NotImplementedException ("ResolutionScope = " + scope.ToString ("X"));  		}  	}  	return typeRefs [index];  } else if ((metadataToken >> 24) == TypeSpecTable.Index && index < TypeSpec.RowCount) {  	if (typeSpecs == null) {  		typeSpecs = new Type[TypeSpec.records.Length];  	}  	Type type = typeSpecs [index];  	if (type == null) {  		TrackingGenericContext tc = context == null ? null : new TrackingGenericContext (context);  		type = Signature.ReadTypeSpec (this' ByteReader.FromBlob (blobHeap' TypeSpec.records [index])' tc);  		if (tc == null || !tc.IsUsed) {  			typeSpecs [index] = type;  		}  	}  	return type;  } else {  	throw TokenOutOfRangeException (metadataToken);  }  
Magic Number,IKVM.Reflection.Reader,ModuleReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ModuleReader.cs,ResolveType,The following statement contains a magic number: if (index < 0) {  	throw TokenOutOfRangeException (metadataToken);  } else if ((metadataToken >> 24) == TypeDefTable.Index && index < TypeDef.RowCount) {  	PopulateTypeDef ();  	return typeDefs [index];  } else if ((metadataToken >> 24) == TypeRefTable.Index && index < TypeRef.RowCount) {  	if (typeRefs == null) {  		typeRefs = new Type[TypeRef.records.Length];  	}  	if (typeRefs [index] == null) {  		int scope = TypeRef.records [index].ResolutionScope;  		switch (scope >> 24) {  		case AssemblyRefTable.Index: {  			Assembly assembly = ResolveAssemblyRef ((scope & 0xFFFFFF) - 1);  			TypeName typeName = GetTypeName (TypeRef.records [index].TypeNameSpace' TypeRef.records [index].TypeName);  			typeRefs [index] = assembly.ResolveType (typeName);  			break;  		}  		case TypeRefTable.Index: {  			Type outer = ResolveType (scope' null);  			TypeName typeName = GetTypeName (TypeRef.records [index].TypeNameSpace' TypeRef.records [index].TypeName);  			typeRefs [index] = outer.ResolveNestedType (typeName);  			break;  		}  		case ModuleTable.Index:  		case ModuleRefTable.Index: {  			Module module;  			if (scope >> 24 == ModuleTable.Index) {  				if (scope == 0 || scope == 1) {  					module = this;  				} else {  					throw new NotImplementedException ("self reference scope?");  				}  			} else {  				module = ResolveModuleRef (ModuleRef.records [(scope & 0xFFFFFF) - 1]);  			}  			TypeName typeName = GetTypeName (TypeRef.records [index].TypeNameSpace' TypeRef.records [index].TypeName);  			typeRefs [index] = module.FindType (typeName) ?? module.universe.GetMissingTypeOrThrow (module' null' typeName);  			break;  		}  		default:  			throw new NotImplementedException ("ResolutionScope = " + scope.ToString ("X"));  		}  	}  	return typeRefs [index];  } else if ((metadataToken >> 24) == TypeSpecTable.Index && index < TypeSpec.RowCount) {  	if (typeSpecs == null) {  		typeSpecs = new Type[TypeSpec.records.Length];  	}  	Type type = typeSpecs [index];  	if (type == null) {  		TrackingGenericContext tc = context == null ? null : new TrackingGenericContext (context);  		type = Signature.ReadTypeSpec (this' ByteReader.FromBlob (blobHeap' TypeSpec.records [index])' tc);  		if (tc == null || !tc.IsUsed) {  			typeSpecs [index] = type;  		}  	}  	return type;  } else {  	throw TokenOutOfRangeException (metadataToken);  }  
Magic Number,IKVM.Reflection.Reader,ModuleReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ModuleReader.cs,ResolveType,The following statement contains a magic number: if (index < 0) {  	throw TokenOutOfRangeException (metadataToken);  } else if ((metadataToken >> 24) == TypeDefTable.Index && index < TypeDef.RowCount) {  	PopulateTypeDef ();  	return typeDefs [index];  } else if ((metadataToken >> 24) == TypeRefTable.Index && index < TypeRef.RowCount) {  	if (typeRefs == null) {  		typeRefs = new Type[TypeRef.records.Length];  	}  	if (typeRefs [index] == null) {  		int scope = TypeRef.records [index].ResolutionScope;  		switch (scope >> 24) {  		case AssemblyRefTable.Index: {  			Assembly assembly = ResolveAssemblyRef ((scope & 0xFFFFFF) - 1);  			TypeName typeName = GetTypeName (TypeRef.records [index].TypeNameSpace' TypeRef.records [index].TypeName);  			typeRefs [index] = assembly.ResolveType (typeName);  			break;  		}  		case TypeRefTable.Index: {  			Type outer = ResolveType (scope' null);  			TypeName typeName = GetTypeName (TypeRef.records [index].TypeNameSpace' TypeRef.records [index].TypeName);  			typeRefs [index] = outer.ResolveNestedType (typeName);  			break;  		}  		case ModuleTable.Index:  		case ModuleRefTable.Index: {  			Module module;  			if (scope >> 24 == ModuleTable.Index) {  				if (scope == 0 || scope == 1) {  					module = this;  				} else {  					throw new NotImplementedException ("self reference scope?");  				}  			} else {  				module = ResolveModuleRef (ModuleRef.records [(scope & 0xFFFFFF) - 1]);  			}  			TypeName typeName = GetTypeName (TypeRef.records [index].TypeNameSpace' TypeRef.records [index].TypeName);  			typeRefs [index] = module.FindType (typeName) ?? module.universe.GetMissingTypeOrThrow (module' null' typeName);  			break;  		}  		default:  			throw new NotImplementedException ("ResolutionScope = " + scope.ToString ("X"));  		}  	}  	return typeRefs [index];  } else if ((metadataToken >> 24) == TypeSpecTable.Index && index < TypeSpec.RowCount) {  	if (typeSpecs == null) {  		typeSpecs = new Type[TypeSpec.records.Length];  	}  	Type type = typeSpecs [index];  	if (type == null) {  		TrackingGenericContext tc = context == null ? null : new TrackingGenericContext (context);  		type = Signature.ReadTypeSpec (this' ByteReader.FromBlob (blobHeap' TypeSpec.records [index])' tc);  		if (tc == null || !tc.IsUsed) {  			typeSpecs [index] = type;  		}  	}  	return type;  } else {  	throw TokenOutOfRangeException (metadataToken);  }  
Magic Number,IKVM.Reflection.Reader,ModuleReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ModuleReader.cs,ResolveType,The following statement contains a magic number: if (index < 0) {  	throw TokenOutOfRangeException (metadataToken);  } else if ((metadataToken >> 24) == TypeDefTable.Index && index < TypeDef.RowCount) {  	PopulateTypeDef ();  	return typeDefs [index];  } else if ((metadataToken >> 24) == TypeRefTable.Index && index < TypeRef.RowCount) {  	if (typeRefs == null) {  		typeRefs = new Type[TypeRef.records.Length];  	}  	if (typeRefs [index] == null) {  		int scope = TypeRef.records [index].ResolutionScope;  		switch (scope >> 24) {  		case AssemblyRefTable.Index: {  			Assembly assembly = ResolveAssemblyRef ((scope & 0xFFFFFF) - 1);  			TypeName typeName = GetTypeName (TypeRef.records [index].TypeNameSpace' TypeRef.records [index].TypeName);  			typeRefs [index] = assembly.ResolveType (typeName);  			break;  		}  		case TypeRefTable.Index: {  			Type outer = ResolveType (scope' null);  			TypeName typeName = GetTypeName (TypeRef.records [index].TypeNameSpace' TypeRef.records [index].TypeName);  			typeRefs [index] = outer.ResolveNestedType (typeName);  			break;  		}  		case ModuleTable.Index:  		case ModuleRefTable.Index: {  			Module module;  			if (scope >> 24 == ModuleTable.Index) {  				if (scope == 0 || scope == 1) {  					module = this;  				} else {  					throw new NotImplementedException ("self reference scope?");  				}  			} else {  				module = ResolveModuleRef (ModuleRef.records [(scope & 0xFFFFFF) - 1]);  			}  			TypeName typeName = GetTypeName (TypeRef.records [index].TypeNameSpace' TypeRef.records [index].TypeName);  			typeRefs [index] = module.FindType (typeName) ?? module.universe.GetMissingTypeOrThrow (module' null' typeName);  			break;  		}  		default:  			throw new NotImplementedException ("ResolutionScope = " + scope.ToString ("X"));  		}  	}  	return typeRefs [index];  } else if ((metadataToken >> 24) == TypeSpecTable.Index && index < TypeSpec.RowCount) {  	if (typeSpecs == null) {  		typeSpecs = new Type[TypeSpec.records.Length];  	}  	Type type = typeSpecs [index];  	if (type == null) {  		TrackingGenericContext tc = context == null ? null : new TrackingGenericContext (context);  		type = Signature.ReadTypeSpec (this' ByteReader.FromBlob (blobHeap' TypeSpec.records [index])' tc);  		if (tc == null || !tc.IsUsed) {  			typeSpecs [index] = type;  		}  	}  	return type;  } else {  	throw TokenOutOfRangeException (metadataToken);  }  
Magic Number,IKVM.Reflection.Reader,ModuleReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ModuleReader.cs,ResolveType,The following statement contains a magic number: if (index < 0) {  	throw TokenOutOfRangeException (metadataToken);  } else if ((metadataToken >> 24) == TypeDefTable.Index && index < TypeDef.RowCount) {  	PopulateTypeDef ();  	return typeDefs [index];  } else if ((metadataToken >> 24) == TypeRefTable.Index && index < TypeRef.RowCount) {  	if (typeRefs == null) {  		typeRefs = new Type[TypeRef.records.Length];  	}  	if (typeRefs [index] == null) {  		int scope = TypeRef.records [index].ResolutionScope;  		switch (scope >> 24) {  		case AssemblyRefTable.Index: {  			Assembly assembly = ResolveAssemblyRef ((scope & 0xFFFFFF) - 1);  			TypeName typeName = GetTypeName (TypeRef.records [index].TypeNameSpace' TypeRef.records [index].TypeName);  			typeRefs [index] = assembly.ResolveType (typeName);  			break;  		}  		case TypeRefTable.Index: {  			Type outer = ResolveType (scope' null);  			TypeName typeName = GetTypeName (TypeRef.records [index].TypeNameSpace' TypeRef.records [index].TypeName);  			typeRefs [index] = outer.ResolveNestedType (typeName);  			break;  		}  		case ModuleTable.Index:  		case ModuleRefTable.Index: {  			Module module;  			if (scope >> 24 == ModuleTable.Index) {  				if (scope == 0 || scope == 1) {  					module = this;  				} else {  					throw new NotImplementedException ("self reference scope?");  				}  			} else {  				module = ResolveModuleRef (ModuleRef.records [(scope & 0xFFFFFF) - 1]);  			}  			TypeName typeName = GetTypeName (TypeRef.records [index].TypeNameSpace' TypeRef.records [index].TypeName);  			typeRefs [index] = module.FindType (typeName) ?? module.universe.GetMissingTypeOrThrow (module' null' typeName);  			break;  		}  		default:  			throw new NotImplementedException ("ResolutionScope = " + scope.ToString ("X"));  		}  	}  	return typeRefs [index];  } else if ((metadataToken >> 24) == TypeSpecTable.Index && index < TypeSpec.RowCount) {  	if (typeSpecs == null) {  		typeSpecs = new Type[TypeSpec.records.Length];  	}  	Type type = typeSpecs [index];  	if (type == null) {  		TrackingGenericContext tc = context == null ? null : new TrackingGenericContext (context);  		type = Signature.ReadTypeSpec (this' ByteReader.FromBlob (blobHeap' TypeSpec.records [index])' tc);  		if (tc == null || !tc.IsUsed) {  			typeSpecs [index] = type;  		}  	}  	return type;  } else {  	throw TokenOutOfRangeException (metadataToken);  }  
Magic Number,IKVM.Reflection.Reader,ModuleReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ModuleReader.cs,ResolveType,The following statement contains a magic number: if ((metadataToken >> 24) == TypeDefTable.Index && index < TypeDef.RowCount) {  	PopulateTypeDef ();  	return typeDefs [index];  } else if ((metadataToken >> 24) == TypeRefTable.Index && index < TypeRef.RowCount) {  	if (typeRefs == null) {  		typeRefs = new Type[TypeRef.records.Length];  	}  	if (typeRefs [index] == null) {  		int scope = TypeRef.records [index].ResolutionScope;  		switch (scope >> 24) {  		case AssemblyRefTable.Index: {  			Assembly assembly = ResolveAssemblyRef ((scope & 0xFFFFFF) - 1);  			TypeName typeName = GetTypeName (TypeRef.records [index].TypeNameSpace' TypeRef.records [index].TypeName);  			typeRefs [index] = assembly.ResolveType (typeName);  			break;  		}  		case TypeRefTable.Index: {  			Type outer = ResolveType (scope' null);  			TypeName typeName = GetTypeName (TypeRef.records [index].TypeNameSpace' TypeRef.records [index].TypeName);  			typeRefs [index] = outer.ResolveNestedType (typeName);  			break;  		}  		case ModuleTable.Index:  		case ModuleRefTable.Index: {  			Module module;  			if (scope >> 24 == ModuleTable.Index) {  				if (scope == 0 || scope == 1) {  					module = this;  				} else {  					throw new NotImplementedException ("self reference scope?");  				}  			} else {  				module = ResolveModuleRef (ModuleRef.records [(scope & 0xFFFFFF) - 1]);  			}  			TypeName typeName = GetTypeName (TypeRef.records [index].TypeNameSpace' TypeRef.records [index].TypeName);  			typeRefs [index] = module.FindType (typeName) ?? module.universe.GetMissingTypeOrThrow (module' null' typeName);  			break;  		}  		default:  			throw new NotImplementedException ("ResolutionScope = " + scope.ToString ("X"));  		}  	}  	return typeRefs [index];  } else if ((metadataToken >> 24) == TypeSpecTable.Index && index < TypeSpec.RowCount) {  	if (typeSpecs == null) {  		typeSpecs = new Type[TypeSpec.records.Length];  	}  	Type type = typeSpecs [index];  	if (type == null) {  		TrackingGenericContext tc = context == null ? null : new TrackingGenericContext (context);  		type = Signature.ReadTypeSpec (this' ByteReader.FromBlob (blobHeap' TypeSpec.records [index])' tc);  		if (tc == null || !tc.IsUsed) {  			typeSpecs [index] = type;  		}  	}  	return type;  } else {  	throw TokenOutOfRangeException (metadataToken);  }  
Magic Number,IKVM.Reflection.Reader,ModuleReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ModuleReader.cs,ResolveType,The following statement contains a magic number: if ((metadataToken >> 24) == TypeDefTable.Index && index < TypeDef.RowCount) {  	PopulateTypeDef ();  	return typeDefs [index];  } else if ((metadataToken >> 24) == TypeRefTable.Index && index < TypeRef.RowCount) {  	if (typeRefs == null) {  		typeRefs = new Type[TypeRef.records.Length];  	}  	if (typeRefs [index] == null) {  		int scope = TypeRef.records [index].ResolutionScope;  		switch (scope >> 24) {  		case AssemblyRefTable.Index: {  			Assembly assembly = ResolveAssemblyRef ((scope & 0xFFFFFF) - 1);  			TypeName typeName = GetTypeName (TypeRef.records [index].TypeNameSpace' TypeRef.records [index].TypeName);  			typeRefs [index] = assembly.ResolveType (typeName);  			break;  		}  		case TypeRefTable.Index: {  			Type outer = ResolveType (scope' null);  			TypeName typeName = GetTypeName (TypeRef.records [index].TypeNameSpace' TypeRef.records [index].TypeName);  			typeRefs [index] = outer.ResolveNestedType (typeName);  			break;  		}  		case ModuleTable.Index:  		case ModuleRefTable.Index: {  			Module module;  			if (scope >> 24 == ModuleTable.Index) {  				if (scope == 0 || scope == 1) {  					module = this;  				} else {  					throw new NotImplementedException ("self reference scope?");  				}  			} else {  				module = ResolveModuleRef (ModuleRef.records [(scope & 0xFFFFFF) - 1]);  			}  			TypeName typeName = GetTypeName (TypeRef.records [index].TypeNameSpace' TypeRef.records [index].TypeName);  			typeRefs [index] = module.FindType (typeName) ?? module.universe.GetMissingTypeOrThrow (module' null' typeName);  			break;  		}  		default:  			throw new NotImplementedException ("ResolutionScope = " + scope.ToString ("X"));  		}  	}  	return typeRefs [index];  } else if ((metadataToken >> 24) == TypeSpecTable.Index && index < TypeSpec.RowCount) {  	if (typeSpecs == null) {  		typeSpecs = new Type[TypeSpec.records.Length];  	}  	Type type = typeSpecs [index];  	if (type == null) {  		TrackingGenericContext tc = context == null ? null : new TrackingGenericContext (context);  		type = Signature.ReadTypeSpec (this' ByteReader.FromBlob (blobHeap' TypeSpec.records [index])' tc);  		if (tc == null || !tc.IsUsed) {  			typeSpecs [index] = type;  		}  	}  	return type;  } else {  	throw TokenOutOfRangeException (metadataToken);  }  
Magic Number,IKVM.Reflection.Reader,ModuleReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ModuleReader.cs,ResolveType,The following statement contains a magic number: if ((metadataToken >> 24) == TypeDefTable.Index && index < TypeDef.RowCount) {  	PopulateTypeDef ();  	return typeDefs [index];  } else if ((metadataToken >> 24) == TypeRefTable.Index && index < TypeRef.RowCount) {  	if (typeRefs == null) {  		typeRefs = new Type[TypeRef.records.Length];  	}  	if (typeRefs [index] == null) {  		int scope = TypeRef.records [index].ResolutionScope;  		switch (scope >> 24) {  		case AssemblyRefTable.Index: {  			Assembly assembly = ResolveAssemblyRef ((scope & 0xFFFFFF) - 1);  			TypeName typeName = GetTypeName (TypeRef.records [index].TypeNameSpace' TypeRef.records [index].TypeName);  			typeRefs [index] = assembly.ResolveType (typeName);  			break;  		}  		case TypeRefTable.Index: {  			Type outer = ResolveType (scope' null);  			TypeName typeName = GetTypeName (TypeRef.records [index].TypeNameSpace' TypeRef.records [index].TypeName);  			typeRefs [index] = outer.ResolveNestedType (typeName);  			break;  		}  		case ModuleTable.Index:  		case ModuleRefTable.Index: {  			Module module;  			if (scope >> 24 == ModuleTable.Index) {  				if (scope == 0 || scope == 1) {  					module = this;  				} else {  					throw new NotImplementedException ("self reference scope?");  				}  			} else {  				module = ResolveModuleRef (ModuleRef.records [(scope & 0xFFFFFF) - 1]);  			}  			TypeName typeName = GetTypeName (TypeRef.records [index].TypeNameSpace' TypeRef.records [index].TypeName);  			typeRefs [index] = module.FindType (typeName) ?? module.universe.GetMissingTypeOrThrow (module' null' typeName);  			break;  		}  		default:  			throw new NotImplementedException ("ResolutionScope = " + scope.ToString ("X"));  		}  	}  	return typeRefs [index];  } else if ((metadataToken >> 24) == TypeSpecTable.Index && index < TypeSpec.RowCount) {  	if (typeSpecs == null) {  		typeSpecs = new Type[TypeSpec.records.Length];  	}  	Type type = typeSpecs [index];  	if (type == null) {  		TrackingGenericContext tc = context == null ? null : new TrackingGenericContext (context);  		type = Signature.ReadTypeSpec (this' ByteReader.FromBlob (blobHeap' TypeSpec.records [index])' tc);  		if (tc == null || !tc.IsUsed) {  			typeSpecs [index] = type;  		}  	}  	return type;  } else {  	throw TokenOutOfRangeException (metadataToken);  }  
Magic Number,IKVM.Reflection.Reader,ModuleReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ModuleReader.cs,ResolveType,The following statement contains a magic number: if ((metadataToken >> 24) == TypeDefTable.Index && index < TypeDef.RowCount) {  	PopulateTypeDef ();  	return typeDefs [index];  } else if ((metadataToken >> 24) == TypeRefTable.Index && index < TypeRef.RowCount) {  	if (typeRefs == null) {  		typeRefs = new Type[TypeRef.records.Length];  	}  	if (typeRefs [index] == null) {  		int scope = TypeRef.records [index].ResolutionScope;  		switch (scope >> 24) {  		case AssemblyRefTable.Index: {  			Assembly assembly = ResolveAssemblyRef ((scope & 0xFFFFFF) - 1);  			TypeName typeName = GetTypeName (TypeRef.records [index].TypeNameSpace' TypeRef.records [index].TypeName);  			typeRefs [index] = assembly.ResolveType (typeName);  			break;  		}  		case TypeRefTable.Index: {  			Type outer = ResolveType (scope' null);  			TypeName typeName = GetTypeName (TypeRef.records [index].TypeNameSpace' TypeRef.records [index].TypeName);  			typeRefs [index] = outer.ResolveNestedType (typeName);  			break;  		}  		case ModuleTable.Index:  		case ModuleRefTable.Index: {  			Module module;  			if (scope >> 24 == ModuleTable.Index) {  				if (scope == 0 || scope == 1) {  					module = this;  				} else {  					throw new NotImplementedException ("self reference scope?");  				}  			} else {  				module = ResolveModuleRef (ModuleRef.records [(scope & 0xFFFFFF) - 1]);  			}  			TypeName typeName = GetTypeName (TypeRef.records [index].TypeNameSpace' TypeRef.records [index].TypeName);  			typeRefs [index] = module.FindType (typeName) ?? module.universe.GetMissingTypeOrThrow (module' null' typeName);  			break;  		}  		default:  			throw new NotImplementedException ("ResolutionScope = " + scope.ToString ("X"));  		}  	}  	return typeRefs [index];  } else if ((metadataToken >> 24) == TypeSpecTable.Index && index < TypeSpec.RowCount) {  	if (typeSpecs == null) {  		typeSpecs = new Type[TypeSpec.records.Length];  	}  	Type type = typeSpecs [index];  	if (type == null) {  		TrackingGenericContext tc = context == null ? null : new TrackingGenericContext (context);  		type = Signature.ReadTypeSpec (this' ByteReader.FromBlob (blobHeap' TypeSpec.records [index])' tc);  		if (tc == null || !tc.IsUsed) {  			typeSpecs [index] = type;  		}  	}  	return type;  } else {  	throw TokenOutOfRangeException (metadataToken);  }  
Magic Number,IKVM.Reflection.Reader,ModuleReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ModuleReader.cs,ResolveType,The following statement contains a magic number: if ((metadataToken >> 24) == TypeDefTable.Index && index < TypeDef.RowCount) {  	PopulateTypeDef ();  	return typeDefs [index];  } else if ((metadataToken >> 24) == TypeRefTable.Index && index < TypeRef.RowCount) {  	if (typeRefs == null) {  		typeRefs = new Type[TypeRef.records.Length];  	}  	if (typeRefs [index] == null) {  		int scope = TypeRef.records [index].ResolutionScope;  		switch (scope >> 24) {  		case AssemblyRefTable.Index: {  			Assembly assembly = ResolveAssemblyRef ((scope & 0xFFFFFF) - 1);  			TypeName typeName = GetTypeName (TypeRef.records [index].TypeNameSpace' TypeRef.records [index].TypeName);  			typeRefs [index] = assembly.ResolveType (typeName);  			break;  		}  		case TypeRefTable.Index: {  			Type outer = ResolveType (scope' null);  			TypeName typeName = GetTypeName (TypeRef.records [index].TypeNameSpace' TypeRef.records [index].TypeName);  			typeRefs [index] = outer.ResolveNestedType (typeName);  			break;  		}  		case ModuleTable.Index:  		case ModuleRefTable.Index: {  			Module module;  			if (scope >> 24 == ModuleTable.Index) {  				if (scope == 0 || scope == 1) {  					module = this;  				} else {  					throw new NotImplementedException ("self reference scope?");  				}  			} else {  				module = ResolveModuleRef (ModuleRef.records [(scope & 0xFFFFFF) - 1]);  			}  			TypeName typeName = GetTypeName (TypeRef.records [index].TypeNameSpace' TypeRef.records [index].TypeName);  			typeRefs [index] = module.FindType (typeName) ?? module.universe.GetMissingTypeOrThrow (module' null' typeName);  			break;  		}  		default:  			throw new NotImplementedException ("ResolutionScope = " + scope.ToString ("X"));  		}  	}  	return typeRefs [index];  } else if ((metadataToken >> 24) == TypeSpecTable.Index && index < TypeSpec.RowCount) {  	if (typeSpecs == null) {  		typeSpecs = new Type[TypeSpec.records.Length];  	}  	Type type = typeSpecs [index];  	if (type == null) {  		TrackingGenericContext tc = context == null ? null : new TrackingGenericContext (context);  		type = Signature.ReadTypeSpec (this' ByteReader.FromBlob (blobHeap' TypeSpec.records [index])' tc);  		if (tc == null || !tc.IsUsed) {  			typeSpecs [index] = type;  		}  	}  	return type;  } else {  	throw TokenOutOfRangeException (metadataToken);  }  
Magic Number,IKVM.Reflection.Reader,ModuleReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ModuleReader.cs,ResolveType,The following statement contains a magic number: if ((metadataToken >> 24) == TypeRefTable.Index && index < TypeRef.RowCount) {  	if (typeRefs == null) {  		typeRefs = new Type[TypeRef.records.Length];  	}  	if (typeRefs [index] == null) {  		int scope = TypeRef.records [index].ResolutionScope;  		switch (scope >> 24) {  		case AssemblyRefTable.Index: {  			Assembly assembly = ResolveAssemblyRef ((scope & 0xFFFFFF) - 1);  			TypeName typeName = GetTypeName (TypeRef.records [index].TypeNameSpace' TypeRef.records [index].TypeName);  			typeRefs [index] = assembly.ResolveType (typeName);  			break;  		}  		case TypeRefTable.Index: {  			Type outer = ResolveType (scope' null);  			TypeName typeName = GetTypeName (TypeRef.records [index].TypeNameSpace' TypeRef.records [index].TypeName);  			typeRefs [index] = outer.ResolveNestedType (typeName);  			break;  		}  		case ModuleTable.Index:  		case ModuleRefTable.Index: {  			Module module;  			if (scope >> 24 == ModuleTable.Index) {  				if (scope == 0 || scope == 1) {  					module = this;  				} else {  					throw new NotImplementedException ("self reference scope?");  				}  			} else {  				module = ResolveModuleRef (ModuleRef.records [(scope & 0xFFFFFF) - 1]);  			}  			TypeName typeName = GetTypeName (TypeRef.records [index].TypeNameSpace' TypeRef.records [index].TypeName);  			typeRefs [index] = module.FindType (typeName) ?? module.universe.GetMissingTypeOrThrow (module' null' typeName);  			break;  		}  		default:  			throw new NotImplementedException ("ResolutionScope = " + scope.ToString ("X"));  		}  	}  	return typeRefs [index];  } else if ((metadataToken >> 24) == TypeSpecTable.Index && index < TypeSpec.RowCount) {  	if (typeSpecs == null) {  		typeSpecs = new Type[TypeSpec.records.Length];  	}  	Type type = typeSpecs [index];  	if (type == null) {  		TrackingGenericContext tc = context == null ? null : new TrackingGenericContext (context);  		type = Signature.ReadTypeSpec (this' ByteReader.FromBlob (blobHeap' TypeSpec.records [index])' tc);  		if (tc == null || !tc.IsUsed) {  			typeSpecs [index] = type;  		}  	}  	return type;  } else {  	throw TokenOutOfRangeException (metadataToken);  }  
Magic Number,IKVM.Reflection.Reader,ModuleReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ModuleReader.cs,ResolveType,The following statement contains a magic number: if ((metadataToken >> 24) == TypeRefTable.Index && index < TypeRef.RowCount) {  	if (typeRefs == null) {  		typeRefs = new Type[TypeRef.records.Length];  	}  	if (typeRefs [index] == null) {  		int scope = TypeRef.records [index].ResolutionScope;  		switch (scope >> 24) {  		case AssemblyRefTable.Index: {  			Assembly assembly = ResolveAssemblyRef ((scope & 0xFFFFFF) - 1);  			TypeName typeName = GetTypeName (TypeRef.records [index].TypeNameSpace' TypeRef.records [index].TypeName);  			typeRefs [index] = assembly.ResolveType (typeName);  			break;  		}  		case TypeRefTable.Index: {  			Type outer = ResolveType (scope' null);  			TypeName typeName = GetTypeName (TypeRef.records [index].TypeNameSpace' TypeRef.records [index].TypeName);  			typeRefs [index] = outer.ResolveNestedType (typeName);  			break;  		}  		case ModuleTable.Index:  		case ModuleRefTable.Index: {  			Module module;  			if (scope >> 24 == ModuleTable.Index) {  				if (scope == 0 || scope == 1) {  					module = this;  				} else {  					throw new NotImplementedException ("self reference scope?");  				}  			} else {  				module = ResolveModuleRef (ModuleRef.records [(scope & 0xFFFFFF) - 1]);  			}  			TypeName typeName = GetTypeName (TypeRef.records [index].TypeNameSpace' TypeRef.records [index].TypeName);  			typeRefs [index] = module.FindType (typeName) ?? module.universe.GetMissingTypeOrThrow (module' null' typeName);  			break;  		}  		default:  			throw new NotImplementedException ("ResolutionScope = " + scope.ToString ("X"));  		}  	}  	return typeRefs [index];  } else if ((metadataToken >> 24) == TypeSpecTable.Index && index < TypeSpec.RowCount) {  	if (typeSpecs == null) {  		typeSpecs = new Type[TypeSpec.records.Length];  	}  	Type type = typeSpecs [index];  	if (type == null) {  		TrackingGenericContext tc = context == null ? null : new TrackingGenericContext (context);  		type = Signature.ReadTypeSpec (this' ByteReader.FromBlob (blobHeap' TypeSpec.records [index])' tc);  		if (tc == null || !tc.IsUsed) {  			typeSpecs [index] = type;  		}  	}  	return type;  } else {  	throw TokenOutOfRangeException (metadataToken);  }  
Magic Number,IKVM.Reflection.Reader,ModuleReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ModuleReader.cs,ResolveType,The following statement contains a magic number: if ((metadataToken >> 24) == TypeRefTable.Index && index < TypeRef.RowCount) {  	if (typeRefs == null) {  		typeRefs = new Type[TypeRef.records.Length];  	}  	if (typeRefs [index] == null) {  		int scope = TypeRef.records [index].ResolutionScope;  		switch (scope >> 24) {  		case AssemblyRefTable.Index: {  			Assembly assembly = ResolveAssemblyRef ((scope & 0xFFFFFF) - 1);  			TypeName typeName = GetTypeName (TypeRef.records [index].TypeNameSpace' TypeRef.records [index].TypeName);  			typeRefs [index] = assembly.ResolveType (typeName);  			break;  		}  		case TypeRefTable.Index: {  			Type outer = ResolveType (scope' null);  			TypeName typeName = GetTypeName (TypeRef.records [index].TypeNameSpace' TypeRef.records [index].TypeName);  			typeRefs [index] = outer.ResolveNestedType (typeName);  			break;  		}  		case ModuleTable.Index:  		case ModuleRefTable.Index: {  			Module module;  			if (scope >> 24 == ModuleTable.Index) {  				if (scope == 0 || scope == 1) {  					module = this;  				} else {  					throw new NotImplementedException ("self reference scope?");  				}  			} else {  				module = ResolveModuleRef (ModuleRef.records [(scope & 0xFFFFFF) - 1]);  			}  			TypeName typeName = GetTypeName (TypeRef.records [index].TypeNameSpace' TypeRef.records [index].TypeName);  			typeRefs [index] = module.FindType (typeName) ?? module.universe.GetMissingTypeOrThrow (module' null' typeName);  			break;  		}  		default:  			throw new NotImplementedException ("ResolutionScope = " + scope.ToString ("X"));  		}  	}  	return typeRefs [index];  } else if ((metadataToken >> 24) == TypeSpecTable.Index && index < TypeSpec.RowCount) {  	if (typeSpecs == null) {  		typeSpecs = new Type[TypeSpec.records.Length];  	}  	Type type = typeSpecs [index];  	if (type == null) {  		TrackingGenericContext tc = context == null ? null : new TrackingGenericContext (context);  		type = Signature.ReadTypeSpec (this' ByteReader.FromBlob (blobHeap' TypeSpec.records [index])' tc);  		if (tc == null || !tc.IsUsed) {  			typeSpecs [index] = type;  		}  	}  	return type;  } else {  	throw TokenOutOfRangeException (metadataToken);  }  
Magic Number,IKVM.Reflection.Reader,ModuleReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ModuleReader.cs,ResolveType,The following statement contains a magic number: if ((metadataToken >> 24) == TypeRefTable.Index && index < TypeRef.RowCount) {  	if (typeRefs == null) {  		typeRefs = new Type[TypeRef.records.Length];  	}  	if (typeRefs [index] == null) {  		int scope = TypeRef.records [index].ResolutionScope;  		switch (scope >> 24) {  		case AssemblyRefTable.Index: {  			Assembly assembly = ResolveAssemblyRef ((scope & 0xFFFFFF) - 1);  			TypeName typeName = GetTypeName (TypeRef.records [index].TypeNameSpace' TypeRef.records [index].TypeName);  			typeRefs [index] = assembly.ResolveType (typeName);  			break;  		}  		case TypeRefTable.Index: {  			Type outer = ResolveType (scope' null);  			TypeName typeName = GetTypeName (TypeRef.records [index].TypeNameSpace' TypeRef.records [index].TypeName);  			typeRefs [index] = outer.ResolveNestedType (typeName);  			break;  		}  		case ModuleTable.Index:  		case ModuleRefTable.Index: {  			Module module;  			if (scope >> 24 == ModuleTable.Index) {  				if (scope == 0 || scope == 1) {  					module = this;  				} else {  					throw new NotImplementedException ("self reference scope?");  				}  			} else {  				module = ResolveModuleRef (ModuleRef.records [(scope & 0xFFFFFF) - 1]);  			}  			TypeName typeName = GetTypeName (TypeRef.records [index].TypeNameSpace' TypeRef.records [index].TypeName);  			typeRefs [index] = module.FindType (typeName) ?? module.universe.GetMissingTypeOrThrow (module' null' typeName);  			break;  		}  		default:  			throw new NotImplementedException ("ResolutionScope = " + scope.ToString ("X"));  		}  	}  	return typeRefs [index];  } else if ((metadataToken >> 24) == TypeSpecTable.Index && index < TypeSpec.RowCount) {  	if (typeSpecs == null) {  		typeSpecs = new Type[TypeSpec.records.Length];  	}  	Type type = typeSpecs [index];  	if (type == null) {  		TrackingGenericContext tc = context == null ? null : new TrackingGenericContext (context);  		type = Signature.ReadTypeSpec (this' ByteReader.FromBlob (blobHeap' TypeSpec.records [index])' tc);  		if (tc == null || !tc.IsUsed) {  			typeSpecs [index] = type;  		}  	}  	return type;  } else {  	throw TokenOutOfRangeException (metadataToken);  }  
Magic Number,IKVM.Reflection.Reader,ModuleReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ModuleReader.cs,ResolveType,The following statement contains a magic number: if (typeRefs [index] == null) {  	int scope = TypeRef.records [index].ResolutionScope;  	switch (scope >> 24) {  	case AssemblyRefTable.Index: {  		Assembly assembly = ResolveAssemblyRef ((scope & 0xFFFFFF) - 1);  		TypeName typeName = GetTypeName (TypeRef.records [index].TypeNameSpace' TypeRef.records [index].TypeName);  		typeRefs [index] = assembly.ResolveType (typeName);  		break;  	}  	case TypeRefTable.Index: {  		Type outer = ResolveType (scope' null);  		TypeName typeName = GetTypeName (TypeRef.records [index].TypeNameSpace' TypeRef.records [index].TypeName);  		typeRefs [index] = outer.ResolveNestedType (typeName);  		break;  	}  	case ModuleTable.Index:  	case ModuleRefTable.Index: {  		Module module;  		if (scope >> 24 == ModuleTable.Index) {  			if (scope == 0 || scope == 1) {  				module = this;  			} else {  				throw new NotImplementedException ("self reference scope?");  			}  		} else {  			module = ResolveModuleRef (ModuleRef.records [(scope & 0xFFFFFF) - 1]);  		}  		TypeName typeName = GetTypeName (TypeRef.records [index].TypeNameSpace' TypeRef.records [index].TypeName);  		typeRefs [index] = module.FindType (typeName) ?? module.universe.GetMissingTypeOrThrow (module' null' typeName);  		break;  	}  	default:  		throw new NotImplementedException ("ResolutionScope = " + scope.ToString ("X"));  	}  }  
Magic Number,IKVM.Reflection.Reader,ModuleReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ModuleReader.cs,ResolveType,The following statement contains a magic number: if (typeRefs [index] == null) {  	int scope = TypeRef.records [index].ResolutionScope;  	switch (scope >> 24) {  	case AssemblyRefTable.Index: {  		Assembly assembly = ResolveAssemblyRef ((scope & 0xFFFFFF) - 1);  		TypeName typeName = GetTypeName (TypeRef.records [index].TypeNameSpace' TypeRef.records [index].TypeName);  		typeRefs [index] = assembly.ResolveType (typeName);  		break;  	}  	case TypeRefTable.Index: {  		Type outer = ResolveType (scope' null);  		TypeName typeName = GetTypeName (TypeRef.records [index].TypeNameSpace' TypeRef.records [index].TypeName);  		typeRefs [index] = outer.ResolveNestedType (typeName);  		break;  	}  	case ModuleTable.Index:  	case ModuleRefTable.Index: {  		Module module;  		if (scope >> 24 == ModuleTable.Index) {  			if (scope == 0 || scope == 1) {  				module = this;  			} else {  				throw new NotImplementedException ("self reference scope?");  			}  		} else {  			module = ResolveModuleRef (ModuleRef.records [(scope & 0xFFFFFF) - 1]);  		}  		TypeName typeName = GetTypeName (TypeRef.records [index].TypeNameSpace' TypeRef.records [index].TypeName);  		typeRefs [index] = module.FindType (typeName) ?? module.universe.GetMissingTypeOrThrow (module' null' typeName);  		break;  	}  	default:  		throw new NotImplementedException ("ResolutionScope = " + scope.ToString ("X"));  	}  }  
Magic Number,IKVM.Reflection.Reader,ModuleReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ModuleReader.cs,ResolveType,The following statement contains a magic number: switch (scope >> 24) {  case AssemblyRefTable.Index: {  	Assembly assembly = ResolveAssemblyRef ((scope & 0xFFFFFF) - 1);  	TypeName typeName = GetTypeName (TypeRef.records [index].TypeNameSpace' TypeRef.records [index].TypeName);  	typeRefs [index] = assembly.ResolveType (typeName);  	break;  }  case TypeRefTable.Index: {  	Type outer = ResolveType (scope' null);  	TypeName typeName = GetTypeName (TypeRef.records [index].TypeNameSpace' TypeRef.records [index].TypeName);  	typeRefs [index] = outer.ResolveNestedType (typeName);  	break;  }  case ModuleTable.Index:  case ModuleRefTable.Index: {  	Module module;  	if (scope >> 24 == ModuleTable.Index) {  		if (scope == 0 || scope == 1) {  			module = this;  		} else {  			throw new NotImplementedException ("self reference scope?");  		}  	} else {  		module = ResolveModuleRef (ModuleRef.records [(scope & 0xFFFFFF) - 1]);  	}  	TypeName typeName = GetTypeName (TypeRef.records [index].TypeNameSpace' TypeRef.records [index].TypeName);  	typeRefs [index] = module.FindType (typeName) ?? module.universe.GetMissingTypeOrThrow (module' null' typeName);  	break;  }  default:  	throw new NotImplementedException ("ResolutionScope = " + scope.ToString ("X"));  }  
Magic Number,IKVM.Reflection.Reader,ModuleReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ModuleReader.cs,ResolveType,The following statement contains a magic number: switch (scope >> 24) {  case AssemblyRefTable.Index: {  	Assembly assembly = ResolveAssemblyRef ((scope & 0xFFFFFF) - 1);  	TypeName typeName = GetTypeName (TypeRef.records [index].TypeNameSpace' TypeRef.records [index].TypeName);  	typeRefs [index] = assembly.ResolveType (typeName);  	break;  }  case TypeRefTable.Index: {  	Type outer = ResolveType (scope' null);  	TypeName typeName = GetTypeName (TypeRef.records [index].TypeNameSpace' TypeRef.records [index].TypeName);  	typeRefs [index] = outer.ResolveNestedType (typeName);  	break;  }  case ModuleTable.Index:  case ModuleRefTable.Index: {  	Module module;  	if (scope >> 24 == ModuleTable.Index) {  		if (scope == 0 || scope == 1) {  			module = this;  		} else {  			throw new NotImplementedException ("self reference scope?");  		}  	} else {  		module = ResolveModuleRef (ModuleRef.records [(scope & 0xFFFFFF) - 1]);  	}  	TypeName typeName = GetTypeName (TypeRef.records [index].TypeNameSpace' TypeRef.records [index].TypeName);  	typeRefs [index] = module.FindType (typeName) ?? module.universe.GetMissingTypeOrThrow (module' null' typeName);  	break;  }  default:  	throw new NotImplementedException ("ResolutionScope = " + scope.ToString ("X"));  }  
Magic Number,IKVM.Reflection.Reader,ModuleReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ModuleReader.cs,ResolveType,The following statement contains a magic number: if (scope >> 24 == ModuleTable.Index) {  	if (scope == 0 || scope == 1) {  		module = this;  	} else {  		throw new NotImplementedException ("self reference scope?");  	}  } else {  	module = ResolveModuleRef (ModuleRef.records [(scope & 0xFFFFFF) - 1]);  }  
Magic Number,IKVM.Reflection.Reader,ModuleReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ModuleReader.cs,ResolveType,The following statement contains a magic number: if ((metadataToken >> 24) == TypeSpecTable.Index && index < TypeSpec.RowCount) {  	if (typeSpecs == null) {  		typeSpecs = new Type[TypeSpec.records.Length];  	}  	Type type = typeSpecs [index];  	if (type == null) {  		TrackingGenericContext tc = context == null ? null : new TrackingGenericContext (context);  		type = Signature.ReadTypeSpec (this' ByteReader.FromBlob (blobHeap' TypeSpec.records [index])' tc);  		if (tc == null || !tc.IsUsed) {  			typeSpecs [index] = type;  		}  	}  	return type;  } else {  	throw TokenOutOfRangeException (metadataToken);  }  
Magic Number,IKVM.Reflection.Reader,ModuleReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ModuleReader.cs,ResolveType,The following statement contains a magic number: if ((metadataToken >> 24) == TypeSpecTable.Index) {  	return ResolveType (metadataToken' new GenericContext (genericTypeArguments' genericMethodArguments));  } else {  	return ResolveType (metadataToken' null);  }  
Magic Number,IKVM.Reflection.Reader,ModuleReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ModuleReader.cs,ResolveMember,The following statement contains a magic number: switch (metadataToken >> 24) {  case FieldTable.Index:  	return ResolveField (metadataToken' genericTypeArguments' genericMethodArguments);  case MemberRefTable.Index:  	int index = (metadataToken & 0xFFFFFF) - 1;  	if (index < 0 || index >= MemberRef.RowCount) {  		goto default;  	}  	return GetMemberRef (index' genericTypeArguments' genericMethodArguments);  case MethodDefTable.Index:  case MethodSpecTable.Index:  	return ResolveMethod (metadataToken' genericTypeArguments' genericMethodArguments);  default:  	throw TokenOutOfRangeException (metadataToken);  }  
Magic Number,IKVM.Reflection.Reader,ModuleReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ModuleReader.cs,ResolveField,The following statement contains a magic number: if (index < 0) {  	throw TokenOutOfRangeException (metadataToken);  } else if ((metadataToken >> 24) == FieldTable.Index && index < Field.RowCount) {  	return GetFieldAt (null' index);  } else if ((metadataToken >> 24) == MemberRefTable.Index && index < MemberRef.RowCount) {  	FieldInfo field = GetMemberRef (index' genericTypeArguments' genericMethodArguments) as FieldInfo;  	if (field != null) {  		return field;  	}  	throw new ArgumentException (String.Format ("Token 0x{0:x8} is not a valid FieldInfo token in the scope of module {1}."' metadataToken' this.Name)' "metadataToken");  } else {  	throw TokenOutOfRangeException (metadataToken);  }  
Magic Number,IKVM.Reflection.Reader,ModuleReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ModuleReader.cs,ResolveField,The following statement contains a magic number: if (index < 0) {  	throw TokenOutOfRangeException (metadataToken);  } else if ((metadataToken >> 24) == FieldTable.Index && index < Field.RowCount) {  	return GetFieldAt (null' index);  } else if ((metadataToken >> 24) == MemberRefTable.Index && index < MemberRef.RowCount) {  	FieldInfo field = GetMemberRef (index' genericTypeArguments' genericMethodArguments) as FieldInfo;  	if (field != null) {  		return field;  	}  	throw new ArgumentException (String.Format ("Token 0x{0:x8} is not a valid FieldInfo token in the scope of module {1}."' metadataToken' this.Name)' "metadataToken");  } else {  	throw TokenOutOfRangeException (metadataToken);  }  
Magic Number,IKVM.Reflection.Reader,ModuleReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ModuleReader.cs,ResolveField,The following statement contains a magic number: if ((metadataToken >> 24) == FieldTable.Index && index < Field.RowCount) {  	return GetFieldAt (null' index);  } else if ((metadataToken >> 24) == MemberRefTable.Index && index < MemberRef.RowCount) {  	FieldInfo field = GetMemberRef (index' genericTypeArguments' genericMethodArguments) as FieldInfo;  	if (field != null) {  		return field;  	}  	throw new ArgumentException (String.Format ("Token 0x{0:x8} is not a valid FieldInfo token in the scope of module {1}."' metadataToken' this.Name)' "metadataToken");  } else {  	throw TokenOutOfRangeException (metadataToken);  }  
Magic Number,IKVM.Reflection.Reader,ModuleReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ModuleReader.cs,ResolveField,The following statement contains a magic number: if ((metadataToken >> 24) == FieldTable.Index && index < Field.RowCount) {  	return GetFieldAt (null' index);  } else if ((metadataToken >> 24) == MemberRefTable.Index && index < MemberRef.RowCount) {  	FieldInfo field = GetMemberRef (index' genericTypeArguments' genericMethodArguments) as FieldInfo;  	if (field != null) {  		return field;  	}  	throw new ArgumentException (String.Format ("Token 0x{0:x8} is not a valid FieldInfo token in the scope of module {1}."' metadataToken' this.Name)' "metadataToken");  } else {  	throw TokenOutOfRangeException (metadataToken);  }  
Magic Number,IKVM.Reflection.Reader,ModuleReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ModuleReader.cs,ResolveField,The following statement contains a magic number: if ((metadataToken >> 24) == MemberRefTable.Index && index < MemberRef.RowCount) {  	FieldInfo field = GetMemberRef (index' genericTypeArguments' genericMethodArguments) as FieldInfo;  	if (field != null) {  		return field;  	}  	throw new ArgumentException (String.Format ("Token 0x{0:x8} is not a valid FieldInfo token in the scope of module {1}."' metadataToken' this.Name)' "metadataToken");  } else {  	throw TokenOutOfRangeException (metadataToken);  }  
Magic Number,IKVM.Reflection.Reader,ModuleReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ModuleReader.cs,ResolveMethod,The following statement contains a magic number: if (index < 0) {  	throw TokenOutOfRangeException (metadataToken);  } else if ((metadataToken >> 24) == MethodDefTable.Index && index < MethodDef.RowCount) {  	return GetMethodAt (null' index);  } else if ((metadataToken >> 24) == MemberRefTable.Index && index < MemberRef.RowCount) {  	MethodBase method = GetMemberRef (index' genericTypeArguments' genericMethodArguments) as MethodBase;  	if (method != null) {  		return method;  	}  	throw new ArgumentException (String.Format ("Token 0x{0:x8} is not a valid MethodBase token in the scope of module {1}."' metadataToken' this.Name)' "metadataToken");  } else if ((metadataToken >> 24) == MethodSpecTable.Index && index < MethodSpec.RowCount) {  	MethodInfo method = (MethodInfo)ResolveMethod (MethodSpec.records [index].Method' genericTypeArguments' genericMethodArguments);  	ByteReader instantiation = ByteReader.FromBlob (blobHeap' MethodSpec.records [index].Instantiation);  	return method.MakeGenericMethod (Signature.ReadMethodSpec (this' instantiation' new GenericContext (genericTypeArguments' genericMethodArguments)));  } else {  	throw TokenOutOfRangeException (metadataToken);  }  
Magic Number,IKVM.Reflection.Reader,ModuleReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ModuleReader.cs,ResolveMethod,The following statement contains a magic number: if (index < 0) {  	throw TokenOutOfRangeException (metadataToken);  } else if ((metadataToken >> 24) == MethodDefTable.Index && index < MethodDef.RowCount) {  	return GetMethodAt (null' index);  } else if ((metadataToken >> 24) == MemberRefTable.Index && index < MemberRef.RowCount) {  	MethodBase method = GetMemberRef (index' genericTypeArguments' genericMethodArguments) as MethodBase;  	if (method != null) {  		return method;  	}  	throw new ArgumentException (String.Format ("Token 0x{0:x8} is not a valid MethodBase token in the scope of module {1}."' metadataToken' this.Name)' "metadataToken");  } else if ((metadataToken >> 24) == MethodSpecTable.Index && index < MethodSpec.RowCount) {  	MethodInfo method = (MethodInfo)ResolveMethod (MethodSpec.records [index].Method' genericTypeArguments' genericMethodArguments);  	ByteReader instantiation = ByteReader.FromBlob (blobHeap' MethodSpec.records [index].Instantiation);  	return method.MakeGenericMethod (Signature.ReadMethodSpec (this' instantiation' new GenericContext (genericTypeArguments' genericMethodArguments)));  } else {  	throw TokenOutOfRangeException (metadataToken);  }  
Magic Number,IKVM.Reflection.Reader,ModuleReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ModuleReader.cs,ResolveMethod,The following statement contains a magic number: if (index < 0) {  	throw TokenOutOfRangeException (metadataToken);  } else if ((metadataToken >> 24) == MethodDefTable.Index && index < MethodDef.RowCount) {  	return GetMethodAt (null' index);  } else if ((metadataToken >> 24) == MemberRefTable.Index && index < MemberRef.RowCount) {  	MethodBase method = GetMemberRef (index' genericTypeArguments' genericMethodArguments) as MethodBase;  	if (method != null) {  		return method;  	}  	throw new ArgumentException (String.Format ("Token 0x{0:x8} is not a valid MethodBase token in the scope of module {1}."' metadataToken' this.Name)' "metadataToken");  } else if ((metadataToken >> 24) == MethodSpecTable.Index && index < MethodSpec.RowCount) {  	MethodInfo method = (MethodInfo)ResolveMethod (MethodSpec.records [index].Method' genericTypeArguments' genericMethodArguments);  	ByteReader instantiation = ByteReader.FromBlob (blobHeap' MethodSpec.records [index].Instantiation);  	return method.MakeGenericMethod (Signature.ReadMethodSpec (this' instantiation' new GenericContext (genericTypeArguments' genericMethodArguments)));  } else {  	throw TokenOutOfRangeException (metadataToken);  }  
Magic Number,IKVM.Reflection.Reader,ModuleReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ModuleReader.cs,ResolveMethod,The following statement contains a magic number: if ((metadataToken >> 24) == MethodDefTable.Index && index < MethodDef.RowCount) {  	return GetMethodAt (null' index);  } else if ((metadataToken >> 24) == MemberRefTable.Index && index < MemberRef.RowCount) {  	MethodBase method = GetMemberRef (index' genericTypeArguments' genericMethodArguments) as MethodBase;  	if (method != null) {  		return method;  	}  	throw new ArgumentException (String.Format ("Token 0x{0:x8} is not a valid MethodBase token in the scope of module {1}."' metadataToken' this.Name)' "metadataToken");  } else if ((metadataToken >> 24) == MethodSpecTable.Index && index < MethodSpec.RowCount) {  	MethodInfo method = (MethodInfo)ResolveMethod (MethodSpec.records [index].Method' genericTypeArguments' genericMethodArguments);  	ByteReader instantiation = ByteReader.FromBlob (blobHeap' MethodSpec.records [index].Instantiation);  	return method.MakeGenericMethod (Signature.ReadMethodSpec (this' instantiation' new GenericContext (genericTypeArguments' genericMethodArguments)));  } else {  	throw TokenOutOfRangeException (metadataToken);  }  
Magic Number,IKVM.Reflection.Reader,ModuleReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ModuleReader.cs,ResolveMethod,The following statement contains a magic number: if ((metadataToken >> 24) == MethodDefTable.Index && index < MethodDef.RowCount) {  	return GetMethodAt (null' index);  } else if ((metadataToken >> 24) == MemberRefTable.Index && index < MemberRef.RowCount) {  	MethodBase method = GetMemberRef (index' genericTypeArguments' genericMethodArguments) as MethodBase;  	if (method != null) {  		return method;  	}  	throw new ArgumentException (String.Format ("Token 0x{0:x8} is not a valid MethodBase token in the scope of module {1}."' metadataToken' this.Name)' "metadataToken");  } else if ((metadataToken >> 24) == MethodSpecTable.Index && index < MethodSpec.RowCount) {  	MethodInfo method = (MethodInfo)ResolveMethod (MethodSpec.records [index].Method' genericTypeArguments' genericMethodArguments);  	ByteReader instantiation = ByteReader.FromBlob (blobHeap' MethodSpec.records [index].Instantiation);  	return method.MakeGenericMethod (Signature.ReadMethodSpec (this' instantiation' new GenericContext (genericTypeArguments' genericMethodArguments)));  } else {  	throw TokenOutOfRangeException (metadataToken);  }  
Magic Number,IKVM.Reflection.Reader,ModuleReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ModuleReader.cs,ResolveMethod,The following statement contains a magic number: if ((metadataToken >> 24) == MethodDefTable.Index && index < MethodDef.RowCount) {  	return GetMethodAt (null' index);  } else if ((metadataToken >> 24) == MemberRefTable.Index && index < MemberRef.RowCount) {  	MethodBase method = GetMemberRef (index' genericTypeArguments' genericMethodArguments) as MethodBase;  	if (method != null) {  		return method;  	}  	throw new ArgumentException (String.Format ("Token 0x{0:x8} is not a valid MethodBase token in the scope of module {1}."' metadataToken' this.Name)' "metadataToken");  } else if ((metadataToken >> 24) == MethodSpecTable.Index && index < MethodSpec.RowCount) {  	MethodInfo method = (MethodInfo)ResolveMethod (MethodSpec.records [index].Method' genericTypeArguments' genericMethodArguments);  	ByteReader instantiation = ByteReader.FromBlob (blobHeap' MethodSpec.records [index].Instantiation);  	return method.MakeGenericMethod (Signature.ReadMethodSpec (this' instantiation' new GenericContext (genericTypeArguments' genericMethodArguments)));  } else {  	throw TokenOutOfRangeException (metadataToken);  }  
Magic Number,IKVM.Reflection.Reader,ModuleReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ModuleReader.cs,ResolveMethod,The following statement contains a magic number: if ((metadataToken >> 24) == MemberRefTable.Index && index < MemberRef.RowCount) {  	MethodBase method = GetMemberRef (index' genericTypeArguments' genericMethodArguments) as MethodBase;  	if (method != null) {  		return method;  	}  	throw new ArgumentException (String.Format ("Token 0x{0:x8} is not a valid MethodBase token in the scope of module {1}."' metadataToken' this.Name)' "metadataToken");  } else if ((metadataToken >> 24) == MethodSpecTable.Index && index < MethodSpec.RowCount) {  	MethodInfo method = (MethodInfo)ResolveMethod (MethodSpec.records [index].Method' genericTypeArguments' genericMethodArguments);  	ByteReader instantiation = ByteReader.FromBlob (blobHeap' MethodSpec.records [index].Instantiation);  	return method.MakeGenericMethod (Signature.ReadMethodSpec (this' instantiation' new GenericContext (genericTypeArguments' genericMethodArguments)));  } else {  	throw TokenOutOfRangeException (metadataToken);  }  
Magic Number,IKVM.Reflection.Reader,ModuleReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ModuleReader.cs,ResolveMethod,The following statement contains a magic number: if ((metadataToken >> 24) == MemberRefTable.Index && index < MemberRef.RowCount) {  	MethodBase method = GetMemberRef (index' genericTypeArguments' genericMethodArguments) as MethodBase;  	if (method != null) {  		return method;  	}  	throw new ArgumentException (String.Format ("Token 0x{0:x8} is not a valid MethodBase token in the scope of module {1}."' metadataToken' this.Name)' "metadataToken");  } else if ((metadataToken >> 24) == MethodSpecTable.Index && index < MethodSpec.RowCount) {  	MethodInfo method = (MethodInfo)ResolveMethod (MethodSpec.records [index].Method' genericTypeArguments' genericMethodArguments);  	ByteReader instantiation = ByteReader.FromBlob (blobHeap' MethodSpec.records [index].Instantiation);  	return method.MakeGenericMethod (Signature.ReadMethodSpec (this' instantiation' new GenericContext (genericTypeArguments' genericMethodArguments)));  } else {  	throw TokenOutOfRangeException (metadataToken);  }  
Magic Number,IKVM.Reflection.Reader,ModuleReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ModuleReader.cs,ResolveMethod,The following statement contains a magic number: if ((metadataToken >> 24) == MethodSpecTable.Index && index < MethodSpec.RowCount) {  	MethodInfo method = (MethodInfo)ResolveMethod (MethodSpec.records [index].Method' genericTypeArguments' genericMethodArguments);  	ByteReader instantiation = ByteReader.FromBlob (blobHeap' MethodSpec.records [index].Instantiation);  	return method.MakeGenericMethod (Signature.ReadMethodSpec (this' instantiation' new GenericContext (genericTypeArguments' genericMethodArguments)));  } else {  	throw TokenOutOfRangeException (metadataToken);  }  
Magic Number,IKVM.Reflection.Reader,ModuleReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ModuleReader.cs,__ResolveOptionalParameterTypes,The following statement contains a magic number: if (index < 0) {  	throw TokenOutOfRangeException (metadataToken);  } else if ((metadataToken >> 24) == MemberRefTable.Index && index < MemberRef.RowCount) {  	int sig = MemberRef.records [index].Signature;  	return Signature.ReadOptionalParameterTypes (this' GetBlob (sig)' new GenericContext (genericTypeArguments' genericMethodArguments)' out customModifiers);  } else if ((metadataToken >> 24) == MethodDefTable.Index && index < MethodDef.RowCount) {  	// for convenience' we support passing a MethodDef token as well' because in some places  	// it makes sense to have a vararg method that is referred to by its methoddef (e.g. ldftn).  	// Note that MethodSpec doesn't make sense' because generic methods cannot be vararg.  	customModifiers = Empty<CustomModifiers>.Array;  	return Type.EmptyTypes;  } else {  	throw TokenOutOfRangeException (metadataToken);  }  
Magic Number,IKVM.Reflection.Reader,ModuleReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ModuleReader.cs,__ResolveOptionalParameterTypes,The following statement contains a magic number: if (index < 0) {  	throw TokenOutOfRangeException (metadataToken);  } else if ((metadataToken >> 24) == MemberRefTable.Index && index < MemberRef.RowCount) {  	int sig = MemberRef.records [index].Signature;  	return Signature.ReadOptionalParameterTypes (this' GetBlob (sig)' new GenericContext (genericTypeArguments' genericMethodArguments)' out customModifiers);  } else if ((metadataToken >> 24) == MethodDefTable.Index && index < MethodDef.RowCount) {  	// for convenience' we support passing a MethodDef token as well' because in some places  	// it makes sense to have a vararg method that is referred to by its methoddef (e.g. ldftn).  	// Note that MethodSpec doesn't make sense' because generic methods cannot be vararg.  	customModifiers = Empty<CustomModifiers>.Array;  	return Type.EmptyTypes;  } else {  	throw TokenOutOfRangeException (metadataToken);  }  
Magic Number,IKVM.Reflection.Reader,ModuleReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ModuleReader.cs,__ResolveOptionalParameterTypes,The following statement contains a magic number: if ((metadataToken >> 24) == MemberRefTable.Index && index < MemberRef.RowCount) {  	int sig = MemberRef.records [index].Signature;  	return Signature.ReadOptionalParameterTypes (this' GetBlob (sig)' new GenericContext (genericTypeArguments' genericMethodArguments)' out customModifiers);  } else if ((metadataToken >> 24) == MethodDefTable.Index && index < MethodDef.RowCount) {  	// for convenience' we support passing a MethodDef token as well' because in some places  	// it makes sense to have a vararg method that is referred to by its methoddef (e.g. ldftn).  	// Note that MethodSpec doesn't make sense' because generic methods cannot be vararg.  	customModifiers = Empty<CustomModifiers>.Array;  	return Type.EmptyTypes;  } else {  	throw TokenOutOfRangeException (metadataToken);  }  
Magic Number,IKVM.Reflection.Reader,ModuleReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ModuleReader.cs,__ResolveOptionalParameterTypes,The following statement contains a magic number: if ((metadataToken >> 24) == MemberRefTable.Index && index < MemberRef.RowCount) {  	int sig = MemberRef.records [index].Signature;  	return Signature.ReadOptionalParameterTypes (this' GetBlob (sig)' new GenericContext (genericTypeArguments' genericMethodArguments)' out customModifiers);  } else if ((metadataToken >> 24) == MethodDefTable.Index && index < MethodDef.RowCount) {  	// for convenience' we support passing a MethodDef token as well' because in some places  	// it makes sense to have a vararg method that is referred to by its methoddef (e.g. ldftn).  	// Note that MethodSpec doesn't make sense' because generic methods cannot be vararg.  	customModifiers = Empty<CustomModifiers>.Array;  	return Type.EmptyTypes;  } else {  	throw TokenOutOfRangeException (metadataToken);  }  
Magic Number,IKVM.Reflection.Reader,ModuleReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ModuleReader.cs,__ResolveOptionalParameterTypes,The following statement contains a magic number: if ((metadataToken >> 24) == MethodDefTable.Index && index < MethodDef.RowCount) {  	// for convenience' we support passing a MethodDef token as well' because in some places  	// it makes sense to have a vararg method that is referred to by its methoddef (e.g. ldftn).  	// Note that MethodSpec doesn't make sense' because generic methods cannot be vararg.  	customModifiers = Empty<CustomModifiers>.Array;  	return Type.EmptyTypes;  } else {  	throw TokenOutOfRangeException (metadataToken);  }  
Magic Number,IKVM.Reflection.Reader,ModuleReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ModuleReader.cs,GetMemberRef,The following statement contains a magic number: if (memberRefs [index] == null) {  	int owner = MemberRef.records [index].Class;  	int sig = MemberRef.records [index].Signature;  	string name = GetString (MemberRef.records [index].Name);  	switch (owner >> 24) {  	case MethodDefTable.Index:  		return GetMethodAt (null' (owner & 0xFFFFFF) - 1);  	case ModuleRefTable.Index:  		memberRefs [index] = ResolveTypeMemberRef (ResolveModuleType (owner)' name' ByteReader.FromBlob (blobHeap' sig));  		break;  	case TypeDefTable.Index:  	case TypeRefTable.Index:  		memberRefs [index] = ResolveTypeMemberRef (ResolveType (owner)' name' ByteReader.FromBlob (blobHeap' sig));  		break;  	case TypeSpecTable.Index: {  		Type type = ResolveType (owner' genericTypeArguments' genericMethodArguments);  		if (type.IsArray) {  			MethodSignature methodSig = MethodSignature.ReadSig (this' ByteReader.FromBlob (blobHeap' sig)' new GenericContext (genericTypeArguments' genericMethodArguments));  			return type.FindMethod (name' methodSig) ?? universe.GetMissingMethodOrThrow (type' name' methodSig);  		} else if (type.IsGenericTypeInstance) {  			MemberInfo member = ResolveTypeMemberRef (type.GetGenericTypeDefinition ()' name' ByteReader.FromBlob (blobHeap' sig));  			MethodBase mb = member as MethodBase;  			if (mb != null) {  				member = mb.BindTypeParameters (type);  			}  			FieldInfo fi = member as FieldInfo;  			if (fi != null) {  				member = fi.BindTypeParameters (type);  			}  			return member;  		} else {  			return ResolveTypeMemberRef (type' name' ByteReader.FromBlob (blobHeap' sig));  		}  	}  	default:  		throw new BadImageFormatException ();  	}  }  
Magic Number,IKVM.Reflection.Reader,ModuleReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ModuleReader.cs,GetMemberRef,The following statement contains a magic number: switch (owner >> 24) {  case MethodDefTable.Index:  	return GetMethodAt (null' (owner & 0xFFFFFF) - 1);  case ModuleRefTable.Index:  	memberRefs [index] = ResolveTypeMemberRef (ResolveModuleType (owner)' name' ByteReader.FromBlob (blobHeap' sig));  	break;  case TypeDefTable.Index:  case TypeRefTable.Index:  	memberRefs [index] = ResolveTypeMemberRef (ResolveType (owner)' name' ByteReader.FromBlob (blobHeap' sig));  	break;  case TypeSpecTable.Index: {  	Type type = ResolveType (owner' genericTypeArguments' genericMethodArguments);  	if (type.IsArray) {  		MethodSignature methodSig = MethodSignature.ReadSig (this' ByteReader.FromBlob (blobHeap' sig)' new GenericContext (genericTypeArguments' genericMethodArguments));  		return type.FindMethod (name' methodSig) ?? universe.GetMissingMethodOrThrow (type' name' methodSig);  	} else if (type.IsGenericTypeInstance) {  		MemberInfo member = ResolveTypeMemberRef (type.GetGenericTypeDefinition ()' name' ByteReader.FromBlob (blobHeap' sig));  		MethodBase mb = member as MethodBase;  		if (mb != null) {  			member = mb.BindTypeParameters (type);  		}  		FieldInfo fi = member as FieldInfo;  		if (fi != null) {  			member = fi.BindTypeParameters (type);  		}  		return member;  	} else {  		return ResolveTypeMemberRef (type' name' ByteReader.FromBlob (blobHeap' sig));  	}  }  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,ModuleReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ModuleReader.cs,ResolveSignature,The following statement contains a magic number: if ((metadataToken >> 24) == StandAloneSigTable.Index && index >= 0 && index < StandAloneSig.RowCount) {  	ByteReader br = GetStandAloneSig (index);  	return br.ReadBytes (br.Length);  } else {  	throw TokenOutOfRangeException (metadataToken);  }  
Magic Number,IKVM.Reflection.Reader,ModuleReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ModuleReader.cs,__ResolveStandAloneMethodSig,The following statement contains a magic number: if ((metadataToken >> 24) == StandAloneSigTable.Index && index >= 0 && index < StandAloneSig.RowCount) {  	return MethodSignature.ReadStandAloneMethodSig (this' GetStandAloneSig (index)' new GenericContext (genericTypeArguments' genericMethodArguments));  } else {  	throw TokenOutOfRangeException (metadataToken);  }  
Magic Number,IKVM.Reflection.Reader,ModuleReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ModuleReader.cs,GetManifestResourceStream,The following statement contains a magic number: for (int i = 0; i < ManifestResource.records.Length; i++) {  	if (resourceName == GetString (ManifestResource.records [i].Name)) {  		if (ManifestResource.records [i].Implementation != 0x26000000) {  			ManifestResourceInfo info = new ManifestResourceInfo (this' i);  			switch (ManifestResource.records [i].Implementation >> 24) {  			case FileTable.Index:  				string fileName = Path.Combine (Path.GetDirectoryName (location)' info.FileName);  				if (System.IO.File.Exists (fileName)) {  					// note that' like System.Reflection' we return null for zero length files and  					// ManifestResource.Offset is ignored  					FileStream fs = new FileStream (fileName' FileMode.Open' FileAccess.Read' FileShare.Read | FileShare.Delete);  					if (fs.Length == 0) {  						fs.Close ();  						return null;  					}  					return fs;  				}  				return null;  			case AssemblyRefTable.Index:  				Assembly asm = info.ReferencedAssembly;  				if (asm.__IsMissing) {  					return null;  				}  				return asm.GetManifestResourceStream (resourceName);  			default:  				throw new BadImageFormatException ();  			}  		}  		SeekRVA ((int)cliHeader.Resources.VirtualAddress + ManifestResource.records [i].Offset);  		BinaryReader br = new BinaryReader (stream);  		int length = br.ReadInt32 ();  		return new MemoryStream (br.ReadBytes (length));  	}  }  
Magic Number,IKVM.Reflection.Reader,ModuleReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ModuleReader.cs,GetManifestResourceStream,The following statement contains a magic number: if (resourceName == GetString (ManifestResource.records [i].Name)) {  	if (ManifestResource.records [i].Implementation != 0x26000000) {  		ManifestResourceInfo info = new ManifestResourceInfo (this' i);  		switch (ManifestResource.records [i].Implementation >> 24) {  		case FileTable.Index:  			string fileName = Path.Combine (Path.GetDirectoryName (location)' info.FileName);  			if (System.IO.File.Exists (fileName)) {  				// note that' like System.Reflection' we return null for zero length files and  				// ManifestResource.Offset is ignored  				FileStream fs = new FileStream (fileName' FileMode.Open' FileAccess.Read' FileShare.Read | FileShare.Delete);  				if (fs.Length == 0) {  					fs.Close ();  					return null;  				}  				return fs;  			}  			return null;  		case AssemblyRefTable.Index:  			Assembly asm = info.ReferencedAssembly;  			if (asm.__IsMissing) {  				return null;  			}  			return asm.GetManifestResourceStream (resourceName);  		default:  			throw new BadImageFormatException ();  		}  	}  	SeekRVA ((int)cliHeader.Resources.VirtualAddress + ManifestResource.records [i].Offset);  	BinaryReader br = new BinaryReader (stream);  	int length = br.ReadInt32 ();  	return new MemoryStream (br.ReadBytes (length));  }  
Magic Number,IKVM.Reflection.Reader,ModuleReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ModuleReader.cs,GetManifestResourceStream,The following statement contains a magic number: if (ManifestResource.records [i].Implementation != 0x26000000) {  	ManifestResourceInfo info = new ManifestResourceInfo (this' i);  	switch (ManifestResource.records [i].Implementation >> 24) {  	case FileTable.Index:  		string fileName = Path.Combine (Path.GetDirectoryName (location)' info.FileName);  		if (System.IO.File.Exists (fileName)) {  			// note that' like System.Reflection' we return null for zero length files and  			// ManifestResource.Offset is ignored  			FileStream fs = new FileStream (fileName' FileMode.Open' FileAccess.Read' FileShare.Read | FileShare.Delete);  			if (fs.Length == 0) {  				fs.Close ();  				return null;  			}  			return fs;  		}  		return null;  	case AssemblyRefTable.Index:  		Assembly asm = info.ReferencedAssembly;  		if (asm.__IsMissing) {  			return null;  		}  		return asm.GetManifestResourceStream (resourceName);  	default:  		throw new BadImageFormatException ();  	}  }  
Magic Number,IKVM.Reflection.Reader,ModuleReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ModuleReader.cs,GetManifestResourceStream,The following statement contains a magic number: switch (ManifestResource.records [i].Implementation >> 24) {  case FileTable.Index:  	string fileName = Path.Combine (Path.GetDirectoryName (location)' info.FileName);  	if (System.IO.File.Exists (fileName)) {  		// note that' like System.Reflection' we return null for zero length files and  		// ManifestResource.Offset is ignored  		FileStream fs = new FileStream (fileName' FileMode.Open' FileAccess.Read' FileShare.Read | FileShare.Delete);  		if (fs.Length == 0) {  			fs.Close ();  			return null;  		}  		return fs;  	}  	return null;  case AssemblyRefTable.Index:  	Assembly asm = info.ReferencedAssembly;  	if (asm.__IsMissing) {  		return null;  	}  	return asm.GetManifestResourceStream (resourceName);  default:  	throw new BadImageFormatException ();  }  
Magic Number,IKVM.Reflection.Reader,ModuleReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ModuleReader.cs,__GetReferencedTypes,The following statement contains a magic number: for (int i = 0; i < arr.Length; i++) {  	arr [i] = ResolveType ((TypeRefTable.Index << 24) + i + 1);  }  
Magic Number,IKVM.Reflection.Reader,ModuleReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ModuleReader.cs,__GetReferencedTypes,The following statement contains a magic number: arr [i] = ResolveType ((TypeRefTable.Index << 24) + i + 1);  
Magic Number,IKVM.Reflection.Reader,ModuleReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ModuleReader.cs,ResolveExportedType,The following statement contains a magic number: switch (implementation >> 24) {  case AssemblyRefTable.Index:  	return ResolveAssemblyRef ((implementation & 0xFFFFFF) - 1).ResolveType (typeName).SetMetadataTokenForMissing (token);  case ExportedTypeTable.Index:  	return ResolveExportedType ((implementation & 0xFFFFFF) - 1).ResolveNestedType (typeName).SetMetadataTokenForMissing (token);  default:  	throw new NotImplementedException ();  }  
Magic Number,IKVM.Reflection.Reader,ModuleReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ModuleReader.cs,__GetPlaceholderAssemblyCustomAttributes,The following statement contains a magic number: switch ((multiple ? 1 : 0) + (security ? 2 : 0)) {  case 0:  	typeName = new TypeName ("System.Runtime.CompilerServices"' "AssemblyAttributesGoHere");  	break;  case 1:  	typeName = new TypeName ("System.Runtime.CompilerServices"' "AssemblyAttributesGoHereM");  	break;  case 2:  	typeName = new TypeName ("System.Runtime.CompilerServices"' "AssemblyAttributesGoHereS");  	break;  case 3:  default:  	typeName = new TypeName ("System.Runtime.CompilerServices"' "AssemblyAttributesGoHereSM");  	break;  }  
Magic Number,IKVM.Reflection.Reader,ModuleReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ModuleReader.cs,__GetPlaceholderAssemblyCustomAttributes,The following statement contains a magic number: switch ((multiple ? 1 : 0) + (security ? 2 : 0)) {  case 0:  	typeName = new TypeName ("System.Runtime.CompilerServices"' "AssemblyAttributesGoHere");  	break;  case 1:  	typeName = new TypeName ("System.Runtime.CompilerServices"' "AssemblyAttributesGoHereM");  	break;  case 2:  	typeName = new TypeName ("System.Runtime.CompilerServices"' "AssemblyAttributesGoHereS");  	break;  case 3:  default:  	typeName = new TypeName ("System.Runtime.CompilerServices"' "AssemblyAttributesGoHereSM");  	break;  }  
Magic Number,IKVM.Reflection.Reader,ModuleReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ModuleReader.cs,__GetPlaceholderAssemblyCustomAttributes,The following statement contains a magic number: switch ((multiple ? 1 : 0) + (security ? 2 : 0)) {  case 0:  	typeName = new TypeName ("System.Runtime.CompilerServices"' "AssemblyAttributesGoHere");  	break;  case 1:  	typeName = new TypeName ("System.Runtime.CompilerServices"' "AssemblyAttributesGoHereM");  	break;  case 2:  	typeName = new TypeName ("System.Runtime.CompilerServices"' "AssemblyAttributesGoHereS");  	break;  case 3:  default:  	typeName = new TypeName ("System.Runtime.CompilerServices"' "AssemblyAttributesGoHereSM");  	break;  }  
Magic Number,IKVM.Reflection.Reader,ModuleReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ModuleReader.cs,__GetPlaceholderAssemblyCustomAttributes,The following statement contains a magic number: for (int i = 0; i < CustomAttribute.records.Length; i++) {  	if ((CustomAttribute.records [i].Parent >> 24) == TypeRefTable.Index) {  		int index = (CustomAttribute.records [i].Parent & 0xFFFFFF) - 1;  		if (typeName == GetTypeName (TypeRef.records [index].TypeNameSpace' TypeRef.records [index].TypeName)) {  			list.Add (new CustomAttributeData (this' i));  		}  	}  }  
Magic Number,IKVM.Reflection.Reader,ModuleReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\ModuleReader.cs,__GetPlaceholderAssemblyCustomAttributes,The following statement contains a magic number: if ((CustomAttribute.records [i].Parent >> 24) == TypeRefTable.Index) {  	int index = (CustomAttribute.records [i].Parent & 0xFFFFFF) - 1;  	if (typeName == GetTypeName (TypeRef.records [index].TypeNameSpace' TypeRef.records [index].TypeName)) {  		list.Add (new CustomAttributeData (this' i));  	}  }  
Magic Number,IKVM.Reflection.Reader,SectionHeader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\PEReader.cs,Read,The following statement contains a magic number: for (int i = 0; i < 8; i++) {  	byte b = br.ReadByte ();  	name [i] = (char)b;  	if (b == 0 && len == 8) {  		len = i;  	}  }  
Magic Number,IKVM.Reflection.Reader,SectionHeader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\PEReader.cs,Read,The following statement contains a magic number: for (int i = 0; i < 8; i++) {  	byte b = br.ReadByte ();  	name [i] = (char)b;  	if (b == 0 && len == 8) {  		len = i;  	}  }  
Magic Number,IKVM.Reflection.Reader,SectionHeader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\PEReader.cs,Read,The following statement contains a magic number: if (b == 0 && len == 8) {  	len = i;  }  
Magic Number,IKVM.Reflection.Reader,PEReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\PEReader.cs,Read,The following statement contains a magic number: br.BaseStream.Seek (58' SeekOrigin.Current);  
Magic Number,IKVM.Reflection.Reader,PEReader,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\PEReader.cs,GetComDescriptorVirtualAddress,The following statement contains a magic number: return headers.OptionalHeader.DataDirectory [14].VirtualAddress;  
Magic Number,IKVM.Reflection.Reader,PropertyInfoImpl,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\PropertyInfoImpl.cs,GetHashCode,The following statement contains a magic number: return declaringType.GetHashCode () * 77 + index;  
Magic Number,IKVM.Reflection.Reader,TypeDefImpl,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\TypeDefImpl.cs,GetInterfaceImplCustomAttributes,The following statement contains a magic number: foreach (int i in module.InterfaceImpl.Filter (this.MetadataToken)) {  	if (module.ResolveType (module.InterfaceImpl.records [i].Interface' this) == interfaceType) {  		return module.GetCustomAttributes ((InterfaceImplTable.Index << 24) | (i + 1)' attributeType);  	}  }  
Magic Number,IKVM.Reflection.Reader,TypeDefImpl,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\TypeDefImpl.cs,GetInterfaceImplCustomAttributes,The following statement contains a magic number: if (module.ResolveType (module.InterfaceImpl.records [i].Interface' this) == interfaceType) {  	return module.GetCustomAttributes ((InterfaceImplTable.Index << 24) | (i + 1)' attributeType);  }  
Magic Number,IKVM.Reflection.Reader,TypeDefImpl,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Reader\TypeDefImpl.cs,GetInterfaceImplCustomAttributes,The following statement contains a magic number: return module.GetCustomAttributes ((InterfaceImplTable.Index << 24) | (i + 1)' attributeType);  
Magic Number,IKVM.Reflection.Writer,ByteBuffer,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ByteBuffer.cs,GetInt32AtCurrentPosition,The following statement contains a magic number: return buffer [pos] + (buffer [pos + 1] << 8) + (buffer [pos + 2] << 16) + (buffer [pos + 3] << 24);  
Magic Number,IKVM.Reflection.Writer,ByteBuffer,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ByteBuffer.cs,GetInt32AtCurrentPosition,The following statement contains a magic number: return buffer [pos] + (buffer [pos + 1] << 8) + (buffer [pos + 2] << 16) + (buffer [pos + 3] << 24);  
Magic Number,IKVM.Reflection.Writer,ByteBuffer,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ByteBuffer.cs,GetInt32AtCurrentPosition,The following statement contains a magic number: return buffer [pos] + (buffer [pos + 1] << 8) + (buffer [pos + 2] << 16) + (buffer [pos + 3] << 24);  
Magic Number,IKVM.Reflection.Writer,ByteBuffer,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ByteBuffer.cs,GetInt32AtCurrentPosition,The following statement contains a magic number: return buffer [pos] + (buffer [pos + 1] << 8) + (buffer [pos + 2] << 16) + (buffer [pos + 3] << 24);  
Magic Number,IKVM.Reflection.Writer,ByteBuffer,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ByteBuffer.cs,GetInt32AtCurrentPosition,The following statement contains a magic number: return buffer [pos] + (buffer [pos + 1] << 8) + (buffer [pos + 2] << 16) + (buffer [pos + 3] << 24);  
Magic Number,IKVM.Reflection.Writer,ByteBuffer,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ByteBuffer.cs,Write,The following statement contains a magic number: if (pos + 2 > buffer.Length)  	Grow (2);  
Magic Number,IKVM.Reflection.Writer,ByteBuffer,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ByteBuffer.cs,Write,The following statement contains a magic number: if (pos + 2 > buffer.Length)  	Grow (2);  
Magic Number,IKVM.Reflection.Writer,ByteBuffer,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ByteBuffer.cs,Write,The following statement contains a magic number: Grow (2);  
Magic Number,IKVM.Reflection.Writer,ByteBuffer,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ByteBuffer.cs,Write,The following statement contains a magic number: buffer [pos++] = (byte)(value >> 8);  
Magic Number,IKVM.Reflection.Writer,ByteBuffer,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ByteBuffer.cs,Write,The following statement contains a magic number: if (pos + 4 > buffer.Length)  	Grow (4);  
Magic Number,IKVM.Reflection.Writer,ByteBuffer,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ByteBuffer.cs,Write,The following statement contains a magic number: if (pos + 4 > buffer.Length)  	Grow (4);  
Magic Number,IKVM.Reflection.Writer,ByteBuffer,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ByteBuffer.cs,Write,The following statement contains a magic number: Grow (4);  
Magic Number,IKVM.Reflection.Writer,ByteBuffer,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ByteBuffer.cs,Write,The following statement contains a magic number: buffer [pos++] = (byte)(value >> 8);  
Magic Number,IKVM.Reflection.Writer,ByteBuffer,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ByteBuffer.cs,Write,The following statement contains a magic number: buffer [pos++] = (byte)(value >> 16);  
Magic Number,IKVM.Reflection.Writer,ByteBuffer,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ByteBuffer.cs,Write,The following statement contains a magic number: buffer [pos++] = (byte)(value >> 24);  
Magic Number,IKVM.Reflection.Writer,ByteBuffer,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ByteBuffer.cs,Write,The following statement contains a magic number: if (pos + 8 > buffer.Length)  	Grow (8);  
Magic Number,IKVM.Reflection.Writer,ByteBuffer,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ByteBuffer.cs,Write,The following statement contains a magic number: if (pos + 8 > buffer.Length)  	Grow (8);  
Magic Number,IKVM.Reflection.Writer,ByteBuffer,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ByteBuffer.cs,Write,The following statement contains a magic number: Grow (8);  
Magic Number,IKVM.Reflection.Writer,ByteBuffer,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ByteBuffer.cs,Write,The following statement contains a magic number: buffer [pos++] = (byte)(value >> 8);  
Magic Number,IKVM.Reflection.Writer,ByteBuffer,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ByteBuffer.cs,Write,The following statement contains a magic number: buffer [pos++] = (byte)(value >> 16);  
Magic Number,IKVM.Reflection.Writer,ByteBuffer,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ByteBuffer.cs,Write,The following statement contains a magic number: buffer [pos++] = (byte)(value >> 24);  
Magic Number,IKVM.Reflection.Writer,ByteBuffer,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ByteBuffer.cs,Write,The following statement contains a magic number: buffer [pos++] = (byte)(value >> 32);  
Magic Number,IKVM.Reflection.Writer,ByteBuffer,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ByteBuffer.cs,Write,The following statement contains a magic number: buffer [pos++] = (byte)(value >> 40);  
Magic Number,IKVM.Reflection.Writer,ByteBuffer,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ByteBuffer.cs,Write,The following statement contains a magic number: buffer [pos++] = (byte)(value >> 48);  
Magic Number,IKVM.Reflection.Writer,ByteBuffer,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ByteBuffer.cs,Write,The following statement contains a magic number: buffer [pos++] = (byte)(value >> 56);  
Magic Number,IKVM.Reflection.Writer,ByteBuffer,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ByteBuffer.cs,WriteCompressedInt,The following statement contains a magic number: if (value <= 0x7F) {  	Write ((byte)value);  } else if (value <= 0x3FFF) {  	Write ((byte)(0x80 | (value >> 8)));  	Write ((byte)value);  } else {  	Write ((byte)(0xC0 | (value >> 24)));  	Write ((byte)(value >> 16));  	Write ((byte)(value >> 8));  	Write ((byte)value);  }  
Magic Number,IKVM.Reflection.Writer,ByteBuffer,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ByteBuffer.cs,WriteCompressedInt,The following statement contains a magic number: if (value <= 0x7F) {  	Write ((byte)value);  } else if (value <= 0x3FFF) {  	Write ((byte)(0x80 | (value >> 8)));  	Write ((byte)value);  } else {  	Write ((byte)(0xC0 | (value >> 24)));  	Write ((byte)(value >> 16));  	Write ((byte)(value >> 8));  	Write ((byte)value);  }  
Magic Number,IKVM.Reflection.Writer,ByteBuffer,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ByteBuffer.cs,WriteCompressedInt,The following statement contains a magic number: if (value <= 0x7F) {  	Write ((byte)value);  } else if (value <= 0x3FFF) {  	Write ((byte)(0x80 | (value >> 8)));  	Write ((byte)value);  } else {  	Write ((byte)(0xC0 | (value >> 24)));  	Write ((byte)(value >> 16));  	Write ((byte)(value >> 8));  	Write ((byte)value);  }  
Magic Number,IKVM.Reflection.Writer,ByteBuffer,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ByteBuffer.cs,WriteCompressedInt,The following statement contains a magic number: if (value <= 0x7F) {  	Write ((byte)value);  } else if (value <= 0x3FFF) {  	Write ((byte)(0x80 | (value >> 8)));  	Write ((byte)value);  } else {  	Write ((byte)(0xC0 | (value >> 24)));  	Write ((byte)(value >> 16));  	Write ((byte)(value >> 8));  	Write ((byte)value);  }  
Magic Number,IKVM.Reflection.Writer,ByteBuffer,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ByteBuffer.cs,WriteCompressedInt,The following statement contains a magic number: if (value <= 0x3FFF) {  	Write ((byte)(0x80 | (value >> 8)));  	Write ((byte)value);  } else {  	Write ((byte)(0xC0 | (value >> 24)));  	Write ((byte)(value >> 16));  	Write ((byte)(value >> 8));  	Write ((byte)value);  }  
Magic Number,IKVM.Reflection.Writer,ByteBuffer,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ByteBuffer.cs,WriteCompressedInt,The following statement contains a magic number: if (value <= 0x3FFF) {  	Write ((byte)(0x80 | (value >> 8)));  	Write ((byte)value);  } else {  	Write ((byte)(0xC0 | (value >> 24)));  	Write ((byte)(value >> 16));  	Write ((byte)(value >> 8));  	Write ((byte)value);  }  
Magic Number,IKVM.Reflection.Writer,ByteBuffer,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ByteBuffer.cs,WriteCompressedInt,The following statement contains a magic number: if (value <= 0x3FFF) {  	Write ((byte)(0x80 | (value >> 8)));  	Write ((byte)value);  } else {  	Write ((byte)(0xC0 | (value >> 24)));  	Write ((byte)(value >> 16));  	Write ((byte)(value >> 8));  	Write ((byte)value);  }  
Magic Number,IKVM.Reflection.Writer,ByteBuffer,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ByteBuffer.cs,WriteCompressedInt,The following statement contains a magic number: if (value <= 0x3FFF) {  	Write ((byte)(0x80 | (value >> 8)));  	Write ((byte)value);  } else {  	Write ((byte)(0xC0 | (value >> 24)));  	Write ((byte)(value >> 16));  	Write ((byte)(value >> 8));  	Write ((byte)value);  }  
Magic Number,IKVM.Reflection.Writer,ByteBuffer,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ByteBuffer.cs,WriteCompressedInt,The following statement contains a magic number: Write ((byte)(0x80 | (value >> 8)));  
Magic Number,IKVM.Reflection.Writer,ByteBuffer,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ByteBuffer.cs,WriteCompressedInt,The following statement contains a magic number: Write ((byte)(0xC0 | (value >> 24)));  
Magic Number,IKVM.Reflection.Writer,ByteBuffer,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ByteBuffer.cs,WriteCompressedInt,The following statement contains a magic number: Write ((byte)(value >> 16));  
Magic Number,IKVM.Reflection.Writer,ByteBuffer,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ByteBuffer.cs,WriteCompressedInt,The following statement contains a magic number: Write ((byte)(value >> 8));  
Magic Number,IKVM.Reflection.Writer,ByteBuffer,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ByteBuffer.cs,WriteTypeDefOrRefEncoded,The following statement contains a magic number: switch (token >> 24) {  case TypeDefTable.Index:  	WriteCompressedInt ((token & 0xFFFFFF) << 2 | 0);  	break;  case TypeRefTable.Index:  	WriteCompressedInt ((token & 0xFFFFFF) << 2 | 1);  	break;  case TypeSpecTable.Index:  	WriteCompressedInt ((token & 0xFFFFFF) << 2 | 2);  	break;  default:  	throw new InvalidOperationException ();  }  
Magic Number,IKVM.Reflection.Writer,ByteBuffer,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ByteBuffer.cs,WriteTypeDefOrRefEncoded,The following statement contains a magic number: switch (token >> 24) {  case TypeDefTable.Index:  	WriteCompressedInt ((token & 0xFFFFFF) << 2 | 0);  	break;  case TypeRefTable.Index:  	WriteCompressedInt ((token & 0xFFFFFF) << 2 | 1);  	break;  case TypeSpecTable.Index:  	WriteCompressedInt ((token & 0xFFFFFF) << 2 | 2);  	break;  default:  	throw new InvalidOperationException ();  }  
Magic Number,IKVM.Reflection.Writer,ByteBuffer,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ByteBuffer.cs,WriteTypeDefOrRefEncoded,The following statement contains a magic number: switch (token >> 24) {  case TypeDefTable.Index:  	WriteCompressedInt ((token & 0xFFFFFF) << 2 | 0);  	break;  case TypeRefTable.Index:  	WriteCompressedInt ((token & 0xFFFFFF) << 2 | 1);  	break;  case TypeSpecTable.Index:  	WriteCompressedInt ((token & 0xFFFFFF) << 2 | 2);  	break;  default:  	throw new InvalidOperationException ();  }  
Magic Number,IKVM.Reflection.Writer,ByteBuffer,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ByteBuffer.cs,WriteTypeDefOrRefEncoded,The following statement contains a magic number: switch (token >> 24) {  case TypeDefTable.Index:  	WriteCompressedInt ((token & 0xFFFFFF) << 2 | 0);  	break;  case TypeRefTable.Index:  	WriteCompressedInt ((token & 0xFFFFFF) << 2 | 1);  	break;  case TypeSpecTable.Index:  	WriteCompressedInt ((token & 0xFFFFFF) << 2 | 2);  	break;  default:  	throw new InvalidOperationException ();  }  
Magic Number,IKVM.Reflection.Writer,ByteBuffer,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ByteBuffer.cs,WriteTypeDefOrRefEncoded,The following statement contains a magic number: switch (token >> 24) {  case TypeDefTable.Index:  	WriteCompressedInt ((token & 0xFFFFFF) << 2 | 0);  	break;  case TypeRefTable.Index:  	WriteCompressedInt ((token & 0xFFFFFF) << 2 | 1);  	break;  case TypeSpecTable.Index:  	WriteCompressedInt ((token & 0xFFFFFF) << 2 | 2);  	break;  default:  	throw new InvalidOperationException ();  }  
Magic Number,IKVM.Reflection.Writer,ByteBuffer,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ByteBuffer.cs,WriteTypeDefOrRefEncoded,The following statement contains a magic number: WriteCompressedInt ((token & 0xFFFFFF) << 2 | 0);  
Magic Number,IKVM.Reflection.Writer,ByteBuffer,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ByteBuffer.cs,WriteTypeDefOrRefEncoded,The following statement contains a magic number: WriteCompressedInt ((token & 0xFFFFFF) << 2 | 1);  
Magic Number,IKVM.Reflection.Writer,ByteBuffer,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ByteBuffer.cs,WriteTypeDefOrRefEncoded,The following statement contains a magic number: WriteCompressedInt ((token & 0xFFFFFF) << 2 | 2);  
Magic Number,IKVM.Reflection.Writer,ByteBuffer,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ByteBuffer.cs,WriteTypeDefOrRefEncoded,The following statement contains a magic number: WriteCompressedInt ((token & 0xFFFFFF) << 2 | 2);  
Magic Number,IKVM.Reflection.Writer,ByteBuffer,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ByteBuffer.cs,Hash,The following statement contains a magic number: for (int i = 0; i < len; i++) {  	hash *= 37;  	hash ^= buffer [i];  }  
Magic Number,IKVM.Reflection.Writer,ByteBuffer,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ByteBuffer.cs,Hash,The following statement contains a magic number: hash *= 37;  
Magic Number,IKVM.Reflection.Writer,TableHeap,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\Heaps.cs,WriteImpl,The following statement contains a magic number: mw.Write ((byte)(ver >> 16));  
Magic Number,IKVM.Reflection.Writer,TableHeap,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\Heaps.cs,GetLength,The following statement contains a magic number: foreach (Table table in mw.ModuleBuilder.GetTables ()) {  	if (table != null && table.RowCount > 0) {  		len += 4;  		// row count  		len += table.GetLength (mw);  	}  }  
Magic Number,IKVM.Reflection.Writer,TableHeap,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\Heaps.cs,GetLength,The following statement contains a magic number: if (table != null && table.RowCount > 0) {  	len += 4;  	// row count  	len += table.GetLength (mw);  }  
Magic Number,IKVM.Reflection.Writer,TableHeap,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\Heaps.cs,GetLength,The following statement contains a magic number: len += 4;  
Magic Number,IKVM.Reflection.Writer,UserStringHeap,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\Heaps.cs,Add,The following statement contains a magic number: if (!strings.TryGetValue (str' out offset)) {  	int length = str.Length * 2 + 1 + MetadataWriter.GetCompressedIntLength (str.Length * 2 + 1);  	if (nextOffset + length > 0xFFFFFF) {  		throw new FileFormatLimitationExceededException ("No logical space left to create more user strings."' FileFormatLimitationExceededException.META_E_STRINGSPACE_FULL);  	}  	offset = nextOffset;  	nextOffset += length;  	list.Add (str);  	strings.Add (str' offset);  }  
Magic Number,IKVM.Reflection.Writer,UserStringHeap,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\Heaps.cs,Add,The following statement contains a magic number: if (!strings.TryGetValue (str' out offset)) {  	int length = str.Length * 2 + 1 + MetadataWriter.GetCompressedIntLength (str.Length * 2 + 1);  	if (nextOffset + length > 0xFFFFFF) {  		throw new FileFormatLimitationExceededException ("No logical space left to create more user strings."' FileFormatLimitationExceededException.META_E_STRINGSPACE_FULL);  	}  	offset = nextOffset;  	nextOffset += length;  	list.Add (str);  	strings.Add (str' offset);  }  
Magic Number,IKVM.Reflection.Writer,UserStringHeap,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\Heaps.cs,WriteImpl,The following statement contains a magic number: foreach (string str in list) {  	mw.WriteCompressedInt (str.Length * 2 + 1);  	byte hasSpecialChars = 0;  	foreach (char ch in str) {  		mw.Write ((ushort)ch);  		if (hasSpecialChars == 0 && (ch < 0x20 || ch > 0x7E)) {  			if (ch > 0x7E || (ch >= 0x01 && ch <= 0x08) || (ch >= 0x0E && ch <= 0x1F) || ch == 0x27 || ch == 0x2D) {  				hasSpecialChars = 1;  			}  		}  	}  	mw.Write (hasSpecialChars);  }  
Magic Number,IKVM.Reflection.Writer,UserStringHeap,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\Heaps.cs,WriteImpl,The following statement contains a magic number: mw.WriteCompressedInt (str.Length * 2 + 1);  
Magic Number,IKVM.Reflection.Writer,GuidHeap,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\Heaps.cs,GetLength,The following statement contains a magic number: return list.Count * 16;  
Magic Number,IKVM.Reflection.Writer,BlobHeap,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\Heaps.cs,Add,The following statement contains a magic number: while (keys [index].offset != 0) {  	if (keys [index].hash == hash && keys [index].len == bblen && buf.Match (keys [index].offset + lenlen' bb' 0' bblen)) {  		return keys [index].offset;  	}  	if (index == last) {  		if (keys [index].next == null) {  			keys [index].next = new Key[4];  			keys = keys [index].next;  			index = 0;  			break;  		}  		keys = keys [index].next;  		index = -1;  		last = keys.Length - 1;  	}  	index++;  }  
Magic Number,IKVM.Reflection.Writer,BlobHeap,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\Heaps.cs,Add,The following statement contains a magic number: if (index == last) {  	if (keys [index].next == null) {  		keys [index].next = new Key[4];  		keys = keys [index].next;  		index = 0;  		break;  	}  	keys = keys [index].next;  	index = -1;  	last = keys.Length - 1;  }  
Magic Number,IKVM.Reflection.Writer,BlobHeap,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\Heaps.cs,Add,The following statement contains a magic number: if (keys [index].next == null) {  	keys [index].next = new Key[4];  	keys = keys [index].next;  	index = 0;  	break;  }  
Magic Number,IKVM.Reflection.Writer,BlobHeap,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\Heaps.cs,Add,The following statement contains a magic number: keys [index].next = new Key[4];  
Magic Number,IKVM.Reflection.Writer,MetadataWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\MetadataWriter.cs,Write,The following statement contains a magic number: stream.WriteByte ((byte)(value >> 8));  
Magic Number,IKVM.Reflection.Writer,MetadataWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\MetadataWriter.cs,Write,The following statement contains a magic number: buffer [1] = (byte)(value >> 8);  
Magic Number,IKVM.Reflection.Writer,MetadataWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\MetadataWriter.cs,Write,The following statement contains a magic number: buffer [2] = (byte)(value >> 16);  
Magic Number,IKVM.Reflection.Writer,MetadataWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\MetadataWriter.cs,Write,The following statement contains a magic number: buffer [2] = (byte)(value >> 16);  
Magic Number,IKVM.Reflection.Writer,MetadataWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\MetadataWriter.cs,Write,The following statement contains a magic number: buffer [3] = (byte)(value >> 24);  
Magic Number,IKVM.Reflection.Writer,MetadataWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\MetadataWriter.cs,Write,The following statement contains a magic number: buffer [3] = (byte)(value >> 24);  
Magic Number,IKVM.Reflection.Writer,MetadataWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\MetadataWriter.cs,Write,The following statement contains a magic number: stream.Write (buffer' 0' 4);  
Magic Number,IKVM.Reflection.Writer,MetadataWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\MetadataWriter.cs,Write,The following statement contains a magic number: buffer [1] = (byte)(value >> 8);  
Magic Number,IKVM.Reflection.Writer,MetadataWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\MetadataWriter.cs,Write,The following statement contains a magic number: buffer [2] = (byte)(value >> 16);  
Magic Number,IKVM.Reflection.Writer,MetadataWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\MetadataWriter.cs,Write,The following statement contains a magic number: buffer [2] = (byte)(value >> 16);  
Magic Number,IKVM.Reflection.Writer,MetadataWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\MetadataWriter.cs,Write,The following statement contains a magic number: buffer [3] = (byte)(value >> 24);  
Magic Number,IKVM.Reflection.Writer,MetadataWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\MetadataWriter.cs,Write,The following statement contains a magic number: buffer [3] = (byte)(value >> 24);  
Magic Number,IKVM.Reflection.Writer,MetadataWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\MetadataWriter.cs,Write,The following statement contains a magic number: buffer [4] = (byte)(value >> 32);  
Magic Number,IKVM.Reflection.Writer,MetadataWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\MetadataWriter.cs,Write,The following statement contains a magic number: buffer [4] = (byte)(value >> 32);  
Magic Number,IKVM.Reflection.Writer,MetadataWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\MetadataWriter.cs,Write,The following statement contains a magic number: buffer [5] = (byte)(value >> 40);  
Magic Number,IKVM.Reflection.Writer,MetadataWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\MetadataWriter.cs,Write,The following statement contains a magic number: buffer [5] = (byte)(value >> 40);  
Magic Number,IKVM.Reflection.Writer,MetadataWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\MetadataWriter.cs,Write,The following statement contains a magic number: buffer [6] = (byte)(value >> 48);  
Magic Number,IKVM.Reflection.Writer,MetadataWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\MetadataWriter.cs,Write,The following statement contains a magic number: buffer [6] = (byte)(value >> 48);  
Magic Number,IKVM.Reflection.Writer,MetadataWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\MetadataWriter.cs,Write,The following statement contains a magic number: buffer [7] = (byte)(value >> 56);  
Magic Number,IKVM.Reflection.Writer,MetadataWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\MetadataWriter.cs,Write,The following statement contains a magic number: buffer [7] = (byte)(value >> 56);  
Magic Number,IKVM.Reflection.Writer,MetadataWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\MetadataWriter.cs,Write,The following statement contains a magic number: stream.Write (buffer' 0' 8);  
Magic Number,IKVM.Reflection.Writer,MetadataWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\MetadataWriter.cs,WriteCompressedInt,The following statement contains a magic number: if (value <= 0x7F) {  	Write ((byte)value);  } else if (value <= 0x3FFF) {  	Write ((byte)(0x80 | (value >> 8)));  	Write ((byte)value);  } else {  	Write ((byte)(0xC0 | (value >> 24)));  	Write ((byte)(value >> 16));  	Write ((byte)(value >> 8));  	Write ((byte)value);  }  
Magic Number,IKVM.Reflection.Writer,MetadataWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\MetadataWriter.cs,WriteCompressedInt,The following statement contains a magic number: if (value <= 0x7F) {  	Write ((byte)value);  } else if (value <= 0x3FFF) {  	Write ((byte)(0x80 | (value >> 8)));  	Write ((byte)value);  } else {  	Write ((byte)(0xC0 | (value >> 24)));  	Write ((byte)(value >> 16));  	Write ((byte)(value >> 8));  	Write ((byte)value);  }  
Magic Number,IKVM.Reflection.Writer,MetadataWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\MetadataWriter.cs,WriteCompressedInt,The following statement contains a magic number: if (value <= 0x7F) {  	Write ((byte)value);  } else if (value <= 0x3FFF) {  	Write ((byte)(0x80 | (value >> 8)));  	Write ((byte)value);  } else {  	Write ((byte)(0xC0 | (value >> 24)));  	Write ((byte)(value >> 16));  	Write ((byte)(value >> 8));  	Write ((byte)value);  }  
Magic Number,IKVM.Reflection.Writer,MetadataWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\MetadataWriter.cs,WriteCompressedInt,The following statement contains a magic number: if (value <= 0x7F) {  	Write ((byte)value);  } else if (value <= 0x3FFF) {  	Write ((byte)(0x80 | (value >> 8)));  	Write ((byte)value);  } else {  	Write ((byte)(0xC0 | (value >> 24)));  	Write ((byte)(value >> 16));  	Write ((byte)(value >> 8));  	Write ((byte)value);  }  
Magic Number,IKVM.Reflection.Writer,MetadataWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\MetadataWriter.cs,WriteCompressedInt,The following statement contains a magic number: if (value <= 0x3FFF) {  	Write ((byte)(0x80 | (value >> 8)));  	Write ((byte)value);  } else {  	Write ((byte)(0xC0 | (value >> 24)));  	Write ((byte)(value >> 16));  	Write ((byte)(value >> 8));  	Write ((byte)value);  }  
Magic Number,IKVM.Reflection.Writer,MetadataWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\MetadataWriter.cs,WriteCompressedInt,The following statement contains a magic number: if (value <= 0x3FFF) {  	Write ((byte)(0x80 | (value >> 8)));  	Write ((byte)value);  } else {  	Write ((byte)(0xC0 | (value >> 24)));  	Write ((byte)(value >> 16));  	Write ((byte)(value >> 8));  	Write ((byte)value);  }  
Magic Number,IKVM.Reflection.Writer,MetadataWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\MetadataWriter.cs,WriteCompressedInt,The following statement contains a magic number: if (value <= 0x3FFF) {  	Write ((byte)(0x80 | (value >> 8)));  	Write ((byte)value);  } else {  	Write ((byte)(0xC0 | (value >> 24)));  	Write ((byte)(value >> 16));  	Write ((byte)(value >> 8));  	Write ((byte)value);  }  
Magic Number,IKVM.Reflection.Writer,MetadataWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\MetadataWriter.cs,WriteCompressedInt,The following statement contains a magic number: if (value <= 0x3FFF) {  	Write ((byte)(0x80 | (value >> 8)));  	Write ((byte)value);  } else {  	Write ((byte)(0xC0 | (value >> 24)));  	Write ((byte)(value >> 16));  	Write ((byte)(value >> 8));  	Write ((byte)value);  }  
Magic Number,IKVM.Reflection.Writer,MetadataWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\MetadataWriter.cs,WriteCompressedInt,The following statement contains a magic number: Write ((byte)(0x80 | (value >> 8)));  
Magic Number,IKVM.Reflection.Writer,MetadataWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\MetadataWriter.cs,WriteCompressedInt,The following statement contains a magic number: Write ((byte)(0xC0 | (value >> 24)));  
Magic Number,IKVM.Reflection.Writer,MetadataWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\MetadataWriter.cs,WriteCompressedInt,The following statement contains a magic number: Write ((byte)(value >> 16));  
Magic Number,IKVM.Reflection.Writer,MetadataWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\MetadataWriter.cs,WriteCompressedInt,The following statement contains a magic number: Write ((byte)(value >> 8));  
Magic Number,IKVM.Reflection.Writer,MetadataWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\MetadataWriter.cs,GetCompressedIntLength,The following statement contains a magic number: if (value <= 0x7F) {  	return 1;  } else if (value <= 0x3FFF) {  	return 2;  } else {  	return 4;  }  
Magic Number,IKVM.Reflection.Writer,MetadataWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\MetadataWriter.cs,GetCompressedIntLength,The following statement contains a magic number: if (value <= 0x7F) {  	return 1;  } else if (value <= 0x3FFF) {  	return 2;  } else {  	return 4;  }  
Magic Number,IKVM.Reflection.Writer,MetadataWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\MetadataWriter.cs,GetCompressedIntLength,The following statement contains a magic number: if (value <= 0x3FFF) {  	return 2;  } else {  	return 4;  }  
Magic Number,IKVM.Reflection.Writer,MetadataWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\MetadataWriter.cs,GetCompressedIntLength,The following statement contains a magic number: if (value <= 0x3FFF) {  	return 2;  } else {  	return 4;  }  
Magic Number,IKVM.Reflection.Writer,MetadataWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\MetadataWriter.cs,GetCompressedIntLength,The following statement contains a magic number: return 2;  
Magic Number,IKVM.Reflection.Writer,MetadataWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\MetadataWriter.cs,GetCompressedIntLength,The following statement contains a magic number: return 4;  
Magic Number,IKVM.Reflection.Writer,MetadataWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\MetadataWriter.cs,WriteTypeDefOrRef,The following statement contains a magic number: switch (token >> 24) {  case 0:  	break;  case TypeDefTable.Index:  	token = (token & 0xFFFFFF) << 2 | 0;  	break;  case TypeRefTable.Index:  	token = (token & 0xFFFFFF) << 2 | 1;  	break;  case TypeSpecTable.Index:  	token = (token & 0xFFFFFF) << 2 | 2;  	break;  default:  	throw new InvalidOperationException ();  }  
Magic Number,IKVM.Reflection.Writer,MetadataWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\MetadataWriter.cs,WriteTypeDefOrRef,The following statement contains a magic number: switch (token >> 24) {  case 0:  	break;  case TypeDefTable.Index:  	token = (token & 0xFFFFFF) << 2 | 0;  	break;  case TypeRefTable.Index:  	token = (token & 0xFFFFFF) << 2 | 1;  	break;  case TypeSpecTable.Index:  	token = (token & 0xFFFFFF) << 2 | 2;  	break;  default:  	throw new InvalidOperationException ();  }  
Magic Number,IKVM.Reflection.Writer,MetadataWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\MetadataWriter.cs,WriteTypeDefOrRef,The following statement contains a magic number: switch (token >> 24) {  case 0:  	break;  case TypeDefTable.Index:  	token = (token & 0xFFFFFF) << 2 | 0;  	break;  case TypeRefTable.Index:  	token = (token & 0xFFFFFF) << 2 | 1;  	break;  case TypeSpecTable.Index:  	token = (token & 0xFFFFFF) << 2 | 2;  	break;  default:  	throw new InvalidOperationException ();  }  
Magic Number,IKVM.Reflection.Writer,MetadataWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\MetadataWriter.cs,WriteTypeDefOrRef,The following statement contains a magic number: switch (token >> 24) {  case 0:  	break;  case TypeDefTable.Index:  	token = (token & 0xFFFFFF) << 2 | 0;  	break;  case TypeRefTable.Index:  	token = (token & 0xFFFFFF) << 2 | 1;  	break;  case TypeSpecTable.Index:  	token = (token & 0xFFFFFF) << 2 | 2;  	break;  default:  	throw new InvalidOperationException ();  }  
Magic Number,IKVM.Reflection.Writer,MetadataWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\MetadataWriter.cs,WriteTypeDefOrRef,The following statement contains a magic number: switch (token >> 24) {  case 0:  	break;  case TypeDefTable.Index:  	token = (token & 0xFFFFFF) << 2 | 0;  	break;  case TypeRefTable.Index:  	token = (token & 0xFFFFFF) << 2 | 1;  	break;  case TypeSpecTable.Index:  	token = (token & 0xFFFFFF) << 2 | 2;  	break;  default:  	throw new InvalidOperationException ();  }  
Magic Number,IKVM.Reflection.Writer,MetadataWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\MetadataWriter.cs,WriteTypeDefOrRef,The following statement contains a magic number: token = (token & 0xFFFFFF) << 2 | 0;  
Magic Number,IKVM.Reflection.Writer,MetadataWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\MetadataWriter.cs,WriteTypeDefOrRef,The following statement contains a magic number: token = (token & 0xFFFFFF) << 2 | 1;  
Magic Number,IKVM.Reflection.Writer,MetadataWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\MetadataWriter.cs,WriteTypeDefOrRef,The following statement contains a magic number: token = (token & 0xFFFFFF) << 2 | 2;  
Magic Number,IKVM.Reflection.Writer,MetadataWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\MetadataWriter.cs,WriteTypeDefOrRef,The following statement contains a magic number: token = (token & 0xFFFFFF) << 2 | 2;  
Magic Number,IKVM.Reflection.Writer,MetadataWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\MetadataWriter.cs,WriteCustomAttributeType,The following statement contains a magic number: switch (token >> 24) {  case MethodDefTable.Index:  	token = (token & 0xFFFFFF) << 3 | 2;  	break;  case MemberRefTable.Index:  	token = (token & 0xFFFFFF) << 3 | 3;  	break;  default:  	throw new InvalidOperationException ();  }  
Magic Number,IKVM.Reflection.Writer,MetadataWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\MetadataWriter.cs,WriteCustomAttributeType,The following statement contains a magic number: switch (token >> 24) {  case MethodDefTable.Index:  	token = (token & 0xFFFFFF) << 3 | 2;  	break;  case MemberRefTable.Index:  	token = (token & 0xFFFFFF) << 3 | 3;  	break;  default:  	throw new InvalidOperationException ();  }  
Magic Number,IKVM.Reflection.Writer,MetadataWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\MetadataWriter.cs,WriteCustomAttributeType,The following statement contains a magic number: switch (token >> 24) {  case MethodDefTable.Index:  	token = (token & 0xFFFFFF) << 3 | 2;  	break;  case MemberRefTable.Index:  	token = (token & 0xFFFFFF) << 3 | 3;  	break;  default:  	throw new InvalidOperationException ();  }  
Magic Number,IKVM.Reflection.Writer,MetadataWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\MetadataWriter.cs,WriteCustomAttributeType,The following statement contains a magic number: switch (token >> 24) {  case MethodDefTable.Index:  	token = (token & 0xFFFFFF) << 3 | 2;  	break;  case MemberRefTable.Index:  	token = (token & 0xFFFFFF) << 3 | 3;  	break;  default:  	throw new InvalidOperationException ();  }  
Magic Number,IKVM.Reflection.Writer,MetadataWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\MetadataWriter.cs,WriteCustomAttributeType,The following statement contains a magic number: switch (token >> 24) {  case MethodDefTable.Index:  	token = (token & 0xFFFFFF) << 3 | 2;  	break;  case MemberRefTable.Index:  	token = (token & 0xFFFFFF) << 3 | 3;  	break;  default:  	throw new InvalidOperationException ();  }  
Magic Number,IKVM.Reflection.Writer,MetadataWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\MetadataWriter.cs,WriteCustomAttributeType,The following statement contains a magic number: token = (token & 0xFFFFFF) << 3 | 2;  
Magic Number,IKVM.Reflection.Writer,MetadataWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\MetadataWriter.cs,WriteCustomAttributeType,The following statement contains a magic number: token = (token & 0xFFFFFF) << 3 | 2;  
Magic Number,IKVM.Reflection.Writer,MetadataWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\MetadataWriter.cs,WriteCustomAttributeType,The following statement contains a magic number: token = (token & 0xFFFFFF) << 3 | 3;  
Magic Number,IKVM.Reflection.Writer,MetadataWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\MetadataWriter.cs,WriteCustomAttributeType,The following statement contains a magic number: token = (token & 0xFFFFFF) << 3 | 3;  
Magic Number,IKVM.Reflection.Writer,MetadataWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\MetadataWriter.cs,WriteResolutionScope,The following statement contains a magic number: switch (token >> 24) {  case ModuleTable.Index:  	token = (token & 0xFFFFFF) << 2 | 0;  	break;  case ModuleRefTable.Index:  	token = (token & 0xFFFFFF) << 2 | 1;  	break;  case AssemblyRefTable.Index:  	token = (token & 0xFFFFFF) << 2 | 2;  	break;  case TypeRefTable.Index:  	token = (token & 0xFFFFFF) << 2 | 3;  	break;  default:  	throw new InvalidOperationException ();  }  
Magic Number,IKVM.Reflection.Writer,MetadataWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\MetadataWriter.cs,WriteResolutionScope,The following statement contains a magic number: switch (token >> 24) {  case ModuleTable.Index:  	token = (token & 0xFFFFFF) << 2 | 0;  	break;  case ModuleRefTable.Index:  	token = (token & 0xFFFFFF) << 2 | 1;  	break;  case AssemblyRefTable.Index:  	token = (token & 0xFFFFFF) << 2 | 2;  	break;  case TypeRefTable.Index:  	token = (token & 0xFFFFFF) << 2 | 3;  	break;  default:  	throw new InvalidOperationException ();  }  
Magic Number,IKVM.Reflection.Writer,MetadataWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\MetadataWriter.cs,WriteResolutionScope,The following statement contains a magic number: switch (token >> 24) {  case ModuleTable.Index:  	token = (token & 0xFFFFFF) << 2 | 0;  	break;  case ModuleRefTable.Index:  	token = (token & 0xFFFFFF) << 2 | 1;  	break;  case AssemblyRefTable.Index:  	token = (token & 0xFFFFFF) << 2 | 2;  	break;  case TypeRefTable.Index:  	token = (token & 0xFFFFFF) << 2 | 3;  	break;  default:  	throw new InvalidOperationException ();  }  
Magic Number,IKVM.Reflection.Writer,MetadataWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\MetadataWriter.cs,WriteResolutionScope,The following statement contains a magic number: switch (token >> 24) {  case ModuleTable.Index:  	token = (token & 0xFFFFFF) << 2 | 0;  	break;  case ModuleRefTable.Index:  	token = (token & 0xFFFFFF) << 2 | 1;  	break;  case AssemblyRefTable.Index:  	token = (token & 0xFFFFFF) << 2 | 2;  	break;  case TypeRefTable.Index:  	token = (token & 0xFFFFFF) << 2 | 3;  	break;  default:  	throw new InvalidOperationException ();  }  
Magic Number,IKVM.Reflection.Writer,MetadataWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\MetadataWriter.cs,WriteResolutionScope,The following statement contains a magic number: switch (token >> 24) {  case ModuleTable.Index:  	token = (token & 0xFFFFFF) << 2 | 0;  	break;  case ModuleRefTable.Index:  	token = (token & 0xFFFFFF) << 2 | 1;  	break;  case AssemblyRefTable.Index:  	token = (token & 0xFFFFFF) << 2 | 2;  	break;  case TypeRefTable.Index:  	token = (token & 0xFFFFFF) << 2 | 3;  	break;  default:  	throw new InvalidOperationException ();  }  
Magic Number,IKVM.Reflection.Writer,MetadataWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\MetadataWriter.cs,WriteResolutionScope,The following statement contains a magic number: switch (token >> 24) {  case ModuleTable.Index:  	token = (token & 0xFFFFFF) << 2 | 0;  	break;  case ModuleRefTable.Index:  	token = (token & 0xFFFFFF) << 2 | 1;  	break;  case AssemblyRefTable.Index:  	token = (token & 0xFFFFFF) << 2 | 2;  	break;  case TypeRefTable.Index:  	token = (token & 0xFFFFFF) << 2 | 3;  	break;  default:  	throw new InvalidOperationException ();  }  
Magic Number,IKVM.Reflection.Writer,MetadataWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\MetadataWriter.cs,WriteResolutionScope,The following statement contains a magic number: switch (token >> 24) {  case ModuleTable.Index:  	token = (token & 0xFFFFFF) << 2 | 0;  	break;  case ModuleRefTable.Index:  	token = (token & 0xFFFFFF) << 2 | 1;  	break;  case AssemblyRefTable.Index:  	token = (token & 0xFFFFFF) << 2 | 2;  	break;  case TypeRefTable.Index:  	token = (token & 0xFFFFFF) << 2 | 3;  	break;  default:  	throw new InvalidOperationException ();  }  
Magic Number,IKVM.Reflection.Writer,MetadataWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\MetadataWriter.cs,WriteResolutionScope,The following statement contains a magic number: token = (token & 0xFFFFFF) << 2 | 0;  
Magic Number,IKVM.Reflection.Writer,MetadataWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\MetadataWriter.cs,WriteResolutionScope,The following statement contains a magic number: token = (token & 0xFFFFFF) << 2 | 1;  
Magic Number,IKVM.Reflection.Writer,MetadataWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\MetadataWriter.cs,WriteResolutionScope,The following statement contains a magic number: token = (token & 0xFFFFFF) << 2 | 2;  
Magic Number,IKVM.Reflection.Writer,MetadataWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\MetadataWriter.cs,WriteResolutionScope,The following statement contains a magic number: token = (token & 0xFFFFFF) << 2 | 2;  
Magic Number,IKVM.Reflection.Writer,MetadataWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\MetadataWriter.cs,WriteResolutionScope,The following statement contains a magic number: token = (token & 0xFFFFFF) << 2 | 3;  
Magic Number,IKVM.Reflection.Writer,MetadataWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\MetadataWriter.cs,WriteResolutionScope,The following statement contains a magic number: token = (token & 0xFFFFFF) << 2 | 3;  
Magic Number,IKVM.Reflection.Writer,MetadataWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\MetadataWriter.cs,WriteMemberRefParent,The following statement contains a magic number: switch (token >> 24) {  case TypeDefTable.Index:  	token = (token & 0xFFFFFF) << 3 | 0;  	break;  case TypeRefTable.Index:  	token = (token & 0xFFFFFF) << 3 | 1;  	break;  case ModuleRefTable.Index:  	token = (token & 0xFFFFFF) << 3 | 2;  	break;  case MethodDefTable.Index:  	token = (token & 0xFFFFFF) << 3 | 3;  	break;  case TypeSpecTable.Index:  	token = (token & 0xFFFFFF) << 3 | 4;  	break;  default:  	throw new InvalidOperationException ();  }  
Magic Number,IKVM.Reflection.Writer,MetadataWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\MetadataWriter.cs,WriteMemberRefParent,The following statement contains a magic number: switch (token >> 24) {  case TypeDefTable.Index:  	token = (token & 0xFFFFFF) << 3 | 0;  	break;  case TypeRefTable.Index:  	token = (token & 0xFFFFFF) << 3 | 1;  	break;  case ModuleRefTable.Index:  	token = (token & 0xFFFFFF) << 3 | 2;  	break;  case MethodDefTable.Index:  	token = (token & 0xFFFFFF) << 3 | 3;  	break;  case TypeSpecTable.Index:  	token = (token & 0xFFFFFF) << 3 | 4;  	break;  default:  	throw new InvalidOperationException ();  }  
Magic Number,IKVM.Reflection.Writer,MetadataWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\MetadataWriter.cs,WriteMemberRefParent,The following statement contains a magic number: switch (token >> 24) {  case TypeDefTable.Index:  	token = (token & 0xFFFFFF) << 3 | 0;  	break;  case TypeRefTable.Index:  	token = (token & 0xFFFFFF) << 3 | 1;  	break;  case ModuleRefTable.Index:  	token = (token & 0xFFFFFF) << 3 | 2;  	break;  case MethodDefTable.Index:  	token = (token & 0xFFFFFF) << 3 | 3;  	break;  case TypeSpecTable.Index:  	token = (token & 0xFFFFFF) << 3 | 4;  	break;  default:  	throw new InvalidOperationException ();  }  
Magic Number,IKVM.Reflection.Writer,MetadataWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\MetadataWriter.cs,WriteMemberRefParent,The following statement contains a magic number: switch (token >> 24) {  case TypeDefTable.Index:  	token = (token & 0xFFFFFF) << 3 | 0;  	break;  case TypeRefTable.Index:  	token = (token & 0xFFFFFF) << 3 | 1;  	break;  case ModuleRefTable.Index:  	token = (token & 0xFFFFFF) << 3 | 2;  	break;  case MethodDefTable.Index:  	token = (token & 0xFFFFFF) << 3 | 3;  	break;  case TypeSpecTable.Index:  	token = (token & 0xFFFFFF) << 3 | 4;  	break;  default:  	throw new InvalidOperationException ();  }  
Magic Number,IKVM.Reflection.Writer,MetadataWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\MetadataWriter.cs,WriteMemberRefParent,The following statement contains a magic number: switch (token >> 24) {  case TypeDefTable.Index:  	token = (token & 0xFFFFFF) << 3 | 0;  	break;  case TypeRefTable.Index:  	token = (token & 0xFFFFFF) << 3 | 1;  	break;  case ModuleRefTable.Index:  	token = (token & 0xFFFFFF) << 3 | 2;  	break;  case MethodDefTable.Index:  	token = (token & 0xFFFFFF) << 3 | 3;  	break;  case TypeSpecTable.Index:  	token = (token & 0xFFFFFF) << 3 | 4;  	break;  default:  	throw new InvalidOperationException ();  }  
Magic Number,IKVM.Reflection.Writer,MetadataWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\MetadataWriter.cs,WriteMemberRefParent,The following statement contains a magic number: switch (token >> 24) {  case TypeDefTable.Index:  	token = (token & 0xFFFFFF) << 3 | 0;  	break;  case TypeRefTable.Index:  	token = (token & 0xFFFFFF) << 3 | 1;  	break;  case ModuleRefTable.Index:  	token = (token & 0xFFFFFF) << 3 | 2;  	break;  case MethodDefTable.Index:  	token = (token & 0xFFFFFF) << 3 | 3;  	break;  case TypeSpecTable.Index:  	token = (token & 0xFFFFFF) << 3 | 4;  	break;  default:  	throw new InvalidOperationException ();  }  
Magic Number,IKVM.Reflection.Writer,MetadataWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\MetadataWriter.cs,WriteMemberRefParent,The following statement contains a magic number: switch (token >> 24) {  case TypeDefTable.Index:  	token = (token & 0xFFFFFF) << 3 | 0;  	break;  case TypeRefTable.Index:  	token = (token & 0xFFFFFF) << 3 | 1;  	break;  case ModuleRefTable.Index:  	token = (token & 0xFFFFFF) << 3 | 2;  	break;  case MethodDefTable.Index:  	token = (token & 0xFFFFFF) << 3 | 3;  	break;  case TypeSpecTable.Index:  	token = (token & 0xFFFFFF) << 3 | 4;  	break;  default:  	throw new InvalidOperationException ();  }  
Magic Number,IKVM.Reflection.Writer,MetadataWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\MetadataWriter.cs,WriteMemberRefParent,The following statement contains a magic number: switch (token >> 24) {  case TypeDefTable.Index:  	token = (token & 0xFFFFFF) << 3 | 0;  	break;  case TypeRefTable.Index:  	token = (token & 0xFFFFFF) << 3 | 1;  	break;  case ModuleRefTable.Index:  	token = (token & 0xFFFFFF) << 3 | 2;  	break;  case MethodDefTable.Index:  	token = (token & 0xFFFFFF) << 3 | 3;  	break;  case TypeSpecTable.Index:  	token = (token & 0xFFFFFF) << 3 | 4;  	break;  default:  	throw new InvalidOperationException ();  }  
Magic Number,IKVM.Reflection.Writer,MetadataWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\MetadataWriter.cs,WriteMemberRefParent,The following statement contains a magic number: switch (token >> 24) {  case TypeDefTable.Index:  	token = (token & 0xFFFFFF) << 3 | 0;  	break;  case TypeRefTable.Index:  	token = (token & 0xFFFFFF) << 3 | 1;  	break;  case ModuleRefTable.Index:  	token = (token & 0xFFFFFF) << 3 | 2;  	break;  case MethodDefTable.Index:  	token = (token & 0xFFFFFF) << 3 | 3;  	break;  case TypeSpecTable.Index:  	token = (token & 0xFFFFFF) << 3 | 4;  	break;  default:  	throw new InvalidOperationException ();  }  
Magic Number,IKVM.Reflection.Writer,MetadataWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\MetadataWriter.cs,WriteMemberRefParent,The following statement contains a magic number: token = (token & 0xFFFFFF) << 3 | 0;  
Magic Number,IKVM.Reflection.Writer,MetadataWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\MetadataWriter.cs,WriteMemberRefParent,The following statement contains a magic number: token = (token & 0xFFFFFF) << 3 | 1;  
Magic Number,IKVM.Reflection.Writer,MetadataWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\MetadataWriter.cs,WriteMemberRefParent,The following statement contains a magic number: token = (token & 0xFFFFFF) << 3 | 2;  
Magic Number,IKVM.Reflection.Writer,MetadataWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\MetadataWriter.cs,WriteMemberRefParent,The following statement contains a magic number: token = (token & 0xFFFFFF) << 3 | 2;  
Magic Number,IKVM.Reflection.Writer,MetadataWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\MetadataWriter.cs,WriteMemberRefParent,The following statement contains a magic number: token = (token & 0xFFFFFF) << 3 | 3;  
Magic Number,IKVM.Reflection.Writer,MetadataWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\MetadataWriter.cs,WriteMemberRefParent,The following statement contains a magic number: token = (token & 0xFFFFFF) << 3 | 3;  
Magic Number,IKVM.Reflection.Writer,MetadataWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\MetadataWriter.cs,WriteMemberRefParent,The following statement contains a magic number: token = (token & 0xFFFFFF) << 3 | 4;  
Magic Number,IKVM.Reflection.Writer,MetadataWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\MetadataWriter.cs,WriteMemberRefParent,The following statement contains a magic number: token = (token & 0xFFFFFF) << 3 | 4;  
Magic Number,IKVM.Reflection.Writer,MetadataWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\MetadataWriter.cs,WriteMethodDefOrRef,The following statement contains a magic number: switch (token >> 24) {  case MethodDefTable.Index:  	token = (token & 0xFFFFFF) << 1 | 0;  	break;  case MemberRefTable.Index:  	token = (token & 0xFFFFFF) << 1 | 1;  	break;  default:  	throw new InvalidOperationException ();  }  
Magic Number,IKVM.Reflection.Writer,MetadataWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\MetadataWriter.cs,WriteImplementation,The following statement contains a magic number: switch (token >> 24) {  case 0:  	break;  case FileTable.Index:  	token = (token & 0xFFFFFF) << 2 | 0;  	break;  case AssemblyRefTable.Index:  	token = (token & 0xFFFFFF) << 2 | 1;  	break;  case ExportedTypeTable.Index:  	token = (token & 0xFFFFFF) << 2 | 2;  	break;  default:  	throw new InvalidOperationException ();  }  
Magic Number,IKVM.Reflection.Writer,MetadataWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\MetadataWriter.cs,WriteImplementation,The following statement contains a magic number: switch (token >> 24) {  case 0:  	break;  case FileTable.Index:  	token = (token & 0xFFFFFF) << 2 | 0;  	break;  case AssemblyRefTable.Index:  	token = (token & 0xFFFFFF) << 2 | 1;  	break;  case ExportedTypeTable.Index:  	token = (token & 0xFFFFFF) << 2 | 2;  	break;  default:  	throw new InvalidOperationException ();  }  
Magic Number,IKVM.Reflection.Writer,MetadataWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\MetadataWriter.cs,WriteImplementation,The following statement contains a magic number: switch (token >> 24) {  case 0:  	break;  case FileTable.Index:  	token = (token & 0xFFFFFF) << 2 | 0;  	break;  case AssemblyRefTable.Index:  	token = (token & 0xFFFFFF) << 2 | 1;  	break;  case ExportedTypeTable.Index:  	token = (token & 0xFFFFFF) << 2 | 2;  	break;  default:  	throw new InvalidOperationException ();  }  
Magic Number,IKVM.Reflection.Writer,MetadataWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\MetadataWriter.cs,WriteImplementation,The following statement contains a magic number: switch (token >> 24) {  case 0:  	break;  case FileTable.Index:  	token = (token & 0xFFFFFF) << 2 | 0;  	break;  case AssemblyRefTable.Index:  	token = (token & 0xFFFFFF) << 2 | 1;  	break;  case ExportedTypeTable.Index:  	token = (token & 0xFFFFFF) << 2 | 2;  	break;  default:  	throw new InvalidOperationException ();  }  
Magic Number,IKVM.Reflection.Writer,MetadataWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\MetadataWriter.cs,WriteImplementation,The following statement contains a magic number: switch (token >> 24) {  case 0:  	break;  case FileTable.Index:  	token = (token & 0xFFFFFF) << 2 | 0;  	break;  case AssemblyRefTable.Index:  	token = (token & 0xFFFFFF) << 2 | 1;  	break;  case ExportedTypeTable.Index:  	token = (token & 0xFFFFFF) << 2 | 2;  	break;  default:  	throw new InvalidOperationException ();  }  
Magic Number,IKVM.Reflection.Writer,MetadataWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\MetadataWriter.cs,WriteImplementation,The following statement contains a magic number: token = (token & 0xFFFFFF) << 2 | 0;  
Magic Number,IKVM.Reflection.Writer,MetadataWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\MetadataWriter.cs,WriteImplementation,The following statement contains a magic number: token = (token & 0xFFFFFF) << 2 | 1;  
Magic Number,IKVM.Reflection.Writer,MetadataWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\MetadataWriter.cs,WriteImplementation,The following statement contains a magic number: token = (token & 0xFFFFFF) << 2 | 2;  
Magic Number,IKVM.Reflection.Writer,MetadataWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\MetadataWriter.cs,WriteImplementation,The following statement contains a magic number: token = (token & 0xFFFFFF) << 2 | 2;  
Magic Number,IKVM.Reflection.Writer,MetadataWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\MetadataWriter.cs,WriteMemberForwarded,The following statement contains a magic number: switch (token >> 24) {  case FieldTable.Index:  	token = (token & 0xFFFFFF) << 1 | 0;  	break;  case MethodDefTable.Index:  	token = (token & 0xFFFFFF) << 1 | 1;  	break;  default:  	throw new InvalidOperationException ();  }  
Magic Number,IKVM.Reflection.Writer,ModuleWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ModuleWriter.cs,WriteModuleImpl,The following statement contains a magic number: cliHeader.MajorRuntimeVersion = 2;  
Magic Number,IKVM.Reflection.Writer,ModuleWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ModuleWriter.cs,WriteModuleImpl,The following statement contains a magic number: cliHeader.MinorRuntimeVersion = moduleBuilder.MDStreamVersion < 0x20000 ? (ushort)0 : (ushort)5;  
Magic Number,IKVM.Reflection.Writer,ModuleWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ModuleWriter.cs,WriteModuleImpl,The following statement contains a magic number: if (code.ImportAddressTableLength != 0) {  	writer.Headers.OptionalHeader.DataDirectory [12].VirtualAddress = code.ImportAddressTableRVA;  	writer.Headers.OptionalHeader.DataDirectory [12].Size = code.ImportAddressTableLength;  }  
Magic Number,IKVM.Reflection.Writer,ModuleWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ModuleWriter.cs,WriteModuleImpl,The following statement contains a magic number: if (code.ImportAddressTableLength != 0) {  	writer.Headers.OptionalHeader.DataDirectory [12].VirtualAddress = code.ImportAddressTableRVA;  	writer.Headers.OptionalHeader.DataDirectory [12].Size = code.ImportAddressTableLength;  }  
Magic Number,IKVM.Reflection.Writer,ModuleWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ModuleWriter.cs,WriteModuleImpl,The following statement contains a magic number: writer.Headers.OptionalHeader.DataDirectory [12].VirtualAddress = code.ImportAddressTableRVA;  
Magic Number,IKVM.Reflection.Writer,ModuleWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ModuleWriter.cs,WriteModuleImpl,The following statement contains a magic number: writer.Headers.OptionalHeader.DataDirectory [12].Size = code.ImportAddressTableLength;  
Magic Number,IKVM.Reflection.Writer,ModuleWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ModuleWriter.cs,WriteModuleImpl,The following statement contains a magic number: writer.Headers.OptionalHeader.DataDirectory [14].VirtualAddress = code.ComDescriptorRVA;  
Magic Number,IKVM.Reflection.Writer,ModuleWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ModuleWriter.cs,WriteModuleImpl,The following statement contains a magic number: writer.Headers.OptionalHeader.DataDirectory [14].Size = code.ComDescriptorLength;  
Magic Number,IKVM.Reflection.Writer,ModuleWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ModuleWriter.cs,WriteModuleImpl,The following statement contains a magic number: if (code.DebugDirectoryLength != 0) {  	writer.Headers.OptionalHeader.DataDirectory [6].VirtualAddress = code.DebugDirectoryRVA;  	writer.Headers.OptionalHeader.DataDirectory [6].Size = code.DebugDirectoryLength;  }  
Magic Number,IKVM.Reflection.Writer,ModuleWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ModuleWriter.cs,WriteModuleImpl,The following statement contains a magic number: if (code.DebugDirectoryLength != 0) {  	writer.Headers.OptionalHeader.DataDirectory [6].VirtualAddress = code.DebugDirectoryRVA;  	writer.Headers.OptionalHeader.DataDirectory [6].Size = code.DebugDirectoryLength;  }  
Magic Number,IKVM.Reflection.Writer,ModuleWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ModuleWriter.cs,WriteModuleImpl,The following statement contains a magic number: writer.Headers.OptionalHeader.DataDirectory [6].VirtualAddress = code.DebugDirectoryRVA;  
Magic Number,IKVM.Reflection.Writer,ModuleWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ModuleWriter.cs,WriteModuleImpl,The following statement contains a magic number: writer.Headers.OptionalHeader.DataDirectory [6].Size = code.DebugDirectoryLength;  
Magic Number,IKVM.Reflection.Writer,ModuleWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ModuleWriter.cs,WriteModuleImpl,The following statement contains a magic number: if (rsrc.SizeOfRawData != 0) {  	// Resource Directory  	writer.Headers.OptionalHeader.DataDirectory [2].VirtualAddress = rsrc.VirtualAddress;  	writer.Headers.OptionalHeader.DataDirectory [2].Size = rsrc.VirtualSize;  }  
Magic Number,IKVM.Reflection.Writer,ModuleWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ModuleWriter.cs,WriteModuleImpl,The following statement contains a magic number: if (rsrc.SizeOfRawData != 0) {  	// Resource Directory  	writer.Headers.OptionalHeader.DataDirectory [2].VirtualAddress = rsrc.VirtualAddress;  	writer.Headers.OptionalHeader.DataDirectory [2].Size = rsrc.VirtualSize;  }  
Magic Number,IKVM.Reflection.Writer,ModuleWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ModuleWriter.cs,WriteModuleImpl,The following statement contains a magic number: writer.Headers.OptionalHeader.DataDirectory [2].VirtualAddress = rsrc.VirtualAddress;  
Magic Number,IKVM.Reflection.Writer,ModuleWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ModuleWriter.cs,WriteModuleImpl,The following statement contains a magic number: writer.Headers.OptionalHeader.DataDirectory [2].Size = rsrc.VirtualSize;  
Magic Number,IKVM.Reflection.Writer,ModuleWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ModuleWriter.cs,WriteModuleImpl,The following statement contains a magic number: if (imageFileMachine != ImageFileMachine.ARM) {  	reloc.VirtualSize = ((uint)moduleBuilder.unmanagedExports.Count + 1) * 12;  }  
Magic Number,IKVM.Reflection.Writer,ModuleWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ModuleWriter.cs,WriteModuleImpl,The following statement contains a magic number: reloc.VirtualSize = ((uint)moduleBuilder.unmanagedExports.Count + 1) * 12;  
Magic Number,IKVM.Reflection.Writer,ModuleWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ModuleWriter.cs,WriteModuleImpl,The following statement contains a magic number: if (reloc.SizeOfRawData != 0) {  	// Base Relocation Directory  	writer.Headers.OptionalHeader.DataDirectory [5].VirtualAddress = reloc.VirtualAddress;  	writer.Headers.OptionalHeader.DataDirectory [5].Size = reloc.VirtualSize;  }  
Magic Number,IKVM.Reflection.Writer,ModuleWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ModuleWriter.cs,WriteModuleImpl,The following statement contains a magic number: if (reloc.SizeOfRawData != 0) {  	// Base Relocation Directory  	writer.Headers.OptionalHeader.DataDirectory [5].VirtualAddress = reloc.VirtualAddress;  	writer.Headers.OptionalHeader.DataDirectory [5].Size = reloc.VirtualSize;  }  
Magic Number,IKVM.Reflection.Writer,ModuleWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ModuleWriter.cs,WriteModuleImpl,The following statement contains a magic number: writer.Headers.OptionalHeader.DataDirectory [5].VirtualAddress = reloc.VirtualAddress;  
Magic Number,IKVM.Reflection.Writer,ModuleWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ModuleWriter.cs,WriteModuleImpl,The following statement contains a magic number: writer.Headers.OptionalHeader.DataDirectory [5].Size = reloc.VirtualSize;  
Magic Number,IKVM.Reflection.Writer,ModuleWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ModuleWriter.cs,ComputeStrongNameSignatureLength,The following statement contains a magic number: if (publicKey == null) {  	return 0;  } else if (publicKey.Length == 16) {  	// it must be the ECMA pseudo public key' we don't know the key size of the real key' but currently both Mono and Microsoft use a 1024 bit key size  	return 128;  } else {  	// for the supported strong naming algorithms' the signature size is the same as the key size  	// (we have to subtract 32 for the header)  	return publicKey.Length - 32;  }  
Magic Number,IKVM.Reflection.Writer,ModuleWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ModuleWriter.cs,ComputeStrongNameSignatureLength,The following statement contains a magic number: if (publicKey == null) {  	return 0;  } else if (publicKey.Length == 16) {  	// it must be the ECMA pseudo public key' we don't know the key size of the real key' but currently both Mono and Microsoft use a 1024 bit key size  	return 128;  } else {  	// for the supported strong naming algorithms' the signature size is the same as the key size  	// (we have to subtract 32 for the header)  	return publicKey.Length - 32;  }  
Magic Number,IKVM.Reflection.Writer,ModuleWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ModuleWriter.cs,ComputeStrongNameSignatureLength,The following statement contains a magic number: if (publicKey == null) {  	return 0;  } else if (publicKey.Length == 16) {  	// it must be the ECMA pseudo public key' we don't know the key size of the real key' but currently both Mono and Microsoft use a 1024 bit key size  	return 128;  } else {  	// for the supported strong naming algorithms' the signature size is the same as the key size  	// (we have to subtract 32 for the header)  	return publicKey.Length - 32;  }  
Magic Number,IKVM.Reflection.Writer,ModuleWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ModuleWriter.cs,ComputeStrongNameSignatureLength,The following statement contains a magic number: if (publicKey.Length == 16) {  	// it must be the ECMA pseudo public key' we don't know the key size of the real key' but currently both Mono and Microsoft use a 1024 bit key size  	return 128;  } else {  	// for the supported strong naming algorithms' the signature size is the same as the key size  	// (we have to subtract 32 for the header)  	return publicKey.Length - 32;  }  
Magic Number,IKVM.Reflection.Writer,ModuleWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ModuleWriter.cs,ComputeStrongNameSignatureLength,The following statement contains a magic number: if (publicKey.Length == 16) {  	// it must be the ECMA pseudo public key' we don't know the key size of the real key' but currently both Mono and Microsoft use a 1024 bit key size  	return 128;  } else {  	// for the supported strong naming algorithms' the signature size is the same as the key size  	// (we have to subtract 32 for the header)  	return publicKey.Length - 32;  }  
Magic Number,IKVM.Reflection.Writer,ModuleWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ModuleWriter.cs,ComputeStrongNameSignatureLength,The following statement contains a magic number: if (publicKey.Length == 16) {  	// it must be the ECMA pseudo public key' we don't know the key size of the real key' but currently both Mono and Microsoft use a 1024 bit key size  	return 128;  } else {  	// for the supported strong naming algorithms' the signature size is the same as the key size  	// (we have to subtract 32 for the header)  	return publicKey.Length - 32;  }  
Magic Number,IKVM.Reflection.Writer,ModuleWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ModuleWriter.cs,ComputeStrongNameSignatureLength,The following statement contains a magic number: return 128;  
Magic Number,IKVM.Reflection.Writer,ModuleWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ModuleWriter.cs,ComputeStrongNameSignatureLength,The following statement contains a magic number: return publicKey.Length - 32;  
Magic Number,IKVM.Reflection.Writer,ModuleWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ModuleWriter.cs,StrongName,The following statement contains a magic number: using (CryptoStream cs = new CryptoStream (Stream.Null' hash' CryptoStreamMode.Write)) {  	stream.Seek (0' SeekOrigin.Begin);  	byte[] buf = new byte[8192];  	HashChunk (stream' cs' buf' (int)headerLength);  	stream.Seek (textSectionFileOffset' SeekOrigin.Begin);  	HashChunk (stream' cs' buf' (int)(strongNameSignatureFileOffset - textSectionFileOffset));  	stream.Seek (strongNameSignatureLength' SeekOrigin.Current);  	HashChunk (stream' cs' buf' (int)(stream.Length - (strongNameSignatureFileOffset + strongNameSignatureLength)));  }  
Magic Number,IKVM.Reflection.Writer,ModuleWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ModuleWriter.cs,StrongName,The following statement contains a magic number: for (int i = 0; i < count; i++) {  	sum += br.ReadUInt32 ();  	int carry = (int)(sum >> 32);  	sum &= 0xFFFFFFFFU;  	sum += carry;  }  
Magic Number,IKVM.Reflection.Writer,ModuleWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ModuleWriter.cs,StrongName,The following statement contains a magic number: while ((sum >> 16) != 0) {  	sum = (sum & 0xFFFF) + (sum >> 16);  }  
Magic Number,IKVM.Reflection.Writer,ModuleWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ModuleWriter.cs,StrongName,The following statement contains a magic number: while ((sum >> 16) != 0) {  	sum = (sum & 0xFFFF) + (sum >> 16);  }  
Magic Number,IKVM.Reflection.Writer,ModuleWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ModuleWriter.cs,StrongName,The following statement contains a magic number: sum = (sum & 0xFFFF) + (sum >> 16);  
Magic Number,IKVM.Reflection.Writer,ResourceSection,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ResourceSection.cs,AddIcon,The following statement contains a magic number: for (int i = 0; i < idCount; i++) {  	byte bWidth = br.ReadByte ();  	byte bHeight = br.ReadByte ();  	byte bColorCount = br.ReadByte ();  	byte bReserved = br.ReadByte ();  	ushort wPlanes = br.ReadUInt16 ();  	ushort wBitCount = br.ReadUInt16 ();  	uint dwBytesInRes = br.ReadUInt32 ();  	uint dwImageOffset = br.ReadUInt32 ();  	// we start the icon IDs at 2  	ushort id = (ushort)(2 + i);  	group.Write (bWidth);  	group.Write (bHeight);  	group.Write (bColorCount);  	group.Write (bReserved);  	group.Write (wPlanes);  	group.Write (wBitCount);  	group.Write (dwBytesInRes);  	group.Write (id);  	byte[] icon = new byte[dwBytesInRes];  	Buffer.BlockCopy (iconFile' (int)dwImageOffset' icon' 0' icon.Length);  	root [new OrdinalOrName (RT_ICON)] [new OrdinalOrName (id)] [new OrdinalOrName (0)].Data = ByteBuffer.Wrap (icon);  }  
Magic Number,IKVM.Reflection.Writer,ResourceSection,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ResourceSection.cs,AddIcon,The following statement contains a magic number: root [new OrdinalOrName (RT_GROUP_ICON)] [new OrdinalOrName (32512)] [new OrdinalOrName (0)].Data = group;  
Magic Number,IKVM.Reflection.Writer,ResourceSection,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ResourceSection.cs,ExtractResources,The following statement contains a magic number: while (br.Length >= 32) {  	br.Align (4);  	RESOURCEHEADER hdr = new RESOURCEHEADER (br);  	if (hdr.DataSize != 0) {  		root [hdr.TYPE] [hdr.NAME] [new OrdinalOrName (hdr.LanguageId)].Data = ByteBuffer.Wrap (br.ReadBytes (hdr.DataSize));  	}  }  
Magic Number,IKVM.Reflection.Writer,ResourceSection,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ResourceSection.cs,ExtractResources,The following statement contains a magic number: while (br.Length >= 32) {  	br.Align (4);  	RESOURCEHEADER hdr = new RESOURCEHEADER (br);  	if (hdr.DataSize != 0) {  		root [hdr.TYPE] [hdr.NAME] [new OrdinalOrName (hdr.LanguageId)].Data = ByteBuffer.Wrap (br.ReadBytes (hdr.DataSize));  	}  }  
Magic Number,IKVM.Reflection.Writer,ResourceSection,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ResourceSection.cs,ExtractResources,The following statement contains a magic number: br.Align (4);  
Magic Number,IKVM.Reflection.Writer,ResourceSection,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ResourceSection.cs,Finish,The following statement contains a magic number: bb = new ByteBuffer (1024);  
Magic Number,IKVM.Reflection.Writer,ResourceDirectoryEntry,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ResourceSection.cs,Write,The following statement contains a magic number: if (entries.Count != 0) {  	int stringTableOffset = this.DirectoryLength;  	Dictionary<string' int> strings = new Dictionary<string' int> ();  	ByteBuffer stringTable = new ByteBuffer (16);  	int offset = 16 + entries.Count * 8;  	for (int pass = 0; pass < 3; pass++) {  		Write (bb' pass' 0' ref offset' strings' ref stringTableOffset' stringTable);  	}  	// the pecoff spec says that the string table is between the directory entries and the data entries'  	// but the windows linker puts them after the data entries' so we do too.  	stringTable.Align (4);  	offset += stringTable.Length;  	WriteResourceDataEntries (bb' linkOffsets' ref offset);  	bb.Write (stringTable);  	WriteData (bb);  }  
Magic Number,IKVM.Reflection.Writer,ResourceDirectoryEntry,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ResourceSection.cs,Write,The following statement contains a magic number: if (entries.Count != 0) {  	int stringTableOffset = this.DirectoryLength;  	Dictionary<string' int> strings = new Dictionary<string' int> ();  	ByteBuffer stringTable = new ByteBuffer (16);  	int offset = 16 + entries.Count * 8;  	for (int pass = 0; pass < 3; pass++) {  		Write (bb' pass' 0' ref offset' strings' ref stringTableOffset' stringTable);  	}  	// the pecoff spec says that the string table is between the directory entries and the data entries'  	// but the windows linker puts them after the data entries' so we do too.  	stringTable.Align (4);  	offset += stringTable.Length;  	WriteResourceDataEntries (bb' linkOffsets' ref offset);  	bb.Write (stringTable);  	WriteData (bb);  }  
Magic Number,IKVM.Reflection.Writer,ResourceDirectoryEntry,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ResourceSection.cs,Write,The following statement contains a magic number: if (entries.Count != 0) {  	int stringTableOffset = this.DirectoryLength;  	Dictionary<string' int> strings = new Dictionary<string' int> ();  	ByteBuffer stringTable = new ByteBuffer (16);  	int offset = 16 + entries.Count * 8;  	for (int pass = 0; pass < 3; pass++) {  		Write (bb' pass' 0' ref offset' strings' ref stringTableOffset' stringTable);  	}  	// the pecoff spec says that the string table is between the directory entries and the data entries'  	// but the windows linker puts them after the data entries' so we do too.  	stringTable.Align (4);  	offset += stringTable.Length;  	WriteResourceDataEntries (bb' linkOffsets' ref offset);  	bb.Write (stringTable);  	WriteData (bb);  }  
Magic Number,IKVM.Reflection.Writer,ResourceDirectoryEntry,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ResourceSection.cs,Write,The following statement contains a magic number: if (entries.Count != 0) {  	int stringTableOffset = this.DirectoryLength;  	Dictionary<string' int> strings = new Dictionary<string' int> ();  	ByteBuffer stringTable = new ByteBuffer (16);  	int offset = 16 + entries.Count * 8;  	for (int pass = 0; pass < 3; pass++) {  		Write (bb' pass' 0' ref offset' strings' ref stringTableOffset' stringTable);  	}  	// the pecoff spec says that the string table is between the directory entries and the data entries'  	// but the windows linker puts them after the data entries' so we do too.  	stringTable.Align (4);  	offset += stringTable.Length;  	WriteResourceDataEntries (bb' linkOffsets' ref offset);  	bb.Write (stringTable);  	WriteData (bb);  }  
Magic Number,IKVM.Reflection.Writer,ResourceDirectoryEntry,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ResourceSection.cs,Write,The following statement contains a magic number: if (entries.Count != 0) {  	int stringTableOffset = this.DirectoryLength;  	Dictionary<string' int> strings = new Dictionary<string' int> ();  	ByteBuffer stringTable = new ByteBuffer (16);  	int offset = 16 + entries.Count * 8;  	for (int pass = 0; pass < 3; pass++) {  		Write (bb' pass' 0' ref offset' strings' ref stringTableOffset' stringTable);  	}  	// the pecoff spec says that the string table is between the directory entries and the data entries'  	// but the windows linker puts them after the data entries' so we do too.  	stringTable.Align (4);  	offset += stringTable.Length;  	WriteResourceDataEntries (bb' linkOffsets' ref offset);  	bb.Write (stringTable);  	WriteData (bb);  }  
Magic Number,IKVM.Reflection.Writer,ResourceDirectoryEntry,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ResourceSection.cs,Write,The following statement contains a magic number: for (int pass = 0; pass < 3; pass++) {  	Write (bb' pass' 0' ref offset' strings' ref stringTableOffset' stringTable);  }  
Magic Number,IKVM.Reflection.Writer,ResourceDirectoryEntry,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ResourceSection.cs,Write,The following statement contains a magic number: stringTable.Align (4);  
Magic Number,IKVM.Reflection.Writer,ResourceDirectoryEntry,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ResourceSection.cs,WriteResourceDataEntries,The following statement contains a magic number: foreach (ResourceDirectoryEntry entry in entries) {  	if (entry.Data != null) {  		linkOffsets.Add (bb.Position);  		bb.Write (offset);  		bb.Write (entry.Data.Length);  		bb.Write (0);  		// code page  		bb.Write (0);  		// reserved  		offset += (entry.Data.Length + 3) & ~3;  	} else {  		entry.WriteResourceDataEntries (bb' linkOffsets' ref offset);  	}  }  
Magic Number,IKVM.Reflection.Writer,ResourceDirectoryEntry,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ResourceSection.cs,WriteResourceDataEntries,The following statement contains a magic number: foreach (ResourceDirectoryEntry entry in entries) {  	if (entry.Data != null) {  		linkOffsets.Add (bb.Position);  		bb.Write (offset);  		bb.Write (entry.Data.Length);  		bb.Write (0);  		// code page  		bb.Write (0);  		// reserved  		offset += (entry.Data.Length + 3) & ~3;  	} else {  		entry.WriteResourceDataEntries (bb' linkOffsets' ref offset);  	}  }  
Magic Number,IKVM.Reflection.Writer,ResourceDirectoryEntry,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ResourceSection.cs,WriteResourceDataEntries,The following statement contains a magic number: if (entry.Data != null) {  	linkOffsets.Add (bb.Position);  	bb.Write (offset);  	bb.Write (entry.Data.Length);  	bb.Write (0);  	// code page  	bb.Write (0);  	// reserved  	offset += (entry.Data.Length + 3) & ~3;  } else {  	entry.WriteResourceDataEntries (bb' linkOffsets' ref offset);  }  
Magic Number,IKVM.Reflection.Writer,ResourceDirectoryEntry,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ResourceSection.cs,WriteResourceDataEntries,The following statement contains a magic number: if (entry.Data != null) {  	linkOffsets.Add (bb.Position);  	bb.Write (offset);  	bb.Write (entry.Data.Length);  	bb.Write (0);  	// code page  	bb.Write (0);  	// reserved  	offset += (entry.Data.Length + 3) & ~3;  } else {  	entry.WriteResourceDataEntries (bb' linkOffsets' ref offset);  }  
Magic Number,IKVM.Reflection.Writer,ResourceDirectoryEntry,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ResourceSection.cs,WriteResourceDataEntries,The following statement contains a magic number: offset += (entry.Data.Length + 3) & ~3;  
Magic Number,IKVM.Reflection.Writer,ResourceDirectoryEntry,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ResourceSection.cs,WriteResourceDataEntries,The following statement contains a magic number: offset += (entry.Data.Length + 3) & ~3;  
Magic Number,IKVM.Reflection.Writer,ResourceDirectoryEntry,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ResourceSection.cs,WriteData,The following statement contains a magic number: foreach (ResourceDirectoryEntry entry in entries) {  	if (entry.Data != null) {  		bb.Write (entry.Data);  		bb.Align (4);  	} else {  		entry.WriteData (bb);  	}  }  
Magic Number,IKVM.Reflection.Writer,ResourceDirectoryEntry,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ResourceSection.cs,WriteData,The following statement contains a magic number: if (entry.Data != null) {  	bb.Write (entry.Data);  	bb.Align (4);  } else {  	entry.WriteData (bb);  }  
Magic Number,IKVM.Reflection.Writer,ResourceDirectoryEntry,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ResourceSection.cs,WriteData,The following statement contains a magic number: bb.Align (4);  
Magic Number,IKVM.Reflection.Writer,ResourceDirectoryEntry,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ResourceSection.cs,WriteEntry,The following statement contains a magic number: offset += 16 + entries.Count * 8;  
Magic Number,IKVM.Reflection.Writer,ResourceDirectoryEntry,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ResourceSection.cs,WriteEntry,The following statement contains a magic number: offset += 16 + entries.Count * 8;  
Magic Number,IKVM.Reflection.Writer,ResourceDirectoryEntry,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ResourceSection.cs,WriteNameOrOrdinal,The following statement contains a magic number: if (id.Name == null) {  	bb.Write ((int)id.Ordinal);  } else {  	int stringOffset;  	if (!strings.TryGetValue (id.Name' out stringOffset)) {  		stringOffset = stringTableOffset;  		strings.Add (id.Name' stringOffset);  		stringTableOffset += id.Name.Length * 2 + 2;  		stringTable.Write ((ushort)id.Name.Length);  		foreach (char c in id.Name) {  			stringTable.Write ((short)c);  		}  	}  	bb.Write (0x80000000U | (uint)stringOffset);  }  
Magic Number,IKVM.Reflection.Writer,ResourceDirectoryEntry,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ResourceSection.cs,WriteNameOrOrdinal,The following statement contains a magic number: if (id.Name == null) {  	bb.Write ((int)id.Ordinal);  } else {  	int stringOffset;  	if (!strings.TryGetValue (id.Name' out stringOffset)) {  		stringOffset = stringTableOffset;  		strings.Add (id.Name' stringOffset);  		stringTableOffset += id.Name.Length * 2 + 2;  		stringTable.Write ((ushort)id.Name.Length);  		foreach (char c in id.Name) {  			stringTable.Write ((short)c);  		}  	}  	bb.Write (0x80000000U | (uint)stringOffset);  }  
Magic Number,IKVM.Reflection.Writer,ResourceDirectoryEntry,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ResourceSection.cs,WriteNameOrOrdinal,The following statement contains a magic number: if (!strings.TryGetValue (id.Name' out stringOffset)) {  	stringOffset = stringTableOffset;  	strings.Add (id.Name' stringOffset);  	stringTableOffset += id.Name.Length * 2 + 2;  	stringTable.Write ((ushort)id.Name.Length);  	foreach (char c in id.Name) {  		stringTable.Write ((short)c);  	}  }  
Magic Number,IKVM.Reflection.Writer,ResourceDirectoryEntry,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ResourceSection.cs,WriteNameOrOrdinal,The following statement contains a magic number: if (!strings.TryGetValue (id.Name' out stringOffset)) {  	stringOffset = stringTableOffset;  	strings.Add (id.Name' stringOffset);  	stringTableOffset += id.Name.Length * 2 + 2;  	stringTable.Write ((ushort)id.Name.Length);  	foreach (char c in id.Name) {  		stringTable.Write ((short)c);  	}  }  
Magic Number,IKVM.Reflection.Writer,ResourceDirectoryEntry,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ResourceSection.cs,WriteNameOrOrdinal,The following statement contains a magic number: stringTableOffset += id.Name.Length * 2 + 2;  
Magic Number,IKVM.Reflection.Writer,ResourceDirectoryEntry,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ResourceSection.cs,WriteNameOrOrdinal,The following statement contains a magic number: stringTableOffset += id.Name.Length * 2 + 2;  
Magic Number,IKVM.Reflection.Writer,RESOURCEHEADER,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\ResourceSection.cs,RESOURCEHEADER,The following statement contains a magic number: br.Align (4);  
Magic Number,IKVM.Reflection.Writer,TextSection,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\TextSection.cs,WriteImportDirectory,The following statement contains a magic number: mw.Write (ImportDirectoryRVA + 40);  
Magic Number,IKVM.Reflection.Writer,TextSection,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\TextSection.cs,WriteImportDirectory,The following statement contains a magic number: mw.Write (ImportHintNameTableRVA + 14);  
Magic Number,IKVM.Reflection.Writer,TextSection,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\TextSection.cs,WriteImportDirectory,The following statement contains a magic number: mw.Write (new byte[20]);  
Magic Number,IKVM.Reflection.Writer,TextSection,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\TextSection.cs,WriteImportDirectory,The following statement contains a magic number: if (peWriter.Headers.FileHeader.Machine != IMAGE_FILE_HEADER.IMAGE_FILE_MACHINE_I386) {  	size += 4;  	mw.Write (0);  }  
Magic Number,IKVM.Reflection.Writer,TextSection,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\TextSection.cs,WriteImportDirectory,The following statement contains a magic number: size += 4;  
Magic Number,IKVM.Reflection.Writer,TextSection,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\TextSection.cs,WriteRelocations,The following statement contains a magic number: switch (peWriter.Headers.FileHeader.Machine) {  case IMAGE_FILE_HEADER.IMAGE_FILE_MACHINE_I386:  case IMAGE_FILE_HEADER.IMAGE_FILE_MACHINE_AMD64:  	relocAddress += 2;  	break;  case IMAGE_FILE_HEADER.IMAGE_FILE_MACHINE_IA64:  	relocAddress += 0x20;  	break;  }  
Magic Number,IKVM.Reflection.Writer,TextSection,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\TextSection.cs,WriteRelocations,The following statement contains a magic number: relocAddress += 2;  
Magic Number,IKVM.Reflection.Writer,TextSection,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\TextSection.cs,WriteRelocationBlock,The following statement contains a magic number: switch (peWriter.Headers.FileHeader.Machine) {  case IMAGE_FILE_HEADER.IMAGE_FILE_MACHINE_I386:  	mw.Write (0x3000 + relocAddress - pageRVA);  	// Type / Offset  	break;  case IMAGE_FILE_HEADER.IMAGE_FILE_MACHINE_AMD64:  	mw.Write (0xA000 + relocAddress - pageRVA);  	// Type / Offset  	break;  case IMAGE_FILE_HEADER.IMAGE_FILE_MACHINE_IA64:  	// on IA64 the StartupStubRVA is 16 byte aligned' so these two addresses won't cross a page boundary  	mw.Write ((short)(0xA000 + relocAddress - pageRVA));  	// Type / Offset  	mw.Write ((short)(0xA000 + relocAddress - pageRVA + 8));  	// Type / Offset  	break;  }  
Magic Number,IKVM.Reflection.Writer,TextSection,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\TextSection.cs,WriteRelocationBlock,The following statement contains a magic number: mw.Write ((short)(0xA000 + relocAddress - pageRVA + 8));  
Magic Number,IKVM.Reflection.Writer,VersionInfo,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\VersionInfo.cs,Write,The following statement contains a magic number: stringTable.Align (4);  
Magic Number,IKVM.Reflection.Writer,VersionInfo,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\VersionInfo.cs,Write,The following statement contains a magic number: stringFileInfo.Align (4);  
Magic Number,IKVM.Reflection.Writer,VersionInfo,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\VersionInfo.cs,Write,The following statement contains a magic number: bb.Write ((short)(2 + preamble1.Length + 8 + 8 + preamble2.Length + 4 + stringFileInfo.Length));  
Magic Number,IKVM.Reflection.Writer,VersionInfo,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\VersionInfo.cs,Write,The following statement contains a magic number: bb.Write ((short)(2 + preamble1.Length + 8 + 8 + preamble2.Length + 4 + stringFileInfo.Length));  
Magic Number,IKVM.Reflection.Writer,VersionInfo,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\VersionInfo.cs,Write,The following statement contains a magic number: bb.Write ((short)(2 + preamble1.Length + 8 + 8 + preamble2.Length + 4 + stringFileInfo.Length));  
Magic Number,IKVM.Reflection.Writer,VersionInfo,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\VersionInfo.cs,Write,The following statement contains a magic number: bb.Write ((short)(2 + preamble1.Length + 8 + 8 + preamble2.Length + 4 + stringFileInfo.Length));  
Magic Number,IKVM.Reflection.Writer,VersionInfo,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\VersionInfo.cs,WriteString,The following statement contains a magic number: bb.Align (4);  
Magic Number,IKVM.Reflection.Writer,VersionInfo,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\VersionInfo.cs,WriteString,The following statement contains a magic number: bb.Align (4);  
Magic Number,IKVM.Reflection.Writer,VersionInfo,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\VersionInfo.cs,ParseVersionPart,The following statement contains a magic number: while (pos < str.Length) {  	char c = str [pos];  	if (c == '.') {  		pos++;  		break;  	} else if (c >= '0' && c <= '9') {  		value *= 10;  		value += (ushort)(c - '0');  		pos++;  	} else {  		break;  	}  }  
Magic Number,IKVM.Reflection.Writer,VersionInfo,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\VersionInfo.cs,ParseVersionPart,The following statement contains a magic number: if (c == '.') {  	pos++;  	break;  } else if (c >= '0' && c <= '9') {  	value *= 10;  	value += (ushort)(c - '0');  	pos++;  } else {  	break;  }  
Magic Number,IKVM.Reflection.Writer,VersionInfo,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\VersionInfo.cs,ParseVersionPart,The following statement contains a magic number: if (c >= '0' && c <= '9') {  	value *= 10;  	value += (ushort)(c - '0');  	pos++;  } else {  	break;  }  
Magic Number,IKVM.Reflection.Writer,VersionInfo,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\VersionInfo.cs,ParseVersionPart,The following statement contains a magic number: value *= 10;  
Duplicate Code,IKVM.Reflection.Writer,PEWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\PEWriter.cs,WriteMSDOSHeader,The method contains a code clone-set at the following line numbers (starting from the method definition): ((28' 47)' (29' 48)' (30' 49)' (31' 50)' (32' 51)' (33' 52)' (34' 53)' (35' 54)' (36' 55)' (37' 56)' (38' 57)' (39' 58)' (40' 59)' (41' 60)' (42' 61)' (43' 62))
Duplicate Code,IKVM.Reflection.Writer,PEWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\PEWriter.cs,WriteMSDOSHeader,The method contains a code clone-set at the following line numbers (starting from the method definition): ((28' 61)' (29' 62))
Duplicate Code,IKVM.Reflection.Writer,PEWriter,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\PEWriter.cs,WriteMSDOSHeader,The method contains a code clone-set at the following line numbers (starting from the method definition): ((28' 47)' (30' 49)' (31' 50)' (32' 51)' (33' 52)' (34' 53)' (35' 54)' (36' 55)' (37' 56)' (38' 57)' (39' 58)' (40' 59)' (41' 60)' (42' 61)' (43' 62))
Missing Default,IKVM.Reflection,AssemblyName,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\AssemblyName.cs,AssemblyName,The following switch statement is missing a default case: switch (Fusion.ParseAssemblyName (assemblyName' out parsed)) {  case ParseAssemblyResult.GenericError:  	throw new FileLoadException ();  case ParseAssemblyResult.DuplicateKey:  	throw new System.Runtime.InteropServices.COMException ();  }  
Missing Default,IKVM.Reflection,DefaultBinder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Binder.cs,SelectBestMatch,The following switch statement is missing a default case: switch (MatchSignatures (mb1.MethodSignature' mb2.MethodSignature' types)) {  case 1:  	return mb1;  case 2:  	return mb2;  }  
Missing Default,IKVM.Reflection,Fusion,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Fusion.cs,IsFrameworkAssembly,The following switch statement is missing a default case: switch (name.Name) {  case "System":  case "System.Core":  case "System.Data":  case "System.Data.DataSetExtensions":  case "System.Data.Linq":  case "System.Data.OracleClient":  case "System.Data.Services":  case "System.Data.Services.Client":  case "System.IdentityModel":  case "System.IdentityModel.Selectors":  case "System.Runtime.Remoting":  case "System.Runtime.Serialization":  case "System.ServiceModel":  case "System.Transactions":  case "System.Windows.Forms":  case "System.Xml":  case "System.Xml.Linq":  	return name.PublicKeyToken == "b77a5c561934e089";  case "System.Configuration":  case "System.Configuration.Install":  case "System.Design":  case "System.DirectoryServices":  case "System.Drawing":  case "System.Drawing.Design":  case "System.EnterpriseServices":  case "System.Management":  case "System.Messaging":  case "System.Runtime.Serialization.Formatters.Soap":  case "System.Security":  case "System.ServiceProcess":  case "System.Web":  case "System.Web.Mobile":  case "System.Web.Services":  	return name.PublicKeyToken == "b03f5f7f11d50a3a";  case "System.ComponentModel.DataAnnotations":  case "System.ServiceModel.Web":  case "System.Web.Abstractions":  case "System.Web.Extensions":  case "System.Web.Extensions.Design":  case "System.Web.DynamicData":  case "System.Web.Routing":  	return name.PublicKeyToken == "31bf3856ad364e35";  }  
Missing Default,IKVM.Reflection.Emit,ILGenerator,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\ILGenerator.cs,Emit,The following switch statement is missing a default case: switch (opc.OperandType) {  case OperandType.InlineVar:  	code.Write ((ushort)local.LocalIndex);  	break;  case OperandType.ShortInlineVar:  	code.Write ((byte)local.LocalIndex);  	break;  }  
Missing Default,IKVM.Reflection.Emit,MethodBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\MethodBuilder.cs,SetDllImportPseudoCustomAttribute,The following switch statement is missing a default case: switch (nativeCallConv.Value) {  case System.Runtime.InteropServices.CallingConvention.Cdecl:  	flags |= CallConvCdecl;  	break;  case System.Runtime.InteropServices.CallingConvention.FastCall:  	flags |= CallConvFastcall;  	break;  case System.Runtime.InteropServices.CallingConvention.StdCall:  	flags |= CallConvStdcall;  	break;  case System.Runtime.InteropServices.CallingConvention.ThisCall:  	flags |= CallConvThiscall;  	break;  case System.Runtime.InteropServices.CallingConvention.Winapi:  	flags |= CallConvWinapi;  	break;  }  
Missing Default,IKVM.Reflection.Emit,MethodBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\MethodBuilder.cs,SetDllImportPseudoCustomAttribute,The following switch statement is missing a default case: switch (nativeCharSet.Value) {  case CharSet.Ansi:  case CharSet.None:  	flags |= CharSetAnsi;  	break;  case CharSet.Auto:  	flags |= CharSetAuto;  	break;  case CharSet.Unicode:  	flags |= CharSetUnicode;  	break;  }  
Missing Default,IKVM.Reflection.Emit,OpCodes,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\OpCodes.cs,GetName,The following switch statement is missing a default case: switch (value) {  case 0:  	return "nop";  case 1:  	return "break";  case 2:  	return "ldarg.0";  case 3:  	return "ldarg.1";  case 4:  	return "ldarg.2";  case 5:  	return "ldarg.3";  case 6:  	return "ldloc.0";  case 7:  	return "ldloc.1";  case 8:  	return "ldloc.2";  case 9:  	return "ldloc.3";  case 10:  	return "stloc.0";  case 11:  	return "stloc.1";  case 12:  	return "stloc.2";  case 13:  	return "stloc.3";  case 14:  	return "ldarg.s";  case 15:  	return "ldarga.s";  case 16:  	return "starg.s";  case 17:  	return "ldloc.s";  case 18:  	return "ldloca.s";  case 19:  	return "stloc.s";  case 20:  	return "ldnull";  case 21:  	return "ldc.i4.m1";  case 22:  	return "ldc.i4.0";  case 23:  	return "ldc.i4.1";  case 24:  	return "ldc.i4.2";  case 25:  	return "ldc.i4.3";  case 26:  	return "ldc.i4.4";  case 27:  	return "ldc.i4.5";  case 28:  	return "ldc.i4.6";  case 29:  	return "ldc.i4.7";  case 30:  	return "ldc.i4.8";  case 31:  	return "ldc.i4.s";  case 32:  	return "ldc.i4";  case 33:  	return "ldc.i8";  case 34:  	return "ldc.r4";  case 35:  	return "ldc.r8";  case 37:  	return "dup";  case 38:  	return "pop";  case 39:  	return "jmp";  case 40:  	return "call";  case 41:  	return "calli";  case 42:  	return "ret";  case 43:  	return "br.s";  case 44:  	return "brfalse.s";  case 45:  	return "brtrue.s";  case 46:  	return "beq.s";  case 47:  	return "bge.s";  case 48:  	return "bgt.s";  case 49:  	return "ble.s";  case 50:  	return "blt.s";  case 51:  	return "bne.un.s";  case 52:  	return "bge.un.s";  case 53:  	return "bgt.un.s";  case 54:  	return "ble.un.s";  case 55:  	return "blt.un.s";  case 56:  	return "br";  case 57:  	return "brfalse";  case 58:  	return "brtrue";  case 59:  	return "beq";  case 60:  	return "bge";  case 61:  	return "bgt";  case 62:  	return "ble";  case 63:  	return "blt";  case 64:  	return "bne.un";  case 65:  	return "bge.un";  case 66:  	return "bgt.un";  case 67:  	return "ble.un";  case 68:  	return "blt.un";  case 69:  	return "switch";  case 70:  	return "ldind.i1";  case 71:  	return "ldind.u1";  case 72:  	return "ldind.i2";  case 73:  	return "ldind.u2";  case 74:  	return "ldind.i4";  case 75:  	return "ldind.u4";  case 76:  	return "ldind.i8";  case 77:  	return "ldind.i";  case 78:  	return "ldind.r4";  case 79:  	return "ldind.r8";  case 80:  	return "ldind.ref";  case 81:  	return "stind.ref";  case 82:  	return "stind.i1";  case 83:  	return "stind.i2";  case 84:  	return "stind.i4";  case 85:  	return "stind.i8";  case 86:  	return "stind.r4";  case 87:  	return "stind.r8";  case 88:  	return "add";  case 89:  	return "sub";  case 90:  	return "mul";  case 91:  	return "div";  case 92:  	return "div.un";  case 93:  	return "rem";  case 94:  	return "rem.un";  case 95:  	return "and";  case 96:  	return "or";  case 97:  	return "xor";  case 98:  	return "shl";  case 99:  	return "shr";  case 100:  	return "shr.un";  case 101:  	return "neg";  case 102:  	return "not";  case 103:  	return "conv.i1";  case 104:  	return "conv.i2";  case 105:  	return "conv.i4";  case 106:  	return "conv.i8";  case 107:  	return "conv.r4";  case 108:  	return "conv.r8";  case 109:  	return "conv.u4";  case 110:  	return "conv.u8";  case 111:  	return "callvirt";  case 112:  	return "cpobj";  case 113:  	return "ldobj";  case 114:  	return "ldstr";  case 115:  	return "newobj";  case 116:  	return "castclass";  case 117:  	return "isinst";  case 118:  	return "conv.r.un";  case 121:  	return "unbox";  case 122:  	return "throw";  case 123:  	return "ldfld";  case 124:  	return "ldflda";  case 125:  	return "stfld";  case 126:  	return "ldsfld";  case 127:  	return "ldsflda";  case 128:  	return "stsfld";  case 129:  	return "stobj";  case 130:  	return "conv.ovf.i1.un";  case 131:  	return "conv.ovf.i2.un";  case 132:  	return "conv.ovf.i4.un";  case 133:  	return "conv.ovf.i8.un";  case 134:  	return "conv.ovf.u1.un";  case 135:  	return "conv.ovf.u2.un";  case 136:  	return "conv.ovf.u4.un";  case 137:  	return "conv.ovf.u8.un";  case 138:  	return "conv.ovf.i.un";  case 139:  	return "conv.ovf.u.un";  case 140:  	return "box";  case 141:  	return "newarr";  case 142:  	return "ldlen";  case 143:  	return "ldelema";  case 144:  	return "ldelem.i1";  case 145:  	return "ldelem.u1";  case 146:  	return "ldelem.i2";  case 147:  	return "ldelem.u2";  case 148:  	return "ldelem.i4";  case 149:  	return "ldelem.u4";  case 150:  	return "ldelem.i8";  case 151:  	return "ldelem.i";  case 152:  	return "ldelem.r4";  case 153:  	return "ldelem.r8";  case 154:  	return "ldelem.ref";  case 155:  	return "stelem.i";  case 156:  	return "stelem.i1";  case 157:  	return "stelem.i2";  case 158:  	return "stelem.i4";  case 159:  	return "stelem.i8";  case 160:  	return "stelem.r4";  case 161:  	return "stelem.r8";  case 162:  	return "stelem.ref";  case 163:  	return "ldelem";  case 164:  	return "stelem";  case 165:  	return "unbox.any";  case 179:  	return "conv.ovf.i1";  case 180:  	return "conv.ovf.u1";  case 181:  	return "conv.ovf.i2";  case 182:  	return "conv.ovf.u2";  case 183:  	return "conv.ovf.i4";  case 184:  	return "conv.ovf.u4";  case 185:  	return "conv.ovf.i8";  case 186:  	return "conv.ovf.u8";  case 194:  	return "refanyval";  case 195:  	return "ckfinite";  case 198:  	return "mkrefany";  case 208:  	return "ldtoken";  case 209:  	return "conv.u2";  case 210:  	return "conv.u1";  case 211:  	return "conv.i";  case 212:  	return "conv.ovf.i";  case 213:  	return "conv.ovf.u";  case 214:  	return "add.ovf";  case 215:  	return "add.ovf.un";  case 216:  	return "mul.ovf";  case 217:  	return "mul.ovf.un";  case 218:  	return "sub.ovf";  case 219:  	return "sub.ovf.un";  case 220:  	return "endfinally";  case 221:  	return "leave";  case 222:  	return "leave.s";  case 223:  	return "stind.i";  case 224:  	return "conv.u";  case 248:  	return "prefix7";  case 249:  	return "prefix6";  case 250:  	return "prefix5";  case 251:  	return "prefix4";  case 252:  	return "prefix3";  case 253:  	return "prefix2";  case 254:  	return "prefix1";  case 255:  	return "prefixref";  case -512:  	return "arglist";  case -511:  	return "ceq";  case -510:  	return "cgt";  case -509:  	return "cgt.un";  case -508:  	return "clt";  case -507:  	return "clt.un";  case -506:  	return "ldftn";  case -505:  	return "ldvirtftn";  case -503:  	return "ldarg";  case -502:  	return "ldarga";  case -501:  	return "starg";  case -500:  	return "ldloc";  case -499:  	return "ldloca";  case -498:  	return "stloc";  case -497:  	return "localloc";  case -495:  	return "endfilter";  case -494:  	return "unaligned.";  case -493:  	return "volatile.";  case -492:  	return "tail.";  case -491:  	return "initobj";  case -490:  	return "constrained.";  case -489:  	return "cpblk";  case -488:  	return "initblk";  case -486:  	return "rethrow";  case -484:  	return "sizeof";  case -483:  	return "refanytype";  case -482:  	return "readonly.";  }  
Missing Default,IKVM.Reflection.Emit,TypeBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\TypeBuilder.cs,SetStructLayoutPseudoCustomAttribute,The following switch statement is missing a default case: switch (attr.Value) {  case LayoutKind.Auto:  	attribs |= TypeAttributes.AutoLayout;  	break;  case LayoutKind.Explicit:  	attribs |= TypeAttributes.ExplicitLayout;  	break;  case LayoutKind.Sequential:  	attribs |= TypeAttributes.SequentialLayout;  	break;  }  
Missing Default,IKVM.Reflection.Emit,TypeBuilder,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Emit\TypeBuilder.cs,SetStructLayoutPseudoCustomAttribute,The following switch statement is missing a default case: switch (attr.CharSet) {  case CharSet.None:  case CharSet.Ansi:  	attribs |= TypeAttributes.AnsiClass;  	break;  case CharSet.Auto:  	attribs |= TypeAttributes.AutoClass;  	break;  case CharSet.Unicode:  	attribs |= TypeAttributes.UnicodeClass;  	break;  }  
Missing Default,IKVM.Reflection.Writer,TextSection,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\TextSection.cs,WriteRelocations,The following switch statement is missing a default case: switch (peWriter.Headers.FileHeader.Machine) {  case IMAGE_FILE_HEADER.IMAGE_FILE_MACHINE_I386:  case IMAGE_FILE_HEADER.IMAGE_FILE_MACHINE_AMD64:  	relocAddress += 2;  	break;  case IMAGE_FILE_HEADER.IMAGE_FILE_MACHINE_IA64:  	relocAddress += 0x20;  	break;  }  
Missing Default,IKVM.Reflection.Writer,TextSection,F:\newReposMay17\CoEST_TraceLab\Main\external\ikvm\src\reflect\Writer\TextSection.cs,WriteRelocationBlock,The following switch statement is missing a default case: switch (peWriter.Headers.FileHeader.Machine) {  case IMAGE_FILE_HEADER.IMAGE_FILE_MACHINE_I386:  	mw.Write (0x3000 + relocAddress - pageRVA);  	// Type / Offset  	break;  case IMAGE_FILE_HEADER.IMAGE_FILE_MACHINE_AMD64:  	mw.Write (0xA000 + relocAddress - pageRVA);  	// Type / Offset  	break;  case IMAGE_FILE_HEADER.IMAGE_FILE_MACHINE_IA64:  	// on IA64 the StartupStubRVA is 16 byte aligned' so these two addresses won't cross a page boundary  	mw.Write ((short)(0xA000 + relocAddress - pageRVA));  	// Type / Offset  	mw.Write ((short)(0xA000 + relocAddress - pageRVA + 8));  	// Type / Offset  	break;  }  
