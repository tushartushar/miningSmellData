Implementation smell,Namespace,Class,File,Method,Description
Complex Method,TraceLabSDK.Types.Contests,TLExperimentResults,F:\newReposMay17\CoEST_TraceLab\Main\TraceLab\TraceLabSDK.Types\Contests\TLExperimentResults.cs,ReadXml,Cyclomatic complexity of the method is 8
Long Parameter List,TraceLabSDK.Types.Contests,BoxPlotPoint,F:\newReposMay17\CoEST_TraceLab\Main\TraceLab\TraceLabSDK.Types\Contests\BoxPlotPoint.cs,BoxPlotPoint,The method has 8 parameters.
Long Identifier,TraceLabSDK.Types,TLDictionaryIndex,F:\newReposMay17\CoEST_TraceLab\Main\TraceLab\TraceLabSDK.Types\dictionary\TLDictionaryIndex.cs,AddTermEntry,The length of the parameter numberOfArtifactsContainingTerm is 31.
Long Identifier,TraceLabSDK.Types,TLDictionaryIndex,F:\newReposMay17\CoEST_TraceLab\Main\TraceLab\TraceLabSDK.Types\dictionary\TLDictionaryIndex.cs,AddTermEntry,The length of the parameter totalFrequencyAcrossAllArtifacts is 32.
Long Identifier,TraceLabSDK.Types,TLTermEntry,F:\newReposMay17\CoEST_TraceLab\Main\TraceLab\TraceLabSDK.Types\dictionary\TLTermEntry.cs,TLTermEntry,The length of the parameter numberOfArtifactsContainingTerm is 31.
Long Identifier,TraceLabSDK.Types,TLTermEntry,F:\newReposMay17\CoEST_TraceLab\Main\TraceLab\TraceLabSDK.Types\dictionary\TLTermEntry.cs,TLTermEntry,The length of the parameter totalFrequencyAcrossAllArtifacts is 32.
Long Statement,TraceLabSDK.Types.Contests,BoxPlotPoint,F:\newReposMay17\CoEST_TraceLab\Main\TraceLab\TraceLabSDK.Types\Contests\BoxPlotPoint.cs,Equals,The length of the statement  "	return (Min == p.Min && Q1 == p.Q1 && Median == p.Median && Mean == p.Mean && Q3 == p.Q3 && Max == p.Max && StdDev == p.StdDev && N == p.N); " is 140.
Long Statement,TraceLabSDK.Types.Contests,BoxPlotPoint,F:\newReposMay17\CoEST_TraceLab\Main\TraceLab\TraceLabSDK.Types\Contests\BoxPlotPoint.cs,GetHashCode,The length of the statement  "	return Min.GetHashCode () ^ Q1.GetHashCode () ^ Median.GetHashCode () ^ Mean.GetHashCode () ^ Q3.GetHashCode () ^ Max.GetHashCode () ^ StdDev.GetHashCode () ^ N.GetHashCode (); " is 176.
Long Statement,TraceLabSDK.Types.Contests,TLDataset,F:\newReposMay17\CoEST_TraceLab\Main\TraceLab\TraceLabSDK.Types\Contests\TLDataset.cs,ReadData,The length of the statement  "		throw new InvalidOperationException ("Binary reader did not read correct data version. Data corrupted. Potentially IRawSerializable not implemented correctly"); " is 160.
Long Statement,TraceLabSDK.Types.Contests,TLDatasetsList,F:\newReposMay17\CoEST_TraceLab\Main\TraceLab\TraceLabSDK.Types\Contests\TLDatasetsList.cs,ReadData,The length of the statement  "		throw new InvalidOperationException ("Binary reader did not read correct data version. Data corrupted. Potentially IRawSerializable not implemented correctly"); " is 160.
Long Statement,TraceLabSDK.Types.Contests,TLExperimentsResultsCollection,F:\newReposMay17\CoEST_TraceLab\Main\TraceLab\TraceLabSDK.Types\Contests\TLExperimentsResultsCollection.cs,ReadData,The length of the statement  "		throw new InvalidOperationException ("Binary reader did not read correct data version. Data corrupted. Potentially IRawSerializable not implemented correctly"); " is 160.
Long Statement,TraceLabSDK.Types.Contests,TLSimilarityMatricesCollection,F:\newReposMay17\CoEST_TraceLab\Main\TraceLab\TraceLabSDK.Types\Contests\TLSimilarityMatricesCollection.cs,ReadData,The length of the statement  "		throw new InvalidOperationException ("Binary reader did not read correct data version. Data corrupted. Potentially IRawSerializable not implemented correctly"); " is 160.
Long Statement,TraceLabSDK.Types.Contests,DatasetResults,F:\newReposMay17\CoEST_TraceLab\Main\TraceLab\TraceLabSDK.Types\Contests\DatasetResults.cs,AddMetric,The length of the statement  "		throw new ArgumentException ("The only accepted metric s_metricTypes are either LineSeries or BoxSummaryData currently. "); " is 123.
Long Statement,TraceLabSDK.Types.Contests,DatasetResults,F:\newReposMay17\CoEST_TraceLab\Main\TraceLab\TraceLabSDK.Types\Contests\DatasetResults.cs,ReadData,The length of the statement  "		throw new InvalidOperationException ("Binary reader did not read correct data version. Data corrupted. Potentially IRawSerializable not implemented correctly"); " is 160.
Long Statement,TraceLabSDK.Types.Contests,TLExperimentResults,F:\newReposMay17\CoEST_TraceLab\Main\TraceLab\TraceLabSDK.Types\Contests\TLExperimentResults.cs,ReadXml,The length of the statement  "	var datasetsResultSerializer = TraceLab.Core.Serialization.XmlSerializerFactory.GetSerializer (typeof(DatasetResults)' null); " is 125.
Long Statement,TraceLabSDK.Types.Contests,TLExperimentResults,F:\newReposMay17\CoEST_TraceLab\Main\TraceLab\TraceLabSDK.Types\Contests\TLExperimentResults.cs,WriteXml,The length of the statement  "	var datasetsResultSerializer = TraceLab.Core.Serialization.XmlSerializerFactory.GetSerializer (typeof(DatasetResults)' null); " is 125.
Long Statement,TraceLabSDK.Types.Contests,TLExperimentResults,F:\newReposMay17\CoEST_TraceLab\Main\TraceLab\TraceLabSDK.Types\Contests\TLExperimentResults.cs,ReadData,The length of the statement  "		throw new InvalidOperationException ("Binary reader did not read correct data version. Data corrupted. Potentially IRawSerializable not implemented correctly"); " is 160.
Long Statement,TraceLabSDK.Types,PostingsCollection,F:\newReposMay17\CoEST_TraceLab\Main\TraceLab\TraceLabSDK.Types\dictionary\PostingsCollection.cs,ReadData,The length of the statement  "		throw new InvalidOperationException ("Binary reader did not correct version data. Data corrupted. Potentially IRawSerializable not implemented correctly"); " is 155.
Long Statement,TraceLabSDK.Types,TermEntryCollection,F:\newReposMay17\CoEST_TraceLab\Main\TraceLab\TraceLabSDK.Types\dictionary\TermEntryCollection.cs,ReadData,The length of the statement  "		throw new InvalidOperationException ("Binary reader did not correct version data. Data corrupted. Potentially IRawSerializable not implemented correctly"); " is 155.
Long Statement,TraceLabSDK.Types,TLDictionaryIndex,F:\newReposMay17\CoEST_TraceLab\Main\TraceLab\TraceLabSDK.Types\dictionary\TLDictionaryIndex.cs,AddTermEntry,The length of the statement  "	TLTermEntry termEntry = new TLTermEntry (term' numberOfArtifactsContainingTerm' totalFrequencyAcrossAllArtifacts' weight); " is 122.
Long Statement,TraceLabSDK.Types,TLDictionaryIndex,F:\newReposMay17\CoEST_TraceLab\Main\TraceLab\TraceLabSDK.Types\dictionary\TLDictionaryIndex.cs,ReadData,The length of the statement  "		throw new InvalidOperationException ("Binary reader did not correct version data. Data corrupted. Potentially IRawSerializable not implemented correctly"); " is 155.
Long Statement,TraceLabSDK.Types,TLPosting,F:\newReposMay17\CoEST_TraceLab\Main\TraceLab\TraceLabSDK.Types\dictionary\TLPosting.cs,ReadData,The length of the statement  "		throw new InvalidOperationException ("Binary reader did not correct version data. Data corrupted. Potentially IRawSerializable not implemented correctly"); " is 155.
Long Statement,TraceLabSDK.Types,TLTermEntry,F:\newReposMay17\CoEST_TraceLab\Main\TraceLab\TraceLabSDK.Types\dictionary\TLTermEntry.cs,ReadData,The length of the statement  "		throw new InvalidOperationException ("Binary reader did not correct version data. Data corrupted. Potentially IRawSerializable not implemented correctly"); " is 155.
Long Statement,TraceLabSDK.Types,TLArtifact,F:\newReposMay17\CoEST_TraceLab\Main\TraceLab\TraceLabSDK.Types\TLArtifact.cs,ReadData,The length of the statement  "		throw new InvalidOperationException ("Binary reader did not correct version data. Data corrupted. Potentially IRawSerializable not implemented correctly"); " is 155.
Long Statement,TraceLabSDK.Types,TLArtifactsCollection,F:\newReposMay17\CoEST_TraceLab\Main\TraceLab\TraceLabSDK.Types\TLArtifactsCollection.cs,ReadData,The length of the statement  "		throw new InvalidOperationException ("Binary reader did not correct version data. Data corrupted. Potentially IRawSerializable not implemented correctly"); " is 155.
Long Statement,TraceLabSDK.Types,TLLinksList,F:\newReposMay17\CoEST_TraceLab\Main\TraceLab\TraceLabSDK.Types\TLLinksList.cs,ReadData,The length of the statement  "		throw new InvalidOperationException ("Binary reader did not read correct data version. Data corrupted. Potentially IRawSerializable not implemented correctly"); " is 160.
Long Statement,TraceLabSDK.Types,TLKeyValuePairsList,F:\newReposMay17\CoEST_TraceLab\Main\TraceLab\TraceLabSDK.Types\TLKeyValuePairsList.cs,ReadData,The length of the statement  "		throw new InvalidOperationException ("Binary reader did not correct version data. Data corrupted. Potentially IRawSerializable not implemented correctly"); " is 155.
Long Statement,TraceLabSDK.Types,TLSimilarityMatrix,F:\newReposMay17\CoEST_TraceLab\Main\TraceLab\TraceLabSDK.Types\TLSimilarityMatrix.cs,AddLink,The length of the statement  "			throw new ArgumentException (String.Format ("Link for source artifact {0} and target artifact {1} has already been added to the spare matrix"' sourceArtifactId' targetArtifactId)); " is 180.
Long Statement,TraceLabSDK.Types,TLSimilarityMatrix,F:\newReposMay17\CoEST_TraceLab\Main\TraceLab\TraceLabSDK.Types\TLSimilarityMatrix.cs,ReadData,The length of the statement  "		throw new InvalidOperationException ("Binary reader did not correct version data. Data corrupted. Potentially IRawSerializable not implemented correctly"); " is 155.
Long Statement,TraceLabSDK.Types,TLSingleLink,F:\newReposMay17\CoEST_TraceLab\Main\TraceLab\TraceLabSDK.Types\TLSingleLink.cs,Equals,The length of the statement  "		return ((SourceArtifactId.Equals (other.SourceArtifactId) && TargetArtifactId.Equals (other.TargetArtifactId)) && Score.Equals (other.Score)); " is 142.
Long Statement,TraceLabSDK.Types,TLStopwords,F:\newReposMay17\CoEST_TraceLab\Main\TraceLab\TraceLabSDK.Types\TLStopwords.cs,ReadData,The length of the statement  "		throw new InvalidOperationException ("Binary reader did not correct version data. Data corrupted. Potentially IRawSerializable not implemented correctly"); " is 155.
Long Statement,TraceLabSDK.Types.Generics.Collections,StringDoubleDictionary,F:\newReposMay17\CoEST_TraceLab\Main\TraceLab\TraceLabSDK.Types\Generics.Collections\StringCollection.cs,ReadData,The length of the statement  "		throw new InvalidOperationException ("Binary reader did not correct version data. Data corrupted. Potentially IRawSerializable not implemented correctly"); " is 155.
Long Statement,TraceLabSDK.Types.Generics.Collections,StringHashSet,F:\newReposMay17\CoEST_TraceLab\Main\TraceLab\TraceLabSDK.Types\Generics.Collections\StringHashSet.cs,ReadData,The length of the statement  "		throw new InvalidOperationException ("Binary reader did not correct version data. Data corrupted. Potentially IRawSerializable not implemented correctly"); " is 155.
Magic Number,TraceLabSDK.Types.Contests,BoxPlotPoint,F:\newReposMay17\CoEST_TraceLab\Main\TraceLab\TraceLabSDK.Types\Contests\BoxPlotPoint.cs,BoxPlotPoint,The following statement contains a magic number: if (N == 0) {  	Min = 0;  	Q1 = 0;  	Median = 0;  	Mean = 0;  	Q3 = 0;  	Max = 0;  	StdDev = 0;  } else if (N == 1) {  	Min = dataPoints [0];  	Q1 = dataPoints [0];  	Median = dataPoints [0];  	Mean = dataPoints [0];  	Q3 = dataPoints [0];  	Max = dataPoints [0];  	StdDev = 0;  } else {  	int numElements = dataPoints.Count<double> ();  	//set Min  	Min = dataPoints.Min ();  	//set Median  	if ((numElements % 2) == 0) {  		//double median = Math.Round((dataPoints[((numElements - 1) / 2)] + dataPoints[(numElements + 1) / 2]) / 2' 2);  		double median = (dataPoints [((numElements - 1) / 2)] + dataPoints [(numElements + 1) / 2]) / 2;  		Median = median;  	} else {  		double median = dataPoints [(numElements / 2)];  		Median = median;  	}  	double checkMedian = percentile (dataPoints' 50);  	//set Max  	Max = dataPoints.Max ();  	//Mean  	Mean = dataPoints.Sum () / numElements;  	//Standard deviation  	double someSum = 0;  	foreach (double x in dataPoints) {  		someSum += Math.Pow ((Mean - x)' 2);  	}  	double stdevValue = Math.Sqrt (someSum / numElements);  	StdDev = stdevValue;  	//Q1  	Q1 = percentile (dataPoints' 25);  	//Q3  	Q3 = percentile (dataPoints' 75);  }  
Magic Number,TraceLabSDK.Types.Contests,BoxPlotPoint,F:\newReposMay17\CoEST_TraceLab\Main\TraceLab\TraceLabSDK.Types\Contests\BoxPlotPoint.cs,BoxPlotPoint,The following statement contains a magic number: if (N == 0) {  	Min = 0;  	Q1 = 0;  	Median = 0;  	Mean = 0;  	Q3 = 0;  	Max = 0;  	StdDev = 0;  } else if (N == 1) {  	Min = dataPoints [0];  	Q1 = dataPoints [0];  	Median = dataPoints [0];  	Mean = dataPoints [0];  	Q3 = dataPoints [0];  	Max = dataPoints [0];  	StdDev = 0;  } else {  	int numElements = dataPoints.Count<double> ();  	//set Min  	Min = dataPoints.Min ();  	//set Median  	if ((numElements % 2) == 0) {  		//double median = Math.Round((dataPoints[((numElements - 1) / 2)] + dataPoints[(numElements + 1) / 2]) / 2' 2);  		double median = (dataPoints [((numElements - 1) / 2)] + dataPoints [(numElements + 1) / 2]) / 2;  		Median = median;  	} else {  		double median = dataPoints [(numElements / 2)];  		Median = median;  	}  	double checkMedian = percentile (dataPoints' 50);  	//set Max  	Max = dataPoints.Max ();  	//Mean  	Mean = dataPoints.Sum () / numElements;  	//Standard deviation  	double someSum = 0;  	foreach (double x in dataPoints) {  		someSum += Math.Pow ((Mean - x)' 2);  	}  	double stdevValue = Math.Sqrt (someSum / numElements);  	StdDev = stdevValue;  	//Q1  	Q1 = percentile (dataPoints' 25);  	//Q3  	Q3 = percentile (dataPoints' 75);  }  
Magic Number,TraceLabSDK.Types.Contests,BoxPlotPoint,F:\newReposMay17\CoEST_TraceLab\Main\TraceLab\TraceLabSDK.Types\Contests\BoxPlotPoint.cs,BoxPlotPoint,The following statement contains a magic number: if (N == 0) {  	Min = 0;  	Q1 = 0;  	Median = 0;  	Mean = 0;  	Q3 = 0;  	Max = 0;  	StdDev = 0;  } else if (N == 1) {  	Min = dataPoints [0];  	Q1 = dataPoints [0];  	Median = dataPoints [0];  	Mean = dataPoints [0];  	Q3 = dataPoints [0];  	Max = dataPoints [0];  	StdDev = 0;  } else {  	int numElements = dataPoints.Count<double> ();  	//set Min  	Min = dataPoints.Min ();  	//set Median  	if ((numElements % 2) == 0) {  		//double median = Math.Round((dataPoints[((numElements - 1) / 2)] + dataPoints[(numElements + 1) / 2]) / 2' 2);  		double median = (dataPoints [((numElements - 1) / 2)] + dataPoints [(numElements + 1) / 2]) / 2;  		Median = median;  	} else {  		double median = dataPoints [(numElements / 2)];  		Median = median;  	}  	double checkMedian = percentile (dataPoints' 50);  	//set Max  	Max = dataPoints.Max ();  	//Mean  	Mean = dataPoints.Sum () / numElements;  	//Standard deviation  	double someSum = 0;  	foreach (double x in dataPoints) {  		someSum += Math.Pow ((Mean - x)' 2);  	}  	double stdevValue = Math.Sqrt (someSum / numElements);  	StdDev = stdevValue;  	//Q1  	Q1 = percentile (dataPoints' 25);  	//Q3  	Q3 = percentile (dataPoints' 75);  }  
Magic Number,TraceLabSDK.Types.Contests,BoxPlotPoint,F:\newReposMay17\CoEST_TraceLab\Main\TraceLab\TraceLabSDK.Types\Contests\BoxPlotPoint.cs,BoxPlotPoint,The following statement contains a magic number: if (N == 0) {  	Min = 0;  	Q1 = 0;  	Median = 0;  	Mean = 0;  	Q3 = 0;  	Max = 0;  	StdDev = 0;  } else if (N == 1) {  	Min = dataPoints [0];  	Q1 = dataPoints [0];  	Median = dataPoints [0];  	Mean = dataPoints [0];  	Q3 = dataPoints [0];  	Max = dataPoints [0];  	StdDev = 0;  } else {  	int numElements = dataPoints.Count<double> ();  	//set Min  	Min = dataPoints.Min ();  	//set Median  	if ((numElements % 2) == 0) {  		//double median = Math.Round((dataPoints[((numElements - 1) / 2)] + dataPoints[(numElements + 1) / 2]) / 2' 2);  		double median = (dataPoints [((numElements - 1) / 2)] + dataPoints [(numElements + 1) / 2]) / 2;  		Median = median;  	} else {  		double median = dataPoints [(numElements / 2)];  		Median = median;  	}  	double checkMedian = percentile (dataPoints' 50);  	//set Max  	Max = dataPoints.Max ();  	//Mean  	Mean = dataPoints.Sum () / numElements;  	//Standard deviation  	double someSum = 0;  	foreach (double x in dataPoints) {  		someSum += Math.Pow ((Mean - x)' 2);  	}  	double stdevValue = Math.Sqrt (someSum / numElements);  	StdDev = stdevValue;  	//Q1  	Q1 = percentile (dataPoints' 25);  	//Q3  	Q3 = percentile (dataPoints' 75);  }  
Magic Number,TraceLabSDK.Types.Contests,BoxPlotPoint,F:\newReposMay17\CoEST_TraceLab\Main\TraceLab\TraceLabSDK.Types\Contests\BoxPlotPoint.cs,BoxPlotPoint,The following statement contains a magic number: if (N == 0) {  	Min = 0;  	Q1 = 0;  	Median = 0;  	Mean = 0;  	Q3 = 0;  	Max = 0;  	StdDev = 0;  } else if (N == 1) {  	Min = dataPoints [0];  	Q1 = dataPoints [0];  	Median = dataPoints [0];  	Mean = dataPoints [0];  	Q3 = dataPoints [0];  	Max = dataPoints [0];  	StdDev = 0;  } else {  	int numElements = dataPoints.Count<double> ();  	//set Min  	Min = dataPoints.Min ();  	//set Median  	if ((numElements % 2) == 0) {  		//double median = Math.Round((dataPoints[((numElements - 1) / 2)] + dataPoints[(numElements + 1) / 2]) / 2' 2);  		double median = (dataPoints [((numElements - 1) / 2)] + dataPoints [(numElements + 1) / 2]) / 2;  		Median = median;  	} else {  		double median = dataPoints [(numElements / 2)];  		Median = median;  	}  	double checkMedian = percentile (dataPoints' 50);  	//set Max  	Max = dataPoints.Max ();  	//Mean  	Mean = dataPoints.Sum () / numElements;  	//Standard deviation  	double someSum = 0;  	foreach (double x in dataPoints) {  		someSum += Math.Pow ((Mean - x)' 2);  	}  	double stdevValue = Math.Sqrt (someSum / numElements);  	StdDev = stdevValue;  	//Q1  	Q1 = percentile (dataPoints' 25);  	//Q3  	Q3 = percentile (dataPoints' 75);  }  
Magic Number,TraceLabSDK.Types.Contests,BoxPlotPoint,F:\newReposMay17\CoEST_TraceLab\Main\TraceLab\TraceLabSDK.Types\Contests\BoxPlotPoint.cs,BoxPlotPoint,The following statement contains a magic number: if (N == 0) {  	Min = 0;  	Q1 = 0;  	Median = 0;  	Mean = 0;  	Q3 = 0;  	Max = 0;  	StdDev = 0;  } else if (N == 1) {  	Min = dataPoints [0];  	Q1 = dataPoints [0];  	Median = dataPoints [0];  	Mean = dataPoints [0];  	Q3 = dataPoints [0];  	Max = dataPoints [0];  	StdDev = 0;  } else {  	int numElements = dataPoints.Count<double> ();  	//set Min  	Min = dataPoints.Min ();  	//set Median  	if ((numElements % 2) == 0) {  		//double median = Math.Round((dataPoints[((numElements - 1) / 2)] + dataPoints[(numElements + 1) / 2]) / 2' 2);  		double median = (dataPoints [((numElements - 1) / 2)] + dataPoints [(numElements + 1) / 2]) / 2;  		Median = median;  	} else {  		double median = dataPoints [(numElements / 2)];  		Median = median;  	}  	double checkMedian = percentile (dataPoints' 50);  	//set Max  	Max = dataPoints.Max ();  	//Mean  	Mean = dataPoints.Sum () / numElements;  	//Standard deviation  	double someSum = 0;  	foreach (double x in dataPoints) {  		someSum += Math.Pow ((Mean - x)' 2);  	}  	double stdevValue = Math.Sqrt (someSum / numElements);  	StdDev = stdevValue;  	//Q1  	Q1 = percentile (dataPoints' 25);  	//Q3  	Q3 = percentile (dataPoints' 75);  }  
Magic Number,TraceLabSDK.Types.Contests,BoxPlotPoint,F:\newReposMay17\CoEST_TraceLab\Main\TraceLab\TraceLabSDK.Types\Contests\BoxPlotPoint.cs,BoxPlotPoint,The following statement contains a magic number: if (N == 0) {  	Min = 0;  	Q1 = 0;  	Median = 0;  	Mean = 0;  	Q3 = 0;  	Max = 0;  	StdDev = 0;  } else if (N == 1) {  	Min = dataPoints [0];  	Q1 = dataPoints [0];  	Median = dataPoints [0];  	Mean = dataPoints [0];  	Q3 = dataPoints [0];  	Max = dataPoints [0];  	StdDev = 0;  } else {  	int numElements = dataPoints.Count<double> ();  	//set Min  	Min = dataPoints.Min ();  	//set Median  	if ((numElements % 2) == 0) {  		//double median = Math.Round((dataPoints[((numElements - 1) / 2)] + dataPoints[(numElements + 1) / 2]) / 2' 2);  		double median = (dataPoints [((numElements - 1) / 2)] + dataPoints [(numElements + 1) / 2]) / 2;  		Median = median;  	} else {  		double median = dataPoints [(numElements / 2)];  		Median = median;  	}  	double checkMedian = percentile (dataPoints' 50);  	//set Max  	Max = dataPoints.Max ();  	//Mean  	Mean = dataPoints.Sum () / numElements;  	//Standard deviation  	double someSum = 0;  	foreach (double x in dataPoints) {  		someSum += Math.Pow ((Mean - x)' 2);  	}  	double stdevValue = Math.Sqrt (someSum / numElements);  	StdDev = stdevValue;  	//Q1  	Q1 = percentile (dataPoints' 25);  	//Q3  	Q3 = percentile (dataPoints' 75);  }  
Magic Number,TraceLabSDK.Types.Contests,BoxPlotPoint,F:\newReposMay17\CoEST_TraceLab\Main\TraceLab\TraceLabSDK.Types\Contests\BoxPlotPoint.cs,BoxPlotPoint,The following statement contains a magic number: if (N == 0) {  	Min = 0;  	Q1 = 0;  	Median = 0;  	Mean = 0;  	Q3 = 0;  	Max = 0;  	StdDev = 0;  } else if (N == 1) {  	Min = dataPoints [0];  	Q1 = dataPoints [0];  	Median = dataPoints [0];  	Mean = dataPoints [0];  	Q3 = dataPoints [0];  	Max = dataPoints [0];  	StdDev = 0;  } else {  	int numElements = dataPoints.Count<double> ();  	//set Min  	Min = dataPoints.Min ();  	//set Median  	if ((numElements % 2) == 0) {  		//double median = Math.Round((dataPoints[((numElements - 1) / 2)] + dataPoints[(numElements + 1) / 2]) / 2' 2);  		double median = (dataPoints [((numElements - 1) / 2)] + dataPoints [(numElements + 1) / 2]) / 2;  		Median = median;  	} else {  		double median = dataPoints [(numElements / 2)];  		Median = median;  	}  	double checkMedian = percentile (dataPoints' 50);  	//set Max  	Max = dataPoints.Max ();  	//Mean  	Mean = dataPoints.Sum () / numElements;  	//Standard deviation  	double someSum = 0;  	foreach (double x in dataPoints) {  		someSum += Math.Pow ((Mean - x)' 2);  	}  	double stdevValue = Math.Sqrt (someSum / numElements);  	StdDev = stdevValue;  	//Q1  	Q1 = percentile (dataPoints' 25);  	//Q3  	Q3 = percentile (dataPoints' 75);  }  
Magic Number,TraceLabSDK.Types.Contests,BoxPlotPoint,F:\newReposMay17\CoEST_TraceLab\Main\TraceLab\TraceLabSDK.Types\Contests\BoxPlotPoint.cs,BoxPlotPoint,The following statement contains a magic number: if (N == 0) {  	Min = 0;  	Q1 = 0;  	Median = 0;  	Mean = 0;  	Q3 = 0;  	Max = 0;  	StdDev = 0;  } else if (N == 1) {  	Min = dataPoints [0];  	Q1 = dataPoints [0];  	Median = dataPoints [0];  	Mean = dataPoints [0];  	Q3 = dataPoints [0];  	Max = dataPoints [0];  	StdDev = 0;  } else {  	int numElements = dataPoints.Count<double> ();  	//set Min  	Min = dataPoints.Min ();  	//set Median  	if ((numElements % 2) == 0) {  		//double median = Math.Round((dataPoints[((numElements - 1) / 2)] + dataPoints[(numElements + 1) / 2]) / 2' 2);  		double median = (dataPoints [((numElements - 1) / 2)] + dataPoints [(numElements + 1) / 2]) / 2;  		Median = median;  	} else {  		double median = dataPoints [(numElements / 2)];  		Median = median;  	}  	double checkMedian = percentile (dataPoints' 50);  	//set Max  	Max = dataPoints.Max ();  	//Mean  	Mean = dataPoints.Sum () / numElements;  	//Standard deviation  	double someSum = 0;  	foreach (double x in dataPoints) {  		someSum += Math.Pow ((Mean - x)' 2);  	}  	double stdevValue = Math.Sqrt (someSum / numElements);  	StdDev = stdevValue;  	//Q1  	Q1 = percentile (dataPoints' 25);  	//Q3  	Q3 = percentile (dataPoints' 75);  }  
Magic Number,TraceLabSDK.Types.Contests,BoxPlotPoint,F:\newReposMay17\CoEST_TraceLab\Main\TraceLab\TraceLabSDK.Types\Contests\BoxPlotPoint.cs,BoxPlotPoint,The following statement contains a magic number: if (N == 1) {  	Min = dataPoints [0];  	Q1 = dataPoints [0];  	Median = dataPoints [0];  	Mean = dataPoints [0];  	Q3 = dataPoints [0];  	Max = dataPoints [0];  	StdDev = 0;  } else {  	int numElements = dataPoints.Count<double> ();  	//set Min  	Min = dataPoints.Min ();  	//set Median  	if ((numElements % 2) == 0) {  		//double median = Math.Round((dataPoints[((numElements - 1) / 2)] + dataPoints[(numElements + 1) / 2]) / 2' 2);  		double median = (dataPoints [((numElements - 1) / 2)] + dataPoints [(numElements + 1) / 2]) / 2;  		Median = median;  	} else {  		double median = dataPoints [(numElements / 2)];  		Median = median;  	}  	double checkMedian = percentile (dataPoints' 50);  	//set Max  	Max = dataPoints.Max ();  	//Mean  	Mean = dataPoints.Sum () / numElements;  	//Standard deviation  	double someSum = 0;  	foreach (double x in dataPoints) {  		someSum += Math.Pow ((Mean - x)' 2);  	}  	double stdevValue = Math.Sqrt (someSum / numElements);  	StdDev = stdevValue;  	//Q1  	Q1 = percentile (dataPoints' 25);  	//Q3  	Q3 = percentile (dataPoints' 75);  }  
Magic Number,TraceLabSDK.Types.Contests,BoxPlotPoint,F:\newReposMay17\CoEST_TraceLab\Main\TraceLab\TraceLabSDK.Types\Contests\BoxPlotPoint.cs,BoxPlotPoint,The following statement contains a magic number: if (N == 1) {  	Min = dataPoints [0];  	Q1 = dataPoints [0];  	Median = dataPoints [0];  	Mean = dataPoints [0];  	Q3 = dataPoints [0];  	Max = dataPoints [0];  	StdDev = 0;  } else {  	int numElements = dataPoints.Count<double> ();  	//set Min  	Min = dataPoints.Min ();  	//set Median  	if ((numElements % 2) == 0) {  		//double median = Math.Round((dataPoints[((numElements - 1) / 2)] + dataPoints[(numElements + 1) / 2]) / 2' 2);  		double median = (dataPoints [((numElements - 1) / 2)] + dataPoints [(numElements + 1) / 2]) / 2;  		Median = median;  	} else {  		double median = dataPoints [(numElements / 2)];  		Median = median;  	}  	double checkMedian = percentile (dataPoints' 50);  	//set Max  	Max = dataPoints.Max ();  	//Mean  	Mean = dataPoints.Sum () / numElements;  	//Standard deviation  	double someSum = 0;  	foreach (double x in dataPoints) {  		someSum += Math.Pow ((Mean - x)' 2);  	}  	double stdevValue = Math.Sqrt (someSum / numElements);  	StdDev = stdevValue;  	//Q1  	Q1 = percentile (dataPoints' 25);  	//Q3  	Q3 = percentile (dataPoints' 75);  }  
Magic Number,TraceLabSDK.Types.Contests,BoxPlotPoint,F:\newReposMay17\CoEST_TraceLab\Main\TraceLab\TraceLabSDK.Types\Contests\BoxPlotPoint.cs,BoxPlotPoint,The following statement contains a magic number: if (N == 1) {  	Min = dataPoints [0];  	Q1 = dataPoints [0];  	Median = dataPoints [0];  	Mean = dataPoints [0];  	Q3 = dataPoints [0];  	Max = dataPoints [0];  	StdDev = 0;  } else {  	int numElements = dataPoints.Count<double> ();  	//set Min  	Min = dataPoints.Min ();  	//set Median  	if ((numElements % 2) == 0) {  		//double median = Math.Round((dataPoints[((numElements - 1) / 2)] + dataPoints[(numElements + 1) / 2]) / 2' 2);  		double median = (dataPoints [((numElements - 1) / 2)] + dataPoints [(numElements + 1) / 2]) / 2;  		Median = median;  	} else {  		double median = dataPoints [(numElements / 2)];  		Median = median;  	}  	double checkMedian = percentile (dataPoints' 50);  	//set Max  	Max = dataPoints.Max ();  	//Mean  	Mean = dataPoints.Sum () / numElements;  	//Standard deviation  	double someSum = 0;  	foreach (double x in dataPoints) {  		someSum += Math.Pow ((Mean - x)' 2);  	}  	double stdevValue = Math.Sqrt (someSum / numElements);  	StdDev = stdevValue;  	//Q1  	Q1 = percentile (dataPoints' 25);  	//Q3  	Q3 = percentile (dataPoints' 75);  }  
Magic Number,TraceLabSDK.Types.Contests,BoxPlotPoint,F:\newReposMay17\CoEST_TraceLab\Main\TraceLab\TraceLabSDK.Types\Contests\BoxPlotPoint.cs,BoxPlotPoint,The following statement contains a magic number: if (N == 1) {  	Min = dataPoints [0];  	Q1 = dataPoints [0];  	Median = dataPoints [0];  	Mean = dataPoints [0];  	Q3 = dataPoints [0];  	Max = dataPoints [0];  	StdDev = 0;  } else {  	int numElements = dataPoints.Count<double> ();  	//set Min  	Min = dataPoints.Min ();  	//set Median  	if ((numElements % 2) == 0) {  		//double median = Math.Round((dataPoints[((numElements - 1) / 2)] + dataPoints[(numElements + 1) / 2]) / 2' 2);  		double median = (dataPoints [((numElements - 1) / 2)] + dataPoints [(numElements + 1) / 2]) / 2;  		Median = median;  	} else {  		double median = dataPoints [(numElements / 2)];  		Median = median;  	}  	double checkMedian = percentile (dataPoints' 50);  	//set Max  	Max = dataPoints.Max ();  	//Mean  	Mean = dataPoints.Sum () / numElements;  	//Standard deviation  	double someSum = 0;  	foreach (double x in dataPoints) {  		someSum += Math.Pow ((Mean - x)' 2);  	}  	double stdevValue = Math.Sqrt (someSum / numElements);  	StdDev = stdevValue;  	//Q1  	Q1 = percentile (dataPoints' 25);  	//Q3  	Q3 = percentile (dataPoints' 75);  }  
Magic Number,TraceLabSDK.Types.Contests,BoxPlotPoint,F:\newReposMay17\CoEST_TraceLab\Main\TraceLab\TraceLabSDK.Types\Contests\BoxPlotPoint.cs,BoxPlotPoint,The following statement contains a magic number: if (N == 1) {  	Min = dataPoints [0];  	Q1 = dataPoints [0];  	Median = dataPoints [0];  	Mean = dataPoints [0];  	Q3 = dataPoints [0];  	Max = dataPoints [0];  	StdDev = 0;  } else {  	int numElements = dataPoints.Count<double> ();  	//set Min  	Min = dataPoints.Min ();  	//set Median  	if ((numElements % 2) == 0) {  		//double median = Math.Round((dataPoints[((numElements - 1) / 2)] + dataPoints[(numElements + 1) / 2]) / 2' 2);  		double median = (dataPoints [((numElements - 1) / 2)] + dataPoints [(numElements + 1) / 2]) / 2;  		Median = median;  	} else {  		double median = dataPoints [(numElements / 2)];  		Median = median;  	}  	double checkMedian = percentile (dataPoints' 50);  	//set Max  	Max = dataPoints.Max ();  	//Mean  	Mean = dataPoints.Sum () / numElements;  	//Standard deviation  	double someSum = 0;  	foreach (double x in dataPoints) {  		someSum += Math.Pow ((Mean - x)' 2);  	}  	double stdevValue = Math.Sqrt (someSum / numElements);  	StdDev = stdevValue;  	//Q1  	Q1 = percentile (dataPoints' 25);  	//Q3  	Q3 = percentile (dataPoints' 75);  }  
Magic Number,TraceLabSDK.Types.Contests,BoxPlotPoint,F:\newReposMay17\CoEST_TraceLab\Main\TraceLab\TraceLabSDK.Types\Contests\BoxPlotPoint.cs,BoxPlotPoint,The following statement contains a magic number: if (N == 1) {  	Min = dataPoints [0];  	Q1 = dataPoints [0];  	Median = dataPoints [0];  	Mean = dataPoints [0];  	Q3 = dataPoints [0];  	Max = dataPoints [0];  	StdDev = 0;  } else {  	int numElements = dataPoints.Count<double> ();  	//set Min  	Min = dataPoints.Min ();  	//set Median  	if ((numElements % 2) == 0) {  		//double median = Math.Round((dataPoints[((numElements - 1) / 2)] + dataPoints[(numElements + 1) / 2]) / 2' 2);  		double median = (dataPoints [((numElements - 1) / 2)] + dataPoints [(numElements + 1) / 2]) / 2;  		Median = median;  	} else {  		double median = dataPoints [(numElements / 2)];  		Median = median;  	}  	double checkMedian = percentile (dataPoints' 50);  	//set Max  	Max = dataPoints.Max ();  	//Mean  	Mean = dataPoints.Sum () / numElements;  	//Standard deviation  	double someSum = 0;  	foreach (double x in dataPoints) {  		someSum += Math.Pow ((Mean - x)' 2);  	}  	double stdevValue = Math.Sqrt (someSum / numElements);  	StdDev = stdevValue;  	//Q1  	Q1 = percentile (dataPoints' 25);  	//Q3  	Q3 = percentile (dataPoints' 75);  }  
Magic Number,TraceLabSDK.Types.Contests,BoxPlotPoint,F:\newReposMay17\CoEST_TraceLab\Main\TraceLab\TraceLabSDK.Types\Contests\BoxPlotPoint.cs,BoxPlotPoint,The following statement contains a magic number: if (N == 1) {  	Min = dataPoints [0];  	Q1 = dataPoints [0];  	Median = dataPoints [0];  	Mean = dataPoints [0];  	Q3 = dataPoints [0];  	Max = dataPoints [0];  	StdDev = 0;  } else {  	int numElements = dataPoints.Count<double> ();  	//set Min  	Min = dataPoints.Min ();  	//set Median  	if ((numElements % 2) == 0) {  		//double median = Math.Round((dataPoints[((numElements - 1) / 2)] + dataPoints[(numElements + 1) / 2]) / 2' 2);  		double median = (dataPoints [((numElements - 1) / 2)] + dataPoints [(numElements + 1) / 2]) / 2;  		Median = median;  	} else {  		double median = dataPoints [(numElements / 2)];  		Median = median;  	}  	double checkMedian = percentile (dataPoints' 50);  	//set Max  	Max = dataPoints.Max ();  	//Mean  	Mean = dataPoints.Sum () / numElements;  	//Standard deviation  	double someSum = 0;  	foreach (double x in dataPoints) {  		someSum += Math.Pow ((Mean - x)' 2);  	}  	double stdevValue = Math.Sqrt (someSum / numElements);  	StdDev = stdevValue;  	//Q1  	Q1 = percentile (dataPoints' 25);  	//Q3  	Q3 = percentile (dataPoints' 75);  }  
Magic Number,TraceLabSDK.Types.Contests,BoxPlotPoint,F:\newReposMay17\CoEST_TraceLab\Main\TraceLab\TraceLabSDK.Types\Contests\BoxPlotPoint.cs,BoxPlotPoint,The following statement contains a magic number: if (N == 1) {  	Min = dataPoints [0];  	Q1 = dataPoints [0];  	Median = dataPoints [0];  	Mean = dataPoints [0];  	Q3 = dataPoints [0];  	Max = dataPoints [0];  	StdDev = 0;  } else {  	int numElements = dataPoints.Count<double> ();  	//set Min  	Min = dataPoints.Min ();  	//set Median  	if ((numElements % 2) == 0) {  		//double median = Math.Round((dataPoints[((numElements - 1) / 2)] + dataPoints[(numElements + 1) / 2]) / 2' 2);  		double median = (dataPoints [((numElements - 1) / 2)] + dataPoints [(numElements + 1) / 2]) / 2;  		Median = median;  	} else {  		double median = dataPoints [(numElements / 2)];  		Median = median;  	}  	double checkMedian = percentile (dataPoints' 50);  	//set Max  	Max = dataPoints.Max ();  	//Mean  	Mean = dataPoints.Sum () / numElements;  	//Standard deviation  	double someSum = 0;  	foreach (double x in dataPoints) {  		someSum += Math.Pow ((Mean - x)' 2);  	}  	double stdevValue = Math.Sqrt (someSum / numElements);  	StdDev = stdevValue;  	//Q1  	Q1 = percentile (dataPoints' 25);  	//Q3  	Q3 = percentile (dataPoints' 75);  }  
Magic Number,TraceLabSDK.Types.Contests,BoxPlotPoint,F:\newReposMay17\CoEST_TraceLab\Main\TraceLab\TraceLabSDK.Types\Contests\BoxPlotPoint.cs,BoxPlotPoint,The following statement contains a magic number: if (N == 1) {  	Min = dataPoints [0];  	Q1 = dataPoints [0];  	Median = dataPoints [0];  	Mean = dataPoints [0];  	Q3 = dataPoints [0];  	Max = dataPoints [0];  	StdDev = 0;  } else {  	int numElements = dataPoints.Count<double> ();  	//set Min  	Min = dataPoints.Min ();  	//set Median  	if ((numElements % 2) == 0) {  		//double median = Math.Round((dataPoints[((numElements - 1) / 2)] + dataPoints[(numElements + 1) / 2]) / 2' 2);  		double median = (dataPoints [((numElements - 1) / 2)] + dataPoints [(numElements + 1) / 2]) / 2;  		Median = median;  	} else {  		double median = dataPoints [(numElements / 2)];  		Median = median;  	}  	double checkMedian = percentile (dataPoints' 50);  	//set Max  	Max = dataPoints.Max ();  	//Mean  	Mean = dataPoints.Sum () / numElements;  	//Standard deviation  	double someSum = 0;  	foreach (double x in dataPoints) {  		someSum += Math.Pow ((Mean - x)' 2);  	}  	double stdevValue = Math.Sqrt (someSum / numElements);  	StdDev = stdevValue;  	//Q1  	Q1 = percentile (dataPoints' 25);  	//Q3  	Q3 = percentile (dataPoints' 75);  }  
Magic Number,TraceLabSDK.Types.Contests,BoxPlotPoint,F:\newReposMay17\CoEST_TraceLab\Main\TraceLab\TraceLabSDK.Types\Contests\BoxPlotPoint.cs,BoxPlotPoint,The following statement contains a magic number: if ((numElements % 2) == 0) {  	//double median = Math.Round((dataPoints[((numElements - 1) / 2)] + dataPoints[(numElements + 1) / 2]) / 2' 2);  	double median = (dataPoints [((numElements - 1) / 2)] + dataPoints [(numElements + 1) / 2]) / 2;  	Median = median;  } else {  	double median = dataPoints [(numElements / 2)];  	Median = median;  }  
Magic Number,TraceLabSDK.Types.Contests,BoxPlotPoint,F:\newReposMay17\CoEST_TraceLab\Main\TraceLab\TraceLabSDK.Types\Contests\BoxPlotPoint.cs,BoxPlotPoint,The following statement contains a magic number: if ((numElements % 2) == 0) {  	//double median = Math.Round((dataPoints[((numElements - 1) / 2)] + dataPoints[(numElements + 1) / 2]) / 2' 2);  	double median = (dataPoints [((numElements - 1) / 2)] + dataPoints [(numElements + 1) / 2]) / 2;  	Median = median;  } else {  	double median = dataPoints [(numElements / 2)];  	Median = median;  }  
Magic Number,TraceLabSDK.Types.Contests,BoxPlotPoint,F:\newReposMay17\CoEST_TraceLab\Main\TraceLab\TraceLabSDK.Types\Contests\BoxPlotPoint.cs,BoxPlotPoint,The following statement contains a magic number: if ((numElements % 2) == 0) {  	//double median = Math.Round((dataPoints[((numElements - 1) / 2)] + dataPoints[(numElements + 1) / 2]) / 2' 2);  	double median = (dataPoints [((numElements - 1) / 2)] + dataPoints [(numElements + 1) / 2]) / 2;  	Median = median;  } else {  	double median = dataPoints [(numElements / 2)];  	Median = median;  }  
Magic Number,TraceLabSDK.Types.Contests,BoxPlotPoint,F:\newReposMay17\CoEST_TraceLab\Main\TraceLab\TraceLabSDK.Types\Contests\BoxPlotPoint.cs,BoxPlotPoint,The following statement contains a magic number: if ((numElements % 2) == 0) {  	//double median = Math.Round((dataPoints[((numElements - 1) / 2)] + dataPoints[(numElements + 1) / 2]) / 2' 2);  	double median = (dataPoints [((numElements - 1) / 2)] + dataPoints [(numElements + 1) / 2]) / 2;  	Median = median;  } else {  	double median = dataPoints [(numElements / 2)];  	Median = median;  }  
Magic Number,TraceLabSDK.Types.Contests,BoxPlotPoint,F:\newReposMay17\CoEST_TraceLab\Main\TraceLab\TraceLabSDK.Types\Contests\BoxPlotPoint.cs,BoxPlotPoint,The following statement contains a magic number: if ((numElements % 2) == 0) {  	//double median = Math.Round((dataPoints[((numElements - 1) / 2)] + dataPoints[(numElements + 1) / 2]) / 2' 2);  	double median = (dataPoints [((numElements - 1) / 2)] + dataPoints [(numElements + 1) / 2]) / 2;  	Median = median;  } else {  	double median = dataPoints [(numElements / 2)];  	Median = median;  }  
Magic Number,TraceLabSDK.Types.Contests,BoxPlotPoint,F:\newReposMay17\CoEST_TraceLab\Main\TraceLab\TraceLabSDK.Types\Contests\BoxPlotPoint.cs,BoxPlotPoint,The following statement contains a magic number: foreach (double x in dataPoints) {  	someSum += Math.Pow ((Mean - x)' 2);  }  
Magic Number,TraceLabSDK.Types.Contests,BoxPlotPoint,F:\newReposMay17\CoEST_TraceLab\Main\TraceLab\TraceLabSDK.Types\Contests\BoxPlotPoint.cs,BoxPlotPoint,The following statement contains a magic number: someSum += Math.Pow ((Mean - x)' 2);  
Magic Number,TraceLabSDK.Types.Contests,BoxPlotPoint,F:\newReposMay17\CoEST_TraceLab\Main\TraceLab\TraceLabSDK.Types\Contests\BoxPlotPoint.cs,BoxPlotPoint,The following statement contains a magic number: Q1 = percentile (dataPoints' 25);  
Magic Number,TraceLabSDK.Types.Contests,BoxPlotPoint,F:\newReposMay17\CoEST_TraceLab\Main\TraceLab\TraceLabSDK.Types\Contests\BoxPlotPoint.cs,BoxPlotPoint,The following statement contains a magic number: Q3 = percentile (dataPoints' 75);  
