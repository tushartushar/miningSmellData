Implementation smell,Namespace,Class,File,Method,Description
Complex Method,DictionaryIndexBuilder,BasicIndexBuilder,C:\repos\CoEST_TraceLab\Main\ComponentsSources\SAREC-DePaul\TraceLab Components Source\DictionaryIndexBuilderTFIDF\BasicIndexBuilder.cs,build,Cyclomatic complexity of the method is 10
Complex Method,DictionaryIndexBuilder,TFIDFIndexBuilder,C:\repos\CoEST_TraceLab\Main\ComponentsSources\SAREC-DePaul\TraceLab Components Source\DictionaryIndexBuilderTFIDF\TFIDFIndexBuilder.cs,build,Cyclomatic complexity of the method is 8
Magic Number,DictionaryIndexBuilder,BasicIndexBuilder,C:\repos\CoEST_TraceLab\Main\ComponentsSources\SAREC-DePaul\TraceLab Components Source\DictionaryIndexBuilderTFIDF\BasicIndexBuilder.cs,build,The following statement contains a magic number: foreach (TLTermEntry t in dict.TermEntries) {  				foreach (TLPosting p in t.Postings) {  					artId = p.ArtifactId;  					vectorLength = Math.Pow(p.Frequency' 2);  					if (documentVectorLength.ContainsKey(artId)) {  						// The document has other terms  						vectorLength += documentVectorLength[artId];  					}  					documentVectorLength[artId] = vectorLength;  				}  			}
Magic Number,DictionaryIndexBuilder,TFIDFIndexBuilder,C:\repos\CoEST_TraceLab\Main\ComponentsSources\SAREC-DePaul\TraceLab Components Source\DictionaryIndexBuilderTFIDF\TFIDFIndexBuilder.cs,build,The following statement contains a magic number: foreach (TLTermEntry term in dict.TermEntries) {  				  				// Calculates the idf for each term - and stores this in the weight of the term - for weighing queries later  				idf = Math.Log10(N/((double) term.NumberOfArtifactsContainingTerm));  				term.Weight = idf;  			  				// Iterates over all the postings  				foreach (TLPosting posting in term.Postings) {  					  					// Multiplies each term weight by the idf  					double newWeight = posting.Frequency * idf;  					posting.Weight = newWeight;  			  					// Updates the document vector length  					docId = posting.ArtifactId;    					vectorLength = Math.Pow(newWeight' 2);  					if (documentVectorLength.ContainsKey(docId)) {  						// The document has other terms  						vectorLength += documentVectorLength[docId];  					}  					documentVectorLength[docId] = vectorLength;  				}  			}
