Implementation smell,Namespace,Class,File,Method,Description
Complex Method,TraceLab.UI.WPF.Controls.AdornedControl,FrameworkElementAdorner,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Controls\AdornedControl\FrameworkElementAdorner.cs,DetermineX,Cyclomatic complexity of the method is 10
Complex Method,TraceLab.UI.WPF.Controls.AdornedControl,FrameworkElementAdorner,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Controls\AdornedControl\FrameworkElementAdorner.cs,DetermineY,Cyclomatic complexity of the method is 10
Complex Method,TraceLab.UI.WPF.Controls.AdornedControl,FrameworkElementAdorner,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Controls\AdornedControl\FrameworkElementAdorner.cs,DetermineWidth,Cyclomatic complexity of the method is 9
Complex Method,TraceLab.UI.WPF.Controls.AdornedControl,FrameworkElementAdorner,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Controls\AdornedControl\FrameworkElementAdorner.cs,DetermineHeight,Cyclomatic complexity of the method is 9
Complex Method,TraceLab.UI.WPF.Controls,IOSpecFilterCheckBox,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Controls\IOSpecFilterCheckBox.cs,IoSpecFiltersCollectionChanged,Cyclomatic complexity of the method is 19
Complex Method,TraceLab.UI.WPF.Converters,FilePathConverter,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Converters\FilePathToStringConverter.cs,Convert,Cyclomatic complexity of the method is 9
Complex Method,TraceLab.UI.WPF.Selectors,NodeControlSelector,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Selectors\NodeControlSelector.cs,SelectTemplate,Cyclomatic complexity of the method is 13
Complex Method,TraceLab.UI.WPF.Views,FolderPickerDialog,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Views\FolderPickerDialog.xaml.cs,PkgFolderChooser_SelectedItemChanged,Cyclomatic complexity of the method is 8
Complex Method,TraceLab.UI.WPF.Views,GraphView,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Views\GraphView.cs,OnMouseLeftButtonDown,Cyclomatic complexity of the method is 9
Complex Method,TraceLab.UI.WPF.Views,GraphView,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Views\GraphView.cs,OnMouseMove,Cyclomatic complexity of the method is 8
Complex Method,TraceLab.UI.WPF.Views,GraphView,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Views\GraphView.cs,ExecuteAddScopeToDecision,Cyclomatic complexity of the method is 9
Complex Method,TraceLab.UI.WPF.Views,ReadonlyDockableGraph,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Views\ReadonlyDockableGraph.xaml.cs,OnMouseLeftButtonDown,Cyclomatic complexity of the method is 9
Complex Method,TraceLab.UI.WPF.Views,ReadonlyDockableGraph,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Views\ReadonlyDockableGraph.xaml.cs,OnMouseMove,Cyclomatic complexity of the method is 8
Complex Method,TraceLab.UI.WPF.Controls.ZoomControl,ZoomControl,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Controls\ZoomControl\ZoomControl.cs,Mode_PropertyChanged,Cyclomatic complexity of the method is 10
Complex Method,TraceLab.UI.WPF.Controls.ZoomControl,ZoomControl,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Controls\ZoomControl\ZoomControl.cs,ZoomControl_MouseUp,Cyclomatic complexity of the method is 13
Complex Method,TraceLab.UI.WPF.Controls.ZoomControl,ZoomControl,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Controls\ZoomControl\ZoomControl.cs,ZoomControl_PreviewMouseMove,Cyclomatic complexity of the method is 20
Complex Method,TraceLab.UI.WPF.Controls.ZoomControl,ZoomControl,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Controls\ZoomControl\ZoomControl.cs,OnMouseDown,Cyclomatic complexity of the method is 19
Complex Method,TraceLab.UI.WPF.ViewModels,CLVReferenceContainerNode,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\ViewModels\ComponentLibraryNodes\CLVReferenceContainerNode.cs,observableCollection_CollectionChanged,Cyclomatic complexity of the method is 19
Complex Method,TraceLab.UI.WPF.ViewModels,TopLevelEditableExperimentViewModel,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\ViewModels\TopLevelEditableExperimentViewModel.cs,DropFunc,Cyclomatic complexity of the method is 8
Complex Method,TraceLab.UI.WPF.ViewModels,SettingsViewModel,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\ViewModels\SettingsViewModel.cs,Collection_Changed,Cyclomatic complexity of the method is 17
Complex Method,TraceLab.UI.WPF.ViewModels,ApplicationViewModelWrapper,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\ViewModels\ApplicationViewModelWrapper.cs,appModel_PropertyChanged,Cyclomatic complexity of the method is 22
Complex Method,TraceLab.UI.WPF.ViewModels,ApplicationViewModelWrapper,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\ViewModels\ApplicationViewModelWrapper.cs,SaveAsFunc,Cyclomatic complexity of the method is 8
Complex Method,TraceLab.UI.WPF.ViewModels,ComponentsLibraryViewModelWrapper,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\ViewModels\ComponentsLibraryViewModelWrapper.cs,IoSpecFiltersCollectionChanged,Cyclomatic complexity of the method is 18
Complex Method,TraceLab.UI.WPF.ViewModels,ComponentsLibraryViewModelWrapper,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\ViewModels\ComponentsLibraryViewModelWrapper.cs,ShouldFilterNodeBasedOnIoSpecFilter,Cyclomatic complexity of the method is 10
Complex Method,TraceLab.UI.WPF.ViewModels,LogViewModelWrapper,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\ViewModels\LogViewModelWrapper.cs,EventsCollectionChanged,Cyclomatic complexity of the method is 19
Complex Method,TraceLab.UI.WPF.ViewModels,WorkspaceViewModelWrapper,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\ViewModels\WorkspaceViewModelWrapper.cs,WorkspaceCollectionCollectionChanged,Cyclomatic complexity of the method is 19
Complex Method,TraceLab.UI.WPF.Views.Nodes,DecisionInfoControlBase,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Views\Nodes\DecisionInfoControlBase.cs,OnFillItemsNeeded,Cyclomatic complexity of the method is 9
Complex Method,TraceLab.UI.WPF.Views.PackageBuilder,PackageBuilderMainWindow,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Views\PackageBuilder\PackageBuilderMainWindow.xaml.cs,BuildPkgButton_Click,Cyclomatic complexity of the method is 15
Long Parameter List,TraceLab.UI.WPF.Adorners,ResizingAdorner,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Adorners\ResizingAdorner.cs,NotifyResizing,The method has 11 parameters.
Long Parameter List,TraceLab.UI.WPF.Adorners,ResizingAdorner,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Adorners\ResizingAdorner.cs,HandleBottomRight,The method has 13 parameters.
Long Parameter List,TraceLab.UI.WPF.Adorners,ResizingAdorner,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Adorners\ResizingAdorner.cs,HandleTopRight,The method has 13 parameters.
Long Parameter List,TraceLab.UI.WPF.Adorners,ResizingAdorner,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Adorners\ResizingAdorner.cs,HandleTopLeft,The method has 13 parameters.
Long Parameter List,TraceLab.UI.WPF.Adorners,ResizingAdorner,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Adorners\ResizingAdorner.cs,HandleBottomLeft,The method has 13 parameters.
Long Parameter List,TraceLab.UI.WPF.Adorners,ResizingAdorner,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Adorners\ResizingAdorner.cs,HandleResizing,The method has 7 parameters.
Long Parameter List,TraceLab.UI.WPF.Controls.AdornedControl,FrameworkElementAdorner,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Controls\AdornedControl\FrameworkElementAdorner.cs,FrameworkElementAdorner,The method has 6 parameters.
Long Parameter List,TraceLab.UI.WPF.Controls,UIHelpers,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Controls\UIHelpers.cs,EnsureAccess,The method has 5 parameters.
Long Parameter List,TraceLab.UI.WPF.Utilities,ScopeHelper,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Utilities\ScopeHelper.cs,GetIntersection,The method has 7 parameters.
Long Parameter List,TraceLab.UI.WPF.Utilities,ScopeHelper,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Utilities\ScopeHelper.cs,TryFindIntersection,The method has 5 parameters.
Long Parameter List,TraceLab.UI.WPF.Controls.ZoomControl,ZoomControl,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Controls\ZoomControl\ZoomControl.cs,GetCoercedTranslate,The method has 5 parameters.
Long Parameter List,TraceLab.UI.WPF.Controls.ZoomControl,ZoomControl,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Controls\ZoomControl\ZoomControl.cs,StartAnimation,The method has 5 parameters.
Long Parameter List,TraceLab.UI.WPF.ViewModels,IOSpecFilter,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\ViewModels\ComponentLibraryNodes\IOSpecFilter.cs,RefreshCurrentlyAvailableFilterTypes,The method has 6 parameters.
Long Parameter List,TraceLab.UI.WPF.ViewModels,DefiningBenchmarkViewModel,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\ViewModels\DefiningBenchmarkViewModel.cs,DefiningBenchmarkViewModel,The method has 6 parameters.
Long Parameter List,TraceLab.UI.WPF.Views.Nodes,BaseComponentNodeInfoControl,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Views\Nodes\BaseComponentNodeInfoControl.cs,resizeInfoPane,The method has 5 parameters.
Long Parameter List,TraceLab.UI.WPF.Views.PackageBuilder,IconExtractor,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Views\PackageBuilder\IconExtractor.cs,SHGetFileInfo,The method has 5 parameters.
Long Identifier,TraceLab.UI.WPF.Converters,SubLevelNodeConfigConverter,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Converters\SubLevelNodeConfigConverter.cs,GetGraphIdPath,The length of the parameter topOwnerCompositeComponentNode is 30.
Long Identifier,TraceLab.UI.WPF.Views.Nodes,DecisionInfoControlBase,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Views\Nodes\DecisionInfoControlBase.cs,FillItemsWithIncomingOutputsFromPreviousNodes,The length of the parameter predeccessorsOutputsNameTypeLookup is 34.
Long Statement,TraceLab.UI.WPF.Adorners,ResizingAdorner,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Adorners\ResizingAdorner.cs,HandleBottomRight,The length of the statement  "	HandleResizing (sender' args' calculateWidthFunc' calculateHeightFunc' calculateHorizontalChangeFunc' calculateVerticalChangeFunc' setAdornedElementCanvas); " is 156.
Long Statement,TraceLab.UI.WPF.Adorners,ResizingAdorner,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Adorners\ResizingAdorner.cs,HandleTopRight,The length of the statement  "	HandleResizing (sender' args' calculateWidthFunc' calculateHeightFunc' calculateHorizontalChangeFunc' calculateVerticalChangeFunc' setAdornedElementCanvas); " is 156.
Long Statement,TraceLab.UI.WPF.Adorners,ResizingAdorner,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Adorners\ResizingAdorner.cs,HandleTopLeft,The length of the statement  "	HandleResizing (sender' args' calculateWidthFunc' calculateHeightFunc' calculateHorizontalChangeFunc' calculateVerticalChangeFunc' setAdornedElementCanvas); " is 156.
Long Statement,TraceLab.UI.WPF.Adorners,ResizingAdorner,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Adorners\ResizingAdorner.cs,HandleBottomLeft,The length of the statement  "	HandleResizing (sender' args' calculateWidthFunc' calculateHeightFunc' calculateHorizontalChangeFunc' calculateVerticalChangeFunc' setAdornedElementCanvas); " is 156.
Long Statement,TraceLab.UI.WPF.Adorners,ResizingAdorner,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Adorners\ResizingAdorner.cs,HandleResizing,The length of the statement  "	NotifyResizing (minWidth' oldWidth' computedWidth' finalWidth' minHeight' oldHeight' computedHeight' finalHeight' args' computeHorizontalChangeFunc' computeVerticalChangeFunc); " is 176.
Long Statement,TraceLab.UI.WPF.Adorners,ResizingAdorner,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Adorners\ResizingAdorner.cs,ArrangeOverride,The length of the statement  "	bottomRight.Arrange (new Rect (desiredWidth - adornerWidth / 2' desiredHeight - adornerHeight / 2' adornerWidth' adornerHeight)); " is 129.
Long Statement,TraceLab.UI.WPF.Controls.AdornedControl,AdornedControl,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Controls\AdornedControl\AdornedControl.cs,ShowAdornerInternal,The length of the statement  "			this.adorner = new FrameworkElementAdorner (this.AdornerContent' this' this.HorizontalAdornerPlacement' this.VerticalAdornerPlacement' this.AdornerOffsetX' this.AdornerOffsetY); " is 177.
Long Statement,TraceLab.UI.WPF.Controls,ScreenshotDialog,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Controls\ScreenshotDialog.xaml.cs,HandleSave,The length of the statement  "		TraceLab.UI.WPF.Utilities.VisualCaptureUtil.SaveVisual (DataContext as Visual' int.Parse (((TextBlock)((ComboBoxItem)dpiBox.SelectedItem).Content).Text)' FilePath); " is 164.
Long Statement,TraceLab.UI.WPF.Controls,InputItemComboBox,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Controls\InputItemComboBox.cs,Refresh,The length of the statement  "			//if currentNode is a ExperimentNode' and is ioValidator has incoming outputs for this node (otherwise' it has not been connected to start node) " is 144.
Long Statement,TraceLab.UI.WPF.Controls,IOSpecFilterCheckBox,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Controls\IOSpecFilterCheckBox.cs,OnCheckboxUnchecked,The length of the statement  "			var filter = IoSpecFilters.FirstOrDefault (item => item.FilterByDataType.Equals (default(KeyValuePair<string' string>)) == false && item.FilterByDataType.Value.Equals (ioItem.Type)); " is 182.
Long Statement,TraceLab.UI.WPF.Controls,IOSpecFilterCheckBox,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Controls\IOSpecFilterCheckBox.cs,OnCheckboxChecked,The length of the statement  "		//try check first if the filter has been already added... (assure that FilterByDataType was set - there might be filter that has not been yet set) " is 146.
Long Statement,TraceLab.UI.WPF.Controls,IOSpecFilterCheckBox,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Controls\IOSpecFilterCheckBox.cs,OnCheckboxChecked,The length of the statement  "		var filter = IoSpecFilters.FirstOrDefault (item => item.FilterByDataType.Equals (default(KeyValuePair<string' string>)) == false && item.FilterByDataType.Value.Equals (itemType)); " is 179.
Long Statement,TraceLab.UI.WPF.Controls,IOSpecFilterCheckBox,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Controls\IOSpecFilterCheckBox.cs,CheckMatch,The length of the statement  "		match = filters.Any (item => item.IsEmpty == false && item.FilterByDataType.Value.Equals (ItemDefinition.Type) && item.RequiresInput == true); " is 142.
Long Statement,TraceLab.UI.WPF.Controls,IOSpecFilterCheckBox,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Controls\IOSpecFilterCheckBox.cs,CheckMatch,The length of the statement  "		match = filters.Any (item => item.IsEmpty == false && item.FilterByDataType.Value.Equals (ItemDefinition.Type) && item.RequiresOutput == true); " is 143.
Long Statement,TraceLab.UI.WPF.Controls,AngleBorder,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Controls\AngleBorder.cs,GetChildRect,The length of the statement  "	var childSize = new Size (Math.Round (arrangeSize.Width - extraSize.Width)' Math.Round (arrangeSize.Height - extraSize.Height)); " is 128.
Long Statement,TraceLab.UI.WPF.Controls,AngleBorder,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Controls\AngleBorder.cs,GetCombinedSides,The length of the statement  "	var bottomLeftCorner = new Point (AngleAmount.Left + BorderStrokeThickness' ActualHeight - AngleAmount.Bottom - BorderStrokeThickness); " is 135.
Long Statement,TraceLab.UI.WPF.Controls,AngleBorder,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Controls\AngleBorder.cs,GetCombinedSides,The length of the statement  "	var topRightCorner = new Point (ActualWidth - AngleAmount.Right - BorderStrokeThickness' AngleAmount.Top + BorderStrokeThickness); " is 130.
Long Statement,TraceLab.UI.WPF.Controls,AngleBorder,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Controls\AngleBorder.cs,GetCombinedSides,The length of the statement  "	var bottomRight = new Point (ActualWidth - AngleAmount.Right - BorderStrokeThickness' ActualHeight - AngleAmount.Bottom - BorderStrokeThickness); " is 145.
Long Statement,TraceLab.UI.WPF.Controls,RichTextBoxWithIntellisense,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Controls\RichTextBoxWithIntellisense.cs,OnInitialized,The length of the statement  "	DependencyPropertyDescriptor descriptor = DependencyPropertyDescriptor.FromProperty (BindableDocumentProperty' typeof(RichTextBoxWithIntellisense)); " is 148.
Long Statement,TraceLab.UI.WPF.Controls,RichTextBoxWithIntellisense,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Controls\RichTextBoxWithIntellisense.cs,RichTextBoxWithIntellisense_LostFocus,The length of the statement  "	if (binding.UpdateSourceTrigger == UpdateSourceTrigger.Default || binding.UpdateSourceTrigger == UpdateSourceTrigger.LostFocus) { " is 129.
Long Statement,TraceLab.UI.WPF.Controls,RichTextBoxWithIntellisense,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Controls\RichTextBoxWithIntellisense.cs,AttachEventHandlersToAllComboBoxes,The length of the statement  "	for (TextPointer position = document.ContentStart; position != null && position.CompareTo (document.ContentEnd) <= 0; position = position.GetNextContextPosition (LogicalDirection.Forward)) { " is 190.
Long Statement,TraceLab.UI.WPF.Controls,RichTextBoxWithIntellisense,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Controls\RichTextBoxWithIntellisense.cs,DettachEventHandlersFromAllComboBoxes,The length of the statement  "	for (TextPointer position = document.ContentStart; position != null && position.CompareTo (document.ContentEnd) <= 0; position = position.GetNextContextPosition (LogicalDirection.Forward)) { " is 190.
Long Statement,TraceLab.UI.WPF.Controls,RichTextBoxWithIntellisense,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Controls\RichTextBoxWithIntellisense.cs,UpdateDocumentBinding,The length of the statement  "		System.Diagnostics.Debug.WriteLine (String.Format ("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!Update document binding to source.")); " is 123.
Long Statement,TraceLab.UI.WPF.Controls,RichTextBoxWithIntellisense,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Controls\RichTextBoxWithIntellisense.cs,OnKeyUp,The length of the statement  "	if (!string.IsNullOrWhiteSpace (lastWord) && ContentAssistTriggers.Any (item => item.StartsWith (lastWord' StringComparison.CurrentCultureIgnoreCase))) { " is 153.
Long Statement,TraceLab.UI.WPF.Controls,RichTextBoxWithIntellisense,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Controls\RichTextBoxWithIntellisense.cs,ShowPopup,The length of the statement  "	m_assistListPopup.DataContext = ContentAssistTriggers.FindAll (item => item.StartsWith (lastWord' StringComparison.CurrentCultureIgnoreCase)); " is 142.
Long Statement,TraceLab.UI.WPF.Controls,RichToolTip,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Controls\RichToolTip.cs,BindRootVisual,The length of the statement  "			parentWindow = UIHelpers.FindLogicalAncestorByType<Window> (RelatedObject) ?? UIHelpers.FindVisualAncestorByType<Window> (RelatedObject); " is 137.
Long Statement,TraceLab.UI.WPF.Controls,RichToolTip,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Controls\RichToolTip.cs,InitStoryboards,The length of the statement  "	//Storyboard.SetTargetProperty(animation' new PropertyPath("(0).(1)"' FrameworkElement.RenderTransformProperty' ScaleTransform.ScaleXProperty)); " is 144.
Long Statement,TraceLab.UI.WPF.Controls,RichToolTip,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Controls\RichToolTip.cs,InitStoryboards,The length of the statement  "	//Storyboard.SetTargetProperty(animation' new PropertyPath("(0).(1)"' FrameworkElement.RenderTransformProperty' ScaleTransform.ScaleYProperty)); " is 144.
Long Statement,TraceLab.UI.WPF.Converters,FilePathIconConverter,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Converters\FilePathIconConverter.cs,Convert,The length of the statement  "		bitSrc = System.Windows.Interop.Imaging.CreateBitmapSourceFromHBitmap (hBitmap.DangerousGetHandle ()' IntPtr.Zero' System.Windows.Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ()); " is 186.
Long Statement,TraceLab.UI.WPF.Converters,AnyAllButtonVisibilityConverter,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Converters\AnyAllButtonVisibilityConverter.cs,Convert,The length of the statement  "		throw new InvalidOperationException ("Incorrect usage of AnyAllButtonVisibilityConverter - the target type has to be Visibility"); " is 130.
Long Statement,TraceLab.UI.WPF.Converters,SubLevelNodeConfigConverter,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Converters\SubLevelNodeConfigConverter.cs,Convert,The length of the statement  "	//if node is not in scope (the check is needed' as scope extends composite component' but unlike composite component' it does not need to override config values) " is 161.
Long Statement,TraceLab.UI.WPF.Converters,SubLevelNodeConfigConverter,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Converters\SubLevelNodeConfigConverter.cs,Convert,The length of the statement  "			CompositeComponentMetadata compositeComponentMetadata = (CompositeComponentMetadata)topCompositeComponentNode.Data.Metadata; " is 124.
Long Statement,TraceLab.UI.WPF.Converters,SubLevelNodeConfigConverter,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Converters\SubLevelNodeConfigConverter.cs,GetGraphIdPath,The length of the statement  "			throw new InvalidOperationException ("Application is at invalid state. Sublevel experiment always need to have an owner."); " is 123.
Long Statement,TraceLab.UI.WPF.Converters,FilePathConverter,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Converters\FilePathToStringConverter.cs,Convert,The length of the statement  "		throw new ArgumentException ("The experiment path has to be set. If filepath is null' the new FilePath object is initialized based on experiment path."); " is 153.
Long Statement,TraceLab.UI.WPF.Converters,StringToFlowDocumentConverter,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Converters\FlowDocumentToStringConverter.cs,ConvertFlowDocumentDataToStringWithinSelection,The length of the statement  "	for (TextPointer position = start; position != null && position.CompareTo (end) <= 0; position = position.GetNextContextPosition (LogicalDirection.Forward)) { " is 158.
Long Statement,TraceLab.UI.WPF.Selectors,PackageBuilderWizardSelector,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Selectors\PackageBuilderWizardSelector.cs,SelectTemplate,The length of the statement  "		Window win = Application.Current.Windows.Cast<Window> ().SingleOrDefault (x => x.GetType ().ToString ().Equals ("TraceLab.UI.WPF.Views.PackageBuilder.PackageBuilderMainWindow")); " is 178.
Long Statement,TraceLab.UI.WPF.Selectors,DefiningCompositeComponentWizardSelector,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Selectors\DefiningCompositeComponentWizardSelector.cs,SelectTemplate,The length of the statement  "		Window win = Application.Current.Windows.Cast<Window> ().SingleOrDefault (x => x.GetType ().ToString ().Equals ("TraceLab.UI.WPF.Views.DefineCompositeComponentWizard")); " is 169.
Long Statement,TraceLab.UI.WPF.Selectors,BenchmarkWizardSelector,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Selectors\BenchmarkWizardSelector.cs,SelectTemplate,The length of the statement  "		Window win = Application.Current.Windows.Cast<Window> ().SingleOrDefault (x => x.GetType ().ToString ().Equals ("TraceLab.UI.WPF.Views.BenchmarkWizardDialog")); " is 160.
Long Statement,TraceLab.UI.WPF.Selectors,DefineBenchmarkDialogSelector,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Selectors\DefineBenchmarkDialogSelector.cs,SelectTemplate,The length of the statement  "		Window win = Application.Current.Windows.Cast<Window> ().SingleOrDefault (x => x.GetType ().ToString ().Equals ("TraceLab.UI.WPF.Views.DefineBenchmarkDialog")); " is 160.
Long Statement,TraceLab.UI.WPF.Selectors,ConfigPropertyTemplateSelector,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Selectors\ConfigPropertyTemplateSelector.cs,FindDataTemplate,The length of the statement  "	if (propType.Equals (typeof(TraceLabSDK.Component.Config.FilePath).FullName) == true || propType.Equals (typeof(TraceLabSDK.Component.Config.DirectoryPath).FullName) == true) { " is 176.
Long Statement,TraceLab.UI.WPF.Utilities,VisualCaptureUtil,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Utilities\VisualCaptureUtil.cs,SaveVisual,The length of the statement  "	RenderTargetBitmap rtb = new RenderTargetBitmap ((int)(bounds.Width * sizeFactor)' (int)(bounds.Height * sizeFactor)' dpi' dpi' PixelFormats.Pbgra32); " is 150.
Long Statement,TraceLab.UI.WPF.Utilities,ScopeHelper,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Utilities\ScopeHelper.cs,GetIntersection,The length of the statement  "	Point topLeftCorner = new Point (scopeCenter.X - scopeNode.DataWithSize.Width / 2 + paddingLeft' scopeCenter.Y - scopeNode.DataWithSize.Height / 2 + paddingTop + topCanvasOffset); " is 179.
Long Statement,TraceLab.UI.WPF.Utilities,ScopeHelper,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Utilities\ScopeHelper.cs,GetIntersection,The length of the statement  "	Point topRightCorner = new Point (scopeCenter.X + scopeNode.DataWithSize.Width / 2 - paddingRight' scopeCenter.Y - scopeNode.DataWithSize.Height / 2 + paddingTop + topCanvasOffset); " is 181.
Long Statement,TraceLab.UI.WPF.Utilities,ScopeHelper,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Utilities\ScopeHelper.cs,GetIntersection,The length of the statement  "	Point bottomLeftCorner = new Point (scopeCenter.X - scopeNode.DataWithSize.Width / 2 + paddingLeft' scopeCenter.Y + scopeNode.DataWithSize.Height / 2 - paddingBottom); " is 167.
Long Statement,TraceLab.UI.WPF.Utilities,ScopeHelper,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Utilities\ScopeHelper.cs,GetIntersection,The length of the statement  "	Point bottomRightCorner = new Point (scopeCenter.X + scopeNode.DataWithSize.Width / 2 - paddingRight' scopeCenter.Y + scopeNode.DataWithSize.Height / 2 - paddingBottom); " is 169.
Long Statement,TraceLab.UI.WPF.Utilities,ScopeHelper,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Utilities\ScopeHelper.cs,GetIntersection,The length of the statement  "	if (TryFindIntersection (scopeCenter' endNodeCenter' bottomLeftCorner' bottomRightCorner' out intersectionOnMainCanvas)) { " is 122.
Long Statement,TraceLab.UI.WPF.Utilities,ScopeHelper,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Utilities\ScopeHelper.cs,GetIntersection,The length of the statement  "	/* top */else if (TryFindIntersection (scopeCenter' endNodeCenter' bottomRightCorner' topRightCorner' out intersectionOnMainCanvas)) { " is 134.
Long Statement,TraceLab.UI.WPF.Utilities,ScopeHelper,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Utilities\ScopeHelper.cs,GetIntersection,The length of the statement  "	/* right */else if (TryFindIntersection (scopeCenter' endNodeCenter' bottomLeftCorner' topLeftCorner' out intersectionOnMainCanvas)) { " is 134.
Long Statement,TraceLab.UI.WPF.Utilities,ScopeHelper,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Utilities\ScopeHelper.cs,GetIntersection,The length of the statement  "	/* left */else if (TryFindIntersection (scopeCenter' endNodeCenter' topLeftCorner' topRightCorner' out intersectionOnMainCanvas)) { " is 131.
Long Statement,TraceLab.UI.WPF.Utilities,ScopeHelper,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Utilities\ScopeHelper.cs,GetIntersection,The length of the statement  "		adjustedIntersection = AdjustPointToScopeCanvasOrigin (intersectionOnMainCanvas.Value' scopeNode' topCanvasOffset' ref scopeCenter); " is 132.
Long Statement,TraceLab.UI.WPF.Utilities,ScopeHelper,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Utilities\ScopeHelper.cs,GetBottomBorderCenter,The length of the statement  "	Point bottomBorderCenter = new Point (scopeCenter.X' scopeCenter.Y + scopeNode.DataWithSize.Height / 2 - paddingBottom); " is 120.
Long Statement,TraceLab.UI.WPF.Utilities,ScopeHelper,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Utilities\ScopeHelper.cs,GetTopBorderCenter,The length of the statement  "	Point topBorderCenter = new Point (scopeCenter.X' scopeCenter.Y - scopeNode.DataWithSize.Height / 2 + paddingTop + topCanvasOffset); " is 132.
Long Statement,TraceLab.UI.WPF.Utilities,ScopeHelper,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Utilities\ScopeHelper.cs,GetOriginCanvasPoint,The length of the statement  "	Point originCanvasPoint = new Point (scopeCenter.X - scopeNode.DataWithSize.Width / 2' scopeCenter.Y - scopeNode.DataWithSize.Height / 2 + topCanvasOffset); " is 156.
Long Statement,TraceLab.UI.WPF.Utilities,BehaviourFactory,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Utilities\BehaviorFactory.cs,CreateCommandExecutionEventBehaviour,The length of the statement  "	DependencyProperty property = DependencyProperty.RegisterAttached (propertyName' typeof(ICommand)' ownerType' new PropertyMetadata (null' new ExecuteCommandOnRoutedEventBehaviour (routedEvent).PropertyChangedHandler)); " is 218.
Long Statement,TraceLab.UI.WPF.Utilities,GridLengthAnimation,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Utilities\GridLengthAnimation.cs,GetCurrentValue,The length of the statement  "		return new GridLength ((1 - animationClock.CurrentProgress.Value) * (fromVal - toVal) + toVal' this.From.IsStar ? GridUnitType.Star : GridUnitType.Pixel); " is 154.
Long Statement,TraceLab.UI.WPF.Utilities,GridLengthAnimation,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Utilities\GridLengthAnimation.cs,GetCurrentValue,The length of the statement  "		return new GridLength (animationClock.CurrentProgress.Value * (toVal - fromVal) + fromVal' this.From.IsStar ? GridUnitType.Star : GridUnitType.Pixel); " is 150.
Long Statement,TraceLab.UI.WPF.Views,FolderPickerDialog,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Views\FolderPickerDialog.xaml.cs,PkgFolderChooser_SelectedItemChanged,The length of the statement  "				TraceLabSDK.PackageSystem.IPackageReference reference = new TraceLab.Core.PackageSystem.PackageReference (package.Package); " is 123.
Long Statement,TraceLab.UI.WPF.Views,FolderPickerDialog,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Views\FolderPickerDialog.xaml.cs,PkgFolderChooser_SelectedItemChanged,The length of the statement  "			TraceLabSDK.PackageSystem.IPackageReference reference = new TraceLab.Core.PackageSystem.PackageReference (package.Package); " is 123.
Long Statement,TraceLab.UI.WPF.Views,GraphView,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Views\GraphView.cs,graphLayout_PreviewMouseLeftButtonDown,The length of the statement  "		//Checking on GraphLayout not this GraphView' because hit elemenent must be checked relative to the current GraphLayout origin' not constant graph view element " is 159.
Long Statement,TraceLab.UI.WPF.Views,GraphView,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Views\GraphView.cs,graphLayout_PreviewMouseLeftButtonDown,The length of the statement  "				TraceLab.UI.WPF.Controls.RoutePointThumb routePointThumb = obj.GetParent<TraceLab.UI.WPF.Controls.RoutePointThumb> (this); " is 122.
Long Statement,TraceLab.UI.WPF.Views,GraphView,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Views\GraphView.cs,HACK_Control_PreviewMouseMove,The length of the statement  "	if (parent != null && parent != PotentialLinkSource && DropCommand.CanExecute (new DropLinkEventArgs (PotentialLinkSource.Vertex' parent.Vertex' null))) { " is 154.
Long Statement,TraceLab.UI.WPF.Views,GraphView,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Views\GraphView.cs,HACK_Control_PreviewMouseLeftButtonUp,The length of the statement  "		/// somehow when you drag a link quickly to the existing node' but you don't really reach it or you are too far from node' then the target appears to be HACK_NODE " is 162.
Long Statement,TraceLab.UI.WPF.Views,GraphView,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Views\GraphView.cs,OnMouseLeftButtonDown,The length of the statement  "			// If the user clicked on an info panel' then we don't want to do anything (they exist "above" the graph and cannot be selected in the same way.) " is 145.
Long Statement,TraceLab.UI.WPF.Views,GraphView,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Views\GraphView.cs,OnMouseLeftButtonDown,The length of the statement  "			if (shouldStartDragging == true && hitElement.GetParent<TraceLab.UI.WPF.Views.Nodes.NodeInfoContainer> (this) != null) { " is 120.
Long Statement,TraceLab.UI.WPF.Views,GraphView,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Views\GraphView.cs,OnMouseMove,The length of the statement  "					Rect vertexBounds = new Rect (new Point (potentialSelectedVertex.TopLeftX' potentialSelectedVertex.TopLeftY)' new Size (potentialSelectedVertex.ActualWidth' potentialSelectedVertex.ActualHeight)); " is 196.
Long Statement,TraceLab.UI.WPF.Views,NewExperimentDialog,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Views\NewExperimentDialog.xaml.cs,CreateButton_Click,The length of the statement  "		if (MessageBox.Show (this' message' "File Replace Confirmation"' MessageBoxButton.YesNo' MessageBoxImage.Exclamation) == MessageBoxResult.Yes) { " is 144.
Long Statement,TraceLab.UI.WPF.Views,BenchmarkWizardDialog,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Views\BenchmarkWizardDialog.xaml.cs,AnimateToSize,The length of the statement  "	var heightAnim = new GridLengthAnimation (headerRowDefinition.Height' new GridLength (height)' new Duration (TimeSpan.FromMilliseconds (500))); " is 143.
Long Statement,TraceLab.UI.WPF.Views,BenchmarkWizardDialog,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Views\BenchmarkWizardDialog.xaml.cs,AnimateToSize,The length of the statement  "	var widthAnim = new GridLengthAnimation (keyBorderColumnDefinition.Width' new GridLength (width)' new Duration (TimeSpan.FromMilliseconds (500))); " is 146.
Long Statement,TraceLab.UI.WPF.Views,ComponentsLibraryWindow,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Views\ComponentsLibraryWindow.xaml.cs,ListView_MouseMove,The length of the statement  "		if (Math.Abs (current.X - m_dragOrigin.X) >= SystemParameters.MinimumHorizontalDragDistance || Math.Abs (current.Y - m_dragOrigin.Y) >= SystemParameters.MinimumVerticalDragDistance) { " is 183.
Long Statement,TraceLab.UI.WPF.Views,ComponentsLibraryWindow,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Views\ComponentsLibraryWindow.xaml.cs,OpenPkgReferenceManagerWindow,The length of the statement  "	importManager.Icon = new BitmapImage (new Uri ("pack://application:'''/TraceLab.UI.WPF;component/Resources/Icon_PkgReference16.png")); " is 134.
Long Statement,TraceLab.UI.WPF.Views,FilePickerDialog,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Views\FilePickerDialog.xaml.cs,PkgFileChooser_SelectedItemChanged,The length of the statement  "			TraceLabSDK.PackageSystem.IPackageReference reference = new TraceLab.Core.PackageSystem.PackageReference (package.Package); " is 123.
Long Statement,TraceLab.UI.WPF.Views,ReadonlyDockableGraph,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Views\ReadonlyDockableGraph.xaml.cs,OnMouseLeftButtonDown,The length of the statement  "			// If the user clicked on an info panel' then we don't want to do anything (they exist "above" the graph and cannot be selected in the same way.) " is 145.
Long Statement,TraceLab.UI.WPF.Views,ReadonlyDockableGraph,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Views\ReadonlyDockableGraph.xaml.cs,OnMouseMove,The length of the statement  "					Rect vertexBounds = new Rect (new Point (potentialSelectedVertex.TopLeftX' potentialSelectedVertex.TopLeftY)' new Size (potentialSelectedVertex.ActualWidth' potentialSelectedVertex.ActualHeight)); " is 196.
Long Statement,TraceLab.UI.WPF.Views,SettingsPage,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Views\SettingsPage.xaml.cs,CanMoveUp,The length of the statement  "	ObservableCollection<SettingsPathViewModel> sourceCollection = source.ItemsSource as ObservableCollection<SettingsPathViewModel>; " is 129.
Long Statement,TraceLab.UI.WPF.Views,SettingsPage,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Views\SettingsPage.xaml.cs,CanMoveDown,The length of the statement  "	ObservableCollection<SettingsPathViewModel> sourceCollection = source.ItemsSource as ObservableCollection<SettingsPathViewModel>; " is 129.
Long Statement,TraceLab.UI.WPF.Views,SettingsPage,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Views\SettingsPage.xaml.cs,DoEditExisting,The length of the statement  "	ObservableCollection<SettingsPathViewModel> sourceCollection = source.ItemsSource as ObservableCollection<SettingsPathViewModel>; " is 129.
Long Statement,TraceLab.UI.WPF.Views,SettingsPage,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Views\SettingsPage.xaml.cs,CanEditExisting,The length of the statement  "		ObservableCollection<SettingsPathViewModel> sourceCollection = source.ItemsSource as ObservableCollection<SettingsPathViewModel>; " is 129.
Long Statement,TraceLab.UI.WPF.Views,SettingsPage,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Views\SettingsPage.xaml.cs,DoDelete,The length of the statement  "	ObservableCollection<SettingsPathViewModel> sourceCollection = source.ItemsSource as ObservableCollection<SettingsPathViewModel>; " is 129.
Long Statement,TraceLab.UI.WPF.Views,SettingsPage,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Views\SettingsPage.xaml.cs,CanDelete,The length of the statement  "		ObservableCollection<SettingsPathViewModel> sourceCollection = source.ItemsSource as ObservableCollection<SettingsPathViewModel>; " is 129.
Long Statement,TraceLab.UI.WPF.Views,SettingsPage,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Views\SettingsPage.xaml.cs,TEMPLATE_PART_Text_KeyDown,The length of the statement  "	//        Dispatcher.BeginInvoke(new Action(() => { parent.Focus(); })' System.Windows.Threading.DispatcherPriority.Background' null); " is 134.
Long Statement,TraceLab.UI.WPF.Views,WorkspaceWindow,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Views\WorkspaceWindow.xaml.cs,tracesList_MouseDoubleClick,The length of the statement  "			if (!WorkspaceViewerLoader.LoadViewer (unit.Data' unit.FriendlyUnitName' WorkspaceUIAssemblyExtensions.Extensions' displaysFuncs' out error)) { " is 143.
Long Statement,TraceLab.UI.WPF.Views,WorkspaceWindow,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Views\WorkspaceWindow.xaml.cs,DisplayErrors,The length of the statement  "	if (viewModel != null && viewModel.TypeDefinitionErrors != null && viewModel.TypeDefinitionErrors.FirstOrDefault () != null) { " is 126.
Long Statement,TraceLab.UI.WPF.Views,MainWindow,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Views\MainWindow.xaml.cs,LoadLayout,The length of the statement  "			NLog.LogManager.GetCurrentClassLogger ().ErrorException ("Layout failed to be restored from previously saved layout.xml (in %APPDATA%/TraceLab). File was corrupted. Application restored default layout."' ex); " is 208.
Long Statement,TraceLab.UI.WPF.Views,MainWindow,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Views\MainWindow.xaml.cs,MainWindow_Closing,The length of the statement  "			var result = MessageBox.Show (TraceLab.Core.Messages.ClosingUnsavedDocumentWarning' "Modified Experiment Not Saved"' MessageBoxButton.YesNo' MessageBoxImage.Warning); " is 166.
Long Statement,TraceLab.UI.WPF.Views,MainWindow,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Views\MainWindow.xaml.cs,vm_ExperimentCompleted,The length of the statement  "		System.Windows.Threading.DispatcherTimer timer = new System.Windows.Threading.DispatcherTimer (System.Windows.Threading.DispatcherPriority.ApplicationIdle); " is 156.
Long Statement,TraceLab.UI.WPF.Views,MainWindow,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Views\MainWindow.xaml.cs,ShowDefineCompositeComponentWizard,The length of the statement  "		Action<TraceLab.Core.Components.CompositeComponentMetadataDefinition> howToAddToComponentLibrary = (TraceLab.Core.Components.CompositeComponentMetadataDefinition metadataDefinition) =>  { " is 187.
Long Statement,TraceLab.UI.WPF.Views,MainWindow,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Views\MainWindow.xaml.cs,ShowDefineCompositeComponentWizard,The length of the statement  "		var setup = new DefiningCompositeComponentSetupViewModel (experiment' appvm.SettingsViewModel.ComponentPaths' howToAddToComponentLibrary); " is 138.
Long Statement,TraceLab.UI.WPF.Views,MainWindow,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Views\MainWindow.xaml.cs,AboutTraceLabMouseLeftButtonUp,The length of the statement  "	AboutTraceLabContent info = new AboutTraceLabContent (TraceLab.Core.ViewModels.ApplicationViewModel.Version' TraceLab.Core.ViewModels.ApplicationViewModel.RegisteredUser); " is 171.
Long Statement,TraceLab.UI.WPF.Views,MainWindowBase,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Views\MainWindow.xaml.cs,ShowDefineBenchmarkDialog,The length of the statement  "		bool isValid = TraceLab.Core.ExperimentExecution.ExperimentValidator.ValidateExperiment ((IExperiment)experiment.TopLevel' appvm.WorkspaceViewModel.WorkspaceTypeDirectories' loggerNameRoot); " is 190.
Long Statement,TraceLab.UI.WPF.Views,MainWindowBase,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Views\MainWindow.xaml.cs,ShowDefineBenchmarkDialog,The length of the statement  "			DefiningBenchmarkViewModel definingBenchmarkViewModel = new DefiningBenchmarkViewModel ((Experiment)experiment.TopLevel' benchmarkDirectories' (TraceLab.Core.Components.ComponentsLibrary)appvm.ComponentLibraryViewModel' (TraceLab.Core.Workspaces.Workspace)appvm.WorkspaceViewModel' appvm.WorkspaceViewModel.WorkspaceTypeDirectories' appvm.SettingsViewModel.WebserviceAddress); " is 376.
Long Statement,TraceLab.UI.WPF.Controls.ZoomControl,ZoomControl,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Controls\ZoomControl\ZoomControl.cs,GetCoercedTranslateY,The length of the statement  "	return GetCoercedTranslate (baseValue' zoom' _presenter.ContentSize.Height' _presenter.DesiredSize.Height' ActualHeight); " is 121.
Long Statement,TraceLab.UI.WPF.Controls.ZoomControl,ZoomControl,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Controls\ZoomControl\ZoomControl.cs,ZoomControl_MouseWheel,The length of the statement  "	DoZoom (Math.Max (1 / MaxZoomDelta' Math.Min (MaxZoomDelta' e.Delta / 10000.0 * ZoomDeltaMultiplier + 1))' origoPosition' mousePosition' mousePosition); " is 152.
Long Statement,TraceLab.UI.WPF.ViewModels,BaseLevelExperimentViewModel,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\ViewModels\BaseLevelExperimentViewModel.cs,FindOptimalLocation,The length of the statement  "			suggestedLocation = new Point (vertexControl.TopLeftX + vertexControl.ActualWidth' vertexControl.TopLeftY + vertexControl.ActualHeight + padding); " is 146.
Long Statement,TraceLab.UI.WPF.ViewModels,BaseLevelExperimentViewModel,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\ViewModels\BaseLevelExperimentViewModel.cs,FindOptimalLocation,The length of the statement  "					suggestedLocation = new Point (suggestedLocation.X + data.X - (data.Width / 2)' suggestedLocation.Y + data.Y - (data.Height / 2) + labelBorderHeight); " is 150.
Long Statement,TraceLab.UI.WPF.ViewModels,DefiningCompositeComponentSetupViewModel,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\ViewModels\DefiningCompositeComponentSetupViewModel.cs,ShouldOverwriteFile,The length of the statement  "		string messageBoxText = String.Format (TraceLab.Core.Messages.ShouldOverwriteFileQuestion' CompositeComponentLocationFilePath); " is 127.
Long Statement,TraceLab.UI.WPF.ViewModels,DefiningCompositeComponentSetupViewModel,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\ViewModels\DefiningCompositeComponentSetupViewModel.cs,ShouldOverwriteFile,The length of the statement  "		MessageBoxResult result = MessageBox.Show (messageBoxText' TraceLab.Core.Messages.DoYouWantToContinue' MessageBoxButton.YesNo' MessageBoxImage.Warning); " is 152.
Long Statement,TraceLab.UI.WPF.ViewModels,TopLevelEditableExperimentViewModel,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\ViewModels\TopLevelEditableExperimentViewModel.cs,RemoveSelectedNodesFunc,The length of the statement  "	MessageBoxResult result = MessageBox.Show (TraceLab.Core.Messages.ConfirmRemoveSelectedNodes' TraceLab.Core.Messages.DoYouWantToContinue' MessageBoxButton.YesNo' MessageBoxImage.Warning); " is 187.
Long Statement,TraceLab.UI.WPF.ViewModels,TopLevelEditableExperimentViewModel,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\ViewModels\TopLevelEditableExperimentViewModel.cs,RemoveInfoForSelectedNodes,The length of the statement  "		if (vert.IsSelected == true && vert != null && (vert is ComponentNode || vert is ExperimentDecisionNode || vert is CompositeComponentNode)) { " is 141.
Long Statement,TraceLab.UI.WPF.ViewModels,TopLevelEditableExperimentViewModel,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\ViewModels\TopLevelEditableExperimentViewModel.cs,CanDropFunc,The length of the statement  "		canDrop |= (linkArgs != null && IsValidLinkSource (sourceNode) && (linkArgs.ExistingEdge != null || IsValidLinkTarget (targetNode))); " is 133.
Long Statement,TraceLab.UI.WPF.ViewModels,TopLevelEditableExperimentViewModel,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\ViewModels\TopLevelEditableExperimentViewModel.cs,IsValidLinkSource,The length of the statement  "	if (node != null && (node is ExperimentStartNode || node is ComponentNode || node is ExperimentDecisionNode || node is CompositeComponentNode || node is ExitDecisionNode)) { " is 173.
Long Statement,TraceLab.UI.WPF.ViewModels,TopLevelEditableExperimentViewModel,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\ViewModels\TopLevelEditableExperimentViewModel.cs,IsValidLinkTarget,The length of the statement  "	if (node != null && node.ID != "HACK_Node" && node is ScopeNode == false && (node is ExperimentEndNode || node is ComponentNode || node is ExperimentDecisionNode || node is CompositeComponentNode)) { " is 199.
Long Statement,TraceLab.UI.WPF.ViewModels,BenchmarkWizardViewModel,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\ViewModels\BenchmarkWizardViewModel.cs,CanAdvanceState,The length of the statement  "	return SelectedBenchmark != null && SelectedBenchmark.ComponentTemplate != null && CurrentState != BenchmarkWizardState.Process; " is 128.
Long Statement,TraceLab.UI.WPF.ViewModels,BenchmarkWizardViewModel,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\ViewModels\BenchmarkWizardViewModel.cs,DoAdvanceState,The length of the statement  "		AuthenticationViewModel = new AuthenticationAndUploadViewModel<ContestResultsPublishedResponse> (m_benchmarkWizard.WebService' m_benchmarkWizard.ExecutePublishResults' Messages.UploadingContestResultsToWebsite' Messages.ContestResultsPublished); " is 245.
Long Statement,TraceLab.UI.WPF.ViewModels,BenchmarkWizardViewModel,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\ViewModels\BenchmarkWizardViewModel.cs,CanBacktrackState,The length of the statement  "	return CurrentState != BenchmarkWizardState.SelectBenchmark && CurrentState != BenchmarkWizardState.AuthenticationAndUpload; " is 124.
Long Statement,TraceLab.UI.WPF.ViewModels,BenchmarkWizardViewModel,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\ViewModels\BenchmarkWizardViewModel.cs,ExecuteDownloadContestPackage,The length of the statement  "			//although UI should prevent user trying to download contest by not showing the download button' catch exceptions just in case " is 126.
Long Statement,TraceLab.UI.WPF.ViewModels,BenchmarkWizardViewModel,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\ViewModels\BenchmarkWizardViewModel.cs,ExecuteDownloadContestPackage,The length of the statement  "			//although UI should prevent user trying to download contest by not showing the download button' catch exceptions just in case " is 126.
Long Statement,TraceLab.UI.WPF.ViewModels,IOSpecFilter,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\ViewModels\ComponentLibraryNodes\IOSpecFilter.cs,RefreshCurrentlyAvailableFilterTypes,The length of the statement  "		AvailableFilteringTypes = allAvailableTypes.Where (filterType => !selectedTypes.Any (selectedType => selectedType.Equals (filterType))); " is 136.
Long Statement,TraceLab.UI.WPF.ViewModels,IOSpecFilter,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\ViewModels\ComponentLibraryNodes\IOSpecFilter.cs,RefreshCurrentlyAvailableFilterTypes,The length of the statement  "		AvailableFilteringTypes = allAvailableTypes.Where (filterType => !selectedTypes.Any (selectedType => selectedType.Equals (filterType)) || filterType.Equals (FilterByDataType)); " is 176.
Long Statement,TraceLab.UI.WPF.ViewModels,DefiningBenchmarkViewModel,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\ViewModels\DefiningBenchmarkViewModel.cs,DoSelectBenchmarkPath,The length of the statement  "			tryagain = Utilities.FileOutsideDirectoryWarningBox.ShowWarningBox (filePath' m_benchmarksDirectories' TraceLab.Core.Messages.DefineBenchmarkOutsideBenchmarkDirectoryWarning); " is 175.
Long Statement,TraceLab.UI.WPF.ViewModels,FileDialogs,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\ViewModels\FileDialogs.cs,GetCompositeComponentFilename,The length of the statement  "	return GetFilename<Ookii.Dialogs.Wpf.VistaSaveFileDialog> ("Save component as"' ".tcml"' "Tracelab Composite Components Files|*.tcml"); " is 135.
Long Statement,TraceLab.UI.WPF.ViewModels,SubLevelExperimentViewModel,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\ViewModels\SubLevelExperimentViewModel.cs,GetTopOwnerNode,The length of the statement  "			throw new InvalidOperationException ("Application is at invalid state. Sublevel experiment always need to have an owner."); " is 123.
Long Statement,TraceLab.UI.WPF.ViewModels,SettingsViewModel,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\ViewModels\SettingsViewModel.cs,ApplyChanges,The length of the statement  "		System.Windows.MessageBox.Show ("Changes to types require a restart of TraceLab."' "TraceLab restart required"' System.Windows.MessageBoxButton.OK' System.Windows.MessageBoxImage.Information); " is 192.
Long Statement,TraceLab.UI.WPF.ViewModels,ApplicationViewModelWrapper,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\ViewModels\ApplicationViewModelWrapper.cs,SetBenchmarkWizard,The length of the statement  "	BenchmarkWizardViewModel = new BenchmarkWizardViewModel (appModel.BenchmarkWizard' appModel.Workspace' (TraceLab.Core.Components.ComponentsLibrary)appModel.ComponentLibraryViewModel); " is 183.
Long Statement,TraceLab.UI.WPF.ViewModels,ApplicationViewModelWrapper,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\ViewModels\ApplicationViewModelWrapper.cs,ComponentLibraryViewModel_Rescanned,The length of the statement  "		var refreshedExperiment = ExperimentManager.ReloadExperiment ((Experiment)ExperimentViewModel.TopLevel' (TraceLab.Core.Components.ComponentsLibrary)ComponentLibraryViewModel); " is 175.
Long Statement,TraceLab.UI.WPF.ViewModels,ApplicationViewModelWrapper,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\ViewModels\ApplicationViewModelWrapper.cs,NewFunc,The length of the statement  "	NewExperimentDialog dialog = new NewExperimentDialog (parentWindow' this.SettingsViewModel.DefaultExperimentsDirectory); " is 120.
Long Statement,TraceLab.UI.WPF.ViewModels,ApplicationViewModelWrapper,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\ViewModels\ApplicationViewModelWrapper.cs,NewFunc,The length of the statement  "		ApplicationViewModel newApplicationViewModel = ApplicationViewModel.CreateNewApplicationViewModel (m_viewModel' experiment); " is 124.
Long Statement,TraceLab.UI.WPF.ViewModels,ApplicationViewModelWrapper,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\ViewModels\ApplicationViewModelWrapper.cs,NewFunc,The length of the statement  "		RecentExperimentsHelper.UpdateRecentExperimentList (TraceLab.Core.Settings.Settings.RecentExperimentsPath' experiment.ExperimentInfo.FilePath); " is 143.
Long Statement,TraceLab.UI.WPF.ViewModels,ApplicationViewModelWrapper,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\ViewModels\ApplicationViewModelWrapper.cs,NewFunc,The length of the statement  "			NLog.LogManager.GetCurrentClassLogger ().ErrorException (String.Format ("Failed to Save File {0}. {1}"' file' e.Message)' e); " is 125.
Long Statement,TraceLab.UI.WPF.ViewModels,ApplicationViewModelWrapper,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\ViewModels\ApplicationViewModelWrapper.cs,SaveFunc,The length of the statement  "				NLog.LogManager.GetCurrentClassLogger ().ErrorException (String.Format ("Failed to Save File {0}. {1}"' file' e.Message)' e); " is 125.
Long Statement,TraceLab.UI.WPF.ViewModels,ApplicationViewModelWrapper,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\ViewModels\ApplicationViewModelWrapper.cs,SaveAsFunc,The length of the statement  "				NLog.LogManager.GetCurrentClassLogger ().ErrorException (String.Format ("Failed to Save File {0}. {1}"' file' e.Message)' e); " is 125.
Long Statement,TraceLab.UI.WPF.ViewModels,ApplicationViewModelWrapper,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\ViewModels\ApplicationViewModelWrapper.cs,SaveAsFunc,The length of the statement  "				m_viewModel.WorkspaceViewModel = new WorkspaceViewModel ((TraceLab.Core.Workspaces.Workspace)m_viewModel.WorkspaceViewModel' experiment.ExperimentInfo.Id); " is 155.
Long Statement,TraceLab.UI.WPF.ViewModels,ApplicationViewModelWrapper,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\ViewModels\ApplicationViewModelWrapper.cs,OpenSettingsFunc,The length of the statement  "	settingsWindow.Icon = new BitmapImage (new Uri ("pack://application:'''/TraceLab.UI.WPF;component/Resources/Icon_Settings16.png")); " is 131.
Long Statement,TraceLab.UI.WPF.ViewModels,ApplicationViewModelWrapper,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\ViewModels\ApplicationViewModelWrapper.cs,OpenExperiment,The length of the statement  "		var experiment = ExperimentManager.Load (file' (TraceLab.Core.Components.ComponentsLibrary)m_viewModel.ComponentLibraryViewModel); " is 130.
Long Statement,TraceLab.UI.WPF.ViewModels,ApplicationViewModelWrapper,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\ViewModels\ApplicationViewModelWrapper.cs,OpenExperiment,The length of the statement  "		ApplicationViewModel newApplicationViewModel = ApplicationViewModel.CreateNewApplicationViewModel (m_viewModel' experiment); " is 124.
Long Statement,TraceLab.UI.WPF.ViewModels,ApplicationViewModelWrapper,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\ViewModels\ApplicationViewModelWrapper.cs,OpenInWindow,The length of the statement  "	if (m_viewModel.Experiment == null || (m_viewModel.Experiment != null && m_viewModel.Experiment.IsModified == false && m_viewModel.Experiment.VertexCount == 2)) { " is 162.
Long Statement,TraceLab.UI.WPF.ViewModels,ComponentsLibraryViewModelWrapper,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\ViewModels\ComponentsLibraryViewModelWrapper.cs,ApplyFilter,The length of the statement  "	return !ShouldFilterNode (metadataDefinition' m_lowercaseFilter) && !ShouldFilterNodeBasedOnIoSpecFilter (metadataDefinition); " is 126.
Long Statement,TraceLab.UI.WPF.ViewModels,ComponentsLibraryViewModelWrapper,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\ViewModels\ComponentsLibraryViewModelWrapper.cs,OpenOrganizerFunc,The length of the statement  "	organizerWindow.Icon = new BitmapImage (new Uri ("pack://application:'''/TraceLab.UI.WPF;component/Resources/Icon_Organizer16.png")); " is 133.
Long Statement,TraceLab.UI.WPF.ViewModels,ComponentsLibraryViewModelWrapper,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\ViewModels\ComponentsLibraryViewModelWrapper.cs,IoSpecFiltersCollectionChanged,The length of the statement  "			//if filter is not empty' meaning if the filering type is selected and at least one of input/output checkboxes is checked. " is 122.
Long Statement,TraceLab.UI.WPF.ViewModels,ComponentsLibraryViewModelWrapper,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\ViewModels\ComponentsLibraryViewModelWrapper.cs,IoSpecFiltersCollectionChanged,The length of the statement  "			//if filter is not empty' meaning if the filering type is selected and at least one of input/output checkboxes is checked. " is 122.
Long Statement,TraceLab.UI.WPF.ViewModels,ComponentsLibraryViewModelWrapper,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\ViewModels\ComponentsLibraryViewModelWrapper.cs,OnIoSpecFilterChanged,The length of the statement  "	//apply new filters in all other cases (couse other properties like RequiresInput or RequiresOutput might have been changed " is 123.
Long Statement,TraceLab.UI.WPF.ViewModels,ExperimentViewModel,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\ViewModels\ExperimentViewModel.cs,RunExperimentFunc,The length of the statement  "				NLog.LogManager.GetCurrentClassLogger ().Error (String.Format ("Experiment failed to run. Some component dependencies could not be resolved. Please re-scan the components library to determine which components are failing.\n{0}"' ex.Message)); " is 242.
Long Statement,TraceLab.UI.WPF.ViewModels,ExperimentViewModel,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\ViewModels\ExperimentViewModel.cs,PackExperimentFunc,The length of the statement  "		MessageBoxResult result = MessageBox.Show ("To create a package' the experiment needs to be saved first.\nWould you like to proceed?"' "Save modified experiment"' MessageBoxButton.YesNo' MessageBoxImage.Question); " is 213.
Long Statement,TraceLab.UI.WPF.ViewModels,ExperimentViewModel,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\ViewModels\ExperimentViewModel.cs,PackExperimentFunc,The length of the statement  "				isExperimentSaved = ExperimentManager.Save (this.CurrentView.GetExperiment ()' this.CurrentView.ExperimentInfo.FilePath); " is 121.
Long Statement,TraceLab.UI.WPF.ViewModels,ExperimentViewModel,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\ViewModels\ExperimentViewModel.cs,PackExperimentFunc,The length of the statement  "				MessageBox.Show ("Package building process interrupted. The following error ocurred:\n" + e.Message' "Error while saving experiment"' MessageBoxButton.OK' MessageBoxImage.Error); " is 178.
Long Statement,TraceLab.UI.WPF.ViewModels,ExperimentViewModel,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\ViewModels\ExperimentViewModel.cs,PackExperimentFunc,The length of the statement  "		TraceLab.UI.WPF.Views.PackageBuilder.PackageBuilderMainWindow pkgBuilderWindow = new TraceLab.UI.WPF.Views.PackageBuilder.PackageBuilderMainWindow (originalExperiment' AppVMWrapper.WorkspaceViewModel.SupportedTypes); " is 216.
Long Statement,TraceLab.UI.WPF.ViewModels,WorkspaceViewModelWrapper,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\ViewModels\WorkspaceViewModelWrapper.cs,InsertUnit,The length of the statement  "	Dispatch.Invoke (new Action (() => m_units.Insert (index' new WpfWorkspaceUnitWrapper (Dispatch' unit)))' DispatcherPriority.Send); " is 131.
Long Statement,TraceLab.UI.WPF.ViewModels,WorkspaceViewModelWrapper,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\ViewModels\WorkspaceViewModelWrapper.cs,RemoveUnit,The length of the statement  "	Dispatch.Invoke (new Action (() => m_units.Remove (new WpfWorkspaceUnitWrapper (Dispatch' unit)))' DispatcherPriority.Send); " is 124.
Long Statement,TraceLab.UI.WPF.Views.Nodes,DecisionInfoControlBase,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Views\Nodes\DecisionInfoControlBase.cs,metadata_RequestLatestCode,The length of the statement  "	//the update of document binding must be invoked on main GUI thread - the same thread that has constructed the decision node info control " is 137.
Long Statement,TraceLab.UI.WPF.Views.Nodes,DecisionInfoControlBase,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Views\Nodes\DecisionInfoControlBase.cs,metadata_RequestLatestCode,The length of the statement  "	//if it was not invoked on main ui thread' it would crash tracelab if info control was open' decision code was changed' and experiment was run.  " is 143.
Long Statement,TraceLab.UI.WPF.Views.Nodes,DecisionInfoControlBase,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Views\Nodes\DecisionInfoControlBase.cs,metadata_RequestLatestCode,The length of the statement  "	//Experiment running happens in seperate thread' and one of action that is done is the recompilaton of (dirty changed) decision code'  " is 133.
Long Statement,TraceLab.UI.WPF.Views.Nodes,DecisionInfoControlBase,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Views\Nodes\DecisionInfoControlBase.cs,CompileDecisionModuleFunc,The length of the statement  "			TraceLab.Core.Decisions.DecisionCompilationRunner.CompileDecision (node' m_experiment' workspaceTypeDirectories' loggerNameRoot); " is 129.
Long Statement,TraceLab.UI.WPF.Views.Nodes,ExitScopeNodeControl,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Views\Nodes\ExitScopeNodeControl.xaml.cs,MoveNodeAlongScopeBorder,The length of the statement  "	Point? intersection = ScopeHelper.GetIntersection (m_scopeNode' m_scopeNode.ExitDecisionNode' 15' 15' 15' 15' m_labelHeight); " is 125.
Long Statement,TraceLab.UI.WPF.Views.Nodes,EnterScopeNodeControl,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Views\Nodes\EnterScopeNodeControl.xaml.cs,MoveNodeAlongScopeBorder,The length of the statement  "	Point? intersection = ScopeHelper.GetIntersection (m_scopeNode' m_scopeNode.DecisionNode' 15' 15' 15' 15' m_labelHeight); " is 121.
Long Statement,TraceLab.UI.WPF.Views.Nodes,NodeInfoContainer,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Views\Nodes\NodeInfoContainer.xaml.cs,OnRender,The length of the statement  "		CombinedGeometry clipGeometry = new CombinedGeometry (GeometryCombineMode.Exclude' totalRectangleGeometry' elementRectangleGeometry); " is 133.
Long Statement,TraceLab.UI.WPF.Views.PackageBuilder,PackageBuilderMainWindow,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Views\PackageBuilder\PackageBuilderMainWindow.xaml.cs,BuildPkgButton_Click,The length of the statement  "				MessageBox.Show ("Package already exists in: " + pkgTempDirectory' "Package Creation Error"' MessageBoxButton.OK' MessageBoxImage.Error); " is 137.
Long Statement,TraceLab.UI.WPF.Views.PackageBuilder,PackageBuilderMainWindow,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Views\PackageBuilder\PackageBuilderMainWindow.xaml.cs,BuildPkgButton_Click,The length of the statement  "				MessageBox.Show ("Error creating package: " + ex.Message' "Package Creation Error"' MessageBoxButton.OK' MessageBoxImage.Error); " is 128.
Long Statement,TraceLab.UI.WPF.Views.PackageBuilder,PackageBuilderMainWindow,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Views\PackageBuilder\PackageBuilderMainWindow.xaml.cs,BuildPkgButton_Click,The length of the statement  "						MessageBox.Show ("Error creating package: " + ex.Message' "Package Creation Error"' MessageBoxButton.OK' MessageBoxImage.Error); " is 128.
Long Statement,TraceLab.UI.WPF.Views.PackageBuilder,PackageBuilderMainWindow,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Views\PackageBuilder\PackageBuilderMainWindow.xaml.cs,BuildPkgButton_Click,The length of the statement  "			MessageBox.Show ("Unable to create package. Error: " + error.Message' "Package Creation Error"' MessageBoxButton.OK' MessageBoxImage.Error); " is 140.
Long Statement,TraceLab.UI.WPF.Views.PackageBuilder,PackageBuilderMainWindow,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Views\PackageBuilder\PackageBuilderMainWindow.xaml.cs,BuildPkgButton_Click,The length of the statement  "			MessageBox.Show ("Unable to create package - Unauthorized access: " + error.Message' "Package Creation Error"' MessageBoxButton.OK' MessageBoxImage.Error); " is 155.
Long Statement,TraceLab.UI.WPF.Views.PackageBuilder,PackageBuilderMainWindow,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Views\PackageBuilder\PackageBuilderMainWindow.xaml.cs,BuildPkgButton_Click,The length of the statement  "			MessageBox.Show ("Unable to cleanup after package creation. Error: " + error.Message' "After Package Cleanup Failure"' MessageBoxButton.OK' MessageBoxImage.Exclamation); " is 169.
Long Statement,TraceLab.UI.WPF.Views.PackageBuilder,PackageBuilderMainWindow,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Views\PackageBuilder\PackageBuilderMainWindow.xaml.cs,BuildPkgButton_Click,The length of the statement  "			MessageBox.Show ("Unable to cleanup after package creation. Unauthorized access: " + error.Message' "After Package Cleanup Failure"' MessageBoxButton.OK' MessageBoxImage.Warning); " is 179.
Long Statement,TraceLab.UI.WPF.Views.PackageBuilder,PackageBuilderMainWindow,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Views\PackageBuilder\PackageBuilderMainWindow.xaml.cs,BuildPkgButton_Click,The length of the statement  "		MessageBox.Show ("Package \"" + info.Name + "\" was built successfully."' "Package Created"' MessageBoxButton.OK' MessageBoxImage.Information); " is 143.
Long Statement,TraceLab.UI.WPF,WpfMain,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\WpfMain.cs,TryActivateExistingWindow,The length of the statement  "			//check if window has experiment with same filepath opened (in windows case does not matter - since we are already in WPF just ignore the case) " is 143.
Long Statement,TraceLab.UI.WPF,WpfMain,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\WpfMain.cs,TryActivateExistingWindow,The length of the statement  "			if (applicationViewModelWrapper.ExperimentViewModel != null && applicationViewModelWrapper.ExperimentViewModel.TopLevel.ExperimentInfo.FilePath.Equals (experimentFilepath' StringComparison.OrdinalIgnoreCase)) { " is 210.
Complex Conditional,TraceLab.UI.WPF.Controls,RichTextBoxWithIntellisense,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Controls\RichTextBoxWithIntellisense.cs,OnKeyUp,The conditional expression  "(e.Key >= Key.A && e.Key <= Key.Z) || e.Key == Key.Back || e.Key == Key.Delete"  is complex.
Complex Conditional,TraceLab.UI.WPF.Controls,NodeGraphLayout,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Controls\NodeGraphLayout.cs,MeasureOverride,The conditional expression  "Graph != null && (desiredSize.IsEmpty || (desiredSize.Width == 0 && desiredSize.Height == 0))"  is complex.
Complex Conditional,TraceLab.UI.WPF.Controls,NodeGraphLayout,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Controls\NodeGraphLayout.cs,MeasureOverride,The conditional expression  "!double.IsNaN (bottom) && !double.IsNaN (right) && !double.IsInfinity (left) && !double.IsInfinity (top)"  is complex.
Complex Conditional,TraceLab.UI.WPF.Converters,NegateBoolConverter,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Converters\NegateBoolConverter.cs,Convert,The conditional expression  "(targetType == typeof(bool) || targetType == typeof(bool?)) && value != null && value.GetType () == typeof(bool)"  is complex.
Complex Conditional,TraceLab.UI.WPF.Utilities,ScopeHelper,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Utilities\ScopeHelper.cs,TryFindIntersection,The conditional expression  "ua >= 0 && ua <= 1 && ub >= 0 && ub <= 1"  is complex.
Complex Conditional,TraceLab.UI.WPF.ViewModels,TopLevelEditableExperimentViewModel,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\ViewModels\TopLevelEditableExperimentViewModel.cs,RemoveNodeFunc,The conditional expression  "vert != null && (vert is ComponentNode || vert is ExperimentDecisionNode || vert is CompositeComponentNode)"  is complex.
Complex Conditional,TraceLab.UI.WPF.ViewModels,TopLevelEditableExperimentViewModel,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\ViewModels\TopLevelEditableExperimentViewModel.cs,CanRemoveNodeFunc,The conditional expression  "vert != null && (vert is ComponentNode || vert is ExperimentDecisionNode || vert is CompositeComponentNode)"  is complex.
Complex Conditional,TraceLab.UI.WPF.ViewModels,TopLevelEditableExperimentViewModel,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\ViewModels\TopLevelEditableExperimentViewModel.cs,RemoveInfoForSelectedNodes,The conditional expression  "vert.IsSelected == true && vert != null && (vert is ComponentNode || vert is ExperimentDecisionNode || vert is CompositeComponentNode)"  is complex.
Complex Conditional,TraceLab.UI.WPF.ViewModels,TopLevelEditableExperimentViewModel,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\ViewModels\TopLevelEditableExperimentViewModel.cs,IsValidLinkSource,The conditional expression  "node != null && (node is ExperimentStartNode || node is ComponentNode || node is ExperimentDecisionNode || node is CompositeComponentNode || node is ExitDecisionNode)"  is complex.
Complex Conditional,TraceLab.UI.WPF.ViewModels,TopLevelEditableExperimentViewModel,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\ViewModels\TopLevelEditableExperimentViewModel.cs,IsValidLinkTarget,The conditional expression  "node != null && node.ID != "HACK_Node" && node is ScopeNode == false && (node is ExperimentEndNode || node is ComponentNode || node is ExperimentDecisionNode || node is CompositeComponentNode)"  is complex.
Complex Conditional,TraceLab.UI.WPF.ViewModels,ApplicationViewModelWrapper,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\ViewModels\ApplicationViewModelWrapper.cs,OpenInWindow,The conditional expression  "m_viewModel.Experiment == null || (m_viewModel.Experiment != null && m_viewModel.Experiment.IsModified == false && m_viewModel.Experiment.VertexCount == 2)"  is complex.
Complex Conditional,TraceLab.UI.WPF.Views.Nodes,ExitLoopScopeNodeControl,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Views\Nodes\ExitLoopScopeNodeControl.xaml.cs,ScopeNodeData_PropertyChanged,The conditional expression  "e.PropertyName == "Width" || e.PropertyName == "Height" || e.PropertyName == "X" || e.PropertyName == "Y""  is complex.
Complex Conditional,TraceLab.UI.WPF.Views.Nodes,EnterLoopScopeNodeControl,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Views\Nodes\EnterLoopScopeNodeControl.xaml.cs,ScopeNodeData_PropertyChanged,The conditional expression  "e.PropertyName == "Width" || e.PropertyName == "Height" || e.PropertyName == "X" || e.PropertyName == "Y""  is complex.
Complex Conditional,TraceLab.UI.WPF.Views.Nodes,ExitScopeNodeControl,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Views\Nodes\ExitScopeNodeControl.xaml.cs,ScopeNodeData_PropertyChanged,The conditional expression  "e.PropertyName == "Width" || e.PropertyName == "Height" || e.PropertyName == "X" || e.PropertyName == "Y""  is complex.
Complex Conditional,TraceLab.UI.WPF.Views.Nodes,EnterScopeNodeControl,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Views\Nodes\EnterScopeNodeControl.xaml.cs,ScopeNodeData_PropertyChanged,The conditional expression  "e.PropertyName == "Width" || e.PropertyName == "Height" || e.PropertyName == "X" || e.PropertyName == "Y""  is complex.
Virtual Method Call from Constructor,TraceLab.UI.WPF.Views.Nodes,DecisionInfoControlBase,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Views\Nodes\DecisionInfoControlBase.cs,DecisionInfoControlBase,The constructor "DecisionInfoControlBase" calls a virtual method "InitRichTextBoxIntellisenseTrigger".
Empty Catch Block,TraceLab.UI.WPF.Controls,RichToolTip,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Controls\RichToolTip.cs,HookupParentPopup,The method has an empty catch block.
Empty Catch Block,TraceLab.UI.WPF.Views,FilePickerDialog,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Views\FilePickerDialog.xaml.cs,TextBox_TextChanged,The method has an empty catch block.
Empty Catch Block,WpfMentor.CommandParameterBindings,DataResourceBindingExtension,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Resources\DataResourceWithNullCommandSupport.cs,ProvideValue,The method has an empty catch block.
Magic Number,TraceLab.UI.WPF.Adorners,ResizingAdorner,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Adorners\ResizingAdorner.cs,BuildAdornerCorner,The following statement contains a magic number: cornerThumb.Height = cornerThumb.Width = 10;  
Magic Number,TraceLab.UI.WPF.Adorners,ResizingAdorner,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Adorners\ResizingAdorner.cs,BuildAdornerCorner,The following statement contains a magic number: cornerThumb.Opacity = 0.40;  
Magic Number,TraceLab.UI.WPF.Adorners,ResizingAdorner,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Adorners\ResizingAdorner.cs,ArrangeOverride,The following statement contains a magic number: topLeft.Arrange (new Rect (-adornerWidth / 2' -adornerHeight / 2' adornerWidth' adornerHeight));  
Magic Number,TraceLab.UI.WPF.Adorners,ResizingAdorner,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Adorners\ResizingAdorner.cs,ArrangeOverride,The following statement contains a magic number: topLeft.Arrange (new Rect (-adornerWidth / 2' -adornerHeight / 2' adornerWidth' adornerHeight));  
Magic Number,TraceLab.UI.WPF.Adorners,ResizingAdorner,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Adorners\ResizingAdorner.cs,ArrangeOverride,The following statement contains a magic number: topRight.Arrange (new Rect (desiredWidth - adornerWidth / 2' -adornerHeight / 2' adornerWidth' adornerHeight));  
Magic Number,TraceLab.UI.WPF.Adorners,ResizingAdorner,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Adorners\ResizingAdorner.cs,ArrangeOverride,The following statement contains a magic number: topRight.Arrange (new Rect (desiredWidth - adornerWidth / 2' -adornerHeight / 2' adornerWidth' adornerHeight));  
Magic Number,TraceLab.UI.WPF.Adorners,ResizingAdorner,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Adorners\ResizingAdorner.cs,ArrangeOverride,The following statement contains a magic number: bottomLeft.Arrange (new Rect (-adornerWidth / 2' desiredHeight - adornerHeight / 2' adornerWidth' adornerHeight));  
Magic Number,TraceLab.UI.WPF.Adorners,ResizingAdorner,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Adorners\ResizingAdorner.cs,ArrangeOverride,The following statement contains a magic number: bottomLeft.Arrange (new Rect (-adornerWidth / 2' desiredHeight - adornerHeight / 2' adornerWidth' adornerHeight));  
Magic Number,TraceLab.UI.WPF.Adorners,ResizingAdorner,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Adorners\ResizingAdorner.cs,ArrangeOverride,The following statement contains a magic number: bottomRight.Arrange (new Rect (desiredWidth - adornerWidth / 2' desiredHeight - adornerHeight / 2' adornerWidth' adornerHeight));  
Magic Number,TraceLab.UI.WPF.Adorners,ResizingAdorner,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Adorners\ResizingAdorner.cs,ArrangeOverride,The following statement contains a magic number: bottomRight.Arrange (new Rect (desiredWidth - adornerWidth / 2' desiredHeight - adornerHeight / 2' adornerWidth' adornerHeight));  
Magic Number,TraceLab.UI.WPF.Controls.AdornedControl,FrameworkElementAdorner,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Controls\AdornedControl\FrameworkElementAdorner.cs,DetermineX,The following statement contains a magic number: switch (child.HorizontalAlignment) {  case HorizontalAlignment.Left: {  	if (horizontalAdornerPlacement == AdornerPlacement.Outside) {  		return -child.DesiredSize.Width + offsetX;  	}  	else {  		return offsetX;  	}  }  case HorizontalAlignment.Right: {  	if (horizontalAdornerPlacement == AdornerPlacement.Outside) {  		double adornedWidth = AdornedElement.ActualWidth;  		return adornedWidth + offsetX;  	}  	else {  		double adornerWidth = this.child.DesiredSize.Width;  		double adornedWidth = AdornedElement.ActualWidth;  		double x = adornedWidth - adornerWidth;  		return x + offsetX;  	}  }  case HorizontalAlignment.Center: {  	double adornerWidth = this.child.DesiredSize.Width;  	double adornedWidth = AdornedElement.ActualWidth;  	double x = (adornedWidth / 2) - (adornerWidth / 2);  	return x + offsetX;  }  case HorizontalAlignment.Stretch: {  	return 0.0;  }  }  
Magic Number,TraceLab.UI.WPF.Controls.AdornedControl,FrameworkElementAdorner,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Controls\AdornedControl\FrameworkElementAdorner.cs,DetermineX,The following statement contains a magic number: switch (child.HorizontalAlignment) {  case HorizontalAlignment.Left: {  	if (horizontalAdornerPlacement == AdornerPlacement.Outside) {  		return -child.DesiredSize.Width + offsetX;  	}  	else {  		return offsetX;  	}  }  case HorizontalAlignment.Right: {  	if (horizontalAdornerPlacement == AdornerPlacement.Outside) {  		double adornedWidth = AdornedElement.ActualWidth;  		return adornedWidth + offsetX;  	}  	else {  		double adornerWidth = this.child.DesiredSize.Width;  		double adornedWidth = AdornedElement.ActualWidth;  		double x = adornedWidth - adornerWidth;  		return x + offsetX;  	}  }  case HorizontalAlignment.Center: {  	double adornerWidth = this.child.DesiredSize.Width;  	double adornedWidth = AdornedElement.ActualWidth;  	double x = (adornedWidth / 2) - (adornerWidth / 2);  	return x + offsetX;  }  case HorizontalAlignment.Stretch: {  	return 0.0;  }  }  
Magic Number,TraceLab.UI.WPF.Controls.AdornedControl,FrameworkElementAdorner,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Controls\AdornedControl\FrameworkElementAdorner.cs,DetermineY,The following statement contains a magic number: switch (child.VerticalAlignment) {  case VerticalAlignment.Top: {  	if (verticalAdornerPlacement == AdornerPlacement.Outside) {  		return -child.DesiredSize.Height + offsetY;  	}  	else {  		return offsetY;  	}  }  case VerticalAlignment.Bottom: {  	if (verticalAdornerPlacement == AdornerPlacement.Outside) {  		double adornedHeight = AdornedElement.ActualHeight;  		return adornedHeight + offsetY;  	}  	else {  		double adornerHeight = this.child.DesiredSize.Height;  		double adornedHeight = AdornedElement.ActualHeight;  		double x = adornedHeight - adornerHeight;  		return x + offsetY;  	}  }  case VerticalAlignment.Center: {  	double adornerHeight = this.child.DesiredSize.Height;  	double adornedHeight = AdornedElement.ActualHeight;  	double x = (adornedHeight / 2) - (adornerHeight / 2);  	return x + offsetY;  }  case VerticalAlignment.Stretch: {  	return 0.0;  }  }  
Magic Number,TraceLab.UI.WPF.Controls.AdornedControl,FrameworkElementAdorner,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Controls\AdornedControl\FrameworkElementAdorner.cs,DetermineY,The following statement contains a magic number: switch (child.VerticalAlignment) {  case VerticalAlignment.Top: {  	if (verticalAdornerPlacement == AdornerPlacement.Outside) {  		return -child.DesiredSize.Height + offsetY;  	}  	else {  		return offsetY;  	}  }  case VerticalAlignment.Bottom: {  	if (verticalAdornerPlacement == AdornerPlacement.Outside) {  		double adornedHeight = AdornedElement.ActualHeight;  		return adornedHeight + offsetY;  	}  	else {  		double adornerHeight = this.child.DesiredSize.Height;  		double adornedHeight = AdornedElement.ActualHeight;  		double x = adornedHeight - adornerHeight;  		return x + offsetY;  	}  }  case VerticalAlignment.Center: {  	double adornerHeight = this.child.DesiredSize.Height;  	double adornedHeight = AdornedElement.ActualHeight;  	double x = (adornedHeight / 2) - (adornerHeight / 2);  	return x + offsetY;  }  case VerticalAlignment.Stretch: {  	return 0.0;  }  }  
Magic Number,TraceLab.UI.WPF.Controls,ComboBoxStatement,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Controls\ComboBoxStatement.cs,InitComboBox,The following statement contains a magic number: m_comboBox.FontSize = 10.0;  
Magic Number,TraceLab.UI.WPF.Controls,ComboBoxStatement,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Controls\ComboBoxStatement.cs,InitComboBox,The following statement contains a magic number: m_comboBox.Height = 14.0;  
Magic Number,TraceLab.UI.WPF.Controls,ComboBoxStatement,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Controls\ComboBoxStatement.cs,InitStackPanelStyling,The following statement contains a magic number: m_statementWithOpeningParenthesis.Height = 14.0;  
Magic Number,TraceLab.UI.WPF.Controls,ComboBoxStatement,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Controls\ComboBoxStatement.cs,InitStackPanelStyling,The following statement contains a magic number: m_statementWithOpeningParenthesis.Padding = new Thickness (0.0' 2.0' 0.0' 0.0);  
Magic Number,TraceLab.UI.WPF.Controls,ComboBoxStatement,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Controls\ComboBoxStatement.cs,InitStackPanelStyling,The following statement contains a magic number: m_closingParenthesis.Height = 14.0;  
Magic Number,TraceLab.UI.WPF.Controls,ComboBoxStatement,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Controls\ComboBoxStatement.cs,InitStackPanelStyling,The following statement contains a magic number: m_closingParenthesis.Padding = new Thickness (0.0' 2.0' 0.0' 0.0);  
Magic Number,TraceLab.UI.WPF.Controls,ConnectedBorder,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Controls\ConnectedBorder.cs,OnRender,The following statement contains a magic number: if (element != null) {  	var mainWindow = this.GetParent<TraceLab.UI.WPF.Views.DockableGraph> (null);  	var gt = element.TransformToVisual (this);  	var other = gt.Transform (new Point (0' 0));  	var oriElementLocation = element.TranslatePoint (new Point (0' 0)' mainWindow);  	var originElementLocation = mainWindow.TranslatePoint (oriElementLocation' this);  	var targetLocation = new Point (0' 0);  	// this.TranslatePoint(new Point(0' 0)' mainWindow);  	Rect originRect = new Rect (originElementLocation' element.RenderSize);  	Rect targetRect = new Rect (targetLocation' RenderSize);  	Pen solidPen = new Pen (ForegroundLines' LineStrokeThickness);  	Pen dashedPen = new Pen (BackgroundLines' LineStrokeThickness);  	dashedPen.DashStyle = new DashStyle (new List<double> () {  		2.0'  		1.0  	}' 1.0);  	drawingContext.DrawLine (solidPen' targetRect.TopLeft' originRect.TopLeft);  	drawingContext.DrawLine (solidPen' targetRect.TopRight' originRect.TopRight);  	drawingContext.DrawLine (dashedPen' targetRect.BottomLeft' originRect.BottomLeft);  	drawingContext.DrawLine (dashedPen' targetRect.BottomRight' originRect.BottomRight);  }  
Magic Number,TraceLab.UI.WPF.Controls,ConnectedBorder,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Controls\ConnectedBorder.cs,OnRender,The following statement contains a magic number: dashedPen.DashStyle = new DashStyle (new List<double> () {  	2.0'  	1.0  }' 1.0);  
Magic Number,TraceLab.UI.WPF.Controls,RichTextBoxWithIntellisense,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Controls\RichTextBoxWithIntellisense.cs,RichTextBoxWithIntellisense_Loaded,The following statement contains a magic number: m_assistListPopup.MaxHeight = 100;  
Magic Number,TraceLab.UI.WPF.Controls,RichTextBoxWithIntellisense,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Controls\RichTextBoxWithIntellisense.cs,RichTextBoxWithIntellisense_Loaded,The following statement contains a magic number: m_assistListPopup.MinWidth = 100;  
Magic Number,TraceLab.UI.WPF.Converters,AnyAllButtonVisibilityConverter,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Converters\AnyAllButtonVisibilityConverter.cs,Convert,The following statement contains a magic number: if (numberOfIncomingEdges >= 2) {  	visibility = System.Windows.Visibility.Visible;  }  
Magic Number,TraceLab.UI.WPF.Converters,ErrorMessageShortenerConverter,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Converters\ErrorMessageShortenerConverter.cs,Convert,The following statement contains a magic number: if (message != null) {  	int numberOfCharacters = 100;  	//default number of characters  	if (parameter != null) {  		Int32.TryParse ((string)parameter' out numberOfCharacters);  	}  	if (message.Length > numberOfCharacters) {  		return message.Substring (0' numberOfCharacters) + "...";  	}  	else {  		return message;  	}  }  else {  	return null;  }  
Magic Number,TraceLab.UI.WPF.Converters,ShowFilterCheckboxBoolToWidthConverter,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Converters\BoolToWidthConverter.cs,Convert,The following statement contains a magic number: if (visibility == true) {  	width = 25;  }  
Magic Number,TraceLab.UI.WPF.Converters,ShowFilterCheckboxBoolToWidthConverter,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Converters\BoolToWidthConverter.cs,Convert,The following statement contains a magic number: width = 25;  
Magic Number,TraceLab.UI.WPF.Converters,FilePathConverter,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Converters\FilePathToStringConverter.cs,Convert,The following statement contains a magic number: if (values.Length != 2)  	throw new ArgumentException ("Invalid number of arguments");  
Magic Number,TraceLab.UI.WPF.Utilities,ScopeHelper,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Utilities\ScopeHelper.cs,TryFindIntersection,The following statement contains a magic number: if (Math.Abs (denominator) <= 0.00001f) {  	if (Math.Abs (ua) <= 0.00001f && Math.Abs (ub) <= 0.00001f) {  		intersects = true;  		intersectionPoint = new Point ((point1.X + point2.X) / 2' (point1.Y + point2.Y) / 2);  	}  }  else {  	ua /= denominator;  	ub /= denominator;  	if (ua >= 0 && ua <= 1 && ub >= 0 && ub <= 1) {  		intersects = true;  		double x = point1.X + ua * (point2.X - point1.X);  		double y = point1.Y + ua * (point2.Y - point1.Y);  		intersectionPoint = new Point (x' y);  	}  }  
Magic Number,TraceLab.UI.WPF.Utilities,ScopeHelper,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Utilities\ScopeHelper.cs,TryFindIntersection,The following statement contains a magic number: if (Math.Abs (denominator) <= 0.00001f) {  	if (Math.Abs (ua) <= 0.00001f && Math.Abs (ub) <= 0.00001f) {  		intersects = true;  		intersectionPoint = new Point ((point1.X + point2.X) / 2' (point1.Y + point2.Y) / 2);  	}  }  else {  	ua /= denominator;  	ub /= denominator;  	if (ua >= 0 && ua <= 1 && ub >= 0 && ub <= 1) {  		intersects = true;  		double x = point1.X + ua * (point2.X - point1.X);  		double y = point1.Y + ua * (point2.Y - point1.Y);  		intersectionPoint = new Point (x' y);  	}  }  
Magic Number,TraceLab.UI.WPF.Utilities,ScopeHelper,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Utilities\ScopeHelper.cs,TryFindIntersection,The following statement contains a magic number: if (Math.Abs (ua) <= 0.00001f && Math.Abs (ub) <= 0.00001f) {  	intersects = true;  	intersectionPoint = new Point ((point1.X + point2.X) / 2' (point1.Y + point2.Y) / 2);  }  
Magic Number,TraceLab.UI.WPF.Utilities,ScopeHelper,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Utilities\ScopeHelper.cs,TryFindIntersection,The following statement contains a magic number: if (Math.Abs (ua) <= 0.00001f && Math.Abs (ub) <= 0.00001f) {  	intersects = true;  	intersectionPoint = new Point ((point1.X + point2.X) / 2' (point1.Y + point2.Y) / 2);  }  
Magic Number,TraceLab.UI.WPF.Utilities,ScopeHelper,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Utilities\ScopeHelper.cs,TryFindIntersection,The following statement contains a magic number: intersectionPoint = new Point ((point1.X + point2.X) / 2' (point1.Y + point2.Y) / 2);  
Magic Number,TraceLab.UI.WPF.Utilities,ScopeHelper,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Utilities\ScopeHelper.cs,TryFindIntersection,The following statement contains a magic number: intersectionPoint = new Point ((point1.X + point2.X) / 2' (point1.Y + point2.Y) / 2);  
Magic Number,TraceLab.UI.WPF.Views,GraphView,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Views\GraphView.cs,ExecuteAddScopeToDecision,The following statement contains a magic number: if (vertexControl != null) {  	ExperimentDecisionNode decisionNode = vertexControl.Vertex as ExperimentDecisionNode;  	if (decisionNode != null) {  		ExitDecisionNode exitDecisionNode = null;  		IEditableExperiment experiment = decisionNode.Owner as IEditableExperiment;  		double rightmostX = decisionNode.Data.X;  		HashSet<string> currentLabels = new HashSet<string> ();  		//iterate through outgoing scopes and find the scope with right border located most to the right among all scopes  		//also locate among outgoing edges reference to exit   		IEnumerable<ExperimentNodeConnection> outEdges;  		if (experiment.TryGetOutEdges (decisionNode' out outEdges)) {  			foreach (ExperimentNodeConnection connection in outEdges) {  				ScopeNode scope = connection.Target as ScopeNode;  				if (scope != null) {  					double candidateRightMostX = scope.DataWithSize.X + scope.DataWithSize.Width / 2;  					if (candidateRightMostX > rightmostX) {  						rightmostX = candidateRightMostX;  					}  					//also collect labels  					currentLabels.Add (scope.Data.Metadata.Label);  				}  				else if (exitDecisionNode == null) {  					//try find exit decision node  					exitDecisionNode = connection.Target as ExitDecisionNode;  				}  			}  		}  		double xPosition = rightmostX + 100;  		double yPosition = decisionNode.Data.Y + 120;  		string finalLabel = DetermineNewScopeLabel (currentLabels);  		//check if deicion node is not null. In old decision nodes without scopes' there were no associated exit node'   		//thus the scope cannot be added for these decisions.  		if (exitDecisionNode != null) {  			ComponentFactory.AddScopeToDecision (finalLabel' xPosition' yPosition' decisionNode' exitDecisionNode' experiment);  		}  	}  }  
Magic Number,TraceLab.UI.WPF.Views,GraphView,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Views\GraphView.cs,ExecuteAddScopeToDecision,The following statement contains a magic number: if (vertexControl != null) {  	ExperimentDecisionNode decisionNode = vertexControl.Vertex as ExperimentDecisionNode;  	if (decisionNode != null) {  		ExitDecisionNode exitDecisionNode = null;  		IEditableExperiment experiment = decisionNode.Owner as IEditableExperiment;  		double rightmostX = decisionNode.Data.X;  		HashSet<string> currentLabels = new HashSet<string> ();  		//iterate through outgoing scopes and find the scope with right border located most to the right among all scopes  		//also locate among outgoing edges reference to exit   		IEnumerable<ExperimentNodeConnection> outEdges;  		if (experiment.TryGetOutEdges (decisionNode' out outEdges)) {  			foreach (ExperimentNodeConnection connection in outEdges) {  				ScopeNode scope = connection.Target as ScopeNode;  				if (scope != null) {  					double candidateRightMostX = scope.DataWithSize.X + scope.DataWithSize.Width / 2;  					if (candidateRightMostX > rightmostX) {  						rightmostX = candidateRightMostX;  					}  					//also collect labels  					currentLabels.Add (scope.Data.Metadata.Label);  				}  				else if (exitDecisionNode == null) {  					//try find exit decision node  					exitDecisionNode = connection.Target as ExitDecisionNode;  				}  			}  		}  		double xPosition = rightmostX + 100;  		double yPosition = decisionNode.Data.Y + 120;  		string finalLabel = DetermineNewScopeLabel (currentLabels);  		//check if deicion node is not null. In old decision nodes without scopes' there were no associated exit node'   		//thus the scope cannot be added for these decisions.  		if (exitDecisionNode != null) {  			ComponentFactory.AddScopeToDecision (finalLabel' xPosition' yPosition' decisionNode' exitDecisionNode' experiment);  		}  	}  }  
Magic Number,TraceLab.UI.WPF.Views,GraphView,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Views\GraphView.cs,ExecuteAddScopeToDecision,The following statement contains a magic number: if (vertexControl != null) {  	ExperimentDecisionNode decisionNode = vertexControl.Vertex as ExperimentDecisionNode;  	if (decisionNode != null) {  		ExitDecisionNode exitDecisionNode = null;  		IEditableExperiment experiment = decisionNode.Owner as IEditableExperiment;  		double rightmostX = decisionNode.Data.X;  		HashSet<string> currentLabels = new HashSet<string> ();  		//iterate through outgoing scopes and find the scope with right border located most to the right among all scopes  		//also locate among outgoing edges reference to exit   		IEnumerable<ExperimentNodeConnection> outEdges;  		if (experiment.TryGetOutEdges (decisionNode' out outEdges)) {  			foreach (ExperimentNodeConnection connection in outEdges) {  				ScopeNode scope = connection.Target as ScopeNode;  				if (scope != null) {  					double candidateRightMostX = scope.DataWithSize.X + scope.DataWithSize.Width / 2;  					if (candidateRightMostX > rightmostX) {  						rightmostX = candidateRightMostX;  					}  					//also collect labels  					currentLabels.Add (scope.Data.Metadata.Label);  				}  				else if (exitDecisionNode == null) {  					//try find exit decision node  					exitDecisionNode = connection.Target as ExitDecisionNode;  				}  			}  		}  		double xPosition = rightmostX + 100;  		double yPosition = decisionNode.Data.Y + 120;  		string finalLabel = DetermineNewScopeLabel (currentLabels);  		//check if deicion node is not null. In old decision nodes without scopes' there were no associated exit node'   		//thus the scope cannot be added for these decisions.  		if (exitDecisionNode != null) {  			ComponentFactory.AddScopeToDecision (finalLabel' xPosition' yPosition' decisionNode' exitDecisionNode' experiment);  		}  	}  }  
Magic Number,TraceLab.UI.WPF.Views,GraphView,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Views\GraphView.cs,ExecuteAddScopeToDecision,The following statement contains a magic number: if (decisionNode != null) {  	ExitDecisionNode exitDecisionNode = null;  	IEditableExperiment experiment = decisionNode.Owner as IEditableExperiment;  	double rightmostX = decisionNode.Data.X;  	HashSet<string> currentLabels = new HashSet<string> ();  	//iterate through outgoing scopes and find the scope with right border located most to the right among all scopes  	//also locate among outgoing edges reference to exit   	IEnumerable<ExperimentNodeConnection> outEdges;  	if (experiment.TryGetOutEdges (decisionNode' out outEdges)) {  		foreach (ExperimentNodeConnection connection in outEdges) {  			ScopeNode scope = connection.Target as ScopeNode;  			if (scope != null) {  				double candidateRightMostX = scope.DataWithSize.X + scope.DataWithSize.Width / 2;  				if (candidateRightMostX > rightmostX) {  					rightmostX = candidateRightMostX;  				}  				//also collect labels  				currentLabels.Add (scope.Data.Metadata.Label);  			}  			else if (exitDecisionNode == null) {  				//try find exit decision node  				exitDecisionNode = connection.Target as ExitDecisionNode;  			}  		}  	}  	double xPosition = rightmostX + 100;  	double yPosition = decisionNode.Data.Y + 120;  	string finalLabel = DetermineNewScopeLabel (currentLabels);  	//check if deicion node is not null. In old decision nodes without scopes' there were no associated exit node'   	//thus the scope cannot be added for these decisions.  	if (exitDecisionNode != null) {  		ComponentFactory.AddScopeToDecision (finalLabel' xPosition' yPosition' decisionNode' exitDecisionNode' experiment);  	}  }  
Magic Number,TraceLab.UI.WPF.Views,GraphView,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Views\GraphView.cs,ExecuteAddScopeToDecision,The following statement contains a magic number: if (decisionNode != null) {  	ExitDecisionNode exitDecisionNode = null;  	IEditableExperiment experiment = decisionNode.Owner as IEditableExperiment;  	double rightmostX = decisionNode.Data.X;  	HashSet<string> currentLabels = new HashSet<string> ();  	//iterate through outgoing scopes and find the scope with right border located most to the right among all scopes  	//also locate among outgoing edges reference to exit   	IEnumerable<ExperimentNodeConnection> outEdges;  	if (experiment.TryGetOutEdges (decisionNode' out outEdges)) {  		foreach (ExperimentNodeConnection connection in outEdges) {  			ScopeNode scope = connection.Target as ScopeNode;  			if (scope != null) {  				double candidateRightMostX = scope.DataWithSize.X + scope.DataWithSize.Width / 2;  				if (candidateRightMostX > rightmostX) {  					rightmostX = candidateRightMostX;  				}  				//also collect labels  				currentLabels.Add (scope.Data.Metadata.Label);  			}  			else if (exitDecisionNode == null) {  				//try find exit decision node  				exitDecisionNode = connection.Target as ExitDecisionNode;  			}  		}  	}  	double xPosition = rightmostX + 100;  	double yPosition = decisionNode.Data.Y + 120;  	string finalLabel = DetermineNewScopeLabel (currentLabels);  	//check if deicion node is not null. In old decision nodes without scopes' there were no associated exit node'   	//thus the scope cannot be added for these decisions.  	if (exitDecisionNode != null) {  		ComponentFactory.AddScopeToDecision (finalLabel' xPosition' yPosition' decisionNode' exitDecisionNode' experiment);  	}  }  
Magic Number,TraceLab.UI.WPF.Views,GraphView,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Views\GraphView.cs,ExecuteAddScopeToDecision,The following statement contains a magic number: if (decisionNode != null) {  	ExitDecisionNode exitDecisionNode = null;  	IEditableExperiment experiment = decisionNode.Owner as IEditableExperiment;  	double rightmostX = decisionNode.Data.X;  	HashSet<string> currentLabels = new HashSet<string> ();  	//iterate through outgoing scopes and find the scope with right border located most to the right among all scopes  	//also locate among outgoing edges reference to exit   	IEnumerable<ExperimentNodeConnection> outEdges;  	if (experiment.TryGetOutEdges (decisionNode' out outEdges)) {  		foreach (ExperimentNodeConnection connection in outEdges) {  			ScopeNode scope = connection.Target as ScopeNode;  			if (scope != null) {  				double candidateRightMostX = scope.DataWithSize.X + scope.DataWithSize.Width / 2;  				if (candidateRightMostX > rightmostX) {  					rightmostX = candidateRightMostX;  				}  				//also collect labels  				currentLabels.Add (scope.Data.Metadata.Label);  			}  			else if (exitDecisionNode == null) {  				//try find exit decision node  				exitDecisionNode = connection.Target as ExitDecisionNode;  			}  		}  	}  	double xPosition = rightmostX + 100;  	double yPosition = decisionNode.Data.Y + 120;  	string finalLabel = DetermineNewScopeLabel (currentLabels);  	//check if deicion node is not null. In old decision nodes without scopes' there were no associated exit node'   	//thus the scope cannot be added for these decisions.  	if (exitDecisionNode != null) {  		ComponentFactory.AddScopeToDecision (finalLabel' xPosition' yPosition' decisionNode' exitDecisionNode' experiment);  	}  }  
Magic Number,TraceLab.UI.WPF.Views,GraphView,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Views\GraphView.cs,ExecuteAddScopeToDecision,The following statement contains a magic number: if (experiment.TryGetOutEdges (decisionNode' out outEdges)) {  	foreach (ExperimentNodeConnection connection in outEdges) {  		ScopeNode scope = connection.Target as ScopeNode;  		if (scope != null) {  			double candidateRightMostX = scope.DataWithSize.X + scope.DataWithSize.Width / 2;  			if (candidateRightMostX > rightmostX) {  				rightmostX = candidateRightMostX;  			}  			//also collect labels  			currentLabels.Add (scope.Data.Metadata.Label);  		}  		else if (exitDecisionNode == null) {  			//try find exit decision node  			exitDecisionNode = connection.Target as ExitDecisionNode;  		}  	}  }  
Magic Number,TraceLab.UI.WPF.Views,GraphView,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Views\GraphView.cs,ExecuteAddScopeToDecision,The following statement contains a magic number: foreach (ExperimentNodeConnection connection in outEdges) {  	ScopeNode scope = connection.Target as ScopeNode;  	if (scope != null) {  		double candidateRightMostX = scope.DataWithSize.X + scope.DataWithSize.Width / 2;  		if (candidateRightMostX > rightmostX) {  			rightmostX = candidateRightMostX;  		}  		//also collect labels  		currentLabels.Add (scope.Data.Metadata.Label);  	}  	else if (exitDecisionNode == null) {  		//try find exit decision node  		exitDecisionNode = connection.Target as ExitDecisionNode;  	}  }  
Magic Number,TraceLab.UI.WPF.Views,GraphView,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Views\GraphView.cs,ExecuteAddScopeToDecision,The following statement contains a magic number: if (scope != null) {  	double candidateRightMostX = scope.DataWithSize.X + scope.DataWithSize.Width / 2;  	if (candidateRightMostX > rightmostX) {  		rightmostX = candidateRightMostX;  	}  	//also collect labels  	currentLabels.Add (scope.Data.Metadata.Label);  }  else if (exitDecisionNode == null) {  	//try find exit decision node  	exitDecisionNode = connection.Target as ExitDecisionNode;  }  
Magic Number,TraceLab.UI.WPF.Views,BenchmarkWizardDialog,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Views\BenchmarkWizardDialog.xaml.cs,OnShowProcessAreaChanged,The following statement contains a magic number: if (value.HasValue && wizard.m_isShowingProcessArea != value.Value) {  	wizard.m_isShowingProcessArea = value.Value;  	if (value.Value) {  		wizard.m_oldLeft = wizard.Left;  		wizard.m_oldTop = wizard.Top;  		wizard.m_oldHeight = 75;  		wizard.m_oldWidth = 195;  		wizard.AnimateToSize (wizard.Owner.Left' wizard.Owner.Top' 0' 0);  	}  	else {  		wizard.AnimateToSize (wizard.m_oldLeft' wizard.m_oldTop' wizard.m_oldHeight' wizard.m_oldWidth);  	}  }  
Magic Number,TraceLab.UI.WPF.Views,BenchmarkWizardDialog,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Views\BenchmarkWizardDialog.xaml.cs,OnShowProcessAreaChanged,The following statement contains a magic number: if (value.HasValue && wizard.m_isShowingProcessArea != value.Value) {  	wizard.m_isShowingProcessArea = value.Value;  	if (value.Value) {  		wizard.m_oldLeft = wizard.Left;  		wizard.m_oldTop = wizard.Top;  		wizard.m_oldHeight = 75;  		wizard.m_oldWidth = 195;  		wizard.AnimateToSize (wizard.Owner.Left' wizard.Owner.Top' 0' 0);  	}  	else {  		wizard.AnimateToSize (wizard.m_oldLeft' wizard.m_oldTop' wizard.m_oldHeight' wizard.m_oldWidth);  	}  }  
Magic Number,TraceLab.UI.WPF.Views,BenchmarkWizardDialog,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Views\BenchmarkWizardDialog.xaml.cs,OnShowProcessAreaChanged,The following statement contains a magic number: if (value.Value) {  	wizard.m_oldLeft = wizard.Left;  	wizard.m_oldTop = wizard.Top;  	wizard.m_oldHeight = 75;  	wizard.m_oldWidth = 195;  	wizard.AnimateToSize (wizard.Owner.Left' wizard.Owner.Top' 0' 0);  }  else {  	wizard.AnimateToSize (wizard.m_oldLeft' wizard.m_oldTop' wizard.m_oldHeight' wizard.m_oldWidth);  }  
Magic Number,TraceLab.UI.WPF.Views,BenchmarkWizardDialog,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Views\BenchmarkWizardDialog.xaml.cs,OnShowProcessAreaChanged,The following statement contains a magic number: if (value.Value) {  	wizard.m_oldLeft = wizard.Left;  	wizard.m_oldTop = wizard.Top;  	wizard.m_oldHeight = 75;  	wizard.m_oldWidth = 195;  	wizard.AnimateToSize (wizard.Owner.Left' wizard.Owner.Top' 0' 0);  }  else {  	wizard.AnimateToSize (wizard.m_oldLeft' wizard.m_oldTop' wizard.m_oldHeight' wizard.m_oldWidth);  }  
Magic Number,TraceLab.UI.WPF.Views,BenchmarkWizardDialog,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Views\BenchmarkWizardDialog.xaml.cs,OnShowProcessAreaChanged,The following statement contains a magic number: wizard.m_oldHeight = 75;  
Magic Number,TraceLab.UI.WPF.Views,BenchmarkWizardDialog,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Views\BenchmarkWizardDialog.xaml.cs,OnShowProcessAreaChanged,The following statement contains a magic number: wizard.m_oldWidth = 195;  
Magic Number,TraceLab.UI.WPF.Views,WorkspaceWindow,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Views\WorkspaceWindow.xaml.cs,DisplayErrors,The following statement contains a magic number: if (viewModel != null && viewModel.TypeDefinitionErrors != null && viewModel.TypeDefinitionErrors.FirstOrDefault () != null) {  	var errors = new List<string> (viewModel.TypeDefinitionErrors);  	viewModel.ClearLoadErrors ();  	Window errorWindow = new Window ();  	var errorControl = new ComponentLibraryErrorDisplay ();  	errorWindow.Content = errorControl;  	errorControl.HeaderText = "Errors encountered while loading component definitions: ";  	errorControl.Errors = errors;  	errorWindow.Height = 500;  	errorWindow.Width = 800;  	errorWindow.Owner = this.GetParent<MainWindow> (null);  	errorWindow.WindowStartupLocation = WindowStartupLocation.CenterOwner;  	errorWindow.Title = "Definition Load Errors";  	errorWindow.ShowDialog ();  }  
Magic Number,TraceLab.UI.WPF.Views,WorkspaceWindow,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Views\WorkspaceWindow.xaml.cs,DisplayErrors,The following statement contains a magic number: if (viewModel != null && viewModel.TypeDefinitionErrors != null && viewModel.TypeDefinitionErrors.FirstOrDefault () != null) {  	var errors = new List<string> (viewModel.TypeDefinitionErrors);  	viewModel.ClearLoadErrors ();  	Window errorWindow = new Window ();  	var errorControl = new ComponentLibraryErrorDisplay ();  	errorWindow.Content = errorControl;  	errorControl.HeaderText = "Errors encountered while loading component definitions: ";  	errorControl.Errors = errors;  	errorWindow.Height = 500;  	errorWindow.Width = 800;  	errorWindow.Owner = this.GetParent<MainWindow> (null);  	errorWindow.WindowStartupLocation = WindowStartupLocation.CenterOwner;  	errorWindow.Title = "Definition Load Errors";  	errorWindow.ShowDialog ();  }  
Magic Number,TraceLab.UI.WPF.Views,WorkspaceWindow,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Views\WorkspaceWindow.xaml.cs,DisplayErrors,The following statement contains a magic number: errorWindow.Height = 500;  
Magic Number,TraceLab.UI.WPF.Views,WorkspaceWindow,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Views\WorkspaceWindow.xaml.cs,DisplayErrors,The following statement contains a magic number: errorWindow.Width = 800;  
Magic Number,TraceLab.UI.WPF.Views,MainWindow,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Views\MainWindow.xaml.cs,vm_ExperimentCompleted,The following statement contains a magic number: timer.Interval = TimeSpan.FromMilliseconds (1000);  
Magic Number,TraceLab.UI.WPF.Controls.ZoomControl,ZoomControl,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Controls\ZoomControl\ZoomControl.cs,ZoomControl_MouseWheel,The following statement contains a magic number: DoZoom (Math.Max (1 / MaxZoomDelta' Math.Min (MaxZoomDelta' e.Delta / 10000.0 * ZoomDeltaMultiplier + 1))' origoPosition' mousePosition' mousePosition);  
Magic Number,TraceLab.UI.WPF.Controls.ZoomControl,ZoomControl,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Controls\ZoomControl\ZoomControl.cs,DoZoomToFill,The following statement contains a magic number: if (FillRectangle.IsEmpty) {  	var deltaZoom = Math.Min (ActualWidth / _presenter.ContentSize.Width' ActualHeight / _presenter.ContentSize.Height);  	var initialTranslate = GetInitialTranslate ();  	DoZoomAnimation (deltaZoom' initialTranslate.X * deltaZoom' initialTranslate.Y * deltaZoom);  }  else {  	var deltaZoom = Math.Min (ActualWidth / (FillRectangle.Width)' ActualHeight / (FillRectangle.Height));  	var w = FillRectangle.Width - _presenter.DesiredSize.Width;  	var h = FillRectangle.Height - _presenter.DesiredSize.Height;  	var tX = -w / 2.0;  	var tY = -h / 2.0;  	var initialTranslate = new Vector (tX - FillRectangle.Left' tY - FillRectangle.Top);  	initialTranslate *= deltaZoom;  	DoZoomAnimation (deltaZoom' initialTranslate.X' initialTranslate.Y);  }  
Magic Number,TraceLab.UI.WPF.Controls.ZoomControl,ZoomControl,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Controls\ZoomControl\ZoomControl.cs,DoZoomToFill,The following statement contains a magic number: if (FillRectangle.IsEmpty) {  	var deltaZoom = Math.Min (ActualWidth / _presenter.ContentSize.Width' ActualHeight / _presenter.ContentSize.Height);  	var initialTranslate = GetInitialTranslate ();  	DoZoomAnimation (deltaZoom' initialTranslate.X * deltaZoom' initialTranslate.Y * deltaZoom);  }  else {  	var deltaZoom = Math.Min (ActualWidth / (FillRectangle.Width)' ActualHeight / (FillRectangle.Height));  	var w = FillRectangle.Width - _presenter.DesiredSize.Width;  	var h = FillRectangle.Height - _presenter.DesiredSize.Height;  	var tX = -w / 2.0;  	var tY = -h / 2.0;  	var initialTranslate = new Vector (tX - FillRectangle.Left' tY - FillRectangle.Top);  	initialTranslate *= deltaZoom;  	DoZoomAnimation (deltaZoom' initialTranslate.X' initialTranslate.Y);  }  
Magic Number,TraceLab.UI.WPF.ViewModels,BaseLevelExperimentViewModel,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\ViewModels\BaseLevelExperimentViewModel.cs,FindOptimalLocation,The following statement contains a magic number: if (node != null) {  	if (vertexControl != null) {  		const int padding = 5;  		suggestedLocation = new Point (vertexControl.TopLeftX + vertexControl.ActualWidth' vertexControl.TopLeftY + vertexControl.ActualHeight + padding);  		//special case' if node belongs to the graph in the scope  		var ownerGraph = node.Owner as CompositeComponentEditableGraph;  		if (ownerGraph != null) {  			var scopeNode = ownerGraph.OwnerNode as ScopeNodeBase;  			if (scopeNode != null) {  				var data = scopeNode.DataWithSize;  				double labelBorderHeight = 23;  				// check scope node control  				suggestedLocation = new Point (suggestedLocation.X + data.X - (data.Width / 2)' suggestedLocation.Y + data.Y - (data.Height / 2) + labelBorderHeight);  			}  		}  	}  }  
Magic Number,TraceLab.UI.WPF.ViewModels,BaseLevelExperimentViewModel,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\ViewModels\BaseLevelExperimentViewModel.cs,FindOptimalLocation,The following statement contains a magic number: if (node != null) {  	if (vertexControl != null) {  		const int padding = 5;  		suggestedLocation = new Point (vertexControl.TopLeftX + vertexControl.ActualWidth' vertexControl.TopLeftY + vertexControl.ActualHeight + padding);  		//special case' if node belongs to the graph in the scope  		var ownerGraph = node.Owner as CompositeComponentEditableGraph;  		if (ownerGraph != null) {  			var scopeNode = ownerGraph.OwnerNode as ScopeNodeBase;  			if (scopeNode != null) {  				var data = scopeNode.DataWithSize;  				double labelBorderHeight = 23;  				// check scope node control  				suggestedLocation = new Point (suggestedLocation.X + data.X - (data.Width / 2)' suggestedLocation.Y + data.Y - (data.Height / 2) + labelBorderHeight);  			}  		}  	}  }  
Magic Number,TraceLab.UI.WPF.ViewModels,BaseLevelExperimentViewModel,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\ViewModels\BaseLevelExperimentViewModel.cs,FindOptimalLocation,The following statement contains a magic number: if (node != null) {  	if (vertexControl != null) {  		const int padding = 5;  		suggestedLocation = new Point (vertexControl.TopLeftX + vertexControl.ActualWidth' vertexControl.TopLeftY + vertexControl.ActualHeight + padding);  		//special case' if node belongs to the graph in the scope  		var ownerGraph = node.Owner as CompositeComponentEditableGraph;  		if (ownerGraph != null) {  			var scopeNode = ownerGraph.OwnerNode as ScopeNodeBase;  			if (scopeNode != null) {  				var data = scopeNode.DataWithSize;  				double labelBorderHeight = 23;  				// check scope node control  				suggestedLocation = new Point (suggestedLocation.X + data.X - (data.Width / 2)' suggestedLocation.Y + data.Y - (data.Height / 2) + labelBorderHeight);  			}  		}  	}  }  
Magic Number,TraceLab.UI.WPF.ViewModels,BaseLevelExperimentViewModel,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\ViewModels\BaseLevelExperimentViewModel.cs,FindOptimalLocation,The following statement contains a magic number: if (node != null) {  	if (vertexControl != null) {  		const int padding = 5;  		suggestedLocation = new Point (vertexControl.TopLeftX + vertexControl.ActualWidth' vertexControl.TopLeftY + vertexControl.ActualHeight + padding);  		//special case' if node belongs to the graph in the scope  		var ownerGraph = node.Owner as CompositeComponentEditableGraph;  		if (ownerGraph != null) {  			var scopeNode = ownerGraph.OwnerNode as ScopeNodeBase;  			if (scopeNode != null) {  				var data = scopeNode.DataWithSize;  				double labelBorderHeight = 23;  				// check scope node control  				suggestedLocation = new Point (suggestedLocation.X + data.X - (data.Width / 2)' suggestedLocation.Y + data.Y - (data.Height / 2) + labelBorderHeight);  			}  		}  	}  }  
Magic Number,TraceLab.UI.WPF.ViewModels,BaseLevelExperimentViewModel,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\ViewModels\BaseLevelExperimentViewModel.cs,FindOptimalLocation,The following statement contains a magic number: if (vertexControl != null) {  	const int padding = 5;  	suggestedLocation = new Point (vertexControl.TopLeftX + vertexControl.ActualWidth' vertexControl.TopLeftY + vertexControl.ActualHeight + padding);  	//special case' if node belongs to the graph in the scope  	var ownerGraph = node.Owner as CompositeComponentEditableGraph;  	if (ownerGraph != null) {  		var scopeNode = ownerGraph.OwnerNode as ScopeNodeBase;  		if (scopeNode != null) {  			var data = scopeNode.DataWithSize;  			double labelBorderHeight = 23;  			// check scope node control  			suggestedLocation = new Point (suggestedLocation.X + data.X - (data.Width / 2)' suggestedLocation.Y + data.Y - (data.Height / 2) + labelBorderHeight);  		}  	}  }  
Magic Number,TraceLab.UI.WPF.ViewModels,BaseLevelExperimentViewModel,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\ViewModels\BaseLevelExperimentViewModel.cs,FindOptimalLocation,The following statement contains a magic number: if (vertexControl != null) {  	const int padding = 5;  	suggestedLocation = new Point (vertexControl.TopLeftX + vertexControl.ActualWidth' vertexControl.TopLeftY + vertexControl.ActualHeight + padding);  	//special case' if node belongs to the graph in the scope  	var ownerGraph = node.Owner as CompositeComponentEditableGraph;  	if (ownerGraph != null) {  		var scopeNode = ownerGraph.OwnerNode as ScopeNodeBase;  		if (scopeNode != null) {  			var data = scopeNode.DataWithSize;  			double labelBorderHeight = 23;  			// check scope node control  			suggestedLocation = new Point (suggestedLocation.X + data.X - (data.Width / 2)' suggestedLocation.Y + data.Y - (data.Height / 2) + labelBorderHeight);  		}  	}  }  
Magic Number,TraceLab.UI.WPF.ViewModels,BaseLevelExperimentViewModel,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\ViewModels\BaseLevelExperimentViewModel.cs,FindOptimalLocation,The following statement contains a magic number: if (vertexControl != null) {  	const int padding = 5;  	suggestedLocation = new Point (vertexControl.TopLeftX + vertexControl.ActualWidth' vertexControl.TopLeftY + vertexControl.ActualHeight + padding);  	//special case' if node belongs to the graph in the scope  	var ownerGraph = node.Owner as CompositeComponentEditableGraph;  	if (ownerGraph != null) {  		var scopeNode = ownerGraph.OwnerNode as ScopeNodeBase;  		if (scopeNode != null) {  			var data = scopeNode.DataWithSize;  			double labelBorderHeight = 23;  			// check scope node control  			suggestedLocation = new Point (suggestedLocation.X + data.X - (data.Width / 2)' suggestedLocation.Y + data.Y - (data.Height / 2) + labelBorderHeight);  		}  	}  }  
Magic Number,TraceLab.UI.WPF.ViewModels,BaseLevelExperimentViewModel,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\ViewModels\BaseLevelExperimentViewModel.cs,FindOptimalLocation,The following statement contains a magic number: if (vertexControl != null) {  	const int padding = 5;  	suggestedLocation = new Point (vertexControl.TopLeftX + vertexControl.ActualWidth' vertexControl.TopLeftY + vertexControl.ActualHeight + padding);  	//special case' if node belongs to the graph in the scope  	var ownerGraph = node.Owner as CompositeComponentEditableGraph;  	if (ownerGraph != null) {  		var scopeNode = ownerGraph.OwnerNode as ScopeNodeBase;  		if (scopeNode != null) {  			var data = scopeNode.DataWithSize;  			double labelBorderHeight = 23;  			// check scope node control  			suggestedLocation = new Point (suggestedLocation.X + data.X - (data.Width / 2)' suggestedLocation.Y + data.Y - (data.Height / 2) + labelBorderHeight);  		}  	}  }  
Magic Number,TraceLab.UI.WPF.ViewModels,BaseLevelExperimentViewModel,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\ViewModels\BaseLevelExperimentViewModel.cs,FindOptimalLocation,The following statement contains a magic number: if (ownerGraph != null) {  	var scopeNode = ownerGraph.OwnerNode as ScopeNodeBase;  	if (scopeNode != null) {  		var data = scopeNode.DataWithSize;  		double labelBorderHeight = 23;  		// check scope node control  		suggestedLocation = new Point (suggestedLocation.X + data.X - (data.Width / 2)' suggestedLocation.Y + data.Y - (data.Height / 2) + labelBorderHeight);  	}  }  
Magic Number,TraceLab.UI.WPF.ViewModels,BaseLevelExperimentViewModel,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\ViewModels\BaseLevelExperimentViewModel.cs,FindOptimalLocation,The following statement contains a magic number: if (ownerGraph != null) {  	var scopeNode = ownerGraph.OwnerNode as ScopeNodeBase;  	if (scopeNode != null) {  		var data = scopeNode.DataWithSize;  		double labelBorderHeight = 23;  		// check scope node control  		suggestedLocation = new Point (suggestedLocation.X + data.X - (data.Width / 2)' suggestedLocation.Y + data.Y - (data.Height / 2) + labelBorderHeight);  	}  }  
Magic Number,TraceLab.UI.WPF.ViewModels,BaseLevelExperimentViewModel,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\ViewModels\BaseLevelExperimentViewModel.cs,FindOptimalLocation,The following statement contains a magic number: if (ownerGraph != null) {  	var scopeNode = ownerGraph.OwnerNode as ScopeNodeBase;  	if (scopeNode != null) {  		var data = scopeNode.DataWithSize;  		double labelBorderHeight = 23;  		// check scope node control  		suggestedLocation = new Point (suggestedLocation.X + data.X - (data.Width / 2)' suggestedLocation.Y + data.Y - (data.Height / 2) + labelBorderHeight);  	}  }  
Magic Number,TraceLab.UI.WPF.ViewModels,BaseLevelExperimentViewModel,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\ViewModels\BaseLevelExperimentViewModel.cs,FindOptimalLocation,The following statement contains a magic number: if (scopeNode != null) {  	var data = scopeNode.DataWithSize;  	double labelBorderHeight = 23;  	// check scope node control  	suggestedLocation = new Point (suggestedLocation.X + data.X - (data.Width / 2)' suggestedLocation.Y + data.Y - (data.Height / 2) + labelBorderHeight);  }  
Magic Number,TraceLab.UI.WPF.ViewModels,BaseLevelExperimentViewModel,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\ViewModels\BaseLevelExperimentViewModel.cs,FindOptimalLocation,The following statement contains a magic number: if (scopeNode != null) {  	var data = scopeNode.DataWithSize;  	double labelBorderHeight = 23;  	// check scope node control  	suggestedLocation = new Point (suggestedLocation.X + data.X - (data.Width / 2)' suggestedLocation.Y + data.Y - (data.Height / 2) + labelBorderHeight);  }  
Magic Number,TraceLab.UI.WPF.ViewModels,BaseLevelExperimentViewModel,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\ViewModels\BaseLevelExperimentViewModel.cs,FindOptimalLocation,The following statement contains a magic number: if (scopeNode != null) {  	var data = scopeNode.DataWithSize;  	double labelBorderHeight = 23;  	// check scope node control  	suggestedLocation = new Point (suggestedLocation.X + data.X - (data.Width / 2)' suggestedLocation.Y + data.Y - (data.Height / 2) + labelBorderHeight);  }  
Magic Number,TraceLab.UI.WPF.ViewModels,BaseLevelExperimentViewModel,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\ViewModels\BaseLevelExperimentViewModel.cs,FindOptimalLocation,The following statement contains a magic number: suggestedLocation = new Point (suggestedLocation.X + data.X - (data.Width / 2)' suggestedLocation.Y + data.Y - (data.Height / 2) + labelBorderHeight);  
Magic Number,TraceLab.UI.WPF.ViewModels,BaseLevelExperimentViewModel,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\ViewModels\BaseLevelExperimentViewModel.cs,FindOptimalLocation,The following statement contains a magic number: suggestedLocation = new Point (suggestedLocation.X + data.X - (data.Width / 2)' suggestedLocation.Y + data.Y - (data.Height / 2) + labelBorderHeight);  
Magic Number,TraceLab.UI.WPF.ViewModels,CLVComponentNode,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\ViewModels\ComponentLibraryNodes\CLVComponentNode.cs,CLVComponentNode,The following statement contains a magic number: PartialId = m_definition.ID.Substring (m_definition.ID.Length - 5);  
Magic Number,TraceLab.UI.WPF.ViewModels,TopLevelEditableExperimentViewModel,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\ViewModels\TopLevelEditableExperimentViewModel.cs,IsNotLastRemainingDecisionScope,The following statement contains a magic number: if (scopeNode != null && TryGetOutEdges (scopeNode.DecisionNode' out edges)) {  	//there is one invisible connection from decision to exit node  	//thus the last remaining scope will be the second connection' so we compare count of edges with 2  	canRemove = (edges.Count () > 2);  }  
Magic Number,TraceLab.UI.WPF.ViewModels,TopLevelEditableExperimentViewModel,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\ViewModels\TopLevelEditableExperimentViewModel.cs,IsNotLastRemainingDecisionScope,The following statement contains a magic number: canRemove = (edges.Count () > 2);  
Magic Number,TraceLab.UI.WPF.ViewModels,ApplicationViewModelWrapper,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\ViewModels\ApplicationViewModelWrapper.cs,DisplayCopyErrorsWindow,The following statement contains a magic number: errorWindow.Height = 500;  
Magic Number,TraceLab.UI.WPF.ViewModels,ApplicationViewModelWrapper,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\ViewModels\ApplicationViewModelWrapper.cs,DisplayCopyErrorsWindow,The following statement contains a magic number: errorWindow.Width = 800;  
Magic Number,TraceLab.UI.WPF.ViewModels,ApplicationViewModelWrapper,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\ViewModels\ApplicationViewModelWrapper.cs,OpenInWindow,The following statement contains a magic number: if (m_viewModel.Experiment == null || (m_viewModel.Experiment != null && m_viewModel.Experiment.IsModified == false && m_viewModel.Experiment.VertexCount == 2)) {  	OpenInCurrentWindow (newApplicationViewModel);  }  else {  	OpenNewExperimentWindow (newApplicationViewModel);  }  
Magic Number,TraceLab.UI.WPF.ViewModels,ComponentsLibraryViewModelWrapper,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\ViewModels\ComponentsLibraryViewModelWrapper.cs,ComponentsLibraryViewModelWrapper,The following statement contains a magic number: m_searchTimer.Interval = new TimeSpan (0' 0' 0' 0' 200);  
Magic Number,TraceLab.UI.WPF.ViewModels,EnabledFlowDocument,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\ViewModels\EnabledFlowDocument.cs,EnabledFlowDocument,The following statement contains a magic number: FontSize = 12.0;  
Magic Number,TraceLab.UI.WPF.ViewModels,ExperimentViewModel,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\ViewModels\ExperimentViewModel.cs,CanRunExperimentFunc,The following statement contains a magic number: if (args != null && args.Count == 3) {  	//validate args  	var progress = args [0] as IProgress;  	var workspace = args [1] as WorkspaceViewModelWrapper;  	var componentsLibrary = args [2] as ComponentsLibraryViewModelWrapper;  	if (progress != null && workspace != null && componentsLibrary != null) {  		canRun = TopLevel.IsExperimentRunning == false && TopLevel.Vertices.Count () >= 2;  	}  }  
Magic Number,TraceLab.UI.WPF.ViewModels,ExperimentViewModel,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\ViewModels\ExperimentViewModel.cs,CanRunExperimentFunc,The following statement contains a magic number: if (args != null && args.Count == 3) {  	//validate args  	var progress = args [0] as IProgress;  	var workspace = args [1] as WorkspaceViewModelWrapper;  	var componentsLibrary = args [2] as ComponentsLibraryViewModelWrapper;  	if (progress != null && workspace != null && componentsLibrary != null) {  		canRun = TopLevel.IsExperimentRunning == false && TopLevel.Vertices.Count () >= 2;  	}  }  
Magic Number,TraceLab.UI.WPF.ViewModels,ExperimentViewModel,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\ViewModels\ExperimentViewModel.cs,CanRunExperimentFunc,The following statement contains a magic number: if (args != null && args.Count == 3) {  	//validate args  	var progress = args [0] as IProgress;  	var workspace = args [1] as WorkspaceViewModelWrapper;  	var componentsLibrary = args [2] as ComponentsLibraryViewModelWrapper;  	if (progress != null && workspace != null && componentsLibrary != null) {  		canRun = TopLevel.IsExperimentRunning == false && TopLevel.Vertices.Count () >= 2;  	}  }  
Magic Number,TraceLab.UI.WPF.ViewModels,ExperimentViewModel,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\ViewModels\ExperimentViewModel.cs,CanRunExperimentFunc,The following statement contains a magic number: if (progress != null && workspace != null && componentsLibrary != null) {  	canRun = TopLevel.IsExperimentRunning == false && TopLevel.Vertices.Count () >= 2;  }  
Magic Number,TraceLab.UI.WPF.ViewModels,ExperimentViewModel,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\ViewModels\ExperimentViewModel.cs,CanRunExperimentFunc,The following statement contains a magic number: canRun = TopLevel.IsExperimentRunning == false && TopLevel.Vertices.Count () >= 2;  
Magic Number,TraceLab.UI.WPF.ViewModels,ExperimentViewModel,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\ViewModels\ExperimentViewModel.cs,RunExperimentFunc,The following statement contains a magic number: if (args != null && args.Count == 3) {  	//validate args  	var progress = args [0] as IProgress;  	var workspaceVM = args [1] as WorkspaceViewModelWrapper;  	var componentsLibrary = args [2] as ComponentsLibraryViewModelWrapper;  	if (progress != null && workspaceVM != null && componentsLibrary != null) {  		var workspace = (TraceLab.Core.Workspaces.Workspace)workspaceVM;  		//var typeDirectories = new HashSet<string>();  		//var packageManager = TraceLab.Core.PackageSystem.PackageManager.Instance;  		//foreach (TraceLabSDK.PackageSystem.IPackageReference packageReference in TopLevel.References)  		//{  		//    var package = packageManager.GetPackage(packageReference);  		//    foreach (string typesLocation in packageManager.GetDependantTypeLocations(package))  		//    {  		//        typeDirectories.Add(typesLocation);  		//    }  		//}  		//workspace.TypeDirectories.AddRange(typeDirectories);  		try {  			TopLevel.RunExperiment (progress' workspace' (ComponentsLibrary)componentsLibrary);  		}  		catch (System.IO.FileNotFoundException ex) {  			progress.SetError (true);  			progress.CurrentStatus = "Experiment failed to run";  			NLog.LogManager.GetCurrentClassLogger ().Error (String.Format ("Experiment failed to run. Some component dependencies could not be resolved. Please re-scan the components library to determine which components are failing.\n{0}"' ex.Message));  		}  	}  }  
Magic Number,TraceLab.UI.WPF.ViewModels,ExperimentViewModel,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\ViewModels\ExperimentViewModel.cs,RunExperimentFunc,The following statement contains a magic number: if (args != null && args.Count == 3) {  	//validate args  	var progress = args [0] as IProgress;  	var workspaceVM = args [1] as WorkspaceViewModelWrapper;  	var componentsLibrary = args [2] as ComponentsLibraryViewModelWrapper;  	if (progress != null && workspaceVM != null && componentsLibrary != null) {  		var workspace = (TraceLab.Core.Workspaces.Workspace)workspaceVM;  		//var typeDirectories = new HashSet<string>();  		//var packageManager = TraceLab.Core.PackageSystem.PackageManager.Instance;  		//foreach (TraceLabSDK.PackageSystem.IPackageReference packageReference in TopLevel.References)  		//{  		//    var package = packageManager.GetPackage(packageReference);  		//    foreach (string typesLocation in packageManager.GetDependantTypeLocations(package))  		//    {  		//        typeDirectories.Add(typesLocation);  		//    }  		//}  		//workspace.TypeDirectories.AddRange(typeDirectories);  		try {  			TopLevel.RunExperiment (progress' workspace' (ComponentsLibrary)componentsLibrary);  		}  		catch (System.IO.FileNotFoundException ex) {  			progress.SetError (true);  			progress.CurrentStatus = "Experiment failed to run";  			NLog.LogManager.GetCurrentClassLogger ().Error (String.Format ("Experiment failed to run. Some component dependencies could not be resolved. Please re-scan the components library to determine which components are failing.\n{0}"' ex.Message));  		}  	}  }  
Magic Number,TraceLab.UI.WPF.Views.Nodes,DecisionInfoControlBase,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Views\Nodes\DecisionInfoControlBase.cs,CompileDecisionModuleFunc,The following statement contains a magic number: if (args != null && args.Count == 2) {  	//validate args  	var node = args [0] as ExperimentNode;  	var appVM = args [1] as ApplicationViewModelWrapper;  	if (node != null && appVM != null) {  		List<string> workspaceTypeDirectories = appVM.WorkspaceViewModel.WorkspaceTypeDirectories;  		string topExperimentId = appVM.ExperimentViewModel.TopLevel.ExperimentInfo.Id;  		LoggerNameRoot loggerNameRoot = new LoggerNameRoot (topExperimentId);  		TraceLab.Core.Decisions.DecisionCompilationRunner.CompileDecision (node' m_experiment' workspaceTypeDirectories' loggerNameRoot);  	}  }  
Magic Number,TraceLab.UI.WPF.Views.Nodes,DecisionInfoControlBase,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Views\Nodes\DecisionInfoControlBase.cs,CanCompileDecisionModuleFunc,The following statement contains a magic number: if (args != null && args.Count == 2) {  	//validate args  	bool isDecision = args [0] is ExperimentDecisionNode || args [0] is LoopScopeNode;  	bool isApplicationViewModelWrapper = args [1] is ApplicationViewModelWrapper;  	if (isDecision && isApplicationViewModelWrapper) {  		canCompile = true;  	}  }  
Magic Number,TraceLab.UI.WPF.Views.Nodes,LoopScopeNodeControl,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Views\Nodes\LoopScopeNodeControl.xaml.cs,MoveCenterHorizontally,The following statement contains a magic number: VertexControl.CenterX += args.HorizontalChange / 2;  
Magic Number,TraceLab.UI.WPF.Views.Nodes,LoopScopeNodeControl,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Views\Nodes\LoopScopeNodeControl.xaml.cs,MoveCenterVertically,The following statement contains a magic number: VertexControl.CenterY += args.VerticalChange / 2;  
Magic Number,TraceLab.UI.WPF.Views.Nodes,ScopeNodeControl,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Views\Nodes\ScopeNodeControl.xaml.cs,MoveCenterHorizontally,The following statement contains a magic number: VertexControl.CenterX += args.HorizontalChange / 2;  
Magic Number,TraceLab.UI.WPF.Views.Nodes,ScopeNodeControl,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Views\Nodes\ScopeNodeControl.xaml.cs,MoveCenterVertically,The following statement contains a magic number: VertexControl.CenterY += args.VerticalChange / 2;  
Magic Number,TraceLab.UI.WPF.Views.Nodes,NodeInfoContainer,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Views\Nodes\NodeInfoContainer.xaml.cs,OnRender,The following statement contains a magic number: if (element != null && (IsMouseOver || element.IsMouseOver)) {  	var mainWindow = this.GetParent<DockableGraph> (null);  	var gt = element.TransformToVisual (this);  	var elementCenter = gt.Transform (new Point (element.ActualWidth / 2' element.ActualHeight / 2));  	var elementSize = new Size (element.ActualWidth' element.ActualHeight);  	var elementRect = new Rect (gt.Transform (new Point (0' 0))' elementSize);  	var thisCenter = new Point (ActualWidth / 2' ActualHeight / 2);  	// The total area we'll be drawing in.  	var totalRect = new Rect (elementRect.Location' elementRect.Size);  	totalRect.Union (new Rect (new Point (0' 0)' new Size (ActualWidth' ActualHeight)));  	// Create geometry objects to work with.  	var elementRectangleGeometry = new RectangleGeometry (elementRect);  	var totalRectangleGeometry = new RectangleGeometry (totalRect);  	// We'll now remove the element's rectangle from where we're drawing' so that we   	// don't draw on top of it' but will draw on top of everything else.  	CombinedGeometry clipGeometry = new CombinedGeometry (GeometryCombineMode.Exclude' totalRectangleGeometry' elementRectangleGeometry);  	drawingContext.PushClip (clipGeometry);  	//var node = OriginElement.Vertex as TraceLab.Core.Experiments.ExperimentNode;  	//Point vertexCenter = new Point(node.Data.X' node.Data.Y);  	Pen solidPen = new Pen (System.Windows.Media.Brushes.LightCoral' 1.0);  	drawingContext.DrawLine (solidPen' elementCenter' thisCenter);  	// Pop off the RectangleGeometry  	drawingContext.Pop ();  }  
Magic Number,TraceLab.UI.WPF.Views.Nodes,NodeInfoContainer,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Views\Nodes\NodeInfoContainer.xaml.cs,OnRender,The following statement contains a magic number: if (element != null && (IsMouseOver || element.IsMouseOver)) {  	var mainWindow = this.GetParent<DockableGraph> (null);  	var gt = element.TransformToVisual (this);  	var elementCenter = gt.Transform (new Point (element.ActualWidth / 2' element.ActualHeight / 2));  	var elementSize = new Size (element.ActualWidth' element.ActualHeight);  	var elementRect = new Rect (gt.Transform (new Point (0' 0))' elementSize);  	var thisCenter = new Point (ActualWidth / 2' ActualHeight / 2);  	// The total area we'll be drawing in.  	var totalRect = new Rect (elementRect.Location' elementRect.Size);  	totalRect.Union (new Rect (new Point (0' 0)' new Size (ActualWidth' ActualHeight)));  	// Create geometry objects to work with.  	var elementRectangleGeometry = new RectangleGeometry (elementRect);  	var totalRectangleGeometry = new RectangleGeometry (totalRect);  	// We'll now remove the element's rectangle from where we're drawing' so that we   	// don't draw on top of it' but will draw on top of everything else.  	CombinedGeometry clipGeometry = new CombinedGeometry (GeometryCombineMode.Exclude' totalRectangleGeometry' elementRectangleGeometry);  	drawingContext.PushClip (clipGeometry);  	//var node = OriginElement.Vertex as TraceLab.Core.Experiments.ExperimentNode;  	//Point vertexCenter = new Point(node.Data.X' node.Data.Y);  	Pen solidPen = new Pen (System.Windows.Media.Brushes.LightCoral' 1.0);  	drawingContext.DrawLine (solidPen' elementCenter' thisCenter);  	// Pop off the RectangleGeometry  	drawingContext.Pop ();  }  
Magic Number,TraceLab.UI.WPF.Views.Nodes,NodeInfoContainer,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Views\Nodes\NodeInfoContainer.xaml.cs,OnRender,The following statement contains a magic number: if (element != null && (IsMouseOver || element.IsMouseOver)) {  	var mainWindow = this.GetParent<DockableGraph> (null);  	var gt = element.TransformToVisual (this);  	var elementCenter = gt.Transform (new Point (element.ActualWidth / 2' element.ActualHeight / 2));  	var elementSize = new Size (element.ActualWidth' element.ActualHeight);  	var elementRect = new Rect (gt.Transform (new Point (0' 0))' elementSize);  	var thisCenter = new Point (ActualWidth / 2' ActualHeight / 2);  	// The total area we'll be drawing in.  	var totalRect = new Rect (elementRect.Location' elementRect.Size);  	totalRect.Union (new Rect (new Point (0' 0)' new Size (ActualWidth' ActualHeight)));  	// Create geometry objects to work with.  	var elementRectangleGeometry = new RectangleGeometry (elementRect);  	var totalRectangleGeometry = new RectangleGeometry (totalRect);  	// We'll now remove the element's rectangle from where we're drawing' so that we   	// don't draw on top of it' but will draw on top of everything else.  	CombinedGeometry clipGeometry = new CombinedGeometry (GeometryCombineMode.Exclude' totalRectangleGeometry' elementRectangleGeometry);  	drawingContext.PushClip (clipGeometry);  	//var node = OriginElement.Vertex as TraceLab.Core.Experiments.ExperimentNode;  	//Point vertexCenter = new Point(node.Data.X' node.Data.Y);  	Pen solidPen = new Pen (System.Windows.Media.Brushes.LightCoral' 1.0);  	drawingContext.DrawLine (solidPen' elementCenter' thisCenter);  	// Pop off the RectangleGeometry  	drawingContext.Pop ();  }  
Magic Number,TraceLab.UI.WPF.Views.Nodes,NodeInfoContainer,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Views\Nodes\NodeInfoContainer.xaml.cs,OnRender,The following statement contains a magic number: if (element != null && (IsMouseOver || element.IsMouseOver)) {  	var mainWindow = this.GetParent<DockableGraph> (null);  	var gt = element.TransformToVisual (this);  	var elementCenter = gt.Transform (new Point (element.ActualWidth / 2' element.ActualHeight / 2));  	var elementSize = new Size (element.ActualWidth' element.ActualHeight);  	var elementRect = new Rect (gt.Transform (new Point (0' 0))' elementSize);  	var thisCenter = new Point (ActualWidth / 2' ActualHeight / 2);  	// The total area we'll be drawing in.  	var totalRect = new Rect (elementRect.Location' elementRect.Size);  	totalRect.Union (new Rect (new Point (0' 0)' new Size (ActualWidth' ActualHeight)));  	// Create geometry objects to work with.  	var elementRectangleGeometry = new RectangleGeometry (elementRect);  	var totalRectangleGeometry = new RectangleGeometry (totalRect);  	// We'll now remove the element's rectangle from where we're drawing' so that we   	// don't draw on top of it' but will draw on top of everything else.  	CombinedGeometry clipGeometry = new CombinedGeometry (GeometryCombineMode.Exclude' totalRectangleGeometry' elementRectangleGeometry);  	drawingContext.PushClip (clipGeometry);  	//var node = OriginElement.Vertex as TraceLab.Core.Experiments.ExperimentNode;  	//Point vertexCenter = new Point(node.Data.X' node.Data.Y);  	Pen solidPen = new Pen (System.Windows.Media.Brushes.LightCoral' 1.0);  	drawingContext.DrawLine (solidPen' elementCenter' thisCenter);  	// Pop off the RectangleGeometry  	drawingContext.Pop ();  }  
Magic Number,TraceLab.UI.WPF.Views.PackageBuilder,IconExtractor,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Views\PackageBuilder\IconExtractor.cs,GetIcon,The following statement contains a magic number: SHGetFileInfo (strPath' 256' out info' (uint)cbFileInfo' flags);  
Missing Default,TraceLab.UI.WPF.Controls.AdornedControl,FrameworkElementAdorner,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Controls\AdornedControl\FrameworkElementAdorner.cs,DetermineX,The following switch statement is missing a default case: switch (child.HorizontalAlignment) {  case HorizontalAlignment.Left: {  	if (horizontalAdornerPlacement == AdornerPlacement.Outside) {  		return -child.DesiredSize.Width + offsetX;  	}  	else {  		return offsetX;  	}  }  case HorizontalAlignment.Right: {  	if (horizontalAdornerPlacement == AdornerPlacement.Outside) {  		double adornedWidth = AdornedElement.ActualWidth;  		return adornedWidth + offsetX;  	}  	else {  		double adornerWidth = this.child.DesiredSize.Width;  		double adornedWidth = AdornedElement.ActualWidth;  		double x = adornedWidth - adornerWidth;  		return x + offsetX;  	}  }  case HorizontalAlignment.Center: {  	double adornerWidth = this.child.DesiredSize.Width;  	double adornedWidth = AdornedElement.ActualWidth;  	double x = (adornedWidth / 2) - (adornerWidth / 2);  	return x + offsetX;  }  case HorizontalAlignment.Stretch: {  	return 0.0;  }  }  
Missing Default,TraceLab.UI.WPF.Controls.AdornedControl,FrameworkElementAdorner,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Controls\AdornedControl\FrameworkElementAdorner.cs,DetermineY,The following switch statement is missing a default case: switch (child.VerticalAlignment) {  case VerticalAlignment.Top: {  	if (verticalAdornerPlacement == AdornerPlacement.Outside) {  		return -child.DesiredSize.Height + offsetY;  	}  	else {  		return offsetY;  	}  }  case VerticalAlignment.Bottom: {  	if (verticalAdornerPlacement == AdornerPlacement.Outside) {  		double adornedHeight = AdornedElement.ActualHeight;  		return adornedHeight + offsetY;  	}  	else {  		double adornerHeight = this.child.DesiredSize.Height;  		double adornedHeight = AdornedElement.ActualHeight;  		double x = adornedHeight - adornerHeight;  		return x + offsetY;  	}  }  case VerticalAlignment.Center: {  	double adornerHeight = this.child.DesiredSize.Height;  	double adornedHeight = AdornedElement.ActualHeight;  	double x = (adornedHeight / 2) - (adornerHeight / 2);  	return x + offsetY;  }  case VerticalAlignment.Stretch: {  	return 0.0;  }  }  
Missing Default,TraceLab.UI.WPF.Controls.AdornedControl,FrameworkElementAdorner,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Controls\AdornedControl\FrameworkElementAdorner.cs,DetermineWidth,The following switch statement is missing a default case: switch (child.HorizontalAlignment) {  case HorizontalAlignment.Left: {  	return this.child.DesiredSize.Width;  }  case HorizontalAlignment.Right: {  	return this.child.DesiredSize.Width;  }  case HorizontalAlignment.Center: {  	return this.child.DesiredSize.Width;  }  case HorizontalAlignment.Stretch: {  	return AdornedElement.ActualWidth;  }  }  
Missing Default,TraceLab.UI.WPF.Controls.AdornedControl,FrameworkElementAdorner,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Controls\AdornedControl\FrameworkElementAdorner.cs,DetermineHeight,The following switch statement is missing a default case: switch (child.VerticalAlignment) {  case VerticalAlignment.Top: {  	return this.child.DesiredSize.Height;  }  case VerticalAlignment.Bottom: {  	return this.child.DesiredSize.Height;  }  case VerticalAlignment.Center: {  	return this.child.DesiredSize.Height;  }  case VerticalAlignment.Stretch: {  	return AdornedElement.ActualHeight;  }  }  
Missing Default,TraceLab.UI.WPF.Selectors,PackageBuilderWizardSelector,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Selectors\PackageBuilderWizardSelector.cs,SelectTemplate,The following switch statement is missing a default case: switch (currentState) {  case PackageBuilderWizardPage.Config:  	return win.FindResource ("configurationPage") as DataTemplate;  case PackageBuilderWizardPage.FileViewer:  	return win.FindResource ("packageFileTreeViewer") as DataTemplate;  }  
Missing Default,TraceLab.UI.WPF.Selectors,DefiningCompositeComponentWizardSelector,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Selectors\DefiningCompositeComponentWizardSelector.cs,SelectTemplate,The following switch statement is missing a default case: switch (currentState) {  case DefiningCompositeComponentWizardState.IOSpec:  	return win.FindResource ("ioSpecPanel") as DataTemplate;  case DefiningCompositeComponentWizardState.Configuration:  	return win.FindResource ("configurationPanel") as DataTemplate;  case DefiningCompositeComponentWizardState.Info:  	return win.FindResource ("componentInfoPanel") as DataTemplate;  case DefiningCompositeComponentWizardState.Confirmation:  	return win.FindResource ("confirmationPanel") as DataTemplate;  }  
Missing Default,TraceLab.UI.WPF.Selectors,BenchmarkWizardSelector,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Selectors\BenchmarkWizardSelector.cs,SelectTemplate,The following switch statement is missing a default case: switch (currentState) {  case BenchmarkWizardState.SelectBenchmark:  	return win.FindResource ("selectBenchmark") as DataTemplate;  case BenchmarkWizardState.Configuration:  	return win.FindResource ("benchmarkConfiguration") as DataTemplate;  case BenchmarkWizardState.Process:  	return win.FindResource ("executeBenchmark") as DataTemplate;  case BenchmarkWizardState.QuestionToPublishResults:  	return win.FindResource ("questionToPublishResults") as DataTemplate;  case BenchmarkWizardState.AuthenticationAndUpload:  	return win.FindResource ("authenticateAndUploadResults") as DataTemplate;  }  
Missing Default,TraceLab.UI.WPF.Selectors,DefineBenchmarkDialogSelector,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Selectors\DefineBenchmarkDialogSelector.cs,SelectTemplate,The following switch statement is missing a default case: switch (currentState) {  case DefiningBenchmarkDialogState.DefineBenchmark:  	return win.FindResource ("defineBenchmark") as DataTemplate;  case DefiningBenchmarkDialogState.Authentication:  	return win.FindResource ("contestPublishing") as DataTemplate;  //use the same template as UploadingContest  case DefiningBenchmarkDialogState.UploadingContest:  	return win.FindResource ("contestPublishing") as DataTemplate;  //use the same template as Authenticate  }  
Missing Default,TraceLab.UI.WPF.Utilities,FileOutsideDirectoryWarningBox,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Utilities\FileOutsideDirectoryWarningBox.cs,ShowWarningBox,The following switch statement is missing a default case: switch (result) {  case MessageBoxResult.Yes:  	tryagain = false;  	break;  case MessageBoxResult.No:  	tryagain = true;  	break;  }  
Missing Default,TraceLab.UI.WPF.Views.Nodes,DecisionInfoControlBase,C:\repos\CoEST_TraceLab\Main\TraceLab\TraceLab.UI.WPF\Views\Nodes\DecisionInfoControlBase.cs,OnFillItemsNeeded,The following switch statement is missing a default case: switch (args.Statement) {  case Statement.Select:  	FillItemsWithNextNodesLabels (comboBox);  	break;  case Statement.Load:  	comboBox.Items.Clear ();  	FillItemsWithIncomingOutputsFromPreviousNodes (comboBox);  	break;  }  
