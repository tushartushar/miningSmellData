Implementation smell,Namespace,Class,File,Method,Description
Long Method,GraphSharp.Test,LayoutUtilTest,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Test\LayoutHelperTest.cs,BiLayerCrossCount,The method has 117 lines of code.
Complex Method,GraphSharp.Test,LayoutUtilTest,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Test\LayoutHelperTest.cs,BiLayerCrossCount,Cyclomatic complexity of the method is 23
Complex Method,Palesz.QuickGraph.Test.Metrics,EdgeMetricCalculator<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Test\Metrics\EdgeMetricCalculator.cs,Calculate,Cyclomatic complexity of the method is 12
Long Parameter List,GraphSharp.Test.Algorithms,CompoundFDPForceTest,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Test\Algorithms\CompoundFDPForceTest.cs,GetRepulsionForce,The method has 5 parameters. Parameters: uPos' vPos' uSize' vSize' repulsionRange
Long Parameter List,Palesz.QuickGraph.Test.Generators,GraphGenerator,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Test\Generators\GraphGenerator.cs,CreateDAG,The method has 7 parameters. Parameters: vertexCount' edgeCount' maxParent' maxChild' parallelEdgeAllowed' vertexFactory' edgeFactory
Long Parameter List,Palesz.QuickGraph.Test.Generators,GraphGenerator,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Test\Generators\GraphGenerator.cs,CreateGeneralGraph,The method has 6 parameters. Parameters: vertexCount' edgeCount' maxDegree' parallelEdgeAllowed' vertexFactory' edgeFactory
Magic Number,GraphSharp.Test.Algorithms,CompoundFDPForceTest,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Test\Algorithms\CompoundFDPForceTest.cs,ForceTest,The following statement contains a magic number: var repulsionRange = parameters.IdealEdgeLength * 2;
Magic Number,GraphSharp.Test.Algorithms,CompoundFDPForceTest,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Test\Algorithms\CompoundFDPForceTest.cs,ForceTest,The following statement contains a magic number: Size uSize = new Size(10' 10);
Magic Number,GraphSharp.Test.Algorithms,CompoundFDPForceTest,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Test\Algorithms\CompoundFDPForceTest.cs,ForceTest,The following statement contains a magic number: Size uSize = new Size(10' 10);
Magic Number,GraphSharp.Test.Algorithms,CompoundFDPForceTest,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Test\Algorithms\CompoundFDPForceTest.cs,ForceTest,The following statement contains a magic number: Size vSize = new Size(10' 10);
Magic Number,GraphSharp.Test.Algorithms,CompoundFDPForceTest,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Test\Algorithms\CompoundFDPForceTest.cs,ForceTest,The following statement contains a magic number: Size vSize = new Size(10' 10);
Magic Number,GraphSharp.Test.Algorithms,CompoundFDPForceTest,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Test\Algorithms\CompoundFDPForceTest.cs,ForceTest,The following statement contains a magic number: double step = 0.5;
Magic Number,GraphSharp.Test.Algorithms,CompoundFDPForceTest,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Test\Algorithms\CompoundFDPForceTest.cs,ForceTest,The following statement contains a magic number: i < 30.0
Magic Number,GraphSharp.Test.Algorithms,CompoundFDPForceTest,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Test\Algorithms\CompoundFDPForceTest.cs,GetSpringForce,The following statement contains a magic number: var Fs = Math.Pow(length' 2) / parameters.ElasticConstant * F;
Magic Number,GraphSharp.Test.Algorithms,CompoundFDPForceTest,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Test\Algorithms\CompoundFDPForceTest.cs,GetRepulsionForce,The following statement contains a magic number: length = Math.Pow(isSameDirection ? length : 1 / length' isSameDirection ? 2 : 1);
Magic Number,GraphSharp.Test.Algorithms,CompoundFDPForceTest,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Test\Algorithms\CompoundFDPForceTest.cs,EdgeCrossingTest,The following statement contains a magic number: var vPoint1 = new Point(5' 5);
Magic Number,GraphSharp.Test.Algorithms,CompoundFDPForceTest,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Test\Algorithms\CompoundFDPForceTest.cs,EdgeCrossingTest,The following statement contains a magic number: var vPoint1 = new Point(5' 5);
Magic Number,GraphSharp.Test.Algorithms,CompoundFDPForceTest,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Test\Algorithms\CompoundFDPForceTest.cs,EdgeCrossingTest,The following statement contains a magic number: var uPoint2 = new Point(2' 1);
Magic Number,GraphSharp.Test.Algorithms,CompoundFDPForceTest,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Test\Algorithms\CompoundFDPForceTest.cs,EdgeCrossingTest,The following statement contains a magic number: var vPoint2 = new Point(-4' 2);
Magic Number,GraphSharp.Test.Algorithms,CompoundFDPForceTest,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Test\Algorithms\CompoundFDPForceTest.cs,EdgeCrossingTest,The following statement contains a magic number: var vPoint2 = new Point(-4' 2);
Magic Number,GraphSharp.Test,GraphHelperTest,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Test\GraphHelperTest.cs,EdgesBetweenDirectedTestOne,The following statement contains a magic number: Assert.AreEqual( 2' result.Count );
Magic Number,GraphSharp.Test,LayeredTopologicalSortAlgorithmTest,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Test\LayeredTopologicalSortAlgorithmTest.cs,Simple,The following statement contains a magic number: var vs = new string[ 3 ];
Magic Number,GraphSharp.Test,LayeredTopologicalSortAlgorithmTest,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Test\LayeredTopologicalSortAlgorithmTest.cs,Simple,The following statement contains a magic number: i < 4
Magic Number,GraphSharp.Test,LayeredTopologicalSortAlgorithmTest,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Test\LayeredTopologicalSortAlgorithmTest.cs,Simple,The following statement contains a magic number: g.AddEdge( new Edge<string>( vs[ 1 ]' vs[ 2 ] ) );
Magic Number,GraphSharp.Test,LayeredTopologicalSortAlgorithmTest,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Test\LayeredTopologicalSortAlgorithmTest.cs,Simple,The following statement contains a magic number: Assert.AreEqual( lts.LayerIndices[ vs[ 2 ] ]' 2 );
Magic Number,GraphSharp.Test,LayeredTopologicalSortAlgorithmTest,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Test\LayeredTopologicalSortAlgorithmTest.cs,Simple,The following statement contains a magic number: Assert.AreEqual( lts.LayerIndices[ vs[ 2 ] ]' 2 );
Magic Number,GraphSharp.Test,LayeredTopologicalSortAlgorithmTest,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Test\LayeredTopologicalSortAlgorithmTest.cs,MultipleSource,The following statement contains a magic number: var vs = new string[ 5 ];
Magic Number,GraphSharp.Test,LayeredTopologicalSortAlgorithmTest,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Test\LayeredTopologicalSortAlgorithmTest.cs,MultipleSource,The following statement contains a magic number: i < 6
Magic Number,GraphSharp.Test,LayeredTopologicalSortAlgorithmTest,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Test\LayeredTopologicalSortAlgorithmTest.cs,MultipleSource,The following statement contains a magic number: g.AddEdge( new Edge<string>( vs[ 1 ]' vs[ 2 ] ) );
Magic Number,GraphSharp.Test,LayeredTopologicalSortAlgorithmTest,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Test\LayeredTopologicalSortAlgorithmTest.cs,MultipleSource,The following statement contains a magic number: g.AddEdge( new Edge<string>( vs[ 3 ]' vs[ 1 ] ) );
Magic Number,GraphSharp.Test,LayeredTopologicalSortAlgorithmTest,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Test\LayeredTopologicalSortAlgorithmTest.cs,MultipleSource,The following statement contains a magic number: g.AddEdge( new Edge<string>( vs[ 4 ]' vs[ 2 ] ) );
Magic Number,GraphSharp.Test,LayeredTopologicalSortAlgorithmTest,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Test\LayeredTopologicalSortAlgorithmTest.cs,MultipleSource,The following statement contains a magic number: g.AddEdge( new Edge<string>( vs[ 4 ]' vs[ 2 ] ) );
Magic Number,GraphSharp.Test,LayeredTopologicalSortAlgorithmTest,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Test\LayeredTopologicalSortAlgorithmTest.cs,MultipleSource,The following statement contains a magic number: Assert.AreEqual( 2' lts.LayerIndices[ vs[ 2 ] ] );
Magic Number,GraphSharp.Test,LayeredTopologicalSortAlgorithmTest,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Test\LayeredTopologicalSortAlgorithmTest.cs,MultipleSource,The following statement contains a magic number: Assert.AreEqual( 2' lts.LayerIndices[ vs[ 2 ] ] );
Magic Number,GraphSharp.Test,LayeredTopologicalSortAlgorithmTest,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Test\LayeredTopologicalSortAlgorithmTest.cs,MultipleSource,The following statement contains a magic number: Assert.AreEqual( 0' lts.LayerIndices[ vs[ 3 ] ] );
Magic Number,GraphSharp.Test,LayeredTopologicalSortAlgorithmTest,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Test\LayeredTopologicalSortAlgorithmTest.cs,MultipleSource,The following statement contains a magic number: Assert.AreEqual( 0' lts.LayerIndices[ vs[ 4 ] ] );
Magic Number,GraphSharp.Test,LayeredTopologicalSortAlgorithmTest,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Test\LayeredTopologicalSortAlgorithmTest.cs,NonAcyclic,The following statement contains a magic number: var vs = new string[ 4 ];
Magic Number,GraphSharp.Test,LayeredTopologicalSortAlgorithmTest,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Test\LayeredTopologicalSortAlgorithmTest.cs,NonAcyclic,The following statement contains a magic number: i < 5
Magic Number,GraphSharp.Test,LayeredTopologicalSortAlgorithmTest,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Test\LayeredTopologicalSortAlgorithmTest.cs,NonAcyclic,The following statement contains a magic number: g.AddEdge( new Edge<string>( vs[ 1 ]' vs[ 2 ] ) );
Magic Number,GraphSharp.Test,LayeredTopologicalSortAlgorithmTest,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Test\LayeredTopologicalSortAlgorithmTest.cs,NonAcyclic,The following statement contains a magic number: g.AddEdge( new Edge<string>( vs[ 2 ]' vs[ 0 ] ) );
Magic Number,GraphSharp.Test,LayeredTopologicalSortAlgorithmTest,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Test\LayeredTopologicalSortAlgorithmTest.cs,NonAcyclic,The following statement contains a magic number: g.AddEdge( new Edge<string>( vs[ 3 ]' vs[ 0 ] ) );
Magic Number,GraphSharp.Test,LayoutUtilTest,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Test\LayoutHelperTest.cs,GetClippingPoint_Target_Outside_Source_Rect_ClippingPoint_OnCorner_Test,The following statement contains a magic number: Size size = new Size(10'10);
Magic Number,GraphSharp.Test,LayoutUtilTest,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Test\LayoutHelperTest.cs,GetClippingPoint_Target_Outside_Source_Rect_ClippingPoint_OnCorner_Test,The following statement contains a magic number: Size size = new Size(10'10);
Magic Number,GraphSharp.Test,LayoutUtilTest,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Test\LayoutHelperTest.cs,GetClippingPoint_Target_Outside_Source_Rect_ClippingPoint_OnCorner_Test,The following statement contains a magic number: Point s = new Point(5'5);
Magic Number,GraphSharp.Test,LayoutUtilTest,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Test\LayoutHelperTest.cs,GetClippingPoint_Target_Outside_Source_Rect_ClippingPoint_OnCorner_Test,The following statement contains a magic number: Point s = new Point(5'5);
Magic Number,GraphSharp.Test,LayoutUtilTest,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Test\LayoutHelperTest.cs,GetClippingPoint_Target_Outside_Source_Rect_ClippingPoint_OnCorner_Test,The following statement contains a magic number: Point t = new Point(20'20);
Magic Number,GraphSharp.Test,LayoutUtilTest,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Test\LayoutHelperTest.cs,GetClippingPoint_Target_Outside_Source_Rect_ClippingPoint_OnCorner_Test,The following statement contains a magic number: Point t = new Point(20'20);
Magic Number,GraphSharp.Test,LayoutUtilTest,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Test\LayoutHelperTest.cs,GetClippingPoint_Target_Outside_Source_Rect_ClippingPoint_OnCorner_Test,The following statement contains a magic number: Point expected = new Point(10'10);
Magic Number,GraphSharp.Test,LayoutUtilTest,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Test\LayoutHelperTest.cs,GetClippingPoint_Target_Outside_Source_Rect_ClippingPoint_OnCorner_Test,The following statement contains a magic number: Point expected = new Point(10'10);
Magic Number,GraphSharp.Test,LayoutUtilTest,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Test\LayoutHelperTest.cs,GetClippingPoint_Target_Outside_Source_Rect_ClippingPoint_OnBottomSide_Test,The following statement contains a magic number: Size size = new Size(10' 10);
Magic Number,GraphSharp.Test,LayoutUtilTest,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Test\LayoutHelperTest.cs,GetClippingPoint_Target_Outside_Source_Rect_ClippingPoint_OnBottomSide_Test,The following statement contains a magic number: Size size = new Size(10' 10);
Magic Number,GraphSharp.Test,LayoutUtilTest,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Test\LayoutHelperTest.cs,GetClippingPoint_Target_Outside_Source_Rect_ClippingPoint_OnBottomSide_Test,The following statement contains a magic number: Point s = new Point(5' 5);
Magic Number,GraphSharp.Test,LayoutUtilTest,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Test\LayoutHelperTest.cs,GetClippingPoint_Target_Outside_Source_Rect_ClippingPoint_OnBottomSide_Test,The following statement contains a magic number: Point s = new Point(5' 5);
Magic Number,GraphSharp.Test,LayoutUtilTest,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Test\LayoutHelperTest.cs,GetClippingPoint_Target_Outside_Source_Rect_ClippingPoint_OnBottomSide_Test,The following statement contains a magic number: Point t = new Point(20' 30);
Magic Number,GraphSharp.Test,LayoutUtilTest,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Test\LayoutHelperTest.cs,GetClippingPoint_Target_Outside_Source_Rect_ClippingPoint_OnBottomSide_Test,The following statement contains a magic number: Point t = new Point(20' 30);
Magic Number,GraphSharp.Test,LayoutUtilTest,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Test\LayoutHelperTest.cs,GetClippingPoint_Target_Outside_Source_Rect_ClippingPoint_OnBottomSide_Test,The following statement contains a magic number: Point expected = new Point(8' 10);
Magic Number,GraphSharp.Test,LayoutUtilTest,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Test\LayoutHelperTest.cs,GetClippingPoint_Target_Outside_Source_Rect_ClippingPoint_OnBottomSide_Test,The following statement contains a magic number: Point expected = new Point(8' 10);
Magic Number,GraphSharp.Test,LayoutUtilTest,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Test\LayoutHelperTest.cs,GetClippingPoint_Target_Inside_Source_Rect_ClippingPoint_OnBottomSide_Test,The following statement contains a magic number: Size size = new Size(10' 10);
Magic Number,GraphSharp.Test,LayoutUtilTest,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Test\LayoutHelperTest.cs,GetClippingPoint_Target_Inside_Source_Rect_ClippingPoint_OnBottomSide_Test,The following statement contains a magic number: Size size = new Size(10' 10);
Magic Number,GraphSharp.Test,LayoutUtilTest,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Test\LayoutHelperTest.cs,GetClippingPoint_Target_Inside_Source_Rect_ClippingPoint_OnBottomSide_Test,The following statement contains a magic number: Point s = new Point(5' 5);
Magic Number,GraphSharp.Test,LayoutUtilTest,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Test\LayoutHelperTest.cs,GetClippingPoint_Target_Inside_Source_Rect_ClippingPoint_OnBottomSide_Test,The following statement contains a magic number: Point s = new Point(5' 5);
Magic Number,GraphSharp.Test,LayoutUtilTest,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Test\LayoutHelperTest.cs,GetClippingPoint_Target_Inside_Source_Rect_ClippingPoint_OnBottomSide_Test,The following statement contains a magic number: Point t = new Point(5.3' 5.5);
Magic Number,GraphSharp.Test,LayoutUtilTest,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Test\LayoutHelperTest.cs,GetClippingPoint_Target_Inside_Source_Rect_ClippingPoint_OnBottomSide_Test,The following statement contains a magic number: Point t = new Point(5.3' 5.5);
Magic Number,GraphSharp.Test,LayoutUtilTest,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Test\LayoutHelperTest.cs,GetClippingPoint_Target_Inside_Source_Rect_ClippingPoint_OnBottomSide_Test,The following statement contains a magic number: Point expected = new Point(8' 10);
Magic Number,GraphSharp.Test,LayoutUtilTest,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Test\LayoutHelperTest.cs,GetClippingPoint_Target_Inside_Source_Rect_ClippingPoint_OnBottomSide_Test,The following statement contains a magic number: Point expected = new Point(8' 10);
Magic Number,GraphSharp.Test,LayoutUtilTest,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Test\LayoutHelperTest.cs,GetClippingPoint_Target_Inside_Source_Rect_ClippingPoint_OnBottomSide_Test,The following statement contains a magic number: double epsilon = 0.0000001;
Magic Number,GraphSharp.Test,LayoutUtilTest,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Test\LayoutHelperTest.cs,BiLayerCrossCountTest,The following statement contains a magic number: IEnumerable<Pair> pairs = new Pair[] {   			                                     	new Pair() { First = 0' Second = 1' Weight = 2}'  			                                     	new Pair() { First = 0' Second = 2' Weight = 3}'  			                                     	new Pair() { First = 3' Second = 0' Weight = 2}'                                                       new Pair() { First = 3' Second = 1' Weight = 4}'                                                      new Pair() { First = 5' Second = 0' Weight = 3}  			                                     };
Magic Number,GraphSharp.Test,LayoutUtilTest,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Test\LayoutHelperTest.cs,BiLayerCrossCountTest,The following statement contains a magic number: IEnumerable<Pair> pairs = new Pair[] {   			                                     	new Pair() { First = 0' Second = 1' Weight = 2}'  			                                     	new Pair() { First = 0' Second = 2' Weight = 3}'  			                                     	new Pair() { First = 3' Second = 0' Weight = 2}'                                                       new Pair() { First = 3' Second = 1' Weight = 4}'                                                      new Pair() { First = 5' Second = 0' Weight = 3}  			                                     };
Magic Number,GraphSharp.Test,LayoutUtilTest,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Test\LayoutHelperTest.cs,BiLayerCrossCountTest,The following statement contains a magic number: IEnumerable<Pair> pairs = new Pair[] {   			                                     	new Pair() { First = 0' Second = 1' Weight = 2}'  			                                     	new Pair() { First = 0' Second = 2' Weight = 3}'  			                                     	new Pair() { First = 3' Second = 0' Weight = 2}'                                                       new Pair() { First = 3' Second = 1' Weight = 4}'                                                      new Pair() { First = 5' Second = 0' Weight = 3}  			                                     };
Magic Number,GraphSharp.Test,LayoutUtilTest,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Test\LayoutHelperTest.cs,BiLayerCrossCountTest,The following statement contains a magic number: IEnumerable<Pair> pairs = new Pair[] {   			                                     	new Pair() { First = 0' Second = 1' Weight = 2}'  			                                     	new Pair() { First = 0' Second = 2' Weight = 3}'  			                                     	new Pair() { First = 3' Second = 0' Weight = 2}'                                                       new Pair() { First = 3' Second = 1' Weight = 4}'                                                      new Pair() { First = 5' Second = 0' Weight = 3}  			                                     };
Magic Number,GraphSharp.Test,LayoutUtilTest,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Test\LayoutHelperTest.cs,BiLayerCrossCountTest,The following statement contains a magic number: IEnumerable<Pair> pairs = new Pair[] {   			                                     	new Pair() { First = 0' Second = 1' Weight = 2}'  			                                     	new Pair() { First = 0' Second = 2' Weight = 3}'  			                                     	new Pair() { First = 3' Second = 0' Weight = 2}'                                                       new Pair() { First = 3' Second = 1' Weight = 4}'                                                      new Pair() { First = 5' Second = 0' Weight = 3}  			                                     };
Magic Number,GraphSharp.Test,LayoutUtilTest,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Test\LayoutHelperTest.cs,BiLayerCrossCountTest,The following statement contains a magic number: IEnumerable<Pair> pairs = new Pair[] {   			                                     	new Pair() { First = 0' Second = 1' Weight = 2}'  			                                     	new Pair() { First = 0' Second = 2' Weight = 3}'  			                                     	new Pair() { First = 3' Second = 0' Weight = 2}'                                                       new Pair() { First = 3' Second = 1' Weight = 4}'                                                      new Pair() { First = 5' Second = 0' Weight = 3}  			                                     };
Magic Number,GraphSharp.Test,LayoutUtilTest,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Test\LayoutHelperTest.cs,BiLayerCrossCountTest,The following statement contains a magic number: IEnumerable<Pair> pairs = new Pair[] {   			                                     	new Pair() { First = 0' Second = 1' Weight = 2}'  			                                     	new Pair() { First = 0' Second = 2' Weight = 3}'  			                                     	new Pair() { First = 3' Second = 0' Weight = 2}'                                                       new Pair() { First = 3' Second = 1' Weight = 4}'                                                      new Pair() { First = 5' Second = 0' Weight = 3}  			                                     };
Magic Number,GraphSharp.Test,LayoutUtilTest,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Test\LayoutHelperTest.cs,BiLayerCrossCountTest,The following statement contains a magic number: IEnumerable<Pair> pairs = new Pair[] {   			                                     	new Pair() { First = 0' Second = 1' Weight = 2}'  			                                     	new Pair() { First = 0' Second = 2' Weight = 3}'  			                                     	new Pair() { First = 3' Second = 0' Weight = 2}'                                                       new Pair() { First = 3' Second = 1' Weight = 4}'                                                      new Pair() { First = 5' Second = 0' Weight = 3}  			                                     };
Magic Number,GraphSharp.Test,LayoutUtilTest,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Test\LayoutHelperTest.cs,BiLayerCrossCountTest,The following statement contains a magic number: IEnumerable<Pair> pairs = new Pair[] {   			                                     	new Pair() { First = 0' Second = 1' Weight = 2}'  			                                     	new Pair() { First = 0' Second = 2' Weight = 3}'  			                                     	new Pair() { First = 3' Second = 0' Weight = 2}'                                                       new Pair() { First = 3' Second = 1' Weight = 4}'                                                      new Pair() { First = 5' Second = 0' Weight = 3}  			                                     };
Magic Number,GraphSharp.Test,LayoutUtilTest,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Test\LayoutHelperTest.cs,BiLayerCrossCountTest,The following statement contains a magic number: int firstLayerVertexCount = 26;
Magic Number,GraphSharp.Test,LayoutUtilTest,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Test\LayoutHelperTest.cs,BiLayerCrossCountTest,The following statement contains a magic number: int secondLayerVertexCount = 3;
Magic Number,GraphSharp.Test,LayoutUtilTest,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Test\LayoutHelperTest.cs,BiLayerCrossCountTest,The following statement contains a magic number: int expected = 49;
Magic Number,GraphSharp.Test,LayoutUtilTest,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Test\LayoutHelperTest.cs,Markable_BiLayerCrossCountTest,The following statement contains a magic number: CrossCounterPair[] pairs = new CrossCounterPair[] {   			                                     	new CrossCounterPair() { First = 0' Second = 1' Weight = 1' Markable = true}'  			                                     	new CrossCounterPair() { First = 1' Second = 0' Weight = 1' Markable = false}'  			                                     	new CrossCounterPair() { First = 3' Second = 1' Weight = 1' Markable = true}'                                                       new CrossCounterPair() { First = 3' Second = 2' Weight = 1' Markable = true}'                                                      new CrossCounterPair() { First = 3' Second = 3' Weight = 1' Markable = true}'                                                      new CrossCounterPair() { First = 4' Second = 2' Weight = 1' Markable = false}'                                                      new CrossCounterPair() { First = 2' Second = 2' Weight = 1' Markable = false}  			                                     };
Magic Number,GraphSharp.Test,LayoutUtilTest,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Test\LayoutHelperTest.cs,Markable_BiLayerCrossCountTest,The following statement contains a magic number: CrossCounterPair[] pairs = new CrossCounterPair[] {   			                                     	new CrossCounterPair() { First = 0' Second = 1' Weight = 1' Markable = true}'  			                                     	new CrossCounterPair() { First = 1' Second = 0' Weight = 1' Markable = false}'  			                                     	new CrossCounterPair() { First = 3' Second = 1' Weight = 1' Markable = true}'                                                       new CrossCounterPair() { First = 3' Second = 2' Weight = 1' Markable = true}'                                                      new CrossCounterPair() { First = 3' Second = 3' Weight = 1' Markable = true}'                                                      new CrossCounterPair() { First = 4' Second = 2' Weight = 1' Markable = false}'                                                      new CrossCounterPair() { First = 2' Second = 2' Weight = 1' Markable = false}  			                                     };
Magic Number,GraphSharp.Test,LayoutUtilTest,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Test\LayoutHelperTest.cs,Markable_BiLayerCrossCountTest,The following statement contains a magic number: CrossCounterPair[] pairs = new CrossCounterPair[] {   			                                     	new CrossCounterPair() { First = 0' Second = 1' Weight = 1' Markable = true}'  			                                     	new CrossCounterPair() { First = 1' Second = 0' Weight = 1' Markable = false}'  			                                     	new CrossCounterPair() { First = 3' Second = 1' Weight = 1' Markable = true}'                                                       new CrossCounterPair() { First = 3' Second = 2' Weight = 1' Markable = true}'                                                      new CrossCounterPair() { First = 3' Second = 3' Weight = 1' Markable = true}'                                                      new CrossCounterPair() { First = 4' Second = 2' Weight = 1' Markable = false}'                                                      new CrossCounterPair() { First = 2' Second = 2' Weight = 1' Markable = false}  			                                     };
Magic Number,GraphSharp.Test,LayoutUtilTest,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Test\LayoutHelperTest.cs,Markable_BiLayerCrossCountTest,The following statement contains a magic number: CrossCounterPair[] pairs = new CrossCounterPair[] {   			                                     	new CrossCounterPair() { First = 0' Second = 1' Weight = 1' Markable = true}'  			                                     	new CrossCounterPair() { First = 1' Second = 0' Weight = 1' Markable = false}'  			                                     	new CrossCounterPair() { First = 3' Second = 1' Weight = 1' Markable = true}'                                                       new CrossCounterPair() { First = 3' Second = 2' Weight = 1' Markable = true}'                                                      new CrossCounterPair() { First = 3' Second = 3' Weight = 1' Markable = true}'                                                      new CrossCounterPair() { First = 4' Second = 2' Weight = 1' Markable = false}'                                                      new CrossCounterPair() { First = 2' Second = 2' Weight = 1' Markable = false}  			                                     };
Magic Number,GraphSharp.Test,LayoutUtilTest,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Test\LayoutHelperTest.cs,Markable_BiLayerCrossCountTest,The following statement contains a magic number: CrossCounterPair[] pairs = new CrossCounterPair[] {   			                                     	new CrossCounterPair() { First = 0' Second = 1' Weight = 1' Markable = true}'  			                                     	new CrossCounterPair() { First = 1' Second = 0' Weight = 1' Markable = false}'  			                                     	new CrossCounterPair() { First = 3' Second = 1' Weight = 1' Markable = true}'                                                       new CrossCounterPair() { First = 3' Second = 2' Weight = 1' Markable = true}'                                                      new CrossCounterPair() { First = 3' Second = 3' Weight = 1' Markable = true}'                                                      new CrossCounterPair() { First = 4' Second = 2' Weight = 1' Markable = false}'                                                      new CrossCounterPair() { First = 2' Second = 2' Weight = 1' Markable = false}  			                                     };
Magic Number,GraphSharp.Test,LayoutUtilTest,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Test\LayoutHelperTest.cs,Markable_BiLayerCrossCountTest,The following statement contains a magic number: CrossCounterPair[] pairs = new CrossCounterPair[] {   			                                     	new CrossCounterPair() { First = 0' Second = 1' Weight = 1' Markable = true}'  			                                     	new CrossCounterPair() { First = 1' Second = 0' Weight = 1' Markable = false}'  			                                     	new CrossCounterPair() { First = 3' Second = 1' Weight = 1' Markable = true}'                                                       new CrossCounterPair() { First = 3' Second = 2' Weight = 1' Markable = true}'                                                      new CrossCounterPair() { First = 3' Second = 3' Weight = 1' Markable = true}'                                                      new CrossCounterPair() { First = 4' Second = 2' Weight = 1' Markable = false}'                                                      new CrossCounterPair() { First = 2' Second = 2' Weight = 1' Markable = false}  			                                     };
Magic Number,GraphSharp.Test,LayoutUtilTest,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Test\LayoutHelperTest.cs,Markable_BiLayerCrossCountTest,The following statement contains a magic number: CrossCounterPair[] pairs = new CrossCounterPair[] {   			                                     	new CrossCounterPair() { First = 0' Second = 1' Weight = 1' Markable = true}'  			                                     	new CrossCounterPair() { First = 1' Second = 0' Weight = 1' Markable = false}'  			                                     	new CrossCounterPair() { First = 3' Second = 1' Weight = 1' Markable = true}'                                                       new CrossCounterPair() { First = 3' Second = 2' Weight = 1' Markable = true}'                                                      new CrossCounterPair() { First = 3' Second = 3' Weight = 1' Markable = true}'                                                      new CrossCounterPair() { First = 4' Second = 2' Weight = 1' Markable = false}'                                                      new CrossCounterPair() { First = 2' Second = 2' Weight = 1' Markable = false}  			                                     };
Magic Number,GraphSharp.Test,LayoutUtilTest,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Test\LayoutHelperTest.cs,Markable_BiLayerCrossCountTest,The following statement contains a magic number: CrossCounterPair[] pairs = new CrossCounterPair[] {   			                                     	new CrossCounterPair() { First = 0' Second = 1' Weight = 1' Markable = true}'  			                                     	new CrossCounterPair() { First = 1' Second = 0' Weight = 1' Markable = false}'  			                                     	new CrossCounterPair() { First = 3' Second = 1' Weight = 1' Markable = true}'                                                       new CrossCounterPair() { First = 3' Second = 2' Weight = 1' Markable = true}'                                                      new CrossCounterPair() { First = 3' Second = 3' Weight = 1' Markable = true}'                                                      new CrossCounterPair() { First = 4' Second = 2' Weight = 1' Markable = false}'                                                      new CrossCounterPair() { First = 2' Second = 2' Weight = 1' Markable = false}  			                                     };
Magic Number,GraphSharp.Test,LayoutUtilTest,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Test\LayoutHelperTest.cs,Markable_BiLayerCrossCountTest,The following statement contains a magic number: CrossCounterPair[] pairs = new CrossCounterPair[] {   			                                     	new CrossCounterPair() { First = 0' Second = 1' Weight = 1' Markable = true}'  			                                     	new CrossCounterPair() { First = 1' Second = 0' Weight = 1' Markable = false}'  			                                     	new CrossCounterPair() { First = 3' Second = 1' Weight = 1' Markable = true}'                                                       new CrossCounterPair() { First = 3' Second = 2' Weight = 1' Markable = true}'                                                      new CrossCounterPair() { First = 3' Second = 3' Weight = 1' Markable = true}'                                                      new CrossCounterPair() { First = 4' Second = 2' Weight = 1' Markable = false}'                                                      new CrossCounterPair() { First = 2' Second = 2' Weight = 1' Markable = false}  			                                     };
Magic Number,GraphSharp.Test,LayoutUtilTest,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Test\LayoutHelperTest.cs,Markable_BiLayerCrossCountTest,The following statement contains a magic number: int firstLayerVertexCount = 5;
Magic Number,GraphSharp.Test,LayoutUtilTest,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Test\LayoutHelperTest.cs,Markable_BiLayerCrossCountTest,The following statement contains a magic number: int secondLayerVertexCount = 5;
Magic Number,GraphSharp.Test,LayoutUtilTest,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Test\LayoutHelperTest.cs,Markable_BiLayerCrossCountTest,The following statement contains a magic number: int expected = 3;
Magic Number,GraphSharp.Test,LayoutUtilTest,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Test\LayoutHelperTest.cs,Markable_BiLayerCrossCountTest,The following statement contains a magic number: Assert.IsTrue(pairs[2].Marked);
Magic Number,GraphSharp.Test,LayoutUtilTest,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Test\LayoutHelperTest.cs,Markable_BiLayerCrossCountTest,The following statement contains a magic number: Assert.IsFalse(pairs[3].Marked);
Magic Number,GraphSharp.Test,LayoutUtilTest,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Test\LayoutHelperTest.cs,Markable_BiLayerCrossCountTest,The following statement contains a magic number: Assert.IsTrue(pairs[4].Marked);
Magic Number,GraphSharp.Test,LayoutUtilTest,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Test\LayoutHelperTest.cs,Markable_BiLayerCrossCountTest,The following statement contains a magic number: Assert.IsFalse(pairs[5].Marked);
Magic Number,GraphSharp.Test,LayoutUtilTest,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Test\LayoutHelperTest.cs,Markable_BiLayerCrossCountTest,The following statement contains a magic number: Assert.IsFalse(pairs[5].Marked);
Magic Number,GraphSharp.Test,LayoutUtilTest,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Test\LayoutHelperTest.cs,BiLayerCrossCount,The following statement contains a magic number: firstIndex *= 2;
Magic Number,GraphSharp.Test,LayoutUtilTest,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Test\LayoutHelperTest.cs,BiLayerCrossCount,The following statement contains a magic number: int treeSize = 2 * firstIndex - 1;
Magic Number,GraphSharp.Test,LayoutUtilTest,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Test\LayoutHelperTest.cs,BiLayerCrossCount,The following statement contains a magic number: index % 2 > 0
Magic Number,GraphSharp.Test,LayoutUtilTest,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Test\LayoutHelperTest.cs,BiLayerCrossCount,The following statement contains a magic number: index = (index - 1) / 2;
Magic Number,Palesz.QuickGraph.Test.Metrics,EdgeMetricCalculator<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Test\Metrics\EdgeMetricCalculator.cs,Calculate,The following statement contains a magic number: points = new List<Point>( route.Length + 2 );
Magic Number,Palesz.QuickGraph.Test.Metrics,LayoutAreaMetricCalculator<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Test\Metrics\LayoutAreaMetricCalculator.cs,Calculate,The following statement contains a magic number: topLeft.X = Math.Min( p.X - s.Width / 2.0' topLeft.X );
Magic Number,Palesz.QuickGraph.Test.Metrics,LayoutAreaMetricCalculator<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Test\Metrics\LayoutAreaMetricCalculator.cs,Calculate,The following statement contains a magic number: topLeft.Y = Math.Min( p.Y - s.Height / 2.0' topLeft.Y );
Magic Number,Palesz.QuickGraph.Test.Metrics,LayoutAreaMetricCalculator<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Test\Metrics\LayoutAreaMetricCalculator.cs,Calculate,The following statement contains a magic number: bottomRight.X = Math.Max( p.X + s.Width / 2.0' bottomRight.X );
Magic Number,Palesz.QuickGraph.Test.Metrics,LayoutAreaMetricCalculator<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Test\Metrics\LayoutAreaMetricCalculator.cs,Calculate,The following statement contains a magic number: bottomRight.Y = Math.Max( p.Y + s.Height / 2.0' bottomRight.Y );
Magic Number,Palesz.QuickGraph.Test.Metrics,OverlapMetricCalculator<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Test\Metrics\OverlapMetricCalculator.cs,Calculate,The following statement contains a magic number: Rect r1 = new Rect( p1.X - s1.Width / 2' p1.Y - s1.Height / 2' p1.X + s1.Width / 2' p1.Y + s1.Height / 2 );
Magic Number,Palesz.QuickGraph.Test.Metrics,OverlapMetricCalculator<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Test\Metrics\OverlapMetricCalculator.cs,Calculate,The following statement contains a magic number: Rect r1 = new Rect( p1.X - s1.Width / 2' p1.Y - s1.Height / 2' p1.X + s1.Width / 2' p1.Y + s1.Height / 2 );
Magic Number,Palesz.QuickGraph.Test.Metrics,OverlapMetricCalculator<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Test\Metrics\OverlapMetricCalculator.cs,Calculate,The following statement contains a magic number: Rect r1 = new Rect( p1.X - s1.Width / 2' p1.Y - s1.Height / 2' p1.X + s1.Width / 2' p1.Y + s1.Height / 2 );
Magic Number,Palesz.QuickGraph.Test.Metrics,OverlapMetricCalculator<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Test\Metrics\OverlapMetricCalculator.cs,Calculate,The following statement contains a magic number: Rect r1 = new Rect( p1.X - s1.Width / 2' p1.Y - s1.Height / 2' p1.X + s1.Width / 2' p1.Y + s1.Height / 2 );
Magic Number,Palesz.QuickGraph.Test.Metrics,OverlapMetricCalculator<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Test\Metrics\OverlapMetricCalculator.cs,Calculate,The following statement contains a magic number: Rect r2 = new Rect( p2.X - s1.Width / 2' p2.Y - s1.Height / 2' p2.X + s1.Width / 2' p2.Y + s1.Height / 2 );
Magic Number,Palesz.QuickGraph.Test.Metrics,OverlapMetricCalculator<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Test\Metrics\OverlapMetricCalculator.cs,Calculate,The following statement contains a magic number: Rect r2 = new Rect( p2.X - s1.Width / 2' p2.Y - s1.Height / 2' p2.X + s1.Width / 2' p2.Y + s1.Height / 2 );
Magic Number,Palesz.QuickGraph.Test.Metrics,OverlapMetricCalculator<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Test\Metrics\OverlapMetricCalculator.cs,Calculate,The following statement contains a magic number: Rect r2 = new Rect( p2.X - s1.Width / 2' p2.Y - s1.Height / 2' p2.X + s1.Width / 2' p2.Y + s1.Height / 2 );
Magic Number,Palesz.QuickGraph.Test.Metrics,OverlapMetricCalculator<TVertex;TEdge;TGraph>,D:\research\architectureSmells\repos\CoEST_TraceLab\Main\external\GraphSharp\Source\GraphSharp.Test\Metrics\OverlapMetricCalculator.cs,Calculate,The following statement contains a magic number: Rect r2 = new Rect( p2.X - s1.Width / 2' p2.Y - s1.Height / 2' p2.X + s1.Width / 2' p2.Y + s1.Height / 2 );
