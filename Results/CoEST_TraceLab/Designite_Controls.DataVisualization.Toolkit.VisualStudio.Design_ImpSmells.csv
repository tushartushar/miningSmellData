Implementation smell,Namespace,Class,File,Method,Description
Complex Method,System.Windows.Controls.Design.Common,MetadataRegistrationBase,C:\repos\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization.VisualStudio.Design\..\DataVisualization.Design\MetadataBase.cs,AddDescriptions,Cyclomatic complexity of the method is 10
Long Parameter List,System.Windows.Controls.DataVisualization.Design,AreaSeriesMetadata,C:\repos\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization.VisualStudio.Design\..\DataVisualization.Design\AreaSeriesMetadata.cs,AreaSeriesMetadata,The method has 10 parameters.
Long Parameter List,System.Windows.Controls.DataVisualization.Design,BarSeriesMetadata,C:\repos\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization.VisualStudio.Design\..\DataVisualization.Design\BarSeriesMetadata.cs,BarSeriesMetadata,The method has 8 parameters.
Long Parameter List,System.Windows.Controls.DataVisualization.Design,BubbleSeriesMetadata,C:\repos\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization.VisualStudio.Design\..\DataVisualization.Design\BubbleSeriesMetadata.cs,BubbleSeriesMetadata,The method has 10 parameters.
Long Parameter List,System.Windows.Controls.DataVisualization.Design,ChartMetadata,C:\repos\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization.VisualStudio.Design\..\DataVisualization.Design\ChartMetadata.cs,ChartMetadata,The method has 15 parameters.
Long Parameter List,System.Windows.Controls.DataVisualization.Design,ColumnSeriesMetadata,C:\repos\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization.VisualStudio.Design\..\DataVisualization.Design\ColumnSeriesMetadata.cs,ColumnSeriesMetadata,The method has 8 parameters.
Long Parameter List,System.Windows.Controls.DataVisualization.Design,DataPointMetadata,C:\repos\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization.VisualStudio.Design\..\DataVisualization.Design\DataPointMetadata.cs,DataPointMetadata,The method has 13 parameters.
Long Parameter List,System.Windows.Controls.DataVisualization.Design,DataPointSeriesMetadata,C:\repos\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization.VisualStudio.Design\..\DataVisualization.Design\DataPointSeriesMetadata.cs,DataPointSeriesMetadata,The method has 11 parameters.
Long Parameter List,System.Windows.Controls.DataVisualization.Design,DateTimeAxisMetadata,C:\repos\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization.VisualStudio.Design\..\DataVisualization.Design\DateTimeAxisMetadata.cs,DateTimeAxisMetadata,The method has 5 parameters.
Long Parameter List,System.Windows.Controls.DataVisualization.Design,DisplayAxisMetadata,C:\repos\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization.VisualStudio.Design\..\DataVisualization.Design\DisplayAxisMetadata.cs,DisplayAxisMetadata,The method has 9 parameters.
Long Parameter List,System.Windows.Controls.DataVisualization.Design,LegendMetadata,C:\repos\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization.VisualStudio.Design\..\DataVisualization.Design\LegendMetadata.cs,LegendMetadata,The method has 8 parameters.
Long Parameter List,System.Windows.Controls.DataVisualization.Design,LineSeriesMetadata,C:\repos\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization.VisualStudio.Design\..\DataVisualization.Design\LineSeriesMetadata.cs,LineSeriesMetadata,The method has 10 parameters.
Long Parameter List,System.Windows.Controls.DataVisualization.Design,PieDataPointMetadata,C:\repos\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization.VisualStudio.Design\..\DataVisualization.Design\PieDataPointMetadata.cs,PieDataPointMetadata,The method has 10 parameters.
Long Parameter List,System.Windows.Controls.DataVisualization.Design,ScatterSeriesMetadata,C:\repos\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization.VisualStudio.Design\..\DataVisualization.Design\ScatterSeriesMetadata.cs,ScatterSeriesMetadata,The method has 8 parameters.
Long Parameter List,System.Windows.Controls.DataVisualization.VisualStudio.Design,MetadataRegistration,C:\repos\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization.VisualStudio.Design\MetadataRegistration.cs,AddAttributes,The method has 16 parameters.
Long Statement,System.Windows.Controls.Design.Common,MetadataRegistrationBase,C:\repos\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization.VisualStudio.Design\..\DataVisualization.Design\MetadataBase.cs,AddDescriptions,The length of the statement  "	XDocument xdoc = XDocument.Load (new StreamReader (Assembly.GetExecutingAssembly ().GetManifestResourceStream (XmlResourceName))); " is 130.
Long Statement,System.Windows.Controls.DataVisualization.VisualStudio.Design,MetadataRegistration,C:\repos\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization.VisualStudio.Design\MetadataRegistration.cs,AddAttributes,The length of the statement  "	builder.AddCallback (typeof(SSWCDC.DateTimeAxisLabel)' b => b.AddCustomAttributes (new ToolboxBrowsableAttribute (false))); " is 123.
Long Statement,System.Windows.Controls.DataVisualization.VisualStudio.Design,MetadataRegistration,C:\repos\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization.VisualStudio.Design\MetadataRegistration.cs,AddAttributes,The length of the statement  "	builder.AddCallback (typeof(SSWCDC.NumericAxisLabel)' b => b.AddCustomAttributes (new ToolboxBrowsableAttribute (false))); " is 122.
Long Statement,System.Windows.Controls.DataVisualization.VisualStudio.Design,MetadataRegistration,C:\repos\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization.VisualStudio.Design\MetadataRegistration.cs,AddAttributes,The length of the statement  "	builder.AddCallback (typeof(SSWCDC.BubbleDataPoint)' b => b.AddCustomAttributes (new ToolboxBrowsableAttribute (false))); " is 121.
Long Statement,System.Windows.Controls.DataVisualization.VisualStudio.Design,MetadataRegistration,C:\repos\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization.VisualStudio.Design\MetadataRegistration.cs,AddAttributes,The length of the statement  "	builder.AddCallback (typeof(SSWCDC.ColumnDataPoint)' b => b.AddCustomAttributes (new ToolboxBrowsableAttribute (false))); " is 121.
Long Statement,System.Windows.Controls.DataVisualization.VisualStudio.Design,MetadataRegistration,C:\repos\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization.VisualStudio.Design\MetadataRegistration.cs,AddAttributes,The length of the statement  "	builder.AddCallback (typeof(SSWCDC.ScatterDataPoint)' b => b.AddCustomAttributes (new ToolboxBrowsableAttribute (false))); " is 122.
Complex Conditional,System.Windows.Controls.Design.Common,MetadataRegistrationBase,C:\repos\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization.VisualStudio.Design\..\DataVisualization.Design\MetadataBase.cs,AddDescriptions,The conditional expression  "t != null && t.IsPublic && t.IsClass && t.IsSubclassOf (typeof(SSW::FrameworkElement))"  is complex.
Magic Number,System.Windows.Controls.Design.Common,MetadataRegistrationBase,C:\repos\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization.VisualStudio.Design\..\DataVisualization.Design\MetadataBase.cs,AddDescriptions,The following statement contains a magic number: foreach (XElement member in xdoc.Descendants ("member")) {  	try {  		string name = (string)member.Attribute ("name");  		bool isType = name.StartsWith ("T:"' StringComparison.OrdinalIgnoreCase);  		if (isType || name.StartsWith ("P:"' StringComparison.OrdinalIgnoreCase)) {  			int lastDot = name.Length;  			string typeName;  			if (isType) {  				typeName = name.Substring (2);  				// skip leading "T:"  			}  			else {  				lastDot = name.LastIndexOf ('.');  				typeName = name.Substring (2' lastDot - 2);  			}  			typeName += AssemblyFullName;  			Type t = Type.GetType (typeName);  			if (t != null && t.IsPublic && t.IsClass && t.IsSubclassOf (typeof(SSW::FrameworkElement))) {  				string desc = ParseDescription (member);  				desc = desc.Trim ();  				desc = string.Join (" "' desc.Split (new char[] {  					' ''  					'\t''  					'\n''  					'\r'  				}' StringSplitOptions.RemoveEmptyEntries));  				if (isType) {  					builder.AddCallback (t' b => b.AddCustomAttributes (new DescriptionAttribute (desc)));  				}  				else {  					string propName = name.Substring (lastDot + 1);  					PropertyInfo pi = t.GetProperty (propName' BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly);  					if (pi != null) {  						builder.AddCallback (t' b => b.AddCustomAttributes (propName' new DescriptionAttribute (desc)));  					}  				}  			}  		}  	}  	catch (Exception e) {  		Debug.Assert (false' string.Format (CultureInfo.InvariantCulture' "Exception: {0}\n For member : {1}"' e' member));  	}  }  
Magic Number,System.Windows.Controls.Design.Common,MetadataRegistrationBase,C:\repos\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization.VisualStudio.Design\..\DataVisualization.Design\MetadataBase.cs,AddDescriptions,The following statement contains a magic number: foreach (XElement member in xdoc.Descendants ("member")) {  	try {  		string name = (string)member.Attribute ("name");  		bool isType = name.StartsWith ("T:"' StringComparison.OrdinalIgnoreCase);  		if (isType || name.StartsWith ("P:"' StringComparison.OrdinalIgnoreCase)) {  			int lastDot = name.Length;  			string typeName;  			if (isType) {  				typeName = name.Substring (2);  				// skip leading "T:"  			}  			else {  				lastDot = name.LastIndexOf ('.');  				typeName = name.Substring (2' lastDot - 2);  			}  			typeName += AssemblyFullName;  			Type t = Type.GetType (typeName);  			if (t != null && t.IsPublic && t.IsClass && t.IsSubclassOf (typeof(SSW::FrameworkElement))) {  				string desc = ParseDescription (member);  				desc = desc.Trim ();  				desc = string.Join (" "' desc.Split (new char[] {  					' ''  					'\t''  					'\n''  					'\r'  				}' StringSplitOptions.RemoveEmptyEntries));  				if (isType) {  					builder.AddCallback (t' b => b.AddCustomAttributes (new DescriptionAttribute (desc)));  				}  				else {  					string propName = name.Substring (lastDot + 1);  					PropertyInfo pi = t.GetProperty (propName' BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly);  					if (pi != null) {  						builder.AddCallback (t' b => b.AddCustomAttributes (propName' new DescriptionAttribute (desc)));  					}  				}  			}  		}  	}  	catch (Exception e) {  		Debug.Assert (false' string.Format (CultureInfo.InvariantCulture' "Exception: {0}\n For member : {1}"' e' member));  	}  }  
Magic Number,System.Windows.Controls.Design.Common,MetadataRegistrationBase,C:\repos\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization.VisualStudio.Design\..\DataVisualization.Design\MetadataBase.cs,AddDescriptions,The following statement contains a magic number: foreach (XElement member in xdoc.Descendants ("member")) {  	try {  		string name = (string)member.Attribute ("name");  		bool isType = name.StartsWith ("T:"' StringComparison.OrdinalIgnoreCase);  		if (isType || name.StartsWith ("P:"' StringComparison.OrdinalIgnoreCase)) {  			int lastDot = name.Length;  			string typeName;  			if (isType) {  				typeName = name.Substring (2);  				// skip leading "T:"  			}  			else {  				lastDot = name.LastIndexOf ('.');  				typeName = name.Substring (2' lastDot - 2);  			}  			typeName += AssemblyFullName;  			Type t = Type.GetType (typeName);  			if (t != null && t.IsPublic && t.IsClass && t.IsSubclassOf (typeof(SSW::FrameworkElement))) {  				string desc = ParseDescription (member);  				desc = desc.Trim ();  				desc = string.Join (" "' desc.Split (new char[] {  					' ''  					'\t''  					'\n''  					'\r'  				}' StringSplitOptions.RemoveEmptyEntries));  				if (isType) {  					builder.AddCallback (t' b => b.AddCustomAttributes (new DescriptionAttribute (desc)));  				}  				else {  					string propName = name.Substring (lastDot + 1);  					PropertyInfo pi = t.GetProperty (propName' BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly);  					if (pi != null) {  						builder.AddCallback (t' b => b.AddCustomAttributes (propName' new DescriptionAttribute (desc)));  					}  				}  			}  		}  	}  	catch (Exception e) {  		Debug.Assert (false' string.Format (CultureInfo.InvariantCulture' "Exception: {0}\n For member : {1}"' e' member));  	}  }  
Magic Number,System.Windows.Controls.Design.Common,MetadataRegistrationBase,C:\repos\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization.VisualStudio.Design\..\DataVisualization.Design\MetadataBase.cs,AddDescriptions,The following statement contains a magic number: try {  	string name = (string)member.Attribute ("name");  	bool isType = name.StartsWith ("T:"' StringComparison.OrdinalIgnoreCase);  	if (isType || name.StartsWith ("P:"' StringComparison.OrdinalIgnoreCase)) {  		int lastDot = name.Length;  		string typeName;  		if (isType) {  			typeName = name.Substring (2);  			// skip leading "T:"  		}  		else {  			lastDot = name.LastIndexOf ('.');  			typeName = name.Substring (2' lastDot - 2);  		}  		typeName += AssemblyFullName;  		Type t = Type.GetType (typeName);  		if (t != null && t.IsPublic && t.IsClass && t.IsSubclassOf (typeof(SSW::FrameworkElement))) {  			string desc = ParseDescription (member);  			desc = desc.Trim ();  			desc = string.Join (" "' desc.Split (new char[] {  				' ''  				'\t''  				'\n''  				'\r'  			}' StringSplitOptions.RemoveEmptyEntries));  			if (isType) {  				builder.AddCallback (t' b => b.AddCustomAttributes (new DescriptionAttribute (desc)));  			}  			else {  				string propName = name.Substring (lastDot + 1);  				PropertyInfo pi = t.GetProperty (propName' BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly);  				if (pi != null) {  					builder.AddCallback (t' b => b.AddCustomAttributes (propName' new DescriptionAttribute (desc)));  				}  			}  		}  	}  }  catch (Exception e) {  	Debug.Assert (false' string.Format (CultureInfo.InvariantCulture' "Exception: {0}\n For member : {1}"' e' member));  }  
Magic Number,System.Windows.Controls.Design.Common,MetadataRegistrationBase,C:\repos\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization.VisualStudio.Design\..\DataVisualization.Design\MetadataBase.cs,AddDescriptions,The following statement contains a magic number: try {  	string name = (string)member.Attribute ("name");  	bool isType = name.StartsWith ("T:"' StringComparison.OrdinalIgnoreCase);  	if (isType || name.StartsWith ("P:"' StringComparison.OrdinalIgnoreCase)) {  		int lastDot = name.Length;  		string typeName;  		if (isType) {  			typeName = name.Substring (2);  			// skip leading "T:"  		}  		else {  			lastDot = name.LastIndexOf ('.');  			typeName = name.Substring (2' lastDot - 2);  		}  		typeName += AssemblyFullName;  		Type t = Type.GetType (typeName);  		if (t != null && t.IsPublic && t.IsClass && t.IsSubclassOf (typeof(SSW::FrameworkElement))) {  			string desc = ParseDescription (member);  			desc = desc.Trim ();  			desc = string.Join (" "' desc.Split (new char[] {  				' ''  				'\t''  				'\n''  				'\r'  			}' StringSplitOptions.RemoveEmptyEntries));  			if (isType) {  				builder.AddCallback (t' b => b.AddCustomAttributes (new DescriptionAttribute (desc)));  			}  			else {  				string propName = name.Substring (lastDot + 1);  				PropertyInfo pi = t.GetProperty (propName' BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly);  				if (pi != null) {  					builder.AddCallback (t' b => b.AddCustomAttributes (propName' new DescriptionAttribute (desc)));  				}  			}  		}  	}  }  catch (Exception e) {  	Debug.Assert (false' string.Format (CultureInfo.InvariantCulture' "Exception: {0}\n For member : {1}"' e' member));  }  
Magic Number,System.Windows.Controls.Design.Common,MetadataRegistrationBase,C:\repos\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization.VisualStudio.Design\..\DataVisualization.Design\MetadataBase.cs,AddDescriptions,The following statement contains a magic number: try {  	string name = (string)member.Attribute ("name");  	bool isType = name.StartsWith ("T:"' StringComparison.OrdinalIgnoreCase);  	if (isType || name.StartsWith ("P:"' StringComparison.OrdinalIgnoreCase)) {  		int lastDot = name.Length;  		string typeName;  		if (isType) {  			typeName = name.Substring (2);  			// skip leading "T:"  		}  		else {  			lastDot = name.LastIndexOf ('.');  			typeName = name.Substring (2' lastDot - 2);  		}  		typeName += AssemblyFullName;  		Type t = Type.GetType (typeName);  		if (t != null && t.IsPublic && t.IsClass && t.IsSubclassOf (typeof(SSW::FrameworkElement))) {  			string desc = ParseDescription (member);  			desc = desc.Trim ();  			desc = string.Join (" "' desc.Split (new char[] {  				' ''  				'\t''  				'\n''  				'\r'  			}' StringSplitOptions.RemoveEmptyEntries));  			if (isType) {  				builder.AddCallback (t' b => b.AddCustomAttributes (new DescriptionAttribute (desc)));  			}  			else {  				string propName = name.Substring (lastDot + 1);  				PropertyInfo pi = t.GetProperty (propName' BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly);  				if (pi != null) {  					builder.AddCallback (t' b => b.AddCustomAttributes (propName' new DescriptionAttribute (desc)));  				}  			}  		}  	}  }  catch (Exception e) {  	Debug.Assert (false' string.Format (CultureInfo.InvariantCulture' "Exception: {0}\n For member : {1}"' e' member));  }  
Magic Number,System.Windows.Controls.Design.Common,MetadataRegistrationBase,C:\repos\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization.VisualStudio.Design\..\DataVisualization.Design\MetadataBase.cs,AddDescriptions,The following statement contains a magic number: if (isType || name.StartsWith ("P:"' StringComparison.OrdinalIgnoreCase)) {  	int lastDot = name.Length;  	string typeName;  	if (isType) {  		typeName = name.Substring (2);  		// skip leading "T:"  	}  	else {  		lastDot = name.LastIndexOf ('.');  		typeName = name.Substring (2' lastDot - 2);  	}  	typeName += AssemblyFullName;  	Type t = Type.GetType (typeName);  	if (t != null && t.IsPublic && t.IsClass && t.IsSubclassOf (typeof(SSW::FrameworkElement))) {  		string desc = ParseDescription (member);  		desc = desc.Trim ();  		desc = string.Join (" "' desc.Split (new char[] {  			' ''  			'\t''  			'\n''  			'\r'  		}' StringSplitOptions.RemoveEmptyEntries));  		if (isType) {  			builder.AddCallback (t' b => b.AddCustomAttributes (new DescriptionAttribute (desc)));  		}  		else {  			string propName = name.Substring (lastDot + 1);  			PropertyInfo pi = t.GetProperty (propName' BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly);  			if (pi != null) {  				builder.AddCallback (t' b => b.AddCustomAttributes (propName' new DescriptionAttribute (desc)));  			}  		}  	}  }  
Magic Number,System.Windows.Controls.Design.Common,MetadataRegistrationBase,C:\repos\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization.VisualStudio.Design\..\DataVisualization.Design\MetadataBase.cs,AddDescriptions,The following statement contains a magic number: if (isType || name.StartsWith ("P:"' StringComparison.OrdinalIgnoreCase)) {  	int lastDot = name.Length;  	string typeName;  	if (isType) {  		typeName = name.Substring (2);  		// skip leading "T:"  	}  	else {  		lastDot = name.LastIndexOf ('.');  		typeName = name.Substring (2' lastDot - 2);  	}  	typeName += AssemblyFullName;  	Type t = Type.GetType (typeName);  	if (t != null && t.IsPublic && t.IsClass && t.IsSubclassOf (typeof(SSW::FrameworkElement))) {  		string desc = ParseDescription (member);  		desc = desc.Trim ();  		desc = string.Join (" "' desc.Split (new char[] {  			' ''  			'\t''  			'\n''  			'\r'  		}' StringSplitOptions.RemoveEmptyEntries));  		if (isType) {  			builder.AddCallback (t' b => b.AddCustomAttributes (new DescriptionAttribute (desc)));  		}  		else {  			string propName = name.Substring (lastDot + 1);  			PropertyInfo pi = t.GetProperty (propName' BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly);  			if (pi != null) {  				builder.AddCallback (t' b => b.AddCustomAttributes (propName' new DescriptionAttribute (desc)));  			}  		}  	}  }  
Magic Number,System.Windows.Controls.Design.Common,MetadataRegistrationBase,C:\repos\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization.VisualStudio.Design\..\DataVisualization.Design\MetadataBase.cs,AddDescriptions,The following statement contains a magic number: if (isType || name.StartsWith ("P:"' StringComparison.OrdinalIgnoreCase)) {  	int lastDot = name.Length;  	string typeName;  	if (isType) {  		typeName = name.Substring (2);  		// skip leading "T:"  	}  	else {  		lastDot = name.LastIndexOf ('.');  		typeName = name.Substring (2' lastDot - 2);  	}  	typeName += AssemblyFullName;  	Type t = Type.GetType (typeName);  	if (t != null && t.IsPublic && t.IsClass && t.IsSubclassOf (typeof(SSW::FrameworkElement))) {  		string desc = ParseDescription (member);  		desc = desc.Trim ();  		desc = string.Join (" "' desc.Split (new char[] {  			' ''  			'\t''  			'\n''  			'\r'  		}' StringSplitOptions.RemoveEmptyEntries));  		if (isType) {  			builder.AddCallback (t' b => b.AddCustomAttributes (new DescriptionAttribute (desc)));  		}  		else {  			string propName = name.Substring (lastDot + 1);  			PropertyInfo pi = t.GetProperty (propName' BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly);  			if (pi != null) {  				builder.AddCallback (t' b => b.AddCustomAttributes (propName' new DescriptionAttribute (desc)));  			}  		}  	}  }  
Magic Number,System.Windows.Controls.Design.Common,MetadataRegistrationBase,C:\repos\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization.VisualStudio.Design\..\DataVisualization.Design\MetadataBase.cs,AddDescriptions,The following statement contains a magic number: if (isType) {  	typeName = name.Substring (2);  	// skip leading "T:"  }  else {  	lastDot = name.LastIndexOf ('.');  	typeName = name.Substring (2' lastDot - 2);  }  
Magic Number,System.Windows.Controls.Design.Common,MetadataRegistrationBase,C:\repos\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization.VisualStudio.Design\..\DataVisualization.Design\MetadataBase.cs,AddDescriptions,The following statement contains a magic number: if (isType) {  	typeName = name.Substring (2);  	// skip leading "T:"  }  else {  	lastDot = name.LastIndexOf ('.');  	typeName = name.Substring (2' lastDot - 2);  }  
Magic Number,System.Windows.Controls.Design.Common,MetadataRegistrationBase,C:\repos\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization.VisualStudio.Design\..\DataVisualization.Design\MetadataBase.cs,AddDescriptions,The following statement contains a magic number: if (isType) {  	typeName = name.Substring (2);  	// skip leading "T:"  }  else {  	lastDot = name.LastIndexOf ('.');  	typeName = name.Substring (2' lastDot - 2);  }  
Magic Number,System.Windows.Controls.Design.Common,MetadataRegistrationBase,C:\repos\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization.VisualStudio.Design\..\DataVisualization.Design\MetadataBase.cs,AddDescriptions,The following statement contains a magic number: typeName = name.Substring (2);  
Magic Number,System.Windows.Controls.Design.Common,MetadataRegistrationBase,C:\repos\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization.VisualStudio.Design\..\DataVisualization.Design\MetadataBase.cs,AddDescriptions,The following statement contains a magic number: typeName = name.Substring (2' lastDot - 2);  
Magic Number,System.Windows.Controls.Design.Common,MetadataRegistrationBase,C:\repos\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization.VisualStudio.Design\..\DataVisualization.Design\MetadataBase.cs,AddDescriptions,The following statement contains a magic number: typeName = name.Substring (2' lastDot - 2);  
