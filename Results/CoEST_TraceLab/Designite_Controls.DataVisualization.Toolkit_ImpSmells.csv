Implementation smell,Namespace,Class,File,Method,Description
Long Method,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The method has 134 lines of code.
Long Method,System.Windows.Controls.DataVisualization.Charting.Primitives,EdgePanel,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Primitives\EdgePanel.cs,MeasureOverride,The method has 144 lines of code.
Complex Method,System.Windows.Controls.DataVisualization,AggregatedObservableCollection,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\AggregatedObservableCollection.cs,ChildCollectionsCollectionChanged,Cyclomatic complexity of the method is 11
Complex Method,System.Windows.Controls.DataVisualization,LayoutTransformControl,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\LayoutTransformControl.cs,GetTransformMatrix,Cyclomatic complexity of the method is 8
Complex Method,System.Windows.Controls.DataVisualization,LayoutTransformControl,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\LayoutTransformControl.cs,ComputeLargestTransformedSize,Cyclomatic complexity of the method is 16
Complex Method,System.Windows.Controls.DataVisualization,ObservableCollectionListAdapter,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\ObservableCollectionListAdapter.cs,OnCollectionChanged,Cyclomatic complexity of the method is 13
Complex Method,System.Windows.Controls.DataVisualization,OrientedPanel,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\OrientedPanel.cs,MeasureOverride,Cyclomatic complexity of the method is 8
Complex Method,System.Windows.Controls.DataVisualization,OrientedPanel,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\OrientedPanel.cs,ArrangeOverride,Cyclomatic complexity of the method is 8
Complex Method,System.Windows.Controls.DataVisualization,TreeMap,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Treemap\TreeMap.cs,BuildTreeMapTree,Cyclomatic complexity of the method is 13
Complex Method,System.Windows.Controls.DataVisualization,TreeMap,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Treemap\TreeMap.cs,CreateChildren,Cyclomatic complexity of the method is 9
Complex Method,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,IncrementDateTime,Cyclomatic complexity of the method is 11
Complex Method,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,AlignIntervalStart,Cyclomatic complexity of the method is 42
Complex Method,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,Cyclomatic complexity of the method is 31
Complex Method,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,OverrideDataRange,Cyclomatic complexity of the method is 8
Complex Method,System.Windows.Controls.DataVisualization.Charting,DateTimeAxisLabel,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxisLabel.cs,UpdateFormattedContent,Cyclomatic complexity of the method is 28
Complex Method,System.Windows.Controls.DataVisualization.Charting,DisplayAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DisplayAxis.cs,ArrangeAxisGrid,Cyclomatic complexity of the method is 10
Complex Method,System.Windows.Controls.DataVisualization.Charting,LinearAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\LinearAxis.cs,OverrideDataRange,Cyclomatic complexity of the method is 13
Complex Method,System.Windows.Controls.DataVisualization.Charting,RangeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\RangeAxis.cs,RenderOriented,Cyclomatic complexity of the method is 8
Complex Method,System.Windows.Controls.DataVisualization.Charting,Chart,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Chart\Chart.cs,SetEdge,Cyclomatic complexity of the method is 12
Complex Method,System.Windows.Controls.DataVisualization.Charting,Chart,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Chart\Chart.cs,SeriesCollectionChanged,Cyclomatic complexity of the method is 9
Complex Method,System.Windows.Controls.DataVisualization.Charting,DataPoint,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\DataPoint\DataPoint.cs,OnStatePropertyChanged,Cyclomatic complexity of the method is 15
Complex Method,System.Windows.Controls.DataVisualization.Charting,DataPoint,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\DataPoint\DataPoint.cs,GoToCurrentRevealState,Cyclomatic complexity of the method is 10
Complex Method,System.Windows.Controls.DataVisualization.Charting,DataPoint,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\DataPoint\DataPoint.cs,OnCurrentStateChanged,Cyclomatic complexity of the method is 8
Complex Method,System.Windows.Controls.DataVisualization.Charting,DataPointSeriesWithAxes,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Series\DataPointSeriesWithAxes.cs,GetAxes,Cyclomatic complexity of the method is 15
Complex Method,System.Windows.Controls.DataVisualization.Charting,DataPointSeries,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Series\DataPointSeries.cs,OnSelectedItemPropertyChanged,Cyclomatic complexity of the method is 8
Complex Method,System.Windows.Controls.DataVisualization.Charting,DataPointSeries,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Series\DataPointSeries.cs,LoadDataPoints,Cyclomatic complexity of the method is 9
Complex Method,System.Windows.Controls.DataVisualization.Charting.Primitives,EdgePanel,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Primitives\EdgePanel.cs,MeasureOverride,Cyclomatic complexity of the method is 26
Complex Method,System.Windows.Controls.DataVisualization.Charting.Primitives,EdgePanel,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Primitives\EdgePanel.cs,ArrangeOverride,Cyclomatic complexity of the method is 11
Complex Method,System.Windows.Controls.DataVisualization.Collections,LeftLeaningRedBlackTree,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Collections\LeftLeaningRedBlackTree.cs,Add,Cyclomatic complexity of the method is 8
Complex Method,System.Windows.Controls.DataVisualization.Collections,LeftLeaningRedBlackTree,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Collections\LeftLeaningRedBlackTree.cs,Remove,Cyclomatic complexity of the method is 11
Long Parameter List,System.Windows.Controls.DataVisualization,DependencyPropertyAnimationHelper,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\DependencyPropertyAnimationHelper.cs,BeginAnimation,The method has 6 parameters.
Long Parameter List,System.Windows.Controls.DataVisualization,DependencyPropertyAnimationHelper,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\DependencyPropertyAnimationHelper.cs,CreateStoryboard,The method has 6 parameters.
Long Parameter List,System.Windows.Controls.DataVisualization.Charting,DataPointSeriesWithAxes,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Series\DataPointSeriesWithAxes.cs,GetAxes,The method has 5 parameters.
Long Identifier,System.Windows.Controls.DataVisualization,TreeMap,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Treemap\TreeMap.cs,OnItemsSourcePropertyChanged,The length of the parameter oldValueINotifyCollectionChanged is 32.
Long Identifier,System.Windows.Controls.DataVisualization,TreeMap,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Treemap\TreeMap.cs,OnItemsSourcePropertyChanged,The length of the parameter newValueINotifyCollectionChanged is 32.
Long Identifier,System.Windows.Controls.DataVisualization,TreeMap,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Treemap\TreeMap.cs,BuildTreeMapTree,The length of the parameter objectChildrenINotifyCollectionChanged is 38.
Long Identifier,System.Windows.Controls.DataVisualization.Charting,DataPointSeriesWithAxes,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Series\DataPointSeriesWithAxes.cs,GetAxes,The length of the parameter actualIndependentAxisPredicate is 30.
Long Identifier,System.Windows.Controls.DataVisualization.Charting,DataPointSeries,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Series\DataPointSeries.cs,OnItemsSourceChanged,The length of the parameter oldValueINotifyCollectionChanged is 32.
Long Identifier,System.Windows.Controls.DataVisualization.Charting,DataPointSeries,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Series\DataPointSeries.cs,OnItemsSourceChanged,The length of the parameter newValueINotifyCollectionChanged is 32.
Long Statement,System.Windows.Controls.DataVisualization,AggregatedObservableCollection,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\AggregatedObservableCollection.cs,GetStartingIndexOfCollectionAtIndex,The length of the statement  "	return ChildCollections.OfType<IEnumerable> ().Select (collection => collection.Cast<T> ()).Take (index).SelectMany (collection => collection).Count (); " is 152.
Long Statement,System.Windows.Controls.DataVisualization,AggregatedObservableCollection,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\AggregatedObservableCollection.cs,Rebuild,The length of the statement  "		IList<T> items = ChildCollections.OfType<IEnumerable> ().Select (collection => collection.Cast<T> ()).SelectMany (collection => collection).ToList (); " is 150.
Long Statement,System.Windows.Controls.DataVisualization,ObjectPool,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\ObjectPool.cs,Done,The length of the statement  "	if (currentIndex != 0 && _objects.Count > 0 && currentIndex >= minimumObjectsInThePool && currentIndex < _objects.Count / 2) { " is 126.
Long Statement,System.Windows.Controls.DataVisualization,DependencyPropertyAnimationHelper,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\DependencyPropertyAnimationHelper.cs,BeginAnimation,The length of the statement  "	storyBoard = CreateStoryboard (target' animatingDependencyProperty' propertyPath' ref targetValue' timeSpan' easingFunction); " is 125.
Long Statement,System.Windows.Controls.DataVisualization,DependencyPropertyAnimationHelper,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\DependencyPropertyAnimationHelper.cs,CreateStoryboard,The length of the statement  "			IEnumerable<DateTime> dateTimeIntervals = ValueHelper.GetDateTimesBetweenInclusive (fromDateTime' toDateTime' intervals); " is 121.
Long Statement,System.Windows.Controls.DataVisualization,DependencyPropertyAnimationHelper,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\DependencyPropertyAnimationHelper.cs,CreateStoryboard,The length of the statement  "			IEnumerable<DiscreteObjectKeyFrame> keyFrames = EnumerableFunctions.Zip (dateTimeIntervals' timeSpanIntervals' (dateTime' timeSpan) => new DiscreteObjectKeyFrame () { " is 166.
Long Statement,System.Windows.Controls.DataVisualization,LayoutTransformControl,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\LayoutTransformControl.cs,MeasureOverride,The length of the statement  "	Rect transformedDesiredRect = RectTransform (new Rect (0' 0' _layoutRoot.DesiredSize.Width' _layoutRoot.DesiredSize.Height)' _transformation); " is 142.
Long Statement,System.Windows.Controls.DataVisualization,LayoutTransformControl,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\LayoutTransformControl.cs,ArrangeOverride,The length of the statement  "	Rect transformedRect = RectTransform (new Rect (0' 0' finalSizeTransformed.Width' finalSizeTransformed.Height)' _transformation); " is 129.
Long Statement,System.Windows.Controls.DataVisualization,LayoutTransformControl,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\LayoutTransformControl.cs,ArrangeOverride,The length of the statement  "	Rect finalRect = new Rect (-transformedRect.Left + ((finalSize.Width - transformedRect.Width) / 2)' -transformedRect.Top + ((finalSize.Height - transformedRect.Height) / 2)' finalSizeTransformed.Width' finalSizeTransformed.Height); " is 231.
Long Statement,System.Windows.Controls.DataVisualization,LayoutTransformControl,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\LayoutTransformControl.cs,RoundMatrix,The length of the statement  "	return new Matrix (Math.Round (matrix.M11' decimalsAfterRound)' Math.Round (matrix.M12' decimalsAfterRound)' Math.Round (matrix.M21' decimalsAfterRound)' Math.Round (matrix.M22' decimalsAfterRound)' matrix.OffsetX' matrix.OffsetY); " is 231.
Long Statement,System.Windows.Controls.DataVisualization,LayoutTransformControl,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\LayoutTransformControl.cs,MatrixMultiply,The length of the statement  "	return new Matrix ((matrix1.M11 * matrix2.M11) + (matrix1.M12 * matrix2.M21)' (matrix1.M11 * matrix2.M12) + (matrix1.M12 * matrix2.M22)' (matrix1.M21 * matrix2.M11) + (matrix1.M22 * matrix2.M21)' (matrix1.M21 * matrix2.M12) + (matrix1.M22 * matrix2.M22)' ((matrix1.OffsetX * matrix2.M11) + (matrix1.OffsetY * matrix2.M21)) + matrix2.OffsetX' ((matrix1.OffsetX * matrix2.M12) + (matrix1.OffsetY * matrix2.M22)) + matrix2.OffsetY); " is 429.
Long Statement,System.Windows.Controls.DataVisualization,OrientedPanel,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\OrientedPanel.cs,UpdateActualLength,The length of the statement  "	this.SetBinding (ActualLengthProperty' new Binding ((Orientation == Orientation.Horizontal) ? "ActualWidth" : "ActualHeight") { " is 127.
Long Statement,System.Windows.Controls.DataVisualization,OrientedPanel,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\OrientedPanel.cs,MeasureOverride,The length of the statement  "		IEnumerable<int> priorities = Children.Cast<UIElement> ().Select (child => GetPriority (child)).Distinct ().OrderBy (priority => priority).ToList (); " is 149.
Long Statement,System.Windows.Controls.DataVisualization,OrientedPanel,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\OrientedPanel.cs,MeasureOverride,The length of the statement  "		IEnumerable<Tuple<int' int>> priorityPairs = EnumerableFunctions.Zip (priorities' priorities.Skip (1)' (previous' next) => new Tuple<int' int> (previous' next)); " is 161.
Long Statement,System.Windows.Controls.DataVisualization,OrientedPanel,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\OrientedPanel.cs,MeasureOverride,The length of the statement  "			IEnumerable<UIElement> currentPriorityChildren = Children.Cast<UIElement> ().Where (child => GetPriority (child) == priorityPair.Item1).ToList (); " is 146.
Long Statement,System.Windows.Controls.DataVisualization,OrientedPanel,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\OrientedPanel.cs,MeasureOverride,The length of the statement  "			IEnumerable<UIElement> nextPriorityChildren = Children.Cast<UIElement> ().Where (child => GetPriority (child) == priorityPair.Item2).ToList (); " is 143.
Long Statement,System.Windows.Controls.DataVisualization,OrientedPanel,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\OrientedPanel.cs,MeasureOverride,The length of the statement  "				double maxCurrentPriorityChildOffset = currentPriorityChildren.Select (child => offsetSelector (child)).MaxOrNullable () ?? 0.0; " is 128.
Long Statement,System.Windows.Controls.DataVisualization,OrientedPanel,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\OrientedPanel.cs,MeasureOverride,The length of the statement  "		offset = (Children.Cast<UIElement> ().GroupBy (child => GetPriority (child)).Select (group => group.Select (child => PriorityOffsets [group.Key] + offsetSelector (child)).MaxOrNullable ())).Where (num => num.HasValue).Select (num => num.Value).MaxOrNullable () ?? 0.0; " is 268.
Long Statement,System.Windows.Controls.DataVisualization,OrientedPanel,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\OrientedPanel.cs,GetCorrectedDesiredSize,The length of the statement  "		return new Size (Math.Max (elementAsLine.StrokeThickness' elementAsLine.X2 - elementAsLine.X1)' Math.Max (elementAsLine.StrokeThickness' elementAsLine.Y2 - elementAsLine.Y1)); " is 175.
Long Statement,System.Windows.Controls.DataVisualization,UniqueObservableCollection,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\UniqueObservableCollection.cs,InsertItem,The length of the statement  "		throw new InvalidOperationException (Properties.Resources.UniqueObservableCollection_InvalidAttemptToInsertADuplicateItem); " is 123.
Long Statement,System.Windows.Controls.DataVisualization,UniqueObservableCollection,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\UniqueObservableCollection.cs,SetItem,The length of the statement  "		throw new InvalidOperationException (Properties.Resources.UniqueObservableCollection_InvalidAttemptToInsertADuplicateItem); " is 123.
Long Statement,System.Windows.Controls.DataVisualization,UnitValue,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\UnitValue.cs,Equals,The length of the statement  "	if ((Object.ReferenceEquals (unitValue.Value' this.Value) || Object.Equals (unitValue.Value' this.Value)) && unitValue.Unit == this.Unit) { " is 139.
Long Statement,System.Windows.Controls.DataVisualization,ValueHelper,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\ValueHelper.cs,CanGraph,The length of the statement  "	return !double.IsNaN (value) && !double.IsNegativeInfinity (value) && !double.IsPositiveInfinity (value) && !double.IsInfinity (value); " is 135.
Long Statement,System.Windows.Controls.DataVisualization,ValueHelper,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\ValueHelper.cs,TryConvert,The length of the statement  "		if (value != null && (value is double || value is int || value is byte || value is short || value is decimal || value is float || value is long || value is uint || value is sbyte || value is ushort || value is ulong)) { " is 219.
Long Statement,System.Windows.Controls.DataVisualization,Range,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Range.cs,IntersectsWith,The length of the statement  "	Func<Range<T>' Range<T>' bool> rightCollidesWithLeft = (leftRange' rightRange) => (ValueHelper.Compare (rightRange.Minimum' leftRange.Maximum) <= 0 && ValueHelper.Compare (rightRange.Minimum' leftRange.Minimum) >= 0) || (ValueHelper.Compare (leftRange.Minimum' rightRange.Maximum) <= 0 && ValueHelper.Compare (leftRange.Minimum' rightRange.Minimum) >= 0); " is 355.
Long Statement,System.Windows.Controls.DataVisualization,Range,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Range.cs,ToString,The length of the statement  "		return string.Format (CultureInfo.CurrentCulture' Properties.Resources.Range_ToString_Data' this.Minimum' this.Maximum); " is 120.
Long Statement,System.Windows.Controls.DataVisualization,TreeMap,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Treemap\TreeMap.cs,OnItemsSourcePropertyChanged,The length of the statement  "		_weakEventListener.OnEventAction = (instance' source' eventArgs) => instance.ItemsSourceCollectionChanged (source' eventArgs); " is 126.
Long Statement,System.Windows.Controls.DataVisualization,TreeMap,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Treemap\TreeMap.cs,OnItemsSourcePropertyChanged,The length of the statement  "		_weakEventListener.OnDetachAction = weakEventListener => newValueINotifyCollectionChanged.CollectionChanged -= weakEventListener.OnEvent; " is 137.
Long Statement,System.Windows.Controls.DataVisualization,TreeMap,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Treemap\TreeMap.cs,ArrangeOverride,The length of the statement  "		IEnumerable<Tuple<Rect' TreeMapNode>> measuredRectangles = ComputeRectangles (root' new Rect (0' 0' ContainerElement.ActualWidth' ContainerElement.ActualHeight)); " is 162.
Long Statement,System.Windows.Controls.DataVisualization,TreeMap,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Treemap\TreeMap.cs,ComputeRectangles,The length of the statement  "		foreach (Tuple<Rect' TreeMapNode> rectangle in algorithm.Split (currentParent.Item1' currentParent.Item2' currentParent.Item2.ChildItemPadding)) { " is 146.
Long Statement,System.Windows.Controls.DataVisualization,TreeMap,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Treemap\TreeMap.cs,BuildTreeMapTree,The length of the statement  "			IEnumerable objectChildren = (template.ItemsSource != null) ? _helper.RetrieveProperty (root' template.ItemsSource) as IEnumerable : null; " is 138.
Long Statement,System.Windows.Controls.DataVisualization,TreeMap,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Treemap\TreeMap.cs,BuildTreeMapTree,The length of the statement  "			IEnumerable<TreeMapNode> children = (objectChildren != null) ? BuildTreeMapTree (objectChildren' level + 1) : children = Enumerable.Empty<TreeMapNode> (); " is 154.
Long Statement,System.Windows.Controls.DataVisualization,TreeMap,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Treemap\TreeMap.cs,BuildTreeMapTree,The length of the statement  "				weakEventListener.OnEventAction = (instance' source' eventArgs) => instance.ItemsSourceCollectionChanged (source' eventArgs); " is 125.
Long Statement,System.Windows.Controls.DataVisualization,SolidColorBrushInterpolator,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Treemap\Interpolators\SolidColorBrushInterpolator.cs,Interpolate,The length of the statement  "		color = Color.FromArgb ((byte)(From.A + (ratio * (To.A - From.A)))' (byte)(From.R + (ratio * (To.R - From.R)))' (byte)(From.G + (ratio * (To.G - From.G)))' (byte)(From.B + (ratio * (To.B - From.B)))); " is 200.
Long Statement,System.Windows.Controls.DataVisualization,SquaringAlgorithm,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Treemap\Layout\SquaringAlgorithm.cs,Split,The length of the statement  "		if (parentRectangle.Width - margin.Left - margin.Right <= 0 || parentRectangle.Height - margin.Top - margin.Bottom <= 0) { " is 122.
Long Statement,System.Windows.Controls.DataVisualization,SquaringAlgorithm,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Treemap\Layout\SquaringAlgorithm.cs,Split,The length of the statement  "			_currentRectangle = new Rect (parentRectangle.X + margin.Left' parentRectangle.Y + margin.Top' parentRectangle.Width - margin.Left - margin.Right' parentRectangle.Height - margin.Top - margin.Bottom); " is 200.
Long Statement,System.Windows.Controls.DataVisualization,SquaringAlgorithm,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Treemap\Layout\SquaringAlgorithm.cs,BuildTreeMapStep,The length of the statement  "		_currentRectangle = new Rect (_currentRectangle.Left + wh' _currentRectangle.Top' Math.Max (0' _currentRectangle.Width - wh)' _currentRectangle.Height); " is 152.
Long Statement,System.Windows.Controls.DataVisualization,SquaringAlgorithm,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Treemap\Layout\SquaringAlgorithm.cs,BuildTreeMapStep,The length of the statement  "		_currentRectangle = new Rect (_currentRectangle.Left' _currentRectangle.Top + wh' _currentRectangle.Width' Math.Max (0' _currentRectangle.Height - wh)); " is 152.
Long Statement,System.Windows.Controls.DataVisualization.Charting,CategoryAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\CategoryAxis.cs,GetPlotAreaCoordinateRange,The length of the statement  "			return new Range<UnitValue> (new UnitValue (maximumLength - upper' Unit.Pixels)' new UnitValue (maximumLength - lower' Unit.Pixels)); " is 133.
Long Statement,System.Windows.Controls.DataVisualization.Charting,CategoryAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\CategoryAxis.cs,GetPlotAreaCoordinateRange,The length of the statement  "		return new Range<UnitValue> (new UnitValue (angle - halfAngleOffset' Unit.Degrees)' new UnitValue (angle + halfAngleOffset' Unit.Degrees)); " is 139.
Long Statement,System.Windows.Controls.DataVisualization.Charting,CategoryAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\CategoryAxis.cs,UpdateCategories,The length of the statement  "	IEnumerable<object> categories = this.RegisteredListeners.OfType<IDataProvider> ().SelectMany (infoProvider => infoProvider.GetData (this)).Distinct (); " is 152.
Long Statement,System.Windows.Controls.DataVisualization.Charting,ValueMargin,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\ValueMargin.cs,Equals,The length of the statement  "		return this.Value.Equals (valueMargin.Value) && this.LowMargin.Equals (valueMargin.LowMargin) && this.HighMargin.Equals (valueMargin.HighMargin); " is 145.
Long Statement,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,GetPlotAreaCoordinate,The length of the statement  "		return new UnitValue ((dateTimeValue.ToOADate () - actualDateTimeRange.Minimum.ToOADate ()) * (pixelLength / rangelength)' Unit.Pixels); " is 136.
Long Statement,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateActualInterval,The length of the statement  "	double interval = CalculateDateTimeInterval (actualDateTimeRange.Minimum' actualDateTimeRange.Maximum' out intervalType' availableSize); " is 136.
Long Statement,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,GetMajorAxisValues,The length of the statement  "	if (!ActualRange.HasData || ValueHelper.Compare (ActualRange.Minimum' ActualRange.Maximum) == 0 || GetLength (availableSize) == 0.0) { " is 134.
Long Statement,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,GetMajorAxisValues,The length of the statement  "	IEnumerable<DateTime> intermediateDates = EnumerableFunctions.Iterate (start' next => IncrementDateTime (next' this.ActualInterval)).TakeWhile (current => dateTimeRange.Contains (current)); " is 189.
Long Statement,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,AlignIntervalStart,The length of the statement  "		newStartDate = new DateTime (newStartDate.Year' newStartDate.Month' newStartDate.Day' newStartDate.Hour' newStartDate.Minute' second' 0); " is 137.
Long Statement,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,AlignIntervalStart,The length of the statement  "		newStartDate = new DateTime (newStartDate.Year' newStartDate.Month' newStartDate.Day' newStartDate.Hour' newStartDate.Minute' newStartDate.Second' milliseconds); " is 161.
Long Statement,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The length of the statement  "	double maxIntervals = Orientation == AxisOrientation.X ? MaximumAxisIntervalsPer200Pixels * 0.8 : MaximumAxisIntervalsPer200Pixels; " is 131.
Long Statement,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,OverrideDataRange,The length of the statement  "		foreach (ValueMargin valueMargin in this.RegisteredListeners.OfType<IValueMarginProvider> ().SelectMany (provider => provider.GetValueMargins (this))) { " is 152.
Long Statement,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,OverrideDataRange,The length of the statement  "			double maximumPixelMarginLength = valueMargins.Select (valueMargin => valueMargin.ValueMargin.LowMargin + valueMargin.ValueMargin.HighMargin).MaxOrNullable ().Value; " is 165.
Long Statement,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,OverrideDataRange,The length of the statement  "				DateTime newMinimum = new DateTime (currentRange.Minimum.Ticks - (long)((maxLeftOverlapValueMargin.LeftOverlap + 0.5) * unitOverPixels)); " is 137.
Long Statement,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,OverrideDataRange,The length of the statement  "				DateTime newMaximum = new DateTime (currentRange.Maximum.Ticks + (long)((maxRightOverlapValueMargin.RightOverlap + 0.5) * unitOverPixels)); " is 139.
Long Statement,System.Windows.Controls.DataVisualization.Charting,DisplayAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DisplayAxis.cs,GetLength,The length of the statement  "		throw new InvalidOperationException (Properties.Resources.DisplayAxis_GetLength_CannotDetermineTheLengthOfAnAxisWithAnOrientationOfNone); " is 137.
Long Statement,System.Windows.Controls.DataVisualization.Charting,LinearAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\LinearAxis.cs,CalculateActualInterval,The length of the statement  "	double maxIntervals = Orientation == AxisOrientation.X ? MaximumAxisIntervalsPer200Pixels * 0.8 : MaximumAxisIntervalsPer200Pixels; " is 131.
Long Statement,System.Windows.Controls.DataVisualization.Charting,LinearAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\LinearAxis.cs,GetMajorValues,The length of the statement  "	if (!ActualRange.HasData || ValueHelper.Compare (ActualRange.Minimum' ActualRange.Maximum) == 0 || GetLength (availableSize) == 0.0) { " is 134.
Long Statement,System.Windows.Controls.DataVisualization.Charting,LinearAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\LinearAxis.cs,AlignToInterval,The length of the statement  "	return ValueHelper.RemoveNoiseFromDoubleMath (ValueHelper.RemoveNoiseFromDoubleMath (Math.Floor (typedValue / typedInterval)) * typedInterval); " is 143.
Long Statement,System.Windows.Controls.DataVisualization.Charting,LinearAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\LinearAxis.cs,OverrideDataRange,The length of the statement  "		Range<IComparable> outputRange = new Range<IComparable> ((ValueHelper.ToDouble (range.Minimum)) - 1' (ValueHelper.ToDouble (range.Maximum)) + 1); " is 145.
Long Statement,System.Windows.Controls.DataVisualization.Charting,LinearAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\LinearAxis.cs,OverrideDataRange,The length of the statement  "			double maximumPixelMarginLength = valueMargins.Select (valueMargin => valueMargin.ValueMargin.LowMargin + valueMargin.ValueMargin.HighMargin).MaxOrNullable ().Value; " is 165.
Long Statement,System.Windows.Controls.DataVisualization.Charting,RangeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\RangeAxis.cs,UpdateActualRange,The length of the statement  "				dataRange = this.RegisteredListeners.OfType<IRangeProvider> ().Select (rangeProvider => rangeProvider.GetRange (this)).Sum (); " is 126.
Long Statement,System.Windows.Controls.DataVisualization.Charting,RangeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\RangeAxis.cs,GetMajorGridLineCoordinates,The length of the statement  "	return GetMajorTickMarkValues (availableSize).Select (value => GetPlotAreaCoordinate (value)).Where (value => ValueHelper.CanGraph (value.Value)); " is 146.
Long Statement,System.Windows.Controls.DataVisualization.Charting,SeriesHostAxesCollection,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Chart\SeriesHostAxesCollection.cs,RemoveItem,The length of the statement  "		throw new InvalidOperationException (Properties.Resources.SeriesHostAxesCollection_RemoveItem_AxisCannotBeRemovedFromASeriesHostWhenOneOrMoreSeriesAreListeningToIt); " is 165.
Long Statement,System.Windows.Controls.DataVisualization.Charting,SeriesHostAxesCollection,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Chart\SeriesHostAxesCollection.cs,RemoveItem,The length of the statement  "		throw new InvalidOperationException (Properties.Resources.SeriesHostAxesCollection_InvalidAttemptToRemovePermanentAxisFromSeriesHost); " is 134.
Long Statement,System.Windows.Controls.DataVisualization.Charting,AreaSeries,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Series\AreaSeries.cs,GetAxes,The length of the statement  "			throw new InvalidOperationException (Properties.Resources.DataPointSeriesWithAxes_NoSuitableAxisAvailableForPlottingDependentValue); " is 132.
Long Statement,System.Windows.Controls.DataVisualization.Charting,LineAreaBaseSeries,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Series\LineAreaBaseSeries.cs,UpdateShape,The length of the statement  "	Func<DataPoint' Point> createPoint = dataPoint => new Point (ActualIndependentAxis.GetPlotAreaCoordinate (dataPoint.ActualIndependentValue).Value' maximum - ActualDependentRangeAxis.GetPlotAreaCoordinate (dataPoint.ActualDependentValue).Value); " is 244.
Long Statement,System.Windows.Controls.DataVisualization.Charting,ResourceDictionaryEnumerator,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\ResourceDictionaryEnumerator.cs,GetIndexOfNextSuitableResourceDictionary,The length of the statement  "	if (ResourceDictionaryDispenser.ResourceDictionaries == null || ResourceDictionaryDispenser.ResourceDictionaries.Count == 0) { " is 126.
Long Statement,System.Windows.Controls.DataVisualization.Charting,ResourceDictionaryEnumerator,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\ResourceDictionaryEnumerator.cs,Reset,The length of the statement  "	throw new NotSupportedException (Properties.Resources.ResourceDictionaryEnumerator_CantResetEnumeratorResetDispenserInstead); " is 125.
Long Statement,System.Windows.Controls.DataVisualization.Charting,BubbleSeries,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Series\BubbleSeries.cs,GetAxes,The length of the statement  "			throw new InvalidOperationException (Properties.Resources.DataPointSeriesWithAxes_NoSuitableAxisAvailableForPlottingDependentValue); " is 132.
Long Statement,System.Windows.Controls.DataVisualization.Charting,BubbleSeries,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Series\BubbleSeries.cs,PrepareDataPoint,The length of the statement  "	bubbleDataPoint.SetBinding (BubbleDataPoint.SizeProperty' SizeValueBinding ?? DependentValueBinding ?? IndependentValueBinding); " is 128.
Long Statement,System.Windows.Controls.DataVisualization.Charting,BubbleSeries,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Series\BubbleSeries.cs,BubbleDataPointActualSizePropertyChanged,The length of the statement  "	Range<double> newRangeOfActualSizeValues = ActiveDataPoints.OfType<BubbleDataPoint> ().Select (d => Math.Abs (d.ActualSize)).GetRange (); " is 137.
Long Statement,System.Windows.Controls.DataVisualization.Charting,BubbleSeries,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Series\BubbleSeries.cs,BubbleDataPointSizePropertyChanged,The length of the statement  "	DependencyPropertyAnimationHelper.BeginAnimation (dataPoint' BubbleDataPoint.ActualSizeProperty' "ActualSize"' e.NewValue' TransitionDuration' this.TransitionEasingFunction); " is 174.
Long Statement,System.Windows.Controls.DataVisualization.Charting,BubbleSeries,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Series\BubbleSeries.cs,OnBeforeUpdateDataPoints,The length of the statement  "	_rangeOfActualSizeValues = ActiveDataPoints.OfType<BubbleDataPoint> ().Select (d => Math.Abs (d.ActualSize)).GetRange (); " is 121.
Long Statement,System.Windows.Controls.DataVisualization.Charting,BubbleSeries,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Series\BubbleSeries.cs,UpdateDataPoint,The length of the statement  "	double maximumDiameter = Math.Min (PlotAreaSize.Width' PlotAreaSize.Height) * MaximumBubbleSizeAsRatioOfSmallestDimension; " is 122.
Long Statement,System.Windows.Controls.DataVisualization.Charting,BubbleSeries,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Series\BubbleSeries.cs,UpdateDataPoint,The length of the statement  "	double ratioOfLargestBubble = (_rangeOfActualSizeValues.HasData && _rangeOfActualSizeValues.Maximum != 0.0 && bubbleDataPoint.ActualSize >= 0.0) ? Math.Abs (bubbleDataPoint.ActualSize) / _rangeOfActualSizeValues.Maximum : 0.0; " is 226.
Long Statement,System.Windows.Controls.DataVisualization.Charting,BubbleSeries,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Series\BubbleSeries.cs,UpdateDataPoint,The length of the statement  "	double left = (ActualIndependentAxis.GetPlotAreaCoordinate (bubbleDataPoint.ActualIndependentValue)).Value - (bubbleDataPoint.Width / 2.0); " is 139.
Long Statement,System.Windows.Controls.DataVisualization.Charting,BubbleSeries,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Series\BubbleSeries.cs,UpdateDataPoint,The length of the statement  "	double top = (PlotAreaSize.Height - (bubbleDataPoint.Height / 2.0)) - ActualDependentRangeAxis.GetPlotAreaCoordinate (bubbleDataPoint.ActualDependentValue).Value; " is 162.
Long Statement,System.Windows.Controls.DataVisualization.Charting,ColumnBarBaseSeries,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Series\ColumnBarBaseSeries.cs,OnBeforeUpdateDataPoints,The length of the statement  "	_categoriesWithMultipleDataPoints = ActiveDataPoints.Where (point => null != point.IndependentValue).OrderBy (point => point.DependentValue).GroupBy (point => point.IndependentValue).Where (grouping => 1 < grouping.Count ()).ToDictionary (grouping => grouping.Key); " is 265.
Long Statement,System.Windows.Controls.DataVisualization.Charting,ColumnBarBaseSeries,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Series\ColumnBarBaseSeries.cs,RedrawOtherSeries,The length of the statement  "	foreach (ColumnBarBaseSeries<T> series in seriesHost.Series.Where (series => thisType.IsAssignableFrom (series.GetType ())).OfType<ColumnBarBaseSeries<T>> ().Where (series => series != this)) { " is 193.
Long Statement,System.Windows.Controls.DataVisualization.Charting,ColumnBarBaseSeries,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Series\ColumnBarBaseSeries.cs,CalculateDataPointLength,The length of the statement  "		IEnumerable<UnitValue> values = ActiveDataPoints.Select (dataPoint => ActualIndependentAxis.GetPlotAreaCoordinate (dataPoint.ActualIndependentValue)).Where (value => ValueHelper.CanGraph (value.Value)).OrderBy (value => value.Value).ToList (); " is 243.
Long Statement,System.Windows.Controls.DataVisualization.Charting,ColumnBarBaseSeries,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Series\ColumnBarBaseSeries.cs,CalculateDataPointLength,The length of the statement  "		_dataPointlength = EnumerableFunctions.Zip (values' values.Skip (1)' (left' right) => new Range<double> (left.Value' right.Value)).Select (range => range.Maximum - range.Minimum).MinOrNullable (); " is 196.
Long Statement,System.Windows.Controls.DataVisualization.Charting,ColumnBarBaseSeries,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Series\ColumnBarBaseSeries.cs,GetCategoryRange,The length of the statement  "			return new Range<UnitValue> (new UnitValue (unitValue.Value - halfLength' unitValue.Unit)' new UnitValue (unitValue.Value + halfLength' unitValue.Unit)); " is 153.
Long Statement,System.Windows.Controls.DataVisualization.Charting,NullableConverter,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\NullableConverter.cs,ConvertFrom,The length of the statement  "	} else if (string.IsNullOrEmpty (stringValue) || String.Equals (stringValue' "Auto"' StringComparison.OrdinalIgnoreCase)) { " is 123.
Long Statement,System.Windows.Controls.DataVisualization.Charting,Chart,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Chart\Chart.cs,GetAutoAxisLocation,The length of the statement  "		int numberOfTopAxes = InternalActualAxes.OfType<Axis> ().Where (currentAxis => currentAxis.Location == AxisLocation.Top).Count (); " is 130.
Long Statement,System.Windows.Controls.DataVisualization.Charting,Chart,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Chart\Chart.cs,GetAutoAxisLocation,The length of the statement  "		int numberOfBottomAxes = InternalActualAxes.OfType<Axis> ().Where (currentAxis => currentAxis.Location == AxisLocation.Bottom).Count (); " is 136.
Long Statement,System.Windows.Controls.DataVisualization.Charting,Chart,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Chart\Chart.cs,GetAutoAxisLocation,The length of the statement  "		int numberOfLeftAxes = InternalActualAxes.OfType<Axis> ().Where (currentAxis => currentAxis.Location == AxisLocation.Left).Count (); " is 132.
Long Statement,System.Windows.Controls.DataVisualization.Charting,Chart,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Chart\Chart.cs,GetAutoAxisLocation,The length of the statement  "		int numberOfRightAxes = InternalActualAxes.OfType<Axis> ().Where (currentAxis => currentAxis.Location == AxisLocation.Right).Count (); " is 134.
Long Statement,System.Windows.Controls.DataVisualization.Charting,Chart,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Chart\Chart.cs,AxisLocationChanged,The length of the statement  "		throw new InvalidOperationException (Properties.Resources.Chart_AxisLocationChanged_CantBeChangedToAutoWhenHostedInsideOfASeriesHost); " is 134.
Long Statement,System.Windows.Controls.DataVisualization.Charting,Chart,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Chart\Chart.cs,SeriesCollectionChanged,The length of the statement  "				foreach (IRequireGlobalSeriesIndex tracksGlobalIndex in host.GetDescendentSeries ().OfType<IRequireGlobalSeriesIndex> ()) { " is 123.
Long Statement,System.Windows.Controls.DataVisualization.Charting,Chart,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Chart\Chart.cs,UpdateGlobalIndexes,The length of the statement  "	(this as ISeriesHost).GetDescendentSeries ().OfType<IRequireGlobalSeriesIndex> ().ForEachWithIndex ((seriesThatTracksGlobalIndex' index) => { " is 141.
Long Statement,System.Windows.Controls.DataVisualization.Charting,DataPoint,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\DataPoint\DataPoint.cs,OnApplyTemplate,The length of the statement  "	VisualStateGroup groupReveal = VisualStateManager.GetVisualStateGroups (ImplementationRoot).Cast<VisualStateGroup> ().Where (group => GroupRevealStates == group.Name).FirstOrDefault (); " is 185.
Long Statement,System.Windows.Controls.DataVisualization.Charting,DataPoint,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\DataPoint\DataPoint.cs,OnApplyTemplate,The length of the statement  "	groupReveal = VisualStateManager.GetVisualStateGroups (ImplementationRoot).Cast<VisualStateGroup> ().Where (group => GroupRevealStates == group.Name).FirstOrDefault (); " is 168.
Long Statement,System.Windows.Controls.DataVisualization.Charting,DataPoint,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\DataPoint\DataPoint.cs,OnApplyTemplate,The length of the statement  "		_haveStateRevealHidden = groupReveal.States.Cast<VisualState> ().Where (state => StateRevealHidden == state.Name).Any (); " is 121.
Long Statement,System.Windows.Controls.DataVisualization.Charting,BarSeries,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Series\BarSeries.cs,GetAxes,The length of the statement  "			throw new InvalidOperationException (Properties.Resources.DataPointSeriesWithAxes_NoSuitableAxisAvailableForPlottingDependentValue); " is 132.
Long Statement,System.Windows.Controls.DataVisualization.Charting,BarSeries,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Series\BarSeries.cs,UpdateDataPoint,The length of the statement  "	IEnumerable<BarSeries> barSeries = SeriesHost.Series.OfType<BarSeries> ().Where (series => series.ActualIndependentAxis == ActualIndependentAxis); " is 146.
Long Statement,System.Windows.Controls.DataVisualization.Charting,BarSeries,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Series\BarSeries.cs,UpdateDataPoint,The length of the statement  "	double dataPointX = ActualDependentRangeAxis.GetPlotAreaCoordinate (ValueHelper.ToDouble (dataPoint.ActualDependentValue)).Value; " is 129.
Long Statement,System.Windows.Controls.DataVisualization.Charting,DataPointSeriesWithAxes,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Series\DataPointSeriesWithAxes.cs,OnInternalDependentAxisPropertyChanged,The length of the statement  "	if (newValue != null && InternalActualDependentAxis != null && InternalActualDependentAxis != newValue && InternalActualDependentAxis.RegisteredListeners.Contains (this)) { " is 172.
Long Statement,System.Windows.Controls.DataVisualization.Charting,DataPointSeriesWithAxes,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Series\DataPointSeriesWithAxes.cs,OnInternalIndependentAxisPropertyChanged,The length of the statement  "	if (newValue != null && InternalActualIndependentAxis != null && InternalActualIndependentAxis != newValue && InternalActualIndependentAxis.RegisteredListeners.Contains (this)) { " is 178.
Long Statement,System.Windows.Controls.DataVisualization.Charting,DataPointSeriesWithAxes,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Series\DataPointSeriesWithAxes.cs,OnDataPointDependentValueChanged,The length of the statement  "		dataPoint.BeginAnimation (DataPoint.ActualDependentValueProperty' "ActualDependentValue"' newValue' this.TransitionDuration' this.TransitionEasingFunction); " is 156.
Long Statement,System.Windows.Controls.DataVisualization.Charting,DataPointSeriesWithAxes,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Series\DataPointSeriesWithAxes.cs,OnDataPointIndependentValueChanged,The length of the statement  "		dataPoint.BeginAnimation (DataPoint.ActualIndependentValueProperty' "ActualIndependentValue"' newValue' this.TransitionDuration' this.TransitionEasingFunction); " is 160.
Long Statement,System.Windows.Controls.DataVisualization.Charting,DataPointSeriesWithAxes,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Series\DataPointSeriesWithAxes.cs,GetAxes,The length of the statement  "	Func<IAxis' bool> actualIndependentAxisPredicate = axis => independentAxisPredicate (axis) && axis.CanPlot (firstDataPoint.IndependentValue); " is 141.
Long Statement,System.Windows.Controls.DataVisualization.Charting,DataPointSeriesWithAxes,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Series\DataPointSeriesWithAxes.cs,GetAxes,The length of the statement  "				throw new InvalidOperationException (Properties.Resources.DataPointSeriesWithAxes_GetAxes_AssignedIndependentAxisCannotBeUsed); " is 127.
Long Statement,System.Windows.Controls.DataVisualization.Charting,DataPointSeriesWithAxes,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Series\DataPointSeriesWithAxes.cs,GetAxes,The length of the statement  "	Func<IAxis' bool> actualDependentAxisPredicate = axis => dependentAxisPredicate (axis) && axis.CanPlot (firstDataPoint.DependentValue); " is 135.
Long Statement,System.Windows.Controls.DataVisualization.Charting,DataPointSeriesWithAxes,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Series\DataPointSeriesWithAxes.cs,GetAxes,The length of the statement  "				throw new InvalidOperationException (Properties.Resources.DataPointSeriesWithAxes_GetAxes_AssignedDependentAxisCannotBeUsed); " is 125.
Long Statement,System.Windows.Controls.DataVisualization.Charting,DataPointSeriesWithAxes,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Series\DataPointSeriesWithAxes.cs,GetAxes,The length of the statement  "			workingDependentAxis = InternalActualIndependentAxis.DependentAxes.Concat (this.SeriesHost.Axes).FirstOrDefault (actualDependentAxisPredicate); " is 143.
Long Statement,System.Windows.Controls.DataVisualization.Charting,DataPointSeriesWithAxes,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Series\DataPointSeriesWithAxes.cs,GetAxes,The length of the statement  "		if (!this.SeriesHost.Axes.Contains (workingDependentAxis) && !InternalActualIndependentAxis.DependentAxes.Contains (workingDependentAxis)) { " is 140.
Long Statement,System.Windows.Controls.DataVisualization.Charting,DataPointSeriesWithAxes,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Series\DataPointSeriesWithAxes.cs,GetRange,The length of the statement  "	return (axis != null) ? ActiveDataPoints.Select (dataPoint => (IComparable)GetActualDataPointAxisValue (dataPoint' axis)).GetRange () : new Range<IComparable> (); " is 162.
Long Statement,System.Windows.Controls.DataVisualization.Charting,DataPointSeriesWithAxes,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Series\DataPointSeriesWithAxes.cs,GetValueMargins,The length of the statement  "			Tuple<DataPoint' DataPoint> largestAndSmallestValues = this.DataPointsByActualDependentValue.GetLargestAndSmallestValues (); " is 124.
Long Statement,System.Windows.Controls.DataVisualization.Charting,DataPointSingleSeriesWithAxes,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Series\DataPointSingleSeriesWithAxes.cs,OnGlobalSeriesIndexPropertyChanged,The length of the statement  "		Title = newValue.HasValue ? string.Format (CultureInfo.CurrentCulture' Properties.Resources.Series_OnGlobalSeriesIndexPropertyChanged_UntitledSeriesFormatString' newValue.Value + 1) : null; " is 189.
Long Statement,System.Windows.Controls.DataVisualization.Charting,ColumnSeries,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Series\ColumnSeries.cs,GetAxes,The length of the statement  "			throw new InvalidOperationException (Properties.Resources.DataPointSeriesWithAxes_NoSuitableAxisAvailableForPlottingDependentValue); " is 132.
Long Statement,System.Windows.Controls.DataVisualization.Charting,ColumnSeries,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Series\ColumnSeries.cs,UpdateDataPoint,The length of the statement  "	IEnumerable<ColumnSeries> columnSeries = SeriesHost.Series.OfType<ColumnSeries> ().Where (series => series.ActualIndependentAxis == ActualIndependentAxis); " is 155.
Long Statement,System.Windows.Controls.DataVisualization.Charting,ColumnSeries,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Series\ColumnSeries.cs,UpdateDataPoint,The length of the statement  "	double dataPointY = ActualDependentRangeAxis.GetPlotAreaCoordinate (ValueHelper.ToDouble (dataPoint.ActualDependentValue)).Value; " is 129.
Long Statement,System.Windows.Controls.DataVisualization.Charting,LineSeries,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Series\LineSeries.cs,GetAxes,The length of the statement  "			throw new InvalidOperationException (Properties.Resources.DataPointSeriesWithAxes_NoSuitableAxisAvailableForPlottingDependentValue); " is 132.
Long Statement,System.Windows.Controls.DataVisualization.Charting,ScatterSeries,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Series\ScatterSeries.cs,GetAxes,The length of the statement  "			throw new InvalidOperationException (Properties.Resources.DataPointSeriesWithAxes_NoSuitableAxisAvailableForPlottingDependentValue); " is 132.
Long Statement,System.Windows.Controls.DataVisualization.Charting,PieSeries,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Series\PieSeries.cs,UpdateRatios,The length of the statement  "	double sum = ActivePieDataPoints.Select (pieDataPoint => Math.Abs (ValueHelper.ToDouble (pieDataPoint.DependentValue))).Sum (); " is 127.
Long Statement,System.Windows.Controls.DataVisualization.Charting,PieSeries,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Series\PieSeries.cs,OnPieDataPointRatioChanged,The length of the statement  "	dataPoint.BeginAnimation (PieDataPoint.ActualRatioProperty' "ActualRatio"' args.NewValue' TransitionDuration' this.TransitionEasingFunction); " is 141.
Long Statement,System.Windows.Controls.DataVisualization.Charting,PieSeries,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Series\PieSeries.cs,OnPieDataPointOffsetRatioChanged,The length of the statement  "	dataPoint.BeginAnimation (PieDataPoint.ActualOffsetRatioProperty' "ActualOffsetRatio"' args.NewValue' TransitionDuration' this.TransitionEasingFunction); " is 153.
Long Statement,System.Windows.Controls.DataVisualization.Charting,DataPointSeries,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Series\DataPointSeries.cs,OnItemsSourceChanged,The length of the statement  "		_weakEventListener.OnEventAction = (instance' source' eventArgs) => instance.ItemsSourceCollectionChanged (source' eventArgs); " is 126.
Long Statement,System.Windows.Controls.DataVisualization.Charting,DataPointSeries,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Series\DataPointSeries.cs,OnItemsSourceChanged,The length of the statement  "		_weakEventListener.OnDetachAction = weakEventListener => newValueINotifyCollectionChanged.CollectionChanged -= weakEventListener.OnEvent; " is 137.
Long Statement,System.Windows.Controls.DataVisualization.Charting,DataPointSeries,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Series\DataPointSeries.cs,OnSelectedItemPropertyChanged,The length of the statement  "		dataPoint = _dataPointsByObject [newValue].Where (dp => object.Equals (newValue' dp.DataContext) && dp.IsActive).FirstOrDefault (); " is 131.
Long Statement,System.Windows.Controls.DataVisualization.Charting,DataPointSeries,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Series\DataPointSeries.cs,OnSelectedItemPropertyChanged,The length of the statement  "	foreach (DataPoint dataPointUnselect in ActiveDataPoints.Where (activeDataPoint => (activeDataPoint != dataPoint) && activeDataPoint.IsSelected)) { " is 147.
Long Statement,System.Windows.Controls.DataVisualization.Charting,DataPointSeries,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Series\DataPointSeries.cs,GetDataPoint,The length of the statement  "	DataPoint dataPoint = _dataPointsByObject [dataContext].Where (dp => object.Equals (dataContext' dp.DataContext)).FirstOrDefault (); " is 132.
Long Statement,System.Windows.Controls.DataVisualization.Charting,DataPointSeries,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Series\DataPointSeries.cs,OnItemsSourceCollectionChanged,The length of the statement  "			DataPoint dataPointToUpdate = _dataPointsByObject [e.OldItems [index]].Where (dp => object.Equals (e.OldItems [index]' dp.DataContext)).Except (updatedDataPoints).FirstOrDefault (); " is 181.
Long Statement,System.Windows.Controls.DataVisualization.Charting,DataPointSeries,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Series\DataPointSeries.cs,StaggeredStateChange,The length of the statement  "			discreteObjectKeyFrame.KeyTime = TimeSpan.FromMilliseconds (1000 * ((double)(dataPointCount - count - 1) / dataPointCount)); " is 124.
Long Statement,System.Windows.Controls.DataVisualization.Charting,DataPointSeries,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Series\DataPointSeries.cs,StaggeredStateChange,The length of the statement  "	stateChangeStoryBoard.Duration = new Duration (AnimationSequence.Simultaneous == AnimationSequence ? TimeSpan.FromTicks (1) : TimeSpan.FromMilliseconds (1001)); " is 160.
Long Statement,System.Windows.Controls.DataVisualization.Charting,DataPointSeries,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Series\DataPointSeries.cs,GetResourceDictionaryWithTargetType,The length of the statement  "			return (null != style.TargetType) && ((targetType == style.TargetType) || (takeAncestors && style.TargetType.IsAssignableFrom (targetType))); " is 141.
Long Statement,System.Windows.Controls.DataVisualization.Charting,ResourceDictionaryDispenser,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\ResourceDictionaryDispenser.cs,ResourceDictionariesCollectionChanged,The length of the statement  "	if (!(e.Action == NotifyCollectionChangedAction.Add && (this.ResourceDictionaries.Count - e.NewItems.Count) == e.NewStartingIndex)) { " is 133.
Long Statement,System.Windows.Controls.DataVisualization.Charting.Primitives,EdgePanel,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Primitives\EdgePanel.cs,OnEdgePropertyChanged,The length of the statement  "	if ((value != Edge.Left) && (value != Edge.Top) && (value != Edge.Right) && (value != Edge.Center) && (value != Edge.Bottom)) { " is 127.
Long Statement,System.Windows.Controls.DataVisualization.Charting.Primitives,EdgePanel,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Primitives\EdgePanel.cs,OnEdgePropertyChanged,The length of the statement  "		string message = string.Format (CultureInfo.InvariantCulture' Properties.Resources.EdgePanel_OnEdgePropertyChanged' value); " is 123.
Long Statement,System.Windows.Controls.DataVisualization.Charting.Primitives,EdgePanel,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Primitives\EdgePanel.cs,MeasureOverride,The length of the statement  "	IList<UIElement> leftElements = this.Children.OfType<UIElement> ().Where (element => GetEdge (element) == Edge.Left).ToList (); " is 127.
Long Statement,System.Windows.Controls.DataVisualization.Charting.Primitives,EdgePanel,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Primitives\EdgePanel.cs,MeasureOverride,The length of the statement  "	IList<UIElement> rightElements = this.Children.OfType<UIElement> ().Where (element => GetEdge (element) == Edge.Right).ToList (); " is 129.
Long Statement,System.Windows.Controls.DataVisualization.Charting.Primitives,EdgePanel,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Primitives\EdgePanel.cs,MeasureOverride,The length of the statement  "	IList<UIElement> bottomElements = this.Children.OfType<UIElement> ().Where (element => GetEdge (element) == Edge.Bottom).ToList (); " is 131.
Long Statement,System.Windows.Controls.DataVisualization.Charting.Primitives,EdgePanel,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Primitives\EdgePanel.cs,MeasureOverride,The length of the statement  "	IList<UIElement> topElements = this.Children.OfType<UIElement> ().Where (element => GetEdge (element) == Edge.Top).ToList (); " is 125.
Long Statement,System.Windows.Controls.DataVisualization.Charting.Primitives,EdgePanel,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Primitives\EdgePanel.cs,MeasureOverride,The length of the statement  "			_leftRect = SafeCreateRect (_leftRect.Left' _leftRect.Top' leftElements.Select (axis => axis.DesiredSize.Width).SumOrDefault ()' _leftRect.Height); " is 147.
Long Statement,System.Windows.Controls.DataVisualization.Charting.Primitives,EdgePanel,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Primitives\EdgePanel.cs,MeasureOverride,The length of the statement  "			_bottomRect = SafeCreateRect (_bottomRect.Left' constraint.Height - bottomAxesHeight' _bottomRect.Width' bottomAxesHeight); " is 123.
Long Statement,System.Windows.Controls.DataVisualization.Charting.Primitives,EdgePanel,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Primitives\EdgePanel.cs,MeasureOverride,The length of the statement  "		if (leftBottomCollisionRect.IsEmptyOrHasNoSize () && rightBottomCollisionRect.IsEmptyOrHasNoSize () && leftTopCollisionRect.IsEmptyOrHasNoSize () && rightTopCollisionRect.IsEmptyOrHasNoSize () && previousBottomAxesHeight == bottomAxesHeight && previousLeftAxesWidth == leftAxesWidth && previousRightAxesWidth == rightAxesWidth && previousTopAxesHeight == topAxesHeight) { " is 371.
Long Statement,System.Windows.Controls.DataVisualization.Charting.Primitives,EdgePanel,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Primitives\EdgePanel.cs,MeasureOverride,The length of the statement  "			_leftRect = SafeCreateRect (0' maxTopRequestedHeight' maxLeftRequestedWidth' (constraint.Height - maxTopRequestedHeight) - maxBottomRequestedHeight); " is 149.
Long Statement,System.Windows.Controls.DataVisualization.Charting.Primitives,EdgePanel,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Primitives\EdgePanel.cs,MeasureOverride,The length of the statement  "			_rightRect = SafeCreateRect (constraint.Width - maxRightRequestedWidth' maxTopRequestedHeight' maxRightRequestedWidth' (constraint.Height - maxTopRequestedHeight) - maxBottomRequestedHeight); " is 191.
Long Statement,System.Windows.Controls.DataVisualization.Charting.Primitives,EdgePanel,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Primitives\EdgePanel.cs,MeasureOverride,The length of the statement  "			_bottomRect = SafeCreateRect (maxLeftRequestedWidth' constraint.Height - maxBottomRequestedHeight' (constraint.Width - maxLeftRequestedWidth) - maxRightRequestedWidth' maxBottomRequestedHeight); " is 194.
Long Statement,System.Windows.Controls.DataVisualization.Charting.Primitives,EdgePanel,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Primitives\EdgePanel.cs,MeasureOverride,The length of the statement  "			_topRect = SafeCreateRect (maxLeftRequestedWidth' 0' (constraint.Width - maxLeftRequestedWidth) - maxRightRequestedWidth' maxTopRequestedHeight); " is 145.
Long Statement,System.Windows.Controls.DataVisualization.Charting.Primitives,EdgePanel,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Primitives\EdgePanel.cs,MeasureOverride,The length of the statement  "			_leftRect = SafeCreateRect (_leftRect.Left' _leftRect.Top' _leftRect.Width' _leftRect.Height - leftBottomCollisionRect.Height); " is 127.
Long Statement,System.Windows.Controls.DataVisualization.Charting.Primitives,EdgePanel,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Primitives\EdgePanel.cs,MeasureOverride,The length of the statement  "			_bottomRect = SafeCreateRect (_bottomRect.Left + leftBottomCollisionRect.Width' _bottomRect.Top' _bottomRect.Width - leftBottomCollisionRect.Width' _bottomRect.Height); " is 168.
Long Statement,System.Windows.Controls.DataVisualization.Charting.Primitives,EdgePanel,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Primitives\EdgePanel.cs,MeasureOverride,The length of the statement  "			_leftRect = SafeCreateRect (_leftRect.Left' _leftRect.Top + leftTopCollisionRect.Height' _leftRect.Width' _leftRect.Height - leftTopCollisionRect.Height); " is 154.
Long Statement,System.Windows.Controls.DataVisualization.Charting.Primitives,EdgePanel,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Primitives\EdgePanel.cs,MeasureOverride,The length of the statement  "			_topRect = SafeCreateRect (_topRect.Left + leftTopCollisionRect.Width' _topRect.Top' _topRect.Width - leftTopCollisionRect.Width' _topRect.Height); " is 147.
Long Statement,System.Windows.Controls.DataVisualization.Charting.Primitives,EdgePanel,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Primitives\EdgePanel.cs,MeasureOverride,The length of the statement  "			_rightRect = SafeCreateRect (_rightRect.Left' _rightRect.Top' _rightRect.Width' _rightRect.Height - rightBottomCollisionRect.Height); " is 133.
Long Statement,System.Windows.Controls.DataVisualization.Charting.Primitives,EdgePanel,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Primitives\EdgePanel.cs,MeasureOverride,The length of the statement  "			_bottomRect = SafeCreateRect (_bottomRect.Left' _bottomRect.Top' _bottomRect.Width - rightBottomCollisionRect.Width' _bottomRect.Height); " is 137.
Long Statement,System.Windows.Controls.DataVisualization.Charting.Primitives,EdgePanel,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Primitives\EdgePanel.cs,MeasureOverride,The length of the statement  "			_rightRect = SafeCreateRect (_rightRect.Left' _rightRect.Top + rightTopCollisionRect.Height' _rightRect.Width' _rightRect.Height - rightTopCollisionRect.Height); " is 161.
Long Statement,System.Windows.Controls.DataVisualization.Charting.Primitives,EdgePanel,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Primitives\EdgePanel.cs,MeasureOverride,The length of the statement  "			_leftRect = new Rect (new Point (_leftRect.Left' _topRect.BottomOrDefault (0))' new Point (_leftRect.Right' _bottomRect.TopOrDefault (constraint.Height))); " is 155.
Long Statement,System.Windows.Controls.DataVisualization.Charting.Primitives,EdgePanel,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Primitives\EdgePanel.cs,MeasureOverride,The length of the statement  "			_rightRect = new Rect (new Point (_rightRect.Left' _topRect.BottomOrDefault (0))' new Point (_rightRect.Right' _bottomRect.TopOrDefault (constraint.Height))); " is 158.
Long Statement,System.Windows.Controls.DataVisualization.Charting.Primitives,EdgePanel,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Primitives\EdgePanel.cs,MeasureOverride,The length of the statement  "			_bottomRect = new Rect (new Point (_leftRect.RightOrDefault (0)' _bottomRect.Top)' new Point (_rightRect.LeftOrDefault (constraint.Width)' _bottomRect.Bottom)); " is 160.
Long Statement,System.Windows.Controls.DataVisualization.Charting.Primitives,EdgePanel,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Primitives\EdgePanel.cs,MeasureOverride,The length of the statement  "			_topRect = new Rect (new Point (_leftRect.RightOrDefault (0)' _topRect.Top)' new Point (_rightRect.LeftOrDefault (constraint.Width)' _topRect.Bottom)); " is 151.
Long Statement,System.Windows.Controls.DataVisualization.Charting.Primitives,EdgePanel,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Primitives\EdgePanel.cs,MeasureOverride,The length of the statement  "	Size centerSize = new Size ((constraint.Width - _leftRect.WidthOrDefault (0)) - _rightRect.WidthOrDefault (0)' (constraint.Height - _topRect.HeightOrDefault (0)) - _bottomRect.HeightOrDefault (0)); " is 197.
Long Statement,System.Windows.Controls.DataVisualization.Charting.Primitives,EdgePanel,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Primitives\EdgePanel.cs,ArrangeOverride,The length of the statement  "	if (arrangeSize.Width == 0 || arrangeSize.Height == 0 || !ValueHelper.CanGraph (arrangeSize.Width) || !ValueHelper.CanGraph (arrangeSize.Height)) { " is 147.
Long Statement,System.Windows.Controls.DataVisualization.Charting.Primitives,EdgePanel,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Primitives\EdgePanel.cs,ArrangeOverride,The length of the statement  "	IList<UIElement> leftElements = this.Children.OfType<UIElement> ().Where (element => GetEdge (element) == Edge.Left).ToList (); " is 127.
Long Statement,System.Windows.Controls.DataVisualization.Charting.Primitives,EdgePanel,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Primitives\EdgePanel.cs,ArrangeOverride,The length of the statement  "	IList<UIElement> rightElements = this.Children.OfType<UIElement> ().Where (element => GetEdge (element) == Edge.Right).ToList (); " is 129.
Long Statement,System.Windows.Controls.DataVisualization.Charting.Primitives,EdgePanel,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Primitives\EdgePanel.cs,ArrangeOverride,The length of the statement  "	IList<UIElement> bottomElements = this.Children.OfType<UIElement> ().Where (element => GetEdge (element) == Edge.Bottom).ToList (); " is 131.
Long Statement,System.Windows.Controls.DataVisualization.Charting.Primitives,EdgePanel,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Primitives\EdgePanel.cs,ArrangeOverride,The length of the statement  "	IList<UIElement> topElements = this.Children.OfType<UIElement> ().Where (element => GetEdge (element) == Edge.Top).ToList (); " is 125.
Long Statement,System.Windows.Controls.DataVisualization.Charting.Primitives,EdgePanel,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Primitives\EdgePanel.cs,ArrangeOverride,The length of the statement  "			bottomUIElement.Arrange (SafeCreateRect (_leftRect.RightOrDefault (0)' workingHeight' (arrangeSize.Width - _leftRect.WidthOrDefault (0)) - _rightRect.WidthOrDefault (0)' bottomUIElement.DesiredSize.Height)); " is 207.
Long Statement,System.Windows.Controls.DataVisualization.Charting.Primitives,EdgePanel,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Primitives\EdgePanel.cs,ArrangeOverride,The length of the statement  "			topUIElement.Arrange (SafeCreateRect (_leftRect.RightOrDefault (0)' workingTop' (arrangeSize.Width - _leftRect.WidthOrDefault (0)) - _rightRect.WidthOrDefault (0)' topUIElement.DesiredSize.Height)); " is 198.
Long Statement,System.Windows.Controls.DataVisualization.Charting.Primitives,EdgePanel,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Primitives\EdgePanel.cs,ArrangeOverride,The length of the statement  "			rightUIElement.Arrange (SafeCreateRect (workingRight' _topRect.BottomOrDefault (0)' rightUIElement.DesiredSize.Width' (arrangeSize.Height - _bottomRect.HeightOrDefault (0)) - _topRect.HeightOrDefault (0))); " is 206.
Long Statement,System.Windows.Controls.DataVisualization.Charting.Primitives,EdgePanel,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Primitives\EdgePanel.cs,ArrangeOverride,The length of the statement  "			Rect leftRect = SafeCreateRect (workingLeft' _topRect.BottomOrDefault (0)' leftUIElement.DesiredSize.Width' (arrangeSize.Height - _bottomRect.HeightOrDefault (0)) - _topRect.HeightOrDefault (0)); " is 195.
Long Statement,System.Windows.Controls.DataVisualization.Charting.Primitives,EdgePanel,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Primitives\EdgePanel.cs,ArrangeOverride,The length of the statement  "	Rect centerRect = SafeCreateRect (_leftRect.RightOrDefault (0)' _topRect.BottomOrDefault (0)' ((arrangeSize.Width - _leftRect.WidthOrDefault (0)) - _rightRect.WidthOrDefault (0))' ((arrangeSize.Height - _topRect.HeightOrDefault (0)) - _bottomRect.HeightOrDefault (0))); " is 269.
Long Statement,System.Windows.Controls.DataVisualization.Collections,LeftLeaningRedBlackTree,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Collections\LeftLeaningRedBlackTree.cs,GetValueForKey,The length of the statement  "		throw new InvalidOperationException ("GetValueForKey is only supported when acting as a normal (non-multi) dictionary."); " is 121.
Complex Conditional,System.Windows.Controls.DataVisualization,ObjectPool,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\ObjectPool.cs,Done,The conditional expression  "currentIndex != 0 && _objects.Count > 0 && currentIndex >= minimumObjectsInThePool && currentIndex < _objects.Count / 2"  is complex.
Complex Conditional,System.Windows.Controls.DataVisualization,ValueHelper,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\ValueHelper.cs,TryConvert,The conditional expression  "value != null && (value is double || value is int || value is byte || value is short || value is decimal || value is float || value is long || value is uint || value is sbyte || value is ushort || value is ulong)"  is complex.
Complex Conditional,System.Windows.Controls.DataVisualization.Charting,DataPointSeriesWithAxes,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Series\DataPointSeriesWithAxes.cs,OnInternalDependentAxisPropertyChanged,The conditional expression  "newValue != null && InternalActualDependentAxis != null && InternalActualDependentAxis != newValue && InternalActualDependentAxis.RegisteredListeners.Contains (this)"  is complex.
Complex Conditional,System.Windows.Controls.DataVisualization.Charting,DataPointSeriesWithAxes,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Series\DataPointSeriesWithAxes.cs,OnInternalIndependentAxisPropertyChanged,The conditional expression  "newValue != null && InternalActualIndependentAxis != null && InternalActualIndependentAxis != newValue && InternalActualIndependentAxis.RegisteredListeners.Contains (this)"  is complex.
Complex Conditional,System.Windows.Controls.DataVisualization.Charting.Primitives,EdgePanel,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Primitives\EdgePanel.cs,OnEdgePropertyChanged,The conditional expression  "(value != Edge.Left) && (value != Edge.Top) && (value != Edge.Right) && (value != Edge.Center) && (value != Edge.Bottom)"  is complex.
Complex Conditional,System.Windows.Controls.DataVisualization.Charting.Primitives,EdgePanel,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Primitives\EdgePanel.cs,MeasureOverride,The conditional expression  "leftBottomCollisionRect.IsEmptyOrHasNoSize () && rightBottomCollisionRect.IsEmptyOrHasNoSize () && leftTopCollisionRect.IsEmptyOrHasNoSize () && rightTopCollisionRect.IsEmptyOrHasNoSize () && previousBottomAxesHeight == bottomAxesHeight && previousLeftAxesWidth == leftAxesWidth && previousRightAxesWidth == rightAxesWidth && previousTopAxesHeight == topAxesHeight"  is complex.
Complex Conditional,System.Windows.Controls.DataVisualization.Charting.Primitives,EdgePanel,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Primitives\EdgePanel.cs,ArrangeOverride,The conditional expression  "arrangeSize.Width == 0 || arrangeSize.Height == 0 || !ValueHelper.CanGraph (arrangeSize.Width) || !ValueHelper.CanGraph (arrangeSize.Height)"  is complex.
Virtual Method Call from Constructor,System.Windows.Controls.DataVisualization.Charting,PieSeries,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Series\PieSeries.cs,PieSeries,The constructor "PieSeries" calls a virtual method "OnResourceDictionariesChanged".
Empty Catch Block,System.Windows.Controls.DataVisualization,ValueHelper,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\ValueHelper.cs,TryConvert,The method has an empty catch block.
Empty Catch Block,System.Windows.Controls.DataVisualization,ValueHelper,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\ValueHelper.cs,TryConvert,The method has an empty catch block.
Magic Number,System.Windows.Controls.DataVisualization,ObjectPool,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\ObjectPool.cs,Done,The following statement contains a magic number: if (currentIndex != 0 && _objects.Count > 0 && currentIndex >= minimumObjectsInThePool && currentIndex < _objects.Count / 2) {  	_objects.RemoveRange (currentIndex' _objects.Count - currentIndex);  }  
Magic Number,System.Windows.Controls.DataVisualization,LayoutTransformControl,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\LayoutTransformControl.cs,GetTransformMatrix,The following statement contains a magic number: if (null != transform) {  	// WPF equivalent of this entire method:  	// return transform.Value;  	// Process the TransformGroup  	TransformGroup transformGroup = transform as TransformGroup;  	if (null != transformGroup) {  		Matrix groupMatrix = Matrix.Identity;  		foreach (Transform child in transformGroup.Children) {  			groupMatrix = MatrixMultiply (groupMatrix' GetTransformMatrix (child));  		}  		return groupMatrix;  	}  	// Process the RotateTransform  	RotateTransform rotateTransform = transform as RotateTransform;  	if (null != rotateTransform) {  		double angle = rotateTransform.Angle;  		double angleRadians = (2 * Math.PI * angle) / 360;  		double sine = Math.Sin (angleRadians);  		double cosine = Math.Cos (angleRadians);  		return new Matrix (cosine' sine' -sine' cosine' 0' 0);  	}  	// Process the ScaleTransform  	ScaleTransform scaleTransform = transform as ScaleTransform;  	if (null != scaleTransform) {  		double scaleX = scaleTransform.ScaleX;  		double scaleY = scaleTransform.ScaleY;  		return new Matrix (scaleX' 0' 0' scaleY' 0' 0);  	}  	// Process the SkewTransform  	SkewTransform skewTransform = transform as SkewTransform;  	if (null != skewTransform) {  		double angleX = skewTransform.AngleX;  		double angleY = skewTransform.AngleY;  		double angleXRadians = (2 * Math.PI * angleX) / 360;  		double angleYRadians = (2 * Math.PI * angleY) / 360;  		return new Matrix (1' angleYRadians' angleXRadians' 1' 0' 0);  	}  	// Process the MatrixTransform  	MatrixTransform matrixTransform = transform as MatrixTransform;  	if (null != matrixTransform) {  		return matrixTransform.Matrix;  	}  	// TranslateTransform has no effect in LayoutTransform  }  
Magic Number,System.Windows.Controls.DataVisualization,LayoutTransformControl,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\LayoutTransformControl.cs,GetTransformMatrix,The following statement contains a magic number: if (null != transform) {  	// WPF equivalent of this entire method:  	// return transform.Value;  	// Process the TransformGroup  	TransformGroup transformGroup = transform as TransformGroup;  	if (null != transformGroup) {  		Matrix groupMatrix = Matrix.Identity;  		foreach (Transform child in transformGroup.Children) {  			groupMatrix = MatrixMultiply (groupMatrix' GetTransformMatrix (child));  		}  		return groupMatrix;  	}  	// Process the RotateTransform  	RotateTransform rotateTransform = transform as RotateTransform;  	if (null != rotateTransform) {  		double angle = rotateTransform.Angle;  		double angleRadians = (2 * Math.PI * angle) / 360;  		double sine = Math.Sin (angleRadians);  		double cosine = Math.Cos (angleRadians);  		return new Matrix (cosine' sine' -sine' cosine' 0' 0);  	}  	// Process the ScaleTransform  	ScaleTransform scaleTransform = transform as ScaleTransform;  	if (null != scaleTransform) {  		double scaleX = scaleTransform.ScaleX;  		double scaleY = scaleTransform.ScaleY;  		return new Matrix (scaleX' 0' 0' scaleY' 0' 0);  	}  	// Process the SkewTransform  	SkewTransform skewTransform = transform as SkewTransform;  	if (null != skewTransform) {  		double angleX = skewTransform.AngleX;  		double angleY = skewTransform.AngleY;  		double angleXRadians = (2 * Math.PI * angleX) / 360;  		double angleYRadians = (2 * Math.PI * angleY) / 360;  		return new Matrix (1' angleYRadians' angleXRadians' 1' 0' 0);  	}  	// Process the MatrixTransform  	MatrixTransform matrixTransform = transform as MatrixTransform;  	if (null != matrixTransform) {  		return matrixTransform.Matrix;  	}  	// TranslateTransform has no effect in LayoutTransform  }  
Magic Number,System.Windows.Controls.DataVisualization,LayoutTransformControl,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\LayoutTransformControl.cs,GetTransformMatrix,The following statement contains a magic number: if (null != transform) {  	// WPF equivalent of this entire method:  	// return transform.Value;  	// Process the TransformGroup  	TransformGroup transformGroup = transform as TransformGroup;  	if (null != transformGroup) {  		Matrix groupMatrix = Matrix.Identity;  		foreach (Transform child in transformGroup.Children) {  			groupMatrix = MatrixMultiply (groupMatrix' GetTransformMatrix (child));  		}  		return groupMatrix;  	}  	// Process the RotateTransform  	RotateTransform rotateTransform = transform as RotateTransform;  	if (null != rotateTransform) {  		double angle = rotateTransform.Angle;  		double angleRadians = (2 * Math.PI * angle) / 360;  		double sine = Math.Sin (angleRadians);  		double cosine = Math.Cos (angleRadians);  		return new Matrix (cosine' sine' -sine' cosine' 0' 0);  	}  	// Process the ScaleTransform  	ScaleTransform scaleTransform = transform as ScaleTransform;  	if (null != scaleTransform) {  		double scaleX = scaleTransform.ScaleX;  		double scaleY = scaleTransform.ScaleY;  		return new Matrix (scaleX' 0' 0' scaleY' 0' 0);  	}  	// Process the SkewTransform  	SkewTransform skewTransform = transform as SkewTransform;  	if (null != skewTransform) {  		double angleX = skewTransform.AngleX;  		double angleY = skewTransform.AngleY;  		double angleXRadians = (2 * Math.PI * angleX) / 360;  		double angleYRadians = (2 * Math.PI * angleY) / 360;  		return new Matrix (1' angleYRadians' angleXRadians' 1' 0' 0);  	}  	// Process the MatrixTransform  	MatrixTransform matrixTransform = transform as MatrixTransform;  	if (null != matrixTransform) {  		return matrixTransform.Matrix;  	}  	// TranslateTransform has no effect in LayoutTransform  }  
Magic Number,System.Windows.Controls.DataVisualization,LayoutTransformControl,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\LayoutTransformControl.cs,GetTransformMatrix,The following statement contains a magic number: if (null != transform) {  	// WPF equivalent of this entire method:  	// return transform.Value;  	// Process the TransformGroup  	TransformGroup transformGroup = transform as TransformGroup;  	if (null != transformGroup) {  		Matrix groupMatrix = Matrix.Identity;  		foreach (Transform child in transformGroup.Children) {  			groupMatrix = MatrixMultiply (groupMatrix' GetTransformMatrix (child));  		}  		return groupMatrix;  	}  	// Process the RotateTransform  	RotateTransform rotateTransform = transform as RotateTransform;  	if (null != rotateTransform) {  		double angle = rotateTransform.Angle;  		double angleRadians = (2 * Math.PI * angle) / 360;  		double sine = Math.Sin (angleRadians);  		double cosine = Math.Cos (angleRadians);  		return new Matrix (cosine' sine' -sine' cosine' 0' 0);  	}  	// Process the ScaleTransform  	ScaleTransform scaleTransform = transform as ScaleTransform;  	if (null != scaleTransform) {  		double scaleX = scaleTransform.ScaleX;  		double scaleY = scaleTransform.ScaleY;  		return new Matrix (scaleX' 0' 0' scaleY' 0' 0);  	}  	// Process the SkewTransform  	SkewTransform skewTransform = transform as SkewTransform;  	if (null != skewTransform) {  		double angleX = skewTransform.AngleX;  		double angleY = skewTransform.AngleY;  		double angleXRadians = (2 * Math.PI * angleX) / 360;  		double angleYRadians = (2 * Math.PI * angleY) / 360;  		return new Matrix (1' angleYRadians' angleXRadians' 1' 0' 0);  	}  	// Process the MatrixTransform  	MatrixTransform matrixTransform = transform as MatrixTransform;  	if (null != matrixTransform) {  		return matrixTransform.Matrix;  	}  	// TranslateTransform has no effect in LayoutTransform  }  
Magic Number,System.Windows.Controls.DataVisualization,LayoutTransformControl,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\LayoutTransformControl.cs,GetTransformMatrix,The following statement contains a magic number: if (null != transform) {  	// WPF equivalent of this entire method:  	// return transform.Value;  	// Process the TransformGroup  	TransformGroup transformGroup = transform as TransformGroup;  	if (null != transformGroup) {  		Matrix groupMatrix = Matrix.Identity;  		foreach (Transform child in transformGroup.Children) {  			groupMatrix = MatrixMultiply (groupMatrix' GetTransformMatrix (child));  		}  		return groupMatrix;  	}  	// Process the RotateTransform  	RotateTransform rotateTransform = transform as RotateTransform;  	if (null != rotateTransform) {  		double angle = rotateTransform.Angle;  		double angleRadians = (2 * Math.PI * angle) / 360;  		double sine = Math.Sin (angleRadians);  		double cosine = Math.Cos (angleRadians);  		return new Matrix (cosine' sine' -sine' cosine' 0' 0);  	}  	// Process the ScaleTransform  	ScaleTransform scaleTransform = transform as ScaleTransform;  	if (null != scaleTransform) {  		double scaleX = scaleTransform.ScaleX;  		double scaleY = scaleTransform.ScaleY;  		return new Matrix (scaleX' 0' 0' scaleY' 0' 0);  	}  	// Process the SkewTransform  	SkewTransform skewTransform = transform as SkewTransform;  	if (null != skewTransform) {  		double angleX = skewTransform.AngleX;  		double angleY = skewTransform.AngleY;  		double angleXRadians = (2 * Math.PI * angleX) / 360;  		double angleYRadians = (2 * Math.PI * angleY) / 360;  		return new Matrix (1' angleYRadians' angleXRadians' 1' 0' 0);  	}  	// Process the MatrixTransform  	MatrixTransform matrixTransform = transform as MatrixTransform;  	if (null != matrixTransform) {  		return matrixTransform.Matrix;  	}  	// TranslateTransform has no effect in LayoutTransform  }  
Magic Number,System.Windows.Controls.DataVisualization,LayoutTransformControl,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\LayoutTransformControl.cs,GetTransformMatrix,The following statement contains a magic number: if (null != transform) {  	// WPF equivalent of this entire method:  	// return transform.Value;  	// Process the TransformGroup  	TransformGroup transformGroup = transform as TransformGroup;  	if (null != transformGroup) {  		Matrix groupMatrix = Matrix.Identity;  		foreach (Transform child in transformGroup.Children) {  			groupMatrix = MatrixMultiply (groupMatrix' GetTransformMatrix (child));  		}  		return groupMatrix;  	}  	// Process the RotateTransform  	RotateTransform rotateTransform = transform as RotateTransform;  	if (null != rotateTransform) {  		double angle = rotateTransform.Angle;  		double angleRadians = (2 * Math.PI * angle) / 360;  		double sine = Math.Sin (angleRadians);  		double cosine = Math.Cos (angleRadians);  		return new Matrix (cosine' sine' -sine' cosine' 0' 0);  	}  	// Process the ScaleTransform  	ScaleTransform scaleTransform = transform as ScaleTransform;  	if (null != scaleTransform) {  		double scaleX = scaleTransform.ScaleX;  		double scaleY = scaleTransform.ScaleY;  		return new Matrix (scaleX' 0' 0' scaleY' 0' 0);  	}  	// Process the SkewTransform  	SkewTransform skewTransform = transform as SkewTransform;  	if (null != skewTransform) {  		double angleX = skewTransform.AngleX;  		double angleY = skewTransform.AngleY;  		double angleXRadians = (2 * Math.PI * angleX) / 360;  		double angleYRadians = (2 * Math.PI * angleY) / 360;  		return new Matrix (1' angleYRadians' angleXRadians' 1' 0' 0);  	}  	// Process the MatrixTransform  	MatrixTransform matrixTransform = transform as MatrixTransform;  	if (null != matrixTransform) {  		return matrixTransform.Matrix;  	}  	// TranslateTransform has no effect in LayoutTransform  }  
Magic Number,System.Windows.Controls.DataVisualization,LayoutTransformControl,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\LayoutTransformControl.cs,GetTransformMatrix,The following statement contains a magic number: if (null != rotateTransform) {  	double angle = rotateTransform.Angle;  	double angleRadians = (2 * Math.PI * angle) / 360;  	double sine = Math.Sin (angleRadians);  	double cosine = Math.Cos (angleRadians);  	return new Matrix (cosine' sine' -sine' cosine' 0' 0);  }  
Magic Number,System.Windows.Controls.DataVisualization,LayoutTransformControl,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\LayoutTransformControl.cs,GetTransformMatrix,The following statement contains a magic number: if (null != rotateTransform) {  	double angle = rotateTransform.Angle;  	double angleRadians = (2 * Math.PI * angle) / 360;  	double sine = Math.Sin (angleRadians);  	double cosine = Math.Cos (angleRadians);  	return new Matrix (cosine' sine' -sine' cosine' 0' 0);  }  
Magic Number,System.Windows.Controls.DataVisualization,LayoutTransformControl,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\LayoutTransformControl.cs,GetTransformMatrix,The following statement contains a magic number: if (null != skewTransform) {  	double angleX = skewTransform.AngleX;  	double angleY = skewTransform.AngleY;  	double angleXRadians = (2 * Math.PI * angleX) / 360;  	double angleYRadians = (2 * Math.PI * angleY) / 360;  	return new Matrix (1' angleYRadians' angleXRadians' 1' 0' 0);  }  
Magic Number,System.Windows.Controls.DataVisualization,LayoutTransformControl,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\LayoutTransformControl.cs,GetTransformMatrix,The following statement contains a magic number: if (null != skewTransform) {  	double angleX = skewTransform.AngleX;  	double angleY = skewTransform.AngleY;  	double angleXRadians = (2 * Math.PI * angleX) / 360;  	double angleYRadians = (2 * Math.PI * angleY) / 360;  	return new Matrix (1' angleYRadians' angleXRadians' 1' 0' 0);  }  
Magic Number,System.Windows.Controls.DataVisualization,LayoutTransformControl,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\LayoutTransformControl.cs,GetTransformMatrix,The following statement contains a magic number: if (null != skewTransform) {  	double angleX = skewTransform.AngleX;  	double angleY = skewTransform.AngleY;  	double angleXRadians = (2 * Math.PI * angleX) / 360;  	double angleYRadians = (2 * Math.PI * angleY) / 360;  	return new Matrix (1' angleYRadians' angleXRadians' 1' 0' 0);  }  
Magic Number,System.Windows.Controls.DataVisualization,LayoutTransformControl,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\LayoutTransformControl.cs,GetTransformMatrix,The following statement contains a magic number: if (null != skewTransform) {  	double angleX = skewTransform.AngleX;  	double angleY = skewTransform.AngleY;  	double angleXRadians = (2 * Math.PI * angleX) / 360;  	double angleYRadians = (2 * Math.PI * angleY) / 360;  	return new Matrix (1' angleYRadians' angleXRadians' 1' 0' 0);  }  
Magic Number,System.Windows.Controls.DataVisualization,OrientedPanel,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\OrientedPanel.cs,GetRanges,The following statement contains a magic number: return children.Select (child => {  	double centerCoordinate = GetCenterCoordinate (child);  	double halfLength = lengthSelector (child) / 2;  	return new Range<double> (centerCoordinate - halfLength' centerCoordinate + halfLength);  });  
Magic Number,System.Windows.Controls.DataVisualization,OrientedPanel,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\OrientedPanel.cs,MeasureOverride,The following statement contains a magic number: if (Children.Count > 0) {  	Size totalSize = new Size (double.PositiveInfinity' double.PositiveInfinity);  	foreach (UIElement child in this.Children) {  		child.Measure (totalSize);  	}  	Func<UIElement' double> lengthSelector = null;  	Func<UIElement' double> offsetSelector = null;  	if (Orientation == Orientation.Horizontal) {  		lengthSelector = child => GetCorrectedDesiredSize (child).Width;  		offsetSelector = child => GetCorrectedDesiredSize (child).Height;  	} else {  		lengthSelector = child => GetCorrectedDesiredSize (child).Height;  		offsetSelector = child => GetCorrectedDesiredSize (child).Width;  	}  	IEnumerable<IGrouping<int' UIElement>> priorityGroups = from child in Children.Cast<UIElement> ()  	group child by GetPriority (child) into priorityGroup  	select priorityGroup;  	ActualMinimumDistanceBetweenChildren = (from priorityGroup in priorityGroups  	let orderedElements = (from element in priorityGroup  	orderby GetCenterCoordinate (element) ascending  	select element).ToList ()  	where orderedElements.Count >= 2  	select (EnumerableFunctions.Zip (orderedElements' orderedElements.Skip (1)' (leftElement' rightElement) => {  		double halfLeftLength = lengthSelector (leftElement) / 2;  		double leftCenterCoordinate = GetCenterCoordinate (leftElement);  		double halfRightLength = lengthSelector (rightElement) / 2;  		double rightCenterCoordinate = GetCenterCoordinate (rightElement);  		return (rightCenterCoordinate - halfRightLength) - (leftCenterCoordinate + halfLeftLength);  	})).Min ()).MinOrNullable () ?? MinimumDistanceBetweenChildren;  	IEnumerable<int> priorities = Children.Cast<UIElement> ().Select (child => GetPriority (child)).Distinct ().OrderBy (priority => priority).ToList ();  	PriorityOffsets = new Dictionary<int' double> ();  	foreach (int priority in priorities) {  		PriorityOffsets [priority] = 0.0;  	}  	IEnumerable<Tuple<int' int>> priorityPairs = EnumerableFunctions.Zip (priorities' priorities.Skip (1)' (previous' next) => new Tuple<int' int> (previous' next));  	foreach (Tuple<int' int> priorityPair in priorityPairs) {  		IEnumerable<UIElement> currentPriorityChildren = Children.Cast<UIElement> ().Where (child => GetPriority (child) == priorityPair.Item1).ToList ();  		IEnumerable<Range<double>> currentPriorityRanges = GetRanges (currentPriorityChildren' lengthSelector);  		IEnumerable<UIElement> nextPriorityChildren = Children.Cast<UIElement> ().Where (child => GetPriority (child) == priorityPair.Item2).ToList ();  		IEnumerable<Range<double>> nextPriorityRanges = GetRanges (nextPriorityChildren' lengthSelector);  		bool intersects = (from currentPriorityRange in currentPriorityRanges  		from nextPriorityRange in nextPriorityRanges  		select currentPriorityRange.IntersectsWith (nextPriorityRange)).Any (value => value);  		if (intersects) {  			double maxCurrentPriorityChildOffset = currentPriorityChildren.Select (child => offsetSelector (child)).MaxOrNullable () ?? 0.0;  			offset += maxCurrentPriorityChildOffset + OffsetPadding;  		}  		PriorityOffsets [priorityPair.Item2] = offset;  	}  	offset = (Children.Cast<UIElement> ().GroupBy (child => GetPriority (child)).Select (group => group.Select (child => PriorityOffsets [group.Key] + offsetSelector (child)).MaxOrNullable ())).Where (num => num.HasValue).Select (num => num.Value).MaxOrNullable () ?? 0.0;  }  
Magic Number,System.Windows.Controls.DataVisualization,OrientedPanel,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\OrientedPanel.cs,MeasureOverride,The following statement contains a magic number: if (Children.Count > 0) {  	Size totalSize = new Size (double.PositiveInfinity' double.PositiveInfinity);  	foreach (UIElement child in this.Children) {  		child.Measure (totalSize);  	}  	Func<UIElement' double> lengthSelector = null;  	Func<UIElement' double> offsetSelector = null;  	if (Orientation == Orientation.Horizontal) {  		lengthSelector = child => GetCorrectedDesiredSize (child).Width;  		offsetSelector = child => GetCorrectedDesiredSize (child).Height;  	} else {  		lengthSelector = child => GetCorrectedDesiredSize (child).Height;  		offsetSelector = child => GetCorrectedDesiredSize (child).Width;  	}  	IEnumerable<IGrouping<int' UIElement>> priorityGroups = from child in Children.Cast<UIElement> ()  	group child by GetPriority (child) into priorityGroup  	select priorityGroup;  	ActualMinimumDistanceBetweenChildren = (from priorityGroup in priorityGroups  	let orderedElements = (from element in priorityGroup  	orderby GetCenterCoordinate (element) ascending  	select element).ToList ()  	where orderedElements.Count >= 2  	select (EnumerableFunctions.Zip (orderedElements' orderedElements.Skip (1)' (leftElement' rightElement) => {  		double halfLeftLength = lengthSelector (leftElement) / 2;  		double leftCenterCoordinate = GetCenterCoordinate (leftElement);  		double halfRightLength = lengthSelector (rightElement) / 2;  		double rightCenterCoordinate = GetCenterCoordinate (rightElement);  		return (rightCenterCoordinate - halfRightLength) - (leftCenterCoordinate + halfLeftLength);  	})).Min ()).MinOrNullable () ?? MinimumDistanceBetweenChildren;  	IEnumerable<int> priorities = Children.Cast<UIElement> ().Select (child => GetPriority (child)).Distinct ().OrderBy (priority => priority).ToList ();  	PriorityOffsets = new Dictionary<int' double> ();  	foreach (int priority in priorities) {  		PriorityOffsets [priority] = 0.0;  	}  	IEnumerable<Tuple<int' int>> priorityPairs = EnumerableFunctions.Zip (priorities' priorities.Skip (1)' (previous' next) => new Tuple<int' int> (previous' next));  	foreach (Tuple<int' int> priorityPair in priorityPairs) {  		IEnumerable<UIElement> currentPriorityChildren = Children.Cast<UIElement> ().Where (child => GetPriority (child) == priorityPair.Item1).ToList ();  		IEnumerable<Range<double>> currentPriorityRanges = GetRanges (currentPriorityChildren' lengthSelector);  		IEnumerable<UIElement> nextPriorityChildren = Children.Cast<UIElement> ().Where (child => GetPriority (child) == priorityPair.Item2).ToList ();  		IEnumerable<Range<double>> nextPriorityRanges = GetRanges (nextPriorityChildren' lengthSelector);  		bool intersects = (from currentPriorityRange in currentPriorityRanges  		from nextPriorityRange in nextPriorityRanges  		select currentPriorityRange.IntersectsWith (nextPriorityRange)).Any (value => value);  		if (intersects) {  			double maxCurrentPriorityChildOffset = currentPriorityChildren.Select (child => offsetSelector (child)).MaxOrNullable () ?? 0.0;  			offset += maxCurrentPriorityChildOffset + OffsetPadding;  		}  		PriorityOffsets [priorityPair.Item2] = offset;  	}  	offset = (Children.Cast<UIElement> ().GroupBy (child => GetPriority (child)).Select (group => group.Select (child => PriorityOffsets [group.Key] + offsetSelector (child)).MaxOrNullable ())).Where (num => num.HasValue).Select (num => num.Value).MaxOrNullable () ?? 0.0;  }  
Magic Number,System.Windows.Controls.DataVisualization,OrientedPanel,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\OrientedPanel.cs,MeasureOverride,The following statement contains a magic number: if (Children.Count > 0) {  	Size totalSize = new Size (double.PositiveInfinity' double.PositiveInfinity);  	foreach (UIElement child in this.Children) {  		child.Measure (totalSize);  	}  	Func<UIElement' double> lengthSelector = null;  	Func<UIElement' double> offsetSelector = null;  	if (Orientation == Orientation.Horizontal) {  		lengthSelector = child => GetCorrectedDesiredSize (child).Width;  		offsetSelector = child => GetCorrectedDesiredSize (child).Height;  	} else {  		lengthSelector = child => GetCorrectedDesiredSize (child).Height;  		offsetSelector = child => GetCorrectedDesiredSize (child).Width;  	}  	IEnumerable<IGrouping<int' UIElement>> priorityGroups = from child in Children.Cast<UIElement> ()  	group child by GetPriority (child) into priorityGroup  	select priorityGroup;  	ActualMinimumDistanceBetweenChildren = (from priorityGroup in priorityGroups  	let orderedElements = (from element in priorityGroup  	orderby GetCenterCoordinate (element) ascending  	select element).ToList ()  	where orderedElements.Count >= 2  	select (EnumerableFunctions.Zip (orderedElements' orderedElements.Skip (1)' (leftElement' rightElement) => {  		double halfLeftLength = lengthSelector (leftElement) / 2;  		double leftCenterCoordinate = GetCenterCoordinate (leftElement);  		double halfRightLength = lengthSelector (rightElement) / 2;  		double rightCenterCoordinate = GetCenterCoordinate (rightElement);  		return (rightCenterCoordinate - halfRightLength) - (leftCenterCoordinate + halfLeftLength);  	})).Min ()).MinOrNullable () ?? MinimumDistanceBetweenChildren;  	IEnumerable<int> priorities = Children.Cast<UIElement> ().Select (child => GetPriority (child)).Distinct ().OrderBy (priority => priority).ToList ();  	PriorityOffsets = new Dictionary<int' double> ();  	foreach (int priority in priorities) {  		PriorityOffsets [priority] = 0.0;  	}  	IEnumerable<Tuple<int' int>> priorityPairs = EnumerableFunctions.Zip (priorities' priorities.Skip (1)' (previous' next) => new Tuple<int' int> (previous' next));  	foreach (Tuple<int' int> priorityPair in priorityPairs) {  		IEnumerable<UIElement> currentPriorityChildren = Children.Cast<UIElement> ().Where (child => GetPriority (child) == priorityPair.Item1).ToList ();  		IEnumerable<Range<double>> currentPriorityRanges = GetRanges (currentPriorityChildren' lengthSelector);  		IEnumerable<UIElement> nextPriorityChildren = Children.Cast<UIElement> ().Where (child => GetPriority (child) == priorityPair.Item2).ToList ();  		IEnumerable<Range<double>> nextPriorityRanges = GetRanges (nextPriorityChildren' lengthSelector);  		bool intersects = (from currentPriorityRange in currentPriorityRanges  		from nextPriorityRange in nextPriorityRanges  		select currentPriorityRange.IntersectsWith (nextPriorityRange)).Any (value => value);  		if (intersects) {  			double maxCurrentPriorityChildOffset = currentPriorityChildren.Select (child => offsetSelector (child)).MaxOrNullable () ?? 0.0;  			offset += maxCurrentPriorityChildOffset + OffsetPadding;  		}  		PriorityOffsets [priorityPair.Item2] = offset;  	}  	offset = (Children.Cast<UIElement> ().GroupBy (child => GetPriority (child)).Select (group => group.Select (child => PriorityOffsets [group.Key] + offsetSelector (child)).MaxOrNullable ())).Where (num => num.HasValue).Select (num => num.Value).MaxOrNullable () ?? 0.0;  }  
Magic Number,System.Windows.Controls.DataVisualization,OrientedPanel,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\OrientedPanel.cs,MeasureOverride,The following statement contains a magic number: ActualMinimumDistanceBetweenChildren = (from priorityGroup in priorityGroups  let orderedElements = (from element in priorityGroup  orderby GetCenterCoordinate (element) ascending  select element).ToList ()  where orderedElements.Count >= 2  select (EnumerableFunctions.Zip (orderedElements' orderedElements.Skip (1)' (leftElement' rightElement) => {  	double halfLeftLength = lengthSelector (leftElement) / 2;  	double leftCenterCoordinate = GetCenterCoordinate (leftElement);  	double halfRightLength = lengthSelector (rightElement) / 2;  	double rightCenterCoordinate = GetCenterCoordinate (rightElement);  	return (rightCenterCoordinate - halfRightLength) - (leftCenterCoordinate + halfLeftLength);  })).Min ()).MinOrNullable () ?? MinimumDistanceBetweenChildren;  
Magic Number,System.Windows.Controls.DataVisualization,OrientedPanel,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\OrientedPanel.cs,MeasureOverride,The following statement contains a magic number: ActualMinimumDistanceBetweenChildren = (from priorityGroup in priorityGroups  let orderedElements = (from element in priorityGroup  orderby GetCenterCoordinate (element) ascending  select element).ToList ()  where orderedElements.Count >= 2  select (EnumerableFunctions.Zip (orderedElements' orderedElements.Skip (1)' (leftElement' rightElement) => {  	double halfLeftLength = lengthSelector (leftElement) / 2;  	double leftCenterCoordinate = GetCenterCoordinate (leftElement);  	double halfRightLength = lengthSelector (rightElement) / 2;  	double rightCenterCoordinate = GetCenterCoordinate (rightElement);  	return (rightCenterCoordinate - halfRightLength) - (leftCenterCoordinate + halfLeftLength);  })).Min ()).MinOrNullable () ?? MinimumDistanceBetweenChildren;  
Magic Number,System.Windows.Controls.DataVisualization,OrientedPanel,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\OrientedPanel.cs,MeasureOverride,The following statement contains a magic number: ActualMinimumDistanceBetweenChildren = (from priorityGroup in priorityGroups  let orderedElements = (from element in priorityGroup  orderby GetCenterCoordinate (element) ascending  select element).ToList ()  where orderedElements.Count >= 2  select (EnumerableFunctions.Zip (orderedElements' orderedElements.Skip (1)' (leftElement' rightElement) => {  	double halfLeftLength = lengthSelector (leftElement) / 2;  	double leftCenterCoordinate = GetCenterCoordinate (leftElement);  	double halfRightLength = lengthSelector (rightElement) / 2;  	double rightCenterCoordinate = GetCenterCoordinate (rightElement);  	return (rightCenterCoordinate - halfRightLength) - (leftCenterCoordinate + halfLeftLength);  })).Min ()).MinOrNullable () ?? MinimumDistanceBetweenChildren;  
Magic Number,System.Windows.Controls.DataVisualization,OrientedPanel,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\OrientedPanel.cs,ArrangeOverride,The following statement contains a magic number: foreach (UIElement child in Children) {  	double x = 0.0;  	double y = 0.0;  	x = GetCenterCoordinate (child);  	y = PriorityOffsets [GetPriority (child)];  	double totalLength = 0.0;  	double totalOffsetLength = 0.0;  	double length = 0.0;  	double offsetLength = 0.0;  	Size childCorrectedDesiredSize = GetCorrectedDesiredSize (child);  	if (Orientation == Orientation.Horizontal) {  		totalLength = finalSize.Width;  		length = childCorrectedDesiredSize.Width;  		offsetLength = childCorrectedDesiredSize.Height;  		totalOffsetLength = finalSize.Height;  	} else if (Orientation == Orientation.Vertical) {  		totalLength = finalSize.Height;  		length = childCorrectedDesiredSize.Height;  		offsetLength = childCorrectedDesiredSize.Width;  		totalOffsetLength = finalSize.Width;  	}  	double halfLength = length / 2;  	double left = 0.0;  	double top = 0.0;  	if (!IsReversed) {  		left = x - halfLength;  	} else {  		left = totalLength - Math.Round (x + halfLength);  	}  	if (!IsInverted) {  		top = y;  	} else {  		top = totalOffsetLength - Math.Round (y + offsetLength);  	}  	left = Math.Min (Math.Round (left)' totalLength - 1);  	top = Math.Round (top);  	if (Orientation == Orientation.Horizontal) {  		child.Arrange (new Rect (left' top' length' offsetLength));  	} else if (Orientation == Orientation.Vertical) {  		child.Arrange (new Rect (top' left' offsetLength' length));  	}  }  
Magic Number,System.Windows.Controls.DataVisualization,ValueHelper,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\ValueHelper.cs,RemoveNoiseFromDoubleMath,The following statement contains a magic number: if (value == 0.0 || Math.Abs ((Math.Log10 (Math.Abs (value)))) < 27) {  	return (double)((decimal)value);  }  
Magic Number,System.Windows.Controls.DataVisualization,Range,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Range.cs,GetHashCode,The following statement contains a magic number: num = (-1521134295 * num) + EqualityComparer<T>.Default.GetHashCode (Minimum);  
Magic Number,System.Windows.Controls.DataVisualization,Range,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Range.cs,GetHashCode,The following statement contains a magic number: return ((-1521134295 * num) + EqualityComparer<T>.Default.GetHashCode (Maximum));  
Magic Number,System.Windows.Controls.DataVisualization.Charting,FrameworkElementExtensions,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\FrameworkElementExtensions.cs,GetActualMargin,The following statement contains a magic number: return length / 2.0;  
Magic Number,System.Windows.Controls.DataVisualization.Charting,FrameworkElementExtensions,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\FrameworkElementExtensions.cs,GetMargin,The following statement contains a magic number: return length / 2.0;  
Magic Number,System.Windows.Controls.DataVisualization.Charting,CategoryAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\CategoryAxis.cs,GetPlotAreaCoordinateRange,The following statement contains a magic number: if (Orientation == AxisOrientation.X || Orientation == AxisOrientation.Y) {  	double maximumLength = Math.Max (ActualLength - 1' 0);  	double lower = (index * maximumLength) / Categories.Count;  	double upper = ((index + 1) * maximumLength) / Categories.Count;  	if (Orientation == AxisOrientation.X) {  		return new Range<UnitValue> (new UnitValue (lower' Unit.Pixels)' new UnitValue (upper' Unit.Pixels));  	} else if (Orientation == AxisOrientation.Y) {  		return new Range<UnitValue> (new UnitValue (maximumLength - upper' Unit.Pixels)' new UnitValue (maximumLength - lower' Unit.Pixels));  	}  } else {  	double startingAngle = 270.0;  	double angleOffset = 360 / this.Categories.Count;  	double halfAngleOffset = angleOffset / 2.0;  	int categoryIndex = this.Categories.IndexOf (category);  	double angle = startingAngle + (categoryIndex * angleOffset);  	return new Range<UnitValue> (new UnitValue (angle - halfAngleOffset' Unit.Degrees)' new UnitValue (angle + halfAngleOffset' Unit.Degrees));  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,CategoryAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\CategoryAxis.cs,GetPlotAreaCoordinateRange,The following statement contains a magic number: if (Orientation == AxisOrientation.X || Orientation == AxisOrientation.Y) {  	double maximumLength = Math.Max (ActualLength - 1' 0);  	double lower = (index * maximumLength) / Categories.Count;  	double upper = ((index + 1) * maximumLength) / Categories.Count;  	if (Orientation == AxisOrientation.X) {  		return new Range<UnitValue> (new UnitValue (lower' Unit.Pixels)' new UnitValue (upper' Unit.Pixels));  	} else if (Orientation == AxisOrientation.Y) {  		return new Range<UnitValue> (new UnitValue (maximumLength - upper' Unit.Pixels)' new UnitValue (maximumLength - lower' Unit.Pixels));  	}  } else {  	double startingAngle = 270.0;  	double angleOffset = 360 / this.Categories.Count;  	double halfAngleOffset = angleOffset / 2.0;  	int categoryIndex = this.Categories.IndexOf (category);  	double angle = startingAngle + (categoryIndex * angleOffset);  	return new Range<UnitValue> (new UnitValue (angle - halfAngleOffset' Unit.Degrees)' new UnitValue (angle + halfAngleOffset' Unit.Degrees));  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,CategoryAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\CategoryAxis.cs,GetPlotAreaCoordinateRange,The following statement contains a magic number: if (Orientation == AxisOrientation.X || Orientation == AxisOrientation.Y) {  	double maximumLength = Math.Max (ActualLength - 1' 0);  	double lower = (index * maximumLength) / Categories.Count;  	double upper = ((index + 1) * maximumLength) / Categories.Count;  	if (Orientation == AxisOrientation.X) {  		return new Range<UnitValue> (new UnitValue (lower' Unit.Pixels)' new UnitValue (upper' Unit.Pixels));  	} else if (Orientation == AxisOrientation.Y) {  		return new Range<UnitValue> (new UnitValue (maximumLength - upper' Unit.Pixels)' new UnitValue (maximumLength - lower' Unit.Pixels));  	}  } else {  	double startingAngle = 270.0;  	double angleOffset = 360 / this.Categories.Count;  	double halfAngleOffset = angleOffset / 2.0;  	int categoryIndex = this.Categories.IndexOf (category);  	double angle = startingAngle + (categoryIndex * angleOffset);  	return new Range<UnitValue> (new UnitValue (angle - halfAngleOffset' Unit.Degrees)' new UnitValue (angle + halfAngleOffset' Unit.Degrees));  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,CategoryAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\CategoryAxis.cs,GetPlotAreaCoordinate,The following statement contains a magic number: if (range.HasData) {  	double minimum = range.Minimum.Value;  	double maximum = range.Maximum.Value;  	return new UnitValue (((maximum - minimum) / 2.0) + minimum' range.Minimum.Unit);  } else {  	return UnitValue.NaN ();  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,CategoryAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\CategoryAxis.cs,GetPlotAreaCoordinate,The following statement contains a magic number: return new UnitValue (((maximum - minimum) / 2.0) + minimum' range.Minimum.Unit);  
Magic Number,System.Windows.Controls.DataVisualization.Charting,CategoryAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\CategoryAxis.cs,RenderOriented,The following statement contains a magic number: try {  	OrientedPanel.Children.Clear ();  	this.GridLineCoordinatesToDisplay.Clear ();  	if (this.Categories.Count > 0) {  		double maximumLength = Math.Max (GetLength (availableSize) - 1' 0);  		Action<double> placeTickMarkAt = pos => {  			Line tickMark = _majorTickMarkPool.Next ();  			OrientedPanel.SetCenterCoordinate (tickMark' pos);  			OrientedPanel.SetPriority (tickMark' 0);  			this.GridLineCoordinatesToDisplay.Add (new UnitValue (pos' Unit.Pixels));  			OrientedPanel.Children.Add (tickMark);  		};  		int index = 0;  		int priority = 0;  		foreach (object category in Categories) {  			Control axisLabel = CreateAndPrepareAxisLabel (category);  			double lower = ((index * maximumLength) / Categories.Count) + 0.5;  			double upper = (((index + 1) * maximumLength) / Categories.Count) + 0.5;  			placeTickMarkAt (lower);  			OrientedPanel.SetCenterCoordinate (axisLabel' (lower + upper) / 2);  			OrientedPanel.SetPriority (axisLabel' priority + 1);  			OrientedPanel.Children.Add (axisLabel);  			index++;  			priority = (priority + 1) % 2;  		}  		placeTickMarkAt (maximumLength + 0.5);  	}  } finally {  	_labelPool.Done ();  	_majorTickMarkPool.Done ();  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,CategoryAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\CategoryAxis.cs,RenderOriented,The following statement contains a magic number: try {  	OrientedPanel.Children.Clear ();  	this.GridLineCoordinatesToDisplay.Clear ();  	if (this.Categories.Count > 0) {  		double maximumLength = Math.Max (GetLength (availableSize) - 1' 0);  		Action<double> placeTickMarkAt = pos => {  			Line tickMark = _majorTickMarkPool.Next ();  			OrientedPanel.SetCenterCoordinate (tickMark' pos);  			OrientedPanel.SetPriority (tickMark' 0);  			this.GridLineCoordinatesToDisplay.Add (new UnitValue (pos' Unit.Pixels));  			OrientedPanel.Children.Add (tickMark);  		};  		int index = 0;  		int priority = 0;  		foreach (object category in Categories) {  			Control axisLabel = CreateAndPrepareAxisLabel (category);  			double lower = ((index * maximumLength) / Categories.Count) + 0.5;  			double upper = (((index + 1) * maximumLength) / Categories.Count) + 0.5;  			placeTickMarkAt (lower);  			OrientedPanel.SetCenterCoordinate (axisLabel' (lower + upper) / 2);  			OrientedPanel.SetPriority (axisLabel' priority + 1);  			OrientedPanel.Children.Add (axisLabel);  			index++;  			priority = (priority + 1) % 2;  		}  		placeTickMarkAt (maximumLength + 0.5);  	}  } finally {  	_labelPool.Done ();  	_majorTickMarkPool.Done ();  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,CategoryAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\CategoryAxis.cs,RenderOriented,The following statement contains a magic number: try {  	OrientedPanel.Children.Clear ();  	this.GridLineCoordinatesToDisplay.Clear ();  	if (this.Categories.Count > 0) {  		double maximumLength = Math.Max (GetLength (availableSize) - 1' 0);  		Action<double> placeTickMarkAt = pos => {  			Line tickMark = _majorTickMarkPool.Next ();  			OrientedPanel.SetCenterCoordinate (tickMark' pos);  			OrientedPanel.SetPriority (tickMark' 0);  			this.GridLineCoordinatesToDisplay.Add (new UnitValue (pos' Unit.Pixels));  			OrientedPanel.Children.Add (tickMark);  		};  		int index = 0;  		int priority = 0;  		foreach (object category in Categories) {  			Control axisLabel = CreateAndPrepareAxisLabel (category);  			double lower = ((index * maximumLength) / Categories.Count) + 0.5;  			double upper = (((index + 1) * maximumLength) / Categories.Count) + 0.5;  			placeTickMarkAt (lower);  			OrientedPanel.SetCenterCoordinate (axisLabel' (lower + upper) / 2);  			OrientedPanel.SetPriority (axisLabel' priority + 1);  			OrientedPanel.Children.Add (axisLabel);  			index++;  			priority = (priority + 1) % 2;  		}  		placeTickMarkAt (maximumLength + 0.5);  	}  } finally {  	_labelPool.Done ();  	_majorTickMarkPool.Done ();  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,CategoryAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\CategoryAxis.cs,RenderOriented,The following statement contains a magic number: try {  	OrientedPanel.Children.Clear ();  	this.GridLineCoordinatesToDisplay.Clear ();  	if (this.Categories.Count > 0) {  		double maximumLength = Math.Max (GetLength (availableSize) - 1' 0);  		Action<double> placeTickMarkAt = pos => {  			Line tickMark = _majorTickMarkPool.Next ();  			OrientedPanel.SetCenterCoordinate (tickMark' pos);  			OrientedPanel.SetPriority (tickMark' 0);  			this.GridLineCoordinatesToDisplay.Add (new UnitValue (pos' Unit.Pixels));  			OrientedPanel.Children.Add (tickMark);  		};  		int index = 0;  		int priority = 0;  		foreach (object category in Categories) {  			Control axisLabel = CreateAndPrepareAxisLabel (category);  			double lower = ((index * maximumLength) / Categories.Count) + 0.5;  			double upper = (((index + 1) * maximumLength) / Categories.Count) + 0.5;  			placeTickMarkAt (lower);  			OrientedPanel.SetCenterCoordinate (axisLabel' (lower + upper) / 2);  			OrientedPanel.SetPriority (axisLabel' priority + 1);  			OrientedPanel.Children.Add (axisLabel);  			index++;  			priority = (priority + 1) % 2;  		}  		placeTickMarkAt (maximumLength + 0.5);  	}  } finally {  	_labelPool.Done ();  	_majorTickMarkPool.Done ();  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,CategoryAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\CategoryAxis.cs,RenderOriented,The following statement contains a magic number: try {  	OrientedPanel.Children.Clear ();  	this.GridLineCoordinatesToDisplay.Clear ();  	if (this.Categories.Count > 0) {  		double maximumLength = Math.Max (GetLength (availableSize) - 1' 0);  		Action<double> placeTickMarkAt = pos => {  			Line tickMark = _majorTickMarkPool.Next ();  			OrientedPanel.SetCenterCoordinate (tickMark' pos);  			OrientedPanel.SetPriority (tickMark' 0);  			this.GridLineCoordinatesToDisplay.Add (new UnitValue (pos' Unit.Pixels));  			OrientedPanel.Children.Add (tickMark);  		};  		int index = 0;  		int priority = 0;  		foreach (object category in Categories) {  			Control axisLabel = CreateAndPrepareAxisLabel (category);  			double lower = ((index * maximumLength) / Categories.Count) + 0.5;  			double upper = (((index + 1) * maximumLength) / Categories.Count) + 0.5;  			placeTickMarkAt (lower);  			OrientedPanel.SetCenterCoordinate (axisLabel' (lower + upper) / 2);  			OrientedPanel.SetPriority (axisLabel' priority + 1);  			OrientedPanel.Children.Add (axisLabel);  			index++;  			priority = (priority + 1) % 2;  		}  		placeTickMarkAt (maximumLength + 0.5);  	}  } finally {  	_labelPool.Done ();  	_majorTickMarkPool.Done ();  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,CategoryAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\CategoryAxis.cs,RenderOriented,The following statement contains a magic number: if (this.Categories.Count > 0) {  	double maximumLength = Math.Max (GetLength (availableSize) - 1' 0);  	Action<double> placeTickMarkAt = pos => {  		Line tickMark = _majorTickMarkPool.Next ();  		OrientedPanel.SetCenterCoordinate (tickMark' pos);  		OrientedPanel.SetPriority (tickMark' 0);  		this.GridLineCoordinatesToDisplay.Add (new UnitValue (pos' Unit.Pixels));  		OrientedPanel.Children.Add (tickMark);  	};  	int index = 0;  	int priority = 0;  	foreach (object category in Categories) {  		Control axisLabel = CreateAndPrepareAxisLabel (category);  		double lower = ((index * maximumLength) / Categories.Count) + 0.5;  		double upper = (((index + 1) * maximumLength) / Categories.Count) + 0.5;  		placeTickMarkAt (lower);  		OrientedPanel.SetCenterCoordinate (axisLabel' (lower + upper) / 2);  		OrientedPanel.SetPriority (axisLabel' priority + 1);  		OrientedPanel.Children.Add (axisLabel);  		index++;  		priority = (priority + 1) % 2;  	}  	placeTickMarkAt (maximumLength + 0.5);  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,CategoryAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\CategoryAxis.cs,RenderOriented,The following statement contains a magic number: if (this.Categories.Count > 0) {  	double maximumLength = Math.Max (GetLength (availableSize) - 1' 0);  	Action<double> placeTickMarkAt = pos => {  		Line tickMark = _majorTickMarkPool.Next ();  		OrientedPanel.SetCenterCoordinate (tickMark' pos);  		OrientedPanel.SetPriority (tickMark' 0);  		this.GridLineCoordinatesToDisplay.Add (new UnitValue (pos' Unit.Pixels));  		OrientedPanel.Children.Add (tickMark);  	};  	int index = 0;  	int priority = 0;  	foreach (object category in Categories) {  		Control axisLabel = CreateAndPrepareAxisLabel (category);  		double lower = ((index * maximumLength) / Categories.Count) + 0.5;  		double upper = (((index + 1) * maximumLength) / Categories.Count) + 0.5;  		placeTickMarkAt (lower);  		OrientedPanel.SetCenterCoordinate (axisLabel' (lower + upper) / 2);  		OrientedPanel.SetPriority (axisLabel' priority + 1);  		OrientedPanel.Children.Add (axisLabel);  		index++;  		priority = (priority + 1) % 2;  	}  	placeTickMarkAt (maximumLength + 0.5);  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,CategoryAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\CategoryAxis.cs,RenderOriented,The following statement contains a magic number: if (this.Categories.Count > 0) {  	double maximumLength = Math.Max (GetLength (availableSize) - 1' 0);  	Action<double> placeTickMarkAt = pos => {  		Line tickMark = _majorTickMarkPool.Next ();  		OrientedPanel.SetCenterCoordinate (tickMark' pos);  		OrientedPanel.SetPriority (tickMark' 0);  		this.GridLineCoordinatesToDisplay.Add (new UnitValue (pos' Unit.Pixels));  		OrientedPanel.Children.Add (tickMark);  	};  	int index = 0;  	int priority = 0;  	foreach (object category in Categories) {  		Control axisLabel = CreateAndPrepareAxisLabel (category);  		double lower = ((index * maximumLength) / Categories.Count) + 0.5;  		double upper = (((index + 1) * maximumLength) / Categories.Count) + 0.5;  		placeTickMarkAt (lower);  		OrientedPanel.SetCenterCoordinate (axisLabel' (lower + upper) / 2);  		OrientedPanel.SetPriority (axisLabel' priority + 1);  		OrientedPanel.Children.Add (axisLabel);  		index++;  		priority = (priority + 1) % 2;  	}  	placeTickMarkAt (maximumLength + 0.5);  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,CategoryAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\CategoryAxis.cs,RenderOriented,The following statement contains a magic number: if (this.Categories.Count > 0) {  	double maximumLength = Math.Max (GetLength (availableSize) - 1' 0);  	Action<double> placeTickMarkAt = pos => {  		Line tickMark = _majorTickMarkPool.Next ();  		OrientedPanel.SetCenterCoordinate (tickMark' pos);  		OrientedPanel.SetPriority (tickMark' 0);  		this.GridLineCoordinatesToDisplay.Add (new UnitValue (pos' Unit.Pixels));  		OrientedPanel.Children.Add (tickMark);  	};  	int index = 0;  	int priority = 0;  	foreach (object category in Categories) {  		Control axisLabel = CreateAndPrepareAxisLabel (category);  		double lower = ((index * maximumLength) / Categories.Count) + 0.5;  		double upper = (((index + 1) * maximumLength) / Categories.Count) + 0.5;  		placeTickMarkAt (lower);  		OrientedPanel.SetCenterCoordinate (axisLabel' (lower + upper) / 2);  		OrientedPanel.SetPriority (axisLabel' priority + 1);  		OrientedPanel.Children.Add (axisLabel);  		index++;  		priority = (priority + 1) % 2;  	}  	placeTickMarkAt (maximumLength + 0.5);  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,CategoryAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\CategoryAxis.cs,RenderOriented,The following statement contains a magic number: if (this.Categories.Count > 0) {  	double maximumLength = Math.Max (GetLength (availableSize) - 1' 0);  	Action<double> placeTickMarkAt = pos => {  		Line tickMark = _majorTickMarkPool.Next ();  		OrientedPanel.SetCenterCoordinate (tickMark' pos);  		OrientedPanel.SetPriority (tickMark' 0);  		this.GridLineCoordinatesToDisplay.Add (new UnitValue (pos' Unit.Pixels));  		OrientedPanel.Children.Add (tickMark);  	};  	int index = 0;  	int priority = 0;  	foreach (object category in Categories) {  		Control axisLabel = CreateAndPrepareAxisLabel (category);  		double lower = ((index * maximumLength) / Categories.Count) + 0.5;  		double upper = (((index + 1) * maximumLength) / Categories.Count) + 0.5;  		placeTickMarkAt (lower);  		OrientedPanel.SetCenterCoordinate (axisLabel' (lower + upper) / 2);  		OrientedPanel.SetPriority (axisLabel' priority + 1);  		OrientedPanel.Children.Add (axisLabel);  		index++;  		priority = (priority + 1) % 2;  	}  	placeTickMarkAt (maximumLength + 0.5);  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,CategoryAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\CategoryAxis.cs,RenderOriented,The following statement contains a magic number: foreach (object category in Categories) {  	Control axisLabel = CreateAndPrepareAxisLabel (category);  	double lower = ((index * maximumLength) / Categories.Count) + 0.5;  	double upper = (((index + 1) * maximumLength) / Categories.Count) + 0.5;  	placeTickMarkAt (lower);  	OrientedPanel.SetCenterCoordinate (axisLabel' (lower + upper) / 2);  	OrientedPanel.SetPriority (axisLabel' priority + 1);  	OrientedPanel.Children.Add (axisLabel);  	index++;  	priority = (priority + 1) % 2;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,CategoryAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\CategoryAxis.cs,RenderOriented,The following statement contains a magic number: foreach (object category in Categories) {  	Control axisLabel = CreateAndPrepareAxisLabel (category);  	double lower = ((index * maximumLength) / Categories.Count) + 0.5;  	double upper = (((index + 1) * maximumLength) / Categories.Count) + 0.5;  	placeTickMarkAt (lower);  	OrientedPanel.SetCenterCoordinate (axisLabel' (lower + upper) / 2);  	OrientedPanel.SetPriority (axisLabel' priority + 1);  	OrientedPanel.Children.Add (axisLabel);  	index++;  	priority = (priority + 1) % 2;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,CategoryAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\CategoryAxis.cs,RenderOriented,The following statement contains a magic number: foreach (object category in Categories) {  	Control axisLabel = CreateAndPrepareAxisLabel (category);  	double lower = ((index * maximumLength) / Categories.Count) + 0.5;  	double upper = (((index + 1) * maximumLength) / Categories.Count) + 0.5;  	placeTickMarkAt (lower);  	OrientedPanel.SetCenterCoordinate (axisLabel' (lower + upper) / 2);  	OrientedPanel.SetPriority (axisLabel' priority + 1);  	OrientedPanel.Children.Add (axisLabel);  	index++;  	priority = (priority + 1) % 2;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,CategoryAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\CategoryAxis.cs,RenderOriented,The following statement contains a magic number: foreach (object category in Categories) {  	Control axisLabel = CreateAndPrepareAxisLabel (category);  	double lower = ((index * maximumLength) / Categories.Count) + 0.5;  	double upper = (((index + 1) * maximumLength) / Categories.Count) + 0.5;  	placeTickMarkAt (lower);  	OrientedPanel.SetCenterCoordinate (axisLabel' (lower + upper) / 2);  	OrientedPanel.SetPriority (axisLabel' priority + 1);  	OrientedPanel.Children.Add (axisLabel);  	index++;  	priority = (priority + 1) % 2;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,CategoryAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\CategoryAxis.cs,RenderOriented,The following statement contains a magic number: OrientedPanel.SetCenterCoordinate (axisLabel' (lower + upper) / 2);  
Magic Number,System.Windows.Controls.DataVisualization.Charting,CategoryAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\CategoryAxis.cs,RenderOriented,The following statement contains a magic number: priority = (priority + 1) % 2;  
Magic Number,System.Windows.Controls.DataVisualization.Charting,CategoryAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\CategoryAxis.cs,RenderOriented,The following statement contains a magic number: placeTickMarkAt (maximumLength + 0.5);  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,IncrementDateTime,The following statement contains a magic number: if (intervalType == DateTimeIntervalType.Days) {  	span = TimeSpan.FromDays (interval);  } else if (intervalType == DateTimeIntervalType.Hours) {  	span = TimeSpan.FromHours (interval);  } else if (intervalType == DateTimeIntervalType.Milliseconds) {  	span = TimeSpan.FromMilliseconds (interval);  } else if (intervalType == DateTimeIntervalType.Seconds) {  	span = TimeSpan.FromSeconds (interval);  } else if (intervalType == DateTimeIntervalType.Minutes) {  	span = TimeSpan.FromMinutes (interval);  } else if (intervalType == DateTimeIntervalType.Weeks) {  	span = TimeSpan.FromDays (7.0 * interval);  } else if (intervalType == DateTimeIntervalType.Months) {  	// Special case handling when current date point  	// to the last day of the month  	bool lastMonthDay = false;  	if (date.Day == DateTime.DaysInMonth (date.Year' date.Month)) {  		lastMonthDay = true;  	}  	// Add specified amount of months  	date = date.AddMonths ((int)Math.Floor (interval));  	span = TimeSpan.FromDays (30.0 * (interval - Math.Floor (interval)));  	// Check if last month of the day was used  	if (lastMonthDay && span.Ticks == 0) {  		// Make sure the last day of the month is selected  		int daysInMobth = DateTime.DaysInMonth (date.Year' date.Month);  		date = date.AddDays (daysInMobth - date.Day);  	}  } else if (intervalType == DateTimeIntervalType.Years) {  	date = date.AddYears ((int)Math.Floor (interval));  	span = TimeSpan.FromDays (365.0 * (interval - Math.Floor (interval)));  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,IncrementDateTime,The following statement contains a magic number: if (intervalType == DateTimeIntervalType.Days) {  	span = TimeSpan.FromDays (interval);  } else if (intervalType == DateTimeIntervalType.Hours) {  	span = TimeSpan.FromHours (interval);  } else if (intervalType == DateTimeIntervalType.Milliseconds) {  	span = TimeSpan.FromMilliseconds (interval);  } else if (intervalType == DateTimeIntervalType.Seconds) {  	span = TimeSpan.FromSeconds (interval);  } else if (intervalType == DateTimeIntervalType.Minutes) {  	span = TimeSpan.FromMinutes (interval);  } else if (intervalType == DateTimeIntervalType.Weeks) {  	span = TimeSpan.FromDays (7.0 * interval);  } else if (intervalType == DateTimeIntervalType.Months) {  	// Special case handling when current date point  	// to the last day of the month  	bool lastMonthDay = false;  	if (date.Day == DateTime.DaysInMonth (date.Year' date.Month)) {  		lastMonthDay = true;  	}  	// Add specified amount of months  	date = date.AddMonths ((int)Math.Floor (interval));  	span = TimeSpan.FromDays (30.0 * (interval - Math.Floor (interval)));  	// Check if last month of the day was used  	if (lastMonthDay && span.Ticks == 0) {  		// Make sure the last day of the month is selected  		int daysInMobth = DateTime.DaysInMonth (date.Year' date.Month);  		date = date.AddDays (daysInMobth - date.Day);  	}  } else if (intervalType == DateTimeIntervalType.Years) {  	date = date.AddYears ((int)Math.Floor (interval));  	span = TimeSpan.FromDays (365.0 * (interval - Math.Floor (interval)));  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,IncrementDateTime,The following statement contains a magic number: if (intervalType == DateTimeIntervalType.Days) {  	span = TimeSpan.FromDays (interval);  } else if (intervalType == DateTimeIntervalType.Hours) {  	span = TimeSpan.FromHours (interval);  } else if (intervalType == DateTimeIntervalType.Milliseconds) {  	span = TimeSpan.FromMilliseconds (interval);  } else if (intervalType == DateTimeIntervalType.Seconds) {  	span = TimeSpan.FromSeconds (interval);  } else if (intervalType == DateTimeIntervalType.Minutes) {  	span = TimeSpan.FromMinutes (interval);  } else if (intervalType == DateTimeIntervalType.Weeks) {  	span = TimeSpan.FromDays (7.0 * interval);  } else if (intervalType == DateTimeIntervalType.Months) {  	// Special case handling when current date point  	// to the last day of the month  	bool lastMonthDay = false;  	if (date.Day == DateTime.DaysInMonth (date.Year' date.Month)) {  		lastMonthDay = true;  	}  	// Add specified amount of months  	date = date.AddMonths ((int)Math.Floor (interval));  	span = TimeSpan.FromDays (30.0 * (interval - Math.Floor (interval)));  	// Check if last month of the day was used  	if (lastMonthDay && span.Ticks == 0) {  		// Make sure the last day of the month is selected  		int daysInMobth = DateTime.DaysInMonth (date.Year' date.Month);  		date = date.AddDays (daysInMobth - date.Day);  	}  } else if (intervalType == DateTimeIntervalType.Years) {  	date = date.AddYears ((int)Math.Floor (interval));  	span = TimeSpan.FromDays (365.0 * (interval - Math.Floor (interval)));  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,IncrementDateTime,The following statement contains a magic number: if (intervalType == DateTimeIntervalType.Hours) {  	span = TimeSpan.FromHours (interval);  } else if (intervalType == DateTimeIntervalType.Milliseconds) {  	span = TimeSpan.FromMilliseconds (interval);  } else if (intervalType == DateTimeIntervalType.Seconds) {  	span = TimeSpan.FromSeconds (interval);  } else if (intervalType == DateTimeIntervalType.Minutes) {  	span = TimeSpan.FromMinutes (interval);  } else if (intervalType == DateTimeIntervalType.Weeks) {  	span = TimeSpan.FromDays (7.0 * interval);  } else if (intervalType == DateTimeIntervalType.Months) {  	// Special case handling when current date point  	// to the last day of the month  	bool lastMonthDay = false;  	if (date.Day == DateTime.DaysInMonth (date.Year' date.Month)) {  		lastMonthDay = true;  	}  	// Add specified amount of months  	date = date.AddMonths ((int)Math.Floor (interval));  	span = TimeSpan.FromDays (30.0 * (interval - Math.Floor (interval)));  	// Check if last month of the day was used  	if (lastMonthDay && span.Ticks == 0) {  		// Make sure the last day of the month is selected  		int daysInMobth = DateTime.DaysInMonth (date.Year' date.Month);  		date = date.AddDays (daysInMobth - date.Day);  	}  } else if (intervalType == DateTimeIntervalType.Years) {  	date = date.AddYears ((int)Math.Floor (interval));  	span = TimeSpan.FromDays (365.0 * (interval - Math.Floor (interval)));  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,IncrementDateTime,The following statement contains a magic number: if (intervalType == DateTimeIntervalType.Hours) {  	span = TimeSpan.FromHours (interval);  } else if (intervalType == DateTimeIntervalType.Milliseconds) {  	span = TimeSpan.FromMilliseconds (interval);  } else if (intervalType == DateTimeIntervalType.Seconds) {  	span = TimeSpan.FromSeconds (interval);  } else if (intervalType == DateTimeIntervalType.Minutes) {  	span = TimeSpan.FromMinutes (interval);  } else if (intervalType == DateTimeIntervalType.Weeks) {  	span = TimeSpan.FromDays (7.0 * interval);  } else if (intervalType == DateTimeIntervalType.Months) {  	// Special case handling when current date point  	// to the last day of the month  	bool lastMonthDay = false;  	if (date.Day == DateTime.DaysInMonth (date.Year' date.Month)) {  		lastMonthDay = true;  	}  	// Add specified amount of months  	date = date.AddMonths ((int)Math.Floor (interval));  	span = TimeSpan.FromDays (30.0 * (interval - Math.Floor (interval)));  	// Check if last month of the day was used  	if (lastMonthDay && span.Ticks == 0) {  		// Make sure the last day of the month is selected  		int daysInMobth = DateTime.DaysInMonth (date.Year' date.Month);  		date = date.AddDays (daysInMobth - date.Day);  	}  } else if (intervalType == DateTimeIntervalType.Years) {  	date = date.AddYears ((int)Math.Floor (interval));  	span = TimeSpan.FromDays (365.0 * (interval - Math.Floor (interval)));  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,IncrementDateTime,The following statement contains a magic number: if (intervalType == DateTimeIntervalType.Hours) {  	span = TimeSpan.FromHours (interval);  } else if (intervalType == DateTimeIntervalType.Milliseconds) {  	span = TimeSpan.FromMilliseconds (interval);  } else if (intervalType == DateTimeIntervalType.Seconds) {  	span = TimeSpan.FromSeconds (interval);  } else if (intervalType == DateTimeIntervalType.Minutes) {  	span = TimeSpan.FromMinutes (interval);  } else if (intervalType == DateTimeIntervalType.Weeks) {  	span = TimeSpan.FromDays (7.0 * interval);  } else if (intervalType == DateTimeIntervalType.Months) {  	// Special case handling when current date point  	// to the last day of the month  	bool lastMonthDay = false;  	if (date.Day == DateTime.DaysInMonth (date.Year' date.Month)) {  		lastMonthDay = true;  	}  	// Add specified amount of months  	date = date.AddMonths ((int)Math.Floor (interval));  	span = TimeSpan.FromDays (30.0 * (interval - Math.Floor (interval)));  	// Check if last month of the day was used  	if (lastMonthDay && span.Ticks == 0) {  		// Make sure the last day of the month is selected  		int daysInMobth = DateTime.DaysInMonth (date.Year' date.Month);  		date = date.AddDays (daysInMobth - date.Day);  	}  } else if (intervalType == DateTimeIntervalType.Years) {  	date = date.AddYears ((int)Math.Floor (interval));  	span = TimeSpan.FromDays (365.0 * (interval - Math.Floor (interval)));  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,IncrementDateTime,The following statement contains a magic number: if (intervalType == DateTimeIntervalType.Milliseconds) {  	span = TimeSpan.FromMilliseconds (interval);  } else if (intervalType == DateTimeIntervalType.Seconds) {  	span = TimeSpan.FromSeconds (interval);  } else if (intervalType == DateTimeIntervalType.Minutes) {  	span = TimeSpan.FromMinutes (interval);  } else if (intervalType == DateTimeIntervalType.Weeks) {  	span = TimeSpan.FromDays (7.0 * interval);  } else if (intervalType == DateTimeIntervalType.Months) {  	// Special case handling when current date point  	// to the last day of the month  	bool lastMonthDay = false;  	if (date.Day == DateTime.DaysInMonth (date.Year' date.Month)) {  		lastMonthDay = true;  	}  	// Add specified amount of months  	date = date.AddMonths ((int)Math.Floor (interval));  	span = TimeSpan.FromDays (30.0 * (interval - Math.Floor (interval)));  	// Check if last month of the day was used  	if (lastMonthDay && span.Ticks == 0) {  		// Make sure the last day of the month is selected  		int daysInMobth = DateTime.DaysInMonth (date.Year' date.Month);  		date = date.AddDays (daysInMobth - date.Day);  	}  } else if (intervalType == DateTimeIntervalType.Years) {  	date = date.AddYears ((int)Math.Floor (interval));  	span = TimeSpan.FromDays (365.0 * (interval - Math.Floor (interval)));  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,IncrementDateTime,The following statement contains a magic number: if (intervalType == DateTimeIntervalType.Milliseconds) {  	span = TimeSpan.FromMilliseconds (interval);  } else if (intervalType == DateTimeIntervalType.Seconds) {  	span = TimeSpan.FromSeconds (interval);  } else if (intervalType == DateTimeIntervalType.Minutes) {  	span = TimeSpan.FromMinutes (interval);  } else if (intervalType == DateTimeIntervalType.Weeks) {  	span = TimeSpan.FromDays (7.0 * interval);  } else if (intervalType == DateTimeIntervalType.Months) {  	// Special case handling when current date point  	// to the last day of the month  	bool lastMonthDay = false;  	if (date.Day == DateTime.DaysInMonth (date.Year' date.Month)) {  		lastMonthDay = true;  	}  	// Add specified amount of months  	date = date.AddMonths ((int)Math.Floor (interval));  	span = TimeSpan.FromDays (30.0 * (interval - Math.Floor (interval)));  	// Check if last month of the day was used  	if (lastMonthDay && span.Ticks == 0) {  		// Make sure the last day of the month is selected  		int daysInMobth = DateTime.DaysInMonth (date.Year' date.Month);  		date = date.AddDays (daysInMobth - date.Day);  	}  } else if (intervalType == DateTimeIntervalType.Years) {  	date = date.AddYears ((int)Math.Floor (interval));  	span = TimeSpan.FromDays (365.0 * (interval - Math.Floor (interval)));  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,IncrementDateTime,The following statement contains a magic number: if (intervalType == DateTimeIntervalType.Milliseconds) {  	span = TimeSpan.FromMilliseconds (interval);  } else if (intervalType == DateTimeIntervalType.Seconds) {  	span = TimeSpan.FromSeconds (interval);  } else if (intervalType == DateTimeIntervalType.Minutes) {  	span = TimeSpan.FromMinutes (interval);  } else if (intervalType == DateTimeIntervalType.Weeks) {  	span = TimeSpan.FromDays (7.0 * interval);  } else if (intervalType == DateTimeIntervalType.Months) {  	// Special case handling when current date point  	// to the last day of the month  	bool lastMonthDay = false;  	if (date.Day == DateTime.DaysInMonth (date.Year' date.Month)) {  		lastMonthDay = true;  	}  	// Add specified amount of months  	date = date.AddMonths ((int)Math.Floor (interval));  	span = TimeSpan.FromDays (30.0 * (interval - Math.Floor (interval)));  	// Check if last month of the day was used  	if (lastMonthDay && span.Ticks == 0) {  		// Make sure the last day of the month is selected  		int daysInMobth = DateTime.DaysInMonth (date.Year' date.Month);  		date = date.AddDays (daysInMobth - date.Day);  	}  } else if (intervalType == DateTimeIntervalType.Years) {  	date = date.AddYears ((int)Math.Floor (interval));  	span = TimeSpan.FromDays (365.0 * (interval - Math.Floor (interval)));  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,IncrementDateTime,The following statement contains a magic number: if (intervalType == DateTimeIntervalType.Seconds) {  	span = TimeSpan.FromSeconds (interval);  } else if (intervalType == DateTimeIntervalType.Minutes) {  	span = TimeSpan.FromMinutes (interval);  } else if (intervalType == DateTimeIntervalType.Weeks) {  	span = TimeSpan.FromDays (7.0 * interval);  } else if (intervalType == DateTimeIntervalType.Months) {  	// Special case handling when current date point  	// to the last day of the month  	bool lastMonthDay = false;  	if (date.Day == DateTime.DaysInMonth (date.Year' date.Month)) {  		lastMonthDay = true;  	}  	// Add specified amount of months  	date = date.AddMonths ((int)Math.Floor (interval));  	span = TimeSpan.FromDays (30.0 * (interval - Math.Floor (interval)));  	// Check if last month of the day was used  	if (lastMonthDay && span.Ticks == 0) {  		// Make sure the last day of the month is selected  		int daysInMobth = DateTime.DaysInMonth (date.Year' date.Month);  		date = date.AddDays (daysInMobth - date.Day);  	}  } else if (intervalType == DateTimeIntervalType.Years) {  	date = date.AddYears ((int)Math.Floor (interval));  	span = TimeSpan.FromDays (365.0 * (interval - Math.Floor (interval)));  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,IncrementDateTime,The following statement contains a magic number: if (intervalType == DateTimeIntervalType.Seconds) {  	span = TimeSpan.FromSeconds (interval);  } else if (intervalType == DateTimeIntervalType.Minutes) {  	span = TimeSpan.FromMinutes (interval);  } else if (intervalType == DateTimeIntervalType.Weeks) {  	span = TimeSpan.FromDays (7.0 * interval);  } else if (intervalType == DateTimeIntervalType.Months) {  	// Special case handling when current date point  	// to the last day of the month  	bool lastMonthDay = false;  	if (date.Day == DateTime.DaysInMonth (date.Year' date.Month)) {  		lastMonthDay = true;  	}  	// Add specified amount of months  	date = date.AddMonths ((int)Math.Floor (interval));  	span = TimeSpan.FromDays (30.0 * (interval - Math.Floor (interval)));  	// Check if last month of the day was used  	if (lastMonthDay && span.Ticks == 0) {  		// Make sure the last day of the month is selected  		int daysInMobth = DateTime.DaysInMonth (date.Year' date.Month);  		date = date.AddDays (daysInMobth - date.Day);  	}  } else if (intervalType == DateTimeIntervalType.Years) {  	date = date.AddYears ((int)Math.Floor (interval));  	span = TimeSpan.FromDays (365.0 * (interval - Math.Floor (interval)));  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,IncrementDateTime,The following statement contains a magic number: if (intervalType == DateTimeIntervalType.Seconds) {  	span = TimeSpan.FromSeconds (interval);  } else if (intervalType == DateTimeIntervalType.Minutes) {  	span = TimeSpan.FromMinutes (interval);  } else if (intervalType == DateTimeIntervalType.Weeks) {  	span = TimeSpan.FromDays (7.0 * interval);  } else if (intervalType == DateTimeIntervalType.Months) {  	// Special case handling when current date point  	// to the last day of the month  	bool lastMonthDay = false;  	if (date.Day == DateTime.DaysInMonth (date.Year' date.Month)) {  		lastMonthDay = true;  	}  	// Add specified amount of months  	date = date.AddMonths ((int)Math.Floor (interval));  	span = TimeSpan.FromDays (30.0 * (interval - Math.Floor (interval)));  	// Check if last month of the day was used  	if (lastMonthDay && span.Ticks == 0) {  		// Make sure the last day of the month is selected  		int daysInMobth = DateTime.DaysInMonth (date.Year' date.Month);  		date = date.AddDays (daysInMobth - date.Day);  	}  } else if (intervalType == DateTimeIntervalType.Years) {  	date = date.AddYears ((int)Math.Floor (interval));  	span = TimeSpan.FromDays (365.0 * (interval - Math.Floor (interval)));  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,IncrementDateTime,The following statement contains a magic number: if (intervalType == DateTimeIntervalType.Minutes) {  	span = TimeSpan.FromMinutes (interval);  } else if (intervalType == DateTimeIntervalType.Weeks) {  	span = TimeSpan.FromDays (7.0 * interval);  } else if (intervalType == DateTimeIntervalType.Months) {  	// Special case handling when current date point  	// to the last day of the month  	bool lastMonthDay = false;  	if (date.Day == DateTime.DaysInMonth (date.Year' date.Month)) {  		lastMonthDay = true;  	}  	// Add specified amount of months  	date = date.AddMonths ((int)Math.Floor (interval));  	span = TimeSpan.FromDays (30.0 * (interval - Math.Floor (interval)));  	// Check if last month of the day was used  	if (lastMonthDay && span.Ticks == 0) {  		// Make sure the last day of the month is selected  		int daysInMobth = DateTime.DaysInMonth (date.Year' date.Month);  		date = date.AddDays (daysInMobth - date.Day);  	}  } else if (intervalType == DateTimeIntervalType.Years) {  	date = date.AddYears ((int)Math.Floor (interval));  	span = TimeSpan.FromDays (365.0 * (interval - Math.Floor (interval)));  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,IncrementDateTime,The following statement contains a magic number: if (intervalType == DateTimeIntervalType.Minutes) {  	span = TimeSpan.FromMinutes (interval);  } else if (intervalType == DateTimeIntervalType.Weeks) {  	span = TimeSpan.FromDays (7.0 * interval);  } else if (intervalType == DateTimeIntervalType.Months) {  	// Special case handling when current date point  	// to the last day of the month  	bool lastMonthDay = false;  	if (date.Day == DateTime.DaysInMonth (date.Year' date.Month)) {  		lastMonthDay = true;  	}  	// Add specified amount of months  	date = date.AddMonths ((int)Math.Floor (interval));  	span = TimeSpan.FromDays (30.0 * (interval - Math.Floor (interval)));  	// Check if last month of the day was used  	if (lastMonthDay && span.Ticks == 0) {  		// Make sure the last day of the month is selected  		int daysInMobth = DateTime.DaysInMonth (date.Year' date.Month);  		date = date.AddDays (daysInMobth - date.Day);  	}  } else if (intervalType == DateTimeIntervalType.Years) {  	date = date.AddYears ((int)Math.Floor (interval));  	span = TimeSpan.FromDays (365.0 * (interval - Math.Floor (interval)));  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,IncrementDateTime,The following statement contains a magic number: if (intervalType == DateTimeIntervalType.Minutes) {  	span = TimeSpan.FromMinutes (interval);  } else if (intervalType == DateTimeIntervalType.Weeks) {  	span = TimeSpan.FromDays (7.0 * interval);  } else if (intervalType == DateTimeIntervalType.Months) {  	// Special case handling when current date point  	// to the last day of the month  	bool lastMonthDay = false;  	if (date.Day == DateTime.DaysInMonth (date.Year' date.Month)) {  		lastMonthDay = true;  	}  	// Add specified amount of months  	date = date.AddMonths ((int)Math.Floor (interval));  	span = TimeSpan.FromDays (30.0 * (interval - Math.Floor (interval)));  	// Check if last month of the day was used  	if (lastMonthDay && span.Ticks == 0) {  		// Make sure the last day of the month is selected  		int daysInMobth = DateTime.DaysInMonth (date.Year' date.Month);  		date = date.AddDays (daysInMobth - date.Day);  	}  } else if (intervalType == DateTimeIntervalType.Years) {  	date = date.AddYears ((int)Math.Floor (interval));  	span = TimeSpan.FromDays (365.0 * (interval - Math.Floor (interval)));  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,IncrementDateTime,The following statement contains a magic number: if (intervalType == DateTimeIntervalType.Weeks) {  	span = TimeSpan.FromDays (7.0 * interval);  } else if (intervalType == DateTimeIntervalType.Months) {  	// Special case handling when current date point  	// to the last day of the month  	bool lastMonthDay = false;  	if (date.Day == DateTime.DaysInMonth (date.Year' date.Month)) {  		lastMonthDay = true;  	}  	// Add specified amount of months  	date = date.AddMonths ((int)Math.Floor (interval));  	span = TimeSpan.FromDays (30.0 * (interval - Math.Floor (interval)));  	// Check if last month of the day was used  	if (lastMonthDay && span.Ticks == 0) {  		// Make sure the last day of the month is selected  		int daysInMobth = DateTime.DaysInMonth (date.Year' date.Month);  		date = date.AddDays (daysInMobth - date.Day);  	}  } else if (intervalType == DateTimeIntervalType.Years) {  	date = date.AddYears ((int)Math.Floor (interval));  	span = TimeSpan.FromDays (365.0 * (interval - Math.Floor (interval)));  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,IncrementDateTime,The following statement contains a magic number: if (intervalType == DateTimeIntervalType.Weeks) {  	span = TimeSpan.FromDays (7.0 * interval);  } else if (intervalType == DateTimeIntervalType.Months) {  	// Special case handling when current date point  	// to the last day of the month  	bool lastMonthDay = false;  	if (date.Day == DateTime.DaysInMonth (date.Year' date.Month)) {  		lastMonthDay = true;  	}  	// Add specified amount of months  	date = date.AddMonths ((int)Math.Floor (interval));  	span = TimeSpan.FromDays (30.0 * (interval - Math.Floor (interval)));  	// Check if last month of the day was used  	if (lastMonthDay && span.Ticks == 0) {  		// Make sure the last day of the month is selected  		int daysInMobth = DateTime.DaysInMonth (date.Year' date.Month);  		date = date.AddDays (daysInMobth - date.Day);  	}  } else if (intervalType == DateTimeIntervalType.Years) {  	date = date.AddYears ((int)Math.Floor (interval));  	span = TimeSpan.FromDays (365.0 * (interval - Math.Floor (interval)));  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,IncrementDateTime,The following statement contains a magic number: if (intervalType == DateTimeIntervalType.Weeks) {  	span = TimeSpan.FromDays (7.0 * interval);  } else if (intervalType == DateTimeIntervalType.Months) {  	// Special case handling when current date point  	// to the last day of the month  	bool lastMonthDay = false;  	if (date.Day == DateTime.DaysInMonth (date.Year' date.Month)) {  		lastMonthDay = true;  	}  	// Add specified amount of months  	date = date.AddMonths ((int)Math.Floor (interval));  	span = TimeSpan.FromDays (30.0 * (interval - Math.Floor (interval)));  	// Check if last month of the day was used  	if (lastMonthDay && span.Ticks == 0) {  		// Make sure the last day of the month is selected  		int daysInMobth = DateTime.DaysInMonth (date.Year' date.Month);  		date = date.AddDays (daysInMobth - date.Day);  	}  } else if (intervalType == DateTimeIntervalType.Years) {  	date = date.AddYears ((int)Math.Floor (interval));  	span = TimeSpan.FromDays (365.0 * (interval - Math.Floor (interval)));  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,IncrementDateTime,The following statement contains a magic number: span = TimeSpan.FromDays (7.0 * interval);  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,IncrementDateTime,The following statement contains a magic number: if (intervalType == DateTimeIntervalType.Months) {  	// Special case handling when current date point  	// to the last day of the month  	bool lastMonthDay = false;  	if (date.Day == DateTime.DaysInMonth (date.Year' date.Month)) {  		lastMonthDay = true;  	}  	// Add specified amount of months  	date = date.AddMonths ((int)Math.Floor (interval));  	span = TimeSpan.FromDays (30.0 * (interval - Math.Floor (interval)));  	// Check if last month of the day was used  	if (lastMonthDay && span.Ticks == 0) {  		// Make sure the last day of the month is selected  		int daysInMobth = DateTime.DaysInMonth (date.Year' date.Month);  		date = date.AddDays (daysInMobth - date.Day);  	}  } else if (intervalType == DateTimeIntervalType.Years) {  	date = date.AddYears ((int)Math.Floor (interval));  	span = TimeSpan.FromDays (365.0 * (interval - Math.Floor (interval)));  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,IncrementDateTime,The following statement contains a magic number: if (intervalType == DateTimeIntervalType.Months) {  	// Special case handling when current date point  	// to the last day of the month  	bool lastMonthDay = false;  	if (date.Day == DateTime.DaysInMonth (date.Year' date.Month)) {  		lastMonthDay = true;  	}  	// Add specified amount of months  	date = date.AddMonths ((int)Math.Floor (interval));  	span = TimeSpan.FromDays (30.0 * (interval - Math.Floor (interval)));  	// Check if last month of the day was used  	if (lastMonthDay && span.Ticks == 0) {  		// Make sure the last day of the month is selected  		int daysInMobth = DateTime.DaysInMonth (date.Year' date.Month);  		date = date.AddDays (daysInMobth - date.Day);  	}  } else if (intervalType == DateTimeIntervalType.Years) {  	date = date.AddYears ((int)Math.Floor (interval));  	span = TimeSpan.FromDays (365.0 * (interval - Math.Floor (interval)));  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,IncrementDateTime,The following statement contains a magic number: span = TimeSpan.FromDays (30.0 * (interval - Math.Floor (interval)));  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,IncrementDateTime,The following statement contains a magic number: if (intervalType == DateTimeIntervalType.Years) {  	date = date.AddYears ((int)Math.Floor (interval));  	span = TimeSpan.FromDays (365.0 * (interval - Math.Floor (interval)));  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,IncrementDateTime,The following statement contains a magic number: span = TimeSpan.FromDays (365.0 * (interval - Math.Floor (interval)));  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,AlignIntervalStart,The following statement contains a magic number: if (intervalSize > 0.0 && intervalSize != 1.0) {  	if (type == DateTimeIntervalType.Months && intervalSize <= 12.0 && intervalSize > 1) {  		// Make sure that the beginning is aligned correctly for cases  		// like quarters and half years  		DateTime resultDate = newStartDate;  		DateTime sizeAdjustedDate = new DateTime (newStartDate.Year' 1' 1' 0' 0' 0);  		while (sizeAdjustedDate < newStartDate) {  			resultDate = sizeAdjustedDate;  			sizeAdjustedDate = sizeAdjustedDate.AddMonths ((int)intervalSize);  		}  		newStartDate = resultDate;  		return newStartDate;  	}  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,AlignIntervalStart,The following statement contains a magic number: if (type == DateTimeIntervalType.Months && intervalSize <= 12.0 && intervalSize > 1) {  	// Make sure that the beginning is aligned correctly for cases  	// like quarters and half years  	DateTime resultDate = newStartDate;  	DateTime sizeAdjustedDate = new DateTime (newStartDate.Year' 1' 1' 0' 0' 0);  	while (sizeAdjustedDate < newStartDate) {  		resultDate = sizeAdjustedDate;  		sizeAdjustedDate = sizeAdjustedDate.AddMonths ((int)intervalSize);  	}  	newStartDate = resultDate;  	return newStartDate;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0) {  	// Milli Seconds  	double milliSeconds = timeSpan.TotalMilliseconds;  	if (milliSeconds <= 10) {  		type = DateTimeIntervalType.Milliseconds;  		return 1;  	}  	if (milliSeconds <= 50) {  		type = DateTimeIntervalType.Milliseconds;  		return 4;  	}  	if (milliSeconds <= 200) {  		type = DateTimeIntervalType.Milliseconds;  		return 20;  	}  	if (milliSeconds <= 500) {  		type = DateTimeIntervalType.Milliseconds;  		return 50;  	}  	// Seconds  	double seconds = timeSpan.TotalSeconds;  	if (seconds <= 7) {  		type = DateTimeIntervalType.Seconds;  		return 1;  	} else if (seconds <= 15) {  		type = DateTimeIntervalType.Seconds;  		return 2;  	} else if (seconds <= 30) {  		type = DateTimeIntervalType.Seconds;  		return 5;  	} else if (seconds <= 60) {  		type = DateTimeIntervalType.Seconds;  		return 10;  	}  } else if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0) {  	// Milli Seconds  	double milliSeconds = timeSpan.TotalMilliseconds;  	if (milliSeconds <= 10) {  		type = DateTimeIntervalType.Milliseconds;  		return 1;  	}  	if (milliSeconds <= 50) {  		type = DateTimeIntervalType.Milliseconds;  		return 4;  	}  	if (milliSeconds <= 200) {  		type = DateTimeIntervalType.Milliseconds;  		return 20;  	}  	if (milliSeconds <= 500) {  		type = DateTimeIntervalType.Milliseconds;  		return 50;  	}  	// Seconds  	double seconds = timeSpan.TotalSeconds;  	if (seconds <= 7) {  		type = DateTimeIntervalType.Seconds;  		return 1;  	} else if (seconds <= 15) {  		type = DateTimeIntervalType.Seconds;  		return 2;  	} else if (seconds <= 30) {  		type = DateTimeIntervalType.Seconds;  		return 5;  	} else if (seconds <= 60) {  		type = DateTimeIntervalType.Seconds;  		return 10;  	}  } else if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0) {  	// Milli Seconds  	double milliSeconds = timeSpan.TotalMilliseconds;  	if (milliSeconds <= 10) {  		type = DateTimeIntervalType.Milliseconds;  		return 1;  	}  	if (milliSeconds <= 50) {  		type = DateTimeIntervalType.Milliseconds;  		return 4;  	}  	if (milliSeconds <= 200) {  		type = DateTimeIntervalType.Milliseconds;  		return 20;  	}  	if (milliSeconds <= 500) {  		type = DateTimeIntervalType.Milliseconds;  		return 50;  	}  	// Seconds  	double seconds = timeSpan.TotalSeconds;  	if (seconds <= 7) {  		type = DateTimeIntervalType.Seconds;  		return 1;  	} else if (seconds <= 15) {  		type = DateTimeIntervalType.Seconds;  		return 2;  	} else if (seconds <= 30) {  		type = DateTimeIntervalType.Seconds;  		return 5;  	} else if (seconds <= 60) {  		type = DateTimeIntervalType.Seconds;  		return 10;  	}  } else if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0) {  	// Milli Seconds  	double milliSeconds = timeSpan.TotalMilliseconds;  	if (milliSeconds <= 10) {  		type = DateTimeIntervalType.Milliseconds;  		return 1;  	}  	if (milliSeconds <= 50) {  		type = DateTimeIntervalType.Milliseconds;  		return 4;  	}  	if (milliSeconds <= 200) {  		type = DateTimeIntervalType.Milliseconds;  		return 20;  	}  	if (milliSeconds <= 500) {  		type = DateTimeIntervalType.Milliseconds;  		return 50;  	}  	// Seconds  	double seconds = timeSpan.TotalSeconds;  	if (seconds <= 7) {  		type = DateTimeIntervalType.Seconds;  		return 1;  	} else if (seconds <= 15) {  		type = DateTimeIntervalType.Seconds;  		return 2;  	} else if (seconds <= 30) {  		type = DateTimeIntervalType.Seconds;  		return 5;  	} else if (seconds <= 60) {  		type = DateTimeIntervalType.Seconds;  		return 10;  	}  } else if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0) {  	// Milli Seconds  	double milliSeconds = timeSpan.TotalMilliseconds;  	if (milliSeconds <= 10) {  		type = DateTimeIntervalType.Milliseconds;  		return 1;  	}  	if (milliSeconds <= 50) {  		type = DateTimeIntervalType.Milliseconds;  		return 4;  	}  	if (milliSeconds <= 200) {  		type = DateTimeIntervalType.Milliseconds;  		return 20;  	}  	if (milliSeconds <= 500) {  		type = DateTimeIntervalType.Milliseconds;  		return 50;  	}  	// Seconds  	double seconds = timeSpan.TotalSeconds;  	if (seconds <= 7) {  		type = DateTimeIntervalType.Seconds;  		return 1;  	} else if (seconds <= 15) {  		type = DateTimeIntervalType.Seconds;  		return 2;  	} else if (seconds <= 30) {  		type = DateTimeIntervalType.Seconds;  		return 5;  	} else if (seconds <= 60) {  		type = DateTimeIntervalType.Seconds;  		return 10;  	}  } else if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0) {  	// Milli Seconds  	double milliSeconds = timeSpan.TotalMilliseconds;  	if (milliSeconds <= 10) {  		type = DateTimeIntervalType.Milliseconds;  		return 1;  	}  	if (milliSeconds <= 50) {  		type = DateTimeIntervalType.Milliseconds;  		return 4;  	}  	if (milliSeconds <= 200) {  		type = DateTimeIntervalType.Milliseconds;  		return 20;  	}  	if (milliSeconds <= 500) {  		type = DateTimeIntervalType.Milliseconds;  		return 50;  	}  	// Seconds  	double seconds = timeSpan.TotalSeconds;  	if (seconds <= 7) {  		type = DateTimeIntervalType.Seconds;  		return 1;  	} else if (seconds <= 15) {  		type = DateTimeIntervalType.Seconds;  		return 2;  	} else if (seconds <= 30) {  		type = DateTimeIntervalType.Seconds;  		return 5;  	} else if (seconds <= 60) {  		type = DateTimeIntervalType.Seconds;  		return 10;  	}  } else if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0) {  	// Milli Seconds  	double milliSeconds = timeSpan.TotalMilliseconds;  	if (milliSeconds <= 10) {  		type = DateTimeIntervalType.Milliseconds;  		return 1;  	}  	if (milliSeconds <= 50) {  		type = DateTimeIntervalType.Milliseconds;  		return 4;  	}  	if (milliSeconds <= 200) {  		type = DateTimeIntervalType.Milliseconds;  		return 20;  	}  	if (milliSeconds <= 500) {  		type = DateTimeIntervalType.Milliseconds;  		return 50;  	}  	// Seconds  	double seconds = timeSpan.TotalSeconds;  	if (seconds <= 7) {  		type = DateTimeIntervalType.Seconds;  		return 1;  	} else if (seconds <= 15) {  		type = DateTimeIntervalType.Seconds;  		return 2;  	} else if (seconds <= 30) {  		type = DateTimeIntervalType.Seconds;  		return 5;  	} else if (seconds <= 60) {  		type = DateTimeIntervalType.Seconds;  		return 10;  	}  } else if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0) {  	// Milli Seconds  	double milliSeconds = timeSpan.TotalMilliseconds;  	if (milliSeconds <= 10) {  		type = DateTimeIntervalType.Milliseconds;  		return 1;  	}  	if (milliSeconds <= 50) {  		type = DateTimeIntervalType.Milliseconds;  		return 4;  	}  	if (milliSeconds <= 200) {  		type = DateTimeIntervalType.Milliseconds;  		return 20;  	}  	if (milliSeconds <= 500) {  		type = DateTimeIntervalType.Milliseconds;  		return 50;  	}  	// Seconds  	double seconds = timeSpan.TotalSeconds;  	if (seconds <= 7) {  		type = DateTimeIntervalType.Seconds;  		return 1;  	} else if (seconds <= 15) {  		type = DateTimeIntervalType.Seconds;  		return 2;  	} else if (seconds <= 30) {  		type = DateTimeIntervalType.Seconds;  		return 5;  	} else if (seconds <= 60) {  		type = DateTimeIntervalType.Seconds;  		return 10;  	}  } else if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0) {  	// Milli Seconds  	double milliSeconds = timeSpan.TotalMilliseconds;  	if (milliSeconds <= 10) {  		type = DateTimeIntervalType.Milliseconds;  		return 1;  	}  	if (milliSeconds <= 50) {  		type = DateTimeIntervalType.Milliseconds;  		return 4;  	}  	if (milliSeconds <= 200) {  		type = DateTimeIntervalType.Milliseconds;  		return 20;  	}  	if (milliSeconds <= 500) {  		type = DateTimeIntervalType.Milliseconds;  		return 50;  	}  	// Seconds  	double seconds = timeSpan.TotalSeconds;  	if (seconds <= 7) {  		type = DateTimeIntervalType.Seconds;  		return 1;  	} else if (seconds <= 15) {  		type = DateTimeIntervalType.Seconds;  		return 2;  	} else if (seconds <= 30) {  		type = DateTimeIntervalType.Seconds;  		return 5;  	} else if (seconds <= 60) {  		type = DateTimeIntervalType.Seconds;  		return 10;  	}  } else if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0) {  	// Milli Seconds  	double milliSeconds = timeSpan.TotalMilliseconds;  	if (milliSeconds <= 10) {  		type = DateTimeIntervalType.Milliseconds;  		return 1;  	}  	if (milliSeconds <= 50) {  		type = DateTimeIntervalType.Milliseconds;  		return 4;  	}  	if (milliSeconds <= 200) {  		type = DateTimeIntervalType.Milliseconds;  		return 20;  	}  	if (milliSeconds <= 500) {  		type = DateTimeIntervalType.Milliseconds;  		return 50;  	}  	// Seconds  	double seconds = timeSpan.TotalSeconds;  	if (seconds <= 7) {  		type = DateTimeIntervalType.Seconds;  		return 1;  	} else if (seconds <= 15) {  		type = DateTimeIntervalType.Seconds;  		return 2;  	} else if (seconds <= 30) {  		type = DateTimeIntervalType.Seconds;  		return 5;  	} else if (seconds <= 60) {  		type = DateTimeIntervalType.Seconds;  		return 10;  	}  } else if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0) {  	// Milli Seconds  	double milliSeconds = timeSpan.TotalMilliseconds;  	if (milliSeconds <= 10) {  		type = DateTimeIntervalType.Milliseconds;  		return 1;  	}  	if (milliSeconds <= 50) {  		type = DateTimeIntervalType.Milliseconds;  		return 4;  	}  	if (milliSeconds <= 200) {  		type = DateTimeIntervalType.Milliseconds;  		return 20;  	}  	if (milliSeconds <= 500) {  		type = DateTimeIntervalType.Milliseconds;  		return 50;  	}  	// Seconds  	double seconds = timeSpan.TotalSeconds;  	if (seconds <= 7) {  		type = DateTimeIntervalType.Seconds;  		return 1;  	} else if (seconds <= 15) {  		type = DateTimeIntervalType.Seconds;  		return 2;  	} else if (seconds <= 30) {  		type = DateTimeIntervalType.Seconds;  		return 5;  	} else if (seconds <= 60) {  		type = DateTimeIntervalType.Seconds;  		return 10;  	}  } else if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0) {  	// Milli Seconds  	double milliSeconds = timeSpan.TotalMilliseconds;  	if (milliSeconds <= 10) {  		type = DateTimeIntervalType.Milliseconds;  		return 1;  	}  	if (milliSeconds <= 50) {  		type = DateTimeIntervalType.Milliseconds;  		return 4;  	}  	if (milliSeconds <= 200) {  		type = DateTimeIntervalType.Milliseconds;  		return 20;  	}  	if (milliSeconds <= 500) {  		type = DateTimeIntervalType.Milliseconds;  		return 50;  	}  	// Seconds  	double seconds = timeSpan.TotalSeconds;  	if (seconds <= 7) {  		type = DateTimeIntervalType.Seconds;  		return 1;  	} else if (seconds <= 15) {  		type = DateTimeIntervalType.Seconds;  		return 2;  	} else if (seconds <= 30) {  		type = DateTimeIntervalType.Seconds;  		return 5;  	} else if (seconds <= 60) {  		type = DateTimeIntervalType.Seconds;  		return 10;  	}  } else if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0) {  	// Milli Seconds  	double milliSeconds = timeSpan.TotalMilliseconds;  	if (milliSeconds <= 10) {  		type = DateTimeIntervalType.Milliseconds;  		return 1;  	}  	if (milliSeconds <= 50) {  		type = DateTimeIntervalType.Milliseconds;  		return 4;  	}  	if (milliSeconds <= 200) {  		type = DateTimeIntervalType.Milliseconds;  		return 20;  	}  	if (milliSeconds <= 500) {  		type = DateTimeIntervalType.Milliseconds;  		return 50;  	}  	// Seconds  	double seconds = timeSpan.TotalSeconds;  	if (seconds <= 7) {  		type = DateTimeIntervalType.Seconds;  		return 1;  	} else if (seconds <= 15) {  		type = DateTimeIntervalType.Seconds;  		return 2;  	} else if (seconds <= 30) {  		type = DateTimeIntervalType.Seconds;  		return 5;  	} else if (seconds <= 60) {  		type = DateTimeIntervalType.Seconds;  		return 10;  	}  } else if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0) {  	// Milli Seconds  	double milliSeconds = timeSpan.TotalMilliseconds;  	if (milliSeconds <= 10) {  		type = DateTimeIntervalType.Milliseconds;  		return 1;  	}  	if (milliSeconds <= 50) {  		type = DateTimeIntervalType.Milliseconds;  		return 4;  	}  	if (milliSeconds <= 200) {  		type = DateTimeIntervalType.Milliseconds;  		return 20;  	}  	if (milliSeconds <= 500) {  		type = DateTimeIntervalType.Milliseconds;  		return 50;  	}  	// Seconds  	double seconds = timeSpan.TotalSeconds;  	if (seconds <= 7) {  		type = DateTimeIntervalType.Seconds;  		return 1;  	} else if (seconds <= 15) {  		type = DateTimeIntervalType.Seconds;  		return 2;  	} else if (seconds <= 30) {  		type = DateTimeIntervalType.Seconds;  		return 5;  	} else if (seconds <= 60) {  		type = DateTimeIntervalType.Seconds;  		return 10;  	}  } else if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0) {  	// Milli Seconds  	double milliSeconds = timeSpan.TotalMilliseconds;  	if (milliSeconds <= 10) {  		type = DateTimeIntervalType.Milliseconds;  		return 1;  	}  	if (milliSeconds <= 50) {  		type = DateTimeIntervalType.Milliseconds;  		return 4;  	}  	if (milliSeconds <= 200) {  		type = DateTimeIntervalType.Milliseconds;  		return 20;  	}  	if (milliSeconds <= 500) {  		type = DateTimeIntervalType.Milliseconds;  		return 50;  	}  	// Seconds  	double seconds = timeSpan.TotalSeconds;  	if (seconds <= 7) {  		type = DateTimeIntervalType.Seconds;  		return 1;  	} else if (seconds <= 15) {  		type = DateTimeIntervalType.Seconds;  		return 2;  	} else if (seconds <= 30) {  		type = DateTimeIntervalType.Seconds;  		return 5;  	} else if (seconds <= 60) {  		type = DateTimeIntervalType.Seconds;  		return 10;  	}  } else if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0) {  	// Milli Seconds  	double milliSeconds = timeSpan.TotalMilliseconds;  	if (milliSeconds <= 10) {  		type = DateTimeIntervalType.Milliseconds;  		return 1;  	}  	if (milliSeconds <= 50) {  		type = DateTimeIntervalType.Milliseconds;  		return 4;  	}  	if (milliSeconds <= 200) {  		type = DateTimeIntervalType.Milliseconds;  		return 20;  	}  	if (milliSeconds <= 500) {  		type = DateTimeIntervalType.Milliseconds;  		return 50;  	}  	// Seconds  	double seconds = timeSpan.TotalSeconds;  	if (seconds <= 7) {  		type = DateTimeIntervalType.Seconds;  		return 1;  	} else if (seconds <= 15) {  		type = DateTimeIntervalType.Seconds;  		return 2;  	} else if (seconds <= 30) {  		type = DateTimeIntervalType.Seconds;  		return 5;  	} else if (seconds <= 60) {  		type = DateTimeIntervalType.Seconds;  		return 10;  	}  } else if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0) {  	// Milli Seconds  	double milliSeconds = timeSpan.TotalMilliseconds;  	if (milliSeconds <= 10) {  		type = DateTimeIntervalType.Milliseconds;  		return 1;  	}  	if (milliSeconds <= 50) {  		type = DateTimeIntervalType.Milliseconds;  		return 4;  	}  	if (milliSeconds <= 200) {  		type = DateTimeIntervalType.Milliseconds;  		return 20;  	}  	if (milliSeconds <= 500) {  		type = DateTimeIntervalType.Milliseconds;  		return 50;  	}  	// Seconds  	double seconds = timeSpan.TotalSeconds;  	if (seconds <= 7) {  		type = DateTimeIntervalType.Seconds;  		return 1;  	} else if (seconds <= 15) {  		type = DateTimeIntervalType.Seconds;  		return 2;  	} else if (seconds <= 30) {  		type = DateTimeIntervalType.Seconds;  		return 5;  	} else if (seconds <= 60) {  		type = DateTimeIntervalType.Seconds;  		return 10;  	}  } else if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0) {  	// Milli Seconds  	double milliSeconds = timeSpan.TotalMilliseconds;  	if (milliSeconds <= 10) {  		type = DateTimeIntervalType.Milliseconds;  		return 1;  	}  	if (milliSeconds <= 50) {  		type = DateTimeIntervalType.Milliseconds;  		return 4;  	}  	if (milliSeconds <= 200) {  		type = DateTimeIntervalType.Milliseconds;  		return 20;  	}  	if (milliSeconds <= 500) {  		type = DateTimeIntervalType.Milliseconds;  		return 50;  	}  	// Seconds  	double seconds = timeSpan.TotalSeconds;  	if (seconds <= 7) {  		type = DateTimeIntervalType.Seconds;  		return 1;  	} else if (seconds <= 15) {  		type = DateTimeIntervalType.Seconds;  		return 2;  	} else if (seconds <= 30) {  		type = DateTimeIntervalType.Seconds;  		return 5;  	} else if (seconds <= 60) {  		type = DateTimeIntervalType.Seconds;  		return 10;  	}  } else if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0) {  	// Milli Seconds  	double milliSeconds = timeSpan.TotalMilliseconds;  	if (milliSeconds <= 10) {  		type = DateTimeIntervalType.Milliseconds;  		return 1;  	}  	if (milliSeconds <= 50) {  		type = DateTimeIntervalType.Milliseconds;  		return 4;  	}  	if (milliSeconds <= 200) {  		type = DateTimeIntervalType.Milliseconds;  		return 20;  	}  	if (milliSeconds <= 500) {  		type = DateTimeIntervalType.Milliseconds;  		return 50;  	}  	// Seconds  	double seconds = timeSpan.TotalSeconds;  	if (seconds <= 7) {  		type = DateTimeIntervalType.Seconds;  		return 1;  	} else if (seconds <= 15) {  		type = DateTimeIntervalType.Seconds;  		return 2;  	} else if (seconds <= 30) {  		type = DateTimeIntervalType.Seconds;  		return 5;  	} else if (seconds <= 60) {  		type = DateTimeIntervalType.Seconds;  		return 10;  	}  } else if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0) {  	// Milli Seconds  	double milliSeconds = timeSpan.TotalMilliseconds;  	if (milliSeconds <= 10) {  		type = DateTimeIntervalType.Milliseconds;  		return 1;  	}  	if (milliSeconds <= 50) {  		type = DateTimeIntervalType.Milliseconds;  		return 4;  	}  	if (milliSeconds <= 200) {  		type = DateTimeIntervalType.Milliseconds;  		return 20;  	}  	if (milliSeconds <= 500) {  		type = DateTimeIntervalType.Milliseconds;  		return 50;  	}  	// Seconds  	double seconds = timeSpan.TotalSeconds;  	if (seconds <= 7) {  		type = DateTimeIntervalType.Seconds;  		return 1;  	} else if (seconds <= 15) {  		type = DateTimeIntervalType.Seconds;  		return 2;  	} else if (seconds <= 30) {  		type = DateTimeIntervalType.Seconds;  		return 5;  	} else if (seconds <= 60) {  		type = DateTimeIntervalType.Seconds;  		return 10;  	}  } else if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0) {  	// Milli Seconds  	double milliSeconds = timeSpan.TotalMilliseconds;  	if (milliSeconds <= 10) {  		type = DateTimeIntervalType.Milliseconds;  		return 1;  	}  	if (milliSeconds <= 50) {  		type = DateTimeIntervalType.Milliseconds;  		return 4;  	}  	if (milliSeconds <= 200) {  		type = DateTimeIntervalType.Milliseconds;  		return 20;  	}  	if (milliSeconds <= 500) {  		type = DateTimeIntervalType.Milliseconds;  		return 50;  	}  	// Seconds  	double seconds = timeSpan.TotalSeconds;  	if (seconds <= 7) {  		type = DateTimeIntervalType.Seconds;  		return 1;  	} else if (seconds <= 15) {  		type = DateTimeIntervalType.Seconds;  		return 2;  	} else if (seconds <= 30) {  		type = DateTimeIntervalType.Seconds;  		return 5;  	} else if (seconds <= 60) {  		type = DateTimeIntervalType.Seconds;  		return 10;  	}  } else if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0) {  	// Milli Seconds  	double milliSeconds = timeSpan.TotalMilliseconds;  	if (milliSeconds <= 10) {  		type = DateTimeIntervalType.Milliseconds;  		return 1;  	}  	if (milliSeconds <= 50) {  		type = DateTimeIntervalType.Milliseconds;  		return 4;  	}  	if (milliSeconds <= 200) {  		type = DateTimeIntervalType.Milliseconds;  		return 20;  	}  	if (milliSeconds <= 500) {  		type = DateTimeIntervalType.Milliseconds;  		return 50;  	}  	// Seconds  	double seconds = timeSpan.TotalSeconds;  	if (seconds <= 7) {  		type = DateTimeIntervalType.Seconds;  		return 1;  	} else if (seconds <= 15) {  		type = DateTimeIntervalType.Seconds;  		return 2;  	} else if (seconds <= 30) {  		type = DateTimeIntervalType.Seconds;  		return 5;  	} else if (seconds <= 60) {  		type = DateTimeIntervalType.Seconds;  		return 10;  	}  } else if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0) {  	// Milli Seconds  	double milliSeconds = timeSpan.TotalMilliseconds;  	if (milliSeconds <= 10) {  		type = DateTimeIntervalType.Milliseconds;  		return 1;  	}  	if (milliSeconds <= 50) {  		type = DateTimeIntervalType.Milliseconds;  		return 4;  	}  	if (milliSeconds <= 200) {  		type = DateTimeIntervalType.Milliseconds;  		return 20;  	}  	if (milliSeconds <= 500) {  		type = DateTimeIntervalType.Milliseconds;  		return 50;  	}  	// Seconds  	double seconds = timeSpan.TotalSeconds;  	if (seconds <= 7) {  		type = DateTimeIntervalType.Seconds;  		return 1;  	} else if (seconds <= 15) {  		type = DateTimeIntervalType.Seconds;  		return 2;  	} else if (seconds <= 30) {  		type = DateTimeIntervalType.Seconds;  		return 5;  	} else if (seconds <= 60) {  		type = DateTimeIntervalType.Seconds;  		return 10;  	}  } else if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0) {  	// Milli Seconds  	double milliSeconds = timeSpan.TotalMilliseconds;  	if (milliSeconds <= 10) {  		type = DateTimeIntervalType.Milliseconds;  		return 1;  	}  	if (milliSeconds <= 50) {  		type = DateTimeIntervalType.Milliseconds;  		return 4;  	}  	if (milliSeconds <= 200) {  		type = DateTimeIntervalType.Milliseconds;  		return 20;  	}  	if (milliSeconds <= 500) {  		type = DateTimeIntervalType.Milliseconds;  		return 50;  	}  	// Seconds  	double seconds = timeSpan.TotalSeconds;  	if (seconds <= 7) {  		type = DateTimeIntervalType.Seconds;  		return 1;  	} else if (seconds <= 15) {  		type = DateTimeIntervalType.Seconds;  		return 2;  	} else if (seconds <= 30) {  		type = DateTimeIntervalType.Seconds;  		return 5;  	} else if (seconds <= 60) {  		type = DateTimeIntervalType.Seconds;  		return 10;  	}  } else if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0) {  	// Milli Seconds  	double milliSeconds = timeSpan.TotalMilliseconds;  	if (milliSeconds <= 10) {  		type = DateTimeIntervalType.Milliseconds;  		return 1;  	}  	if (milliSeconds <= 50) {  		type = DateTimeIntervalType.Milliseconds;  		return 4;  	}  	if (milliSeconds <= 200) {  		type = DateTimeIntervalType.Milliseconds;  		return 20;  	}  	if (milliSeconds <= 500) {  		type = DateTimeIntervalType.Milliseconds;  		return 50;  	}  	// Seconds  	double seconds = timeSpan.TotalSeconds;  	if (seconds <= 7) {  		type = DateTimeIntervalType.Seconds;  		return 1;  	} else if (seconds <= 15) {  		type = DateTimeIntervalType.Seconds;  		return 2;  	} else if (seconds <= 30) {  		type = DateTimeIntervalType.Seconds;  		return 5;  	} else if (seconds <= 60) {  		type = DateTimeIntervalType.Seconds;  		return 10;  	}  } else if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0) {  	// Milli Seconds  	double milliSeconds = timeSpan.TotalMilliseconds;  	if (milliSeconds <= 10) {  		type = DateTimeIntervalType.Milliseconds;  		return 1;  	}  	if (milliSeconds <= 50) {  		type = DateTimeIntervalType.Milliseconds;  		return 4;  	}  	if (milliSeconds <= 200) {  		type = DateTimeIntervalType.Milliseconds;  		return 20;  	}  	if (milliSeconds <= 500) {  		type = DateTimeIntervalType.Milliseconds;  		return 50;  	}  	// Seconds  	double seconds = timeSpan.TotalSeconds;  	if (seconds <= 7) {  		type = DateTimeIntervalType.Seconds;  		return 1;  	} else if (seconds <= 15) {  		type = DateTimeIntervalType.Seconds;  		return 2;  	} else if (seconds <= 30) {  		type = DateTimeIntervalType.Seconds;  		return 5;  	} else if (seconds <= 60) {  		type = DateTimeIntervalType.Seconds;  		return 10;  	}  } else if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0) {  	// Milli Seconds  	double milliSeconds = timeSpan.TotalMilliseconds;  	if (milliSeconds <= 10) {  		type = DateTimeIntervalType.Milliseconds;  		return 1;  	}  	if (milliSeconds <= 50) {  		type = DateTimeIntervalType.Milliseconds;  		return 4;  	}  	if (milliSeconds <= 200) {  		type = DateTimeIntervalType.Milliseconds;  		return 20;  	}  	if (milliSeconds <= 500) {  		type = DateTimeIntervalType.Milliseconds;  		return 50;  	}  	// Seconds  	double seconds = timeSpan.TotalSeconds;  	if (seconds <= 7) {  		type = DateTimeIntervalType.Seconds;  		return 1;  	} else if (seconds <= 15) {  		type = DateTimeIntervalType.Seconds;  		return 2;  	} else if (seconds <= 30) {  		type = DateTimeIntervalType.Seconds;  		return 5;  	} else if (seconds <= 60) {  		type = DateTimeIntervalType.Seconds;  		return 10;  	}  } else if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0) {  	// Milli Seconds  	double milliSeconds = timeSpan.TotalMilliseconds;  	if (milliSeconds <= 10) {  		type = DateTimeIntervalType.Milliseconds;  		return 1;  	}  	if (milliSeconds <= 50) {  		type = DateTimeIntervalType.Milliseconds;  		return 4;  	}  	if (milliSeconds <= 200) {  		type = DateTimeIntervalType.Milliseconds;  		return 20;  	}  	if (milliSeconds <= 500) {  		type = DateTimeIntervalType.Milliseconds;  		return 50;  	}  	// Seconds  	double seconds = timeSpan.TotalSeconds;  	if (seconds <= 7) {  		type = DateTimeIntervalType.Seconds;  		return 1;  	} else if (seconds <= 15) {  		type = DateTimeIntervalType.Seconds;  		return 2;  	} else if (seconds <= 30) {  		type = DateTimeIntervalType.Seconds;  		return 5;  	} else if (seconds <= 60) {  		type = DateTimeIntervalType.Seconds;  		return 10;  	}  } else if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0) {  	// Milli Seconds  	double milliSeconds = timeSpan.TotalMilliseconds;  	if (milliSeconds <= 10) {  		type = DateTimeIntervalType.Milliseconds;  		return 1;  	}  	if (milliSeconds <= 50) {  		type = DateTimeIntervalType.Milliseconds;  		return 4;  	}  	if (milliSeconds <= 200) {  		type = DateTimeIntervalType.Milliseconds;  		return 20;  	}  	if (milliSeconds <= 500) {  		type = DateTimeIntervalType.Milliseconds;  		return 50;  	}  	// Seconds  	double seconds = timeSpan.TotalSeconds;  	if (seconds <= 7) {  		type = DateTimeIntervalType.Seconds;  		return 1;  	} else if (seconds <= 15) {  		type = DateTimeIntervalType.Seconds;  		return 2;  	} else if (seconds <= 30) {  		type = DateTimeIntervalType.Seconds;  		return 5;  	} else if (seconds <= 60) {  		type = DateTimeIntervalType.Seconds;  		return 10;  	}  } else if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0) {  	// Milli Seconds  	double milliSeconds = timeSpan.TotalMilliseconds;  	if (milliSeconds <= 10) {  		type = DateTimeIntervalType.Milliseconds;  		return 1;  	}  	if (milliSeconds <= 50) {  		type = DateTimeIntervalType.Milliseconds;  		return 4;  	}  	if (milliSeconds <= 200) {  		type = DateTimeIntervalType.Milliseconds;  		return 20;  	}  	if (milliSeconds <= 500) {  		type = DateTimeIntervalType.Milliseconds;  		return 50;  	}  	// Seconds  	double seconds = timeSpan.TotalSeconds;  	if (seconds <= 7) {  		type = DateTimeIntervalType.Seconds;  		return 1;  	} else if (seconds <= 15) {  		type = DateTimeIntervalType.Seconds;  		return 2;  	} else if (seconds <= 30) {  		type = DateTimeIntervalType.Seconds;  		return 5;  	} else if (seconds <= 60) {  		type = DateTimeIntervalType.Seconds;  		return 10;  	}  } else if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0) {  	// Milli Seconds  	double milliSeconds = timeSpan.TotalMilliseconds;  	if (milliSeconds <= 10) {  		type = DateTimeIntervalType.Milliseconds;  		return 1;  	}  	if (milliSeconds <= 50) {  		type = DateTimeIntervalType.Milliseconds;  		return 4;  	}  	if (milliSeconds <= 200) {  		type = DateTimeIntervalType.Milliseconds;  		return 20;  	}  	if (milliSeconds <= 500) {  		type = DateTimeIntervalType.Milliseconds;  		return 50;  	}  	// Seconds  	double seconds = timeSpan.TotalSeconds;  	if (seconds <= 7) {  		type = DateTimeIntervalType.Seconds;  		return 1;  	} else if (seconds <= 15) {  		type = DateTimeIntervalType.Seconds;  		return 2;  	} else if (seconds <= 30) {  		type = DateTimeIntervalType.Seconds;  		return 5;  	} else if (seconds <= 60) {  		type = DateTimeIntervalType.Seconds;  		return 10;  	}  } else if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0) {  	// Milli Seconds  	double milliSeconds = timeSpan.TotalMilliseconds;  	if (milliSeconds <= 10) {  		type = DateTimeIntervalType.Milliseconds;  		return 1;  	}  	if (milliSeconds <= 50) {  		type = DateTimeIntervalType.Milliseconds;  		return 4;  	}  	if (milliSeconds <= 200) {  		type = DateTimeIntervalType.Milliseconds;  		return 20;  	}  	if (milliSeconds <= 500) {  		type = DateTimeIntervalType.Milliseconds;  		return 50;  	}  	// Seconds  	double seconds = timeSpan.TotalSeconds;  	if (seconds <= 7) {  		type = DateTimeIntervalType.Seconds;  		return 1;  	} else if (seconds <= 15) {  		type = DateTimeIntervalType.Seconds;  		return 2;  	} else if (seconds <= 30) {  		type = DateTimeIntervalType.Seconds;  		return 5;  	} else if (seconds <= 60) {  		type = DateTimeIntervalType.Seconds;  		return 10;  	}  } else if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0) {  	// Milli Seconds  	double milliSeconds = timeSpan.TotalMilliseconds;  	if (milliSeconds <= 10) {  		type = DateTimeIntervalType.Milliseconds;  		return 1;  	}  	if (milliSeconds <= 50) {  		type = DateTimeIntervalType.Milliseconds;  		return 4;  	}  	if (milliSeconds <= 200) {  		type = DateTimeIntervalType.Milliseconds;  		return 20;  	}  	if (milliSeconds <= 500) {  		type = DateTimeIntervalType.Milliseconds;  		return 50;  	}  	// Seconds  	double seconds = timeSpan.TotalSeconds;  	if (seconds <= 7) {  		type = DateTimeIntervalType.Seconds;  		return 1;  	} else if (seconds <= 15) {  		type = DateTimeIntervalType.Seconds;  		return 2;  	} else if (seconds <= 30) {  		type = DateTimeIntervalType.Seconds;  		return 5;  	} else if (seconds <= 60) {  		type = DateTimeIntervalType.Seconds;  		return 10;  	}  } else if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0) {  	// Milli Seconds  	double milliSeconds = timeSpan.TotalMilliseconds;  	if (milliSeconds <= 10) {  		type = DateTimeIntervalType.Milliseconds;  		return 1;  	}  	if (milliSeconds <= 50) {  		type = DateTimeIntervalType.Milliseconds;  		return 4;  	}  	if (milliSeconds <= 200) {  		type = DateTimeIntervalType.Milliseconds;  		return 20;  	}  	if (milliSeconds <= 500) {  		type = DateTimeIntervalType.Milliseconds;  		return 50;  	}  	// Seconds  	double seconds = timeSpan.TotalSeconds;  	if (seconds <= 7) {  		type = DateTimeIntervalType.Seconds;  		return 1;  	} else if (seconds <= 15) {  		type = DateTimeIntervalType.Seconds;  		return 2;  	} else if (seconds <= 30) {  		type = DateTimeIntervalType.Seconds;  		return 5;  	} else if (seconds <= 60) {  		type = DateTimeIntervalType.Seconds;  		return 10;  	}  } else if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0) {  	// Milli Seconds  	double milliSeconds = timeSpan.TotalMilliseconds;  	if (milliSeconds <= 10) {  		type = DateTimeIntervalType.Milliseconds;  		return 1;  	}  	if (milliSeconds <= 50) {  		type = DateTimeIntervalType.Milliseconds;  		return 4;  	}  	if (milliSeconds <= 200) {  		type = DateTimeIntervalType.Milliseconds;  		return 20;  	}  	if (milliSeconds <= 500) {  		type = DateTimeIntervalType.Milliseconds;  		return 50;  	}  	// Seconds  	double seconds = timeSpan.TotalSeconds;  	if (seconds <= 7) {  		type = DateTimeIntervalType.Seconds;  		return 1;  	} else if (seconds <= 15) {  		type = DateTimeIntervalType.Seconds;  		return 2;  	} else if (seconds <= 30) {  		type = DateTimeIntervalType.Seconds;  		return 5;  	} else if (seconds <= 60) {  		type = DateTimeIntervalType.Seconds;  		return 10;  	}  } else if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0) {  	// Milli Seconds  	double milliSeconds = timeSpan.TotalMilliseconds;  	if (milliSeconds <= 10) {  		type = DateTimeIntervalType.Milliseconds;  		return 1;  	}  	if (milliSeconds <= 50) {  		type = DateTimeIntervalType.Milliseconds;  		return 4;  	}  	if (milliSeconds <= 200) {  		type = DateTimeIntervalType.Milliseconds;  		return 20;  	}  	if (milliSeconds <= 500) {  		type = DateTimeIntervalType.Milliseconds;  		return 50;  	}  	// Seconds  	double seconds = timeSpan.TotalSeconds;  	if (seconds <= 7) {  		type = DateTimeIntervalType.Seconds;  		return 1;  	} else if (seconds <= 15) {  		type = DateTimeIntervalType.Seconds;  		return 2;  	} else if (seconds <= 30) {  		type = DateTimeIntervalType.Seconds;  		return 5;  	} else if (seconds <= 60) {  		type = DateTimeIntervalType.Seconds;  		return 10;  	}  } else if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0) {  	// Milli Seconds  	double milliSeconds = timeSpan.TotalMilliseconds;  	if (milliSeconds <= 10) {  		type = DateTimeIntervalType.Milliseconds;  		return 1;  	}  	if (milliSeconds <= 50) {  		type = DateTimeIntervalType.Milliseconds;  		return 4;  	}  	if (milliSeconds <= 200) {  		type = DateTimeIntervalType.Milliseconds;  		return 20;  	}  	if (milliSeconds <= 500) {  		type = DateTimeIntervalType.Milliseconds;  		return 50;  	}  	// Seconds  	double seconds = timeSpan.TotalSeconds;  	if (seconds <= 7) {  		type = DateTimeIntervalType.Seconds;  		return 1;  	} else if (seconds <= 15) {  		type = DateTimeIntervalType.Seconds;  		return 2;  	} else if (seconds <= 30) {  		type = DateTimeIntervalType.Seconds;  		return 5;  	} else if (seconds <= 60) {  		type = DateTimeIntervalType.Seconds;  		return 10;  	}  } else if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0) {  	// Milli Seconds  	double milliSeconds = timeSpan.TotalMilliseconds;  	if (milliSeconds <= 10) {  		type = DateTimeIntervalType.Milliseconds;  		return 1;  	}  	if (milliSeconds <= 50) {  		type = DateTimeIntervalType.Milliseconds;  		return 4;  	}  	if (milliSeconds <= 200) {  		type = DateTimeIntervalType.Milliseconds;  		return 20;  	}  	if (milliSeconds <= 500) {  		type = DateTimeIntervalType.Milliseconds;  		return 50;  	}  	// Seconds  	double seconds = timeSpan.TotalSeconds;  	if (seconds <= 7) {  		type = DateTimeIntervalType.Seconds;  		return 1;  	} else if (seconds <= 15) {  		type = DateTimeIntervalType.Seconds;  		return 2;  	} else if (seconds <= 30) {  		type = DateTimeIntervalType.Seconds;  		return 5;  	} else if (seconds <= 60) {  		type = DateTimeIntervalType.Seconds;  		return 10;  	}  } else if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0) {  	// Milli Seconds  	double milliSeconds = timeSpan.TotalMilliseconds;  	if (milliSeconds <= 10) {  		type = DateTimeIntervalType.Milliseconds;  		return 1;  	}  	if (milliSeconds <= 50) {  		type = DateTimeIntervalType.Milliseconds;  		return 4;  	}  	if (milliSeconds <= 200) {  		type = DateTimeIntervalType.Milliseconds;  		return 20;  	}  	if (milliSeconds <= 500) {  		type = DateTimeIntervalType.Milliseconds;  		return 50;  	}  	// Seconds  	double seconds = timeSpan.TotalSeconds;  	if (seconds <= 7) {  		type = DateTimeIntervalType.Seconds;  		return 1;  	} else if (seconds <= 15) {  		type = DateTimeIntervalType.Seconds;  		return 2;  	} else if (seconds <= 30) {  		type = DateTimeIntervalType.Seconds;  		return 5;  	} else if (seconds <= 60) {  		type = DateTimeIntervalType.Seconds;  		return 10;  	}  } else if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0) {  	// Milli Seconds  	double milliSeconds = timeSpan.TotalMilliseconds;  	if (milliSeconds <= 10) {  		type = DateTimeIntervalType.Milliseconds;  		return 1;  	}  	if (milliSeconds <= 50) {  		type = DateTimeIntervalType.Milliseconds;  		return 4;  	}  	if (milliSeconds <= 200) {  		type = DateTimeIntervalType.Milliseconds;  		return 20;  	}  	if (milliSeconds <= 500) {  		type = DateTimeIntervalType.Milliseconds;  		return 50;  	}  	// Seconds  	double seconds = timeSpan.TotalSeconds;  	if (seconds <= 7) {  		type = DateTimeIntervalType.Seconds;  		return 1;  	} else if (seconds <= 15) {  		type = DateTimeIntervalType.Seconds;  		return 2;  	} else if (seconds <= 30) {  		type = DateTimeIntervalType.Seconds;  		return 5;  	} else if (seconds <= 60) {  		type = DateTimeIntervalType.Seconds;  		return 10;  	}  } else if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0) {  	// Milli Seconds  	double milliSeconds = timeSpan.TotalMilliseconds;  	if (milliSeconds <= 10) {  		type = DateTimeIntervalType.Milliseconds;  		return 1;  	}  	if (milliSeconds <= 50) {  		type = DateTimeIntervalType.Milliseconds;  		return 4;  	}  	if (milliSeconds <= 200) {  		type = DateTimeIntervalType.Milliseconds;  		return 20;  	}  	if (milliSeconds <= 500) {  		type = DateTimeIntervalType.Milliseconds;  		return 50;  	}  	// Seconds  	double seconds = timeSpan.TotalSeconds;  	if (seconds <= 7) {  		type = DateTimeIntervalType.Seconds;  		return 1;  	} else if (seconds <= 15) {  		type = DateTimeIntervalType.Seconds;  		return 2;  	} else if (seconds <= 30) {  		type = DateTimeIntervalType.Seconds;  		return 5;  	} else if (seconds <= 60) {  		type = DateTimeIntervalType.Seconds;  		return 10;  	}  } else if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0) {  	// Milli Seconds  	double milliSeconds = timeSpan.TotalMilliseconds;  	if (milliSeconds <= 10) {  		type = DateTimeIntervalType.Milliseconds;  		return 1;  	}  	if (milliSeconds <= 50) {  		type = DateTimeIntervalType.Milliseconds;  		return 4;  	}  	if (milliSeconds <= 200) {  		type = DateTimeIntervalType.Milliseconds;  		return 20;  	}  	if (milliSeconds <= 500) {  		type = DateTimeIntervalType.Milliseconds;  		return 50;  	}  	// Seconds  	double seconds = timeSpan.TotalSeconds;  	if (seconds <= 7) {  		type = DateTimeIntervalType.Seconds;  		return 1;  	} else if (seconds <= 15) {  		type = DateTimeIntervalType.Seconds;  		return 2;  	} else if (seconds <= 30) {  		type = DateTimeIntervalType.Seconds;  		return 5;  	} else if (seconds <= 60) {  		type = DateTimeIntervalType.Seconds;  		return 10;  	}  } else if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0) {  	// Milli Seconds  	double milliSeconds = timeSpan.TotalMilliseconds;  	if (milliSeconds <= 10) {  		type = DateTimeIntervalType.Milliseconds;  		return 1;  	}  	if (milliSeconds <= 50) {  		type = DateTimeIntervalType.Milliseconds;  		return 4;  	}  	if (milliSeconds <= 200) {  		type = DateTimeIntervalType.Milliseconds;  		return 20;  	}  	if (milliSeconds <= 500) {  		type = DateTimeIntervalType.Milliseconds;  		return 50;  	}  	// Seconds  	double seconds = timeSpan.TotalSeconds;  	if (seconds <= 7) {  		type = DateTimeIntervalType.Seconds;  		return 1;  	} else if (seconds <= 15) {  		type = DateTimeIntervalType.Seconds;  		return 2;  	} else if (seconds <= 30) {  		type = DateTimeIntervalType.Seconds;  		return 5;  	} else if (seconds <= 60) {  		type = DateTimeIntervalType.Seconds;  		return 10;  	}  } else if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0) {  	// Milli Seconds  	double milliSeconds = timeSpan.TotalMilliseconds;  	if (milliSeconds <= 10) {  		type = DateTimeIntervalType.Milliseconds;  		return 1;  	}  	if (milliSeconds <= 50) {  		type = DateTimeIntervalType.Milliseconds;  		return 4;  	}  	if (milliSeconds <= 200) {  		type = DateTimeIntervalType.Milliseconds;  		return 20;  	}  	if (milliSeconds <= 500) {  		type = DateTimeIntervalType.Milliseconds;  		return 50;  	}  	// Seconds  	double seconds = timeSpan.TotalSeconds;  	if (seconds <= 7) {  		type = DateTimeIntervalType.Seconds;  		return 1;  	} else if (seconds <= 15) {  		type = DateTimeIntervalType.Seconds;  		return 2;  	} else if (seconds <= 30) {  		type = DateTimeIntervalType.Seconds;  		return 5;  	} else if (seconds <= 60) {  		type = DateTimeIntervalType.Seconds;  		return 10;  	}  } else if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0) {  	// Milli Seconds  	double milliSeconds = timeSpan.TotalMilliseconds;  	if (milliSeconds <= 10) {  		type = DateTimeIntervalType.Milliseconds;  		return 1;  	}  	if (milliSeconds <= 50) {  		type = DateTimeIntervalType.Milliseconds;  		return 4;  	}  	if (milliSeconds <= 200) {  		type = DateTimeIntervalType.Milliseconds;  		return 20;  	}  	if (milliSeconds <= 500) {  		type = DateTimeIntervalType.Milliseconds;  		return 50;  	}  	// Seconds  	double seconds = timeSpan.TotalSeconds;  	if (seconds <= 7) {  		type = DateTimeIntervalType.Seconds;  		return 1;  	} else if (seconds <= 15) {  		type = DateTimeIntervalType.Seconds;  		return 2;  	} else if (seconds <= 30) {  		type = DateTimeIntervalType.Seconds;  		return 5;  	} else if (seconds <= 60) {  		type = DateTimeIntervalType.Seconds;  		return 10;  	}  } else if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0) {  	// Milli Seconds  	double milliSeconds = timeSpan.TotalMilliseconds;  	if (milliSeconds <= 10) {  		type = DateTimeIntervalType.Milliseconds;  		return 1;  	}  	if (milliSeconds <= 50) {  		type = DateTimeIntervalType.Milliseconds;  		return 4;  	}  	if (milliSeconds <= 200) {  		type = DateTimeIntervalType.Milliseconds;  		return 20;  	}  	if (milliSeconds <= 500) {  		type = DateTimeIntervalType.Milliseconds;  		return 50;  	}  	// Seconds  	double seconds = timeSpan.TotalSeconds;  	if (seconds <= 7) {  		type = DateTimeIntervalType.Seconds;  		return 1;  	} else if (seconds <= 15) {  		type = DateTimeIntervalType.Seconds;  		return 2;  	} else if (seconds <= 30) {  		type = DateTimeIntervalType.Seconds;  		return 5;  	} else if (seconds <= 60) {  		type = DateTimeIntervalType.Seconds;  		return 10;  	}  } else if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0) {  	// Milli Seconds  	double milliSeconds = timeSpan.TotalMilliseconds;  	if (milliSeconds <= 10) {  		type = DateTimeIntervalType.Milliseconds;  		return 1;  	}  	if (milliSeconds <= 50) {  		type = DateTimeIntervalType.Milliseconds;  		return 4;  	}  	if (milliSeconds <= 200) {  		type = DateTimeIntervalType.Milliseconds;  		return 20;  	}  	if (milliSeconds <= 500) {  		type = DateTimeIntervalType.Milliseconds;  		return 50;  	}  	// Seconds  	double seconds = timeSpan.TotalSeconds;  	if (seconds <= 7) {  		type = DateTimeIntervalType.Seconds;  		return 1;  	} else if (seconds <= 15) {  		type = DateTimeIntervalType.Seconds;  		return 2;  	} else if (seconds <= 30) {  		type = DateTimeIntervalType.Seconds;  		return 5;  	} else if (seconds <= 60) {  		type = DateTimeIntervalType.Seconds;  		return 10;  	}  } else if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0) {  	// Milli Seconds  	double milliSeconds = timeSpan.TotalMilliseconds;  	if (milliSeconds <= 10) {  		type = DateTimeIntervalType.Milliseconds;  		return 1;  	}  	if (milliSeconds <= 50) {  		type = DateTimeIntervalType.Milliseconds;  		return 4;  	}  	if (milliSeconds <= 200) {  		type = DateTimeIntervalType.Milliseconds;  		return 20;  	}  	if (milliSeconds <= 500) {  		type = DateTimeIntervalType.Milliseconds;  		return 50;  	}  	// Seconds  	double seconds = timeSpan.TotalSeconds;  	if (seconds <= 7) {  		type = DateTimeIntervalType.Seconds;  		return 1;  	} else if (seconds <= 15) {  		type = DateTimeIntervalType.Seconds;  		return 2;  	} else if (seconds <= 30) {  		type = DateTimeIntervalType.Seconds;  		return 5;  	} else if (seconds <= 60) {  		type = DateTimeIntervalType.Seconds;  		return 10;  	}  } else if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0) {  	// Milli Seconds  	double milliSeconds = timeSpan.TotalMilliseconds;  	if (milliSeconds <= 10) {  		type = DateTimeIntervalType.Milliseconds;  		return 1;  	}  	if (milliSeconds <= 50) {  		type = DateTimeIntervalType.Milliseconds;  		return 4;  	}  	if (milliSeconds <= 200) {  		type = DateTimeIntervalType.Milliseconds;  		return 20;  	}  	if (milliSeconds <= 500) {  		type = DateTimeIntervalType.Milliseconds;  		return 50;  	}  	// Seconds  	double seconds = timeSpan.TotalSeconds;  	if (seconds <= 7) {  		type = DateTimeIntervalType.Seconds;  		return 1;  	} else if (seconds <= 15) {  		type = DateTimeIntervalType.Seconds;  		return 2;  	} else if (seconds <= 30) {  		type = DateTimeIntervalType.Seconds;  		return 5;  	} else if (seconds <= 60) {  		type = DateTimeIntervalType.Seconds;  		return 10;  	}  } else if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0) {  	// Milli Seconds  	double milliSeconds = timeSpan.TotalMilliseconds;  	if (milliSeconds <= 10) {  		type = DateTimeIntervalType.Milliseconds;  		return 1;  	}  	if (milliSeconds <= 50) {  		type = DateTimeIntervalType.Milliseconds;  		return 4;  	}  	if (milliSeconds <= 200) {  		type = DateTimeIntervalType.Milliseconds;  		return 20;  	}  	if (milliSeconds <= 500) {  		type = DateTimeIntervalType.Milliseconds;  		return 50;  	}  	// Seconds  	double seconds = timeSpan.TotalSeconds;  	if (seconds <= 7) {  		type = DateTimeIntervalType.Seconds;  		return 1;  	} else if (seconds <= 15) {  		type = DateTimeIntervalType.Seconds;  		return 2;  	} else if (seconds <= 30) {  		type = DateTimeIntervalType.Seconds;  		return 5;  	} else if (seconds <= 60) {  		type = DateTimeIntervalType.Seconds;  		return 10;  	}  } else if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0) {  	// Milli Seconds  	double milliSeconds = timeSpan.TotalMilliseconds;  	if (milliSeconds <= 10) {  		type = DateTimeIntervalType.Milliseconds;  		return 1;  	}  	if (milliSeconds <= 50) {  		type = DateTimeIntervalType.Milliseconds;  		return 4;  	}  	if (milliSeconds <= 200) {  		type = DateTimeIntervalType.Milliseconds;  		return 20;  	}  	if (milliSeconds <= 500) {  		type = DateTimeIntervalType.Milliseconds;  		return 50;  	}  	// Seconds  	double seconds = timeSpan.TotalSeconds;  	if (seconds <= 7) {  		type = DateTimeIntervalType.Seconds;  		return 1;  	} else if (seconds <= 15) {  		type = DateTimeIntervalType.Seconds;  		return 2;  	} else if (seconds <= 30) {  		type = DateTimeIntervalType.Seconds;  		return 5;  	} else if (seconds <= 60) {  		type = DateTimeIntervalType.Seconds;  		return 10;  	}  } else if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0) {  	// Milli Seconds  	double milliSeconds = timeSpan.TotalMilliseconds;  	if (milliSeconds <= 10) {  		type = DateTimeIntervalType.Milliseconds;  		return 1;  	}  	if (milliSeconds <= 50) {  		type = DateTimeIntervalType.Milliseconds;  		return 4;  	}  	if (milliSeconds <= 200) {  		type = DateTimeIntervalType.Milliseconds;  		return 20;  	}  	if (milliSeconds <= 500) {  		type = DateTimeIntervalType.Milliseconds;  		return 50;  	}  	// Seconds  	double seconds = timeSpan.TotalSeconds;  	if (seconds <= 7) {  		type = DateTimeIntervalType.Seconds;  		return 1;  	} else if (seconds <= 15) {  		type = DateTimeIntervalType.Seconds;  		return 2;  	} else if (seconds <= 30) {  		type = DateTimeIntervalType.Seconds;  		return 5;  	} else if (seconds <= 60) {  		type = DateTimeIntervalType.Seconds;  		return 10;  	}  } else if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0) {  	// Milli Seconds  	double milliSeconds = timeSpan.TotalMilliseconds;  	if (milliSeconds <= 10) {  		type = DateTimeIntervalType.Milliseconds;  		return 1;  	}  	if (milliSeconds <= 50) {  		type = DateTimeIntervalType.Milliseconds;  		return 4;  	}  	if (milliSeconds <= 200) {  		type = DateTimeIntervalType.Milliseconds;  		return 20;  	}  	if (milliSeconds <= 500) {  		type = DateTimeIntervalType.Milliseconds;  		return 50;  	}  	// Seconds  	double seconds = timeSpan.TotalSeconds;  	if (seconds <= 7) {  		type = DateTimeIntervalType.Seconds;  		return 1;  	} else if (seconds <= 15) {  		type = DateTimeIntervalType.Seconds;  		return 2;  	} else if (seconds <= 30) {  		type = DateTimeIntervalType.Seconds;  		return 5;  	} else if (seconds <= 60) {  		type = DateTimeIntervalType.Seconds;  		return 10;  	}  } else if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0) {  	// Milli Seconds  	double milliSeconds = timeSpan.TotalMilliseconds;  	if (milliSeconds <= 10) {  		type = DateTimeIntervalType.Milliseconds;  		return 1;  	}  	if (milliSeconds <= 50) {  		type = DateTimeIntervalType.Milliseconds;  		return 4;  	}  	if (milliSeconds <= 200) {  		type = DateTimeIntervalType.Milliseconds;  		return 20;  	}  	if (milliSeconds <= 500) {  		type = DateTimeIntervalType.Milliseconds;  		return 50;  	}  	// Seconds  	double seconds = timeSpan.TotalSeconds;  	if (seconds <= 7) {  		type = DateTimeIntervalType.Seconds;  		return 1;  	} else if (seconds <= 15) {  		type = DateTimeIntervalType.Seconds;  		return 2;  	} else if (seconds <= 30) {  		type = DateTimeIntervalType.Seconds;  		return 5;  	} else if (seconds <= 60) {  		type = DateTimeIntervalType.Seconds;  		return 10;  	}  } else if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0) {  	// Milli Seconds  	double milliSeconds = timeSpan.TotalMilliseconds;  	if (milliSeconds <= 10) {  		type = DateTimeIntervalType.Milliseconds;  		return 1;  	}  	if (milliSeconds <= 50) {  		type = DateTimeIntervalType.Milliseconds;  		return 4;  	}  	if (milliSeconds <= 200) {  		type = DateTimeIntervalType.Milliseconds;  		return 20;  	}  	if (milliSeconds <= 500) {  		type = DateTimeIntervalType.Milliseconds;  		return 50;  	}  	// Seconds  	double seconds = timeSpan.TotalSeconds;  	if (seconds <= 7) {  		type = DateTimeIntervalType.Seconds;  		return 1;  	} else if (seconds <= 15) {  		type = DateTimeIntervalType.Seconds;  		return 2;  	} else if (seconds <= 30) {  		type = DateTimeIntervalType.Seconds;  		return 5;  	} else if (seconds <= 60) {  		type = DateTimeIntervalType.Seconds;  		return 10;  	}  } else if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0) {  	// Milli Seconds  	double milliSeconds = timeSpan.TotalMilliseconds;  	if (milliSeconds <= 10) {  		type = DateTimeIntervalType.Milliseconds;  		return 1;  	}  	if (milliSeconds <= 50) {  		type = DateTimeIntervalType.Milliseconds;  		return 4;  	}  	if (milliSeconds <= 200) {  		type = DateTimeIntervalType.Milliseconds;  		return 20;  	}  	if (milliSeconds <= 500) {  		type = DateTimeIntervalType.Milliseconds;  		return 50;  	}  	// Seconds  	double seconds = timeSpan.TotalSeconds;  	if (seconds <= 7) {  		type = DateTimeIntervalType.Seconds;  		return 1;  	} else if (seconds <= 15) {  		type = DateTimeIntervalType.Seconds;  		return 2;  	} else if (seconds <= 30) {  		type = DateTimeIntervalType.Seconds;  		return 5;  	} else if (seconds <= 60) {  		type = DateTimeIntervalType.Seconds;  		return 10;  	}  } else if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0) {  	// Milli Seconds  	double milliSeconds = timeSpan.TotalMilliseconds;  	if (milliSeconds <= 10) {  		type = DateTimeIntervalType.Milliseconds;  		return 1;  	}  	if (milliSeconds <= 50) {  		type = DateTimeIntervalType.Milliseconds;  		return 4;  	}  	if (milliSeconds <= 200) {  		type = DateTimeIntervalType.Milliseconds;  		return 20;  	}  	if (milliSeconds <= 500) {  		type = DateTimeIntervalType.Milliseconds;  		return 50;  	}  	// Seconds  	double seconds = timeSpan.TotalSeconds;  	if (seconds <= 7) {  		type = DateTimeIntervalType.Seconds;  		return 1;  	} else if (seconds <= 15) {  		type = DateTimeIntervalType.Seconds;  		return 2;  	} else if (seconds <= 30) {  		type = DateTimeIntervalType.Seconds;  		return 5;  	} else if (seconds <= 60) {  		type = DateTimeIntervalType.Seconds;  		return 10;  	}  } else if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0) {  	// Milli Seconds  	double milliSeconds = timeSpan.TotalMilliseconds;  	if (milliSeconds <= 10) {  		type = DateTimeIntervalType.Milliseconds;  		return 1;  	}  	if (milliSeconds <= 50) {  		type = DateTimeIntervalType.Milliseconds;  		return 4;  	}  	if (milliSeconds <= 200) {  		type = DateTimeIntervalType.Milliseconds;  		return 20;  	}  	if (milliSeconds <= 500) {  		type = DateTimeIntervalType.Milliseconds;  		return 50;  	}  	// Seconds  	double seconds = timeSpan.TotalSeconds;  	if (seconds <= 7) {  		type = DateTimeIntervalType.Seconds;  		return 1;  	} else if (seconds <= 15) {  		type = DateTimeIntervalType.Seconds;  		return 2;  	} else if (seconds <= 30) {  		type = DateTimeIntervalType.Seconds;  		return 5;  	} else if (seconds <= 60) {  		type = DateTimeIntervalType.Seconds;  		return 10;  	}  } else if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0) {  	// Milli Seconds  	double milliSeconds = timeSpan.TotalMilliseconds;  	if (milliSeconds <= 10) {  		type = DateTimeIntervalType.Milliseconds;  		return 1;  	}  	if (milliSeconds <= 50) {  		type = DateTimeIntervalType.Milliseconds;  		return 4;  	}  	if (milliSeconds <= 200) {  		type = DateTimeIntervalType.Milliseconds;  		return 20;  	}  	if (milliSeconds <= 500) {  		type = DateTimeIntervalType.Milliseconds;  		return 50;  	}  	// Seconds  	double seconds = timeSpan.TotalSeconds;  	if (seconds <= 7) {  		type = DateTimeIntervalType.Seconds;  		return 1;  	} else if (seconds <= 15) {  		type = DateTimeIntervalType.Seconds;  		return 2;  	} else if (seconds <= 30) {  		type = DateTimeIntervalType.Seconds;  		return 5;  	} else if (seconds <= 60) {  		type = DateTimeIntervalType.Seconds;  		return 10;  	}  } else if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0) {  	// Milli Seconds  	double milliSeconds = timeSpan.TotalMilliseconds;  	if (milliSeconds <= 10) {  		type = DateTimeIntervalType.Milliseconds;  		return 1;  	}  	if (milliSeconds <= 50) {  		type = DateTimeIntervalType.Milliseconds;  		return 4;  	}  	if (milliSeconds <= 200) {  		type = DateTimeIntervalType.Milliseconds;  		return 20;  	}  	if (milliSeconds <= 500) {  		type = DateTimeIntervalType.Milliseconds;  		return 50;  	}  	// Seconds  	double seconds = timeSpan.TotalSeconds;  	if (seconds <= 7) {  		type = DateTimeIntervalType.Seconds;  		return 1;  	} else if (seconds <= 15) {  		type = DateTimeIntervalType.Seconds;  		return 2;  	} else if (seconds <= 30) {  		type = DateTimeIntervalType.Seconds;  		return 5;  	} else if (seconds <= 60) {  		type = DateTimeIntervalType.Seconds;  		return 10;  	}  } else if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0) {  	// Milli Seconds  	double milliSeconds = timeSpan.TotalMilliseconds;  	if (milliSeconds <= 10) {  		type = DateTimeIntervalType.Milliseconds;  		return 1;  	}  	if (milliSeconds <= 50) {  		type = DateTimeIntervalType.Milliseconds;  		return 4;  	}  	if (milliSeconds <= 200) {  		type = DateTimeIntervalType.Milliseconds;  		return 20;  	}  	if (milliSeconds <= 500) {  		type = DateTimeIntervalType.Milliseconds;  		return 50;  	}  	// Seconds  	double seconds = timeSpan.TotalSeconds;  	if (seconds <= 7) {  		type = DateTimeIntervalType.Seconds;  		return 1;  	} else if (seconds <= 15) {  		type = DateTimeIntervalType.Seconds;  		return 2;  	} else if (seconds <= 30) {  		type = DateTimeIntervalType.Seconds;  		return 5;  	} else if (seconds <= 60) {  		type = DateTimeIntervalType.Seconds;  		return 10;  	}  } else if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0) {  	// Milli Seconds  	double milliSeconds = timeSpan.TotalMilliseconds;  	if (milliSeconds <= 10) {  		type = DateTimeIntervalType.Milliseconds;  		return 1;  	}  	if (milliSeconds <= 50) {  		type = DateTimeIntervalType.Milliseconds;  		return 4;  	}  	if (milliSeconds <= 200) {  		type = DateTimeIntervalType.Milliseconds;  		return 20;  	}  	if (milliSeconds <= 500) {  		type = DateTimeIntervalType.Milliseconds;  		return 50;  	}  	// Seconds  	double seconds = timeSpan.TotalSeconds;  	if (seconds <= 7) {  		type = DateTimeIntervalType.Seconds;  		return 1;  	} else if (seconds <= 15) {  		type = DateTimeIntervalType.Seconds;  		return 2;  	} else if (seconds <= 30) {  		type = DateTimeIntervalType.Seconds;  		return 5;  	} else if (seconds <= 60) {  		type = DateTimeIntervalType.Seconds;  		return 10;  	}  } else if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0) {  	// Milli Seconds  	double milliSeconds = timeSpan.TotalMilliseconds;  	if (milliSeconds <= 10) {  		type = DateTimeIntervalType.Milliseconds;  		return 1;  	}  	if (milliSeconds <= 50) {  		type = DateTimeIntervalType.Milliseconds;  		return 4;  	}  	if (milliSeconds <= 200) {  		type = DateTimeIntervalType.Milliseconds;  		return 20;  	}  	if (milliSeconds <= 500) {  		type = DateTimeIntervalType.Milliseconds;  		return 50;  	}  	// Seconds  	double seconds = timeSpan.TotalSeconds;  	if (seconds <= 7) {  		type = DateTimeIntervalType.Seconds;  		return 1;  	} else if (seconds <= 15) {  		type = DateTimeIntervalType.Seconds;  		return 2;  	} else if (seconds <= 30) {  		type = DateTimeIntervalType.Seconds;  		return 5;  	} else if (seconds <= 60) {  		type = DateTimeIntervalType.Seconds;  		return 10;  	}  } else if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0) {  	// Milli Seconds  	double milliSeconds = timeSpan.TotalMilliseconds;  	if (milliSeconds <= 10) {  		type = DateTimeIntervalType.Milliseconds;  		return 1;  	}  	if (milliSeconds <= 50) {  		type = DateTimeIntervalType.Milliseconds;  		return 4;  	}  	if (milliSeconds <= 200) {  		type = DateTimeIntervalType.Milliseconds;  		return 20;  	}  	if (milliSeconds <= 500) {  		type = DateTimeIntervalType.Milliseconds;  		return 50;  	}  	// Seconds  	double seconds = timeSpan.TotalSeconds;  	if (seconds <= 7) {  		type = DateTimeIntervalType.Seconds;  		return 1;  	} else if (seconds <= 15) {  		type = DateTimeIntervalType.Seconds;  		return 2;  	} else if (seconds <= 30) {  		type = DateTimeIntervalType.Seconds;  		return 5;  	} else if (seconds <= 60) {  		type = DateTimeIntervalType.Seconds;  		return 10;  	}  } else if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0) {  	// Milli Seconds  	double milliSeconds = timeSpan.TotalMilliseconds;  	if (milliSeconds <= 10) {  		type = DateTimeIntervalType.Milliseconds;  		return 1;  	}  	if (milliSeconds <= 50) {  		type = DateTimeIntervalType.Milliseconds;  		return 4;  	}  	if (milliSeconds <= 200) {  		type = DateTimeIntervalType.Milliseconds;  		return 20;  	}  	if (milliSeconds <= 500) {  		type = DateTimeIntervalType.Milliseconds;  		return 50;  	}  	// Seconds  	double seconds = timeSpan.TotalSeconds;  	if (seconds <= 7) {  		type = DateTimeIntervalType.Seconds;  		return 1;  	} else if (seconds <= 15) {  		type = DateTimeIntervalType.Seconds;  		return 2;  	} else if (seconds <= 30) {  		type = DateTimeIntervalType.Seconds;  		return 5;  	} else if (seconds <= 60) {  		type = DateTimeIntervalType.Seconds;  		return 10;  	}  } else if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0) {  	// Milli Seconds  	double milliSeconds = timeSpan.TotalMilliseconds;  	if (milliSeconds <= 10) {  		type = DateTimeIntervalType.Milliseconds;  		return 1;  	}  	if (milliSeconds <= 50) {  		type = DateTimeIntervalType.Milliseconds;  		return 4;  	}  	if (milliSeconds <= 200) {  		type = DateTimeIntervalType.Milliseconds;  		return 20;  	}  	if (milliSeconds <= 500) {  		type = DateTimeIntervalType.Milliseconds;  		return 50;  	}  	// Seconds  	double seconds = timeSpan.TotalSeconds;  	if (seconds <= 7) {  		type = DateTimeIntervalType.Seconds;  		return 1;  	} else if (seconds <= 15) {  		type = DateTimeIntervalType.Seconds;  		return 2;  	} else if (seconds <= 30) {  		type = DateTimeIntervalType.Seconds;  		return 5;  	} else if (seconds <= 60) {  		type = DateTimeIntervalType.Seconds;  		return 10;  	}  } else if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0) {  	// Milli Seconds  	double milliSeconds = timeSpan.TotalMilliseconds;  	if (milliSeconds <= 10) {  		type = DateTimeIntervalType.Milliseconds;  		return 1;  	}  	if (milliSeconds <= 50) {  		type = DateTimeIntervalType.Milliseconds;  		return 4;  	}  	if (milliSeconds <= 200) {  		type = DateTimeIntervalType.Milliseconds;  		return 20;  	}  	if (milliSeconds <= 500) {  		type = DateTimeIntervalType.Milliseconds;  		return 50;  	}  	// Seconds  	double seconds = timeSpan.TotalSeconds;  	if (seconds <= 7) {  		type = DateTimeIntervalType.Seconds;  		return 1;  	} else if (seconds <= 15) {  		type = DateTimeIntervalType.Seconds;  		return 2;  	} else if (seconds <= 30) {  		type = DateTimeIntervalType.Seconds;  		return 5;  	} else if (seconds <= 60) {  		type = DateTimeIntervalType.Seconds;  		return 10;  	}  } else if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0) {  	// Milli Seconds  	double milliSeconds = timeSpan.TotalMilliseconds;  	if (milliSeconds <= 10) {  		type = DateTimeIntervalType.Milliseconds;  		return 1;  	}  	if (milliSeconds <= 50) {  		type = DateTimeIntervalType.Milliseconds;  		return 4;  	}  	if (milliSeconds <= 200) {  		type = DateTimeIntervalType.Milliseconds;  		return 20;  	}  	if (milliSeconds <= 500) {  		type = DateTimeIntervalType.Milliseconds;  		return 50;  	}  	// Seconds  	double seconds = timeSpan.TotalSeconds;  	if (seconds <= 7) {  		type = DateTimeIntervalType.Seconds;  		return 1;  	} else if (seconds <= 15) {  		type = DateTimeIntervalType.Seconds;  		return 2;  	} else if (seconds <= 30) {  		type = DateTimeIntervalType.Seconds;  		return 5;  	} else if (seconds <= 60) {  		type = DateTimeIntervalType.Seconds;  		return 10;  	}  } else if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0) {  	// Milli Seconds  	double milliSeconds = timeSpan.TotalMilliseconds;  	if (milliSeconds <= 10) {  		type = DateTimeIntervalType.Milliseconds;  		return 1;  	}  	if (milliSeconds <= 50) {  		type = DateTimeIntervalType.Milliseconds;  		return 4;  	}  	if (milliSeconds <= 200) {  		type = DateTimeIntervalType.Milliseconds;  		return 20;  	}  	if (milliSeconds <= 500) {  		type = DateTimeIntervalType.Milliseconds;  		return 50;  	}  	// Seconds  	double seconds = timeSpan.TotalSeconds;  	if (seconds <= 7) {  		type = DateTimeIntervalType.Seconds;  		return 1;  	} else if (seconds <= 15) {  		type = DateTimeIntervalType.Seconds;  		return 2;  	} else if (seconds <= 30) {  		type = DateTimeIntervalType.Seconds;  		return 5;  	} else if (seconds <= 60) {  		type = DateTimeIntervalType.Seconds;  		return 10;  	}  } else if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0) {  	// Milli Seconds  	double milliSeconds = timeSpan.TotalMilliseconds;  	if (milliSeconds <= 10) {  		type = DateTimeIntervalType.Milliseconds;  		return 1;  	}  	if (milliSeconds <= 50) {  		type = DateTimeIntervalType.Milliseconds;  		return 4;  	}  	if (milliSeconds <= 200) {  		type = DateTimeIntervalType.Milliseconds;  		return 20;  	}  	if (milliSeconds <= 500) {  		type = DateTimeIntervalType.Milliseconds;  		return 50;  	}  	// Seconds  	double seconds = timeSpan.TotalSeconds;  	if (seconds <= 7) {  		type = DateTimeIntervalType.Seconds;  		return 1;  	} else if (seconds <= 15) {  		type = DateTimeIntervalType.Seconds;  		return 2;  	} else if (seconds <= 30) {  		type = DateTimeIntervalType.Seconds;  		return 5;  	} else if (seconds <= 60) {  		type = DateTimeIntervalType.Seconds;  		return 10;  	}  } else if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0) {  	// Milli Seconds  	double milliSeconds = timeSpan.TotalMilliseconds;  	if (milliSeconds <= 10) {  		type = DateTimeIntervalType.Milliseconds;  		return 1;  	}  	if (milliSeconds <= 50) {  		type = DateTimeIntervalType.Milliseconds;  		return 4;  	}  	if (milliSeconds <= 200) {  		type = DateTimeIntervalType.Milliseconds;  		return 20;  	}  	if (milliSeconds <= 500) {  		type = DateTimeIntervalType.Milliseconds;  		return 50;  	}  	// Seconds  	double seconds = timeSpan.TotalSeconds;  	if (seconds <= 7) {  		type = DateTimeIntervalType.Seconds;  		return 1;  	} else if (seconds <= 15) {  		type = DateTimeIntervalType.Seconds;  		return 2;  	} else if (seconds <= 30) {  		type = DateTimeIntervalType.Seconds;  		return 5;  	} else if (seconds <= 60) {  		type = DateTimeIntervalType.Seconds;  		return 10;  	}  } else if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0) {  	// Milli Seconds  	double milliSeconds = timeSpan.TotalMilliseconds;  	if (milliSeconds <= 10) {  		type = DateTimeIntervalType.Milliseconds;  		return 1;  	}  	if (milliSeconds <= 50) {  		type = DateTimeIntervalType.Milliseconds;  		return 4;  	}  	if (milliSeconds <= 200) {  		type = DateTimeIntervalType.Milliseconds;  		return 20;  	}  	if (milliSeconds <= 500) {  		type = DateTimeIntervalType.Milliseconds;  		return 50;  	}  	// Seconds  	double seconds = timeSpan.TotalSeconds;  	if (seconds <= 7) {  		type = DateTimeIntervalType.Seconds;  		return 1;  	} else if (seconds <= 15) {  		type = DateTimeIntervalType.Seconds;  		return 2;  	} else if (seconds <= 30) {  		type = DateTimeIntervalType.Seconds;  		return 5;  	} else if (seconds <= 60) {  		type = DateTimeIntervalType.Seconds;  		return 10;  	}  } else if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0) {  	// Milli Seconds  	double milliSeconds = timeSpan.TotalMilliseconds;  	if (milliSeconds <= 10) {  		type = DateTimeIntervalType.Milliseconds;  		return 1;  	}  	if (milliSeconds <= 50) {  		type = DateTimeIntervalType.Milliseconds;  		return 4;  	}  	if (milliSeconds <= 200) {  		type = DateTimeIntervalType.Milliseconds;  		return 20;  	}  	if (milliSeconds <= 500) {  		type = DateTimeIntervalType.Milliseconds;  		return 50;  	}  	// Seconds  	double seconds = timeSpan.TotalSeconds;  	if (seconds <= 7) {  		type = DateTimeIntervalType.Seconds;  		return 1;  	} else if (seconds <= 15) {  		type = DateTimeIntervalType.Seconds;  		return 2;  	} else if (seconds <= 30) {  		type = DateTimeIntervalType.Seconds;  		return 5;  	} else if (seconds <= 60) {  		type = DateTimeIntervalType.Seconds;  		return 10;  	}  } else if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0) {  	// Milli Seconds  	double milliSeconds = timeSpan.TotalMilliseconds;  	if (milliSeconds <= 10) {  		type = DateTimeIntervalType.Milliseconds;  		return 1;  	}  	if (milliSeconds <= 50) {  		type = DateTimeIntervalType.Milliseconds;  		return 4;  	}  	if (milliSeconds <= 200) {  		type = DateTimeIntervalType.Milliseconds;  		return 20;  	}  	if (milliSeconds <= 500) {  		type = DateTimeIntervalType.Milliseconds;  		return 50;  	}  	// Seconds  	double seconds = timeSpan.TotalSeconds;  	if (seconds <= 7) {  		type = DateTimeIntervalType.Seconds;  		return 1;  	} else if (seconds <= 15) {  		type = DateTimeIntervalType.Seconds;  		return 2;  	} else if (seconds <= 30) {  		type = DateTimeIntervalType.Seconds;  		return 5;  	} else if (seconds <= 60) {  		type = DateTimeIntervalType.Seconds;  		return 10;  	}  } else if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (milliSeconds <= 10) {  	type = DateTimeIntervalType.Milliseconds;  	return 1;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (milliSeconds <= 50) {  	type = DateTimeIntervalType.Milliseconds;  	return 4;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (milliSeconds <= 50) {  	type = DateTimeIntervalType.Milliseconds;  	return 4;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: return 4;  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (milliSeconds <= 200) {  	type = DateTimeIntervalType.Milliseconds;  	return 20;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (milliSeconds <= 200) {  	type = DateTimeIntervalType.Milliseconds;  	return 20;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: return 20;  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (milliSeconds <= 500) {  	type = DateTimeIntervalType.Milliseconds;  	return 50;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (milliSeconds <= 500) {  	type = DateTimeIntervalType.Milliseconds;  	return 50;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: return 50;  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (seconds <= 7) {  	type = DateTimeIntervalType.Seconds;  	return 1;  } else if (seconds <= 15) {  	type = DateTimeIntervalType.Seconds;  	return 2;  } else if (seconds <= 30) {  	type = DateTimeIntervalType.Seconds;  	return 5;  } else if (seconds <= 60) {  	type = DateTimeIntervalType.Seconds;  	return 10;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (seconds <= 7) {  	type = DateTimeIntervalType.Seconds;  	return 1;  } else if (seconds <= 15) {  	type = DateTimeIntervalType.Seconds;  	return 2;  } else if (seconds <= 30) {  	type = DateTimeIntervalType.Seconds;  	return 5;  } else if (seconds <= 60) {  	type = DateTimeIntervalType.Seconds;  	return 10;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (seconds <= 7) {  	type = DateTimeIntervalType.Seconds;  	return 1;  } else if (seconds <= 15) {  	type = DateTimeIntervalType.Seconds;  	return 2;  } else if (seconds <= 30) {  	type = DateTimeIntervalType.Seconds;  	return 5;  } else if (seconds <= 60) {  	type = DateTimeIntervalType.Seconds;  	return 10;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (seconds <= 7) {  	type = DateTimeIntervalType.Seconds;  	return 1;  } else if (seconds <= 15) {  	type = DateTimeIntervalType.Seconds;  	return 2;  } else if (seconds <= 30) {  	type = DateTimeIntervalType.Seconds;  	return 5;  } else if (seconds <= 60) {  	type = DateTimeIntervalType.Seconds;  	return 10;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (seconds <= 7) {  	type = DateTimeIntervalType.Seconds;  	return 1;  } else if (seconds <= 15) {  	type = DateTimeIntervalType.Seconds;  	return 2;  } else if (seconds <= 30) {  	type = DateTimeIntervalType.Seconds;  	return 5;  } else if (seconds <= 60) {  	type = DateTimeIntervalType.Seconds;  	return 10;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (seconds <= 7) {  	type = DateTimeIntervalType.Seconds;  	return 1;  } else if (seconds <= 15) {  	type = DateTimeIntervalType.Seconds;  	return 2;  } else if (seconds <= 30) {  	type = DateTimeIntervalType.Seconds;  	return 5;  } else if (seconds <= 60) {  	type = DateTimeIntervalType.Seconds;  	return 10;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (seconds <= 7) {  	type = DateTimeIntervalType.Seconds;  	return 1;  } else if (seconds <= 15) {  	type = DateTimeIntervalType.Seconds;  	return 2;  } else if (seconds <= 30) {  	type = DateTimeIntervalType.Seconds;  	return 5;  } else if (seconds <= 60) {  	type = DateTimeIntervalType.Seconds;  	return 10;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (seconds <= 15) {  	type = DateTimeIntervalType.Seconds;  	return 2;  } else if (seconds <= 30) {  	type = DateTimeIntervalType.Seconds;  	return 5;  } else if (seconds <= 60) {  	type = DateTimeIntervalType.Seconds;  	return 10;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (seconds <= 15) {  	type = DateTimeIntervalType.Seconds;  	return 2;  } else if (seconds <= 30) {  	type = DateTimeIntervalType.Seconds;  	return 5;  } else if (seconds <= 60) {  	type = DateTimeIntervalType.Seconds;  	return 10;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (seconds <= 15) {  	type = DateTimeIntervalType.Seconds;  	return 2;  } else if (seconds <= 30) {  	type = DateTimeIntervalType.Seconds;  	return 5;  } else if (seconds <= 60) {  	type = DateTimeIntervalType.Seconds;  	return 10;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (seconds <= 15) {  	type = DateTimeIntervalType.Seconds;  	return 2;  } else if (seconds <= 30) {  	type = DateTimeIntervalType.Seconds;  	return 5;  } else if (seconds <= 60) {  	type = DateTimeIntervalType.Seconds;  	return 10;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (seconds <= 15) {  	type = DateTimeIntervalType.Seconds;  	return 2;  } else if (seconds <= 30) {  	type = DateTimeIntervalType.Seconds;  	return 5;  } else if (seconds <= 60) {  	type = DateTimeIntervalType.Seconds;  	return 10;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (seconds <= 15) {  	type = DateTimeIntervalType.Seconds;  	return 2;  } else if (seconds <= 30) {  	type = DateTimeIntervalType.Seconds;  	return 5;  } else if (seconds <= 60) {  	type = DateTimeIntervalType.Seconds;  	return 10;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: return 2;  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (seconds <= 30) {  	type = DateTimeIntervalType.Seconds;  	return 5;  } else if (seconds <= 60) {  	type = DateTimeIntervalType.Seconds;  	return 10;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (seconds <= 30) {  	type = DateTimeIntervalType.Seconds;  	return 5;  } else if (seconds <= 60) {  	type = DateTimeIntervalType.Seconds;  	return 10;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (seconds <= 30) {  	type = DateTimeIntervalType.Seconds;  	return 5;  } else if (seconds <= 60) {  	type = DateTimeIntervalType.Seconds;  	return 10;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (seconds <= 30) {  	type = DateTimeIntervalType.Seconds;  	return 5;  } else if (seconds <= 60) {  	type = DateTimeIntervalType.Seconds;  	return 10;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: return 5;  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (seconds <= 60) {  	type = DateTimeIntervalType.Seconds;  	return 10;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (seconds <= 60) {  	type = DateTimeIntervalType.Seconds;  	return 10;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: return 10;  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 2.0) {  	// For Range less than 120 seconds interval is 10 sec  	type = DateTimeIntervalType.Seconds;  	return 20;  } else if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: return 20;  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 3.0) {  	// For Range less than 180 seconds interval is 30 sec  	type = DateTimeIntervalType.Seconds;  	return 30;  } else if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: return 30;  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 10) {  	// For Range less than 10 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 1;  } else if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 20) {  	// For Range less than 20 minutes interval is 1 min  	type = DateTimeIntervalType.Minutes;  	return 2;  } else if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: return 2;  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60) {  	// For Range less than 60 minutes interval is 5 min  	type = DateTimeIntervalType.Minutes;  	return 5;  } else if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: return 5;  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 120) {  	// For Range less than 120 minutes interval is 10 min  	type = DateTimeIntervalType.Minutes;  	return 10;  } else if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: return 10;  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 180) {  	// For Range less than 180 minutes interval is 30 min  	type = DateTimeIntervalType.Minutes;  	return 30;  } else if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: return 30;  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 12) {  	// For Range less than 12 hours interval is 1 hour  	type = DateTimeIntervalType.Hours;  	return 1;  } else if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24) {  	// For Range less than 24 hours interval is 4 hour  	type = DateTimeIntervalType.Hours;  	return 4;  } else if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: return 4;  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 2) {  	// For Range less than 2 days interval is 6 hour  	type = DateTimeIntervalType.Hours;  	return 6;  } else if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: return 6;  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 3) {  	// For Range less than 3 days interval is 12 hour  	type = DateTimeIntervalType.Hours;  	return 12;  } else if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: return 12;  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 10) {  	// For Range less than 10 days interval is 1 day  	type = DateTimeIntervalType.Days;  	return 1;  } else if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 20) {  	// For Range less than 20 days interval is 2 day  	type = DateTimeIntervalType.Days;  	return 2;  } else if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: return 2;  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 30) {  	// For Range less than 30 days interval is 3 day  	type = DateTimeIntervalType.Days;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: return 3;  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 30.5 * 2) {  	// For Range less than 2 months interval is 1 week  	type = DateTimeIntervalType.Weeks;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 30.5 * 5) {  	// For Range less than 5 months interval is 2weeks  	type = DateTimeIntervalType.Weeks;  	return 2;  } else if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: return 2;  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 30.5 * 12) {  	// For Range less than 12 months interval is 1 month  	type = DateTimeIntervalType.Months;  	return 1;  } else if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 30.5 * 24) {  	// For Range less than 24 months interval is 3 month  	type = DateTimeIntervalType.Months;  	return 3;  } else if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: return 3;  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 60 * 24 * 30.5 * 48) {  	// For Range less than 48 months interval is 6 months   	type = DateTimeIntervalType.Months;  	return 6;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: return 6;  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (years < 5) {  	return 1;  } else if (years < 10) {  	return 2;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (years < 5) {  	return 1;  } else if (years < 10) {  	return 2;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (years < 5) {  	return 1;  } else if (years < 10) {  	return 2;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (years < 10) {  	return 2;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (years < 10) {  	return 2;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: return 2;  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: return Math.Floor (years / 5);  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,OverrideDataRange,The following statement contains a magic number: if (range.HasData && this.ActualLength > 1.0) {  	IList<ValueMarginCoordinateAndOverlap> valueMargins = new List<ValueMarginCoordinateAndOverlap> ();  	foreach (ValueMargin valueMargin in this.RegisteredListeners.OfType<IValueMarginProvider> ().SelectMany (provider => provider.GetValueMargins (this))) {  		valueMargins.Add (new ValueMarginCoordinateAndOverlap {  			ValueMargin = valueMargin'  		});  	}  	if (valueMargins.Count > 0) {  		double maximumPixelMarginLength = valueMargins.Select (valueMargin => valueMargin.ValueMargin.LowMargin + valueMargin.ValueMargin.HighMargin).MaxOrNullable ().Value;  		// Requested margin is larger than the axis so give up  		// trying to find a range that will fit it.  		if (maximumPixelMarginLength > this.ActualLength) {  			return range;  		}  		Range<DateTime> currentRange = range.ToDateTimeRange ();  		// Ensure range is not empty.  		if (currentRange.Minimum == currentRange.Maximum) {  			int year = DateTime.Now.Year;  			currentRange = new Range<DateTime> (new DateTime (year' 1' 1)' new DateTime (year + 1' 1' 1));  		}  		// priming the loop  		double actualLength = this.ActualLength;  		ValueMarginCoordinateAndOverlap maxLeftOverlapValueMargin;  		ValueMarginCoordinateAndOverlap maxRightOverlapValueMargin;  		UpdateValueMargins (valueMargins' currentRange.ToComparableRange ());  		GetMaxLeftAndRightOverlap (valueMargins' out maxLeftOverlapValueMargin' out maxRightOverlapValueMargin);  		while (maxLeftOverlapValueMargin.LeftOverlap > 0 || maxRightOverlapValueMargin.RightOverlap > 0) {  			long unitOverPixels = currentRange.GetLength ().Value.Ticks / ((long)actualLength);  			DateTime newMinimum = new DateTime (currentRange.Minimum.Ticks - (long)((maxLeftOverlapValueMargin.LeftOverlap + 0.5) * unitOverPixels));  			DateTime newMaximum = new DateTime (currentRange.Maximum.Ticks + (long)((maxRightOverlapValueMargin.RightOverlap + 0.5) * unitOverPixels));  			currentRange = new Range<DateTime> (newMinimum' newMaximum);  			UpdateValueMargins (valueMargins' currentRange.ToComparableRange ());  			GetMaxLeftAndRightOverlap (valueMargins' out maxLeftOverlapValueMargin' out maxRightOverlapValueMargin);  		}  		return currentRange.ToComparableRange ();  	}  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,OverrideDataRange,The following statement contains a magic number: if (range.HasData && this.ActualLength > 1.0) {  	IList<ValueMarginCoordinateAndOverlap> valueMargins = new List<ValueMarginCoordinateAndOverlap> ();  	foreach (ValueMargin valueMargin in this.RegisteredListeners.OfType<IValueMarginProvider> ().SelectMany (provider => provider.GetValueMargins (this))) {  		valueMargins.Add (new ValueMarginCoordinateAndOverlap {  			ValueMargin = valueMargin'  		});  	}  	if (valueMargins.Count > 0) {  		double maximumPixelMarginLength = valueMargins.Select (valueMargin => valueMargin.ValueMargin.LowMargin + valueMargin.ValueMargin.HighMargin).MaxOrNullable ().Value;  		// Requested margin is larger than the axis so give up  		// trying to find a range that will fit it.  		if (maximumPixelMarginLength > this.ActualLength) {  			return range;  		}  		Range<DateTime> currentRange = range.ToDateTimeRange ();  		// Ensure range is not empty.  		if (currentRange.Minimum == currentRange.Maximum) {  			int year = DateTime.Now.Year;  			currentRange = new Range<DateTime> (new DateTime (year' 1' 1)' new DateTime (year + 1' 1' 1));  		}  		// priming the loop  		double actualLength = this.ActualLength;  		ValueMarginCoordinateAndOverlap maxLeftOverlapValueMargin;  		ValueMarginCoordinateAndOverlap maxRightOverlapValueMargin;  		UpdateValueMargins (valueMargins' currentRange.ToComparableRange ());  		GetMaxLeftAndRightOverlap (valueMargins' out maxLeftOverlapValueMargin' out maxRightOverlapValueMargin);  		while (maxLeftOverlapValueMargin.LeftOverlap > 0 || maxRightOverlapValueMargin.RightOverlap > 0) {  			long unitOverPixels = currentRange.GetLength ().Value.Ticks / ((long)actualLength);  			DateTime newMinimum = new DateTime (currentRange.Minimum.Ticks - (long)((maxLeftOverlapValueMargin.LeftOverlap + 0.5) * unitOverPixels));  			DateTime newMaximum = new DateTime (currentRange.Maximum.Ticks + (long)((maxRightOverlapValueMargin.RightOverlap + 0.5) * unitOverPixels));  			currentRange = new Range<DateTime> (newMinimum' newMaximum);  			UpdateValueMargins (valueMargins' currentRange.ToComparableRange ());  			GetMaxLeftAndRightOverlap (valueMargins' out maxLeftOverlapValueMargin' out maxRightOverlapValueMargin);  		}  		return currentRange.ToComparableRange ();  	}  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,OverrideDataRange,The following statement contains a magic number: if (valueMargins.Count > 0) {  	double maximumPixelMarginLength = valueMargins.Select (valueMargin => valueMargin.ValueMargin.LowMargin + valueMargin.ValueMargin.HighMargin).MaxOrNullable ().Value;  	// Requested margin is larger than the axis so give up  	// trying to find a range that will fit it.  	if (maximumPixelMarginLength > this.ActualLength) {  		return range;  	}  	Range<DateTime> currentRange = range.ToDateTimeRange ();  	// Ensure range is not empty.  	if (currentRange.Minimum == currentRange.Maximum) {  		int year = DateTime.Now.Year;  		currentRange = new Range<DateTime> (new DateTime (year' 1' 1)' new DateTime (year + 1' 1' 1));  	}  	// priming the loop  	double actualLength = this.ActualLength;  	ValueMarginCoordinateAndOverlap maxLeftOverlapValueMargin;  	ValueMarginCoordinateAndOverlap maxRightOverlapValueMargin;  	UpdateValueMargins (valueMargins' currentRange.ToComparableRange ());  	GetMaxLeftAndRightOverlap (valueMargins' out maxLeftOverlapValueMargin' out maxRightOverlapValueMargin);  	while (maxLeftOverlapValueMargin.LeftOverlap > 0 || maxRightOverlapValueMargin.RightOverlap > 0) {  		long unitOverPixels = currentRange.GetLength ().Value.Ticks / ((long)actualLength);  		DateTime newMinimum = new DateTime (currentRange.Minimum.Ticks - (long)((maxLeftOverlapValueMargin.LeftOverlap + 0.5) * unitOverPixels));  		DateTime newMaximum = new DateTime (currentRange.Maximum.Ticks + (long)((maxRightOverlapValueMargin.RightOverlap + 0.5) * unitOverPixels));  		currentRange = new Range<DateTime> (newMinimum' newMaximum);  		UpdateValueMargins (valueMargins' currentRange.ToComparableRange ());  		GetMaxLeftAndRightOverlap (valueMargins' out maxLeftOverlapValueMargin' out maxRightOverlapValueMargin);  	}  	return currentRange.ToComparableRange ();  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,OverrideDataRange,The following statement contains a magic number: if (valueMargins.Count > 0) {  	double maximumPixelMarginLength = valueMargins.Select (valueMargin => valueMargin.ValueMargin.LowMargin + valueMargin.ValueMargin.HighMargin).MaxOrNullable ().Value;  	// Requested margin is larger than the axis so give up  	// trying to find a range that will fit it.  	if (maximumPixelMarginLength > this.ActualLength) {  		return range;  	}  	Range<DateTime> currentRange = range.ToDateTimeRange ();  	// Ensure range is not empty.  	if (currentRange.Minimum == currentRange.Maximum) {  		int year = DateTime.Now.Year;  		currentRange = new Range<DateTime> (new DateTime (year' 1' 1)' new DateTime (year + 1' 1' 1));  	}  	// priming the loop  	double actualLength = this.ActualLength;  	ValueMarginCoordinateAndOverlap maxLeftOverlapValueMargin;  	ValueMarginCoordinateAndOverlap maxRightOverlapValueMargin;  	UpdateValueMargins (valueMargins' currentRange.ToComparableRange ());  	GetMaxLeftAndRightOverlap (valueMargins' out maxLeftOverlapValueMargin' out maxRightOverlapValueMargin);  	while (maxLeftOverlapValueMargin.LeftOverlap > 0 || maxRightOverlapValueMargin.RightOverlap > 0) {  		long unitOverPixels = currentRange.GetLength ().Value.Ticks / ((long)actualLength);  		DateTime newMinimum = new DateTime (currentRange.Minimum.Ticks - (long)((maxLeftOverlapValueMargin.LeftOverlap + 0.5) * unitOverPixels));  		DateTime newMaximum = new DateTime (currentRange.Maximum.Ticks + (long)((maxRightOverlapValueMargin.RightOverlap + 0.5) * unitOverPixels));  		currentRange = new Range<DateTime> (newMinimum' newMaximum);  		UpdateValueMargins (valueMargins' currentRange.ToComparableRange ());  		GetMaxLeftAndRightOverlap (valueMargins' out maxLeftOverlapValueMargin' out maxRightOverlapValueMargin);  	}  	return currentRange.ToComparableRange ();  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,OverrideDataRange,The following statement contains a magic number: while (maxLeftOverlapValueMargin.LeftOverlap > 0 || maxRightOverlapValueMargin.RightOverlap > 0) {  	long unitOverPixels = currentRange.GetLength ().Value.Ticks / ((long)actualLength);  	DateTime newMinimum = new DateTime (currentRange.Minimum.Ticks - (long)((maxLeftOverlapValueMargin.LeftOverlap + 0.5) * unitOverPixels));  	DateTime newMaximum = new DateTime (currentRange.Maximum.Ticks + (long)((maxRightOverlapValueMargin.RightOverlap + 0.5) * unitOverPixels));  	currentRange = new Range<DateTime> (newMinimum' newMaximum);  	UpdateValueMargins (valueMargins' currentRange.ToComparableRange ());  	GetMaxLeftAndRightOverlap (valueMargins' out maxLeftOverlapValueMargin' out maxRightOverlapValueMargin);  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,OverrideDataRange,The following statement contains a magic number: while (maxLeftOverlapValueMargin.LeftOverlap > 0 || maxRightOverlapValueMargin.RightOverlap > 0) {  	long unitOverPixels = currentRange.GetLength ().Value.Ticks / ((long)actualLength);  	DateTime newMinimum = new DateTime (currentRange.Minimum.Ticks - (long)((maxLeftOverlapValueMargin.LeftOverlap + 0.5) * unitOverPixels));  	DateTime newMaximum = new DateTime (currentRange.Maximum.Ticks + (long)((maxRightOverlapValueMargin.RightOverlap + 0.5) * unitOverPixels));  	currentRange = new Range<DateTime> (newMinimum' newMaximum);  	UpdateValueMargins (valueMargins' currentRange.ToComparableRange ());  	GetMaxLeftAndRightOverlap (valueMargins' out maxLeftOverlapValueMargin' out maxRightOverlapValueMargin);  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,OrientedAxisGridLines,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\OrientedAxisGridLines.cs,Invalidate,The following statement contains a magic number: try {  	IList<UnitValue> intervals = Axis.InternalGetMajorGridLinePositions ().ToList ();  	this.Children.Clear ();  	double maximumHeight = Math.Max (Math.Round (ActualHeight - 1)' 0);  	double maximumWidth = Math.Max (Math.Round (ActualWidth - 1)' 0);  	for (int index = 0; index < intervals.Count; index++) {  		double currentValue = intervals [index].Value;  		double position = currentValue;  		if (!double.IsNaN (position)) {  			Line line = _gridLinePool.Next ();  			if (Axis.Orientation == AxisOrientation.Y) {  				line.Y1 = line.Y2 = maximumHeight - Math.Round (position - (line.StrokeThickness / 2));  				line.X1 = 0.0;  				line.X2 = maximumWidth;  			} else if (Axis.Orientation == AxisOrientation.X) {  				line.X1 = line.X2 = Math.Round (position - (line.StrokeThickness / 2));  				line.Y1 = 0.0;  				line.Y2 = maximumHeight;  			}  			// workaround for '1px line thickness issue'  			if (line.StrokeThickness % 2 > 0) {  				line.SetValue (Canvas.LeftProperty' 0.5);  				line.SetValue (Canvas.TopProperty' 0.5);  			}  			this.Children.Add (line);  		}  	}  } finally {  	_gridLinePool.Done ();  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,OrientedAxisGridLines,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\OrientedAxisGridLines.cs,Invalidate,The following statement contains a magic number: try {  	IList<UnitValue> intervals = Axis.InternalGetMajorGridLinePositions ().ToList ();  	this.Children.Clear ();  	double maximumHeight = Math.Max (Math.Round (ActualHeight - 1)' 0);  	double maximumWidth = Math.Max (Math.Round (ActualWidth - 1)' 0);  	for (int index = 0; index < intervals.Count; index++) {  		double currentValue = intervals [index].Value;  		double position = currentValue;  		if (!double.IsNaN (position)) {  			Line line = _gridLinePool.Next ();  			if (Axis.Orientation == AxisOrientation.Y) {  				line.Y1 = line.Y2 = maximumHeight - Math.Round (position - (line.StrokeThickness / 2));  				line.X1 = 0.0;  				line.X2 = maximumWidth;  			} else if (Axis.Orientation == AxisOrientation.X) {  				line.X1 = line.X2 = Math.Round (position - (line.StrokeThickness / 2));  				line.Y1 = 0.0;  				line.Y2 = maximumHeight;  			}  			// workaround for '1px line thickness issue'  			if (line.StrokeThickness % 2 > 0) {  				line.SetValue (Canvas.LeftProperty' 0.5);  				line.SetValue (Canvas.TopProperty' 0.5);  			}  			this.Children.Add (line);  		}  	}  } finally {  	_gridLinePool.Done ();  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,OrientedAxisGridLines,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\OrientedAxisGridLines.cs,Invalidate,The following statement contains a magic number: try {  	IList<UnitValue> intervals = Axis.InternalGetMajorGridLinePositions ().ToList ();  	this.Children.Clear ();  	double maximumHeight = Math.Max (Math.Round (ActualHeight - 1)' 0);  	double maximumWidth = Math.Max (Math.Round (ActualWidth - 1)' 0);  	for (int index = 0; index < intervals.Count; index++) {  		double currentValue = intervals [index].Value;  		double position = currentValue;  		if (!double.IsNaN (position)) {  			Line line = _gridLinePool.Next ();  			if (Axis.Orientation == AxisOrientation.Y) {  				line.Y1 = line.Y2 = maximumHeight - Math.Round (position - (line.StrokeThickness / 2));  				line.X1 = 0.0;  				line.X2 = maximumWidth;  			} else if (Axis.Orientation == AxisOrientation.X) {  				line.X1 = line.X2 = Math.Round (position - (line.StrokeThickness / 2));  				line.Y1 = 0.0;  				line.Y2 = maximumHeight;  			}  			// workaround for '1px line thickness issue'  			if (line.StrokeThickness % 2 > 0) {  				line.SetValue (Canvas.LeftProperty' 0.5);  				line.SetValue (Canvas.TopProperty' 0.5);  			}  			this.Children.Add (line);  		}  	}  } finally {  	_gridLinePool.Done ();  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,OrientedAxisGridLines,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\OrientedAxisGridLines.cs,Invalidate,The following statement contains a magic number: try {  	IList<UnitValue> intervals = Axis.InternalGetMajorGridLinePositions ().ToList ();  	this.Children.Clear ();  	double maximumHeight = Math.Max (Math.Round (ActualHeight - 1)' 0);  	double maximumWidth = Math.Max (Math.Round (ActualWidth - 1)' 0);  	for (int index = 0; index < intervals.Count; index++) {  		double currentValue = intervals [index].Value;  		double position = currentValue;  		if (!double.IsNaN (position)) {  			Line line = _gridLinePool.Next ();  			if (Axis.Orientation == AxisOrientation.Y) {  				line.Y1 = line.Y2 = maximumHeight - Math.Round (position - (line.StrokeThickness / 2));  				line.X1 = 0.0;  				line.X2 = maximumWidth;  			} else if (Axis.Orientation == AxisOrientation.X) {  				line.X1 = line.X2 = Math.Round (position - (line.StrokeThickness / 2));  				line.Y1 = 0.0;  				line.Y2 = maximumHeight;  			}  			// workaround for '1px line thickness issue'  			if (line.StrokeThickness % 2 > 0) {  				line.SetValue (Canvas.LeftProperty' 0.5);  				line.SetValue (Canvas.TopProperty' 0.5);  			}  			this.Children.Add (line);  		}  	}  } finally {  	_gridLinePool.Done ();  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,OrientedAxisGridLines,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\OrientedAxisGridLines.cs,Invalidate,The following statement contains a magic number: try {  	IList<UnitValue> intervals = Axis.InternalGetMajorGridLinePositions ().ToList ();  	this.Children.Clear ();  	double maximumHeight = Math.Max (Math.Round (ActualHeight - 1)' 0);  	double maximumWidth = Math.Max (Math.Round (ActualWidth - 1)' 0);  	for (int index = 0; index < intervals.Count; index++) {  		double currentValue = intervals [index].Value;  		double position = currentValue;  		if (!double.IsNaN (position)) {  			Line line = _gridLinePool.Next ();  			if (Axis.Orientation == AxisOrientation.Y) {  				line.Y1 = line.Y2 = maximumHeight - Math.Round (position - (line.StrokeThickness / 2));  				line.X1 = 0.0;  				line.X2 = maximumWidth;  			} else if (Axis.Orientation == AxisOrientation.X) {  				line.X1 = line.X2 = Math.Round (position - (line.StrokeThickness / 2));  				line.Y1 = 0.0;  				line.Y2 = maximumHeight;  			}  			// workaround for '1px line thickness issue'  			if (line.StrokeThickness % 2 > 0) {  				line.SetValue (Canvas.LeftProperty' 0.5);  				line.SetValue (Canvas.TopProperty' 0.5);  			}  			this.Children.Add (line);  		}  	}  } finally {  	_gridLinePool.Done ();  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,OrientedAxisGridLines,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\OrientedAxisGridLines.cs,Invalidate,The following statement contains a magic number: for (int index = 0; index < intervals.Count; index++) {  	double currentValue = intervals [index].Value;  	double position = currentValue;  	if (!double.IsNaN (position)) {  		Line line = _gridLinePool.Next ();  		if (Axis.Orientation == AxisOrientation.Y) {  			line.Y1 = line.Y2 = maximumHeight - Math.Round (position - (line.StrokeThickness / 2));  			line.X1 = 0.0;  			line.X2 = maximumWidth;  		} else if (Axis.Orientation == AxisOrientation.X) {  			line.X1 = line.X2 = Math.Round (position - (line.StrokeThickness / 2));  			line.Y1 = 0.0;  			line.Y2 = maximumHeight;  		}  		// workaround for '1px line thickness issue'  		if (line.StrokeThickness % 2 > 0) {  			line.SetValue (Canvas.LeftProperty' 0.5);  			line.SetValue (Canvas.TopProperty' 0.5);  		}  		this.Children.Add (line);  	}  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,OrientedAxisGridLines,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\OrientedAxisGridLines.cs,Invalidate,The following statement contains a magic number: for (int index = 0; index < intervals.Count; index++) {  	double currentValue = intervals [index].Value;  	double position = currentValue;  	if (!double.IsNaN (position)) {  		Line line = _gridLinePool.Next ();  		if (Axis.Orientation == AxisOrientation.Y) {  			line.Y1 = line.Y2 = maximumHeight - Math.Round (position - (line.StrokeThickness / 2));  			line.X1 = 0.0;  			line.X2 = maximumWidth;  		} else if (Axis.Orientation == AxisOrientation.X) {  			line.X1 = line.X2 = Math.Round (position - (line.StrokeThickness / 2));  			line.Y1 = 0.0;  			line.Y2 = maximumHeight;  		}  		// workaround for '1px line thickness issue'  		if (line.StrokeThickness % 2 > 0) {  			line.SetValue (Canvas.LeftProperty' 0.5);  			line.SetValue (Canvas.TopProperty' 0.5);  		}  		this.Children.Add (line);  	}  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,OrientedAxisGridLines,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\OrientedAxisGridLines.cs,Invalidate,The following statement contains a magic number: for (int index = 0; index < intervals.Count; index++) {  	double currentValue = intervals [index].Value;  	double position = currentValue;  	if (!double.IsNaN (position)) {  		Line line = _gridLinePool.Next ();  		if (Axis.Orientation == AxisOrientation.Y) {  			line.Y1 = line.Y2 = maximumHeight - Math.Round (position - (line.StrokeThickness / 2));  			line.X1 = 0.0;  			line.X2 = maximumWidth;  		} else if (Axis.Orientation == AxisOrientation.X) {  			line.X1 = line.X2 = Math.Round (position - (line.StrokeThickness / 2));  			line.Y1 = 0.0;  			line.Y2 = maximumHeight;  		}  		// workaround for '1px line thickness issue'  		if (line.StrokeThickness % 2 > 0) {  			line.SetValue (Canvas.LeftProperty' 0.5);  			line.SetValue (Canvas.TopProperty' 0.5);  		}  		this.Children.Add (line);  	}  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,OrientedAxisGridLines,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\OrientedAxisGridLines.cs,Invalidate,The following statement contains a magic number: for (int index = 0; index < intervals.Count; index++) {  	double currentValue = intervals [index].Value;  	double position = currentValue;  	if (!double.IsNaN (position)) {  		Line line = _gridLinePool.Next ();  		if (Axis.Orientation == AxisOrientation.Y) {  			line.Y1 = line.Y2 = maximumHeight - Math.Round (position - (line.StrokeThickness / 2));  			line.X1 = 0.0;  			line.X2 = maximumWidth;  		} else if (Axis.Orientation == AxisOrientation.X) {  			line.X1 = line.X2 = Math.Round (position - (line.StrokeThickness / 2));  			line.Y1 = 0.0;  			line.Y2 = maximumHeight;  		}  		// workaround for '1px line thickness issue'  		if (line.StrokeThickness % 2 > 0) {  			line.SetValue (Canvas.LeftProperty' 0.5);  			line.SetValue (Canvas.TopProperty' 0.5);  		}  		this.Children.Add (line);  	}  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,OrientedAxisGridLines,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\OrientedAxisGridLines.cs,Invalidate,The following statement contains a magic number: for (int index = 0; index < intervals.Count; index++) {  	double currentValue = intervals [index].Value;  	double position = currentValue;  	if (!double.IsNaN (position)) {  		Line line = _gridLinePool.Next ();  		if (Axis.Orientation == AxisOrientation.Y) {  			line.Y1 = line.Y2 = maximumHeight - Math.Round (position - (line.StrokeThickness / 2));  			line.X1 = 0.0;  			line.X2 = maximumWidth;  		} else if (Axis.Orientation == AxisOrientation.X) {  			line.X1 = line.X2 = Math.Round (position - (line.StrokeThickness / 2));  			line.Y1 = 0.0;  			line.Y2 = maximumHeight;  		}  		// workaround for '1px line thickness issue'  		if (line.StrokeThickness % 2 > 0) {  			line.SetValue (Canvas.LeftProperty' 0.5);  			line.SetValue (Canvas.TopProperty' 0.5);  		}  		this.Children.Add (line);  	}  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,OrientedAxisGridLines,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\OrientedAxisGridLines.cs,Invalidate,The following statement contains a magic number: if (!double.IsNaN (position)) {  	Line line = _gridLinePool.Next ();  	if (Axis.Orientation == AxisOrientation.Y) {  		line.Y1 = line.Y2 = maximumHeight - Math.Round (position - (line.StrokeThickness / 2));  		line.X1 = 0.0;  		line.X2 = maximumWidth;  	} else if (Axis.Orientation == AxisOrientation.X) {  		line.X1 = line.X2 = Math.Round (position - (line.StrokeThickness / 2));  		line.Y1 = 0.0;  		line.Y2 = maximumHeight;  	}  	// workaround for '1px line thickness issue'  	if (line.StrokeThickness % 2 > 0) {  		line.SetValue (Canvas.LeftProperty' 0.5);  		line.SetValue (Canvas.TopProperty' 0.5);  	}  	this.Children.Add (line);  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,OrientedAxisGridLines,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\OrientedAxisGridLines.cs,Invalidate,The following statement contains a magic number: if (!double.IsNaN (position)) {  	Line line = _gridLinePool.Next ();  	if (Axis.Orientation == AxisOrientation.Y) {  		line.Y1 = line.Y2 = maximumHeight - Math.Round (position - (line.StrokeThickness / 2));  		line.X1 = 0.0;  		line.X2 = maximumWidth;  	} else if (Axis.Orientation == AxisOrientation.X) {  		line.X1 = line.X2 = Math.Round (position - (line.StrokeThickness / 2));  		line.Y1 = 0.0;  		line.Y2 = maximumHeight;  	}  	// workaround for '1px line thickness issue'  	if (line.StrokeThickness % 2 > 0) {  		line.SetValue (Canvas.LeftProperty' 0.5);  		line.SetValue (Canvas.TopProperty' 0.5);  	}  	this.Children.Add (line);  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,OrientedAxisGridLines,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\OrientedAxisGridLines.cs,Invalidate,The following statement contains a magic number: if (!double.IsNaN (position)) {  	Line line = _gridLinePool.Next ();  	if (Axis.Orientation == AxisOrientation.Y) {  		line.Y1 = line.Y2 = maximumHeight - Math.Round (position - (line.StrokeThickness / 2));  		line.X1 = 0.0;  		line.X2 = maximumWidth;  	} else if (Axis.Orientation == AxisOrientation.X) {  		line.X1 = line.X2 = Math.Round (position - (line.StrokeThickness / 2));  		line.Y1 = 0.0;  		line.Y2 = maximumHeight;  	}  	// workaround for '1px line thickness issue'  	if (line.StrokeThickness % 2 > 0) {  		line.SetValue (Canvas.LeftProperty' 0.5);  		line.SetValue (Canvas.TopProperty' 0.5);  	}  	this.Children.Add (line);  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,OrientedAxisGridLines,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\OrientedAxisGridLines.cs,Invalidate,The following statement contains a magic number: if (!double.IsNaN (position)) {  	Line line = _gridLinePool.Next ();  	if (Axis.Orientation == AxisOrientation.Y) {  		line.Y1 = line.Y2 = maximumHeight - Math.Round (position - (line.StrokeThickness / 2));  		line.X1 = 0.0;  		line.X2 = maximumWidth;  	} else if (Axis.Orientation == AxisOrientation.X) {  		line.X1 = line.X2 = Math.Round (position - (line.StrokeThickness / 2));  		line.Y1 = 0.0;  		line.Y2 = maximumHeight;  	}  	// workaround for '1px line thickness issue'  	if (line.StrokeThickness % 2 > 0) {  		line.SetValue (Canvas.LeftProperty' 0.5);  		line.SetValue (Canvas.TopProperty' 0.5);  	}  	this.Children.Add (line);  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,OrientedAxisGridLines,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\OrientedAxisGridLines.cs,Invalidate,The following statement contains a magic number: if (!double.IsNaN (position)) {  	Line line = _gridLinePool.Next ();  	if (Axis.Orientation == AxisOrientation.Y) {  		line.Y1 = line.Y2 = maximumHeight - Math.Round (position - (line.StrokeThickness / 2));  		line.X1 = 0.0;  		line.X2 = maximumWidth;  	} else if (Axis.Orientation == AxisOrientation.X) {  		line.X1 = line.X2 = Math.Round (position - (line.StrokeThickness / 2));  		line.Y1 = 0.0;  		line.Y2 = maximumHeight;  	}  	// workaround for '1px line thickness issue'  	if (line.StrokeThickness % 2 > 0) {  		line.SetValue (Canvas.LeftProperty' 0.5);  		line.SetValue (Canvas.TopProperty' 0.5);  	}  	this.Children.Add (line);  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,OrientedAxisGridLines,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\OrientedAxisGridLines.cs,Invalidate,The following statement contains a magic number: if (Axis.Orientation == AxisOrientation.Y) {  	line.Y1 = line.Y2 = maximumHeight - Math.Round (position - (line.StrokeThickness / 2));  	line.X1 = 0.0;  	line.X2 = maximumWidth;  } else if (Axis.Orientation == AxisOrientation.X) {  	line.X1 = line.X2 = Math.Round (position - (line.StrokeThickness / 2));  	line.Y1 = 0.0;  	line.Y2 = maximumHeight;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,OrientedAxisGridLines,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\OrientedAxisGridLines.cs,Invalidate,The following statement contains a magic number: if (Axis.Orientation == AxisOrientation.Y) {  	line.Y1 = line.Y2 = maximumHeight - Math.Round (position - (line.StrokeThickness / 2));  	line.X1 = 0.0;  	line.X2 = maximumWidth;  } else if (Axis.Orientation == AxisOrientation.X) {  	line.X1 = line.X2 = Math.Round (position - (line.StrokeThickness / 2));  	line.Y1 = 0.0;  	line.Y2 = maximumHeight;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,OrientedAxisGridLines,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\OrientedAxisGridLines.cs,Invalidate,The following statement contains a magic number: line.Y1 = line.Y2 = maximumHeight - Math.Round (position - (line.StrokeThickness / 2));  
Magic Number,System.Windows.Controls.DataVisualization.Charting,OrientedAxisGridLines,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\OrientedAxisGridLines.cs,Invalidate,The following statement contains a magic number: if (Axis.Orientation == AxisOrientation.X) {  	line.X1 = line.X2 = Math.Round (position - (line.StrokeThickness / 2));  	line.Y1 = 0.0;  	line.Y2 = maximumHeight;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,OrientedAxisGridLines,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\OrientedAxisGridLines.cs,Invalidate,The following statement contains a magic number: line.X1 = line.X2 = Math.Round (position - (line.StrokeThickness / 2));  
Magic Number,System.Windows.Controls.DataVisualization.Charting,OrientedAxisGridLines,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\OrientedAxisGridLines.cs,Invalidate,The following statement contains a magic number: if (line.StrokeThickness % 2 > 0) {  	line.SetValue (Canvas.LeftProperty' 0.5);  	line.SetValue (Canvas.TopProperty' 0.5);  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,OrientedAxisGridLines,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\OrientedAxisGridLines.cs,Invalidate,The following statement contains a magic number: if (line.StrokeThickness % 2 > 0) {  	line.SetValue (Canvas.LeftProperty' 0.5);  	line.SetValue (Canvas.TopProperty' 0.5);  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,OrientedAxisGridLines,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\OrientedAxisGridLines.cs,Invalidate,The following statement contains a magic number: if (line.StrokeThickness % 2 > 0) {  	line.SetValue (Canvas.LeftProperty' 0.5);  	line.SetValue (Canvas.TopProperty' 0.5);  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,OrientedAxisGridLines,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\OrientedAxisGridLines.cs,Invalidate,The following statement contains a magic number: line.SetValue (Canvas.LeftProperty' 0.5);  
Magic Number,System.Windows.Controls.DataVisualization.Charting,OrientedAxisGridLines,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\OrientedAxisGridLines.cs,Invalidate,The following statement contains a magic number: line.SetValue (Canvas.TopProperty' 0.5);  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DisplayAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DisplayAxis.cs,CreateTickMark,The following statement contains a magic number: if (this.Orientation == AxisOrientation.Y) {  	line.Y1 = 0.5;  	line.Y2 = 0.5;  } else if (this.Orientation == AxisOrientation.X) {  	line.X1 = 0.5;  	line.X2 = 0.5;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DisplayAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DisplayAxis.cs,CreateTickMark,The following statement contains a magic number: if (this.Orientation == AxisOrientation.Y) {  	line.Y1 = 0.5;  	line.Y2 = 0.5;  } else if (this.Orientation == AxisOrientation.X) {  	line.X1 = 0.5;  	line.X2 = 0.5;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DisplayAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DisplayAxis.cs,CreateTickMark,The following statement contains a magic number: if (this.Orientation == AxisOrientation.Y) {  	line.Y1 = 0.5;  	line.Y2 = 0.5;  } else if (this.Orientation == AxisOrientation.X) {  	line.X1 = 0.5;  	line.X2 = 0.5;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DisplayAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DisplayAxis.cs,CreateTickMark,The following statement contains a magic number: if (this.Orientation == AxisOrientation.Y) {  	line.Y1 = 0.5;  	line.Y2 = 0.5;  } else if (this.Orientation == AxisOrientation.X) {  	line.X1 = 0.5;  	line.X2 = 0.5;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DisplayAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DisplayAxis.cs,CreateTickMark,The following statement contains a magic number: line.Y1 = 0.5;  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DisplayAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DisplayAxis.cs,CreateTickMark,The following statement contains a magic number: line.Y2 = 0.5;  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DisplayAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DisplayAxis.cs,CreateTickMark,The following statement contains a magic number: if (this.Orientation == AxisOrientation.X) {  	line.X1 = 0.5;  	line.X2 = 0.5;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DisplayAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DisplayAxis.cs,CreateTickMark,The following statement contains a magic number: if (this.Orientation == AxisOrientation.X) {  	line.X1 = 0.5;  	line.X2 = 0.5;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DisplayAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DisplayAxis.cs,CreateTickMark,The following statement contains a magic number: line.X1 = 0.5;  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DisplayAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DisplayAxis.cs,CreateTickMark,The following statement contains a magic number: line.X2 = 0.5;  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DisplayAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DisplayAxis.cs,ArrangeAxisGrid,The following statement contains a magic number: if (this.AxisGrid != null) {  	this.AxisGrid.ColumnDefinitions.Clear ();  	this.AxisGrid.RowDefinitions.Clear ();  	this.AxisGrid.Children.Clear ();  	if (this.Orientation == AxisOrientation.Y) {  		this.OrientedPanel.Orientation = System.Windows.Controls.Orientation.Vertical;  		this.OrientedPanel.IsReversed = true;  		if (this.Location == AxisLocation.Left || this.Location == AxisLocation.Right) {  			this.TitleLayoutTransformControl.Transform = new RotateTransform {  				Angle = -90.0  			};  			this.OrientedPanel.IsInverted = !(Location == AxisLocation.Right);  			this.AxisGrid.ColumnDefinitions.Add (new ColumnDefinition ());  			this.AxisGrid.RowDefinitions.Add (new RowDefinition ());  			int column = 0;  			if (this.AxisTitle != null) {  				this.AxisGrid.ColumnDefinitions.Add (new ColumnDefinition ());  				Grid.SetRow (this.TitleLayoutTransformControl' 0);  				Grid.SetColumn (this.TitleLayoutTransformControl' 0);  				column++;  			}  			Grid.SetRow (this.OrientedPanel' 0);  			Grid.SetColumn (this.OrientedPanel' column);  			this.AxisGrid.Children.Add (this.TitleLayoutTransformControl);  			this.AxisGrid.Children.Add (this.OrientedPanel);  			if (this.Location == AxisLocation.Right) {  				AxisGrid.Mirror (System.Windows.Controls.Orientation.Vertical);  				this.TitleLayoutTransformControl.Transform = new RotateTransform {  					Angle = 90  				};  			}  		}  	} else if (this.Orientation == AxisOrientation.X) {  		this.OrientedPanel.Orientation = System.Windows.Controls.Orientation.Horizontal;  		this.OrientedPanel.IsReversed = false;  		if (this.Location == AxisLocation.Top || this.Location == AxisLocation.Bottom) {  			this.OrientedPanel.IsInverted = (Location == AxisLocation.Top);  			this.TitleLayoutTransformControl.Transform = new RotateTransform {  				Angle = 0  			};  			this.AxisGrid.ColumnDefinitions.Add (new ColumnDefinition ());  			this.AxisGrid.RowDefinitions.Add (new RowDefinition ());  			if (this.AxisTitle != null) {  				this.AxisGrid.RowDefinitions.Add (new RowDefinition ());  				Grid.SetColumn (this.TitleLayoutTransformControl' 0);  				Grid.SetRow (this.TitleLayoutTransformControl' 1);  			}  			Grid.SetColumn (this.OrientedPanel' 0);  			Grid.SetRow (this.OrientedPanel' 0);  			this.AxisGrid.Children.Add (this.TitleLayoutTransformControl);  			this.AxisGrid.Children.Add (this.OrientedPanel);  			if (this.Location == AxisLocation.Top) {  				AxisGrid.Mirror (System.Windows.Controls.Orientation.Horizontal);  			}  		}  	}  	Invalidate ();  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DisplayAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DisplayAxis.cs,ArrangeAxisGrid,The following statement contains a magic number: if (this.AxisGrid != null) {  	this.AxisGrid.ColumnDefinitions.Clear ();  	this.AxisGrid.RowDefinitions.Clear ();  	this.AxisGrid.Children.Clear ();  	if (this.Orientation == AxisOrientation.Y) {  		this.OrientedPanel.Orientation = System.Windows.Controls.Orientation.Vertical;  		this.OrientedPanel.IsReversed = true;  		if (this.Location == AxisLocation.Left || this.Location == AxisLocation.Right) {  			this.TitleLayoutTransformControl.Transform = new RotateTransform {  				Angle = -90.0  			};  			this.OrientedPanel.IsInverted = !(Location == AxisLocation.Right);  			this.AxisGrid.ColumnDefinitions.Add (new ColumnDefinition ());  			this.AxisGrid.RowDefinitions.Add (new RowDefinition ());  			int column = 0;  			if (this.AxisTitle != null) {  				this.AxisGrid.ColumnDefinitions.Add (new ColumnDefinition ());  				Grid.SetRow (this.TitleLayoutTransformControl' 0);  				Grid.SetColumn (this.TitleLayoutTransformControl' 0);  				column++;  			}  			Grid.SetRow (this.OrientedPanel' 0);  			Grid.SetColumn (this.OrientedPanel' column);  			this.AxisGrid.Children.Add (this.TitleLayoutTransformControl);  			this.AxisGrid.Children.Add (this.OrientedPanel);  			if (this.Location == AxisLocation.Right) {  				AxisGrid.Mirror (System.Windows.Controls.Orientation.Vertical);  				this.TitleLayoutTransformControl.Transform = new RotateTransform {  					Angle = 90  				};  			}  		}  	} else if (this.Orientation == AxisOrientation.X) {  		this.OrientedPanel.Orientation = System.Windows.Controls.Orientation.Horizontal;  		this.OrientedPanel.IsReversed = false;  		if (this.Location == AxisLocation.Top || this.Location == AxisLocation.Bottom) {  			this.OrientedPanel.IsInverted = (Location == AxisLocation.Top);  			this.TitleLayoutTransformControl.Transform = new RotateTransform {  				Angle = 0  			};  			this.AxisGrid.ColumnDefinitions.Add (new ColumnDefinition ());  			this.AxisGrid.RowDefinitions.Add (new RowDefinition ());  			if (this.AxisTitle != null) {  				this.AxisGrid.RowDefinitions.Add (new RowDefinition ());  				Grid.SetColumn (this.TitleLayoutTransformControl' 0);  				Grid.SetRow (this.TitleLayoutTransformControl' 1);  			}  			Grid.SetColumn (this.OrientedPanel' 0);  			Grid.SetRow (this.OrientedPanel' 0);  			this.AxisGrid.Children.Add (this.TitleLayoutTransformControl);  			this.AxisGrid.Children.Add (this.OrientedPanel);  			if (this.Location == AxisLocation.Top) {  				AxisGrid.Mirror (System.Windows.Controls.Orientation.Horizontal);  			}  		}  	}  	Invalidate ();  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DisplayAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DisplayAxis.cs,ArrangeAxisGrid,The following statement contains a magic number: if (this.Orientation == AxisOrientation.Y) {  	this.OrientedPanel.Orientation = System.Windows.Controls.Orientation.Vertical;  	this.OrientedPanel.IsReversed = true;  	if (this.Location == AxisLocation.Left || this.Location == AxisLocation.Right) {  		this.TitleLayoutTransformControl.Transform = new RotateTransform {  			Angle = -90.0  		};  		this.OrientedPanel.IsInverted = !(Location == AxisLocation.Right);  		this.AxisGrid.ColumnDefinitions.Add (new ColumnDefinition ());  		this.AxisGrid.RowDefinitions.Add (new RowDefinition ());  		int column = 0;  		if (this.AxisTitle != null) {  			this.AxisGrid.ColumnDefinitions.Add (new ColumnDefinition ());  			Grid.SetRow (this.TitleLayoutTransformControl' 0);  			Grid.SetColumn (this.TitleLayoutTransformControl' 0);  			column++;  		}  		Grid.SetRow (this.OrientedPanel' 0);  		Grid.SetColumn (this.OrientedPanel' column);  		this.AxisGrid.Children.Add (this.TitleLayoutTransformControl);  		this.AxisGrid.Children.Add (this.OrientedPanel);  		if (this.Location == AxisLocation.Right) {  			AxisGrid.Mirror (System.Windows.Controls.Orientation.Vertical);  			this.TitleLayoutTransformControl.Transform = new RotateTransform {  				Angle = 90  			};  		}  	}  } else if (this.Orientation == AxisOrientation.X) {  	this.OrientedPanel.Orientation = System.Windows.Controls.Orientation.Horizontal;  	this.OrientedPanel.IsReversed = false;  	if (this.Location == AxisLocation.Top || this.Location == AxisLocation.Bottom) {  		this.OrientedPanel.IsInverted = (Location == AxisLocation.Top);  		this.TitleLayoutTransformControl.Transform = new RotateTransform {  			Angle = 0  		};  		this.AxisGrid.ColumnDefinitions.Add (new ColumnDefinition ());  		this.AxisGrid.RowDefinitions.Add (new RowDefinition ());  		if (this.AxisTitle != null) {  			this.AxisGrid.RowDefinitions.Add (new RowDefinition ());  			Grid.SetColumn (this.TitleLayoutTransformControl' 0);  			Grid.SetRow (this.TitleLayoutTransformControl' 1);  		}  		Grid.SetColumn (this.OrientedPanel' 0);  		Grid.SetRow (this.OrientedPanel' 0);  		this.AxisGrid.Children.Add (this.TitleLayoutTransformControl);  		this.AxisGrid.Children.Add (this.OrientedPanel);  		if (this.Location == AxisLocation.Top) {  			AxisGrid.Mirror (System.Windows.Controls.Orientation.Horizontal);  		}  	}  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DisplayAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DisplayAxis.cs,ArrangeAxisGrid,The following statement contains a magic number: if (this.Orientation == AxisOrientation.Y) {  	this.OrientedPanel.Orientation = System.Windows.Controls.Orientation.Vertical;  	this.OrientedPanel.IsReversed = true;  	if (this.Location == AxisLocation.Left || this.Location == AxisLocation.Right) {  		this.TitleLayoutTransformControl.Transform = new RotateTransform {  			Angle = -90.0  		};  		this.OrientedPanel.IsInverted = !(Location == AxisLocation.Right);  		this.AxisGrid.ColumnDefinitions.Add (new ColumnDefinition ());  		this.AxisGrid.RowDefinitions.Add (new RowDefinition ());  		int column = 0;  		if (this.AxisTitle != null) {  			this.AxisGrid.ColumnDefinitions.Add (new ColumnDefinition ());  			Grid.SetRow (this.TitleLayoutTransformControl' 0);  			Grid.SetColumn (this.TitleLayoutTransformControl' 0);  			column++;  		}  		Grid.SetRow (this.OrientedPanel' 0);  		Grid.SetColumn (this.OrientedPanel' column);  		this.AxisGrid.Children.Add (this.TitleLayoutTransformControl);  		this.AxisGrid.Children.Add (this.OrientedPanel);  		if (this.Location == AxisLocation.Right) {  			AxisGrid.Mirror (System.Windows.Controls.Orientation.Vertical);  			this.TitleLayoutTransformControl.Transform = new RotateTransform {  				Angle = 90  			};  		}  	}  } else if (this.Orientation == AxisOrientation.X) {  	this.OrientedPanel.Orientation = System.Windows.Controls.Orientation.Horizontal;  	this.OrientedPanel.IsReversed = false;  	if (this.Location == AxisLocation.Top || this.Location == AxisLocation.Bottom) {  		this.OrientedPanel.IsInverted = (Location == AxisLocation.Top);  		this.TitleLayoutTransformControl.Transform = new RotateTransform {  			Angle = 0  		};  		this.AxisGrid.ColumnDefinitions.Add (new ColumnDefinition ());  		this.AxisGrid.RowDefinitions.Add (new RowDefinition ());  		if (this.AxisTitle != null) {  			this.AxisGrid.RowDefinitions.Add (new RowDefinition ());  			Grid.SetColumn (this.TitleLayoutTransformControl' 0);  			Grid.SetRow (this.TitleLayoutTransformControl' 1);  		}  		Grid.SetColumn (this.OrientedPanel' 0);  		Grid.SetRow (this.OrientedPanel' 0);  		this.AxisGrid.Children.Add (this.TitleLayoutTransformControl);  		this.AxisGrid.Children.Add (this.OrientedPanel);  		if (this.Location == AxisLocation.Top) {  			AxisGrid.Mirror (System.Windows.Controls.Orientation.Horizontal);  		}  	}  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DisplayAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DisplayAxis.cs,ArrangeAxisGrid,The following statement contains a magic number: if (this.Location == AxisLocation.Left || this.Location == AxisLocation.Right) {  	this.TitleLayoutTransformControl.Transform = new RotateTransform {  		Angle = -90.0  	};  	this.OrientedPanel.IsInverted = !(Location == AxisLocation.Right);  	this.AxisGrid.ColumnDefinitions.Add (new ColumnDefinition ());  	this.AxisGrid.RowDefinitions.Add (new RowDefinition ());  	int column = 0;  	if (this.AxisTitle != null) {  		this.AxisGrid.ColumnDefinitions.Add (new ColumnDefinition ());  		Grid.SetRow (this.TitleLayoutTransformControl' 0);  		Grid.SetColumn (this.TitleLayoutTransformControl' 0);  		column++;  	}  	Grid.SetRow (this.OrientedPanel' 0);  	Grid.SetColumn (this.OrientedPanel' column);  	this.AxisGrid.Children.Add (this.TitleLayoutTransformControl);  	this.AxisGrid.Children.Add (this.OrientedPanel);  	if (this.Location == AxisLocation.Right) {  		AxisGrid.Mirror (System.Windows.Controls.Orientation.Vertical);  		this.TitleLayoutTransformControl.Transform = new RotateTransform {  			Angle = 90  		};  	}  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DisplayAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DisplayAxis.cs,ArrangeAxisGrid,The following statement contains a magic number: if (this.Location == AxisLocation.Left || this.Location == AxisLocation.Right) {  	this.TitleLayoutTransformControl.Transform = new RotateTransform {  		Angle = -90.0  	};  	this.OrientedPanel.IsInverted = !(Location == AxisLocation.Right);  	this.AxisGrid.ColumnDefinitions.Add (new ColumnDefinition ());  	this.AxisGrid.RowDefinitions.Add (new RowDefinition ());  	int column = 0;  	if (this.AxisTitle != null) {  		this.AxisGrid.ColumnDefinitions.Add (new ColumnDefinition ());  		Grid.SetRow (this.TitleLayoutTransformControl' 0);  		Grid.SetColumn (this.TitleLayoutTransformControl' 0);  		column++;  	}  	Grid.SetRow (this.OrientedPanel' 0);  	Grid.SetColumn (this.OrientedPanel' column);  	this.AxisGrid.Children.Add (this.TitleLayoutTransformControl);  	this.AxisGrid.Children.Add (this.OrientedPanel);  	if (this.Location == AxisLocation.Right) {  		AxisGrid.Mirror (System.Windows.Controls.Orientation.Vertical);  		this.TitleLayoutTransformControl.Transform = new RotateTransform {  			Angle = 90  		};  	}  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DisplayAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DisplayAxis.cs,ArrangeAxisGrid,The following statement contains a magic number: this.TitleLayoutTransformControl.Transform = new RotateTransform {  	Angle = -90.0  };  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DisplayAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DisplayAxis.cs,ArrangeAxisGrid,The following statement contains a magic number: if (this.Location == AxisLocation.Right) {  	AxisGrid.Mirror (System.Windows.Controls.Orientation.Vertical);  	this.TitleLayoutTransformControl.Transform = new RotateTransform {  		Angle = 90  	};  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DisplayAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DisplayAxis.cs,ArrangeAxisGrid,The following statement contains a magic number: this.TitleLayoutTransformControl.Transform = new RotateTransform {  	Angle = 90  };  
Magic Number,System.Windows.Controls.DataVisualization.Charting,LinearAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\LinearAxis.cs,CalculateActualInterval,The following statement contains a magic number: while (true) {  	int mantissa = (int)Mantissa (tempInterval);  	if (mantissa == 5) {  		// reduce 5 to 2  		tempInterval = ValueHelper.RemoveNoiseFromDoubleMath (tempInterval / 2.5);  	} else if (mantissa == 2 || mantissa == 1 || mantissa == 10) {  		// reduce 2 to 1'10 to 5'1 to 0.5  		tempInterval = ValueHelper.RemoveNoiseFromDoubleMath (tempInterval / 2.0);  	}  	if (range / tempInterval > maxIntervalCount) {  		break;  	}  	interval = tempInterval;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,LinearAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\LinearAxis.cs,CalculateActualInterval,The following statement contains a magic number: while (true) {  	int mantissa = (int)Mantissa (tempInterval);  	if (mantissa == 5) {  		// reduce 5 to 2  		tempInterval = ValueHelper.RemoveNoiseFromDoubleMath (tempInterval / 2.5);  	} else if (mantissa == 2 || mantissa == 1 || mantissa == 10) {  		// reduce 2 to 1'10 to 5'1 to 0.5  		tempInterval = ValueHelper.RemoveNoiseFromDoubleMath (tempInterval / 2.0);  	}  	if (range / tempInterval > maxIntervalCount) {  		break;  	}  	interval = tempInterval;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,LinearAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\LinearAxis.cs,CalculateActualInterval,The following statement contains a magic number: while (true) {  	int mantissa = (int)Mantissa (tempInterval);  	if (mantissa == 5) {  		// reduce 5 to 2  		tempInterval = ValueHelper.RemoveNoiseFromDoubleMath (tempInterval / 2.5);  	} else if (mantissa == 2 || mantissa == 1 || mantissa == 10) {  		// reduce 2 to 1'10 to 5'1 to 0.5  		tempInterval = ValueHelper.RemoveNoiseFromDoubleMath (tempInterval / 2.0);  	}  	if (range / tempInterval > maxIntervalCount) {  		break;  	}  	interval = tempInterval;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,LinearAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\LinearAxis.cs,CalculateActualInterval,The following statement contains a magic number: while (true) {  	int mantissa = (int)Mantissa (tempInterval);  	if (mantissa == 5) {  		// reduce 5 to 2  		tempInterval = ValueHelper.RemoveNoiseFromDoubleMath (tempInterval / 2.5);  	} else if (mantissa == 2 || mantissa == 1 || mantissa == 10) {  		// reduce 2 to 1'10 to 5'1 to 0.5  		tempInterval = ValueHelper.RemoveNoiseFromDoubleMath (tempInterval / 2.0);  	}  	if (range / tempInterval > maxIntervalCount) {  		break;  	}  	interval = tempInterval;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,LinearAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\LinearAxis.cs,CalculateActualInterval,The following statement contains a magic number: while (true) {  	int mantissa = (int)Mantissa (tempInterval);  	if (mantissa == 5) {  		// reduce 5 to 2  		tempInterval = ValueHelper.RemoveNoiseFromDoubleMath (tempInterval / 2.5);  	} else if (mantissa == 2 || mantissa == 1 || mantissa == 10) {  		// reduce 2 to 1'10 to 5'1 to 0.5  		tempInterval = ValueHelper.RemoveNoiseFromDoubleMath (tempInterval / 2.0);  	}  	if (range / tempInterval > maxIntervalCount) {  		break;  	}  	interval = tempInterval;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,LinearAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\LinearAxis.cs,CalculateActualInterval,The following statement contains a magic number: if (mantissa == 5) {  	// reduce 5 to 2  	tempInterval = ValueHelper.RemoveNoiseFromDoubleMath (tempInterval / 2.5);  } else if (mantissa == 2 || mantissa == 1 || mantissa == 10) {  	// reduce 2 to 1'10 to 5'1 to 0.5  	tempInterval = ValueHelper.RemoveNoiseFromDoubleMath (tempInterval / 2.0);  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,LinearAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\LinearAxis.cs,CalculateActualInterval,The following statement contains a magic number: if (mantissa == 5) {  	// reduce 5 to 2  	tempInterval = ValueHelper.RemoveNoiseFromDoubleMath (tempInterval / 2.5);  } else if (mantissa == 2 || mantissa == 1 || mantissa == 10) {  	// reduce 2 to 1'10 to 5'1 to 0.5  	tempInterval = ValueHelper.RemoveNoiseFromDoubleMath (tempInterval / 2.0);  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,LinearAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\LinearAxis.cs,CalculateActualInterval,The following statement contains a magic number: if (mantissa == 5) {  	// reduce 5 to 2  	tempInterval = ValueHelper.RemoveNoiseFromDoubleMath (tempInterval / 2.5);  } else if (mantissa == 2 || mantissa == 1 || mantissa == 10) {  	// reduce 2 to 1'10 to 5'1 to 0.5  	tempInterval = ValueHelper.RemoveNoiseFromDoubleMath (tempInterval / 2.0);  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,LinearAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\LinearAxis.cs,CalculateActualInterval,The following statement contains a magic number: if (mantissa == 5) {  	// reduce 5 to 2  	tempInterval = ValueHelper.RemoveNoiseFromDoubleMath (tempInterval / 2.5);  } else if (mantissa == 2 || mantissa == 1 || mantissa == 10) {  	// reduce 2 to 1'10 to 5'1 to 0.5  	tempInterval = ValueHelper.RemoveNoiseFromDoubleMath (tempInterval / 2.0);  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,LinearAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\LinearAxis.cs,CalculateActualInterval,The following statement contains a magic number: if (mantissa == 5) {  	// reduce 5 to 2  	tempInterval = ValueHelper.RemoveNoiseFromDoubleMath (tempInterval / 2.5);  } else if (mantissa == 2 || mantissa == 1 || mantissa == 10) {  	// reduce 2 to 1'10 to 5'1 to 0.5  	tempInterval = ValueHelper.RemoveNoiseFromDoubleMath (tempInterval / 2.0);  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,LinearAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\LinearAxis.cs,CalculateActualInterval,The following statement contains a magic number: tempInterval = ValueHelper.RemoveNoiseFromDoubleMath (tempInterval / 2.5);  
Magic Number,System.Windows.Controls.DataVisualization.Charting,LinearAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\LinearAxis.cs,CalculateActualInterval,The following statement contains a magic number: if (mantissa == 2 || mantissa == 1 || mantissa == 10) {  	// reduce 2 to 1'10 to 5'1 to 0.5  	tempInterval = ValueHelper.RemoveNoiseFromDoubleMath (tempInterval / 2.0);  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,LinearAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\LinearAxis.cs,CalculateActualInterval,The following statement contains a magic number: if (mantissa == 2 || mantissa == 1 || mantissa == 10) {  	// reduce 2 to 1'10 to 5'1 to 0.5  	tempInterval = ValueHelper.RemoveNoiseFromDoubleMath (tempInterval / 2.0);  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,LinearAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\LinearAxis.cs,CalculateActualInterval,The following statement contains a magic number: if (mantissa == 2 || mantissa == 1 || mantissa == 10) {  	// reduce 2 to 1'10 to 5'1 to 0.5  	tempInterval = ValueHelper.RemoveNoiseFromDoubleMath (tempInterval / 2.0);  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,LinearAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\LinearAxis.cs,CalculateActualInterval,The following statement contains a magic number: tempInterval = ValueHelper.RemoveNoiseFromDoubleMath (tempInterval / 2.0);  
Magic Number,System.Windows.Controls.DataVisualization.Charting,LinearAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\LinearAxis.cs,OverrideDataRange,The following statement contains a magic number: if (range.HasData && this.ActualLength > 1.0) {  	bool isDataAnchoredToOrigin = false;  	IList<ValueMarginCoordinateAndOverlap> valueMargins = new List<ValueMarginCoordinateAndOverlap> ();  	foreach (IValueMarginProvider valueMarginProvider in this.RegisteredListeners.OfType<IValueMarginProvider> ()) {  		foreach (ValueMargin valueMargin in valueMarginProvider.GetValueMargins (this)) {  			IAnchoredToOrigin dataAnchoredToOrigin = valueMarginProvider as IAnchoredToOrigin;  			isDataAnchoredToOrigin = (dataAnchoredToOrigin != null && dataAnchoredToOrigin.AnchoredAxis == this);  			valueMargins.Add (new ValueMarginCoordinateAndOverlap {  				ValueMargin = valueMargin'  			});  		}  	}  	if (valueMargins.Count > 0) {  		double maximumPixelMarginLength = valueMargins.Select (valueMargin => valueMargin.ValueMargin.LowMargin + valueMargin.ValueMargin.HighMargin).MaxOrNullable ().Value;  		// Requested margin is larger than the axis so give up  		// trying to find a range that will fit it.  		if (maximumPixelMarginLength > this.ActualLength) {  			return range;  		}  		Range<double> originalRange = range.ToDoubleRange ();  		Range<double> currentRange = range.ToDoubleRange ();  		// Ensure range is not empty.  		if (currentRange.Minimum == currentRange.Maximum) {  			currentRange = new Range<double> (currentRange.Maximum - 1' currentRange.Maximum + 1);  		}  		// priming the loop  		double actualLength = this.ActualLength;  		ValueMarginCoordinateAndOverlap maxLeftOverlapValueMargin;  		ValueMarginCoordinateAndOverlap maxRightOverlapValueMargin;  		UpdateValueMargins (valueMargins' currentRange.ToComparableRange ());  		GetMaxLeftAndRightOverlap (valueMargins' out maxLeftOverlapValueMargin' out maxRightOverlapValueMargin);  		while (maxLeftOverlapValueMargin.LeftOverlap > 0 || maxRightOverlapValueMargin.RightOverlap > 0) {  			double unitOverPixels = currentRange.GetLength ().Value / actualLength;  			double newMinimum = currentRange.Minimum - ((maxLeftOverlapValueMargin.LeftOverlap + 0.5) * unitOverPixels);  			double newMaximum = currentRange.Maximum + ((maxRightOverlapValueMargin.RightOverlap + 0.5) * unitOverPixels);  			currentRange = new Range<double> (newMinimum' newMaximum);  			UpdateValueMargins (valueMargins' currentRange.ToComparableRange ());  			GetMaxLeftAndRightOverlap (valueMargins' out maxLeftOverlapValueMargin' out maxRightOverlapValueMargin);  		}  		if (isDataAnchoredToOrigin) {  			if (originalRange.Minimum >= 0 && currentRange.Minimum < 0) {  				currentRange = new Range<double> (0' currentRange.Maximum);  			} else if (originalRange.Maximum <= 0 && currentRange.Maximum > 0) {  				currentRange = new Range<double> (currentRange.Minimum' 0);  			}  		}  		return currentRange.ToComparableRange ();  	}  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,LinearAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\LinearAxis.cs,OverrideDataRange,The following statement contains a magic number: if (range.HasData && this.ActualLength > 1.0) {  	bool isDataAnchoredToOrigin = false;  	IList<ValueMarginCoordinateAndOverlap> valueMargins = new List<ValueMarginCoordinateAndOverlap> ();  	foreach (IValueMarginProvider valueMarginProvider in this.RegisteredListeners.OfType<IValueMarginProvider> ()) {  		foreach (ValueMargin valueMargin in valueMarginProvider.GetValueMargins (this)) {  			IAnchoredToOrigin dataAnchoredToOrigin = valueMarginProvider as IAnchoredToOrigin;  			isDataAnchoredToOrigin = (dataAnchoredToOrigin != null && dataAnchoredToOrigin.AnchoredAxis == this);  			valueMargins.Add (new ValueMarginCoordinateAndOverlap {  				ValueMargin = valueMargin'  			});  		}  	}  	if (valueMargins.Count > 0) {  		double maximumPixelMarginLength = valueMargins.Select (valueMargin => valueMargin.ValueMargin.LowMargin + valueMargin.ValueMargin.HighMargin).MaxOrNullable ().Value;  		// Requested margin is larger than the axis so give up  		// trying to find a range that will fit it.  		if (maximumPixelMarginLength > this.ActualLength) {  			return range;  		}  		Range<double> originalRange = range.ToDoubleRange ();  		Range<double> currentRange = range.ToDoubleRange ();  		// Ensure range is not empty.  		if (currentRange.Minimum == currentRange.Maximum) {  			currentRange = new Range<double> (currentRange.Maximum - 1' currentRange.Maximum + 1);  		}  		// priming the loop  		double actualLength = this.ActualLength;  		ValueMarginCoordinateAndOverlap maxLeftOverlapValueMargin;  		ValueMarginCoordinateAndOverlap maxRightOverlapValueMargin;  		UpdateValueMargins (valueMargins' currentRange.ToComparableRange ());  		GetMaxLeftAndRightOverlap (valueMargins' out maxLeftOverlapValueMargin' out maxRightOverlapValueMargin);  		while (maxLeftOverlapValueMargin.LeftOverlap > 0 || maxRightOverlapValueMargin.RightOverlap > 0) {  			double unitOverPixels = currentRange.GetLength ().Value / actualLength;  			double newMinimum = currentRange.Minimum - ((maxLeftOverlapValueMargin.LeftOverlap + 0.5) * unitOverPixels);  			double newMaximum = currentRange.Maximum + ((maxRightOverlapValueMargin.RightOverlap + 0.5) * unitOverPixels);  			currentRange = new Range<double> (newMinimum' newMaximum);  			UpdateValueMargins (valueMargins' currentRange.ToComparableRange ());  			GetMaxLeftAndRightOverlap (valueMargins' out maxLeftOverlapValueMargin' out maxRightOverlapValueMargin);  		}  		if (isDataAnchoredToOrigin) {  			if (originalRange.Minimum >= 0 && currentRange.Minimum < 0) {  				currentRange = new Range<double> (0' currentRange.Maximum);  			} else if (originalRange.Maximum <= 0 && currentRange.Maximum > 0) {  				currentRange = new Range<double> (currentRange.Minimum' 0);  			}  		}  		return currentRange.ToComparableRange ();  	}  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,LinearAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\LinearAxis.cs,OverrideDataRange,The following statement contains a magic number: if (valueMargins.Count > 0) {  	double maximumPixelMarginLength = valueMargins.Select (valueMargin => valueMargin.ValueMargin.LowMargin + valueMargin.ValueMargin.HighMargin).MaxOrNullable ().Value;  	// Requested margin is larger than the axis so give up  	// trying to find a range that will fit it.  	if (maximumPixelMarginLength > this.ActualLength) {  		return range;  	}  	Range<double> originalRange = range.ToDoubleRange ();  	Range<double> currentRange = range.ToDoubleRange ();  	// Ensure range is not empty.  	if (currentRange.Minimum == currentRange.Maximum) {  		currentRange = new Range<double> (currentRange.Maximum - 1' currentRange.Maximum + 1);  	}  	// priming the loop  	double actualLength = this.ActualLength;  	ValueMarginCoordinateAndOverlap maxLeftOverlapValueMargin;  	ValueMarginCoordinateAndOverlap maxRightOverlapValueMargin;  	UpdateValueMargins (valueMargins' currentRange.ToComparableRange ());  	GetMaxLeftAndRightOverlap (valueMargins' out maxLeftOverlapValueMargin' out maxRightOverlapValueMargin);  	while (maxLeftOverlapValueMargin.LeftOverlap > 0 || maxRightOverlapValueMargin.RightOverlap > 0) {  		double unitOverPixels = currentRange.GetLength ().Value / actualLength;  		double newMinimum = currentRange.Minimum - ((maxLeftOverlapValueMargin.LeftOverlap + 0.5) * unitOverPixels);  		double newMaximum = currentRange.Maximum + ((maxRightOverlapValueMargin.RightOverlap + 0.5) * unitOverPixels);  		currentRange = new Range<double> (newMinimum' newMaximum);  		UpdateValueMargins (valueMargins' currentRange.ToComparableRange ());  		GetMaxLeftAndRightOverlap (valueMargins' out maxLeftOverlapValueMargin' out maxRightOverlapValueMargin);  	}  	if (isDataAnchoredToOrigin) {  		if (originalRange.Minimum >= 0 && currentRange.Minimum < 0) {  			currentRange = new Range<double> (0' currentRange.Maximum);  		} else if (originalRange.Maximum <= 0 && currentRange.Maximum > 0) {  			currentRange = new Range<double> (currentRange.Minimum' 0);  		}  	}  	return currentRange.ToComparableRange ();  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,LinearAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\LinearAxis.cs,OverrideDataRange,The following statement contains a magic number: if (valueMargins.Count > 0) {  	double maximumPixelMarginLength = valueMargins.Select (valueMargin => valueMargin.ValueMargin.LowMargin + valueMargin.ValueMargin.HighMargin).MaxOrNullable ().Value;  	// Requested margin is larger than the axis so give up  	// trying to find a range that will fit it.  	if (maximumPixelMarginLength > this.ActualLength) {  		return range;  	}  	Range<double> originalRange = range.ToDoubleRange ();  	Range<double> currentRange = range.ToDoubleRange ();  	// Ensure range is not empty.  	if (currentRange.Minimum == currentRange.Maximum) {  		currentRange = new Range<double> (currentRange.Maximum - 1' currentRange.Maximum + 1);  	}  	// priming the loop  	double actualLength = this.ActualLength;  	ValueMarginCoordinateAndOverlap maxLeftOverlapValueMargin;  	ValueMarginCoordinateAndOverlap maxRightOverlapValueMargin;  	UpdateValueMargins (valueMargins' currentRange.ToComparableRange ());  	GetMaxLeftAndRightOverlap (valueMargins' out maxLeftOverlapValueMargin' out maxRightOverlapValueMargin);  	while (maxLeftOverlapValueMargin.LeftOverlap > 0 || maxRightOverlapValueMargin.RightOverlap > 0) {  		double unitOverPixels = currentRange.GetLength ().Value / actualLength;  		double newMinimum = currentRange.Minimum - ((maxLeftOverlapValueMargin.LeftOverlap + 0.5) * unitOverPixels);  		double newMaximum = currentRange.Maximum + ((maxRightOverlapValueMargin.RightOverlap + 0.5) * unitOverPixels);  		currentRange = new Range<double> (newMinimum' newMaximum);  		UpdateValueMargins (valueMargins' currentRange.ToComparableRange ());  		GetMaxLeftAndRightOverlap (valueMargins' out maxLeftOverlapValueMargin' out maxRightOverlapValueMargin);  	}  	if (isDataAnchoredToOrigin) {  		if (originalRange.Minimum >= 0 && currentRange.Minimum < 0) {  			currentRange = new Range<double> (0' currentRange.Maximum);  		} else if (originalRange.Maximum <= 0 && currentRange.Maximum > 0) {  			currentRange = new Range<double> (currentRange.Minimum' 0);  		}  	}  	return currentRange.ToComparableRange ();  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,LinearAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\LinearAxis.cs,OverrideDataRange,The following statement contains a magic number: while (maxLeftOverlapValueMargin.LeftOverlap > 0 || maxRightOverlapValueMargin.RightOverlap > 0) {  	double unitOverPixels = currentRange.GetLength ().Value / actualLength;  	double newMinimum = currentRange.Minimum - ((maxLeftOverlapValueMargin.LeftOverlap + 0.5) * unitOverPixels);  	double newMaximum = currentRange.Maximum + ((maxRightOverlapValueMargin.RightOverlap + 0.5) * unitOverPixels);  	currentRange = new Range<double> (newMinimum' newMaximum);  	UpdateValueMargins (valueMargins' currentRange.ToComparableRange ());  	GetMaxLeftAndRightOverlap (valueMargins' out maxLeftOverlapValueMargin' out maxRightOverlapValueMargin);  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,LinearAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\LinearAxis.cs,OverrideDataRange,The following statement contains a magic number: while (maxLeftOverlapValueMargin.LeftOverlap > 0 || maxRightOverlapValueMargin.RightOverlap > 0) {  	double unitOverPixels = currentRange.GetLength ().Value / actualLength;  	double newMinimum = currentRange.Minimum - ((maxLeftOverlapValueMargin.LeftOverlap + 0.5) * unitOverPixels);  	double newMaximum = currentRange.Maximum + ((maxRightOverlapValueMargin.RightOverlap + 0.5) * unitOverPixels);  	currentRange = new Range<double> (newMinimum' newMaximum);  	UpdateValueMargins (valueMargins' currentRange.ToComparableRange ());  	GetMaxLeftAndRightOverlap (valueMargins' out maxLeftOverlapValueMargin' out maxRightOverlapValueMargin);  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,RangeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\RangeAxis.cs,RenderOriented,The following statement contains a magic number: try {  	OrientedPanel.Children.Clear ();  	if (ActualRange.HasData && !Object.Equals (ActualRange.Minimum' ActualRange.Maximum)) {  		foreach (IComparable axisValue in GetMajorTickMarkValues (availableSize)) {  			UnitValue coordinate = GetPlotAreaCoordinate (axisValue' ActualRange' length);  			if (ValueHelper.CanGraph (coordinate.Value)) {  				Line line = _majorTickMarkPool.Next ();  				OrientedPanel.SetCenterCoordinate (line' coordinate.Value);  				OrientedPanel.SetPriority (line' 0);  				OrientedPanel.Children.Add (line);  			}  		}  		foreach (IComparable axisValue in GetMinorTickMarkValues (availableSize)) {  			UnitValue coordinate = GetPlotAreaCoordinate (axisValue' ActualRange' length);  			if (ValueHelper.CanGraph (coordinate.Value)) {  				Line line = _minorTickMarkPool.Next ();  				OrientedPanel.SetCenterCoordinate (line' coordinate.Value);  				OrientedPanel.SetPriority (line' 0);  				OrientedPanel.Children.Add (line);  			}  		}  		int count = 0;  		foreach (IComparable axisValue in GetLabelValues (availableSize)) {  			UnitValue coordinate = GetPlotAreaCoordinate (axisValue' ActualRange' length);  			if (ValueHelper.CanGraph (coordinate.Value)) {  				Control axisLabel = _labelPool.Next ();  				PrepareAxisLabel (axisLabel' axisValue);  				OrientedPanel.SetCenterCoordinate (axisLabel' coordinate.Value);  				OrientedPanel.SetPriority (axisLabel' count + 1);  				OrientedPanel.Children.Add (axisLabel);  				count = (count + 1) % 2;  			}  		}  	}  } finally {  	_minorTickMarkPool.Done ();  	_majorTickMarkPool.Done ();  	_labelPool.Done ();  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,RangeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\RangeAxis.cs,RenderOriented,The following statement contains a magic number: if (ActualRange.HasData && !Object.Equals (ActualRange.Minimum' ActualRange.Maximum)) {  	foreach (IComparable axisValue in GetMajorTickMarkValues (availableSize)) {  		UnitValue coordinate = GetPlotAreaCoordinate (axisValue' ActualRange' length);  		if (ValueHelper.CanGraph (coordinate.Value)) {  			Line line = _majorTickMarkPool.Next ();  			OrientedPanel.SetCenterCoordinate (line' coordinate.Value);  			OrientedPanel.SetPriority (line' 0);  			OrientedPanel.Children.Add (line);  		}  	}  	foreach (IComparable axisValue in GetMinorTickMarkValues (availableSize)) {  		UnitValue coordinate = GetPlotAreaCoordinate (axisValue' ActualRange' length);  		if (ValueHelper.CanGraph (coordinate.Value)) {  			Line line = _minorTickMarkPool.Next ();  			OrientedPanel.SetCenterCoordinate (line' coordinate.Value);  			OrientedPanel.SetPriority (line' 0);  			OrientedPanel.Children.Add (line);  		}  	}  	int count = 0;  	foreach (IComparable axisValue in GetLabelValues (availableSize)) {  		UnitValue coordinate = GetPlotAreaCoordinate (axisValue' ActualRange' length);  		if (ValueHelper.CanGraph (coordinate.Value)) {  			Control axisLabel = _labelPool.Next ();  			PrepareAxisLabel (axisLabel' axisValue);  			OrientedPanel.SetCenterCoordinate (axisLabel' coordinate.Value);  			OrientedPanel.SetPriority (axisLabel' count + 1);  			OrientedPanel.Children.Add (axisLabel);  			count = (count + 1) % 2;  		}  	}  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,RangeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\RangeAxis.cs,RenderOriented,The following statement contains a magic number: foreach (IComparable axisValue in GetLabelValues (availableSize)) {  	UnitValue coordinate = GetPlotAreaCoordinate (axisValue' ActualRange' length);  	if (ValueHelper.CanGraph (coordinate.Value)) {  		Control axisLabel = _labelPool.Next ();  		PrepareAxisLabel (axisLabel' axisValue);  		OrientedPanel.SetCenterCoordinate (axisLabel' coordinate.Value);  		OrientedPanel.SetPriority (axisLabel' count + 1);  		OrientedPanel.Children.Add (axisLabel);  		count = (count + 1) % 2;  	}  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,RangeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\RangeAxis.cs,RenderOriented,The following statement contains a magic number: if (ValueHelper.CanGraph (coordinate.Value)) {  	Control axisLabel = _labelPool.Next ();  	PrepareAxisLabel (axisLabel' axisValue);  	OrientedPanel.SetCenterCoordinate (axisLabel' coordinate.Value);  	OrientedPanel.SetPriority (axisLabel' count + 1);  	OrientedPanel.Children.Add (axisLabel);  	count = (count + 1) % 2;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,RangeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\RangeAxis.cs,RenderOriented,The following statement contains a magic number: count = (count + 1) % 2;  
Magic Number,System.Windows.Controls.DataVisualization.Charting,LineAreaBaseSeries,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Series\LineAreaBaseSeries.cs,UpdateDataPoint,The following statement contains a magic number: if (ValueHelper.CanGraph (maximum)) {  	double x = ActualIndependentAxis.GetPlotAreaCoordinate (dataPoint.ActualIndependentValue).Value;  	double y = ActualDependentRangeAxis.GetPlotAreaCoordinate (dataPoint.ActualDependentValue).Value;  	if (ValueHelper.CanGraph (x) && ValueHelper.CanGraph (y)) {  		dataPoint.Visibility = Visibility.Visible;  		double coordinateY = Math.Round (maximum - (y + (dataPoint.ActualHeight / 2)));  		Canvas.SetTop (dataPoint' coordinateY);  		double coordinateX = Math.Round (x - (dataPoint.ActualWidth / 2));  		Canvas.SetLeft (dataPoint' coordinateX);  	} else {  		dataPoint.Visibility = Visibility.Collapsed;  	}  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,LineAreaBaseSeries,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Series\LineAreaBaseSeries.cs,UpdateDataPoint,The following statement contains a magic number: if (ValueHelper.CanGraph (maximum)) {  	double x = ActualIndependentAxis.GetPlotAreaCoordinate (dataPoint.ActualIndependentValue).Value;  	double y = ActualDependentRangeAxis.GetPlotAreaCoordinate (dataPoint.ActualDependentValue).Value;  	if (ValueHelper.CanGraph (x) && ValueHelper.CanGraph (y)) {  		dataPoint.Visibility = Visibility.Visible;  		double coordinateY = Math.Round (maximum - (y + (dataPoint.ActualHeight / 2)));  		Canvas.SetTop (dataPoint' coordinateY);  		double coordinateX = Math.Round (x - (dataPoint.ActualWidth / 2));  		Canvas.SetLeft (dataPoint' coordinateX);  	} else {  		dataPoint.Visibility = Visibility.Collapsed;  	}  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,LineAreaBaseSeries,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Series\LineAreaBaseSeries.cs,UpdateDataPoint,The following statement contains a magic number: if (ValueHelper.CanGraph (x) && ValueHelper.CanGraph (y)) {  	dataPoint.Visibility = Visibility.Visible;  	double coordinateY = Math.Round (maximum - (y + (dataPoint.ActualHeight / 2)));  	Canvas.SetTop (dataPoint' coordinateY);  	double coordinateX = Math.Round (x - (dataPoint.ActualWidth / 2));  	Canvas.SetLeft (dataPoint' coordinateX);  } else {  	dataPoint.Visibility = Visibility.Collapsed;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,LineAreaBaseSeries,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Series\LineAreaBaseSeries.cs,UpdateDataPoint,The following statement contains a magic number: if (ValueHelper.CanGraph (x) && ValueHelper.CanGraph (y)) {  	dataPoint.Visibility = Visibility.Visible;  	double coordinateY = Math.Round (maximum - (y + (dataPoint.ActualHeight / 2)));  	Canvas.SetTop (dataPoint' coordinateY);  	double coordinateX = Math.Round (x - (dataPoint.ActualWidth / 2));  	Canvas.SetLeft (dataPoint' coordinateX);  } else {  	dataPoint.Visibility = Visibility.Collapsed;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,ColumnBarBaseSeries,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Series\ColumnBarBaseSeries.cs,GetCategoryRange,The following statement contains a magic number: if (categoryAxis != null) {  	return categoryAxis.GetPlotAreaCoordinateRange (category);  } else {  	UnitValue unitValue = ActualIndependentAxis.GetPlotAreaCoordinate (category);  	if (ValueHelper.CanGraph (unitValue.Value) && _dataPointlength.HasValue) {  		double halfLength = _dataPointlength.Value / 2.0;  		return new Range<UnitValue> (new UnitValue (unitValue.Value - halfLength' unitValue.Unit)' new UnitValue (unitValue.Value + halfLength' unitValue.Unit));  	}  	return new Range<UnitValue> ();  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,ColumnBarBaseSeries,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Series\ColumnBarBaseSeries.cs,GetCategoryRange,The following statement contains a magic number: if (ValueHelper.CanGraph (unitValue.Value) && _dataPointlength.HasValue) {  	double halfLength = _dataPointlength.Value / 2.0;  	return new Range<UnitValue> (new UnitValue (unitValue.Value - halfLength' unitValue.Unit)' new UnitValue (unitValue.Value + halfLength' unitValue.Unit));  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,PieDataPoint,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\DataPoint\PieDataPoint.cs,PieDataPoint,The following statement contains a magic number: if (DesignerProperties.GetIsInDesignMode (this)) {  	// Create default design-mode-friendly settings  	ActualRatio = 0.2;  	SizeChanged += delegate (object sender' SizeChangedEventArgs e) {  		// Handle SizeChanged event to update Geometry dynamically  		PieSeries.UpdatePieDataPointGeometry (this' e.NewSize.Width' e.NewSize.Height);  	};  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,PieDataPoint,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\DataPoint\PieDataPoint.cs,PieDataPoint,The following statement contains a magic number: ActualRatio = 0.2;  
Magic Number,System.Windows.Controls.DataVisualization.Charting,BarSeries,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Series\BarSeries.cs,UpdateDataPoint,The following statement contains a magic number: if (GetIsDataPointGrouped (category)) {  	// Multiple DataPoints share this category; offset and overlap them appropriately  	IGrouping<object' DataPoint> categoryGrouping = GetDataPointGroup (category);  	int index = categoryGrouping.IndexOf (dataPoint);  	dataPointY += (index * (barHeight * 0.2)) / (categoryGrouping.Count () - 1);  	barHeight *= 0.8;  	Canvas.SetZIndex (dataPoint' -index);  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,BarSeries,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Series\BarSeries.cs,UpdateDataPoint,The following statement contains a magic number: if (GetIsDataPointGrouped (category)) {  	// Multiple DataPoints share this category; offset and overlap them appropriately  	IGrouping<object' DataPoint> categoryGrouping = GetDataPointGroup (category);  	int index = categoryGrouping.IndexOf (dataPoint);  	dataPointY += (index * (barHeight * 0.2)) / (categoryGrouping.Count () - 1);  	barHeight *= 0.8;  	Canvas.SetZIndex (dataPoint' -index);  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,BarSeries,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Series\BarSeries.cs,UpdateDataPoint,The following statement contains a magic number: dataPointY += (index * (barHeight * 0.2)) / (categoryGrouping.Count () - 1);  
Magic Number,System.Windows.Controls.DataVisualization.Charting,BarSeries,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Series\BarSeries.cs,UpdateDataPoint,The following statement contains a magic number: barHeight *= 0.8;  
Magic Number,System.Windows.Controls.DataVisualization.Charting,BarSeries,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Series\BarSeries.cs,UpdateDataPoint,The following statement contains a magic number: if (ValueHelper.CanGraph (dataPointX) && ValueHelper.CanGraph (dataPointY) && ValueHelper.CanGraph (zeroPointX)) {  	dataPoint.Visibility = Visibility.Visible;  	double top = Math.Round (dataPointY);  	double height = Math.Round (barHeight);  	double left = Math.Round (Math.Min (dataPointX' zeroPointX) - 0.5);  	double right = Math.Round (Math.Max (dataPointX' zeroPointX) - 0.5);  	double width = right - left + 1;  	Canvas.SetLeft (dataPoint' left);  	Canvas.SetTop (dataPoint' top);  	dataPoint.Width = width;  	dataPoint.Height = height;  } else {  	dataPoint.Visibility = Visibility.Collapsed;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,BarSeries,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Series\BarSeries.cs,UpdateDataPoint,The following statement contains a magic number: if (ValueHelper.CanGraph (dataPointX) && ValueHelper.CanGraph (dataPointY) && ValueHelper.CanGraph (zeroPointX)) {  	dataPoint.Visibility = Visibility.Visible;  	double top = Math.Round (dataPointY);  	double height = Math.Round (barHeight);  	double left = Math.Round (Math.Min (dataPointX' zeroPointX) - 0.5);  	double right = Math.Round (Math.Max (dataPointX' zeroPointX) - 0.5);  	double width = right - left + 1;  	Canvas.SetLeft (dataPoint' left);  	Canvas.SetTop (dataPoint' top);  	dataPoint.Width = width;  	dataPoint.Height = height;  } else {  	dataPoint.Visibility = Visibility.Collapsed;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,ColumnSeries,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Series\ColumnSeries.cs,UpdateDataPoint,The following statement contains a magic number: if (GetIsDataPointGrouped (category)) {  	// Multiple DataPoints share this category; offset and overlap them appropriately  	IGrouping<object' DataPoint> categoryGrouping = GetDataPointGroup (category);  	int index = categoryGrouping.IndexOf (dataPoint);  	dataPointX += (index * (columnWidth * 0.2)) / (categoryGrouping.Count () - 1);  	columnWidth *= 0.8;  	Canvas.SetZIndex (dataPoint' -index);  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,ColumnSeries,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Series\ColumnSeries.cs,UpdateDataPoint,The following statement contains a magic number: if (GetIsDataPointGrouped (category)) {  	// Multiple DataPoints share this category; offset and overlap them appropriately  	IGrouping<object' DataPoint> categoryGrouping = GetDataPointGroup (category);  	int index = categoryGrouping.IndexOf (dataPoint);  	dataPointX += (index * (columnWidth * 0.2)) / (categoryGrouping.Count () - 1);  	columnWidth *= 0.8;  	Canvas.SetZIndex (dataPoint' -index);  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,ColumnSeries,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Series\ColumnSeries.cs,UpdateDataPoint,The following statement contains a magic number: dataPointX += (index * (columnWidth * 0.2)) / (categoryGrouping.Count () - 1);  
Magic Number,System.Windows.Controls.DataVisualization.Charting,ColumnSeries,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Series\ColumnSeries.cs,UpdateDataPoint,The following statement contains a magic number: columnWidth *= 0.8;  
Magic Number,System.Windows.Controls.DataVisualization.Charting,ColumnSeries,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Series\ColumnSeries.cs,UpdateDataPoint,The following statement contains a magic number: if (ValueHelper.CanGraph (dataPointY) && ValueHelper.CanGraph (dataPointX) && ValueHelper.CanGraph (zeroPointY)) {  	dataPoint.Visibility = Visibility.Visible;  	double left = Math.Round (dataPointX);  	double width = Math.Round (columnWidth);  	double top = Math.Round (plotAreaHeight - Math.Max (dataPointY' zeroPointY) + 0.5);  	double bottom = Math.Round (plotAreaHeight - Math.Min (dataPointY' zeroPointY) + 0.5);  	double height = bottom - top + 1;  	Canvas.SetLeft (dataPoint' left);  	Canvas.SetTop (dataPoint' top);  	dataPoint.Width = width;  	dataPoint.Height = height;  } else {  	dataPoint.Visibility = Visibility.Collapsed;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,ColumnSeries,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Series\ColumnSeries.cs,UpdateDataPoint,The following statement contains a magic number: if (ValueHelper.CanGraph (dataPointY) && ValueHelper.CanGraph (dataPointX) && ValueHelper.CanGraph (zeroPointY)) {  	dataPoint.Visibility = Visibility.Visible;  	double left = Math.Round (dataPointX);  	double width = Math.Round (columnWidth);  	double top = Math.Round (plotAreaHeight - Math.Max (dataPointY' zeroPointY) + 0.5);  	double bottom = Math.Round (plotAreaHeight - Math.Min (dataPointY' zeroPointY) + 0.5);  	double height = bottom - top + 1;  	Canvas.SetLeft (dataPoint' left);  	Canvas.SetTop (dataPoint' top);  	dataPoint.Width = width;  	dataPoint.Height = height;  } else {  	dataPoint.Visibility = Visibility.Collapsed;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,ScatterSeries,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Series\ScatterSeries.cs,UpdateDataPoint,The following statement contains a magic number: if (ValueHelper.CanGraph (dataPointX) && ValueHelper.CanGraph (dataPointY)) {  	dataPoint.Visibility = Visibility.Visible;  	// Set the Position  	Canvas.SetLeft (dataPoint' Math.Round (dataPointX - (dataPoint.ActualWidth / 2)));  	Canvas.SetTop (dataPoint' Math.Round (PlotAreaHeight - (dataPointY + (dataPoint.ActualHeight / 2))));  } else {  	dataPoint.Visibility = Visibility.Collapsed;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,ScatterSeries,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Series\ScatterSeries.cs,UpdateDataPoint,The following statement contains a magic number: if (ValueHelper.CanGraph (dataPointX) && ValueHelper.CanGraph (dataPointY)) {  	dataPoint.Visibility = Visibility.Visible;  	// Set the Position  	Canvas.SetLeft (dataPoint' Math.Round (dataPointX - (dataPoint.ActualWidth / 2)));  	Canvas.SetTop (dataPoint' Math.Round (PlotAreaHeight - (dataPointY + (dataPoint.ActualHeight / 2))));  } else {  	dataPoint.Visibility = Visibility.Collapsed;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,ScatterSeries,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Series\ScatterSeries.cs,UpdateDataPoint,The following statement contains a magic number: Canvas.SetLeft (dataPoint' Math.Round (dataPointX - (dataPoint.ActualWidth / 2)));  
Magic Number,System.Windows.Controls.DataVisualization.Charting,ScatterSeries,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Series\ScatterSeries.cs,UpdateDataPoint,The following statement contains a magic number: Canvas.SetTop (dataPoint' Math.Round (PlotAreaHeight - (dataPointY + (dataPoint.ActualHeight / 2))));  
Magic Number,System.Windows.Controls.DataVisualization.Charting,PieSeries,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Series\PieSeries.cs,UpdatePieDataPointGeometry,The following statement contains a magic number: diameter *= 0.95;  
Magic Number,System.Windows.Controls.DataVisualization.Charting,PieSeries,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Series\PieSeries.cs,UpdatePieDataPointGeometry,The following statement contains a magic number: if (pieDataPoint.ActualRatio == 1) {  	foreach (DependencyProperty dependencyProperty in new DependencyProperty[] {  		PieDataPoint.GeometryProperty'  		PieDataPoint.GeometrySelectionProperty'  		PieDataPoint.GeometryHighlightProperty  	}) {  		Geometry geometry = new EllipseGeometry {  			Center = translatePoint'  			RadiusX = sliceRadius'  			RadiusY = sliceRadius  		};  		pieDataPoint.SetValue (dependencyProperty' geometry);  	}  } else {  	if (pieDataPoint.ActualRatio == 0.0) {  		pieDataPoint.Geometry = null;  		pieDataPoint.GeometryHighlight = null;  		pieDataPoint.GeometrySelection = null;  	} else {  		double ratio = pieDataPoint.ActualRatio;  		double offsetRatio = pieDataPoint.ActualOffsetRatio;  		double currentRatio = offsetRatio + ratio;  		Point offsetRatioPoint = ConvertRatioOfRotationToPoint (offsetRatio' sliceRadius' sliceRadius);  		Point adjustedOffsetRatioPoint = offsetRatioPoint.Translate (translatePoint);  		// Calculate the last clockwise point in the pie slice  		Point currentRatioPoint = ConvertRatioOfRotationToPoint (currentRatio' sliceRadius' sliceRadius);  		// Adjust point using center of plot area as origin  		// instead of 0'0  		Point adjustedCurrentRatioPoint = currentRatioPoint.Translate (translatePoint);  		foreach (DependencyProperty dependencyProperty in new DependencyProperty[] {  			PieDataPoint.GeometryProperty'  			PieDataPoint.GeometrySelectionProperty'  			PieDataPoint.GeometryHighlightProperty  		}) {  			// Creating the pie slice geometry object  			PathFigure pathFigure = new PathFigure {  				IsClosed = true  			};  			pathFigure.StartPoint = translatePoint;  			pathFigure.Segments.Add (new LineSegment {  				Point = adjustedOffsetRatioPoint  			});  			bool isLargeArc = (currentRatio - offsetRatio) > 0.5;  			pathFigure.Segments.Add (new ArcSegment {  				Point = adjustedCurrentRatioPoint'  				IsLargeArc = isLargeArc'  				Size = new Size (sliceRadius' sliceRadius)'  				SweepDirection = SweepDirection.Clockwise  			});  			PathGeometry pathGeometry = new PathGeometry ();  			pathGeometry.Figures.Add (pathFigure);  			pieDataPoint.SetValue (dependencyProperty' pathGeometry);  		}  	}  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,PieSeries,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Series\PieSeries.cs,UpdatePieDataPointGeometry,The following statement contains a magic number: if (pieDataPoint.ActualRatio == 0.0) {  	pieDataPoint.Geometry = null;  	pieDataPoint.GeometryHighlight = null;  	pieDataPoint.GeometrySelection = null;  } else {  	double ratio = pieDataPoint.ActualRatio;  	double offsetRatio = pieDataPoint.ActualOffsetRatio;  	double currentRatio = offsetRatio + ratio;  	Point offsetRatioPoint = ConvertRatioOfRotationToPoint (offsetRatio' sliceRadius' sliceRadius);  	Point adjustedOffsetRatioPoint = offsetRatioPoint.Translate (translatePoint);  	// Calculate the last clockwise point in the pie slice  	Point currentRatioPoint = ConvertRatioOfRotationToPoint (currentRatio' sliceRadius' sliceRadius);  	// Adjust point using center of plot area as origin  	// instead of 0'0  	Point adjustedCurrentRatioPoint = currentRatioPoint.Translate (translatePoint);  	foreach (DependencyProperty dependencyProperty in new DependencyProperty[] {  		PieDataPoint.GeometryProperty'  		PieDataPoint.GeometrySelectionProperty'  		PieDataPoint.GeometryHighlightProperty  	}) {  		// Creating the pie slice geometry object  		PathFigure pathFigure = new PathFigure {  			IsClosed = true  		};  		pathFigure.StartPoint = translatePoint;  		pathFigure.Segments.Add (new LineSegment {  			Point = adjustedOffsetRatioPoint  		});  		bool isLargeArc = (currentRatio - offsetRatio) > 0.5;  		pathFigure.Segments.Add (new ArcSegment {  			Point = adjustedCurrentRatioPoint'  			IsLargeArc = isLargeArc'  			Size = new Size (sliceRadius' sliceRadius)'  			SweepDirection = SweepDirection.Clockwise  		});  		PathGeometry pathGeometry = new PathGeometry ();  		pathGeometry.Figures.Add (pathFigure);  		pieDataPoint.SetValue (dependencyProperty' pathGeometry);  	}  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,PieSeries,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Series\PieSeries.cs,UpdatePieDataPointGeometry,The following statement contains a magic number: foreach (DependencyProperty dependencyProperty in new DependencyProperty[] {  	PieDataPoint.GeometryProperty'  	PieDataPoint.GeometrySelectionProperty'  	PieDataPoint.GeometryHighlightProperty  }) {  	// Creating the pie slice geometry object  	PathFigure pathFigure = new PathFigure {  		IsClosed = true  	};  	pathFigure.StartPoint = translatePoint;  	pathFigure.Segments.Add (new LineSegment {  		Point = adjustedOffsetRatioPoint  	});  	bool isLargeArc = (currentRatio - offsetRatio) > 0.5;  	pathFigure.Segments.Add (new ArcSegment {  		Point = adjustedCurrentRatioPoint'  		IsLargeArc = isLargeArc'  		Size = new Size (sliceRadius' sliceRadius)'  		SweepDirection = SweepDirection.Clockwise  	});  	PathGeometry pathGeometry = new PathGeometry ();  	pathGeometry.Figures.Add (pathFigure);  	pieDataPoint.SetValue (dependencyProperty' pathGeometry);  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DataPointSeries,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Series\DataPointSeries.cs,StaggeredStateChange,The following statement contains a magic number: dataPoints.ForEachWithIndex ((dataPoint' count) => {  	// Create an Animation  	ObjectAnimationUsingKeyFrames objectAnimationUsingKeyFrames = new ObjectAnimationUsingKeyFrames ();  	Storyboard.SetTarget (objectAnimationUsingKeyFrames' dataPoint);  	Storyboard.SetTargetProperty (objectAnimationUsingKeyFrames' new PropertyPath ("State"));  	// Create a key frame  	DiscreteObjectKeyFrame discreteObjectKeyFrame = new DiscreteObjectKeyFrame ();  	discreteObjectKeyFrame.Value = newState;  	// Create the specified animation type  	switch (AnimationSequence) {  	case AnimationSequence.Simultaneous:  		discreteObjectKeyFrame.KeyTime = TimeSpan.Zero;  		break;  	case AnimationSequence.FirstToLast:  		discreteObjectKeyFrame.KeyTime = TimeSpan.FromMilliseconds (1000 * ((double)count / dataPointCount));  		break;  	case AnimationSequence.LastToFirst:  		discreteObjectKeyFrame.KeyTime = TimeSpan.FromMilliseconds (1000 * ((double)(dataPointCount - count - 1) / dataPointCount));  		break;  	}  	// Add the Animation to the Storyboard  	objectAnimationUsingKeyFrames.KeyFrames.Add (discreteObjectKeyFrame);  	stateChangeStoryBoard.Children.Add (objectAnimationUsingKeyFrames);  });  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DataPointSeries,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Series\DataPointSeries.cs,StaggeredStateChange,The following statement contains a magic number: dataPoints.ForEachWithIndex ((dataPoint' count) => {  	// Create an Animation  	ObjectAnimationUsingKeyFrames objectAnimationUsingKeyFrames = new ObjectAnimationUsingKeyFrames ();  	Storyboard.SetTarget (objectAnimationUsingKeyFrames' dataPoint);  	Storyboard.SetTargetProperty (objectAnimationUsingKeyFrames' new PropertyPath ("State"));  	// Create a key frame  	DiscreteObjectKeyFrame discreteObjectKeyFrame = new DiscreteObjectKeyFrame ();  	discreteObjectKeyFrame.Value = newState;  	// Create the specified animation type  	switch (AnimationSequence) {  	case AnimationSequence.Simultaneous:  		discreteObjectKeyFrame.KeyTime = TimeSpan.Zero;  		break;  	case AnimationSequence.FirstToLast:  		discreteObjectKeyFrame.KeyTime = TimeSpan.FromMilliseconds (1000 * ((double)count / dataPointCount));  		break;  	case AnimationSequence.LastToFirst:  		discreteObjectKeyFrame.KeyTime = TimeSpan.FromMilliseconds (1000 * ((double)(dataPointCount - count - 1) / dataPointCount));  		break;  	}  	// Add the Animation to the Storyboard  	objectAnimationUsingKeyFrames.KeyFrames.Add (discreteObjectKeyFrame);  	stateChangeStoryBoard.Children.Add (objectAnimationUsingKeyFrames);  });  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DataPointSeries,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Series\DataPointSeries.cs,StaggeredStateChange,The following statement contains a magic number: switch (AnimationSequence) {  case AnimationSequence.Simultaneous:  	discreteObjectKeyFrame.KeyTime = TimeSpan.Zero;  	break;  case AnimationSequence.FirstToLast:  	discreteObjectKeyFrame.KeyTime = TimeSpan.FromMilliseconds (1000 * ((double)count / dataPointCount));  	break;  case AnimationSequence.LastToFirst:  	discreteObjectKeyFrame.KeyTime = TimeSpan.FromMilliseconds (1000 * ((double)(dataPointCount - count - 1) / dataPointCount));  	break;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DataPointSeries,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Series\DataPointSeries.cs,StaggeredStateChange,The following statement contains a magic number: switch (AnimationSequence) {  case AnimationSequence.Simultaneous:  	discreteObjectKeyFrame.KeyTime = TimeSpan.Zero;  	break;  case AnimationSequence.FirstToLast:  	discreteObjectKeyFrame.KeyTime = TimeSpan.FromMilliseconds (1000 * ((double)count / dataPointCount));  	break;  case AnimationSequence.LastToFirst:  	discreteObjectKeyFrame.KeyTime = TimeSpan.FromMilliseconds (1000 * ((double)(dataPointCount - count - 1) / dataPointCount));  	break;  }  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DataPointSeries,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Series\DataPointSeries.cs,StaggeredStateChange,The following statement contains a magic number: discreteObjectKeyFrame.KeyTime = TimeSpan.FromMilliseconds (1000 * ((double)count / dataPointCount));  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DataPointSeries,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Series\DataPointSeries.cs,StaggeredStateChange,The following statement contains a magic number: discreteObjectKeyFrame.KeyTime = TimeSpan.FromMilliseconds (1000 * ((double)(dataPointCount - count - 1) / dataPointCount));  
Magic Number,System.Windows.Controls.DataVisualization.Charting,DataPointSeries,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Series\DataPointSeries.cs,StaggeredStateChange,The following statement contains a magic number: stateChangeStoryBoard.Duration = new Duration (AnimationSequence.Simultaneous == AnimationSequence ? TimeSpan.FromTicks (1) : TimeSpan.FromMilliseconds (1001));  
Missing Default,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Axis\DateTimeAxis.cs,AlignIntervalStart,The following switch statement is missing a default case: switch (type) {  case DateTimeIntervalType.Years:  	int year = (int)((int)(newStartDate.Year / intervalSize) * intervalSize);  	if (year <= 0) {  		year = 1;  	}  	newStartDate = new DateTime (year' 1' 1' 0' 0' 0);  	break;  case DateTimeIntervalType.Months:  	int month = (int)((int)(newStartDate.Month / intervalSize) * intervalSize);  	if (month <= 0) {  		month = 1;  	}  	newStartDate = new DateTime (newStartDate.Year' month' 1' 0' 0' 0);  	break;  case DateTimeIntervalType.Days:  	int day = (int)((int)(newStartDate.Day / intervalSize) * intervalSize);  	if (day <= 0) {  		day = 1;  	}  	newStartDate = new DateTime (newStartDate.Year' newStartDate.Month' day' 0' 0' 0);  	break;  case DateTimeIntervalType.Hours:  	int hour = (int)((int)(newStartDate.Hour / intervalSize) * intervalSize);  	newStartDate = new DateTime (newStartDate.Year' newStartDate.Month' newStartDate.Day' hour' 0' 0);  	break;  case DateTimeIntervalType.Minutes:  	int minute = (int)((int)(newStartDate.Minute / intervalSize) * intervalSize);  	newStartDate = new DateTime (newStartDate.Year' newStartDate.Month' newStartDate.Day' newStartDate.Hour' minute' 0);  	break;  case DateTimeIntervalType.Seconds:  	int second = (int)((int)(newStartDate.Second / intervalSize) * intervalSize);  	newStartDate = new DateTime (newStartDate.Year' newStartDate.Month' newStartDate.Day' newStartDate.Hour' newStartDate.Minute' second' 0);  	break;  case DateTimeIntervalType.Milliseconds:  	int milliseconds = (int)((int)(newStartDate.Millisecond / intervalSize) * intervalSize);  	newStartDate = new DateTime (newStartDate.Year' newStartDate.Month' newStartDate.Day' newStartDate.Hour' newStartDate.Minute' newStartDate.Second' milliseconds);  	break;  case DateTimeIntervalType.Weeks:  	// Elements that have interval set to weeks should be aligned to the   	// nearest start of week no matter how many weeks is the interval.  	newStartDate = new DateTime (newStartDate.Year' newStartDate.Month' newStartDate.Day' 0' 0' 0);  	newStartDate = newStartDate.AddDays (-((int)newStartDate.DayOfWeek));  	break;  }  
Missing Default,System.Windows.Controls.DataVisualization.Charting,Chart,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Chart\Chart.cs,SetEdge,The following switch statement is missing a default case: switch (axis.Location) {  case AxisLocation.Bottom:  	EdgePanel.SetEdge (axis' Edge.Bottom);  	break;  case AxisLocation.Top:  	EdgePanel.SetEdge (axis' Edge.Top);  	break;  case AxisLocation.Left:  	EdgePanel.SetEdge (axis' Edge.Left);  	break;  case AxisLocation.Right:  	EdgePanel.SetEdge (axis' Edge.Right);  	break;  }  
Missing Default,System.Windows.Controls.DataVisualization.Charting,DataPoint,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\DataPoint\DataPoint.cs,OnStatePropertyChanged,The following switch statement is missing a default case: switch (newValue) {  case DataPointState.Showing:  case DataPointState.Hiding:  	transitionStarted = GoToCurrentRevealState ();  	break;  }  
Missing Default,System.Windows.Controls.DataVisualization.Charting,DataPoint,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\DataPoint\DataPoint.cs,OnStatePropertyChanged,The following switch statement is missing a default case: switch (newValue) {  case DataPointState.Showing:  	State = DataPointState.Normal;  	break;  case DataPointState.Hiding:  	State = DataPointState.Hidden;  	break;  }  
Missing Default,System.Windows.Controls.DataVisualization.Charting,DataPoint,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\DataPoint\DataPoint.cs,GoToCurrentRevealState,The following switch statement is missing a default case: switch (State) {  case DataPointState.Showing:  	if (_haveStateRevealShown) {  		stateName = StateRevealShown;  	}  	break;  case DataPointState.Hiding:  	if (_haveStateRevealHidden) {  		stateName = StateRevealHidden;  	}  	break;  }  
Missing Default,System.Windows.Controls.DataVisualization.Charting,DataPoint,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\DataPoint\DataPoint.cs,OnCurrentStateChanged,The following switch statement is missing a default case: switch (e.NewState.Name) {  case StateRevealShown:  	if (State == DataPointState.Showing) {  		State = DataPointState.Normal;  	}  	break;  case StateRevealHidden:  	if (State == DataPointState.Hiding) {  		State = DataPointState.Hidden;  	}  	break;  }  
Missing Default,System.Windows.Controls.DataVisualization.Charting,DataPointSeries,F:\newReposMay17\CoEST_TraceLab\Main\external\WPFToolkit\Source\DataVisualization\Charting\Series\DataPointSeries.cs,StaggeredStateChange,The following switch statement is missing a default case: switch (AnimationSequence) {  case AnimationSequence.Simultaneous:  	discreteObjectKeyFrame.KeyTime = TimeSpan.Zero;  	break;  case AnimationSequence.FirstToLast:  	discreteObjectKeyFrame.KeyTime = TimeSpan.FromMilliseconds (1000 * ((double)count / dataPointCount));  	break;  case AnimationSequence.LastToFirst:  	discreteObjectKeyFrame.KeyTime = TimeSpan.FromMilliseconds (1000 * ((double)(dataPointCount - count - 1) / dataPointCount));  	break;  }  
