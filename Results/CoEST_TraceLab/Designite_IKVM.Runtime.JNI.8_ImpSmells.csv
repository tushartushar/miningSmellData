Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,IKVM.Runtime,JNIEnv,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\runtime\JniInterface.cs,DefineClass,The method has 5 parameters. Parameters: pEnv' name' loader' pbuf' length
Long Parameter List,IKVM.Runtime,JNIEnv,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\runtime\JniInterface.cs,InvokeHelper,The method has 5 parameters. Parameters: pEnv' obj' methodID' args' nonVirtual
Long Parameter List,IKVM.Runtime,JNIEnv,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\runtime\JniInterface.cs,FindMethodID,The method has 5 parameters. Parameters: pEnv' clazz' name' sig' isstatic
Long Parameter List,IKVM.Runtime,JNIEnv,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\runtime\JniInterface.cs,CallNonvirtualObjectMethodA,The method has 5 parameters. Parameters: pEnv' obj' clazz' methodID' args
Long Parameter List,IKVM.Runtime,JNIEnv,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\runtime\JniInterface.cs,CallNonvirtualBooleanMethodA,The method has 5 parameters. Parameters: pEnv' obj' clazz' methodID' args
Long Parameter List,IKVM.Runtime,JNIEnv,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\runtime\JniInterface.cs,CallNonvirtualByteMethodA,The method has 5 parameters. Parameters: pEnv' obj' clazz' methodID' args
Long Parameter List,IKVM.Runtime,JNIEnv,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\runtime\JniInterface.cs,CallNonvirtualCharMethodA,The method has 5 parameters. Parameters: pEnv' obj' clazz' methodID' args
Long Parameter List,IKVM.Runtime,JNIEnv,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\runtime\JniInterface.cs,CallNonvirtualShortMethodA,The method has 5 parameters. Parameters: pEnv' obj' clazz' methodID' args
Long Parameter List,IKVM.Runtime,JNIEnv,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\runtime\JniInterface.cs,CallNonvirtualIntMethodA,The method has 5 parameters. Parameters: pEnv' obj' clazz' methodID' args
Long Parameter List,IKVM.Runtime,JNIEnv,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\runtime\JniInterface.cs,CallNonvirtualLongMethodA,The method has 5 parameters. Parameters: pEnv' obj' clazz' methodID' args
Long Parameter List,IKVM.Runtime,JNIEnv,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\runtime\JniInterface.cs,CallNonvirtualFloatMethodA,The method has 5 parameters. Parameters: pEnv' obj' clazz' methodID' args
Long Parameter List,IKVM.Runtime,JNIEnv,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\runtime\JniInterface.cs,CallNonvirtualDoubleMethodA,The method has 5 parameters. Parameters: pEnv' obj' clazz' methodID' args
Long Parameter List,IKVM.Runtime,JNIEnv,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\runtime\JniInterface.cs,CallNonvirtualVoidMethodA,The method has 5 parameters. Parameters: pEnv' obj' clazz' methodID' args
Long Parameter List,IKVM.Runtime,JNIEnv,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\runtime\JniInterface.cs,FindFieldID,The method has 5 parameters. Parameters: pEnv' clazz' name' sig' isstatic
Long Parameter List,IKVM.Runtime,JNIEnv,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\runtime\JniInterface.cs,GetBooleanArrayRegion,The method has 5 parameters. Parameters: pEnv' array' start' len' buf
Long Parameter List,IKVM.Runtime,JNIEnv,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\runtime\JniInterface.cs,GetByteArrayRegion,The method has 5 parameters. Parameters: pEnv' array' start' len' buf
Long Parameter List,IKVM.Runtime,JNIEnv,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\runtime\JniInterface.cs,GetCharArrayRegion,The method has 5 parameters. Parameters: pEnv' array' start' len' buf
Long Parameter List,IKVM.Runtime,JNIEnv,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\runtime\JniInterface.cs,GetShortArrayRegion,The method has 5 parameters. Parameters: pEnv' array' start' len' buf
Long Parameter List,IKVM.Runtime,JNIEnv,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\runtime\JniInterface.cs,GetIntArrayRegion,The method has 5 parameters. Parameters: pEnv' array' start' len' buf
Long Parameter List,IKVM.Runtime,JNIEnv,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\runtime\JniInterface.cs,GetLongArrayRegion,The method has 5 parameters. Parameters: pEnv' array' start' len' buf
Long Parameter List,IKVM.Runtime,JNIEnv,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\runtime\JniInterface.cs,GetFloatArrayRegion,The method has 5 parameters. Parameters: pEnv' array' start' len' buf
Long Parameter List,IKVM.Runtime,JNIEnv,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\runtime\JniInterface.cs,GetDoubleArrayRegion,The method has 5 parameters. Parameters: pEnv' array' start' len' buf
Long Parameter List,IKVM.Runtime,JNIEnv,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\runtime\JniInterface.cs,SetBooleanArrayRegion,The method has 5 parameters. Parameters: pEnv' array' start' len' buf
Long Parameter List,IKVM.Runtime,JNIEnv,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\runtime\JniInterface.cs,SetByteArrayRegion,The method has 5 parameters. Parameters: pEnv' array' start' len' buf
Long Parameter List,IKVM.Runtime,JNIEnv,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\runtime\JniInterface.cs,SetCharArrayRegion,The method has 5 parameters. Parameters: pEnv' array' start' len' buf
Long Parameter List,IKVM.Runtime,JNIEnv,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\runtime\JniInterface.cs,SetShortArrayRegion,The method has 5 parameters. Parameters: pEnv' array' start' len' buf
Long Parameter List,IKVM.Runtime,JNIEnv,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\runtime\JniInterface.cs,SetIntArrayRegion,The method has 5 parameters. Parameters: pEnv' array' start' len' buf
Long Parameter List,IKVM.Runtime,JNIEnv,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\runtime\JniInterface.cs,SetLongArrayRegion,The method has 5 parameters. Parameters: pEnv' array' start' len' buf
Long Parameter List,IKVM.Runtime,JNIEnv,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\runtime\JniInterface.cs,SetFloatArrayRegion,The method has 5 parameters. Parameters: pEnv' array' start' len' buf
Long Parameter List,IKVM.Runtime,JNIEnv,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\runtime\JniInterface.cs,SetDoubleArrayRegion,The method has 5 parameters. Parameters: pEnv' array' start' len' buf
Long Parameter List,IKVM.Runtime,JNIEnv,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\runtime\JniInterface.cs,GetStringRegion,The method has 5 parameters. Parameters: pEnv' str' start' len' buf
Long Parameter List,IKVM.Runtime,JNIEnv,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\runtime\JniInterface.cs,GetStringUTFRegion,The method has 5 parameters. Parameters: pEnv' str' start' len' buf
Long Statement,IKVM.Runtime,JNI,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\runtime\JniInterface.cs,IsSupportedJniVersion,The length of the statement  "			return version == JNIEnv.JNI_VERSION_1_1 || version == JNIEnv.JNI_VERSION_1_2 || version == JNIEnv.JNI_VERSION_1_4 || version == JNIEnv.JNI_VERSION_1_6; " is 152.
Long Statement,IKVM.Runtime,JNIEnv,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\runtime\JniInterface.cs,DefineClass,The length of the statement  "				return pEnv->MakeLocalRef(IKVM.NativeCode.java.lang.ClassLoader.defineClass0(classLoader' name != null ? StringFromOEM(name) : null' buf' 0' buf.Length' null)); " is 160.
Long Statement,IKVM.Runtime,JNIEnv,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\runtime\JniInterface.cs,AllocObjectImpl,The length of the statement  "				return pEnv->MakeLocalRef(System.Runtime.Serialization.FormatterServices.GetUninitializedObject(wrapper.TypeAsBaseType)); " is 121.
Long Statement,IKVM.Runtime,JNIEnv,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\runtime\JniInterface.cs,FindFieldID,The length of the statement  "				SetPendingException(pEnv' new java.lang.NoSuchFieldError((isstatic ? "Static" : "Instance") + " field '" + StringFromUTF8(name) + "' with signature '" + fieldsig + "' not found in class '" + wrapper.Name + "'")); " is 212.
Long Statement,IKVM.Runtime,JNIEnv,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\runtime\JniInterface.cs,NewObjectArray,The length of the statement  "				Array array = Array.CreateInstance(TypeWrapper.FromClass((java.lang.Class)pEnv->UnwrapRef(clazz)).TypeAsArrayType' len); " is 120.
Long Statement,IKVM.Runtime,JNIEnv,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\runtime\JniInterface.cs,RegisterNatives,The length of the statement  "					Tracer.Info(Tracer.Jni' "Registering native method: {0}.{1}{2}' fnPtr = 0x{3:X}"' wrapper.Name' methodName' methodSig' ((IntPtr)methods[i].fnPtr).ToInt64()); " is 157.
Long Statement,IKVM.Runtime,JNIEnv,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\runtime\JniInterface.cs,RegisterNatives,The length of the statement  "						fi = wrapper.TypeAsTBD.GetField(JNI.METHOD_PTR_FIELD_PREFIX + methodName + methodSig' BindingFlags.Static | BindingFlags.NonPublic); " is 132.
Long Statement,IKVM.Runtime,JNIEnv,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\runtime\JniInterface.cs,UnregisterNatives,The length of the statement  "						Tracer.Info(Tracer.Jni' "Unregistering native method: {0}.{1}"' wrapper.Name' name.Substring(JNI.METHOD_PTR_FIELD_PREFIX.Length)); " is 130.
Complex Conditional,IKVM.Runtime,Frame,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\runtime\JniInterface.cs,JniMangle,The conditional expression  "(c >= '0' && c <= '9') || (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')"  is complex.
Virtual Method Call from Constructor,IKVM.Runtime,NativeLibrary,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\runtime\JniInterface.cs,NativeLibrary,The constructor "NativeLibrary" calls a virtual method "_MarshalDelegate".
Empty Catch Block,IKVM.Runtime,JavaVM,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\runtime\JniInterface.cs,AttachCurrentThreadImpl,The method has an empty catch block.
Magic Number,IKVM.Runtime,JNI,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\runtime\JniInterface.cs,CreateJavaVM,The following statement contains a magic number: for(int i = 0; i < pInitArgs->nOptions; i++)  			{  				string option = JNIEnv.StringFromOEM(pInitArgs->options[i].optionString);  				if(option.StartsWith("-D"))  				{  					int idx = option.IndexOf('='' 2);  					props[option.Substring(2' idx - 2)] = option.Substring(idx + 1);  				}  				else if(option.StartsWith("-verbose"))  				{  					// ignore  				}  				else if(option == "vfprintf" || option == "exit" || option == "abort")  				{  					// not supported  				}  				else if(pInitArgs->ignoreUnrecognized == JNIEnv.JNI_FALSE)  				{  					return JNIEnv.JNI_ERR;  				}  			}
Magic Number,IKVM.Runtime,JNI,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\runtime\JniInterface.cs,CreateJavaVM,The following statement contains a magic number: for(int i = 0; i < pInitArgs->nOptions; i++)  			{  				string option = JNIEnv.StringFromOEM(pInitArgs->options[i].optionString);  				if(option.StartsWith("-D"))  				{  					int idx = option.IndexOf('='' 2);  					props[option.Substring(2' idx - 2)] = option.Substring(idx + 1);  				}  				else if(option.StartsWith("-verbose"))  				{  					// ignore  				}  				else if(option == "vfprintf" || option == "exit" || option == "abort")  				{  					// not supported  				}  				else if(pInitArgs->ignoreUnrecognized == JNIEnv.JNI_FALSE)  				{  					return JNIEnv.JNI_ERR;  				}  			}
Magic Number,IKVM.Runtime,JNI,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\runtime\JniInterface.cs,CreateJavaVM,The following statement contains a magic number: for(int i = 0; i < pInitArgs->nOptions; i++)  			{  				string option = JNIEnv.StringFromOEM(pInitArgs->options[i].optionString);  				if(option.StartsWith("-D"))  				{  					int idx = option.IndexOf('='' 2);  					props[option.Substring(2' idx - 2)] = option.Substring(idx + 1);  				}  				else if(option.StartsWith("-verbose"))  				{  					// ignore  				}  				else if(option == "vfprintf" || option == "exit" || option == "abort")  				{  					// not supported  				}  				else if(pInitArgs->ignoreUnrecognized == JNIEnv.JNI_FALSE)  				{  					return JNIEnv.JNI_ERR;  				}  			}
Magic Number,IKVM.Runtime,Frame,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\runtime\JniInterface.cs,GetFuncPtr,The following statement contains a magic number: for(int i = 1; sig[i] != ')'; i++)  				{  					switch(sig[i])  					{  						case '[':  							sp += IntPtr.Size;  							while(sig[++i] == '[');  							if(sig[i] == 'L')  							{  								while(sig[++i] != ';');  							}  							break;  						case 'L':  							sp += IntPtr.Size;  							while(sig[++i] != ';');  							break;  						case 'J':  						case 'D':  							sp += 8;  							break;  						case 'F':  						case 'I':  						case 'C':  						case 'Z':  						case 'S':  						case 'B':  							sp += 4;  							break;  						default:  							Debug.Assert(false);  							break;  					}  				}
Magic Number,IKVM.Runtime,Frame,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\runtime\JniInterface.cs,GetFuncPtr,The following statement contains a magic number: for(int i = 1; sig[i] != ')'; i++)  				{  					switch(sig[i])  					{  						case '[':  							sp += IntPtr.Size;  							while(sig[++i] == '[');  							if(sig[i] == 'L')  							{  								while(sig[++i] != ';');  							}  							break;  						case 'L':  							sp += IntPtr.Size;  							while(sig[++i] != ';');  							break;  						case 'J':  						case 'D':  							sp += 8;  							break;  						case 'F':  						case 'I':  						case 'C':  						case 'Z':  						case 'S':  						case 'B':  							sp += 4;  							break;  						default:  							Debug.Assert(false);  							break;  					}  				}
Magic Number,IKVM.Runtime,Frame,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\runtime\JniInterface.cs,GetFuncPtr,The following statement contains a magic number: Tracer.Info(Tracer.Jni' "Linking native method: {0}.{1}{2}' class loader = {3}' short = {4}' long = {5}' args = {6}"'  					clazz' name' sig' loader' shortMethodName' longMethodName' sp + 2 * IntPtr.Size);
Magic Number,IKVM.Runtime,Frame,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\runtime\JniInterface.cs,GetFuncPtr,The following statement contains a magic number: lock(JniHelper.JniLock)  				{  					foreach(IntPtr p in loader.GetNativeLibraries())  					{  						IntPtr pfunc = NativeLibrary.GetProcAddress(p' shortMethodName' sp + 2 * IntPtr.Size);  						if(pfunc != IntPtr.Zero)  						{  							Tracer.Info(Tracer.Jni' "Native method {0}.{1}{2} found in library 0x{3:X} (short)"' clazz' name' sig' p.ToInt64());  							return pfunc;  						}  						pfunc = NativeLibrary.GetProcAddress(p' longMethodName' sp + 2 * IntPtr.Size);  						if(pfunc != IntPtr.Zero)  						{  							Tracer.Info(Tracer.Jni' "Native method {0}.{1}{2} found in library 0x{3:X} (long)"' clazz' name' sig' p.ToInt64());  							return pfunc;  						}  					}  				}
Magic Number,IKVM.Runtime,Frame,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\runtime\JniInterface.cs,GetFuncPtr,The following statement contains a magic number: lock(JniHelper.JniLock)  				{  					foreach(IntPtr p in loader.GetNativeLibraries())  					{  						IntPtr pfunc = NativeLibrary.GetProcAddress(p' shortMethodName' sp + 2 * IntPtr.Size);  						if(pfunc != IntPtr.Zero)  						{  							Tracer.Info(Tracer.Jni' "Native method {0}.{1}{2} found in library 0x{3:X} (short)"' clazz' name' sig' p.ToInt64());  							return pfunc;  						}  						pfunc = NativeLibrary.GetProcAddress(p' longMethodName' sp + 2 * IntPtr.Size);  						if(pfunc != IntPtr.Zero)  						{  							Tracer.Info(Tracer.Jni' "Native method {0}.{1}{2} found in library 0x{3:X} (long)"' clazz' name' sig' p.ToInt64());  							return pfunc;  						}  					}  				}
Magic Number,IKVM.Runtime,NativeLibrary,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\runtime\JniInterface.cs,NativeLibrary,The following statement contains a magic number: try  			{  				if (Environment.OSVersion.Platform == PlatformID.Win32NT)  				{  					if (IntPtr.Size == 4)  					{  						impl = new Win32_x86();  					}  					else  					{  						impl = new Win32_x64();  					}  					// call a method to trigger the native library load  					// (if this fails' we fall back to the classic native library)  					impl._MarshalDelegate(null);  				}  				else  				{  					impl = new Classic();  				}  			}  			catch (DllNotFoundException)  			{  				impl = new Classic();  			}  			catch (BadImageFormatException)  			{  				impl = new Classic();  			}
Magic Number,IKVM.Runtime,JniHelper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\runtime\JniInterface.cs,LoadLibrary,The following statement contains a magic number: lock(JniLock)  			{  				IntPtr p = NativeLibrary.LoadLibrary(filename);  				if(p == IntPtr.Zero)  				{  					Tracer.Info(Tracer.Jni' "Library not found: {0}"' filename);  					return 0;  				}  				try  				{  					foreach(IntPtr tmp in loader.GetNativeLibraries())  					{  						if(tmp == p)  						{  							// the library was already loaded by the current class loader'  							// no need to do anything  							NativeLibrary.FreeLibrary(p);  							Tracer.Warning(Tracer.Jni' "Library was already loaded: {0}"' filename);  							return p.ToInt64();  						}  					}  					if(nativeLibraries.Contains(p))  					{  						string msg = string.Format("Native library {0} already loaded in another classloader"' filename);  						Tracer.Error(Tracer.Jni' "UnsatisfiedLinkError: {0}"' msg);  						throw new java.lang.UnsatisfiedLinkError(msg);  					}  					Tracer.Info(Tracer.Jni' "Library loaded: {0}' handle = 0x{1:X}"' filename' p.ToInt64());  					IntPtr onload = NativeLibrary.GetProcAddress(p' "JNI_OnLoad"' IntPtr.Size * 2);  					if(onload != IntPtr.Zero)  					{  						Tracer.Info(Tracer.Jni' "Calling JNI_OnLoad on: {0}"' filename);  						JNI.Frame f = new JNI.Frame();  						int version;  						ClassLoaderWrapper prevLoader = f.Enter(loader);  						try  						{  							// TODO on Whidbey we should be able to use Marshal.GetDelegateForFunctionPointer to call OnLoad  							version = NativeLibrary.CallOnLoad(onload' JavaVM.pJavaVM' null);  							Tracer.Info(Tracer.Jni' "JNI_OnLoad returned: 0x{0:X8}"' version);  						}  						finally  						{  							f.Leave(prevLoader);  						}  						if(!JNI.IsSupportedJniVersion(version))  						{  							string msg = string.Format("Unsupported JNI version 0x{0:X} required by {1}"' version' filename);  							Tracer.Error(Tracer.Jni' "UnsatisfiedLinkError: {0}"' msg);  							throw new java.lang.UnsatisfiedLinkError(msg);  						}  					}  					nativeLibraries.Add(p);  					loader.RegisterNativeLibrary(p);  					return p.ToInt64();  				}  				catch  				{  					NativeLibrary.FreeLibrary(p);  					throw;  				}  			}
Magic Number,IKVM.Runtime,JniHelper,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\runtime\JniInterface.cs,UnloadLibrary,The following statement contains a magic number: lock (JniLock)  			{  				Tracer.Info(Tracer.Jni' "Unloading library: handle = 0x{0:X}' class loader = {1}"' handle' loader);  				IntPtr p = (IntPtr)handle;  				IntPtr onunload = NativeLibrary.GetProcAddress(p' "JNI_OnUnload"' IntPtr.Size * 2);  				if (onunload != IntPtr.Zero)  				{  					Tracer.Info(Tracer.Jni' "Calling JNI_OnUnload on: handle = 0x{0:X}"' handle);  					JNI.Frame f = new JNI.Frame();  					ClassLoaderWrapper prevLoader = f.Enter(loader);  					try  					{  						// TODO on Whidbey we should be able to use Marshal.GetDelegateForFunctionPointer to call OnLoad  						NativeLibrary.CallOnLoad(onunload' JavaVM.pJavaVM' null);  					}  					finally  					{  						f.Leave(prevLoader);  					}  				}  				nativeLibraries.Remove(p);  				loader.UnregisterNativeLibrary(p);  				NativeLibrary.FreeLibrary((IntPtr)handle);  			}
Magic Number,IKVM.Runtime,GlobalRefs,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\runtime\JniInterface.cs,Unwrap,The following statement contains a magic number: if ((i & (1 << 30)) != 0)  			{  				lock (GlobalRefs.weakRefLock)  				{  					return GlobalRefs.weakRefs[i - (1 << 30)].Target;  				}  			}  			else  			{  				lock (GlobalRefs.globalRefs)  				{  					return GlobalRefs.globalRefs[i - 1];  				}  			}
Magic Number,IKVM.Runtime,GlobalRefs,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\runtime\JniInterface.cs,Unwrap,The following statement contains a magic number: if ((i & (1 << 30)) != 0)  			{  				lock (GlobalRefs.weakRefLock)  				{  					return GlobalRefs.weakRefs[i - (1 << 30)].Target;  				}  			}  			else  			{  				lock (GlobalRefs.globalRefs)  				{  					return GlobalRefs.globalRefs[i - 1];  				}  			}
Magic Number,IKVM.Runtime,JNIEnv,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\runtime\JniInterface.cs,StringFromUTF8,The following statement contains a magic number: while(psz[len] != 0)  			{  				hasNonAscii |= psz[len] >= 128;  				len++;  			}
Magic Number,IKVM.Runtime,JNIEnv,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\runtime\JniInterface.cs,StringFromUTF8,The following statement contains a magic number: for(int i = 0; i < len; i++)  			{  				int c = *psz++;  				int char2' char3;  				switch(c >> 4)  				{  					case 12:  					case 13:  						char2 = *psz++;  						i++;  						c = (((c & 0x1F) << 6) | (char2 & 0x3F));  						break;  					case 14:  						char2 = *psz++;  						char3 = *psz++;  						i++;  						i++;  						c = ((c & 0x0F) << 12) | ((char2 & 0x3F) << 6) | (char3 & 0x3F);  						break;  				}  				sb.Append((char)c);  			}
Magic Number,IKVM.Runtime,JNIEnv,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\runtime\JniInterface.cs,StringFromUTF8,The following statement contains a magic number: for(int i = 0; i < len; i++)  			{  				int c = *psz++;  				int char2' char3;  				switch(c >> 4)  				{  					case 12:  					case 13:  						char2 = *psz++;  						i++;  						c = (((c & 0x1F) << 6) | (char2 & 0x3F));  						break;  					case 14:  						char2 = *psz++;  						char3 = *psz++;  						i++;  						i++;  						c = ((c & 0x0F) << 12) | ((char2 & 0x3F) << 6) | (char3 & 0x3F);  						break;  				}  				sb.Append((char)c);  			}
Magic Number,IKVM.Runtime,JNIEnv,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\runtime\JniInterface.cs,StringFromUTF8,The following statement contains a magic number: for(int i = 0; i < len; i++)  			{  				int c = *psz++;  				int char2' char3;  				switch(c >> 4)  				{  					case 12:  					case 13:  						char2 = *psz++;  						i++;  						c = (((c & 0x1F) << 6) | (char2 & 0x3F));  						break;  					case 14:  						char2 = *psz++;  						char3 = *psz++;  						i++;  						i++;  						c = ((c & 0x0F) << 12) | ((char2 & 0x3F) << 6) | (char3 & 0x3F);  						break;  				}  				sb.Append((char)c);  			}
Magic Number,IKVM.Runtime,JNIEnv,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\runtime\JniInterface.cs,StringFromUTF8,The following statement contains a magic number: for(int i = 0; i < len; i++)  			{  				int c = *psz++;  				int char2' char3;  				switch(c >> 4)  				{  					case 12:  					case 13:  						char2 = *psz++;  						i++;  						c = (((c & 0x1F) << 6) | (char2 & 0x3F));  						break;  					case 14:  						char2 = *psz++;  						char3 = *psz++;  						i++;  						i++;  						c = ((c & 0x0F) << 12) | ((char2 & 0x3F) << 6) | (char3 & 0x3F);  						break;  				}  				sb.Append((char)c);  			}
Magic Number,IKVM.Runtime,JNIEnv,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\runtime\JniInterface.cs,StringFromUTF8,The following statement contains a magic number: for(int i = 0; i < len; i++)  			{  				int c = *psz++;  				int char2' char3;  				switch(c >> 4)  				{  					case 12:  					case 13:  						char2 = *psz++;  						i++;  						c = (((c & 0x1F) << 6) | (char2 & 0x3F));  						break;  					case 14:  						char2 = *psz++;  						char3 = *psz++;  						i++;  						i++;  						c = ((c & 0x0F) << 12) | ((char2 & 0x3F) << 6) | (char3 & 0x3F);  						break;  				}  				sb.Append((char)c);  			}
Magic Number,IKVM.Runtime,JNIEnv,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\runtime\JniInterface.cs,StringFromUTF8,The following statement contains a magic number: for(int i = 0; i < len; i++)  			{  				int c = *psz++;  				int char2' char3;  				switch(c >> 4)  				{  					case 12:  					case 13:  						char2 = *psz++;  						i++;  						c = (((c & 0x1F) << 6) | (char2 & 0x3F));  						break;  					case 14:  						char2 = *psz++;  						char3 = *psz++;  						i++;  						i++;  						c = ((c & 0x0F) << 12) | ((char2 & 0x3F) << 6) | (char3 & 0x3F);  						break;  				}  				sb.Append((char)c);  			}
Magic Number,IKVM.Runtime,JNIEnv,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\runtime\JniInterface.cs,StringFromUTF8,The following statement contains a magic number: for(int i = 0; i < len; i++)  			{  				int c = *psz++;  				int char2' char3;  				switch(c >> 4)  				{  					case 12:  					case 13:  						char2 = *psz++;  						i++;  						c = (((c & 0x1F) << 6) | (char2 & 0x3F));  						break;  					case 14:  						char2 = *psz++;  						char3 = *psz++;  						i++;  						i++;  						c = ((c & 0x0F) << 12) | ((char2 & 0x3F) << 6) | (char3 & 0x3F);  						break;  				}  				sb.Append((char)c);  			}
Magic Number,IKVM.Runtime,JNIEnv,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\runtime\JniInterface.cs,StringUTF8Length,The following statement contains a magic number: for(int i = 0; i < s.Length; i++)  			{  				char ch = s[i];  				if((ch != 0) && (ch <= 0x7F))  				{  					len++;  				}  				else if(ch <= 0x7FF)  				{  					len += 2;  				}  				else  				{  					len += 3;  				}  			}
Magic Number,IKVM.Runtime,JNIEnv,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\runtime\JniInterface.cs,StringUTF8Length,The following statement contains a magic number: for(int i = 0; i < s.Length; i++)  			{  				char ch = s[i];  				if((ch != 0) && (ch <= 0x7F))  				{  					len++;  				}  				else if(ch <= 0x7FF)  				{  					len += 2;  				}  				else  				{  					len += 3;  				}  			}
Magic Number,IKVM.Runtime,JNIEnv,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\runtime\JniInterface.cs,FindClass,The following statement contains a magic number: try  			{  				string name = StringFromOEM(pszName);  				// don't allow dotted names!  				if(name.IndexOf('.') >= 0)  				{  					SetPendingException(pEnv' new java.lang.NoClassDefFoundError(name));  					return IntPtr.Zero;  				}  				// spec doesn't say it' but Sun allows signature format class names (but not for primitives)  				if(name.StartsWith("L") && name.EndsWith(";"))  				{  					name = name.Substring(1' name.Length - 2);  				}  				TypeWrapper wrapper = FindNativeMethodClassLoader(pEnv).LoadClassByDottedNameFast(name.Replace('/'' '.'));  				if(wrapper == null)  				{  					SetPendingException(pEnv' new java.lang.NoClassDefFoundError(name));  					return IntPtr.Zero;  				}  				wrapper.Finish();  				// spec doesn't say it' but Sun runs the static initializer  				wrapper.RunClassInit();  				return pEnv->MakeLocalRef(wrapper.ClassObject);  			}  			catch(Exception x)  			{  				if(x is RetargetableJavaException)  				{  					x = ((RetargetableJavaException)x).ToJava();  				}  				SetPendingException(pEnv' x);  				return IntPtr.Zero;  			}
Magic Number,IKVM.Runtime,JNIEnv,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\runtime\JniInterface.cs,GetStringUTFChars,The following statement contains a magic number: for(int i = 0; i < s.Length; i++)  			{  				char ch = s[i];  				if((ch != 0) && (ch <= 0x7F))  				{  					buf[j++] = (byte)ch;  				}  				else if(ch <= 0x7FF)  				{  					buf[j++] = (byte)((ch >> 6) | 0xC0);  					buf[j++] = (byte)((ch & 0x3F) | 0x80);  				}  				else  				{  					buf[j++] = (byte)((ch >> 12) | 0xE0);  					buf[j++] = (byte)(((ch >> 6) & 0x3F) | 0x80);  					buf[j++] = (byte)((ch & 0x3F) | 0x80);  				}  			}
Magic Number,IKVM.Runtime,JNIEnv,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\runtime\JniInterface.cs,GetStringUTFChars,The following statement contains a magic number: for(int i = 0; i < s.Length; i++)  			{  				char ch = s[i];  				if((ch != 0) && (ch <= 0x7F))  				{  					buf[j++] = (byte)ch;  				}  				else if(ch <= 0x7FF)  				{  					buf[j++] = (byte)((ch >> 6) | 0xC0);  					buf[j++] = (byte)((ch & 0x3F) | 0x80);  				}  				else  				{  					buf[j++] = (byte)((ch >> 12) | 0xE0);  					buf[j++] = (byte)(((ch >> 6) & 0x3F) | 0x80);  					buf[j++] = (byte)((ch & 0x3F) | 0x80);  				}  			}
Magic Number,IKVM.Runtime,JNIEnv,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\runtime\JniInterface.cs,GetStringUTFChars,The following statement contains a magic number: for(int i = 0; i < s.Length; i++)  			{  				char ch = s[i];  				if((ch != 0) && (ch <= 0x7F))  				{  					buf[j++] = (byte)ch;  				}  				else if(ch <= 0x7FF)  				{  					buf[j++] = (byte)((ch >> 6) | 0xC0);  					buf[j++] = (byte)((ch & 0x3F) | 0x80);  				}  				else  				{  					buf[j++] = (byte)((ch >> 12) | 0xE0);  					buf[j++] = (byte)(((ch >> 6) & 0x3F) | 0x80);  					buf[j++] = (byte)((ch & 0x3F) | 0x80);  				}  			}
Magic Number,IKVM.Runtime,JNIEnv,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\runtime\JniInterface.cs,GetCharArrayElements,The following statement contains a magic number: IntPtr buf = JniMem.Alloc(b.Length * 2);
Magic Number,IKVM.Runtime,JNIEnv,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\runtime\JniInterface.cs,GetShortArrayElements,The following statement contains a magic number: IntPtr buf = JniMem.Alloc(b.Length * 2);
Magic Number,IKVM.Runtime,JNIEnv,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\runtime\JniInterface.cs,GetIntArrayElements,The following statement contains a magic number: IntPtr buf = JniMem.Alloc(b.Length * 4);
Magic Number,IKVM.Runtime,JNIEnv,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\runtime\JniInterface.cs,GetLongArrayElements,The following statement contains a magic number: IntPtr buf = JniMem.Alloc(b.Length * 8);
Magic Number,IKVM.Runtime,JNIEnv,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\runtime\JniInterface.cs,GetFloatArrayElements,The following statement contains a magic number: IntPtr buf = JniMem.Alloc(b.Length * 4);
Magic Number,IKVM.Runtime,JNIEnv,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\runtime\JniInterface.cs,GetDoubleArrayElements,The following statement contains a magic number: IntPtr buf = JniMem.Alloc(b.Length * 8);
Magic Number,IKVM.Runtime,JNIEnv,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\runtime\JniInterface.cs,GetStringUTFRegion,The following statement contains a magic number: if(s != null)  			{  				if(start < 0 || start > s.Length || s.Length - start < len)  				{  					SetPendingException(pEnv' new java.lang.StringIndexOutOfBoundsException());  					return;  				}  				else  				{  					byte* p = (byte*)(void*)buf;  					for(int i = 0; i < len; i++)  					{  						char ch = s[start + i];  						if((ch != 0) && (ch <= 0x7F))  						{  							*p++ = (byte)ch;  						}  						else if(ch <= 0x7FF)  						{  							*p++ = (byte)((ch >> 6) | 0xC0);  							*p++ = (byte)((ch & 0x3F) | 0x80);  						}  						else  						{  							*p++ = (byte)((ch >> 12) | 0xE0);  							*p++ = (byte)(((ch >> 6) & 0x3F) | 0x80);  							*p++ = (byte)((ch & 0x3F) | 0x80);  						}  					}  					return;  				}  			}  			else  			{  				SetPendingException(pEnv' new java.lang.NullPointerException());  			}
Magic Number,IKVM.Runtime,JNIEnv,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\runtime\JniInterface.cs,GetStringUTFRegion,The following statement contains a magic number: if(s != null)  			{  				if(start < 0 || start > s.Length || s.Length - start < len)  				{  					SetPendingException(pEnv' new java.lang.StringIndexOutOfBoundsException());  					return;  				}  				else  				{  					byte* p = (byte*)(void*)buf;  					for(int i = 0; i < len; i++)  					{  						char ch = s[start + i];  						if((ch != 0) && (ch <= 0x7F))  						{  							*p++ = (byte)ch;  						}  						else if(ch <= 0x7FF)  						{  							*p++ = (byte)((ch >> 6) | 0xC0);  							*p++ = (byte)((ch & 0x3F) | 0x80);  						}  						else  						{  							*p++ = (byte)((ch >> 12) | 0xE0);  							*p++ = (byte)(((ch >> 6) & 0x3F) | 0x80);  							*p++ = (byte)((ch & 0x3F) | 0x80);  						}  					}  					return;  				}  			}  			else  			{  				SetPendingException(pEnv' new java.lang.NullPointerException());  			}
Magic Number,IKVM.Runtime,JNIEnv,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\runtime\JniInterface.cs,GetStringUTFRegion,The following statement contains a magic number: if(s != null)  			{  				if(start < 0 || start > s.Length || s.Length - start < len)  				{  					SetPendingException(pEnv' new java.lang.StringIndexOutOfBoundsException());  					return;  				}  				else  				{  					byte* p = (byte*)(void*)buf;  					for(int i = 0; i < len; i++)  					{  						char ch = s[start + i];  						if((ch != 0) && (ch <= 0x7F))  						{  							*p++ = (byte)ch;  						}  						else if(ch <= 0x7FF)  						{  							*p++ = (byte)((ch >> 6) | 0xC0);  							*p++ = (byte)((ch & 0x3F) | 0x80);  						}  						else  						{  							*p++ = (byte)((ch >> 12) | 0xE0);  							*p++ = (byte)(((ch >> 6) & 0x3F) | 0x80);  							*p++ = (byte)((ch & 0x3F) | 0x80);  						}  					}  					return;  				}  			}  			else  			{  				SetPendingException(pEnv' new java.lang.NullPointerException());  			}
Magic Number,IKVM.Runtime,JNIEnv,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\runtime\JniInterface.cs,PinObject,The following statement contains a magic number: if(pinHandleInUseCount == pinHandleMaxCount)  			{  				int newCount = pinHandleMaxCount + 32;  				GCHandle* pNew = (GCHandle*)JniMem.Alloc(sizeof(GCHandle) * newCount);  				for(int i = 0; i < pinHandleMaxCount; i++)  				{  					pNew[i] = pinHandles[i];  				}  				for(int i = pinHandleMaxCount; i < newCount; i++)  				{  					pNew[i] = new GCHandle();  				}  				JniMem.Free((IntPtr)pinHandles);  				pinHandles = pNew;  				pinHandleMaxCount = newCount;  			}
Magic Number,IKVM.Runtime,JNIEnv,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\runtime\JniInterface.cs,NewWeakGlobalRef,The following statement contains a magic number: lock(GlobalRefs.weakRefLock)  			{  				for(int i = 0; i < GlobalRefs.weakRefs.Length; i++)  				{  					if(!GlobalRefs.weakRefs[i].IsAllocated)  					{  						GlobalRefs.weakRefs[i] = GCHandle.Alloc(o' GCHandleType.WeakTrackResurrection);  						return (IntPtr)(- (i | (1 << 30)));  					}  				}  				int len = GlobalRefs.weakRefs.Length;  				GCHandle[] tmp = new GCHandle[len * 2];  				Array.Copy(GlobalRefs.weakRefs' 0' tmp' 0' len);  				tmp[len] = GCHandle.Alloc(o' GCHandleType.WeakTrackResurrection);  				GlobalRefs.weakRefs = tmp;  				return (IntPtr)(- (len | (1 << 30)));  			}
Magic Number,IKVM.Runtime,JNIEnv,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\runtime\JniInterface.cs,NewWeakGlobalRef,The following statement contains a magic number: lock(GlobalRefs.weakRefLock)  			{  				for(int i = 0; i < GlobalRefs.weakRefs.Length; i++)  				{  					if(!GlobalRefs.weakRefs[i].IsAllocated)  					{  						GlobalRefs.weakRefs[i] = GCHandle.Alloc(o' GCHandleType.WeakTrackResurrection);  						return (IntPtr)(- (i | (1 << 30)));  					}  				}  				int len = GlobalRefs.weakRefs.Length;  				GCHandle[] tmp = new GCHandle[len * 2];  				Array.Copy(GlobalRefs.weakRefs' 0' tmp' 0' len);  				tmp[len] = GCHandle.Alloc(o' GCHandleType.WeakTrackResurrection);  				GlobalRefs.weakRefs = tmp;  				return (IntPtr)(- (len | (1 << 30)));  			}
Magic Number,IKVM.Runtime,JNIEnv,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\runtime\JniInterface.cs,NewWeakGlobalRef,The following statement contains a magic number: lock(GlobalRefs.weakRefLock)  			{  				for(int i = 0; i < GlobalRefs.weakRefs.Length; i++)  				{  					if(!GlobalRefs.weakRefs[i].IsAllocated)  					{  						GlobalRefs.weakRefs[i] = GCHandle.Alloc(o' GCHandleType.WeakTrackResurrection);  						return (IntPtr)(- (i | (1 << 30)));  					}  				}  				int len = GlobalRefs.weakRefs.Length;  				GCHandle[] tmp = new GCHandle[len * 2];  				Array.Copy(GlobalRefs.weakRefs' 0' tmp' 0' len);  				tmp[len] = GCHandle.Alloc(o' GCHandleType.WeakTrackResurrection);  				GlobalRefs.weakRefs = tmp;  				return (IntPtr)(- (len | (1 << 30)));  			}
Magic Number,IKVM.Runtime,JNIEnv,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\runtime\JniInterface.cs,DeleteWeakGlobalRef,The following statement contains a magic number: if(i < 0)  			{  				i = -i;  				i -= (1 << 30);  				lock(GlobalRefs.weakRefLock)  				{  					GlobalRefs.weakRefs[i].Free();  				}  			}
Magic Number,IKVM.Runtime,JNIEnv,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\runtime\JniInterface.cs,GetObjectRefType,The following statement contains a magic number: if((i & (1 << 30)) != 0)  			{  				return JNIWeakGlobalRefType;  			}  			else  			{  				return JNIGlobalRefType;  			}
Magic Number,IKVM.Runtime,ManagedJNIEnv,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\runtime\JniInterface.cs,ManagedJNIEnv,The following statement contains a magic number: localRefs = new object[32][];
Magic Number,IKVM.Runtime,ManagedJNIEnv,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\runtime\JniInterface.cs,Enter,The following statement contains a magic number: if (localRefSlot >= localRefs.Length)  				{  					object[][] tmp = new object[localRefs.Length * 2][];  					Array.Copy(localRefs' 0' tmp' 0' localRefs.Length);  					localRefs = tmp;  				}
Magic Number,IKVM.Runtime,ManagedJNIEnv,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\runtime\JniInterface.cs,GrowActiveSlot,The following statement contains a magic number: if (active.Length < LOCAL_REF_MAX_BUCKET_SIZE)  				{  					object[] tmp = new object[active.Length * 2];  					Array.Copy(active' tmp' active.Length);  					active = localRefs[localRefSlot] = tmp;  					return;  				}
Magic Number,IKVM.Runtime,ManagedJNIEnv,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\runtime\JniInterface.cs,GrowActiveSlot,The following statement contains a magic number: if (localRefSlot == localRefs.Length)  				{  					object[][] tmp = new object[localRefSlot * 2][];  					Array.Copy(localRefs' 0' tmp' 0' localRefSlot);  					localRefs = tmp;  				}
Magic Number,IKVM.Runtime,ManagedJNIEnv,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\runtime\JniInterface.cs,PushLocalFrame,The following statement contains a magic number: localRefSlot += 2;
Magic Number,IKVM.Runtime,ManagedJNIEnv,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\runtime\JniInterface.cs,PushLocalFrame,The following statement contains a magic number: if (localRefSlot >= localRefs.Length)  				{  					object[][] tmp = new object[localRefs.Length * 2][];  					Array.Copy(localRefs' 0' tmp' 0' localRefs.Length);  					localRefs = tmp;  				}
Magic Number,IKVM.Runtime,ManagedJNIEnv,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\runtime\JniInterface.cs,PushLocalFrame,The following statement contains a magic number: if (localRefs[localRefSlot] == null)  				{  					// we can't use capacity directly' because the array length must be a power of two  					// and it can't be bigger than LOCAL_REF_MAX_BUCKET_SIZE  					int r = 1;  					capacity = Math.Min(capacity' LOCAL_REF_MAX_BUCKET_SIZE);  					while (r < capacity)  					{  						r *= 2;  					}  					localRefs[localRefSlot] = new object[r];  				}
Missing Default,IKVM.Runtime,JNIEnv,C:\repos\CoEST_TraceLab\Main\external\ikvm\src\runtime\JniInterface.cs,StringFromUTF8,The following switch statement is missing a default case: switch(c >> 4)  				{  					case 12:  					case 13:  						char2 = *psz++;  						i++;  						c = (((c & 0x1F) << 6) | (char2 & 0x3F));  						break;  					case 14:  						char2 = *psz++;  						char3 = *psz++;  						i++;  						i++;  						c = ((c & 0x0F) << 12) | ((char2 & 0x3F) << 6) | (char3 & 0x3F);  						break;  				}
