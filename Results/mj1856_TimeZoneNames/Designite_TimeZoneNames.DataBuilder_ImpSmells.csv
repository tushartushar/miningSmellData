Implementation smell,Namespace,Class,File,Method,Description
Long Statement,TimeZoneNames.DataBuilder,DataExtractor,C:\repos\mj1856_TimeZoneNames\src\TimeZoneNames.DataBuilder\DataExtractor.cs,LoadZoneCountries,The length of the statement  "            foreach (var location in _tzdbSource.ZoneLocations.OrderBy(x => GetStandardOffset(x.ZoneId)).ThenBy(x => GetDaylightOffset(x.ZoneId))) " is 134.
Long Statement,TimeZoneNames.DataBuilder,DataExtractor,C:\repos\mj1856_TimeZoneNames\src\TimeZoneNames.DataBuilder\DataExtractor.cs,GetBoundIntervals,The length of the statement  "                intervals[0] = new ZoneInterval(first.Name' start' first.HasEnd ? first.End : (Instant?) null' first.WallOffset' first.Savings); " is 128.
Long Statement,TimeZoneNames.DataBuilder,DataExtractor,C:\repos\mj1856_TimeZoneNames\src\TimeZoneNames.DataBuilder\DataExtractor.cs,GetBoundIntervals,The length of the statement  "                intervals[intervals.Count - 1] = new ZoneInterval(last.Name' last.HasStart ? last.Start : (Instant?) null' end' last.WallOffset' last.Savings); " is 143.
Long Statement,TimeZoneNames.DataBuilder,DataExtractor,C:\repos\mj1856_TimeZoneNames\src\TimeZoneNames.DataBuilder\DataExtractor.cs,GetAllZoneSplitPoints,The length of the statement  "                x => _tzdbProvider[x].GetZoneIntervals(Instant.MinValue' Future10).Select(y => y.HasStart ? y.Start : Instant.MinValue)) " is 120.
Magic Number,TimeZoneNames.DataBuilder,DataExtractor,C:\repos\mj1856_TimeZoneNames\src\TimeZoneNames.DataBuilder\DataExtractor.cs,LoadSelectionZones,The following statement contains a magic number: for (int i = splitPoints.Count - 1; i >= 0; i--)              {                  if (useConsole)                  {                      var pct = 100 * (1.0 * (splitPoints.Count - i)) / splitPoints.Count;                      Console.Write("{0:F1}%"' pct);                      Console.CursorLeft = 0;                  }                    var point = splitPoints[i];                  var zones = GetSelectionZones(point' precedence);                    if (last == null)                  {                      last = zones;                      continue;                  }                    var items = zones.Except(last)                      .Select(x => new TimeZoneSelectionData { Id = x' ThresholdUtc = point.ToDateTimeUtc() });                  results.AddRange(items);                    last = zones;              }
Magic Number,TimeZoneNames.DataBuilder,DataExtractor,C:\repos\mj1856_TimeZoneNames\src\TimeZoneNames.DataBuilder\DataExtractor.cs,GetIntervalsHash,The following statement contains a magic number: int hash = 17;
Magic Number,TimeZoneNames.DataBuilder,DataExtractor,C:\repos\mj1856_TimeZoneNames\src\TimeZoneNames.DataBuilder\DataExtractor.cs,GetIntervalsHash,The following statement contains a magic number: unchecked              {                  foreach (var interval in intervals)                  {                      hash = hash * 23 + interval.GetHashCode();                  }              }
Magic Number,TimeZoneNames.DataBuilder,DataExtractor,C:\repos\mj1856_TimeZoneNames\src\TimeZoneNames.DataBuilder\DataExtractor.cs,LoadLanguages,The following statement contains a magic number: var languages = Directory.GetFiles(_cldrPath + @"common\main")                  .Select(Path.GetFileName)                  .Select(x => x.Substring(0' x.Length - 4));
Magic Number,TimeZoneNames.DataBuilder,DataExtractor,C:\repos\mj1856_TimeZoneNames\src\TimeZoneNames.DataBuilder\DataExtractor.cs,AddCountryEntries,The following statement contains a magic number: var countries = territoriesElement.Elements("territory")                  .Where(x => x.Attribute("alt") == null)                  .GroupBy(x => x.Attribute("type").Value)                  .Where(x => x.Key.Length == 2 && !excluded.Contains(x.Key))                  .ToDictionary(x => x.Key' x => x.First().Value);
Missing Default,TimeZoneNames.DataBuilder,DataExtractor,C:\repos\mj1856_TimeZoneNames\src\TimeZoneNames.DataBuilder\DataExtractor.cs,AddZoneEntries,The following switch statement is missing a default case: switch (entryName)                  {                      case "exemplarCity":                          {                              langData.CityNames.Add(zoneName' element.Value);                              break;                          }                      case "short":                          {                              var values = GetTimeZoneValues(element);                              langData.ShortNames.Add(zoneName' values);                              break;                          }                      case "long":                          {                              var values = GetTimeZoneValues(element);                              langData.LongNames.Add(zoneName' values);                              break;                          }                  }
