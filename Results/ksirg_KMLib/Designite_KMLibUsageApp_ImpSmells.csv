Implementation smell,Namespace,Class,File,Method,Description
Long Method,KMLibUsageApp,Program,C:\repos\ksirg_KMLib\KMLibUsageApp\Program.cs,GroupedTestingLowLevelDataSets,The method has 138 lines of code.
Long Method,KMLibUsageApp,Program,C:\repos\ksirg_KMLib\KMLibUsageApp\Program.cs,ChooseDataSet,The method has 106 lines of code.
Long Method,KMLibUsageApp,Program,C:\repos\ksirg_KMLib\KMLibUsageApp\Program.cs,SVMClassifyLowLevel,The method has 135 lines of code.
Long Parameter List,KMLibUsageApp,Program,C:\repos\ksirg_KMLib\KMLibUsageApp\Program.cs,SVMClassifyLowLevelManyTests,The method has 5 parameters. Parameters: trainningFile' testFile' numberOfFeatures' paramC' numTests
Long Parameter List,KMLibUsageApp,Program,C:\repos\ksirg_KMLib\KMLibUsageApp\Program.cs,SVMClassify,The method has 5 parameters. Parameters: train' test' kernel' evaluator' paramC
Long Statement,KMLibUsageApp,Program,C:\repos\ksirg_KMLib\KMLibUsageApp\Program.cs,PerformCrossValidation,The length of the statement  "            Console.WriteLine("Cross validation folds={0} \nDataSet1 atr={1}' trainning={2}"' folds' numberOfFeatures' trainningFile); " is 122.
Long Statement,KMLibUsageApp,Program,C:\repos\ksirg_KMLib\KMLibUsageApp\Program.cs,CreateRankingProblem,The length of the statement  "            Problem<SparseVec> rankingProb = new Problem<SparseVec>(pairVector.ToArray()' pairLabels.ToArray()' 2' 2' new float[2] { -1' 1 }); " is 130.
Long Statement,KMLibUsageApp,Program,C:\repos\ksirg_KMLib\KMLibUsageApp\Program.cs,GroupedTestingLowLevelDataSets,The length of the statement  "                Trace.WriteLine(string.Format("DataSet: tr={0} tst={1} ' el={2}/{3}  atr={4}"' tr' tst' train.ElementsCount' test.ElementsCount' numberOfFeatures)); " is 148.
Long Statement,KMLibUsageApp,Program,C:\repos\ksirg_KMLib\KMLibUsageApp\Program.cs,GroupedTestingLowLevelDataSets,The length of the statement  "                    Trace.WriteLine(string.Format("Results time[s]:{0'38} {1'30} {2'9} {3'12} {4'9}"'"predTime"' "it"' "obj"'"nSV"'"acc" )); " is 120.
Long Statement,KMLibUsageApp,Program,C:\repos\ksirg_KMLib\KMLibUsageApp\Program.cs,GroupedTestingLowLevelDataSets,The length of the statement  "                        Trace.WriteLine(string.Format("{0'7}\t{1}\t{2}\t{3}\t{4} "' predT.ToString("0.0")' it' obj.ToString("0.00")' nSv' acc.ToString("n5"))); " is 135.
Long Statement,KMLibUsageApp,Program,C:\repos\ksirg_KMLib\KMLibUsageApp\Program.cs,CreatePairsKernelEvaluator,The length of the statement  "                new Tuple<IKernel<SparseVec>'Evaluator<SparseVec>>(new CuExpChiSERTILPKernel(gamma)'new CuExpChiSERTILPEvaluator(gamma))' " is 121.
Long Statement,KMLibUsageApp,Program,C:\repos\ksirg_KMLib\KMLibUsageApp\Program.cs,SVMClassify,The length of the statement  "            Console.WriteLine("Validation on test data best acuuracy = {0} C={1} time={2} ms={3}"' acc' paramC' timer.Elapsed' timer.ElapsedMilliseconds); " is 142.
Long Statement,KMLibUsageApp,Program,C:\repos\ksirg_KMLib\KMLibUsageApp\Program.cs,DoCrossValidation,The length of the statement  "            Console.WriteLine("Cross Validation nr folds={0} best acuuracy = {1} C={2} time={3}"' folds' acc' bestC' globalTimer.Elapsed); " is 126.
Magic Number,KMLibUsageApp,Program,C:\repos\ksirg_KMLib\KMLibUsageApp\Program.cs,TestMultiClasDataSet,The following statement contains a magic number: int numberOfFeatures = 181;
Magic Number,KMLibUsageApp,Program,C:\repos\ksirg_KMLib\KMLibUsageApp\Program.cs,TestRanking,The following statement contains a magic number: int numberOfFeatures = 2;
Magic Number,KMLibUsageApp,Program,C:\repos\ksirg_KMLib\KMLibUsageApp\Program.cs,CreateRankingProblem,The following statement contains a magic number: int size = k * (k + 1) / 2;
Magic Number,KMLibUsageApp,Program,C:\repos\ksirg_KMLib\KMLibUsageApp\Program.cs,CreateRankingProblem,The following statement contains a magic number: Problem<SparseVec> rankingProb = new Problem<SparseVec>(pairVector.ToArray()' pairLabels.ToArray()' 2' 2' new float[2] { -1' 1 });
Magic Number,KMLibUsageApp,Program,C:\repos\ksirg_KMLib\KMLibUsageApp\Program.cs,CreateRankingProblem,The following statement contains a magic number: Problem<SparseVec> rankingProb = new Problem<SparseVec>(pairVector.ToArray()' pairLabels.ToArray()' 2' 2' new float[2] { -1' 1 });
Magic Number,KMLibUsageApp,Program,C:\repos\ksirg_KMLib\KMLibUsageApp\Program.cs,CreateRankingProblem,The following statement contains a magic number: Problem<SparseVec> rankingProb = new Problem<SparseVec>(pairVector.ToArray()' pairLabels.ToArray()' 2' 2' new float[2] { -1' 1 });
Magic Number,KMLibUsageApp,Program,C:\repos\ksirg_KMLib\KMLibUsageApp\Program.cs,SavePredictionToFile,The following statement contains a magic number: using (Stream str = File.Open(fileName' FileMode.Create))              using (StreamWriter sw = new StreamWriter(str' Encoding.ASCII' 1 << 12))              {                  for (int i = 0; i < predictions.Length; i++)                  {                        sw.WriteLine((int)predictions[i]);                  }              }
Magic Number,KMLibUsageApp,Program,C:\repos\ksirg_KMLib\KMLibUsageApp\Program.cs,GroupedTestingLowLevelDataSets,The following statement contains a magic number: foreach (var data in dataSetsToTest)              {                  trainningFile = data.Item1;                  testFile = data.Item2;                  numberOfFeatures = data.Item3;                    //Read sets into problem class                  Problem<SparseVec> train = IOHelper.ReadVectorsFromFile(trainningFile' numberOfFeatures);                  train.Elements = dataTransform.Transform(train.Elements);                  Problem<SparseVec> test = IOHelper.ReadVectorsFromFile(testFile' numberOfFeatures);                  test.Elements = dataTransform.Transform(test.Elements);                    var tr = Path.GetFileName(trainningFile);                  var tst = Path.GetFileName(testFile);                    Trace.WriteLine(DateTime.Now);                  Trace.WriteLine(string.Format("DataSet: tr={0} tst={1} ' el={2}/{3}  atr={4}"' tr' tst' train.ElementsCount' test.ElementsCount' numberOfFeatures));                  Trace.WriteLine("-----------------------------------------------------------------");                      foreach (var solverStr in solversStr)                  {                        Trace.WriteLine(string.Format("Solver: {0}"' solverStr));                      Trace.WriteLine(string.Format("Results time[s]:{0'38} {1'30} {2'9} {3'12} {4'9}"'"predTime"' "it"' "obj"'"nSV"'"acc" ));                      foreach (var kernelEval in kerEval)                      {                            var kernel = kernelEval.Item1;                          var evaluator = kernelEval.Item2;                            string kernelStr = kernel.ToString();                          Trace.Write(string.Format("{0}  {1'-17}:"' DateTime.Now' kernelStr));                            Solver<SparseVec> solver = null;                            try                          {                              kernel.ProblemElements = train.Elements;                              kernel.Y = train.Y;                              kernel.Init();                              solver = CreateSolver(solverStr' train' kernel' C);                                long[] modelTimes = new long[numTests];                                  for (int i = 0; i < numTests; i++)                              {                                  model = solver.ComputeModel();                                    modelTimes[i] = model.ModelTimeMs;                                  double mTime = modelTimes[i] / 1000.0;                                  Trace.Write(string.Format(" {0'9}; "' mTime.ToString("0.0")));                                    SaveModel(trainningFile' model' kernel' solver);                                }                          }                          catch (OutOfMemoryException e)                          {                                Trace.WriteLine(string.Format(" {0'9}; "' "xxxx"));                            }                          catch (Exception ex)                          {                              Trace.WriteLine("** Error **");                              Trace.TraceError(ex.Message);                              Trace.WriteLine("** Error **");                              continue;                          }                          finally                          {                                var disSolver = solver as IDisposable;                              if (disSolver != null)                                  disSolver.Dispose();                              solver = null;                                var disKernel = kernel as IDisposable;                              if (disKernel != null)                                  disKernel.Dispose();                            }                              try                          {                          evaluator.Kernel = kernel;                          evaluator.TrainedModel = model;                            evaluator.Init();                            Stopwatch predTime = Stopwatch.StartNew();                          float[] predictions = evaluator.Predict(test.Elements);                          predTime.Stop();                            double acc = GetAccuracy(test' predictions);                            int it = model.Iter;                          float obj = model.Obj;                          int nSv = model.SupportElements.Length;                            double predT = predTime.ElapsedMilliseconds / 1000.0;                                                      Trace.WriteLine(string.Format("{0'7}\t{1}\t{2}\t{3}\t{4} "' predT.ToString("0.0")' it' obj.ToString("0.00")' nSv' acc.ToString("n5")));                          }                          catch (OutOfMemoryException e)                          {                                Trace.WriteLine(string.Format(" {0'9}; "' "xxxx"));                            }                          catch (Exception ex)                          {                              Trace.WriteLine("** Error **");                              Trace.TraceError(ex.Message);                              Trace.WriteLine("** Error **");                              continue;                          }                          finally                          {                                  var disEvaluator = evaluator as IDisposable;                              if (disEvaluator != null)                                  disEvaluator.Dispose();                          }                        }                    }                      train.Dispose();                  test.Dispose();                  Trace.WriteLine("***************************\n");                }
Magic Number,KMLibUsageApp,Program,C:\repos\ksirg_KMLib\KMLibUsageApp\Program.cs,GroupedTestingLowLevelDataSets,The following statement contains a magic number: foreach (var data in dataSetsToTest)              {                  trainningFile = data.Item1;                  testFile = data.Item2;                  numberOfFeatures = data.Item3;                    //Read sets into problem class                  Problem<SparseVec> train = IOHelper.ReadVectorsFromFile(trainningFile' numberOfFeatures);                  train.Elements = dataTransform.Transform(train.Elements);                  Problem<SparseVec> test = IOHelper.ReadVectorsFromFile(testFile' numberOfFeatures);                  test.Elements = dataTransform.Transform(test.Elements);                    var tr = Path.GetFileName(trainningFile);                  var tst = Path.GetFileName(testFile);                    Trace.WriteLine(DateTime.Now);                  Trace.WriteLine(string.Format("DataSet: tr={0} tst={1} ' el={2}/{3}  atr={4}"' tr' tst' train.ElementsCount' test.ElementsCount' numberOfFeatures));                  Trace.WriteLine("-----------------------------------------------------------------");                      foreach (var solverStr in solversStr)                  {                        Trace.WriteLine(string.Format("Solver: {0}"' solverStr));                      Trace.WriteLine(string.Format("Results time[s]:{0'38} {1'30} {2'9} {3'12} {4'9}"'"predTime"' "it"' "obj"'"nSV"'"acc" ));                      foreach (var kernelEval in kerEval)                      {                            var kernel = kernelEval.Item1;                          var evaluator = kernelEval.Item2;                            string kernelStr = kernel.ToString();                          Trace.Write(string.Format("{0}  {1'-17}:"' DateTime.Now' kernelStr));                            Solver<SparseVec> solver = null;                            try                          {                              kernel.ProblemElements = train.Elements;                              kernel.Y = train.Y;                              kernel.Init();                              solver = CreateSolver(solverStr' train' kernel' C);                                long[] modelTimes = new long[numTests];                                  for (int i = 0; i < numTests; i++)                              {                                  model = solver.ComputeModel();                                    modelTimes[i] = model.ModelTimeMs;                                  double mTime = modelTimes[i] / 1000.0;                                  Trace.Write(string.Format(" {0'9}; "' mTime.ToString("0.0")));                                    SaveModel(trainningFile' model' kernel' solver);                                }                          }                          catch (OutOfMemoryException e)                          {                                Trace.WriteLine(string.Format(" {0'9}; "' "xxxx"));                            }                          catch (Exception ex)                          {                              Trace.WriteLine("** Error **");                              Trace.TraceError(ex.Message);                              Trace.WriteLine("** Error **");                              continue;                          }                          finally                          {                                var disSolver = solver as IDisposable;                              if (disSolver != null)                                  disSolver.Dispose();                              solver = null;                                var disKernel = kernel as IDisposable;                              if (disKernel != null)                                  disKernel.Dispose();                            }                              try                          {                          evaluator.Kernel = kernel;                          evaluator.TrainedModel = model;                            evaluator.Init();                            Stopwatch predTime = Stopwatch.StartNew();                          float[] predictions = evaluator.Predict(test.Elements);                          predTime.Stop();                            double acc = GetAccuracy(test' predictions);                            int it = model.Iter;                          float obj = model.Obj;                          int nSv = model.SupportElements.Length;                            double predT = predTime.ElapsedMilliseconds / 1000.0;                                                      Trace.WriteLine(string.Format("{0'7}\t{1}\t{2}\t{3}\t{4} "' predT.ToString("0.0")' it' obj.ToString("0.00")' nSv' acc.ToString("n5")));                          }                          catch (OutOfMemoryException e)                          {                                Trace.WriteLine(string.Format(" {0'9}; "' "xxxx"));                            }                          catch (Exception ex)                          {                              Trace.WriteLine("** Error **");                              Trace.TraceError(ex.Message);                              Trace.WriteLine("** Error **");                              continue;                          }                          finally                          {                                  var disEvaluator = evaluator as IDisposable;                              if (disEvaluator != null)                                  disEvaluator.Dispose();                          }                        }                    }                      train.Dispose();                  test.Dispose();                  Trace.WriteLine("***************************\n");                }
Magic Number,KMLibUsageApp,Program,C:\repos\ksirg_KMLib\KMLibUsageApp\Program.cs,CreateDataSetList,The following statement contains a magic number: List<Tuple<string' string' int>> dataSets = new List<Tuple<string' string' int>>(8);
Magic Number,KMLibUsageApp,Program,C:\repos\ksirg_KMLib\KMLibUsageApp\Program.cs,CreateDataSetList,The following statement contains a magic number: dataSets.Add(new Tuple<string' string' int>(                  dataFolder + "/w8a"'                  dataFolder + "/w8a.t"'                  300));
Magic Number,KMLibUsageApp,Program,C:\repos\ksirg_KMLib\KMLibUsageApp\Program.cs,CreateDataSetList,The following statement contains a magic number: dataSets.Add(new Tuple<string' string' int>(                  dataFolder + "/a9a"'                  dataFolder + "/a9a.t"'                  123));
Magic Number,KMLibUsageApp,Program,C:\repos\ksirg_KMLib\KMLibUsageApp\Program.cs,CreateDataSetList,The following statement contains a magic number: dataSets.Add(new Tuple<string' string' int>(                  dataFolder + "/news20.binary"'                  dataFolder + "/news20.binary"'                  1335191));
Magic Number,KMLibUsageApp,Program,C:\repos\ksirg_KMLib\KMLibUsageApp\Program.cs,CreateDataSetList,The following statement contains a magic number: dataSets.Add(new Tuple<string' string' int>(                  dataFolder + "/real-sim"'                  dataFolder + "/real-sim"'                  20958));
Magic Number,KMLibUsageApp,Program,C:\repos\ksirg_KMLib\KMLibUsageApp\Program.cs,CreateDataSetList,The following statement contains a magic number: dataSets.Add(new Tuple<string' string' int>(                  dataFolder + "/rcv1_test.binary"'                  dataFolder + "/rcv1_train.binary"'                  47236));
Magic Number,KMLibUsageApp,Program,C:\repos\ksirg_KMLib\KMLibUsageApp\Program.cs,CreateDataSetList,The following statement contains a magic number: dataSets.Add(new Tuple<string' string' int>(                  dataFolder + "/mnist.scale"'                  dataFolder + "/mnist.scale.t"'                  784));
Magic Number,KMLibUsageApp,Program,C:\repos\ksirg_KMLib\KMLibUsageApp\Program.cs,CreateDataSetList,The following statement contains a magic number: dataSets.Add(new Tuple<string' string' int>(                  dataFolder + "/dominionstats.01scale_r2.train"'                  dataFolder + "/dominionstats.01scale_r2.test"'                  596));
Magic Number,KMLibUsageApp,Program,C:\repos\ksirg_KMLib\KMLibUsageApp\Program.cs,CreateDataSetList,The following statement contains a magic number: dataSets.Add(new Tuple<string' string' int>(                  dataFolder + "/tweet.train"'                  dataFolder + "/tweet.test"'                  52242));
Magic Number,KMLibUsageApp,Program,C:\repos\ksirg_KMLib\KMLibUsageApp\Program.cs,CreateDataSetList,The following statement contains a magic number: dataSets.Add(new Tuple<string' string' int>(                 dataFolder + "/webspam_wc_normalized_unigram.svm"'                 dataFolder + "/webspam_wc_normalized_unigram.svm"'                 254));
Magic Number,KMLibUsageApp,Program,C:\repos\ksirg_KMLib\KMLibUsageApp\Program.cs,CreateDataSetList,The following statement contains a magic number: dataSets.Add(new Tuple<string' string' int>(                  dataFolder + "/kytea-msr_first_500k.train"'                  dataFolder + "/kytea-msr.test"'                  8683737));
Magic Number,KMLibUsageApp,Program,C:\repos\ksirg_KMLib\KMLibUsageApp\Program.cs,CreateDataSetList,The following statement contains a magic number: dataSets.Add(new Tuple<string' string' int>(                  dataFolder + "/kytea-msr_first_1M.train"'                  dataFolder + "/kytea-msr.test"'                  8683737));
Magic Number,KMLibUsageApp,Program,C:\repos\ksirg_KMLib\KMLibUsageApp\Program.cs,ChooseDataSet,The following statement contains a magic number: numberOfFeatures = 300;
Magic Number,KMLibUsageApp,Program,C:\repos\ksirg_KMLib\KMLibUsageApp\Program.cs,SVMClassify,The following statement contains a magic number: double acc = -10;
Magic Number,KMLibUsageApp,Program,C:\repos\ksirg_KMLib\KMLibUsageApp\Program.cs,DoCrossValidation,The following statement contains a magic number: float[] penaltyC = new[] { 0.125f' 0.025f' 0.5f' 1' 2' 4' 8' 16' 32' 64' 128 };
Magic Number,KMLibUsageApp,Program,C:\repos\ksirg_KMLib\KMLibUsageApp\Program.cs,DoCrossValidation,The following statement contains a magic number: float[] penaltyC = new[] { 0.125f' 0.025f' 0.5f' 1' 2' 4' 8' 16' 32' 64' 128 };
Magic Number,KMLibUsageApp,Program,C:\repos\ksirg_KMLib\KMLibUsageApp\Program.cs,DoCrossValidation,The following statement contains a magic number: float[] penaltyC = new[] { 0.125f' 0.025f' 0.5f' 1' 2' 4' 8' 16' 32' 64' 128 };
Magic Number,KMLibUsageApp,Program,C:\repos\ksirg_KMLib\KMLibUsageApp\Program.cs,DoCrossValidation,The following statement contains a magic number: float[] penaltyC = new[] { 0.125f' 0.025f' 0.5f' 1' 2' 4' 8' 16' 32' 64' 128 };
Magic Number,KMLibUsageApp,Program,C:\repos\ksirg_KMLib\KMLibUsageApp\Program.cs,DoCrossValidation,The following statement contains a magic number: float[] penaltyC = new[] { 0.125f' 0.025f' 0.5f' 1' 2' 4' 8' 16' 32' 64' 128 };
Magic Number,KMLibUsageApp,Program,C:\repos\ksirg_KMLib\KMLibUsageApp\Program.cs,DoCrossValidation,The following statement contains a magic number: float[] penaltyC = new[] { 0.125f' 0.025f' 0.5f' 1' 2' 4' 8' 16' 32' 64' 128 };
Magic Number,KMLibUsageApp,Program,C:\repos\ksirg_KMLib\KMLibUsageApp\Program.cs,DoCrossValidation,The following statement contains a magic number: float[] penaltyC = new[] { 0.125f' 0.025f' 0.5f' 1' 2' 4' 8' 16' 32' 64' 128 };
