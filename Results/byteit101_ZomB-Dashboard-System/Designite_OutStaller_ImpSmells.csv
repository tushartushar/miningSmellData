Implementation smell,Namespace,Class,File,Method,Description
Complex Method,IPAddressControlLib,DotControl,C:\repos\byteit101_ZomB-Dashboard-System\releasefiles\Installer\outstaller\DotControl.cs,OnPaint,Cyclomatic complexity of the method is 8
Complex Method,IPAddressControlLib,FieldControl,C:\repos\byteit101_ZomB-Dashboard-System\releasefiles\Installer\outstaller\FieldControl.cs,TakeFocus,Cyclomatic complexity of the method is 9
Complex Method,IPAddressControlLib,FieldControl,C:\repos\byteit101_ZomB-Dashboard-System\releasefiles\Installer\outstaller\FieldControl.cs,OnKeyDown,Cyclomatic complexity of the method is 13
Complex Method,IPAddressControlLib,FieldControl,C:\repos\byteit101_ZomB-Dashboard-System\releasefiles\Installer\outstaller\FieldControl.cs,OnTextChanged,Cyclomatic complexity of the method is 8
Complex Method,IPAddressControlLib,IPAddressControl,C:\repos\byteit101_ZomB-Dashboard-System\releasefiles\Installer\outstaller\IPAddressControl.cs,OnPaint,Cyclomatic complexity of the method is 11
Complex Method,IPAddressControlLib,IPAddressControl,C:\repos\byteit101_ZomB-Dashboard-System\releasefiles\Installer\outstaller\IPAddressControl.cs,CalculateMinimumSize,Cyclomatic complexity of the method is 10
Complex Method,IPAddressControlLib,IPAddressControl,C:\repos\byteit101_ZomB-Dashboard-System\releasefiles\Installer\outstaller\IPAddressControl.cs,LayoutControls,Cyclomatic complexity of the method is 12
Complex Method,IPAddressControlLib,IPAddressControl,C:\repos\byteit101_ZomB-Dashboard-System\releasefiles\Installer\outstaller\IPAddressControl.cs,OnCedeFocus,Cyclomatic complexity of the method is 10
Complex Method,OutStaller,Program,C:\repos\byteit101_ZomB-Dashboard-System\releasefiles\Installer\outstaller\Program.cs,IniConfig,Cyclomatic complexity of the method is 17
Long Statement,IPAddressControlLib,IPAddressControl,C:\repos\byteit101_ZomB-Dashboard-System\releasefiles\Installer\outstaller\IPAddressControl.cs,OnPaint,The length of the statement  "	Rectangle rectBorder = new Rectangle (ClientRectangle.Left' ClientRectangle.Top' ClientRectangle.Width - 1' ClientRectangle.Height - 1); " is 136.
Long Statement,IPAddressControlLib,IPAddressControl,C:\repos\byteit101_ZomB-Dashboard-System\releasefiles\Installer\outstaller\IPAddressControl.cs,OnCedeFocus,The length of the statement  "	if ((e.Direction == Direction.Reverse && e.FieldIndex == 0) || (e.Direction == Direction.Forward && e.FieldIndex == (FieldCount - 1))) { " is 136.
Complex Conditional,IPAddressControlLib,FieldControl,C:\repos\byteit101_ZomB-Dashboard-System\releasefiles\Installer\outstaller\FieldControl.cs,HandleBackspaceKey,The conditional expression  "!ReadOnly && (TextLength == 0 || (SelectionStart == 0 && SelectionLength == 0))"  is complex.
Complex Conditional,IPAddressControlLib,FieldControl,C:\repos\byteit101_ZomB-Dashboard-System\releasefiles\Installer\outstaller\FieldControl.cs,IsEditKey,The conditional expression  "e.Modifiers == Keys.Control && (e.KeyCode == Keys.C || e.KeyCode == Keys.V || e.KeyCode == Keys.X)"  is complex.
Complex Conditional,IPAddressControlLib,IPAddressControl,C:\repos\byteit101_ZomB-Dashboard-System\releasefiles\Installer\outstaller\IPAddressControl.cs,OnCedeFocus,The conditional expression  "(e.Direction == Direction.Reverse && e.FieldIndex == 0) || (e.Direction == Direction.Forward && e.FieldIndex == (FieldCount - 1))"  is complex.
Empty Catch Block,OutStaller,Program,C:\repos\byteit101_ZomB-Dashboard-System\releasefiles\Installer\outstaller\Program.cs,IniConfig,The method has an empty catch block.
Magic Number,IPAddressControlLib,FieldControl,C:\repos\byteit101_ZomB-Dashboard-System\releasefiles\Installer\outstaller\FieldControl.cs,FieldControl,The following statement contains a magic number: MaxLength = 3;  
Magic Number,IPAddressControlLib,IPAddressControl,C:\repos\byteit101_ZomB-Dashboard-System\releasefiles\Installer\outstaller\IPAddressControl.cs,CalculateMinimumSize,The following statement contains a magic number: switch (BorderStyle) {  case BorderStyle.Fixed3D:  	minimumSize.Width += 6;  	minimumSize.Height += (GetSuggestedHeight () - minimumSize.Height);  	break;  case BorderStyle.FixedSingle:  	minimumSize.Width += 4;  	minimumSize.Height += (GetSuggestedHeight () - minimumSize.Height);  	break;  }  
Magic Number,IPAddressControlLib,IPAddressControl,C:\repos\byteit101_ZomB-Dashboard-System\releasefiles\Installer\outstaller\IPAddressControl.cs,CalculateMinimumSize,The following statement contains a magic number: switch (BorderStyle) {  case BorderStyle.Fixed3D:  	minimumSize.Width += 6;  	minimumSize.Height += (GetSuggestedHeight () - minimumSize.Height);  	break;  case BorderStyle.FixedSingle:  	minimumSize.Width += 4;  	minimumSize.Height += (GetSuggestedHeight () - minimumSize.Height);  	break;  }  
Magic Number,IPAddressControlLib,IPAddressControl,C:\repos\byteit101_ZomB-Dashboard-System\releasefiles\Installer\outstaller\IPAddressControl.cs,CalculateMinimumSize,The following statement contains a magic number: minimumSize.Width += 6;  
Magic Number,IPAddressControlLib,IPAddressControl,C:\repos\byteit101_ZomB-Dashboard-System\releasefiles\Installer\outstaller\IPAddressControl.cs,CalculateMinimumSize,The following statement contains a magic number: minimumSize.Width += 4;  
Magic Number,OutStaller,Program,C:\repos\byteit101_ZomB-Dashboard-System\releasefiles\Installer\outstaller\Program.cs,Main,The following statement contains a magic number: if (args.Length != 2) {  	Application.EnableVisualStyles ();  	Application.SetCompatibleTextRenderingDefault (false);  	try {  		Application.Run (new Form1 ());  		return 0;  	}  	catch {  		return -100;  	}  }  
Magic Number,OutStaller,Program,C:\repos\byteit101_ZomB-Dashboard-System\releasefiles\Installer\outstaller\Program.cs,Main,The following statement contains a magic number: if (args.Length != 2) {  	Application.EnableVisualStyles ();  	Application.SetCompatibleTextRenderingDefault (false);  	try {  		Application.Run (new Form1 ());  		return 0;  	}  	catch {  		return -100;  	}  }  
Magic Number,OutStaller,Program,C:\repos\byteit101_ZomB-Dashboard-System\releasefiles\Installer\outstaller\Program.cs,Main,The following statement contains a magic number: try {  	Application.Run (new Form1 ());  	return 0;  }  catch {  	return -100;  }  
Magic Number,OutStaller,Program,C:\repos\byteit101_ZomB-Dashboard-System\releasefiles\Installer\outstaller\Program.cs,Main,The following statement contains a magic number: return -100;  
Magic Number,OutStaller,Program,C:\repos\byteit101_ZomB-Dashboard-System\releasefiles\Installer\outstaller\Program.cs,Main,The following statement contains a magic number: if (!File.Exists (file))  	return -2;  
Magic Number,OutStaller,Program,C:\repos\byteit101_ZomB-Dashboard-System\releasefiles\Installer\outstaller\Program.cs,Main,The following statement contains a magic number: return -2;  
Magic Number,OutStaller,Program,C:\repos\byteit101_ZomB-Dashboard-System\releasefiles\Installer\outstaller\Program.cs,Main,The following statement contains a magic number: if (!IPAddress.TryParse (args [0]' out iad)) {  	return -3;  }  
Magic Number,OutStaller,Program,C:\repos\byteit101_ZomB-Dashboard-System\releasefiles\Installer\outstaller\Program.cs,Main,The following statement contains a magic number: return -3;  
Magic Number,OutStaller,Program,C:\repos\byteit101_ZomB-Dashboard-System\releasefiles\Installer\outstaller\Program.cs,ZomBDownload,The following statement contains a magic number: try {  	FtpWebRequest request = FtpWebRequest.Create (iad) as FtpWebRequest;  	request.UsePassive = true;  	request.UseBinary = true;  	request.KeepAlive = false;  	request.Method = WebRequestMethods.Ftp.UploadFile;  	using (Stream responseStream = request.GetRequestStream ()) {  		byte[] buffer = File.ReadAllBytes (file);  		responseStream.Write (buffer' 0' buffer.Length);  	}  }  catch {  	return -10;  }  
Magic Number,OutStaller,Program,C:\repos\byteit101_ZomB-Dashboard-System\releasefiles\Installer\outstaller\Program.cs,ZomBDownload,The following statement contains a magic number: return -10;  
Magic Number,OutStaller,Program,C:\repos\byteit101_ZomB-Dashboard-System\releasefiles\Installer\outstaller\Program.cs,IniConfig,The following statement contains a magic number: try {  	MemoryStream ms = new MemoryStream (4096);  	MemoryStream rms = new MemoryStream (4096);  	byte[] bytes;  	#if !UseFile  	FtpWebRequest request = FtpWebRequest.Create (iad) as FtpWebRequest;  	request.UsePassive = true;  	request.UseBinary = false;  	request.Method = WebRequestMethods.Ftp.DownloadFile;  	using (FtpWebResponse response = request.GetResponse () as FtpWebResponse) {  		using (Stream responseStream = response.GetResponseStream ()) {  			#else  			                {                     using (Stream responseStream = File.OpenRead("C:\\Program Files\\ZomB\\Bindings\\ni-rt.ini"))                     { #endif  			while (true) {  				Thread.Sleep (100);  				byte[] buf = new byte[1024];  				int read = responseStream.Read (buf' 0' buf.Length);  				if (read < 1)  					break;  				else  					rms.Write (buf' 0' read);  			}  		}  	}  	rms.Seek (0' SeekOrigin.Begin);  	int len' rlen = (int)rms.Length;  	using (StreamReader sr = new StreamReader (rms)) {  		while (!sr.EndOfStream) {  			string line = sr.ReadLine ();  			if (line.StartsWith ("StartupDlls") && !line.Contains ("ZomB.out")) {  				if (line.Contains ("FRC_UserProgram.out"))  					line = line.Replace ("FRC_UserProgram.out"' "ZomB.out;FRC_UserProgram.out");  				//C++  				else if (line.Contains ("FRC_JavaVM.out"))  					line = line.Replace ("FRC_JavaVM.out"' "ZomB.out;FRC_JavaVM.out");  				//Java  				else  					//LabVIEW  					line += "ZomB.out;";  			}  			WriteLine (ms' line);  		}  		bytes = ms.GetBuffer ();  		len = (int)ms.Length;  	}  	if (len < rlen)  		return -50;  	#if !UseFile  	FtpWebRequest upload = FtpWebRequest.Create (iad) as FtpWebRequest;  	upload.UsePassive = true;  	upload.KeepAlive = false;  	upload.Method = WebRequestMethods.Ftp.Rename;  	upload.RenameTo = "ni-rt.backup-" + DateTime.Now.ToFileTimeUtc () + ".ini";  	try {  		upload.GetResponse ().Close ();  	}  	catch {  	}  	upload = FtpWebRequest.Create (iad) as FtpWebRequest;  	upload.UsePassive = true;  	upload.UseBinary = false;  	upload.KeepAlive = false;  	upload.Method = WebRequestMethods.Ftp.UploadFile;  	using (Stream responseStream = upload.GetRequestStream ())  	#else  	                using (Stream responseStream = File.Create("C:\\Program Files\\ZomB\\Bindings\\ni-rt2.ini")) #endif  	 {  		responseStream.Write (bytes' 0' len);  	}  }  catch {  	return -11;  }  
Magic Number,OutStaller,Program,C:\repos\byteit101_ZomB-Dashboard-System\releasefiles\Installer\outstaller\Program.cs,IniConfig,The following statement contains a magic number: try {  	MemoryStream ms = new MemoryStream (4096);  	MemoryStream rms = new MemoryStream (4096);  	byte[] bytes;  	#if !UseFile  	FtpWebRequest request = FtpWebRequest.Create (iad) as FtpWebRequest;  	request.UsePassive = true;  	request.UseBinary = false;  	request.Method = WebRequestMethods.Ftp.DownloadFile;  	using (FtpWebResponse response = request.GetResponse () as FtpWebResponse) {  		using (Stream responseStream = response.GetResponseStream ()) {  			#else  			                {                     using (Stream responseStream = File.OpenRead("C:\\Program Files\\ZomB\\Bindings\\ni-rt.ini"))                     { #endif  			while (true) {  				Thread.Sleep (100);  				byte[] buf = new byte[1024];  				int read = responseStream.Read (buf' 0' buf.Length);  				if (read < 1)  					break;  				else  					rms.Write (buf' 0' read);  			}  		}  	}  	rms.Seek (0' SeekOrigin.Begin);  	int len' rlen = (int)rms.Length;  	using (StreamReader sr = new StreamReader (rms)) {  		while (!sr.EndOfStream) {  			string line = sr.ReadLine ();  			if (line.StartsWith ("StartupDlls") && !line.Contains ("ZomB.out")) {  				if (line.Contains ("FRC_UserProgram.out"))  					line = line.Replace ("FRC_UserProgram.out"' "ZomB.out;FRC_UserProgram.out");  				//C++  				else if (line.Contains ("FRC_JavaVM.out"))  					line = line.Replace ("FRC_JavaVM.out"' "ZomB.out;FRC_JavaVM.out");  				//Java  				else  					//LabVIEW  					line += "ZomB.out;";  			}  			WriteLine (ms' line);  		}  		bytes = ms.GetBuffer ();  		len = (int)ms.Length;  	}  	if (len < rlen)  		return -50;  	#if !UseFile  	FtpWebRequest upload = FtpWebRequest.Create (iad) as FtpWebRequest;  	upload.UsePassive = true;  	upload.KeepAlive = false;  	upload.Method = WebRequestMethods.Ftp.Rename;  	upload.RenameTo = "ni-rt.backup-" + DateTime.Now.ToFileTimeUtc () + ".ini";  	try {  		upload.GetResponse ().Close ();  	}  	catch {  	}  	upload = FtpWebRequest.Create (iad) as FtpWebRequest;  	upload.UsePassive = true;  	upload.UseBinary = false;  	upload.KeepAlive = false;  	upload.Method = WebRequestMethods.Ftp.UploadFile;  	using (Stream responseStream = upload.GetRequestStream ())  	#else  	                using (Stream responseStream = File.Create("C:\\Program Files\\ZomB\\Bindings\\ni-rt2.ini")) #endif  	 {  		responseStream.Write (bytes' 0' len);  	}  }  catch {  	return -11;  }  
Magic Number,OutStaller,Program,C:\repos\byteit101_ZomB-Dashboard-System\releasefiles\Installer\outstaller\Program.cs,IniConfig,The following statement contains a magic number: try {  	MemoryStream ms = new MemoryStream (4096);  	MemoryStream rms = new MemoryStream (4096);  	byte[] bytes;  	#if !UseFile  	FtpWebRequest request = FtpWebRequest.Create (iad) as FtpWebRequest;  	request.UsePassive = true;  	request.UseBinary = false;  	request.Method = WebRequestMethods.Ftp.DownloadFile;  	using (FtpWebResponse response = request.GetResponse () as FtpWebResponse) {  		using (Stream responseStream = response.GetResponseStream ()) {  			#else  			                {                     using (Stream responseStream = File.OpenRead("C:\\Program Files\\ZomB\\Bindings\\ni-rt.ini"))                     { #endif  			while (true) {  				Thread.Sleep (100);  				byte[] buf = new byte[1024];  				int read = responseStream.Read (buf' 0' buf.Length);  				if (read < 1)  					break;  				else  					rms.Write (buf' 0' read);  			}  		}  	}  	rms.Seek (0' SeekOrigin.Begin);  	int len' rlen = (int)rms.Length;  	using (StreamReader sr = new StreamReader (rms)) {  		while (!sr.EndOfStream) {  			string line = sr.ReadLine ();  			if (line.StartsWith ("StartupDlls") && !line.Contains ("ZomB.out")) {  				if (line.Contains ("FRC_UserProgram.out"))  					line = line.Replace ("FRC_UserProgram.out"' "ZomB.out;FRC_UserProgram.out");  				//C++  				else if (line.Contains ("FRC_JavaVM.out"))  					line = line.Replace ("FRC_JavaVM.out"' "ZomB.out;FRC_JavaVM.out");  				//Java  				else  					//LabVIEW  					line += "ZomB.out;";  			}  			WriteLine (ms' line);  		}  		bytes = ms.GetBuffer ();  		len = (int)ms.Length;  	}  	if (len < rlen)  		return -50;  	#if !UseFile  	FtpWebRequest upload = FtpWebRequest.Create (iad) as FtpWebRequest;  	upload.UsePassive = true;  	upload.KeepAlive = false;  	upload.Method = WebRequestMethods.Ftp.Rename;  	upload.RenameTo = "ni-rt.backup-" + DateTime.Now.ToFileTimeUtc () + ".ini";  	try {  		upload.GetResponse ().Close ();  	}  	catch {  	}  	upload = FtpWebRequest.Create (iad) as FtpWebRequest;  	upload.UsePassive = true;  	upload.UseBinary = false;  	upload.KeepAlive = false;  	upload.Method = WebRequestMethods.Ftp.UploadFile;  	using (Stream responseStream = upload.GetRequestStream ())  	#else  	                using (Stream responseStream = File.Create("C:\\Program Files\\ZomB\\Bindings\\ni-rt2.ini")) #endif  	 {  		responseStream.Write (bytes' 0' len);  	}  }  catch {  	return -11;  }  
Magic Number,OutStaller,Program,C:\repos\byteit101_ZomB-Dashboard-System\releasefiles\Installer\outstaller\Program.cs,IniConfig,The following statement contains a magic number: try {  	MemoryStream ms = new MemoryStream (4096);  	MemoryStream rms = new MemoryStream (4096);  	byte[] bytes;  	#if !UseFile  	FtpWebRequest request = FtpWebRequest.Create (iad) as FtpWebRequest;  	request.UsePassive = true;  	request.UseBinary = false;  	request.Method = WebRequestMethods.Ftp.DownloadFile;  	using (FtpWebResponse response = request.GetResponse () as FtpWebResponse) {  		using (Stream responseStream = response.GetResponseStream ()) {  			#else  			                {                     using (Stream responseStream = File.OpenRead("C:\\Program Files\\ZomB\\Bindings\\ni-rt.ini"))                     { #endif  			while (true) {  				Thread.Sleep (100);  				byte[] buf = new byte[1024];  				int read = responseStream.Read (buf' 0' buf.Length);  				if (read < 1)  					break;  				else  					rms.Write (buf' 0' read);  			}  		}  	}  	rms.Seek (0' SeekOrigin.Begin);  	int len' rlen = (int)rms.Length;  	using (StreamReader sr = new StreamReader (rms)) {  		while (!sr.EndOfStream) {  			string line = sr.ReadLine ();  			if (line.StartsWith ("StartupDlls") && !line.Contains ("ZomB.out")) {  				if (line.Contains ("FRC_UserProgram.out"))  					line = line.Replace ("FRC_UserProgram.out"' "ZomB.out;FRC_UserProgram.out");  				//C++  				else if (line.Contains ("FRC_JavaVM.out"))  					line = line.Replace ("FRC_JavaVM.out"' "ZomB.out;FRC_JavaVM.out");  				//Java  				else  					//LabVIEW  					line += "ZomB.out;";  			}  			WriteLine (ms' line);  		}  		bytes = ms.GetBuffer ();  		len = (int)ms.Length;  	}  	if (len < rlen)  		return -50;  	#if !UseFile  	FtpWebRequest upload = FtpWebRequest.Create (iad) as FtpWebRequest;  	upload.UsePassive = true;  	upload.KeepAlive = false;  	upload.Method = WebRequestMethods.Ftp.Rename;  	upload.RenameTo = "ni-rt.backup-" + DateTime.Now.ToFileTimeUtc () + ".ini";  	try {  		upload.GetResponse ().Close ();  	}  	catch {  	}  	upload = FtpWebRequest.Create (iad) as FtpWebRequest;  	upload.UsePassive = true;  	upload.UseBinary = false;  	upload.KeepAlive = false;  	upload.Method = WebRequestMethods.Ftp.UploadFile;  	using (Stream responseStream = upload.GetRequestStream ())  	#else  	                using (Stream responseStream = File.Create("C:\\Program Files\\ZomB\\Bindings\\ni-rt2.ini")) #endif  	 {  		responseStream.Write (bytes' 0' len);  	}  }  catch {  	return -11;  }  
Magic Number,OutStaller,Program,C:\repos\byteit101_ZomB-Dashboard-System\releasefiles\Installer\outstaller\Program.cs,IniConfig,The following statement contains a magic number: try {  	MemoryStream ms = new MemoryStream (4096);  	MemoryStream rms = new MemoryStream (4096);  	byte[] bytes;  	#if !UseFile  	FtpWebRequest request = FtpWebRequest.Create (iad) as FtpWebRequest;  	request.UsePassive = true;  	request.UseBinary = false;  	request.Method = WebRequestMethods.Ftp.DownloadFile;  	using (FtpWebResponse response = request.GetResponse () as FtpWebResponse) {  		using (Stream responseStream = response.GetResponseStream ()) {  			#else  			                {                     using (Stream responseStream = File.OpenRead("C:\\Program Files\\ZomB\\Bindings\\ni-rt.ini"))                     { #endif  			while (true) {  				Thread.Sleep (100);  				byte[] buf = new byte[1024];  				int read = responseStream.Read (buf' 0' buf.Length);  				if (read < 1)  					break;  				else  					rms.Write (buf' 0' read);  			}  		}  	}  	rms.Seek (0' SeekOrigin.Begin);  	int len' rlen = (int)rms.Length;  	using (StreamReader sr = new StreamReader (rms)) {  		while (!sr.EndOfStream) {  			string line = sr.ReadLine ();  			if (line.StartsWith ("StartupDlls") && !line.Contains ("ZomB.out")) {  				if (line.Contains ("FRC_UserProgram.out"))  					line = line.Replace ("FRC_UserProgram.out"' "ZomB.out;FRC_UserProgram.out");  				//C++  				else if (line.Contains ("FRC_JavaVM.out"))  					line = line.Replace ("FRC_JavaVM.out"' "ZomB.out;FRC_JavaVM.out");  				//Java  				else  					//LabVIEW  					line += "ZomB.out;";  			}  			WriteLine (ms' line);  		}  		bytes = ms.GetBuffer ();  		len = (int)ms.Length;  	}  	if (len < rlen)  		return -50;  	#if !UseFile  	FtpWebRequest upload = FtpWebRequest.Create (iad) as FtpWebRequest;  	upload.UsePassive = true;  	upload.KeepAlive = false;  	upload.Method = WebRequestMethods.Ftp.Rename;  	upload.RenameTo = "ni-rt.backup-" + DateTime.Now.ToFileTimeUtc () + ".ini";  	try {  		upload.GetResponse ().Close ();  	}  	catch {  	}  	upload = FtpWebRequest.Create (iad) as FtpWebRequest;  	upload.UsePassive = true;  	upload.UseBinary = false;  	upload.KeepAlive = false;  	upload.Method = WebRequestMethods.Ftp.UploadFile;  	using (Stream responseStream = upload.GetRequestStream ())  	#else  	                using (Stream responseStream = File.Create("C:\\Program Files\\ZomB\\Bindings\\ni-rt2.ini")) #endif  	 {  		responseStream.Write (bytes' 0' len);  	}  }  catch {  	return -11;  }  
Magic Number,OutStaller,Program,C:\repos\byteit101_ZomB-Dashboard-System\releasefiles\Installer\outstaller\Program.cs,IniConfig,The following statement contains a magic number: try {  	MemoryStream ms = new MemoryStream (4096);  	MemoryStream rms = new MemoryStream (4096);  	byte[] bytes;  	#if !UseFile  	FtpWebRequest request = FtpWebRequest.Create (iad) as FtpWebRequest;  	request.UsePassive = true;  	request.UseBinary = false;  	request.Method = WebRequestMethods.Ftp.DownloadFile;  	using (FtpWebResponse response = request.GetResponse () as FtpWebResponse) {  		using (Stream responseStream = response.GetResponseStream ()) {  			#else  			                {                     using (Stream responseStream = File.OpenRead("C:\\Program Files\\ZomB\\Bindings\\ni-rt.ini"))                     { #endif  			while (true) {  				Thread.Sleep (100);  				byte[] buf = new byte[1024];  				int read = responseStream.Read (buf' 0' buf.Length);  				if (read < 1)  					break;  				else  					rms.Write (buf' 0' read);  			}  		}  	}  	rms.Seek (0' SeekOrigin.Begin);  	int len' rlen = (int)rms.Length;  	using (StreamReader sr = new StreamReader (rms)) {  		while (!sr.EndOfStream) {  			string line = sr.ReadLine ();  			if (line.StartsWith ("StartupDlls") && !line.Contains ("ZomB.out")) {  				if (line.Contains ("FRC_UserProgram.out"))  					line = line.Replace ("FRC_UserProgram.out"' "ZomB.out;FRC_UserProgram.out");  				//C++  				else if (line.Contains ("FRC_JavaVM.out"))  					line = line.Replace ("FRC_JavaVM.out"' "ZomB.out;FRC_JavaVM.out");  				//Java  				else  					//LabVIEW  					line += "ZomB.out;";  			}  			WriteLine (ms' line);  		}  		bytes = ms.GetBuffer ();  		len = (int)ms.Length;  	}  	if (len < rlen)  		return -50;  	#if !UseFile  	FtpWebRequest upload = FtpWebRequest.Create (iad) as FtpWebRequest;  	upload.UsePassive = true;  	upload.KeepAlive = false;  	upload.Method = WebRequestMethods.Ftp.Rename;  	upload.RenameTo = "ni-rt.backup-" + DateTime.Now.ToFileTimeUtc () + ".ini";  	try {  		upload.GetResponse ().Close ();  	}  	catch {  	}  	upload = FtpWebRequest.Create (iad) as FtpWebRequest;  	upload.UsePassive = true;  	upload.UseBinary = false;  	upload.KeepAlive = false;  	upload.Method = WebRequestMethods.Ftp.UploadFile;  	using (Stream responseStream = upload.GetRequestStream ())  	#else  	                using (Stream responseStream = File.Create("C:\\Program Files\\ZomB\\Bindings\\ni-rt2.ini")) #endif  	 {  		responseStream.Write (bytes' 0' len);  	}  }  catch {  	return -11;  }  
Magic Number,OutStaller,Program,C:\repos\byteit101_ZomB-Dashboard-System\releasefiles\Installer\outstaller\Program.cs,IniConfig,The following statement contains a magic number: using (FtpWebResponse response = request.GetResponse () as FtpWebResponse) {  	using (Stream responseStream = response.GetResponseStream ()) {  		#else  		                {                     using (Stream responseStream = File.OpenRead("C:\\Program Files\\ZomB\\Bindings\\ni-rt.ini"))                     { #endif  		while (true) {  			Thread.Sleep (100);  			byte[] buf = new byte[1024];  			int read = responseStream.Read (buf' 0' buf.Length);  			if (read < 1)  				break;  			else  				rms.Write (buf' 0' read);  		}  	}  }  
Magic Number,OutStaller,Program,C:\repos\byteit101_ZomB-Dashboard-System\releasefiles\Installer\outstaller\Program.cs,IniConfig,The following statement contains a magic number: using (FtpWebResponse response = request.GetResponse () as FtpWebResponse) {  	using (Stream responseStream = response.GetResponseStream ()) {  		#else  		                {                     using (Stream responseStream = File.OpenRead("C:\\Program Files\\ZomB\\Bindings\\ni-rt.ini"))                     { #endif  		while (true) {  			Thread.Sleep (100);  			byte[] buf = new byte[1024];  			int read = responseStream.Read (buf' 0' buf.Length);  			if (read < 1)  				break;  			else  				rms.Write (buf' 0' read);  		}  	}  }  
Magic Number,OutStaller,Program,C:\repos\byteit101_ZomB-Dashboard-System\releasefiles\Installer\outstaller\Program.cs,IniConfig,The following statement contains a magic number: using (Stream responseStream = response.GetResponseStream ()) {  	#else  	                {                     using (Stream responseStream = File.OpenRead("C:\\Program Files\\ZomB\\Bindings\\ni-rt.ini"))                     { #endif  	while (true) {  		Thread.Sleep (100);  		byte[] buf = new byte[1024];  		int read = responseStream.Read (buf' 0' buf.Length);  		if (read < 1)  			break;  		else  			rms.Write (buf' 0' read);  	}  }  
Magic Number,OutStaller,Program,C:\repos\byteit101_ZomB-Dashboard-System\releasefiles\Installer\outstaller\Program.cs,IniConfig,The following statement contains a magic number: using (Stream responseStream = response.GetResponseStream ()) {  	#else  	                {                     using (Stream responseStream = File.OpenRead("C:\\Program Files\\ZomB\\Bindings\\ni-rt.ini"))                     { #endif  	while (true) {  		Thread.Sleep (100);  		byte[] buf = new byte[1024];  		int read = responseStream.Read (buf' 0' buf.Length);  		if (read < 1)  			break;  		else  			rms.Write (buf' 0' read);  	}  }  
Magic Number,OutStaller,Program,C:\repos\byteit101_ZomB-Dashboard-System\releasefiles\Installer\outstaller\Program.cs,IniConfig,The following statement contains a magic number: while (true) {  	Thread.Sleep (100);  	byte[] buf = new byte[1024];  	int read = responseStream.Read (buf' 0' buf.Length);  	if (read < 1)  		break;  	else  		rms.Write (buf' 0' read);  }  
Magic Number,OutStaller,Program,C:\repos\byteit101_ZomB-Dashboard-System\releasefiles\Installer\outstaller\Program.cs,IniConfig,The following statement contains a magic number: while (true) {  	Thread.Sleep (100);  	byte[] buf = new byte[1024];  	int read = responseStream.Read (buf' 0' buf.Length);  	if (read < 1)  		break;  	else  		rms.Write (buf' 0' read);  }  
Magic Number,OutStaller,Program,C:\repos\byteit101_ZomB-Dashboard-System\releasefiles\Installer\outstaller\Program.cs,IniConfig,The following statement contains a magic number: Thread.Sleep (100);  
Magic Number,OutStaller,Program,C:\repos\byteit101_ZomB-Dashboard-System\releasefiles\Installer\outstaller\Program.cs,IniConfig,The following statement contains a magic number: if (len < rlen)  	return -50;  
Magic Number,OutStaller,Program,C:\repos\byteit101_ZomB-Dashboard-System\releasefiles\Installer\outstaller\Program.cs,IniConfig,The following statement contains a magic number: return -50;  
Magic Number,OutStaller,Program,C:\repos\byteit101_ZomB-Dashboard-System\releasefiles\Installer\outstaller\Program.cs,IniConfig,The following statement contains a magic number: return -11;  
Missing Default,IPAddressControlLib,FieldControl,C:\repos\byteit101_ZomB-Dashboard-System\releasefiles\Installer\outstaller\FieldControl.cs,TakeFocus,The following switch statement is missing a default case: switch (action) {  case Action.Trim:  	if (TextLength > 0) {  		int newLength = TextLength - 1;  		base.Text = Text.Substring (0' newLength);  	}  	SelectionStart = TextLength;  	return;  case Action.Home:  	SelectionStart = 0;  	SelectionLength = 0;  	return;  case Action.End:  	SelectionStart = TextLength;  	return;  }  
Missing Default,IPAddressControlLib,FieldControl,C:\repos\byteit101_ZomB-Dashboard-System\releasefiles\Installer\outstaller\FieldControl.cs,OnKeyDown,The following switch statement is missing a default case: switch (e.KeyCode) {  case Keys.Home:  	SendCedeFocusEvent (Action.Home);  	return;  case Keys.End:  	SendCedeFocusEvent (Action.End);  	return;  }  
Missing Default,IPAddressControlLib,FieldControl,C:\repos\byteit101_ZomB-Dashboard-System\releasefiles\Installer\outstaller\FieldControl.cs,WndProc,The following switch statement is missing a default case: switch (m.Msg) {  case 0x007b:  	// WM_CONTEXTMENU  	return;  }  
Missing Default,IPAddressControlLib,IPAddressControl,C:\repos\byteit101_ZomB-Dashboard-System\releasefiles\Installer\outstaller\IPAddressControl.cs,OnPaint,The following switch statement is missing a default case: switch (BorderStyle) {  case BorderStyle.Fixed3D:  	if (Application.RenderWithVisualStyles) {  		ControlPaint.DrawVisualStyleBorder (e.Graphics' rectBorder);  	}  	else {  		ControlPaint.DrawBorder3D (e.Graphics' ClientRectangle' Border3DStyle.Sunken);  	}  	break;  case BorderStyle.FixedSingle:  	ControlPaint.DrawBorder (e.Graphics' ClientRectangle' SystemColors.WindowFrame' ButtonBorderStyle.Solid);  	break;  }  
Missing Default,IPAddressControlLib,IPAddressControl,C:\repos\byteit101_ZomB-Dashboard-System\releasefiles\Installer\outstaller\IPAddressControl.cs,CalculateMinimumSize,The following switch statement is missing a default case: switch (BorderStyle) {  case BorderStyle.Fixed3D:  	minimumSize.Width += 6;  	minimumSize.Height += (GetSuggestedHeight () - minimumSize.Height);  	break;  case BorderStyle.FixedSingle:  	minimumSize.Width += 4;  	minimumSize.Height += (GetSuggestedHeight () - minimumSize.Height);  	break;  }  
Missing Default,IPAddressControlLib,IPAddressControl,C:\repos\byteit101_ZomB-Dashboard-System\releasefiles\Installer\outstaller\IPAddressControl.cs,LayoutControls,The following switch statement is missing a default case: switch (BorderStyle) {  case BorderStyle.Fixed3D:  	x = Fixed3DOffset.Width;  	y = Fixed3DOffset.Height;  	break;  case BorderStyle.FixedSingle:  	x = FixedSingleOffset.Width;  	y = FixedSingleOffset.Height;  	break;  }  
Missing Default,IPAddressControlLib,IPAddressControl,C:\repos\byteit101_ZomB-Dashboard-System\releasefiles\Installer\outstaller\IPAddressControl.cs,OnCedeFocus,The following switch statement is missing a default case: switch (e.Action) {  case Action.Home:  	_fieldControls [0].TakeFocus (Action.Home);  	return;  case Action.End:  	_fieldControls [FieldCount - 1].TakeFocus (Action.End);  	return;  case Action.Trim:  	if (e.FieldIndex == 0) {  		return;  	}  	_fieldControls [e.FieldIndex - 1].TakeFocus (Action.Trim);  	return;  }  
