Implementation smell,Namespace,Class,File,Method,Description
Long Method,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,ShowSnaps,The method has 383 lines of code.
Complex Method,System451.Communication.Dashboard.ViZ,App,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\App.xaml.cs,Application_Startup,Cyclomatic complexity of the method is 35
Complex Method,System451.Communication.Dashboard.ViZ,BindingDesigner,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\BindingDesigner.xaml.cs,BindingDesigner,Cyclomatic complexity of the method is 9
Complex Method,System451.Communication.Dashboard.ViZ,BindingDesigner,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\BindingDesigner.xaml.cs,numbify,Cyclomatic complexity of the method is 20
Complex Method,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,Designer,Cyclomatic complexity of the method is 11
Complex Method,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,WndProc,Cyclomatic complexity of the method is 11
Complex Method,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,ZDash_Drop,Cyclomatic complexity of the method is 10
Complex Method,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,ScrollViewer_MouseMove,Cyclomatic complexity of the method is 13
Complex Method,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,ShowSnaps,Cyclomatic complexity of the method is 79
Complex Method,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,AutoListen_Click,Cyclomatic complexity of the method is 8
Complex Method,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,Export,Cyclomatic complexity of the method is 9
Complex Method,System451.Communication.Dashboard.ViZ,PropertyElement,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\PropertyElement.cs,GetEntry,Cyclomatic complexity of the method is 10
Complex Method,System451.Communication.Dashboard.ViZ,SurfaceControl,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\SurfaceControl.cs,GetResizeDirection,Cyclomatic complexity of the method is 9
Complex Method,System451.Communication.Dashboard.ViZ,TransformDesigner,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\TransformDesigner.cs,SerializeTransform,Cyclomatic complexity of the method is 9
Long Parameter List,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,WndProc,The method has 5 parameters.
Long Parameter List,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,ScrollViewer_MouseMove,The method has 10 parameters.
Long Parameter List,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,ShowSnaps,The method has 5 parameters.
Long Parameter List,System451.Communication.Dashboard.ViZ,PropertyElement,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\PropertyElement.cs,GetEntry,The method has 6 parameters.
Long Statement,System451.Communication.Dashboard.ViZ,App,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\App.xaml.cs,Application_Startup,The length of the statement  "					System.Windows.Forms.MessageBox.Show ("Invalid CLI arguments. Valid arguments:\r\n -extract  Extract all embedded dll's\r\n -build infile outfile   Build the infile into an exe at outfile\r\n [fileName]  Run this Zaml file"); " is 225.
Long Statement,System451.Communication.Dashboard.ViZ,App,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\App.xaml.cs,Application_Startup,The length of the statement  "					System.Windows.Forms.MessageBox.Show ("Invalid CLI arguments. Valid arguments:\r\n -extract  Extract all embedded dll's\r\n -build infile outfile   Build the infile into an exe at outfile\r\n [fileName]  Run this Zaml file"); " is 225.
Long Statement,System451.Communication.Dashboard.ViZ,App,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\App.xaml.cs,Application_Startup,The length of the statement  "				System.Windows.Forms.MessageBox.Show ("Invalid CLI arguments. Valid arguments:\r\n -extract  Extract all embedded dll's\r\n -build infile outfile   Build the infile into an exe at outfile\r\n [fileName]  Run this Zaml file"); " is 225.
Long Statement,System451.Communication.Dashboard.ViZ,BindingDesigner,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\BindingDesigner.xaml.cs,GetIsPropertyMain,The length of the statement  "	foreach (var at in (elmbox.SelectedItem as SurfaceControl).Control.GetType ().GetCustomAttributes (typeof(ZomBDesignablePropertyAttribute)' true)) { " is 148.
Long Statement,System451.Communication.Dashboard.ViZ,BindingDesigner,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\BindingDesigner.xaml.cs,propnamebox_SelectionChanged,The length of the statement  "	proptypelbl.Foreground = ((((object[])propnamebox.SelectedItem) [0] as PropertyInfo).PropertyType == prop.PropertyType) ? Brushes.Black : Brushes.Red; " is 150.
Long Statement,System451.Communication.Dashboard.ViZ,BindingDesigner,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\BindingDesigner.xaml.cs,getConverterType,The length of the statement  "		return "pn{" + bindconvNumCustomFomStart.Text + ":" + bindconvNumCustomFomEnd.Text + "}-{" + bindconvNumCustomToStart.Text + ":" + bindconvNumCustomToEnd.Text + "}"; " is 165.
Long Statement,System451.Communication.Dashboard.ViZ,BindNameConverter,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\BindingDesigner.xaml.cs,Convert,The length of the statement  "	return ((c is IZomBControl && !string.IsNullOrEmpty ((c as IZomBControl).ControlName)) ? (c as IZomBControl).ControlName : (c as FrameworkElement).Name) + " - {" + (value as SurfaceControl).Control.GetType ().Name + "}"; " is 220.
Long Statement,System451.Communication.Dashboard.ViZ,BoundPropertyDesigner,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\BindingDesigner.xaml.cs,GetValue,The length of the statement  "	var dp = DependencyPropertyDescriptor.FromName (Property.Name' Property.DeclaringType' Object.GetType ()).DependencyProperty; " is 125.
Long Statement,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,CheckForUpdates,The length of the statement  "			string updatepath = Environment.GetFolderPath (Environment.SpecialFolder.DesktopDirectory) + Path.DirectorySeparatorChar + "ZomB Update.exe"; " is 141.
Long Statement,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,CheckForUpdates,The length of the statement  "				TSAlert ("An update for ZomB is avalible' but automatic download failed. Please manually update ZomB:\r\n\r\n" + url.DownloadUrl + "\r\n\r\nChanges:\r\n" + url.Changes' false); " is 176.
Long Statement,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,CheckForUpdates,The length of the statement  "			if (TSAlert ("An update for ZomB is avalible' and has been downloaded & verified to your desktop.\r\nWould you like to update now?\r\nChanges:\r\n" + url.Changes' true)) { " is 171.
Long Statement,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,CheckForUpdates,The length of the statement  "			TSAlert ("An update for ZomB is avalible' but automatic download failed. Please manually update ZomB:\r\n\r\n" + url' false); " is 125.
Long Statement,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,ZDash_Drop,The length of the statement  "					sc.Control.Name = ap.Name.Replace (" "' "Z").Replace ("_"' "__").Replace ("."' "_") + Guid.NewGuid ().ToString ("N").Substring (0' 5); " is 134.
Long Statement,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,AddControl,The length of the statement  "	fe.Name = aup.Name.Replace (" "' "Z").Replace ("_"' "__").Replace ("."' "_") + Guid.NewGuid ().ToString ("N").Substring (0' 5); " is 127.
Long Statement,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,ScrollViewer_MouseMove,The length of the statement  "			ShowSnaps (SnapGridDirections.All' x => Canvas.SetLeft (curObj' x)' y => Canvas.SetTop (curObj' y)' r => Canvas.SetLeft (curObj' r - SnapGridHelper.Right (curObj) + SnapGridHelper.Left (curObj))' b => Canvas.SetTop (curObj' b - SnapGridHelper.Bottom (curObj) + SnapGridHelper.Top (curObj))); " is 291.
Long Statement,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,ZDash_MouseLeftButtonDown,The length of the statement  "		if (e.OriginalSource is Button || ((FrameworkElement)e.OriginalSource).TemplatedParent is Button)//resize' TODO: add PART_xxx detection " is 135.
Long Statement,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,ZDash_MouseLeftButtonDown,The length of the statement  "		else if (e.OriginalSource is SurfaceControl || VisualTreeHelper.GetParent ((DependencyObject)e.OriginalSource) is SurfaceControl)//resize' TODO: add PART_xxx detection " is 167.
Long Statement,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,ShowSnaps,The length of the statement  "			else if ((lastDistance = SnapGridHelper.SnapableForceDistanceLeft (curObj' other)) < SnapGridHelper.SnapableForceDistance) { " is 124.
Long Statement,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,ShowSnaps,The length of the statement  "			else if ((lastDistance = SnapGridHelper.SnapableForceDistanceRight (curObj' other)) < SnapGridHelper.SnapableForceDistance) { " is 125.
Long Statement,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,ShowSnaps,The length of the statement  "			else if ((lastDistance = SnapGridHelper.SnapableForceDistanceTop (curObj' other)) < SnapGridHelper.SnapableForceDistance) { " is 123.
Long Statement,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,ShowSnaps,The length of the statement  "			else if ((lastDistance = SnapGridHelper.SnapableForceDistanceBottom (curObj' other)) < SnapGridHelper.SnapableForceDistance) { " is 126.
Long Statement,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,ShowSnaps,The length of the statement  "		else if ((lastDistance = Math.Abs (SnapGridHelper.SnapDistance - SnapGridHelper.Left (curObj))) < SnapGridHelper.SnapableForceDistance) { " is 137.
Long Statement,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,ShowSnaps,The length of the statement  "		if ((lastDistance = Math.Abs (ZDash.ActualWidth - SnapGridHelper.Right (curObj))) < SnapGridHelper.SnapableForceDistance) { " is 123.
Long Statement,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,ShowSnaps,The length of the statement  "		else if ((lastDistance = Math.Abs (ZDash.ActualWidth - SnapGridHelper.Right (curObj) - SnapGridHelper.SnapDistance)) < SnapGridHelper.SnapableForceDistance) { " is 158.
Long Statement,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,ShowSnaps,The length of the statement  "		else if ((lastDistance = Math.Abs (SnapGridHelper.SnapDistance - SnapGridHelper.Top (curObj))) < SnapGridHelper.SnapableForceDistance) { " is 136.
Long Statement,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,ShowSnaps,The length of the statement  "		if ((lastDistance = Math.Abs (ZDash.ActualHeight - SnapGridHelper.Bottom (curObj))) < SnapGridHelper.SnapableForceDistance) { " is 125.
Long Statement,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,ShowSnaps,The length of the statement  "		else if ((lastDistance = Math.Abs (ZDash.ActualHeight - SnapGridHelper.SnapDistance - SnapGridHelper.Bottom (curObj))) < SnapGridHelper.SnapableForceDistance) { " is 160.
Long Statement,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,listBox2_PreviewMouseMove,The length of the statement  "			ZomBControlAttribute contact = (ZomBControlAttribute)FindAnchestor<ListBox> (listViewItem).ItemContainerGenerator.ItemFromContainer (listViewItem); " is 147.
Long Statement,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,AutoAddControlTypeHook,The length of the statement  "					if (dk.TypeHint == ZomBDataTypeHint.All || neweddata.Value.TypeHint == ZomBDataTypeHint.Unknown || neweddata.Value.TypeHint == ZomBDataTypeHint.All) " is 148.
Long Statement,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,AutoAddResortTyped,The length of the statement  "			if ((dk.TypeHint & ZomBDataTypeHint.Lookup) == ZomBDataTypeHint.Lookup && dk.TypeHintTag != null && titem.Type != null) { " is 121.
Long Statement,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,DeepClonetb,The length of the statement  "	var s = "<ListBox xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\" xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\" Grid.Column=\"0\" VerticalAlignment=\"Stretch\" ScrollViewer.HorizontalScrollBarVisibility=\"Disabled\"><ListBox.ItemTemplate><DataTemplate><ListBoxItem Padding=\"3\" HorizontalAlignment=\"Stretch\" ToolTipService.InitialShowDelay=\"1000\" ToolTipService.ShowDuration=\"10000\"><ListBoxItem.ToolTip><StackPanel Width=\"200\"><Label FontWeight=\"Bold\" Background=\"Blue\" Foreground=\"White\" HorizontalAlignment=\"Stretch\" HorizontalContentAlignment=\"Center\" Content=\"{Binding Path=Name}\"></Label><TextBlock Padding=\"10\" TextWrapping=\"Wrap\" Text=\"{Binding Path=Description}\"></TextBlock></StackPanel></ListBoxItem.ToolTip><Canvas Width=\"32\" Height=\"32\" Margin=\"2\" SnapsToDevicePixels=\"True\"><Image Width=\"32\" Height=\"32\" Source=\"{Binding Path=Icon}\" VerticalAlignment=\"Center\" HorizontalAlignment=\"Center\" SnapsToDevicePixels=\"True\" /><Path Data=\"M 32.84375 -5.0625 L 30.53125 -2.34375 L 26.96875 -2.71875 L 28.84375 0.34375 L 27.40625 3.59375 L 30.875 2.78125 L 33.53125 5.15625 L 33.8125 1.59375 L 36.90625 -0.1875 L 33.59375 -1.5625 L 32.84375 -5.0625 z \"><Path.Style><Style TargetType=\"{x:Type Path}\"><Setter Property=\"Fill\" Value=\"Transparent\" /><Style.Triggers><DataTrigger Value=\"True\"><DataTrigger.Binding><Binding Path=\"Star\" x:Name=\"StarBnd\" /></DataTrigger.Binding><Setter Property=\"Fill\" Value=\"#FFFFBB00\" /></DataTrigger></Style.Triggers></Style></Path.Style></Path></Canvas></ListBoxItem></DataTemplate></ListBox.ItemTemplate><ListBox.ItemsPanel><ItemsPanelTemplate><WrapPanel /></ItemsPanelTemplate></ListBox.ItemsPanel></ListBox>"; " is 1740.
Long Statement,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,ZDash_PreviewMouseRightButtonDown,The length of the statement  "		if (e.Source is Button || VisualTreeHelper.GetParent ((DependencyObject)e.Source) is Button || VisualTreeHelper.GetParent (VisualTreeHelper.GetParent ((DependencyObject)e.Source)) is Button)//resize' TODO: add PART_xxx detection " is 228.
Long Statement,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,ZDash_PreviewMouseRightButtonDown,The length of the statement  "		else if (e.Source is SurfaceControl || VisualTreeHelper.GetParent ((DependencyObject)e.Source) is SurfaceControl)//resize' TODO: add PART_xxx detection " is 151.
Long Statement,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,LoadFile,The length of the statement  "		StoppedDDHCVS cvs = XamlReader.Load (new MemoryStream (UTF8Encoding.UTF8.GetBytes (new StreamReader (new FileStream (fileName' FileMode.Open' FileAccess.Read' FileShare.Read)).ReadToEnd ().Replace ("ZomB:DashboardDataCanvas "' "ViZ:StoppedDDHCVS xmlns:ViZ=\"clr-namespace:System451.Communication.Dashboard.ViZ;assembly=ViZ\" ").Replace ("/ZomB:DashboardDataCanvas"' "/ViZ:StoppedDDHCVS")))) as StoppedDDHCVS; " is 408.
Long Statement,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,Export,The length of the statement  "	StringBuilder sb = new StringBuilder ("<ZomB:DashboardDataCanvas xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\" xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\" "); " is 193.
Long Statement,System451.Communication.Dashboard.ViZ,PropertyElement,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\PropertyElement.cs,GetRealProperty,The length of the statement  "	FieldInfo fieldInfo = Object.GetType ().GetField (Property.Name + "Property"' BindingFlags.Static | BindingFlags.FlattenHierarchy | BindingFlags.Public); " is 153.
Long Statement,System451.Communication.Dashboard.ViZ,PropertyElement,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\PropertyElement.cs,CheckBinding,The length of the statement  "		var dp = DependencyPropertyDescriptor.FromName (Property.Name' Property.DeclaringType' Object.GetType ()).DependencyProperty; " is 125.
Long Statement,System451.Communication.Dashboard.ViZ,SettingsManager,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\SettingsManager.xaml.cs,LoadSettings,The length of the statement  "		ZbGenChkTitlebar.IsChecked = (int)Registry.LocalMachine.OpenSubKey (@"Software\ZomB").GetValue ("DriverDisable"' 0) == 0; " is 121.
Long Statement,System451.Communication.Dashboard.ViZ,SettingsManager,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\SettingsManager.xaml.cs,SaveSettings,The length of the statement  "		Registry.LocalMachine.OpenSubKey (@"Software\ZomB"' true).SetValue ("DriverDisable"' ZbGenChkTitlebar.IsChecked == true ? 0 : 1); " is 129.
Long Statement,System451.Communication.Dashboard.ViZ,SettingsManager,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\SettingsManager.xaml.cs,SaveSettings,The length of the statement  "		Registry.LocalMachine.OpenSubKey (@"Software\ZomB"' true).SetValue ("Singleton"' ZbGenChkSingleton.IsChecked == true ? 1 : 0); " is 126.
Long Statement,System451.Communication.Dashboard.ViZ,SurfaceControl,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\SurfaceControl.cs,OnApplyTemplate,The length of the statement  "			tlsize.Visibility = lsize.Visibility = tsize.Visibility = trsize.Visibility = blsize.Visibility = rsize.Visibility = bsize.Visibility = sizer.Visibility = Visibility.Collapsed; " is 176.
Long Statement,System451.Communication.Dashboard.ViZ,SurfaceControl,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\SurfaceControl.cs,OnRender,The length of the statement  "		drawingContext.DrawLine (new Pen (new SolidColorBrush (snap.color)' 1.0)' new Point (snap.x1' snap.y1)' new Point (snap.x2' snap.y2)); " is 134.
Long Statement,System451.Communication.Dashboard.ViZ,SurfaceControl,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\SurfaceControl.cs,SetTransforms,The length of the statement  "	DependencyPropertyDescriptor.FromProperty (FrameworkElement.RenderTransformOriginProperty' Control.GetType ()).AddValueChanged (Control' new EventHandler (RenderTransformOriginChanged)); " is 186.
Long Statement,System451.Communication.Dashboard.ViZ,TransformDesignerWindow,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\TransformDesignerWindow.xaml.cs,Button_Click,The length of the statement  "	new BindingDesigner (Object.RenderTransform' Object.RenderTransform.GetType ().GetProperty ("Angle")' Designer.getDesigner ().ZDash.Children).ShowDialog (); " is 156.
Long Statement,System451.Communication.Dashboard.ViZ,TransformDesignerWindow,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\TransformDesignerWindow.xaml.cs,Button_Click_1,The length of the statement  "	new BindingDesigner (Object.RenderTransform' Object.RenderTransform.GetType ().GetProperty ("X")' Designer.getDesigner ().ZDash.Children).ShowDialog (); " is 152.
Long Statement,System451.Communication.Dashboard.ViZ,TransformDesignerWindow,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\TransformDesignerWindow.xaml.cs,SetYTransform_click,The length of the statement  "	new BindingDesigner (Object.RenderTransform' Object.RenderTransform.GetType ().GetProperty ("Y")' Designer.getDesigner ().ZDash.Children).ShowDialog (); " is 152.
Long Statement,System451.Communication.Dashboard.ViZ,TransformDesignerWindow,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\TransformDesignerWindow.xaml.cs,SetSkewX_Click,The length of the statement  "	new BindingDesigner (Object.RenderTransform' Object.RenderTransform.GetType ().GetProperty ("AngleX")' Designer.getDesigner ().ZDash.Children).ShowDialog (); " is 157.
Long Statement,System451.Communication.Dashboard.ViZ,TransformDesignerWindow,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\TransformDesignerWindow.xaml.cs,SetSkewY_Click,The length of the statement  "	new BindingDesigner (Object.RenderTransform' Object.RenderTransform.GetType ().GetProperty ("AngleY")' Designer.getDesigner ().ZDash.Children).ShowDialog (); " is 157.
Long Statement,System451.Communication.Dashboard.ViZ,ZomBBuilder,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\ZomBBuilder.cs,BuildZomBString,The length of the statement  "	return BuildZomBString (zaml' path' loadLocal' Path.GetDirectoryName (Assembly.GetEntryAssembly ().CodeBase).Replace ("file:\\"' "") + "\\Dashboardexe.ico"); " is 157.
Long Statement,System451.Communication.Dashboard.ViZ,ZomBBuilder,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\ZomBBuilder.cs,BuildZomBString,The length of the statement  "	pam.ReferencedAssemblies.Add (Assembly.Load ("PresentationCore' Version=3.0.0.0' Culture=neutral' PublicKeyToken=31bf3856ad364e35").Location); " is 142.
Long Statement,System451.Communication.Dashboard.ViZ,ZomBBuilder,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\ZomBBuilder.cs,BuildZomBString,The length of the statement  "	pam.ReferencedAssemblies.Add (Assembly.Load ("System.Core' Version=3.5.0.0' Culture=neutral' PublicKeyToken=b77a5c561934e089").Location); " is 137.
Long Statement,System451.Communication.Dashboard.ViZ,ZomBBuilder,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\ZomBBuilder.cs,BuildZomBString,The length of the statement  "	pam.ReferencedAssemblies.Add (Assembly.Load ("PresentationFramework' Version=3.0.0.0' Culture=neutral' PublicKeyToken=31bf3856ad364e35").Location); " is 147.
Long Statement,System451.Communication.Dashboard.ViZ,ZomBBuilder,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\ZomBBuilder.cs,BuildZomBString,The length of the statement  "	pam.ReferencedAssemblies.Add (Assembly.Load ("WindowsBase' Version=3.0.0.0' Culture=neutral' PublicKeyToken=31bf3856ad364e35").Location); " is 137.
Long Statement,System451.Communication.Dashboard.ViZ,ZomBBuilder,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\ZomBBuilder.cs,BuildZomBString,The length of the statement  "		pam.ReferencedAssemblies.Add (Path.GetDirectoryName (Assembly.GetEntryAssembly ().CodeBase).Replace ("file:\\"' "") + "\\ZomB.dll"); " is 132.
Long Statement,System451.Communication.Dashboard.ViZ,ZomBBuilder,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\ZomBBuilder.cs,BuildZomBString,The length of the statement  "            this.Content = System.Windows.Markup.XamlReader.Parse(""" + zaml.Replace ("\""' "\\\"").Replace ("\r"' "\\r").Replace ("\n"' "\\n").Replace ("\t"' "\\t") + @"""); " is 162.
Long Statement,System451.Communication.Dashboard.ViZ,ZomBBuilder,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\ZomBBuilder.cs,BuildZomBString,The length of the statement  "            string zombpath = Microsoft.Win32.Registry.LocalMachine.OpenSubKey(@""SOFTWARE\ZomB"").GetValue(""Path""' @""C:\Program Files\ZomB"").ToString(); " is 145.
Long Statement,System451.Communication.Dashboard.ViZ,ZomBBuilder,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\ZomBBuilder.cs,BuildZomBString,The length of the statement  "                    MyResourceDictionary.Source = new Uri(""pack://application:'''/"" + item.FullName + "";component/Themes/Generic.xaml""); " is 120.
Complex Conditional,System451.Communication.Dashboard.ViZ,App,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\App.xaml.cs,Application_Startup,The conditional expression  "args.Length > 1 && (args [0] == "-o" || args [0] == "-open") && File.Exists (args [1])"  is complex.
Empty Catch Block,System451.Communication.Dashboard.ViZ,App,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\App.xaml.cs,LoadPlugins,The method has an empty catch block.
Empty Catch Block,System451.Communication.Dashboard.ViZ,App,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\App.xaml.cs,LoadAssembliesGeneric,The method has an empty catch block.
Empty Catch Block,System451.Communication.Dashboard.ViZ,BindingDesigner,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\BindingDesigner.xaml.cs,BindingDesigner,The method has an empty catch block.
Empty Catch Block,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,Designer,The method has an empty catch block.
Empty Catch Block,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,CheckForUpdates,The method has an empty catch block.
Empty Catch Block,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,tbx_Closed,The method has an empty catch block.
Empty Catch Block,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,listBox2_PreviewMouseMove,The method has an empty catch block.
Empty Catch Block,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,AutoListen_Click,The method has an empty catch block.
Empty Catch Block,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,RunApp,The method has an empty catch block.
Empty Catch Block,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,RunApp,The method has an empty catch block.
Empty Catch Block,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,RunApp,The method has an empty catch block.
Empty Catch Block,System451.Communication.Dashboard.ViZ,PropertyElement,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\PropertyElement.cs,GetEntry,The method has an empty catch block.
Empty Catch Block,System451.Communication.Dashboard.ViZ,PropertyElement,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\PropertyElement.cs,GetEntry,The method has an empty catch block.
Empty Catch Block,System451.Communication.Dashboard.ViZ,PropertyElement,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\PropertyElement.cs,CheckBinding,The method has an empty catch block.
Empty Catch Block,System451.Communication.Dashboard.ViZ,AppRunner,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Run.cs,Start,The method has an empty catch block.
Empty Catch Block,System451.Communication.Dashboard.ViZ,AppRunner,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Run.cs,Start,The method has an empty catch block.
Empty Catch Block,System451.Communication.Dashboard.ViZ,SettingsManager,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\SettingsManager.xaml.cs,LoadSettings,The method has an empty catch block.
Magic Number,System451.Communication.Dashboard.ViZ,About,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\About.xaml.cs,About,The following statement contains a magic number: if (DateTime.Today.Day == 31 && DateTime.Today.Month == 10) {  	GradientBlue.Color = Colors.Red;  	ViZFullLogoDrawing.Brush = Brushes.Red;  	ViZLogoDrawing.Brush = Brushes.Red;  }  
Magic Number,System451.Communication.Dashboard.ViZ,About,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\About.xaml.cs,About,The following statement contains a magic number: if (DateTime.Today.Day == 31 && DateTime.Today.Month == 10) {  	GradientBlue.Color = Colors.Red;  	ViZFullLogoDrawing.Brush = Brushes.Red;  	ViZLogoDrawing.Brush = Brushes.Red;  }  
Magic Number,System451.Communication.Dashboard.ViZ,App,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\App.xaml.cs,Application_Startup,The following statement contains a magic number: if (args.Length > 0) {  	if (File.Exists (args [0]))  		new Run (File.ReadAllText (args [0])).Show ();  	else if (args.Length > 1 && (args [0] == "-o" || args [0] == "-open") && File.Exists (args [1])) {  		var dsn = new Designer ();  		dsn.PreLoadFile (args [1]);  		dsn.Show ();  	}  	else {  		switch (args [0]) {  		case "-extract":  			Utils.InstallUtils.ExtractAll ();  			this.Shutdown ();  			break;  		case "-install":  			Utils.InstallUtils.NGen ().WaitForExit ();  			this.Shutdown ();  			break;  		case "-extract-install":  			Utils.InstallUtils.Install (false);  			this.Shutdown ();  			break;  		case "-build":  			if (args.Length == 3 && File.Exists (args [1])) {  				ZomBBuilder.BuildZomBString (File.ReadAllText (args [1])' Path.GetFullPath (args [2]));  				this.Shutdown ();  				break;  			}  			else {  				System.Windows.Forms.MessageBox.Show ("Invalid CLI arguments. Valid arguments:\r\n -extract  Extract all embedded dll's\r\n -build infile outfile   Build the infile into an exe at outfile\r\n [fileName]  Run this Zaml file");  				break;  			}  		case "-buildfull":  			if (args.Length == 3 && File.Exists (args [1])) {  				ZomBBuilder.CopyDLLs (Path.GetDirectoryName (Path.GetFullPath (args [2])));  				ZomBBuilder.BuildZomBString (File.ReadAllText (args [1])' Path.GetFullPath (args [2])' true);  				this.Shutdown ();  				break;  			}  			else {  				System.Windows.Forms.MessageBox.Show ("Invalid CLI arguments. Valid arguments:\r\n -extract  Extract all embedded dll's\r\n -build infile outfile   Build the infile into an exe at outfile\r\n [fileName]  Run this Zaml file");  				break;  			}  		case "help":  		case "--help":  		case "-help":  		case "/help":  		case "/?":  		case "-h":  			this.ShutdownMode = System.Windows.ShutdownMode.OnExplicitShutdown;  			new ZomBWalkthrough.Form ().ShowDialog ();  			this.Shutdown ();  			break;  		default:  			System.Windows.Forms.MessageBox.Show ("Invalid CLI arguments. Valid arguments:\r\n -extract  Extract all embedded dll's\r\n -build infile outfile   Build the infile into an exe at outfile\r\n [fileName]  Run this Zaml file");  			new Designer ().Show ();  			break;  		}  	}  }  else  	#if !DEBUG  	                try                 { #endif  	new Designer ().Show ();  
Magic Number,System451.Communication.Dashboard.ViZ,App,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\App.xaml.cs,Application_Startup,The following statement contains a magic number: if (args.Length > 0) {  	if (File.Exists (args [0]))  		new Run (File.ReadAllText (args [0])).Show ();  	else if (args.Length > 1 && (args [0] == "-o" || args [0] == "-open") && File.Exists (args [1])) {  		var dsn = new Designer ();  		dsn.PreLoadFile (args [1]);  		dsn.Show ();  	}  	else {  		switch (args [0]) {  		case "-extract":  			Utils.InstallUtils.ExtractAll ();  			this.Shutdown ();  			break;  		case "-install":  			Utils.InstallUtils.NGen ().WaitForExit ();  			this.Shutdown ();  			break;  		case "-extract-install":  			Utils.InstallUtils.Install (false);  			this.Shutdown ();  			break;  		case "-build":  			if (args.Length == 3 && File.Exists (args [1])) {  				ZomBBuilder.BuildZomBString (File.ReadAllText (args [1])' Path.GetFullPath (args [2]));  				this.Shutdown ();  				break;  			}  			else {  				System.Windows.Forms.MessageBox.Show ("Invalid CLI arguments. Valid arguments:\r\n -extract  Extract all embedded dll's\r\n -build infile outfile   Build the infile into an exe at outfile\r\n [fileName]  Run this Zaml file");  				break;  			}  		case "-buildfull":  			if (args.Length == 3 && File.Exists (args [1])) {  				ZomBBuilder.CopyDLLs (Path.GetDirectoryName (Path.GetFullPath (args [2])));  				ZomBBuilder.BuildZomBString (File.ReadAllText (args [1])' Path.GetFullPath (args [2])' true);  				this.Shutdown ();  				break;  			}  			else {  				System.Windows.Forms.MessageBox.Show ("Invalid CLI arguments. Valid arguments:\r\n -extract  Extract all embedded dll's\r\n -build infile outfile   Build the infile into an exe at outfile\r\n [fileName]  Run this Zaml file");  				break;  			}  		case "help":  		case "--help":  		case "-help":  		case "/help":  		case "/?":  		case "-h":  			this.ShutdownMode = System.Windows.ShutdownMode.OnExplicitShutdown;  			new ZomBWalkthrough.Form ().ShowDialog ();  			this.Shutdown ();  			break;  		default:  			System.Windows.Forms.MessageBox.Show ("Invalid CLI arguments. Valid arguments:\r\n -extract  Extract all embedded dll's\r\n -build infile outfile   Build the infile into an exe at outfile\r\n [fileName]  Run this Zaml file");  			new Designer ().Show ();  			break;  		}  	}  }  else  	#if !DEBUG  	                try                 { #endif  	new Designer ().Show ();  
Magic Number,System451.Communication.Dashboard.ViZ,App,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\App.xaml.cs,Application_Startup,The following statement contains a magic number: if (args.Length > 0) {  	if (File.Exists (args [0]))  		new Run (File.ReadAllText (args [0])).Show ();  	else if (args.Length > 1 && (args [0] == "-o" || args [0] == "-open") && File.Exists (args [1])) {  		var dsn = new Designer ();  		dsn.PreLoadFile (args [1]);  		dsn.Show ();  	}  	else {  		switch (args [0]) {  		case "-extract":  			Utils.InstallUtils.ExtractAll ();  			this.Shutdown ();  			break;  		case "-install":  			Utils.InstallUtils.NGen ().WaitForExit ();  			this.Shutdown ();  			break;  		case "-extract-install":  			Utils.InstallUtils.Install (false);  			this.Shutdown ();  			break;  		case "-build":  			if (args.Length == 3 && File.Exists (args [1])) {  				ZomBBuilder.BuildZomBString (File.ReadAllText (args [1])' Path.GetFullPath (args [2]));  				this.Shutdown ();  				break;  			}  			else {  				System.Windows.Forms.MessageBox.Show ("Invalid CLI arguments. Valid arguments:\r\n -extract  Extract all embedded dll's\r\n -build infile outfile   Build the infile into an exe at outfile\r\n [fileName]  Run this Zaml file");  				break;  			}  		case "-buildfull":  			if (args.Length == 3 && File.Exists (args [1])) {  				ZomBBuilder.CopyDLLs (Path.GetDirectoryName (Path.GetFullPath (args [2])));  				ZomBBuilder.BuildZomBString (File.ReadAllText (args [1])' Path.GetFullPath (args [2])' true);  				this.Shutdown ();  				break;  			}  			else {  				System.Windows.Forms.MessageBox.Show ("Invalid CLI arguments. Valid arguments:\r\n -extract  Extract all embedded dll's\r\n -build infile outfile   Build the infile into an exe at outfile\r\n [fileName]  Run this Zaml file");  				break;  			}  		case "help":  		case "--help":  		case "-help":  		case "/help":  		case "/?":  		case "-h":  			this.ShutdownMode = System.Windows.ShutdownMode.OnExplicitShutdown;  			new ZomBWalkthrough.Form ().ShowDialog ();  			this.Shutdown ();  			break;  		default:  			System.Windows.Forms.MessageBox.Show ("Invalid CLI arguments. Valid arguments:\r\n -extract  Extract all embedded dll's\r\n -build infile outfile   Build the infile into an exe at outfile\r\n [fileName]  Run this Zaml file");  			new Designer ().Show ();  			break;  		}  	}  }  else  	#if !DEBUG  	                try                 { #endif  	new Designer ().Show ();  
Magic Number,System451.Communication.Dashboard.ViZ,App,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\App.xaml.cs,Application_Startup,The following statement contains a magic number: if (args.Length > 0) {  	if (File.Exists (args [0]))  		new Run (File.ReadAllText (args [0])).Show ();  	else if (args.Length > 1 && (args [0] == "-o" || args [0] == "-open") && File.Exists (args [1])) {  		var dsn = new Designer ();  		dsn.PreLoadFile (args [1]);  		dsn.Show ();  	}  	else {  		switch (args [0]) {  		case "-extract":  			Utils.InstallUtils.ExtractAll ();  			this.Shutdown ();  			break;  		case "-install":  			Utils.InstallUtils.NGen ().WaitForExit ();  			this.Shutdown ();  			break;  		case "-extract-install":  			Utils.InstallUtils.Install (false);  			this.Shutdown ();  			break;  		case "-build":  			if (args.Length == 3 && File.Exists (args [1])) {  				ZomBBuilder.BuildZomBString (File.ReadAllText (args [1])' Path.GetFullPath (args [2]));  				this.Shutdown ();  				break;  			}  			else {  				System.Windows.Forms.MessageBox.Show ("Invalid CLI arguments. Valid arguments:\r\n -extract  Extract all embedded dll's\r\n -build infile outfile   Build the infile into an exe at outfile\r\n [fileName]  Run this Zaml file");  				break;  			}  		case "-buildfull":  			if (args.Length == 3 && File.Exists (args [1])) {  				ZomBBuilder.CopyDLLs (Path.GetDirectoryName (Path.GetFullPath (args [2])));  				ZomBBuilder.BuildZomBString (File.ReadAllText (args [1])' Path.GetFullPath (args [2])' true);  				this.Shutdown ();  				break;  			}  			else {  				System.Windows.Forms.MessageBox.Show ("Invalid CLI arguments. Valid arguments:\r\n -extract  Extract all embedded dll's\r\n -build infile outfile   Build the infile into an exe at outfile\r\n [fileName]  Run this Zaml file");  				break;  			}  		case "help":  		case "--help":  		case "-help":  		case "/help":  		case "/?":  		case "-h":  			this.ShutdownMode = System.Windows.ShutdownMode.OnExplicitShutdown;  			new ZomBWalkthrough.Form ().ShowDialog ();  			this.Shutdown ();  			break;  		default:  			System.Windows.Forms.MessageBox.Show ("Invalid CLI arguments. Valid arguments:\r\n -extract  Extract all embedded dll's\r\n -build infile outfile   Build the infile into an exe at outfile\r\n [fileName]  Run this Zaml file");  			new Designer ().Show ();  			break;  		}  	}  }  else  	#if !DEBUG  	                try                 { #endif  	new Designer ().Show ();  
Magic Number,System451.Communication.Dashboard.ViZ,App,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\App.xaml.cs,Application_Startup,The following statement contains a magic number: if (args.Length > 0) {  	if (File.Exists (args [0]))  		new Run (File.ReadAllText (args [0])).Show ();  	else if (args.Length > 1 && (args [0] == "-o" || args [0] == "-open") && File.Exists (args [1])) {  		var dsn = new Designer ();  		dsn.PreLoadFile (args [1]);  		dsn.Show ();  	}  	else {  		switch (args [0]) {  		case "-extract":  			Utils.InstallUtils.ExtractAll ();  			this.Shutdown ();  			break;  		case "-install":  			Utils.InstallUtils.NGen ().WaitForExit ();  			this.Shutdown ();  			break;  		case "-extract-install":  			Utils.InstallUtils.Install (false);  			this.Shutdown ();  			break;  		case "-build":  			if (args.Length == 3 && File.Exists (args [1])) {  				ZomBBuilder.BuildZomBString (File.ReadAllText (args [1])' Path.GetFullPath (args [2]));  				this.Shutdown ();  				break;  			}  			else {  				System.Windows.Forms.MessageBox.Show ("Invalid CLI arguments. Valid arguments:\r\n -extract  Extract all embedded dll's\r\n -build infile outfile   Build the infile into an exe at outfile\r\n [fileName]  Run this Zaml file");  				break;  			}  		case "-buildfull":  			if (args.Length == 3 && File.Exists (args [1])) {  				ZomBBuilder.CopyDLLs (Path.GetDirectoryName (Path.GetFullPath (args [2])));  				ZomBBuilder.BuildZomBString (File.ReadAllText (args [1])' Path.GetFullPath (args [2])' true);  				this.Shutdown ();  				break;  			}  			else {  				System.Windows.Forms.MessageBox.Show ("Invalid CLI arguments. Valid arguments:\r\n -extract  Extract all embedded dll's\r\n -build infile outfile   Build the infile into an exe at outfile\r\n [fileName]  Run this Zaml file");  				break;  			}  		case "help":  		case "--help":  		case "-help":  		case "/help":  		case "/?":  		case "-h":  			this.ShutdownMode = System.Windows.ShutdownMode.OnExplicitShutdown;  			new ZomBWalkthrough.Form ().ShowDialog ();  			this.Shutdown ();  			break;  		default:  			System.Windows.Forms.MessageBox.Show ("Invalid CLI arguments. Valid arguments:\r\n -extract  Extract all embedded dll's\r\n -build infile outfile   Build the infile into an exe at outfile\r\n [fileName]  Run this Zaml file");  			new Designer ().Show ();  			break;  		}  	}  }  else  	#if !DEBUG  	                try                 { #endif  	new Designer ().Show ();  
Magic Number,System451.Communication.Dashboard.ViZ,App,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\App.xaml.cs,Application_Startup,The following statement contains a magic number: if (File.Exists (args [0]))  	new Run (File.ReadAllText (args [0])).Show ();  else if (args.Length > 1 && (args [0] == "-o" || args [0] == "-open") && File.Exists (args [1])) {  	var dsn = new Designer ();  	dsn.PreLoadFile (args [1]);  	dsn.Show ();  }  else {  	switch (args [0]) {  	case "-extract":  		Utils.InstallUtils.ExtractAll ();  		this.Shutdown ();  		break;  	case "-install":  		Utils.InstallUtils.NGen ().WaitForExit ();  		this.Shutdown ();  		break;  	case "-extract-install":  		Utils.InstallUtils.Install (false);  		this.Shutdown ();  		break;  	case "-build":  		if (args.Length == 3 && File.Exists (args [1])) {  			ZomBBuilder.BuildZomBString (File.ReadAllText (args [1])' Path.GetFullPath (args [2]));  			this.Shutdown ();  			break;  		}  		else {  			System.Windows.Forms.MessageBox.Show ("Invalid CLI arguments. Valid arguments:\r\n -extract  Extract all embedded dll's\r\n -build infile outfile   Build the infile into an exe at outfile\r\n [fileName]  Run this Zaml file");  			break;  		}  	case "-buildfull":  		if (args.Length == 3 && File.Exists (args [1])) {  			ZomBBuilder.CopyDLLs (Path.GetDirectoryName (Path.GetFullPath (args [2])));  			ZomBBuilder.BuildZomBString (File.ReadAllText (args [1])' Path.GetFullPath (args [2])' true);  			this.Shutdown ();  			break;  		}  		else {  			System.Windows.Forms.MessageBox.Show ("Invalid CLI arguments. Valid arguments:\r\n -extract  Extract all embedded dll's\r\n -build infile outfile   Build the infile into an exe at outfile\r\n [fileName]  Run this Zaml file");  			break;  		}  	case "help":  	case "--help":  	case "-help":  	case "/help":  	case "/?":  	case "-h":  		this.ShutdownMode = System.Windows.ShutdownMode.OnExplicitShutdown;  		new ZomBWalkthrough.Form ().ShowDialog ();  		this.Shutdown ();  		break;  	default:  		System.Windows.Forms.MessageBox.Show ("Invalid CLI arguments. Valid arguments:\r\n -extract  Extract all embedded dll's\r\n -build infile outfile   Build the infile into an exe at outfile\r\n [fileName]  Run this Zaml file");  		new Designer ().Show ();  		break;  	}  }  
Magic Number,System451.Communication.Dashboard.ViZ,App,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\App.xaml.cs,Application_Startup,The following statement contains a magic number: if (File.Exists (args [0]))  	new Run (File.ReadAllText (args [0])).Show ();  else if (args.Length > 1 && (args [0] == "-o" || args [0] == "-open") && File.Exists (args [1])) {  	var dsn = new Designer ();  	dsn.PreLoadFile (args [1]);  	dsn.Show ();  }  else {  	switch (args [0]) {  	case "-extract":  		Utils.InstallUtils.ExtractAll ();  		this.Shutdown ();  		break;  	case "-install":  		Utils.InstallUtils.NGen ().WaitForExit ();  		this.Shutdown ();  		break;  	case "-extract-install":  		Utils.InstallUtils.Install (false);  		this.Shutdown ();  		break;  	case "-build":  		if (args.Length == 3 && File.Exists (args [1])) {  			ZomBBuilder.BuildZomBString (File.ReadAllText (args [1])' Path.GetFullPath (args [2]));  			this.Shutdown ();  			break;  		}  		else {  			System.Windows.Forms.MessageBox.Show ("Invalid CLI arguments. Valid arguments:\r\n -extract  Extract all embedded dll's\r\n -build infile outfile   Build the infile into an exe at outfile\r\n [fileName]  Run this Zaml file");  			break;  		}  	case "-buildfull":  		if (args.Length == 3 && File.Exists (args [1])) {  			ZomBBuilder.CopyDLLs (Path.GetDirectoryName (Path.GetFullPath (args [2])));  			ZomBBuilder.BuildZomBString (File.ReadAllText (args [1])' Path.GetFullPath (args [2])' true);  			this.Shutdown ();  			break;  		}  		else {  			System.Windows.Forms.MessageBox.Show ("Invalid CLI arguments. Valid arguments:\r\n -extract  Extract all embedded dll's\r\n -build infile outfile   Build the infile into an exe at outfile\r\n [fileName]  Run this Zaml file");  			break;  		}  	case "help":  	case "--help":  	case "-help":  	case "/help":  	case "/?":  	case "-h":  		this.ShutdownMode = System.Windows.ShutdownMode.OnExplicitShutdown;  		new ZomBWalkthrough.Form ().ShowDialog ();  		this.Shutdown ();  		break;  	default:  		System.Windows.Forms.MessageBox.Show ("Invalid CLI arguments. Valid arguments:\r\n -extract  Extract all embedded dll's\r\n -build infile outfile   Build the infile into an exe at outfile\r\n [fileName]  Run this Zaml file");  		new Designer ().Show ();  		break;  	}  }  
Magic Number,System451.Communication.Dashboard.ViZ,App,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\App.xaml.cs,Application_Startup,The following statement contains a magic number: if (File.Exists (args [0]))  	new Run (File.ReadAllText (args [0])).Show ();  else if (args.Length > 1 && (args [0] == "-o" || args [0] == "-open") && File.Exists (args [1])) {  	var dsn = new Designer ();  	dsn.PreLoadFile (args [1]);  	dsn.Show ();  }  else {  	switch (args [0]) {  	case "-extract":  		Utils.InstallUtils.ExtractAll ();  		this.Shutdown ();  		break;  	case "-install":  		Utils.InstallUtils.NGen ().WaitForExit ();  		this.Shutdown ();  		break;  	case "-extract-install":  		Utils.InstallUtils.Install (false);  		this.Shutdown ();  		break;  	case "-build":  		if (args.Length == 3 && File.Exists (args [1])) {  			ZomBBuilder.BuildZomBString (File.ReadAllText (args [1])' Path.GetFullPath (args [2]));  			this.Shutdown ();  			break;  		}  		else {  			System.Windows.Forms.MessageBox.Show ("Invalid CLI arguments. Valid arguments:\r\n -extract  Extract all embedded dll's\r\n -build infile outfile   Build the infile into an exe at outfile\r\n [fileName]  Run this Zaml file");  			break;  		}  	case "-buildfull":  		if (args.Length == 3 && File.Exists (args [1])) {  			ZomBBuilder.CopyDLLs (Path.GetDirectoryName (Path.GetFullPath (args [2])));  			ZomBBuilder.BuildZomBString (File.ReadAllText (args [1])' Path.GetFullPath (args [2])' true);  			this.Shutdown ();  			break;  		}  		else {  			System.Windows.Forms.MessageBox.Show ("Invalid CLI arguments. Valid arguments:\r\n -extract  Extract all embedded dll's\r\n -build infile outfile   Build the infile into an exe at outfile\r\n [fileName]  Run this Zaml file");  			break;  		}  	case "help":  	case "--help":  	case "-help":  	case "/help":  	case "/?":  	case "-h":  		this.ShutdownMode = System.Windows.ShutdownMode.OnExplicitShutdown;  		new ZomBWalkthrough.Form ().ShowDialog ();  		this.Shutdown ();  		break;  	default:  		System.Windows.Forms.MessageBox.Show ("Invalid CLI arguments. Valid arguments:\r\n -extract  Extract all embedded dll's\r\n -build infile outfile   Build the infile into an exe at outfile\r\n [fileName]  Run this Zaml file");  		new Designer ().Show ();  		break;  	}  }  
Magic Number,System451.Communication.Dashboard.ViZ,App,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\App.xaml.cs,Application_Startup,The following statement contains a magic number: if (File.Exists (args [0]))  	new Run (File.ReadAllText (args [0])).Show ();  else if (args.Length > 1 && (args [0] == "-o" || args [0] == "-open") && File.Exists (args [1])) {  	var dsn = new Designer ();  	dsn.PreLoadFile (args [1]);  	dsn.Show ();  }  else {  	switch (args [0]) {  	case "-extract":  		Utils.InstallUtils.ExtractAll ();  		this.Shutdown ();  		break;  	case "-install":  		Utils.InstallUtils.NGen ().WaitForExit ();  		this.Shutdown ();  		break;  	case "-extract-install":  		Utils.InstallUtils.Install (false);  		this.Shutdown ();  		break;  	case "-build":  		if (args.Length == 3 && File.Exists (args [1])) {  			ZomBBuilder.BuildZomBString (File.ReadAllText (args [1])' Path.GetFullPath (args [2]));  			this.Shutdown ();  			break;  		}  		else {  			System.Windows.Forms.MessageBox.Show ("Invalid CLI arguments. Valid arguments:\r\n -extract  Extract all embedded dll's\r\n -build infile outfile   Build the infile into an exe at outfile\r\n [fileName]  Run this Zaml file");  			break;  		}  	case "-buildfull":  		if (args.Length == 3 && File.Exists (args [1])) {  			ZomBBuilder.CopyDLLs (Path.GetDirectoryName (Path.GetFullPath (args [2])));  			ZomBBuilder.BuildZomBString (File.ReadAllText (args [1])' Path.GetFullPath (args [2])' true);  			this.Shutdown ();  			break;  		}  		else {  			System.Windows.Forms.MessageBox.Show ("Invalid CLI arguments. Valid arguments:\r\n -extract  Extract all embedded dll's\r\n -build infile outfile   Build the infile into an exe at outfile\r\n [fileName]  Run this Zaml file");  			break;  		}  	case "help":  	case "--help":  	case "-help":  	case "/help":  	case "/?":  	case "-h":  		this.ShutdownMode = System.Windows.ShutdownMode.OnExplicitShutdown;  		new ZomBWalkthrough.Form ().ShowDialog ();  		this.Shutdown ();  		break;  	default:  		System.Windows.Forms.MessageBox.Show ("Invalid CLI arguments. Valid arguments:\r\n -extract  Extract all embedded dll's\r\n -build infile outfile   Build the infile into an exe at outfile\r\n [fileName]  Run this Zaml file");  		new Designer ().Show ();  		break;  	}  }  
Magic Number,System451.Communication.Dashboard.ViZ,App,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\App.xaml.cs,Application_Startup,The following statement contains a magic number: if (File.Exists (args [0]))  	new Run (File.ReadAllText (args [0])).Show ();  else if (args.Length > 1 && (args [0] == "-o" || args [0] == "-open") && File.Exists (args [1])) {  	var dsn = new Designer ();  	dsn.PreLoadFile (args [1]);  	dsn.Show ();  }  else {  	switch (args [0]) {  	case "-extract":  		Utils.InstallUtils.ExtractAll ();  		this.Shutdown ();  		break;  	case "-install":  		Utils.InstallUtils.NGen ().WaitForExit ();  		this.Shutdown ();  		break;  	case "-extract-install":  		Utils.InstallUtils.Install (false);  		this.Shutdown ();  		break;  	case "-build":  		if (args.Length == 3 && File.Exists (args [1])) {  			ZomBBuilder.BuildZomBString (File.ReadAllText (args [1])' Path.GetFullPath (args [2]));  			this.Shutdown ();  			break;  		}  		else {  			System.Windows.Forms.MessageBox.Show ("Invalid CLI arguments. Valid arguments:\r\n -extract  Extract all embedded dll's\r\n -build infile outfile   Build the infile into an exe at outfile\r\n [fileName]  Run this Zaml file");  			break;  		}  	case "-buildfull":  		if (args.Length == 3 && File.Exists (args [1])) {  			ZomBBuilder.CopyDLLs (Path.GetDirectoryName (Path.GetFullPath (args [2])));  			ZomBBuilder.BuildZomBString (File.ReadAllText (args [1])' Path.GetFullPath (args [2])' true);  			this.Shutdown ();  			break;  		}  		else {  			System.Windows.Forms.MessageBox.Show ("Invalid CLI arguments. Valid arguments:\r\n -extract  Extract all embedded dll's\r\n -build infile outfile   Build the infile into an exe at outfile\r\n [fileName]  Run this Zaml file");  			break;  		}  	case "help":  	case "--help":  	case "-help":  	case "/help":  	case "/?":  	case "-h":  		this.ShutdownMode = System.Windows.ShutdownMode.OnExplicitShutdown;  		new ZomBWalkthrough.Form ().ShowDialog ();  		this.Shutdown ();  		break;  	default:  		System.Windows.Forms.MessageBox.Show ("Invalid CLI arguments. Valid arguments:\r\n -extract  Extract all embedded dll's\r\n -build infile outfile   Build the infile into an exe at outfile\r\n [fileName]  Run this Zaml file");  		new Designer ().Show ();  		break;  	}  }  
Magic Number,System451.Communication.Dashboard.ViZ,App,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\App.xaml.cs,Application_Startup,The following statement contains a magic number: if (args.Length > 1 && (args [0] == "-o" || args [0] == "-open") && File.Exists (args [1])) {  	var dsn = new Designer ();  	dsn.PreLoadFile (args [1]);  	dsn.Show ();  }  else {  	switch (args [0]) {  	case "-extract":  		Utils.InstallUtils.ExtractAll ();  		this.Shutdown ();  		break;  	case "-install":  		Utils.InstallUtils.NGen ().WaitForExit ();  		this.Shutdown ();  		break;  	case "-extract-install":  		Utils.InstallUtils.Install (false);  		this.Shutdown ();  		break;  	case "-build":  		if (args.Length == 3 && File.Exists (args [1])) {  			ZomBBuilder.BuildZomBString (File.ReadAllText (args [1])' Path.GetFullPath (args [2]));  			this.Shutdown ();  			break;  		}  		else {  			System.Windows.Forms.MessageBox.Show ("Invalid CLI arguments. Valid arguments:\r\n -extract  Extract all embedded dll's\r\n -build infile outfile   Build the infile into an exe at outfile\r\n [fileName]  Run this Zaml file");  			break;  		}  	case "-buildfull":  		if (args.Length == 3 && File.Exists (args [1])) {  			ZomBBuilder.CopyDLLs (Path.GetDirectoryName (Path.GetFullPath (args [2])));  			ZomBBuilder.BuildZomBString (File.ReadAllText (args [1])' Path.GetFullPath (args [2])' true);  			this.Shutdown ();  			break;  		}  		else {  			System.Windows.Forms.MessageBox.Show ("Invalid CLI arguments. Valid arguments:\r\n -extract  Extract all embedded dll's\r\n -build infile outfile   Build the infile into an exe at outfile\r\n [fileName]  Run this Zaml file");  			break;  		}  	case "help":  	case "--help":  	case "-help":  	case "/help":  	case "/?":  	case "-h":  		this.ShutdownMode = System.Windows.ShutdownMode.OnExplicitShutdown;  		new ZomBWalkthrough.Form ().ShowDialog ();  		this.Shutdown ();  		break;  	default:  		System.Windows.Forms.MessageBox.Show ("Invalid CLI arguments. Valid arguments:\r\n -extract  Extract all embedded dll's\r\n -build infile outfile   Build the infile into an exe at outfile\r\n [fileName]  Run this Zaml file");  		new Designer ().Show ();  		break;  	}  }  
Magic Number,System451.Communication.Dashboard.ViZ,App,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\App.xaml.cs,Application_Startup,The following statement contains a magic number: if (args.Length > 1 && (args [0] == "-o" || args [0] == "-open") && File.Exists (args [1])) {  	var dsn = new Designer ();  	dsn.PreLoadFile (args [1]);  	dsn.Show ();  }  else {  	switch (args [0]) {  	case "-extract":  		Utils.InstallUtils.ExtractAll ();  		this.Shutdown ();  		break;  	case "-install":  		Utils.InstallUtils.NGen ().WaitForExit ();  		this.Shutdown ();  		break;  	case "-extract-install":  		Utils.InstallUtils.Install (false);  		this.Shutdown ();  		break;  	case "-build":  		if (args.Length == 3 && File.Exists (args [1])) {  			ZomBBuilder.BuildZomBString (File.ReadAllText (args [1])' Path.GetFullPath (args [2]));  			this.Shutdown ();  			break;  		}  		else {  			System.Windows.Forms.MessageBox.Show ("Invalid CLI arguments. Valid arguments:\r\n -extract  Extract all embedded dll's\r\n -build infile outfile   Build the infile into an exe at outfile\r\n [fileName]  Run this Zaml file");  			break;  		}  	case "-buildfull":  		if (args.Length == 3 && File.Exists (args [1])) {  			ZomBBuilder.CopyDLLs (Path.GetDirectoryName (Path.GetFullPath (args [2])));  			ZomBBuilder.BuildZomBString (File.ReadAllText (args [1])' Path.GetFullPath (args [2])' true);  			this.Shutdown ();  			break;  		}  		else {  			System.Windows.Forms.MessageBox.Show ("Invalid CLI arguments. Valid arguments:\r\n -extract  Extract all embedded dll's\r\n -build infile outfile   Build the infile into an exe at outfile\r\n [fileName]  Run this Zaml file");  			break;  		}  	case "help":  	case "--help":  	case "-help":  	case "/help":  	case "/?":  	case "-h":  		this.ShutdownMode = System.Windows.ShutdownMode.OnExplicitShutdown;  		new ZomBWalkthrough.Form ().ShowDialog ();  		this.Shutdown ();  		break;  	default:  		System.Windows.Forms.MessageBox.Show ("Invalid CLI arguments. Valid arguments:\r\n -extract  Extract all embedded dll's\r\n -build infile outfile   Build the infile into an exe at outfile\r\n [fileName]  Run this Zaml file");  		new Designer ().Show ();  		break;  	}  }  
Magic Number,System451.Communication.Dashboard.ViZ,App,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\App.xaml.cs,Application_Startup,The following statement contains a magic number: if (args.Length > 1 && (args [0] == "-o" || args [0] == "-open") && File.Exists (args [1])) {  	var dsn = new Designer ();  	dsn.PreLoadFile (args [1]);  	dsn.Show ();  }  else {  	switch (args [0]) {  	case "-extract":  		Utils.InstallUtils.ExtractAll ();  		this.Shutdown ();  		break;  	case "-install":  		Utils.InstallUtils.NGen ().WaitForExit ();  		this.Shutdown ();  		break;  	case "-extract-install":  		Utils.InstallUtils.Install (false);  		this.Shutdown ();  		break;  	case "-build":  		if (args.Length == 3 && File.Exists (args [1])) {  			ZomBBuilder.BuildZomBString (File.ReadAllText (args [1])' Path.GetFullPath (args [2]));  			this.Shutdown ();  			break;  		}  		else {  			System.Windows.Forms.MessageBox.Show ("Invalid CLI arguments. Valid arguments:\r\n -extract  Extract all embedded dll's\r\n -build infile outfile   Build the infile into an exe at outfile\r\n [fileName]  Run this Zaml file");  			break;  		}  	case "-buildfull":  		if (args.Length == 3 && File.Exists (args [1])) {  			ZomBBuilder.CopyDLLs (Path.GetDirectoryName (Path.GetFullPath (args [2])));  			ZomBBuilder.BuildZomBString (File.ReadAllText (args [1])' Path.GetFullPath (args [2])' true);  			this.Shutdown ();  			break;  		}  		else {  			System.Windows.Forms.MessageBox.Show ("Invalid CLI arguments. Valid arguments:\r\n -extract  Extract all embedded dll's\r\n -build infile outfile   Build the infile into an exe at outfile\r\n [fileName]  Run this Zaml file");  			break;  		}  	case "help":  	case "--help":  	case "-help":  	case "/help":  	case "/?":  	case "-h":  		this.ShutdownMode = System.Windows.ShutdownMode.OnExplicitShutdown;  		new ZomBWalkthrough.Form ().ShowDialog ();  		this.Shutdown ();  		break;  	default:  		System.Windows.Forms.MessageBox.Show ("Invalid CLI arguments. Valid arguments:\r\n -extract  Extract all embedded dll's\r\n -build infile outfile   Build the infile into an exe at outfile\r\n [fileName]  Run this Zaml file");  		new Designer ().Show ();  		break;  	}  }  
Magic Number,System451.Communication.Dashboard.ViZ,App,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\App.xaml.cs,Application_Startup,The following statement contains a magic number: if (args.Length > 1 && (args [0] == "-o" || args [0] == "-open") && File.Exists (args [1])) {  	var dsn = new Designer ();  	dsn.PreLoadFile (args [1]);  	dsn.Show ();  }  else {  	switch (args [0]) {  	case "-extract":  		Utils.InstallUtils.ExtractAll ();  		this.Shutdown ();  		break;  	case "-install":  		Utils.InstallUtils.NGen ().WaitForExit ();  		this.Shutdown ();  		break;  	case "-extract-install":  		Utils.InstallUtils.Install (false);  		this.Shutdown ();  		break;  	case "-build":  		if (args.Length == 3 && File.Exists (args [1])) {  			ZomBBuilder.BuildZomBString (File.ReadAllText (args [1])' Path.GetFullPath (args [2]));  			this.Shutdown ();  			break;  		}  		else {  			System.Windows.Forms.MessageBox.Show ("Invalid CLI arguments. Valid arguments:\r\n -extract  Extract all embedded dll's\r\n -build infile outfile   Build the infile into an exe at outfile\r\n [fileName]  Run this Zaml file");  			break;  		}  	case "-buildfull":  		if (args.Length == 3 && File.Exists (args [1])) {  			ZomBBuilder.CopyDLLs (Path.GetDirectoryName (Path.GetFullPath (args [2])));  			ZomBBuilder.BuildZomBString (File.ReadAllText (args [1])' Path.GetFullPath (args [2])' true);  			this.Shutdown ();  			break;  		}  		else {  			System.Windows.Forms.MessageBox.Show ("Invalid CLI arguments. Valid arguments:\r\n -extract  Extract all embedded dll's\r\n -build infile outfile   Build the infile into an exe at outfile\r\n [fileName]  Run this Zaml file");  			break;  		}  	case "help":  	case "--help":  	case "-help":  	case "/help":  	case "/?":  	case "-h":  		this.ShutdownMode = System.Windows.ShutdownMode.OnExplicitShutdown;  		new ZomBWalkthrough.Form ().ShowDialog ();  		this.Shutdown ();  		break;  	default:  		System.Windows.Forms.MessageBox.Show ("Invalid CLI arguments. Valid arguments:\r\n -extract  Extract all embedded dll's\r\n -build infile outfile   Build the infile into an exe at outfile\r\n [fileName]  Run this Zaml file");  		new Designer ().Show ();  		break;  	}  }  
Magic Number,System451.Communication.Dashboard.ViZ,App,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\App.xaml.cs,Application_Startup,The following statement contains a magic number: if (args.Length > 1 && (args [0] == "-o" || args [0] == "-open") && File.Exists (args [1])) {  	var dsn = new Designer ();  	dsn.PreLoadFile (args [1]);  	dsn.Show ();  }  else {  	switch (args [0]) {  	case "-extract":  		Utils.InstallUtils.ExtractAll ();  		this.Shutdown ();  		break;  	case "-install":  		Utils.InstallUtils.NGen ().WaitForExit ();  		this.Shutdown ();  		break;  	case "-extract-install":  		Utils.InstallUtils.Install (false);  		this.Shutdown ();  		break;  	case "-build":  		if (args.Length == 3 && File.Exists (args [1])) {  			ZomBBuilder.BuildZomBString (File.ReadAllText (args [1])' Path.GetFullPath (args [2]));  			this.Shutdown ();  			break;  		}  		else {  			System.Windows.Forms.MessageBox.Show ("Invalid CLI arguments. Valid arguments:\r\n -extract  Extract all embedded dll's\r\n -build infile outfile   Build the infile into an exe at outfile\r\n [fileName]  Run this Zaml file");  			break;  		}  	case "-buildfull":  		if (args.Length == 3 && File.Exists (args [1])) {  			ZomBBuilder.CopyDLLs (Path.GetDirectoryName (Path.GetFullPath (args [2])));  			ZomBBuilder.BuildZomBString (File.ReadAllText (args [1])' Path.GetFullPath (args [2])' true);  			this.Shutdown ();  			break;  		}  		else {  			System.Windows.Forms.MessageBox.Show ("Invalid CLI arguments. Valid arguments:\r\n -extract  Extract all embedded dll's\r\n -build infile outfile   Build the infile into an exe at outfile\r\n [fileName]  Run this Zaml file");  			break;  		}  	case "help":  	case "--help":  	case "-help":  	case "/help":  	case "/?":  	case "-h":  		this.ShutdownMode = System.Windows.ShutdownMode.OnExplicitShutdown;  		new ZomBWalkthrough.Form ().ShowDialog ();  		this.Shutdown ();  		break;  	default:  		System.Windows.Forms.MessageBox.Show ("Invalid CLI arguments. Valid arguments:\r\n -extract  Extract all embedded dll's\r\n -build infile outfile   Build the infile into an exe at outfile\r\n [fileName]  Run this Zaml file");  		new Designer ().Show ();  		break;  	}  }  
Magic Number,System451.Communication.Dashboard.ViZ,App,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\App.xaml.cs,Application_Startup,The following statement contains a magic number: switch (args [0]) {  case "-extract":  	Utils.InstallUtils.ExtractAll ();  	this.Shutdown ();  	break;  case "-install":  	Utils.InstallUtils.NGen ().WaitForExit ();  	this.Shutdown ();  	break;  case "-extract-install":  	Utils.InstallUtils.Install (false);  	this.Shutdown ();  	break;  case "-build":  	if (args.Length == 3 && File.Exists (args [1])) {  		ZomBBuilder.BuildZomBString (File.ReadAllText (args [1])' Path.GetFullPath (args [2]));  		this.Shutdown ();  		break;  	}  	else {  		System.Windows.Forms.MessageBox.Show ("Invalid CLI arguments. Valid arguments:\r\n -extract  Extract all embedded dll's\r\n -build infile outfile   Build the infile into an exe at outfile\r\n [fileName]  Run this Zaml file");  		break;  	}  case "-buildfull":  	if (args.Length == 3 && File.Exists (args [1])) {  		ZomBBuilder.CopyDLLs (Path.GetDirectoryName (Path.GetFullPath (args [2])));  		ZomBBuilder.BuildZomBString (File.ReadAllText (args [1])' Path.GetFullPath (args [2])' true);  		this.Shutdown ();  		break;  	}  	else {  		System.Windows.Forms.MessageBox.Show ("Invalid CLI arguments. Valid arguments:\r\n -extract  Extract all embedded dll's\r\n -build infile outfile   Build the infile into an exe at outfile\r\n [fileName]  Run this Zaml file");  		break;  	}  case "help":  case "--help":  case "-help":  case "/help":  case "/?":  case "-h":  	this.ShutdownMode = System.Windows.ShutdownMode.OnExplicitShutdown;  	new ZomBWalkthrough.Form ().ShowDialog ();  	this.Shutdown ();  	break;  default:  	System.Windows.Forms.MessageBox.Show ("Invalid CLI arguments. Valid arguments:\r\n -extract  Extract all embedded dll's\r\n -build infile outfile   Build the infile into an exe at outfile\r\n [fileName]  Run this Zaml file");  	new Designer ().Show ();  	break;  }  
Magic Number,System451.Communication.Dashboard.ViZ,App,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\App.xaml.cs,Application_Startup,The following statement contains a magic number: switch (args [0]) {  case "-extract":  	Utils.InstallUtils.ExtractAll ();  	this.Shutdown ();  	break;  case "-install":  	Utils.InstallUtils.NGen ().WaitForExit ();  	this.Shutdown ();  	break;  case "-extract-install":  	Utils.InstallUtils.Install (false);  	this.Shutdown ();  	break;  case "-build":  	if (args.Length == 3 && File.Exists (args [1])) {  		ZomBBuilder.BuildZomBString (File.ReadAllText (args [1])' Path.GetFullPath (args [2]));  		this.Shutdown ();  		break;  	}  	else {  		System.Windows.Forms.MessageBox.Show ("Invalid CLI arguments. Valid arguments:\r\n -extract  Extract all embedded dll's\r\n -build infile outfile   Build the infile into an exe at outfile\r\n [fileName]  Run this Zaml file");  		break;  	}  case "-buildfull":  	if (args.Length == 3 && File.Exists (args [1])) {  		ZomBBuilder.CopyDLLs (Path.GetDirectoryName (Path.GetFullPath (args [2])));  		ZomBBuilder.BuildZomBString (File.ReadAllText (args [1])' Path.GetFullPath (args [2])' true);  		this.Shutdown ();  		break;  	}  	else {  		System.Windows.Forms.MessageBox.Show ("Invalid CLI arguments. Valid arguments:\r\n -extract  Extract all embedded dll's\r\n -build infile outfile   Build the infile into an exe at outfile\r\n [fileName]  Run this Zaml file");  		break;  	}  case "help":  case "--help":  case "-help":  case "/help":  case "/?":  case "-h":  	this.ShutdownMode = System.Windows.ShutdownMode.OnExplicitShutdown;  	new ZomBWalkthrough.Form ().ShowDialog ();  	this.Shutdown ();  	break;  default:  	System.Windows.Forms.MessageBox.Show ("Invalid CLI arguments. Valid arguments:\r\n -extract  Extract all embedded dll's\r\n -build infile outfile   Build the infile into an exe at outfile\r\n [fileName]  Run this Zaml file");  	new Designer ().Show ();  	break;  }  
Magic Number,System451.Communication.Dashboard.ViZ,App,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\App.xaml.cs,Application_Startup,The following statement contains a magic number: switch (args [0]) {  case "-extract":  	Utils.InstallUtils.ExtractAll ();  	this.Shutdown ();  	break;  case "-install":  	Utils.InstallUtils.NGen ().WaitForExit ();  	this.Shutdown ();  	break;  case "-extract-install":  	Utils.InstallUtils.Install (false);  	this.Shutdown ();  	break;  case "-build":  	if (args.Length == 3 && File.Exists (args [1])) {  		ZomBBuilder.BuildZomBString (File.ReadAllText (args [1])' Path.GetFullPath (args [2]));  		this.Shutdown ();  		break;  	}  	else {  		System.Windows.Forms.MessageBox.Show ("Invalid CLI arguments. Valid arguments:\r\n -extract  Extract all embedded dll's\r\n -build infile outfile   Build the infile into an exe at outfile\r\n [fileName]  Run this Zaml file");  		break;  	}  case "-buildfull":  	if (args.Length == 3 && File.Exists (args [1])) {  		ZomBBuilder.CopyDLLs (Path.GetDirectoryName (Path.GetFullPath (args [2])));  		ZomBBuilder.BuildZomBString (File.ReadAllText (args [1])' Path.GetFullPath (args [2])' true);  		this.Shutdown ();  		break;  	}  	else {  		System.Windows.Forms.MessageBox.Show ("Invalid CLI arguments. Valid arguments:\r\n -extract  Extract all embedded dll's\r\n -build infile outfile   Build the infile into an exe at outfile\r\n [fileName]  Run this Zaml file");  		break;  	}  case "help":  case "--help":  case "-help":  case "/help":  case "/?":  case "-h":  	this.ShutdownMode = System.Windows.ShutdownMode.OnExplicitShutdown;  	new ZomBWalkthrough.Form ().ShowDialog ();  	this.Shutdown ();  	break;  default:  	System.Windows.Forms.MessageBox.Show ("Invalid CLI arguments. Valid arguments:\r\n -extract  Extract all embedded dll's\r\n -build infile outfile   Build the infile into an exe at outfile\r\n [fileName]  Run this Zaml file");  	new Designer ().Show ();  	break;  }  
Magic Number,System451.Communication.Dashboard.ViZ,App,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\App.xaml.cs,Application_Startup,The following statement contains a magic number: switch (args [0]) {  case "-extract":  	Utils.InstallUtils.ExtractAll ();  	this.Shutdown ();  	break;  case "-install":  	Utils.InstallUtils.NGen ().WaitForExit ();  	this.Shutdown ();  	break;  case "-extract-install":  	Utils.InstallUtils.Install (false);  	this.Shutdown ();  	break;  case "-build":  	if (args.Length == 3 && File.Exists (args [1])) {  		ZomBBuilder.BuildZomBString (File.ReadAllText (args [1])' Path.GetFullPath (args [2]));  		this.Shutdown ();  		break;  	}  	else {  		System.Windows.Forms.MessageBox.Show ("Invalid CLI arguments. Valid arguments:\r\n -extract  Extract all embedded dll's\r\n -build infile outfile   Build the infile into an exe at outfile\r\n [fileName]  Run this Zaml file");  		break;  	}  case "-buildfull":  	if (args.Length == 3 && File.Exists (args [1])) {  		ZomBBuilder.CopyDLLs (Path.GetDirectoryName (Path.GetFullPath (args [2])));  		ZomBBuilder.BuildZomBString (File.ReadAllText (args [1])' Path.GetFullPath (args [2])' true);  		this.Shutdown ();  		break;  	}  	else {  		System.Windows.Forms.MessageBox.Show ("Invalid CLI arguments. Valid arguments:\r\n -extract  Extract all embedded dll's\r\n -build infile outfile   Build the infile into an exe at outfile\r\n [fileName]  Run this Zaml file");  		break;  	}  case "help":  case "--help":  case "-help":  case "/help":  case "/?":  case "-h":  	this.ShutdownMode = System.Windows.ShutdownMode.OnExplicitShutdown;  	new ZomBWalkthrough.Form ().ShowDialog ();  	this.Shutdown ();  	break;  default:  	System.Windows.Forms.MessageBox.Show ("Invalid CLI arguments. Valid arguments:\r\n -extract  Extract all embedded dll's\r\n -build infile outfile   Build the infile into an exe at outfile\r\n [fileName]  Run this Zaml file");  	new Designer ().Show ();  	break;  }  
Magic Number,System451.Communication.Dashboard.ViZ,App,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\App.xaml.cs,Application_Startup,The following statement contains a magic number: switch (args [0]) {  case "-extract":  	Utils.InstallUtils.ExtractAll ();  	this.Shutdown ();  	break;  case "-install":  	Utils.InstallUtils.NGen ().WaitForExit ();  	this.Shutdown ();  	break;  case "-extract-install":  	Utils.InstallUtils.Install (false);  	this.Shutdown ();  	break;  case "-build":  	if (args.Length == 3 && File.Exists (args [1])) {  		ZomBBuilder.BuildZomBString (File.ReadAllText (args [1])' Path.GetFullPath (args [2]));  		this.Shutdown ();  		break;  	}  	else {  		System.Windows.Forms.MessageBox.Show ("Invalid CLI arguments. Valid arguments:\r\n -extract  Extract all embedded dll's\r\n -build infile outfile   Build the infile into an exe at outfile\r\n [fileName]  Run this Zaml file");  		break;  	}  case "-buildfull":  	if (args.Length == 3 && File.Exists (args [1])) {  		ZomBBuilder.CopyDLLs (Path.GetDirectoryName (Path.GetFullPath (args [2])));  		ZomBBuilder.BuildZomBString (File.ReadAllText (args [1])' Path.GetFullPath (args [2])' true);  		this.Shutdown ();  		break;  	}  	else {  		System.Windows.Forms.MessageBox.Show ("Invalid CLI arguments. Valid arguments:\r\n -extract  Extract all embedded dll's\r\n -build infile outfile   Build the infile into an exe at outfile\r\n [fileName]  Run this Zaml file");  		break;  	}  case "help":  case "--help":  case "-help":  case "/help":  case "/?":  case "-h":  	this.ShutdownMode = System.Windows.ShutdownMode.OnExplicitShutdown;  	new ZomBWalkthrough.Form ().ShowDialog ();  	this.Shutdown ();  	break;  default:  	System.Windows.Forms.MessageBox.Show ("Invalid CLI arguments. Valid arguments:\r\n -extract  Extract all embedded dll's\r\n -build infile outfile   Build the infile into an exe at outfile\r\n [fileName]  Run this Zaml file");  	new Designer ().Show ();  	break;  }  
Magic Number,System451.Communication.Dashboard.ViZ,App,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\App.xaml.cs,Application_Startup,The following statement contains a magic number: if (args.Length == 3 && File.Exists (args [1])) {  	ZomBBuilder.BuildZomBString (File.ReadAllText (args [1])' Path.GetFullPath (args [2]));  	this.Shutdown ();  	break;  }  else {  	System.Windows.Forms.MessageBox.Show ("Invalid CLI arguments. Valid arguments:\r\n -extract  Extract all embedded dll's\r\n -build infile outfile   Build the infile into an exe at outfile\r\n [fileName]  Run this Zaml file");  	break;  }  
Magic Number,System451.Communication.Dashboard.ViZ,App,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\App.xaml.cs,Application_Startup,The following statement contains a magic number: if (args.Length == 3 && File.Exists (args [1])) {  	ZomBBuilder.BuildZomBString (File.ReadAllText (args [1])' Path.GetFullPath (args [2]));  	this.Shutdown ();  	break;  }  else {  	System.Windows.Forms.MessageBox.Show ("Invalid CLI arguments. Valid arguments:\r\n -extract  Extract all embedded dll's\r\n -build infile outfile   Build the infile into an exe at outfile\r\n [fileName]  Run this Zaml file");  	break;  }  
Magic Number,System451.Communication.Dashboard.ViZ,App,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\App.xaml.cs,Application_Startup,The following statement contains a magic number: ZomBBuilder.BuildZomBString (File.ReadAllText (args [1])' Path.GetFullPath (args [2]));  
Magic Number,System451.Communication.Dashboard.ViZ,App,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\App.xaml.cs,Application_Startup,The following statement contains a magic number: if (args.Length == 3 && File.Exists (args [1])) {  	ZomBBuilder.CopyDLLs (Path.GetDirectoryName (Path.GetFullPath (args [2])));  	ZomBBuilder.BuildZomBString (File.ReadAllText (args [1])' Path.GetFullPath (args [2])' true);  	this.Shutdown ();  	break;  }  else {  	System.Windows.Forms.MessageBox.Show ("Invalid CLI arguments. Valid arguments:\r\n -extract  Extract all embedded dll's\r\n -build infile outfile   Build the infile into an exe at outfile\r\n [fileName]  Run this Zaml file");  	break;  }  
Magic Number,System451.Communication.Dashboard.ViZ,App,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\App.xaml.cs,Application_Startup,The following statement contains a magic number: if (args.Length == 3 && File.Exists (args [1])) {  	ZomBBuilder.CopyDLLs (Path.GetDirectoryName (Path.GetFullPath (args [2])));  	ZomBBuilder.BuildZomBString (File.ReadAllText (args [1])' Path.GetFullPath (args [2])' true);  	this.Shutdown ();  	break;  }  else {  	System.Windows.Forms.MessageBox.Show ("Invalid CLI arguments. Valid arguments:\r\n -extract  Extract all embedded dll's\r\n -build infile outfile   Build the infile into an exe at outfile\r\n [fileName]  Run this Zaml file");  	break;  }  
Magic Number,System451.Communication.Dashboard.ViZ,App,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\App.xaml.cs,Application_Startup,The following statement contains a magic number: if (args.Length == 3 && File.Exists (args [1])) {  	ZomBBuilder.CopyDLLs (Path.GetDirectoryName (Path.GetFullPath (args [2])));  	ZomBBuilder.BuildZomBString (File.ReadAllText (args [1])' Path.GetFullPath (args [2])' true);  	this.Shutdown ();  	break;  }  else {  	System.Windows.Forms.MessageBox.Show ("Invalid CLI arguments. Valid arguments:\r\n -extract  Extract all embedded dll's\r\n -build infile outfile   Build the infile into an exe at outfile\r\n [fileName]  Run this Zaml file");  	break;  }  
Magic Number,System451.Communication.Dashboard.ViZ,App,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\App.xaml.cs,Application_Startup,The following statement contains a magic number: ZomBBuilder.CopyDLLs (Path.GetDirectoryName (Path.GetFullPath (args [2])));  
Magic Number,System451.Communication.Dashboard.ViZ,App,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\App.xaml.cs,Application_Startup,The following statement contains a magic number: ZomBBuilder.BuildZomBString (File.ReadAllText (args [1])' Path.GetFullPath (args [2])' true);  
Magic Number,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,Designer,The following statement contains a magic number: if (Settings.Default.LastTeamNumber == "0" || Settings.Default.LastTeamNumber == "" || Settings.Default.LastTeamNumber == null) {  	Process.Start (System.AppDomain.CurrentDomain.BaseDirectory + "\\ViZ.exe"' "help");  	Thread.Sleep (3141);  	new FirstRun ().ShowDialog ();  }  
Magic Number,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,Designer,The following statement contains a magic number: Thread.Sleep (3141);  
Magic Number,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,Designer,The following statement contains a magic number: if (System.Windows.Forms.Screen.PrimaryScreen.WorkingArea.Width > 1080 || Settings.Default.EmbeddedTbx) {  	//chromify' we have space  	this.AllowsTransparency = false;  	Scrlview.Background = Brushes.LightGray;  	ViZGrid.Background = Brushes.White;  	this.WindowStyle = WindowStyle.SingleBorderWindow;  	this.Width = 1080;  	this.Height = 470;  	if (Settings.Default.EmbeddedTbx) {  		tbx.Content = null;  		ViZGrid.Children.Add (tbx.TbxGrid);  		this.Height += 230;  		ToolboxDefinition.Height = new GridLength (230);  		SplitterDefinition.Height = GridLength.Auto;  	}  }  else if (System.Windows.Forms.Screen.PrimaryScreen.WorkingArea.Width <= 1080) {  	Canvas.SetTop (MenuGrid' 0);  }  
Magic Number,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,Designer,The following statement contains a magic number: if (System.Windows.Forms.Screen.PrimaryScreen.WorkingArea.Width > 1080 || Settings.Default.EmbeddedTbx) {  	//chromify' we have space  	this.AllowsTransparency = false;  	Scrlview.Background = Brushes.LightGray;  	ViZGrid.Background = Brushes.White;  	this.WindowStyle = WindowStyle.SingleBorderWindow;  	this.Width = 1080;  	this.Height = 470;  	if (Settings.Default.EmbeddedTbx) {  		tbx.Content = null;  		ViZGrid.Children.Add (tbx.TbxGrid);  		this.Height += 230;  		ToolboxDefinition.Height = new GridLength (230);  		SplitterDefinition.Height = GridLength.Auto;  	}  }  else if (System.Windows.Forms.Screen.PrimaryScreen.WorkingArea.Width <= 1080) {  	Canvas.SetTop (MenuGrid' 0);  }  
Magic Number,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,Designer,The following statement contains a magic number: if (System.Windows.Forms.Screen.PrimaryScreen.WorkingArea.Width > 1080 || Settings.Default.EmbeddedTbx) {  	//chromify' we have space  	this.AllowsTransparency = false;  	Scrlview.Background = Brushes.LightGray;  	ViZGrid.Background = Brushes.White;  	this.WindowStyle = WindowStyle.SingleBorderWindow;  	this.Width = 1080;  	this.Height = 470;  	if (Settings.Default.EmbeddedTbx) {  		tbx.Content = null;  		ViZGrid.Children.Add (tbx.TbxGrid);  		this.Height += 230;  		ToolboxDefinition.Height = new GridLength (230);  		SplitterDefinition.Height = GridLength.Auto;  	}  }  else if (System.Windows.Forms.Screen.PrimaryScreen.WorkingArea.Width <= 1080) {  	Canvas.SetTop (MenuGrid' 0);  }  
Magic Number,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,Designer,The following statement contains a magic number: if (System.Windows.Forms.Screen.PrimaryScreen.WorkingArea.Width > 1080 || Settings.Default.EmbeddedTbx) {  	//chromify' we have space  	this.AllowsTransparency = false;  	Scrlview.Background = Brushes.LightGray;  	ViZGrid.Background = Brushes.White;  	this.WindowStyle = WindowStyle.SingleBorderWindow;  	this.Width = 1080;  	this.Height = 470;  	if (Settings.Default.EmbeddedTbx) {  		tbx.Content = null;  		ViZGrid.Children.Add (tbx.TbxGrid);  		this.Height += 230;  		ToolboxDefinition.Height = new GridLength (230);  		SplitterDefinition.Height = GridLength.Auto;  	}  }  else if (System.Windows.Forms.Screen.PrimaryScreen.WorkingArea.Width <= 1080) {  	Canvas.SetTop (MenuGrid' 0);  }  
Magic Number,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,Designer,The following statement contains a magic number: if (System.Windows.Forms.Screen.PrimaryScreen.WorkingArea.Width > 1080 || Settings.Default.EmbeddedTbx) {  	//chromify' we have space  	this.AllowsTransparency = false;  	Scrlview.Background = Brushes.LightGray;  	ViZGrid.Background = Brushes.White;  	this.WindowStyle = WindowStyle.SingleBorderWindow;  	this.Width = 1080;  	this.Height = 470;  	if (Settings.Default.EmbeddedTbx) {  		tbx.Content = null;  		ViZGrid.Children.Add (tbx.TbxGrid);  		this.Height += 230;  		ToolboxDefinition.Height = new GridLength (230);  		SplitterDefinition.Height = GridLength.Auto;  	}  }  else if (System.Windows.Forms.Screen.PrimaryScreen.WorkingArea.Width <= 1080) {  	Canvas.SetTop (MenuGrid' 0);  }  
Magic Number,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,Designer,The following statement contains a magic number: if (System.Windows.Forms.Screen.PrimaryScreen.WorkingArea.Width > 1080 || Settings.Default.EmbeddedTbx) {  	//chromify' we have space  	this.AllowsTransparency = false;  	Scrlview.Background = Brushes.LightGray;  	ViZGrid.Background = Brushes.White;  	this.WindowStyle = WindowStyle.SingleBorderWindow;  	this.Width = 1080;  	this.Height = 470;  	if (Settings.Default.EmbeddedTbx) {  		tbx.Content = null;  		ViZGrid.Children.Add (tbx.TbxGrid);  		this.Height += 230;  		ToolboxDefinition.Height = new GridLength (230);  		SplitterDefinition.Height = GridLength.Auto;  	}  }  else if (System.Windows.Forms.Screen.PrimaryScreen.WorkingArea.Width <= 1080) {  	Canvas.SetTop (MenuGrid' 0);  }  
Magic Number,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,Designer,The following statement contains a magic number: this.Width = 1080;  
Magic Number,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,Designer,The following statement contains a magic number: this.Height = 470;  
Magic Number,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,Designer,The following statement contains a magic number: if (Settings.Default.EmbeddedTbx) {  	tbx.Content = null;  	ViZGrid.Children.Add (tbx.TbxGrid);  	this.Height += 230;  	ToolboxDefinition.Height = new GridLength (230);  	SplitterDefinition.Height = GridLength.Auto;  }  
Magic Number,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,Designer,The following statement contains a magic number: if (Settings.Default.EmbeddedTbx) {  	tbx.Content = null;  	ViZGrid.Children.Add (tbx.TbxGrid);  	this.Height += 230;  	ToolboxDefinition.Height = new GridLength (230);  	SplitterDefinition.Height = GridLength.Auto;  }  
Magic Number,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,Designer,The following statement contains a magic number: this.Height += 230;  
Magic Number,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,Designer,The following statement contains a magic number: ToolboxDefinition.Height = new GridLength (230);  
Magic Number,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,Designer,The following statement contains a magic number: if (System.Windows.Forms.Screen.PrimaryScreen.WorkingArea.Width <= 1080) {  	Canvas.SetTop (MenuGrid' 0);  }  
Magic Number,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,Designer,The following statement contains a magic number: using (System.Drawing.Graphics g = System.Drawing.Graphics.FromHwnd (IntPtr.Zero)) {  	nsyswidth *= (96.0 / g.DpiX);  	nsysheight *= (96.0 / g.DpiY);  }  
Magic Number,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,Designer,The following statement contains a magic number: using (System.Drawing.Graphics g = System.Drawing.Graphics.FromHwnd (IntPtr.Zero)) {  	nsyswidth *= (96.0 / g.DpiX);  	nsysheight *= (96.0 / g.DpiY);  }  
Magic Number,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,Designer,The following statement contains a magic number: nsyswidth *= (96.0 / g.DpiX);  
Magic Number,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,Designer,The following statement contains a magic number: nsysheight *= (96.0 / g.DpiY);  
Magic Number,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,Designer,The following statement contains a magic number: this.Top = (nsysheight <= 600) ? -1 : (nsysheight - (this.Height + (Settings.Default.EmbeddedTbx ? 0 : tbx.Height))) / 2.0;  
Magic Number,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,Designer,The following statement contains a magic number: this.Top = (nsysheight <= 600) ? -1 : (nsysheight - (this.Height + (Settings.Default.EmbeddedTbx ? 0 : tbx.Height))) / 2.0;  
Magic Number,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,Designer,The following statement contains a magic number: this.Left = Math.Max (-1.0' (nsyswidth / 2.0) - this.Width / 2.0);  
Magic Number,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,Designer,The following statement contains a magic number: this.Left = Math.Max (-1.0' (nsyswidth / 2.0) - this.Width / 2.0);  
Magic Number,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,Designer,The following statement contains a magic number: (designerProps [2] as Label).Content = "Invalid Packets:";  
Magic Number,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,Designer,The following statement contains a magic number: (designerProps [4] as Label).Content = "Source:";  
Magic Number,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,Designer,The following statement contains a magic number: (designerProps [5] as FrameworkElement).Tag = dsnr;  
Magic Number,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,Designer,The following statement contains a magic number: (designerProps [6] as Label).Content = "Team #:";  
Magic Number,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,Designer,The following statement contains a magic number: (designerProps [7] as TextBox).Text = Settings.Default.LastTeamNumber;  
Magic Number,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,Designer,The following statement contains a magic number: this.Closing += delegate {  	Settings.Default.LastTeamNumber = (designerProps [7] as TextBox).Text;  	Settings.Default.Save ();  	try {  		tbx.Close ();  	}  	catch {  	}  };  
Magic Number,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,Designer,The following statement contains a magic number: Settings.Default.LastTeamNumber = (designerProps [7] as TextBox).Text;  
Magic Number,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,OnSourceInitialized,The following statement contains a magic number: if (Environment.OSVersion.Version.Major >= 6) {  	if (Utils.AeroGlass.GlassifyWindow (this)) {  		ViZGrid.Background = Brushes.Transparent;  		Scrlview.Background = Brushes.Transparent;  	}  }  
Magic Number,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,OnSourceInitialized,The following statement contains a magic number: if (DateTime.Today.Day == 31 && DateTime.Today.Month == 10) {  	Scrlview.Background = Brushes.Maroon;  }  
Magic Number,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,OnSourceInitialized,The following statement contains a magic number: if (DateTime.Today.Day == 31 && DateTime.Today.Month == 10) {  	Scrlview.Background = Brushes.Maroon;  }  
Magic Number,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,Window_Loaded,The following statement contains a magic number: if (!Settings.Default.EmbeddedTbx) {  	tbx.Top = this.Top + this.ActualHeight - 2.0;  	tbx.Left = this.Left + (this.ActualWidth / 2.0) - (tbx.Width / 2.0);  	tbx.Show ();  	tbx.Owner = this;  }  
Magic Number,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,Window_Loaded,The following statement contains a magic number: if (!Settings.Default.EmbeddedTbx) {  	tbx.Top = this.Top + this.ActualHeight - 2.0;  	tbx.Left = this.Left + (this.ActualWidth / 2.0) - (tbx.Width / 2.0);  	tbx.Show ();  	tbx.Owner = this;  }  
Magic Number,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,Window_Loaded,The following statement contains a magic number: if (!Settings.Default.EmbeddedTbx) {  	tbx.Top = this.Top + this.ActualHeight - 2.0;  	tbx.Left = this.Left + (this.ActualWidth / 2.0) - (tbx.Width / 2.0);  	tbx.Show ();  	tbx.Owner = this;  }  
Magic Number,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,Window_Loaded,The following statement contains a magic number: tbx.Top = this.Top + this.ActualHeight - 2.0;  
Magic Number,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,Window_Loaded,The following statement contains a magic number: tbx.Left = this.Left + (this.ActualWidth / 2.0) - (tbx.Width / 2.0);  
Magic Number,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,Window_Loaded,The following statement contains a magic number: tbx.Left = this.Left + (this.ActualWidth / 2.0) - (tbx.Width / 2.0);  
Magic Number,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,CheckForUpdates,The following statement contains a magic number: Thread.Sleep (3141);  
Magic Number,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,listBox1_PreviewMouseMove,The following statement contains a magic number: try {  	// Get the current mouse position  	Point mousePos = e.GetPosition (null);  	Vector diff = dndopoint - mousePos;  	if (lbdragging && (e.LeftButton == MouseButtonState.Pressed && Math.Abs (diff.X) + Math.Abs (diff.Y) > 3)) {  		// Get the dragged ListViewItem  		ListBoxItem listViewItem = FindAnchestor<ListBoxItem' WrapPanel> ((DependencyObject)origSrc);  		//System.Diagnostics.Debug.Print("Moving...");  		// Find the data behind the ListViewItem  		if (listViewItem != null) {  			ZomBControlAttribute contact = (ZomBControlAttribute)listBox1.ItemContainerGenerator.ItemFromContainer (listViewItem);  			//System.Diagnostics.Debug.Print("Found...");  			// Initialize the drag & drop operation  			DataObject dragData = new DataObject ("ZomBControl"' contact);  			DragDrop.DoDragDrop (listViewItem' dragData' DragDropEffects.Copy);  		}  		lbdragging = false;  	}  }  catch (Exception ex) {  	ErrorDialog.PrcException (ex);  }  
Magic Number,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,listBox1_PreviewMouseMove,The following statement contains a magic number: if (lbdragging && (e.LeftButton == MouseButtonState.Pressed && Math.Abs (diff.X) + Math.Abs (diff.Y) > 3)) {  	// Get the dragged ListViewItem  	ListBoxItem listViewItem = FindAnchestor<ListBoxItem' WrapPanel> ((DependencyObject)origSrc);  	//System.Diagnostics.Debug.Print("Moving...");  	// Find the data behind the ListViewItem  	if (listViewItem != null) {  		ZomBControlAttribute contact = (ZomBControlAttribute)listBox1.ItemContainerGenerator.ItemFromContainer (listViewItem);  		//System.Diagnostics.Debug.Print("Found...");  		// Initialize the drag & drop operation  		DataObject dragData = new DataObject ("ZomBControl"' contact);  		DragDrop.DoDragDrop (listViewItem' dragData' DragDropEffects.Copy);  	}  	lbdragging = false;  }  
Magic Number,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,ZDash_Drop,The following statement contains a magic number: if (e.Data.GetDataPresent ("ZomBControl")) {  	ZomBControlAttribute info = (e.Data.GetData ("ZomBControl") as ZomBControlAttribute);  	if (info != null)  		AddControl (info' e.GetPosition (ZDash));  }  else if (e.Data.GetDataPresent ("ZomBControl2")) {  	ZomBControlAttribute info = (e.Data.GetData ("ZomBControl2") as ZomBControlAttribute);  	if (info != null) {  		if (info.Name == "ZomB Name") {  			//Add Dragger!  			var r = VisualTreeHelper.HitTest (ZDash' e.GetPosition (ZDash));  			if (r.VisualHit != ZDash) {  				SurfaceControl sc = FindAnchestor<SurfaceControl> (r.VisualHit);  				sc.Control.Name = ap.Name.Replace (" "' "Z").Replace ("_"' "__").Replace ("."' "_") + Guid.NewGuid ().ToString ("N").Substring (0' 5);  				if (sc.Control is ZomBGLControl)  					(sc.Control as ZomBGLControl).ControlName = ap.Name;  				else if (sc.Control is ZomBGLControlGroup)  					(sc.Control as ZomBGLControlGroup).ControlName = ap.Name;  				if (curObj != null) {  					var pco = curObj;  					Deselect ();  					Select (pco);  				}  			}  		}  		else  			AddControl (info' e.GetPosition (ZDash)' ap);  	}  }  
Magic Number,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,ZDash_Drop,The following statement contains a magic number: if (e.Data.GetDataPresent ("ZomBControl2")) {  	ZomBControlAttribute info = (e.Data.GetData ("ZomBControl2") as ZomBControlAttribute);  	if (info != null) {  		if (info.Name == "ZomB Name") {  			//Add Dragger!  			var r = VisualTreeHelper.HitTest (ZDash' e.GetPosition (ZDash));  			if (r.VisualHit != ZDash) {  				SurfaceControl sc = FindAnchestor<SurfaceControl> (r.VisualHit);  				sc.Control.Name = ap.Name.Replace (" "' "Z").Replace ("_"' "__").Replace ("."' "_") + Guid.NewGuid ().ToString ("N").Substring (0' 5);  				if (sc.Control is ZomBGLControl)  					(sc.Control as ZomBGLControl).ControlName = ap.Name;  				else if (sc.Control is ZomBGLControlGroup)  					(sc.Control as ZomBGLControlGroup).ControlName = ap.Name;  				if (curObj != null) {  					var pco = curObj;  					Deselect ();  					Select (pco);  				}  			}  		}  		else  			AddControl (info' e.GetPosition (ZDash)' ap);  	}  }  
Magic Number,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,ZDash_Drop,The following statement contains a magic number: if (info != null) {  	if (info.Name == "ZomB Name") {  		//Add Dragger!  		var r = VisualTreeHelper.HitTest (ZDash' e.GetPosition (ZDash));  		if (r.VisualHit != ZDash) {  			SurfaceControl sc = FindAnchestor<SurfaceControl> (r.VisualHit);  			sc.Control.Name = ap.Name.Replace (" "' "Z").Replace ("_"' "__").Replace ("."' "_") + Guid.NewGuid ().ToString ("N").Substring (0' 5);  			if (sc.Control is ZomBGLControl)  				(sc.Control as ZomBGLControl).ControlName = ap.Name;  			else if (sc.Control is ZomBGLControlGroup)  				(sc.Control as ZomBGLControlGroup).ControlName = ap.Name;  			if (curObj != null) {  				var pco = curObj;  				Deselect ();  				Select (pco);  			}  		}  	}  	else  		AddControl (info' e.GetPosition (ZDash)' ap);  }  
Magic Number,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,ZDash_Drop,The following statement contains a magic number: if (info.Name == "ZomB Name") {  	//Add Dragger!  	var r = VisualTreeHelper.HitTest (ZDash' e.GetPosition (ZDash));  	if (r.VisualHit != ZDash) {  		SurfaceControl sc = FindAnchestor<SurfaceControl> (r.VisualHit);  		sc.Control.Name = ap.Name.Replace (" "' "Z").Replace ("_"' "__").Replace ("."' "_") + Guid.NewGuid ().ToString ("N").Substring (0' 5);  		if (sc.Control is ZomBGLControl)  			(sc.Control as ZomBGLControl).ControlName = ap.Name;  		else if (sc.Control is ZomBGLControlGroup)  			(sc.Control as ZomBGLControlGroup).ControlName = ap.Name;  		if (curObj != null) {  			var pco = curObj;  			Deselect ();  			Select (pco);  		}  	}  }  else  	AddControl (info' e.GetPosition (ZDash)' ap);  
Magic Number,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,ZDash_Drop,The following statement contains a magic number: if (r.VisualHit != ZDash) {  	SurfaceControl sc = FindAnchestor<SurfaceControl> (r.VisualHit);  	sc.Control.Name = ap.Name.Replace (" "' "Z").Replace ("_"' "__").Replace ("."' "_") + Guid.NewGuid ().ToString ("N").Substring (0' 5);  	if (sc.Control is ZomBGLControl)  		(sc.Control as ZomBGLControl).ControlName = ap.Name;  	else if (sc.Control is ZomBGLControlGroup)  		(sc.Control as ZomBGLControlGroup).ControlName = ap.Name;  	if (curObj != null) {  		var pco = curObj;  		Deselect ();  		Select (pco);  	}  }  
Magic Number,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,ZDash_Drop,The following statement contains a magic number: sc.Control.Name = ap.Name.Replace (" "' "Z").Replace ("_"' "__").Replace ("."' "_") + Guid.NewGuid ().ToString ("N").Substring (0' 5);  
Magic Number,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,AddControl,The following statement contains a magic number: AddControl (info' new Point (5.0' 5.0));  
Magic Number,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,AddControl,The following statement contains a magic number: AddControl (info' new Point (5.0' 5.0));  
Magic Number,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,AddControl,The following statement contains a magic number: fe.Name = aup.Name.Replace (" "' "Z").Replace ("_"' "__").Replace ("."' "_") + Guid.NewGuid ().ToString ("N").Substring (0' 5);  
Magic Number,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,AddControl,The following statement contains a magic number: fe.Name = "Z" + Guid.NewGuid ().ToString ("N").Substring (0' 16);  
Magic Number,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,AddControl,The following statement contains a magic number: if (Double.IsNaN (fe.Width)) {  	sc.Width = 75;  	//fe.ActualWidth;  }  
Magic Number,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,AddControl,The following statement contains a magic number: sc.Width = 75;  
Magic Number,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,AddControl,The following statement contains a magic number: if (Double.IsNaN (fe.Height)) {  	sc.Height = 25;  	//fe.ActualHeight;  }  
Magic Number,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,AddControl,The following statement contains a magic number: sc.Height = 25;  
Magic Number,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,ShowSnaps,The following statement contains a magic number: foreach (SnapGridDistance item in dist) {  	double otherleft = SnapGridHelper.Left (item.other);  	double otherright = SnapGridHelper.Right (item.other);  	double othertop = SnapGridHelper.Top (item.other);  	double otherbottom = SnapGridHelper.Bottom (item.other);  	if (item.other == ZDash) {  		otherright = otherbottom = 0;  		otherleft = ZDash.ActualWidth;  		othertop = ZDash.ActualHeight;  	}  	switch (item.Location) {  	case SnapGridDirections.X:  		if (!left) {  			left = true;  			leftdi = item.Distance;  			if (leftModifier != null) {  				if (item.Type == SnapType.Distance) {  					leftModifier (otherright + SnapGridHelper.SnapDistance);  				}  				else if (item.Type == SnapType.Equal1) {  					leftModifier (otherright);  				}  				else {  					leftModifier (otherleft);  				}  			}  		}  		if (left && Math.Abs (leftdi - item.Distance) < SnapGridHelper.SnapableWithinDistance) {  			if (item.Type == SnapType.Distance) {  				ty = Math.Round (SnapGridHelper.SnapableDistanceLeftRightY (curObj' item.other)) + .5;  				snaplines.Add (new SnapLine {  					y1 = ty'  					y2 = ty'  					color = SnapLine.DistanceLineColor'  					x1 = -SnapGridHelper.SnapDistance'  					x2 = 0  				});  			}  			else {  				leftside.x1 = leftside.x2;  				leftside.y1 = Math.Min (leftside.y1' othertop - Canvas.GetTop (curObj));  				leftside.y2 = Math.Max (leftside.y2' othertop + item.other.Height - (Canvas.GetTop (curObj)));  			}  		}  		break;  	case SnapGridDirections.Y:  		if (!top) {  			top = true;  			topdi = item.Distance;  			if (topModifier != null) {  				if (item.Type == SnapType.Distance) {  					topModifier (otherbottom + SnapGridHelper.SnapDistance);  				}  				else if (item.Type == SnapType.Equal1) {  					topModifier (otherbottom);  				}  				else {  					topModifier (othertop);  				}  			}  		}  		if (top && Math.Abs (topdi - item.Distance) < SnapGridHelper.SnapableWithinDistance) {  			if (item.Type == SnapType.Distance) {  				ty = Math.Round (SnapGridHelper.SnapableDistanceTopBottomX (curObj' item.other)) + .5;  				snaplines.Add (new SnapLine {  					color = SnapLine.DistanceLineColor'  					x1 = ty'  					x2 = ty'  					y1 = 0'  					y2 = -SnapGridHelper.SnapDistance  				});  			}  			else {  				topside.y1 = topside.y2;  				topside.x1 = Math.Min (topside.x1' otherleft - Canvas.GetLeft (curObj));  				topside.x2 = Math.Max (topside.x2' otherleft + item.other.Width - (Canvas.GetLeft (curObj)));  			}  		}  		break;  	case SnapGridDirections.Right:  		if (!right) {  			right = true;  			rightdi = item.Distance;  			if (rightModifier != null) {  				if (item.Type == SnapType.Distance) {  					rightModifier (otherleft - SnapGridHelper.SnapDistance);  				}  				else if (item.Type == SnapType.Equal1) {  					rightModifier (otherleft);  				}  				else {  					rightModifier (otherright);  				}  			}  		}  		if (right && Math.Abs (rightdi - item.Distance) < SnapGridHelper.SnapableWithinDistance) {  			if (item.Type == SnapType.Distance) {  				ty = Math.Round (SnapGridHelper.SnapableDistanceLeftRightY (curObj' item.other)) + .5;  				snaplines.Add (new SnapLine {  					y1 = ty'  					y2 = ty'  					color = SnapLine.DistanceLineColor'  					x1 = curObj.Width + SnapGridHelper.SnapDistance'  					x2 = curObj.Width  				});  			}  			else {  				rightside.x1 = rightside.x2 = curObj.Width + 0.5;  				rightside.y1 = Math.Min (rightside.y1' othertop - Canvas.GetTop (curObj));  				rightside.y2 = Math.Max (rightside.y2' othertop + item.other.Height - (Canvas.GetTop (curObj)));  			}  		}  		break;  	case SnapGridDirections.Bottom:  		if (!bottom) {  			bottom = true;  			bottomdi = item.Distance;  			if (bottomModifier != null) {  				if (item.Type == SnapType.Distance) {  					bottomModifier (othertop - SnapGridHelper.SnapDistance);  				}  				else if (item.Type == SnapType.Equal1) {  					bottomModifier (othertop);  				}  				else {  					bottomModifier (otherbottom);  				}  			}  		}  		if (bottom && Math.Abs (bottomdi - item.Distance) < SnapGridHelper.SnapableWithinDistance) {  			if (item.Type == SnapType.Distance) {  				ty = Math.Round (SnapGridHelper.SnapableDistanceTopBottomX (curObj' item.other)) + .5;  				snaplines.Add (new SnapLine {  					color = SnapLine.DistanceLineColor'  					x1 = ty'  					x2 = ty'  					y1 = curObj.Height'  					y2 = curObj.Height + SnapGridHelper.SnapDistance  				});  			}  			else {  				bottomside.y1 = bottomside.y2 = curObj.Height + 0.5;  				bottomside.x1 = Math.Min (bottomside.x1' otherleft - Canvas.GetLeft (curObj));  				bottomside.x2 = Math.Max (bottomside.x2' otherleft + item.other.Width - (Canvas.GetLeft (curObj)));  			}  		}  		break;  	default:  		throw new InvalidOperationException ("Enum not it!");  	}  }  
Magic Number,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,ShowSnaps,The following statement contains a magic number: foreach (SnapGridDistance item in dist) {  	double otherleft = SnapGridHelper.Left (item.other);  	double otherright = SnapGridHelper.Right (item.other);  	double othertop = SnapGridHelper.Top (item.other);  	double otherbottom = SnapGridHelper.Bottom (item.other);  	if (item.other == ZDash) {  		otherright = otherbottom = 0;  		otherleft = ZDash.ActualWidth;  		othertop = ZDash.ActualHeight;  	}  	switch (item.Location) {  	case SnapGridDirections.X:  		if (!left) {  			left = true;  			leftdi = item.Distance;  			if (leftModifier != null) {  				if (item.Type == SnapType.Distance) {  					leftModifier (otherright + SnapGridHelper.SnapDistance);  				}  				else if (item.Type == SnapType.Equal1) {  					leftModifier (otherright);  				}  				else {  					leftModifier (otherleft);  				}  			}  		}  		if (left && Math.Abs (leftdi - item.Distance) < SnapGridHelper.SnapableWithinDistance) {  			if (item.Type == SnapType.Distance) {  				ty = Math.Round (SnapGridHelper.SnapableDistanceLeftRightY (curObj' item.other)) + .5;  				snaplines.Add (new SnapLine {  					y1 = ty'  					y2 = ty'  					color = SnapLine.DistanceLineColor'  					x1 = -SnapGridHelper.SnapDistance'  					x2 = 0  				});  			}  			else {  				leftside.x1 = leftside.x2;  				leftside.y1 = Math.Min (leftside.y1' othertop - Canvas.GetTop (curObj));  				leftside.y2 = Math.Max (leftside.y2' othertop + item.other.Height - (Canvas.GetTop (curObj)));  			}  		}  		break;  	case SnapGridDirections.Y:  		if (!top) {  			top = true;  			topdi = item.Distance;  			if (topModifier != null) {  				if (item.Type == SnapType.Distance) {  					topModifier (otherbottom + SnapGridHelper.SnapDistance);  				}  				else if (item.Type == SnapType.Equal1) {  					topModifier (otherbottom);  				}  				else {  					topModifier (othertop);  				}  			}  		}  		if (top && Math.Abs (topdi - item.Distance) < SnapGridHelper.SnapableWithinDistance) {  			if (item.Type == SnapType.Distance) {  				ty = Math.Round (SnapGridHelper.SnapableDistanceTopBottomX (curObj' item.other)) + .5;  				snaplines.Add (new SnapLine {  					color = SnapLine.DistanceLineColor'  					x1 = ty'  					x2 = ty'  					y1 = 0'  					y2 = -SnapGridHelper.SnapDistance  				});  			}  			else {  				topside.y1 = topside.y2;  				topside.x1 = Math.Min (topside.x1' otherleft - Canvas.GetLeft (curObj));  				topside.x2 = Math.Max (topside.x2' otherleft + item.other.Width - (Canvas.GetLeft (curObj)));  			}  		}  		break;  	case SnapGridDirections.Right:  		if (!right) {  			right = true;  			rightdi = item.Distance;  			if (rightModifier != null) {  				if (item.Type == SnapType.Distance) {  					rightModifier (otherleft - SnapGridHelper.SnapDistance);  				}  				else if (item.Type == SnapType.Equal1) {  					rightModifier (otherleft);  				}  				else {  					rightModifier (otherright);  				}  			}  		}  		if (right && Math.Abs (rightdi - item.Distance) < SnapGridHelper.SnapableWithinDistance) {  			if (item.Type == SnapType.Distance) {  				ty = Math.Round (SnapGridHelper.SnapableDistanceLeftRightY (curObj' item.other)) + .5;  				snaplines.Add (new SnapLine {  					y1 = ty'  					y2 = ty'  					color = SnapLine.DistanceLineColor'  					x1 = curObj.Width + SnapGridHelper.SnapDistance'  					x2 = curObj.Width  				});  			}  			else {  				rightside.x1 = rightside.x2 = curObj.Width + 0.5;  				rightside.y1 = Math.Min (rightside.y1' othertop - Canvas.GetTop (curObj));  				rightside.y2 = Math.Max (rightside.y2' othertop + item.other.Height - (Canvas.GetTop (curObj)));  			}  		}  		break;  	case SnapGridDirections.Bottom:  		if (!bottom) {  			bottom = true;  			bottomdi = item.Distance;  			if (bottomModifier != null) {  				if (item.Type == SnapType.Distance) {  					bottomModifier (othertop - SnapGridHelper.SnapDistance);  				}  				else if (item.Type == SnapType.Equal1) {  					bottomModifier (othertop);  				}  				else {  					bottomModifier (otherbottom);  				}  			}  		}  		if (bottom && Math.Abs (bottomdi - item.Distance) < SnapGridHelper.SnapableWithinDistance) {  			if (item.Type == SnapType.Distance) {  				ty = Math.Round (SnapGridHelper.SnapableDistanceTopBottomX (curObj' item.other)) + .5;  				snaplines.Add (new SnapLine {  					color = SnapLine.DistanceLineColor'  					x1 = ty'  					x2 = ty'  					y1 = curObj.Height'  					y2 = curObj.Height + SnapGridHelper.SnapDistance  				});  			}  			else {  				bottomside.y1 = bottomside.y2 = curObj.Height + 0.5;  				bottomside.x1 = Math.Min (bottomside.x1' otherleft - Canvas.GetLeft (curObj));  				bottomside.x2 = Math.Max (bottomside.x2' otherleft + item.other.Width - (Canvas.GetLeft (curObj)));  			}  		}  		break;  	default:  		throw new InvalidOperationException ("Enum not it!");  	}  }  
Magic Number,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,ShowSnaps,The following statement contains a magic number: foreach (SnapGridDistance item in dist) {  	double otherleft = SnapGridHelper.Left (item.other);  	double otherright = SnapGridHelper.Right (item.other);  	double othertop = SnapGridHelper.Top (item.other);  	double otherbottom = SnapGridHelper.Bottom (item.other);  	if (item.other == ZDash) {  		otherright = otherbottom = 0;  		otherleft = ZDash.ActualWidth;  		othertop = ZDash.ActualHeight;  	}  	switch (item.Location) {  	case SnapGridDirections.X:  		if (!left) {  			left = true;  			leftdi = item.Distance;  			if (leftModifier != null) {  				if (item.Type == SnapType.Distance) {  					leftModifier (otherright + SnapGridHelper.SnapDistance);  				}  				else if (item.Type == SnapType.Equal1) {  					leftModifier (otherright);  				}  				else {  					leftModifier (otherleft);  				}  			}  		}  		if (left && Math.Abs (leftdi - item.Distance) < SnapGridHelper.SnapableWithinDistance) {  			if (item.Type == SnapType.Distance) {  				ty = Math.Round (SnapGridHelper.SnapableDistanceLeftRightY (curObj' item.other)) + .5;  				snaplines.Add (new SnapLine {  					y1 = ty'  					y2 = ty'  					color = SnapLine.DistanceLineColor'  					x1 = -SnapGridHelper.SnapDistance'  					x2 = 0  				});  			}  			else {  				leftside.x1 = leftside.x2;  				leftside.y1 = Math.Min (leftside.y1' othertop - Canvas.GetTop (curObj));  				leftside.y2 = Math.Max (leftside.y2' othertop + item.other.Height - (Canvas.GetTop (curObj)));  			}  		}  		break;  	case SnapGridDirections.Y:  		if (!top) {  			top = true;  			topdi = item.Distance;  			if (topModifier != null) {  				if (item.Type == SnapType.Distance) {  					topModifier (otherbottom + SnapGridHelper.SnapDistance);  				}  				else if (item.Type == SnapType.Equal1) {  					topModifier (otherbottom);  				}  				else {  					topModifier (othertop);  				}  			}  		}  		if (top && Math.Abs (topdi - item.Distance) < SnapGridHelper.SnapableWithinDistance) {  			if (item.Type == SnapType.Distance) {  				ty = Math.Round (SnapGridHelper.SnapableDistanceTopBottomX (curObj' item.other)) + .5;  				snaplines.Add (new SnapLine {  					color = SnapLine.DistanceLineColor'  					x1 = ty'  					x2 = ty'  					y1 = 0'  					y2 = -SnapGridHelper.SnapDistance  				});  			}  			else {  				topside.y1 = topside.y2;  				topside.x1 = Math.Min (topside.x1' otherleft - Canvas.GetLeft (curObj));  				topside.x2 = Math.Max (topside.x2' otherleft + item.other.Width - (Canvas.GetLeft (curObj)));  			}  		}  		break;  	case SnapGridDirections.Right:  		if (!right) {  			right = true;  			rightdi = item.Distance;  			if (rightModifier != null) {  				if (item.Type == SnapType.Distance) {  					rightModifier (otherleft - SnapGridHelper.SnapDistance);  				}  				else if (item.Type == SnapType.Equal1) {  					rightModifier (otherleft);  				}  				else {  					rightModifier (otherright);  				}  			}  		}  		if (right && Math.Abs (rightdi - item.Distance) < SnapGridHelper.SnapableWithinDistance) {  			if (item.Type == SnapType.Distance) {  				ty = Math.Round (SnapGridHelper.SnapableDistanceLeftRightY (curObj' item.other)) + .5;  				snaplines.Add (new SnapLine {  					y1 = ty'  					y2 = ty'  					color = SnapLine.DistanceLineColor'  					x1 = curObj.Width + SnapGridHelper.SnapDistance'  					x2 = curObj.Width  				});  			}  			else {  				rightside.x1 = rightside.x2 = curObj.Width + 0.5;  				rightside.y1 = Math.Min (rightside.y1' othertop - Canvas.GetTop (curObj));  				rightside.y2 = Math.Max (rightside.y2' othertop + item.other.Height - (Canvas.GetTop (curObj)));  			}  		}  		break;  	case SnapGridDirections.Bottom:  		if (!bottom) {  			bottom = true;  			bottomdi = item.Distance;  			if (bottomModifier != null) {  				if (item.Type == SnapType.Distance) {  					bottomModifier (othertop - SnapGridHelper.SnapDistance);  				}  				else if (item.Type == SnapType.Equal1) {  					bottomModifier (othertop);  				}  				else {  					bottomModifier (otherbottom);  				}  			}  		}  		if (bottom && Math.Abs (bottomdi - item.Distance) < SnapGridHelper.SnapableWithinDistance) {  			if (item.Type == SnapType.Distance) {  				ty = Math.Round (SnapGridHelper.SnapableDistanceTopBottomX (curObj' item.other)) + .5;  				snaplines.Add (new SnapLine {  					color = SnapLine.DistanceLineColor'  					x1 = ty'  					x2 = ty'  					y1 = curObj.Height'  					y2 = curObj.Height + SnapGridHelper.SnapDistance  				});  			}  			else {  				bottomside.y1 = bottomside.y2 = curObj.Height + 0.5;  				bottomside.x1 = Math.Min (bottomside.x1' otherleft - Canvas.GetLeft (curObj));  				bottomside.x2 = Math.Max (bottomside.x2' otherleft + item.other.Width - (Canvas.GetLeft (curObj)));  			}  		}  		break;  	default:  		throw new InvalidOperationException ("Enum not it!");  	}  }  
Magic Number,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,ShowSnaps,The following statement contains a magic number: foreach (SnapGridDistance item in dist) {  	double otherleft = SnapGridHelper.Left (item.other);  	double otherright = SnapGridHelper.Right (item.other);  	double othertop = SnapGridHelper.Top (item.other);  	double otherbottom = SnapGridHelper.Bottom (item.other);  	if (item.other == ZDash) {  		otherright = otherbottom = 0;  		otherleft = ZDash.ActualWidth;  		othertop = ZDash.ActualHeight;  	}  	switch (item.Location) {  	case SnapGridDirections.X:  		if (!left) {  			left = true;  			leftdi = item.Distance;  			if (leftModifier != null) {  				if (item.Type == SnapType.Distance) {  					leftModifier (otherright + SnapGridHelper.SnapDistance);  				}  				else if (item.Type == SnapType.Equal1) {  					leftModifier (otherright);  				}  				else {  					leftModifier (otherleft);  				}  			}  		}  		if (left && Math.Abs (leftdi - item.Distance) < SnapGridHelper.SnapableWithinDistance) {  			if (item.Type == SnapType.Distance) {  				ty = Math.Round (SnapGridHelper.SnapableDistanceLeftRightY (curObj' item.other)) + .5;  				snaplines.Add (new SnapLine {  					y1 = ty'  					y2 = ty'  					color = SnapLine.DistanceLineColor'  					x1 = -SnapGridHelper.SnapDistance'  					x2 = 0  				});  			}  			else {  				leftside.x1 = leftside.x2;  				leftside.y1 = Math.Min (leftside.y1' othertop - Canvas.GetTop (curObj));  				leftside.y2 = Math.Max (leftside.y2' othertop + item.other.Height - (Canvas.GetTop (curObj)));  			}  		}  		break;  	case SnapGridDirections.Y:  		if (!top) {  			top = true;  			topdi = item.Distance;  			if (topModifier != null) {  				if (item.Type == SnapType.Distance) {  					topModifier (otherbottom + SnapGridHelper.SnapDistance);  				}  				else if (item.Type == SnapType.Equal1) {  					topModifier (otherbottom);  				}  				else {  					topModifier (othertop);  				}  			}  		}  		if (top && Math.Abs (topdi - item.Distance) < SnapGridHelper.SnapableWithinDistance) {  			if (item.Type == SnapType.Distance) {  				ty = Math.Round (SnapGridHelper.SnapableDistanceTopBottomX (curObj' item.other)) + .5;  				snaplines.Add (new SnapLine {  					color = SnapLine.DistanceLineColor'  					x1 = ty'  					x2 = ty'  					y1 = 0'  					y2 = -SnapGridHelper.SnapDistance  				});  			}  			else {  				topside.y1 = topside.y2;  				topside.x1 = Math.Min (topside.x1' otherleft - Canvas.GetLeft (curObj));  				topside.x2 = Math.Max (topside.x2' otherleft + item.other.Width - (Canvas.GetLeft (curObj)));  			}  		}  		break;  	case SnapGridDirections.Right:  		if (!right) {  			right = true;  			rightdi = item.Distance;  			if (rightModifier != null) {  				if (item.Type == SnapType.Distance) {  					rightModifier (otherleft - SnapGridHelper.SnapDistance);  				}  				else if (item.Type == SnapType.Equal1) {  					rightModifier (otherleft);  				}  				else {  					rightModifier (otherright);  				}  			}  		}  		if (right && Math.Abs (rightdi - item.Distance) < SnapGridHelper.SnapableWithinDistance) {  			if (item.Type == SnapType.Distance) {  				ty = Math.Round (SnapGridHelper.SnapableDistanceLeftRightY (curObj' item.other)) + .5;  				snaplines.Add (new SnapLine {  					y1 = ty'  					y2 = ty'  					color = SnapLine.DistanceLineColor'  					x1 = curObj.Width + SnapGridHelper.SnapDistance'  					x2 = curObj.Width  				});  			}  			else {  				rightside.x1 = rightside.x2 = curObj.Width + 0.5;  				rightside.y1 = Math.Min (rightside.y1' othertop - Canvas.GetTop (curObj));  				rightside.y2 = Math.Max (rightside.y2' othertop + item.other.Height - (Canvas.GetTop (curObj)));  			}  		}  		break;  	case SnapGridDirections.Bottom:  		if (!bottom) {  			bottom = true;  			bottomdi = item.Distance;  			if (bottomModifier != null) {  				if (item.Type == SnapType.Distance) {  					bottomModifier (othertop - SnapGridHelper.SnapDistance);  				}  				else if (item.Type == SnapType.Equal1) {  					bottomModifier (othertop);  				}  				else {  					bottomModifier (otherbottom);  				}  			}  		}  		if (bottom && Math.Abs (bottomdi - item.Distance) < SnapGridHelper.SnapableWithinDistance) {  			if (item.Type == SnapType.Distance) {  				ty = Math.Round (SnapGridHelper.SnapableDistanceTopBottomX (curObj' item.other)) + .5;  				snaplines.Add (new SnapLine {  					color = SnapLine.DistanceLineColor'  					x1 = ty'  					x2 = ty'  					y1 = curObj.Height'  					y2 = curObj.Height + SnapGridHelper.SnapDistance  				});  			}  			else {  				bottomside.y1 = bottomside.y2 = curObj.Height + 0.5;  				bottomside.x1 = Math.Min (bottomside.x1' otherleft - Canvas.GetLeft (curObj));  				bottomside.x2 = Math.Max (bottomside.x2' otherleft + item.other.Width - (Canvas.GetLeft (curObj)));  			}  		}  		break;  	default:  		throw new InvalidOperationException ("Enum not it!");  	}  }  
Magic Number,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,ShowSnaps,The following statement contains a magic number: foreach (SnapGridDistance item in dist) {  	double otherleft = SnapGridHelper.Left (item.other);  	double otherright = SnapGridHelper.Right (item.other);  	double othertop = SnapGridHelper.Top (item.other);  	double otherbottom = SnapGridHelper.Bottom (item.other);  	if (item.other == ZDash) {  		otherright = otherbottom = 0;  		otherleft = ZDash.ActualWidth;  		othertop = ZDash.ActualHeight;  	}  	switch (item.Location) {  	case SnapGridDirections.X:  		if (!left) {  			left = true;  			leftdi = item.Distance;  			if (leftModifier != null) {  				if (item.Type == SnapType.Distance) {  					leftModifier (otherright + SnapGridHelper.SnapDistance);  				}  				else if (item.Type == SnapType.Equal1) {  					leftModifier (otherright);  				}  				else {  					leftModifier (otherleft);  				}  			}  		}  		if (left && Math.Abs (leftdi - item.Distance) < SnapGridHelper.SnapableWithinDistance) {  			if (item.Type == SnapType.Distance) {  				ty = Math.Round (SnapGridHelper.SnapableDistanceLeftRightY (curObj' item.other)) + .5;  				snaplines.Add (new SnapLine {  					y1 = ty'  					y2 = ty'  					color = SnapLine.DistanceLineColor'  					x1 = -SnapGridHelper.SnapDistance'  					x2 = 0  				});  			}  			else {  				leftside.x1 = leftside.x2;  				leftside.y1 = Math.Min (leftside.y1' othertop - Canvas.GetTop (curObj));  				leftside.y2 = Math.Max (leftside.y2' othertop + item.other.Height - (Canvas.GetTop (curObj)));  			}  		}  		break;  	case SnapGridDirections.Y:  		if (!top) {  			top = true;  			topdi = item.Distance;  			if (topModifier != null) {  				if (item.Type == SnapType.Distance) {  					topModifier (otherbottom + SnapGridHelper.SnapDistance);  				}  				else if (item.Type == SnapType.Equal1) {  					topModifier (otherbottom);  				}  				else {  					topModifier (othertop);  				}  			}  		}  		if (top && Math.Abs (topdi - item.Distance) < SnapGridHelper.SnapableWithinDistance) {  			if (item.Type == SnapType.Distance) {  				ty = Math.Round (SnapGridHelper.SnapableDistanceTopBottomX (curObj' item.other)) + .5;  				snaplines.Add (new SnapLine {  					color = SnapLine.DistanceLineColor'  					x1 = ty'  					x2 = ty'  					y1 = 0'  					y2 = -SnapGridHelper.SnapDistance  				});  			}  			else {  				topside.y1 = topside.y2;  				topside.x1 = Math.Min (topside.x1' otherleft - Canvas.GetLeft (curObj));  				topside.x2 = Math.Max (topside.x2' otherleft + item.other.Width - (Canvas.GetLeft (curObj)));  			}  		}  		break;  	case SnapGridDirections.Right:  		if (!right) {  			right = true;  			rightdi = item.Distance;  			if (rightModifier != null) {  				if (item.Type == SnapType.Distance) {  					rightModifier (otherleft - SnapGridHelper.SnapDistance);  				}  				else if (item.Type == SnapType.Equal1) {  					rightModifier (otherleft);  				}  				else {  					rightModifier (otherright);  				}  			}  		}  		if (right && Math.Abs (rightdi - item.Distance) < SnapGridHelper.SnapableWithinDistance) {  			if (item.Type == SnapType.Distance) {  				ty = Math.Round (SnapGridHelper.SnapableDistanceLeftRightY (curObj' item.other)) + .5;  				snaplines.Add (new SnapLine {  					y1 = ty'  					y2 = ty'  					color = SnapLine.DistanceLineColor'  					x1 = curObj.Width + SnapGridHelper.SnapDistance'  					x2 = curObj.Width  				});  			}  			else {  				rightside.x1 = rightside.x2 = curObj.Width + 0.5;  				rightside.y1 = Math.Min (rightside.y1' othertop - Canvas.GetTop (curObj));  				rightside.y2 = Math.Max (rightside.y2' othertop + item.other.Height - (Canvas.GetTop (curObj)));  			}  		}  		break;  	case SnapGridDirections.Bottom:  		if (!bottom) {  			bottom = true;  			bottomdi = item.Distance;  			if (bottomModifier != null) {  				if (item.Type == SnapType.Distance) {  					bottomModifier (othertop - SnapGridHelper.SnapDistance);  				}  				else if (item.Type == SnapType.Equal1) {  					bottomModifier (othertop);  				}  				else {  					bottomModifier (otherbottom);  				}  			}  		}  		if (bottom && Math.Abs (bottomdi - item.Distance) < SnapGridHelper.SnapableWithinDistance) {  			if (item.Type == SnapType.Distance) {  				ty = Math.Round (SnapGridHelper.SnapableDistanceTopBottomX (curObj' item.other)) + .5;  				snaplines.Add (new SnapLine {  					color = SnapLine.DistanceLineColor'  					x1 = ty'  					x2 = ty'  					y1 = curObj.Height'  					y2 = curObj.Height + SnapGridHelper.SnapDistance  				});  			}  			else {  				bottomside.y1 = bottomside.y2 = curObj.Height + 0.5;  				bottomside.x1 = Math.Min (bottomside.x1' otherleft - Canvas.GetLeft (curObj));  				bottomside.x2 = Math.Max (bottomside.x2' otherleft + item.other.Width - (Canvas.GetLeft (curObj)));  			}  		}  		break;  	default:  		throw new InvalidOperationException ("Enum not it!");  	}  }  
Magic Number,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,ShowSnaps,The following statement contains a magic number: foreach (SnapGridDistance item in dist) {  	double otherleft = SnapGridHelper.Left (item.other);  	double otherright = SnapGridHelper.Right (item.other);  	double othertop = SnapGridHelper.Top (item.other);  	double otherbottom = SnapGridHelper.Bottom (item.other);  	if (item.other == ZDash) {  		otherright = otherbottom = 0;  		otherleft = ZDash.ActualWidth;  		othertop = ZDash.ActualHeight;  	}  	switch (item.Location) {  	case SnapGridDirections.X:  		if (!left) {  			left = true;  			leftdi = item.Distance;  			if (leftModifier != null) {  				if (item.Type == SnapType.Distance) {  					leftModifier (otherright + SnapGridHelper.SnapDistance);  				}  				else if (item.Type == SnapType.Equal1) {  					leftModifier (otherright);  				}  				else {  					leftModifier (otherleft);  				}  			}  		}  		if (left && Math.Abs (leftdi - item.Distance) < SnapGridHelper.SnapableWithinDistance) {  			if (item.Type == SnapType.Distance) {  				ty = Math.Round (SnapGridHelper.SnapableDistanceLeftRightY (curObj' item.other)) + .5;  				snaplines.Add (new SnapLine {  					y1 = ty'  					y2 = ty'  					color = SnapLine.DistanceLineColor'  					x1 = -SnapGridHelper.SnapDistance'  					x2 = 0  				});  			}  			else {  				leftside.x1 = leftside.x2;  				leftside.y1 = Math.Min (leftside.y1' othertop - Canvas.GetTop (curObj));  				leftside.y2 = Math.Max (leftside.y2' othertop + item.other.Height - (Canvas.GetTop (curObj)));  			}  		}  		break;  	case SnapGridDirections.Y:  		if (!top) {  			top = true;  			topdi = item.Distance;  			if (topModifier != null) {  				if (item.Type == SnapType.Distance) {  					topModifier (otherbottom + SnapGridHelper.SnapDistance);  				}  				else if (item.Type == SnapType.Equal1) {  					topModifier (otherbottom);  				}  				else {  					topModifier (othertop);  				}  			}  		}  		if (top && Math.Abs (topdi - item.Distance) < SnapGridHelper.SnapableWithinDistance) {  			if (item.Type == SnapType.Distance) {  				ty = Math.Round (SnapGridHelper.SnapableDistanceTopBottomX (curObj' item.other)) + .5;  				snaplines.Add (new SnapLine {  					color = SnapLine.DistanceLineColor'  					x1 = ty'  					x2 = ty'  					y1 = 0'  					y2 = -SnapGridHelper.SnapDistance  				});  			}  			else {  				topside.y1 = topside.y2;  				topside.x1 = Math.Min (topside.x1' otherleft - Canvas.GetLeft (curObj));  				topside.x2 = Math.Max (topside.x2' otherleft + item.other.Width - (Canvas.GetLeft (curObj)));  			}  		}  		break;  	case SnapGridDirections.Right:  		if (!right) {  			right = true;  			rightdi = item.Distance;  			if (rightModifier != null) {  				if (item.Type == SnapType.Distance) {  					rightModifier (otherleft - SnapGridHelper.SnapDistance);  				}  				else if (item.Type == SnapType.Equal1) {  					rightModifier (otherleft);  				}  				else {  					rightModifier (otherright);  				}  			}  		}  		if (right && Math.Abs (rightdi - item.Distance) < SnapGridHelper.SnapableWithinDistance) {  			if (item.Type == SnapType.Distance) {  				ty = Math.Round (SnapGridHelper.SnapableDistanceLeftRightY (curObj' item.other)) + .5;  				snaplines.Add (new SnapLine {  					y1 = ty'  					y2 = ty'  					color = SnapLine.DistanceLineColor'  					x1 = curObj.Width + SnapGridHelper.SnapDistance'  					x2 = curObj.Width  				});  			}  			else {  				rightside.x1 = rightside.x2 = curObj.Width + 0.5;  				rightside.y1 = Math.Min (rightside.y1' othertop - Canvas.GetTop (curObj));  				rightside.y2 = Math.Max (rightside.y2' othertop + item.other.Height - (Canvas.GetTop (curObj)));  			}  		}  		break;  	case SnapGridDirections.Bottom:  		if (!bottom) {  			bottom = true;  			bottomdi = item.Distance;  			if (bottomModifier != null) {  				if (item.Type == SnapType.Distance) {  					bottomModifier (othertop - SnapGridHelper.SnapDistance);  				}  				else if (item.Type == SnapType.Equal1) {  					bottomModifier (othertop);  				}  				else {  					bottomModifier (otherbottom);  				}  			}  		}  		if (bottom && Math.Abs (bottomdi - item.Distance) < SnapGridHelper.SnapableWithinDistance) {  			if (item.Type == SnapType.Distance) {  				ty = Math.Round (SnapGridHelper.SnapableDistanceTopBottomX (curObj' item.other)) + .5;  				snaplines.Add (new SnapLine {  					color = SnapLine.DistanceLineColor'  					x1 = ty'  					x2 = ty'  					y1 = curObj.Height'  					y2 = curObj.Height + SnapGridHelper.SnapDistance  				});  			}  			else {  				bottomside.y1 = bottomside.y2 = curObj.Height + 0.5;  				bottomside.x1 = Math.Min (bottomside.x1' otherleft - Canvas.GetLeft (curObj));  				bottomside.x2 = Math.Max (bottomside.x2' otherleft + item.other.Width - (Canvas.GetLeft (curObj)));  			}  		}  		break;  	default:  		throw new InvalidOperationException ("Enum not it!");  	}  }  
Magic Number,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,ShowSnaps,The following statement contains a magic number: switch (item.Location) {  case SnapGridDirections.X:  	if (!left) {  		left = true;  		leftdi = item.Distance;  		if (leftModifier != null) {  			if (item.Type == SnapType.Distance) {  				leftModifier (otherright + SnapGridHelper.SnapDistance);  			}  			else if (item.Type == SnapType.Equal1) {  				leftModifier (otherright);  			}  			else {  				leftModifier (otherleft);  			}  		}  	}  	if (left && Math.Abs (leftdi - item.Distance) < SnapGridHelper.SnapableWithinDistance) {  		if (item.Type == SnapType.Distance) {  			ty = Math.Round (SnapGridHelper.SnapableDistanceLeftRightY (curObj' item.other)) + .5;  			snaplines.Add (new SnapLine {  				y1 = ty'  				y2 = ty'  				color = SnapLine.DistanceLineColor'  				x1 = -SnapGridHelper.SnapDistance'  				x2 = 0  			});  		}  		else {  			leftside.x1 = leftside.x2;  			leftside.y1 = Math.Min (leftside.y1' othertop - Canvas.GetTop (curObj));  			leftside.y2 = Math.Max (leftside.y2' othertop + item.other.Height - (Canvas.GetTop (curObj)));  		}  	}  	break;  case SnapGridDirections.Y:  	if (!top) {  		top = true;  		topdi = item.Distance;  		if (topModifier != null) {  			if (item.Type == SnapType.Distance) {  				topModifier (otherbottom + SnapGridHelper.SnapDistance);  			}  			else if (item.Type == SnapType.Equal1) {  				topModifier (otherbottom);  			}  			else {  				topModifier (othertop);  			}  		}  	}  	if (top && Math.Abs (topdi - item.Distance) < SnapGridHelper.SnapableWithinDistance) {  		if (item.Type == SnapType.Distance) {  			ty = Math.Round (SnapGridHelper.SnapableDistanceTopBottomX (curObj' item.other)) + .5;  			snaplines.Add (new SnapLine {  				color = SnapLine.DistanceLineColor'  				x1 = ty'  				x2 = ty'  				y1 = 0'  				y2 = -SnapGridHelper.SnapDistance  			});  		}  		else {  			topside.y1 = topside.y2;  			topside.x1 = Math.Min (topside.x1' otherleft - Canvas.GetLeft (curObj));  			topside.x2 = Math.Max (topside.x2' otherleft + item.other.Width - (Canvas.GetLeft (curObj)));  		}  	}  	break;  case SnapGridDirections.Right:  	if (!right) {  		right = true;  		rightdi = item.Distance;  		if (rightModifier != null) {  			if (item.Type == SnapType.Distance) {  				rightModifier (otherleft - SnapGridHelper.SnapDistance);  			}  			else if (item.Type == SnapType.Equal1) {  				rightModifier (otherleft);  			}  			else {  				rightModifier (otherright);  			}  		}  	}  	if (right && Math.Abs (rightdi - item.Distance) < SnapGridHelper.SnapableWithinDistance) {  		if (item.Type == SnapType.Distance) {  			ty = Math.Round (SnapGridHelper.SnapableDistanceLeftRightY (curObj' item.other)) + .5;  			snaplines.Add (new SnapLine {  				y1 = ty'  				y2 = ty'  				color = SnapLine.DistanceLineColor'  				x1 = curObj.Width + SnapGridHelper.SnapDistance'  				x2 = curObj.Width  			});  		}  		else {  			rightside.x1 = rightside.x2 = curObj.Width + 0.5;  			rightside.y1 = Math.Min (rightside.y1' othertop - Canvas.GetTop (curObj));  			rightside.y2 = Math.Max (rightside.y2' othertop + item.other.Height - (Canvas.GetTop (curObj)));  		}  	}  	break;  case SnapGridDirections.Bottom:  	if (!bottom) {  		bottom = true;  		bottomdi = item.Distance;  		if (bottomModifier != null) {  			if (item.Type == SnapType.Distance) {  				bottomModifier (othertop - SnapGridHelper.SnapDistance);  			}  			else if (item.Type == SnapType.Equal1) {  				bottomModifier (othertop);  			}  			else {  				bottomModifier (otherbottom);  			}  		}  	}  	if (bottom && Math.Abs (bottomdi - item.Distance) < SnapGridHelper.SnapableWithinDistance) {  		if (item.Type == SnapType.Distance) {  			ty = Math.Round (SnapGridHelper.SnapableDistanceTopBottomX (curObj' item.other)) + .5;  			snaplines.Add (new SnapLine {  				color = SnapLine.DistanceLineColor'  				x1 = ty'  				x2 = ty'  				y1 = curObj.Height'  				y2 = curObj.Height + SnapGridHelper.SnapDistance  			});  		}  		else {  			bottomside.y1 = bottomside.y2 = curObj.Height + 0.5;  			bottomside.x1 = Math.Min (bottomside.x1' otherleft - Canvas.GetLeft (curObj));  			bottomside.x2 = Math.Max (bottomside.x2' otherleft + item.other.Width - (Canvas.GetLeft (curObj)));  		}  	}  	break;  default:  	throw new InvalidOperationException ("Enum not it!");  }  
Magic Number,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,ShowSnaps,The following statement contains a magic number: switch (item.Location) {  case SnapGridDirections.X:  	if (!left) {  		left = true;  		leftdi = item.Distance;  		if (leftModifier != null) {  			if (item.Type == SnapType.Distance) {  				leftModifier (otherright + SnapGridHelper.SnapDistance);  			}  			else if (item.Type == SnapType.Equal1) {  				leftModifier (otherright);  			}  			else {  				leftModifier (otherleft);  			}  		}  	}  	if (left && Math.Abs (leftdi - item.Distance) < SnapGridHelper.SnapableWithinDistance) {  		if (item.Type == SnapType.Distance) {  			ty = Math.Round (SnapGridHelper.SnapableDistanceLeftRightY (curObj' item.other)) + .5;  			snaplines.Add (new SnapLine {  				y1 = ty'  				y2 = ty'  				color = SnapLine.DistanceLineColor'  				x1 = -SnapGridHelper.SnapDistance'  				x2 = 0  			});  		}  		else {  			leftside.x1 = leftside.x2;  			leftside.y1 = Math.Min (leftside.y1' othertop - Canvas.GetTop (curObj));  			leftside.y2 = Math.Max (leftside.y2' othertop + item.other.Height - (Canvas.GetTop (curObj)));  		}  	}  	break;  case SnapGridDirections.Y:  	if (!top) {  		top = true;  		topdi = item.Distance;  		if (topModifier != null) {  			if (item.Type == SnapType.Distance) {  				topModifier (otherbottom + SnapGridHelper.SnapDistance);  			}  			else if (item.Type == SnapType.Equal1) {  				topModifier (otherbottom);  			}  			else {  				topModifier (othertop);  			}  		}  	}  	if (top && Math.Abs (topdi - item.Distance) < SnapGridHelper.SnapableWithinDistance) {  		if (item.Type == SnapType.Distance) {  			ty = Math.Round (SnapGridHelper.SnapableDistanceTopBottomX (curObj' item.other)) + .5;  			snaplines.Add (new SnapLine {  				color = SnapLine.DistanceLineColor'  				x1 = ty'  				x2 = ty'  				y1 = 0'  				y2 = -SnapGridHelper.SnapDistance  			});  		}  		else {  			topside.y1 = topside.y2;  			topside.x1 = Math.Min (topside.x1' otherleft - Canvas.GetLeft (curObj));  			topside.x2 = Math.Max (topside.x2' otherleft + item.other.Width - (Canvas.GetLeft (curObj)));  		}  	}  	break;  case SnapGridDirections.Right:  	if (!right) {  		right = true;  		rightdi = item.Distance;  		if (rightModifier != null) {  			if (item.Type == SnapType.Distance) {  				rightModifier (otherleft - SnapGridHelper.SnapDistance);  			}  			else if (item.Type == SnapType.Equal1) {  				rightModifier (otherleft);  			}  			else {  				rightModifier (otherright);  			}  		}  	}  	if (right && Math.Abs (rightdi - item.Distance) < SnapGridHelper.SnapableWithinDistance) {  		if (item.Type == SnapType.Distance) {  			ty = Math.Round (SnapGridHelper.SnapableDistanceLeftRightY (curObj' item.other)) + .5;  			snaplines.Add (new SnapLine {  				y1 = ty'  				y2 = ty'  				color = SnapLine.DistanceLineColor'  				x1 = curObj.Width + SnapGridHelper.SnapDistance'  				x2 = curObj.Width  			});  		}  		else {  			rightside.x1 = rightside.x2 = curObj.Width + 0.5;  			rightside.y1 = Math.Min (rightside.y1' othertop - Canvas.GetTop (curObj));  			rightside.y2 = Math.Max (rightside.y2' othertop + item.other.Height - (Canvas.GetTop (curObj)));  		}  	}  	break;  case SnapGridDirections.Bottom:  	if (!bottom) {  		bottom = true;  		bottomdi = item.Distance;  		if (bottomModifier != null) {  			if (item.Type == SnapType.Distance) {  				bottomModifier (othertop - SnapGridHelper.SnapDistance);  			}  			else if (item.Type == SnapType.Equal1) {  				bottomModifier (othertop);  			}  			else {  				bottomModifier (otherbottom);  			}  		}  	}  	if (bottom && Math.Abs (bottomdi - item.Distance) < SnapGridHelper.SnapableWithinDistance) {  		if (item.Type == SnapType.Distance) {  			ty = Math.Round (SnapGridHelper.SnapableDistanceTopBottomX (curObj' item.other)) + .5;  			snaplines.Add (new SnapLine {  				color = SnapLine.DistanceLineColor'  				x1 = ty'  				x2 = ty'  				y1 = curObj.Height'  				y2 = curObj.Height + SnapGridHelper.SnapDistance  			});  		}  		else {  			bottomside.y1 = bottomside.y2 = curObj.Height + 0.5;  			bottomside.x1 = Math.Min (bottomside.x1' otherleft - Canvas.GetLeft (curObj));  			bottomside.x2 = Math.Max (bottomside.x2' otherleft + item.other.Width - (Canvas.GetLeft (curObj)));  		}  	}  	break;  default:  	throw new InvalidOperationException ("Enum not it!");  }  
Magic Number,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,ShowSnaps,The following statement contains a magic number: switch (item.Location) {  case SnapGridDirections.X:  	if (!left) {  		left = true;  		leftdi = item.Distance;  		if (leftModifier != null) {  			if (item.Type == SnapType.Distance) {  				leftModifier (otherright + SnapGridHelper.SnapDistance);  			}  			else if (item.Type == SnapType.Equal1) {  				leftModifier (otherright);  			}  			else {  				leftModifier (otherleft);  			}  		}  	}  	if (left && Math.Abs (leftdi - item.Distance) < SnapGridHelper.SnapableWithinDistance) {  		if (item.Type == SnapType.Distance) {  			ty = Math.Round (SnapGridHelper.SnapableDistanceLeftRightY (curObj' item.other)) + .5;  			snaplines.Add (new SnapLine {  				y1 = ty'  				y2 = ty'  				color = SnapLine.DistanceLineColor'  				x1 = -SnapGridHelper.SnapDistance'  				x2 = 0  			});  		}  		else {  			leftside.x1 = leftside.x2;  			leftside.y1 = Math.Min (leftside.y1' othertop - Canvas.GetTop (curObj));  			leftside.y2 = Math.Max (leftside.y2' othertop + item.other.Height - (Canvas.GetTop (curObj)));  		}  	}  	break;  case SnapGridDirections.Y:  	if (!top) {  		top = true;  		topdi = item.Distance;  		if (topModifier != null) {  			if (item.Type == SnapType.Distance) {  				topModifier (otherbottom + SnapGridHelper.SnapDistance);  			}  			else if (item.Type == SnapType.Equal1) {  				topModifier (otherbottom);  			}  			else {  				topModifier (othertop);  			}  		}  	}  	if (top && Math.Abs (topdi - item.Distance) < SnapGridHelper.SnapableWithinDistance) {  		if (item.Type == SnapType.Distance) {  			ty = Math.Round (SnapGridHelper.SnapableDistanceTopBottomX (curObj' item.other)) + .5;  			snaplines.Add (new SnapLine {  				color = SnapLine.DistanceLineColor'  				x1 = ty'  				x2 = ty'  				y1 = 0'  				y2 = -SnapGridHelper.SnapDistance  			});  		}  		else {  			topside.y1 = topside.y2;  			topside.x1 = Math.Min (topside.x1' otherleft - Canvas.GetLeft (curObj));  			topside.x2 = Math.Max (topside.x2' otherleft + item.other.Width - (Canvas.GetLeft (curObj)));  		}  	}  	break;  case SnapGridDirections.Right:  	if (!right) {  		right = true;  		rightdi = item.Distance;  		if (rightModifier != null) {  			if (item.Type == SnapType.Distance) {  				rightModifier (otherleft - SnapGridHelper.SnapDistance);  			}  			else if (item.Type == SnapType.Equal1) {  				rightModifier (otherleft);  			}  			else {  				rightModifier (otherright);  			}  		}  	}  	if (right && Math.Abs (rightdi - item.Distance) < SnapGridHelper.SnapableWithinDistance) {  		if (item.Type == SnapType.Distance) {  			ty = Math.Round (SnapGridHelper.SnapableDistanceLeftRightY (curObj' item.other)) + .5;  			snaplines.Add (new SnapLine {  				y1 = ty'  				y2 = ty'  				color = SnapLine.DistanceLineColor'  				x1 = curObj.Width + SnapGridHelper.SnapDistance'  				x2 = curObj.Width  			});  		}  		else {  			rightside.x1 = rightside.x2 = curObj.Width + 0.5;  			rightside.y1 = Math.Min (rightside.y1' othertop - Canvas.GetTop (curObj));  			rightside.y2 = Math.Max (rightside.y2' othertop + item.other.Height - (Canvas.GetTop (curObj)));  		}  	}  	break;  case SnapGridDirections.Bottom:  	if (!bottom) {  		bottom = true;  		bottomdi = item.Distance;  		if (bottomModifier != null) {  			if (item.Type == SnapType.Distance) {  				bottomModifier (othertop - SnapGridHelper.SnapDistance);  			}  			else if (item.Type == SnapType.Equal1) {  				bottomModifier (othertop);  			}  			else {  				bottomModifier (otherbottom);  			}  		}  	}  	if (bottom && Math.Abs (bottomdi - item.Distance) < SnapGridHelper.SnapableWithinDistance) {  		if (item.Type == SnapType.Distance) {  			ty = Math.Round (SnapGridHelper.SnapableDistanceTopBottomX (curObj' item.other)) + .5;  			snaplines.Add (new SnapLine {  				color = SnapLine.DistanceLineColor'  				x1 = ty'  				x2 = ty'  				y1 = curObj.Height'  				y2 = curObj.Height + SnapGridHelper.SnapDistance  			});  		}  		else {  			bottomside.y1 = bottomside.y2 = curObj.Height + 0.5;  			bottomside.x1 = Math.Min (bottomside.x1' otherleft - Canvas.GetLeft (curObj));  			bottomside.x2 = Math.Max (bottomside.x2' otherleft + item.other.Width - (Canvas.GetLeft (curObj)));  		}  	}  	break;  default:  	throw new InvalidOperationException ("Enum not it!");  }  
Magic Number,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,ShowSnaps,The following statement contains a magic number: switch (item.Location) {  case SnapGridDirections.X:  	if (!left) {  		left = true;  		leftdi = item.Distance;  		if (leftModifier != null) {  			if (item.Type == SnapType.Distance) {  				leftModifier (otherright + SnapGridHelper.SnapDistance);  			}  			else if (item.Type == SnapType.Equal1) {  				leftModifier (otherright);  			}  			else {  				leftModifier (otherleft);  			}  		}  	}  	if (left && Math.Abs (leftdi - item.Distance) < SnapGridHelper.SnapableWithinDistance) {  		if (item.Type == SnapType.Distance) {  			ty = Math.Round (SnapGridHelper.SnapableDistanceLeftRightY (curObj' item.other)) + .5;  			snaplines.Add (new SnapLine {  				y1 = ty'  				y2 = ty'  				color = SnapLine.DistanceLineColor'  				x1 = -SnapGridHelper.SnapDistance'  				x2 = 0  			});  		}  		else {  			leftside.x1 = leftside.x2;  			leftside.y1 = Math.Min (leftside.y1' othertop - Canvas.GetTop (curObj));  			leftside.y2 = Math.Max (leftside.y2' othertop + item.other.Height - (Canvas.GetTop (curObj)));  		}  	}  	break;  case SnapGridDirections.Y:  	if (!top) {  		top = true;  		topdi = item.Distance;  		if (topModifier != null) {  			if (item.Type == SnapType.Distance) {  				topModifier (otherbottom + SnapGridHelper.SnapDistance);  			}  			else if (item.Type == SnapType.Equal1) {  				topModifier (otherbottom);  			}  			else {  				topModifier (othertop);  			}  		}  	}  	if (top && Math.Abs (topdi - item.Distance) < SnapGridHelper.SnapableWithinDistance) {  		if (item.Type == SnapType.Distance) {  			ty = Math.Round (SnapGridHelper.SnapableDistanceTopBottomX (curObj' item.other)) + .5;  			snaplines.Add (new SnapLine {  				color = SnapLine.DistanceLineColor'  				x1 = ty'  				x2 = ty'  				y1 = 0'  				y2 = -SnapGridHelper.SnapDistance  			});  		}  		else {  			topside.y1 = topside.y2;  			topside.x1 = Math.Min (topside.x1' otherleft - Canvas.GetLeft (curObj));  			topside.x2 = Math.Max (topside.x2' otherleft + item.other.Width - (Canvas.GetLeft (curObj)));  		}  	}  	break;  case SnapGridDirections.Right:  	if (!right) {  		right = true;  		rightdi = item.Distance;  		if (rightModifier != null) {  			if (item.Type == SnapType.Distance) {  				rightModifier (otherleft - SnapGridHelper.SnapDistance);  			}  			else if (item.Type == SnapType.Equal1) {  				rightModifier (otherleft);  			}  			else {  				rightModifier (otherright);  			}  		}  	}  	if (right && Math.Abs (rightdi - item.Distance) < SnapGridHelper.SnapableWithinDistance) {  		if (item.Type == SnapType.Distance) {  			ty = Math.Round (SnapGridHelper.SnapableDistanceLeftRightY (curObj' item.other)) + .5;  			snaplines.Add (new SnapLine {  				y1 = ty'  				y2 = ty'  				color = SnapLine.DistanceLineColor'  				x1 = curObj.Width + SnapGridHelper.SnapDistance'  				x2 = curObj.Width  			});  		}  		else {  			rightside.x1 = rightside.x2 = curObj.Width + 0.5;  			rightside.y1 = Math.Min (rightside.y1' othertop - Canvas.GetTop (curObj));  			rightside.y2 = Math.Max (rightside.y2' othertop + item.other.Height - (Canvas.GetTop (curObj)));  		}  	}  	break;  case SnapGridDirections.Bottom:  	if (!bottom) {  		bottom = true;  		bottomdi = item.Distance;  		if (bottomModifier != null) {  			if (item.Type == SnapType.Distance) {  				bottomModifier (othertop - SnapGridHelper.SnapDistance);  			}  			else if (item.Type == SnapType.Equal1) {  				bottomModifier (othertop);  			}  			else {  				bottomModifier (otherbottom);  			}  		}  	}  	if (bottom && Math.Abs (bottomdi - item.Distance) < SnapGridHelper.SnapableWithinDistance) {  		if (item.Type == SnapType.Distance) {  			ty = Math.Round (SnapGridHelper.SnapableDistanceTopBottomX (curObj' item.other)) + .5;  			snaplines.Add (new SnapLine {  				color = SnapLine.DistanceLineColor'  				x1 = ty'  				x2 = ty'  				y1 = curObj.Height'  				y2 = curObj.Height + SnapGridHelper.SnapDistance  			});  		}  		else {  			bottomside.y1 = bottomside.y2 = curObj.Height + 0.5;  			bottomside.x1 = Math.Min (bottomside.x1' otherleft - Canvas.GetLeft (curObj));  			bottomside.x2 = Math.Max (bottomside.x2' otherleft + item.other.Width - (Canvas.GetLeft (curObj)));  		}  	}  	break;  default:  	throw new InvalidOperationException ("Enum not it!");  }  
Magic Number,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,ShowSnaps,The following statement contains a magic number: switch (item.Location) {  case SnapGridDirections.X:  	if (!left) {  		left = true;  		leftdi = item.Distance;  		if (leftModifier != null) {  			if (item.Type == SnapType.Distance) {  				leftModifier (otherright + SnapGridHelper.SnapDistance);  			}  			else if (item.Type == SnapType.Equal1) {  				leftModifier (otherright);  			}  			else {  				leftModifier (otherleft);  			}  		}  	}  	if (left && Math.Abs (leftdi - item.Distance) < SnapGridHelper.SnapableWithinDistance) {  		if (item.Type == SnapType.Distance) {  			ty = Math.Round (SnapGridHelper.SnapableDistanceLeftRightY (curObj' item.other)) + .5;  			snaplines.Add (new SnapLine {  				y1 = ty'  				y2 = ty'  				color = SnapLine.DistanceLineColor'  				x1 = -SnapGridHelper.SnapDistance'  				x2 = 0  			});  		}  		else {  			leftside.x1 = leftside.x2;  			leftside.y1 = Math.Min (leftside.y1' othertop - Canvas.GetTop (curObj));  			leftside.y2 = Math.Max (leftside.y2' othertop + item.other.Height - (Canvas.GetTop (curObj)));  		}  	}  	break;  case SnapGridDirections.Y:  	if (!top) {  		top = true;  		topdi = item.Distance;  		if (topModifier != null) {  			if (item.Type == SnapType.Distance) {  				topModifier (otherbottom + SnapGridHelper.SnapDistance);  			}  			else if (item.Type == SnapType.Equal1) {  				topModifier (otherbottom);  			}  			else {  				topModifier (othertop);  			}  		}  	}  	if (top && Math.Abs (topdi - item.Distance) < SnapGridHelper.SnapableWithinDistance) {  		if (item.Type == SnapType.Distance) {  			ty = Math.Round (SnapGridHelper.SnapableDistanceTopBottomX (curObj' item.other)) + .5;  			snaplines.Add (new SnapLine {  				color = SnapLine.DistanceLineColor'  				x1 = ty'  				x2 = ty'  				y1 = 0'  				y2 = -SnapGridHelper.SnapDistance  			});  		}  		else {  			topside.y1 = topside.y2;  			topside.x1 = Math.Min (topside.x1' otherleft - Canvas.GetLeft (curObj));  			topside.x2 = Math.Max (topside.x2' otherleft + item.other.Width - (Canvas.GetLeft (curObj)));  		}  	}  	break;  case SnapGridDirections.Right:  	if (!right) {  		right = true;  		rightdi = item.Distance;  		if (rightModifier != null) {  			if (item.Type == SnapType.Distance) {  				rightModifier (otherleft - SnapGridHelper.SnapDistance);  			}  			else if (item.Type == SnapType.Equal1) {  				rightModifier (otherleft);  			}  			else {  				rightModifier (otherright);  			}  		}  	}  	if (right && Math.Abs (rightdi - item.Distance) < SnapGridHelper.SnapableWithinDistance) {  		if (item.Type == SnapType.Distance) {  			ty = Math.Round (SnapGridHelper.SnapableDistanceLeftRightY (curObj' item.other)) + .5;  			snaplines.Add (new SnapLine {  				y1 = ty'  				y2 = ty'  				color = SnapLine.DistanceLineColor'  				x1 = curObj.Width + SnapGridHelper.SnapDistance'  				x2 = curObj.Width  			});  		}  		else {  			rightside.x1 = rightside.x2 = curObj.Width + 0.5;  			rightside.y1 = Math.Min (rightside.y1' othertop - Canvas.GetTop (curObj));  			rightside.y2 = Math.Max (rightside.y2' othertop + item.other.Height - (Canvas.GetTop (curObj)));  		}  	}  	break;  case SnapGridDirections.Bottom:  	if (!bottom) {  		bottom = true;  		bottomdi = item.Distance;  		if (bottomModifier != null) {  			if (item.Type == SnapType.Distance) {  				bottomModifier (othertop - SnapGridHelper.SnapDistance);  			}  			else if (item.Type == SnapType.Equal1) {  				bottomModifier (othertop);  			}  			else {  				bottomModifier (otherbottom);  			}  		}  	}  	if (bottom && Math.Abs (bottomdi - item.Distance) < SnapGridHelper.SnapableWithinDistance) {  		if (item.Type == SnapType.Distance) {  			ty = Math.Round (SnapGridHelper.SnapableDistanceTopBottomX (curObj' item.other)) + .5;  			snaplines.Add (new SnapLine {  				color = SnapLine.DistanceLineColor'  				x1 = ty'  				x2 = ty'  				y1 = curObj.Height'  				y2 = curObj.Height + SnapGridHelper.SnapDistance  			});  		}  		else {  			bottomside.y1 = bottomside.y2 = curObj.Height + 0.5;  			bottomside.x1 = Math.Min (bottomside.x1' otherleft - Canvas.GetLeft (curObj));  			bottomside.x2 = Math.Max (bottomside.x2' otherleft + item.other.Width - (Canvas.GetLeft (curObj)));  		}  	}  	break;  default:  	throw new InvalidOperationException ("Enum not it!");  }  
Magic Number,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,ShowSnaps,The following statement contains a magic number: switch (item.Location) {  case SnapGridDirections.X:  	if (!left) {  		left = true;  		leftdi = item.Distance;  		if (leftModifier != null) {  			if (item.Type == SnapType.Distance) {  				leftModifier (otherright + SnapGridHelper.SnapDistance);  			}  			else if (item.Type == SnapType.Equal1) {  				leftModifier (otherright);  			}  			else {  				leftModifier (otherleft);  			}  		}  	}  	if (left && Math.Abs (leftdi - item.Distance) < SnapGridHelper.SnapableWithinDistance) {  		if (item.Type == SnapType.Distance) {  			ty = Math.Round (SnapGridHelper.SnapableDistanceLeftRightY (curObj' item.other)) + .5;  			snaplines.Add (new SnapLine {  				y1 = ty'  				y2 = ty'  				color = SnapLine.DistanceLineColor'  				x1 = -SnapGridHelper.SnapDistance'  				x2 = 0  			});  		}  		else {  			leftside.x1 = leftside.x2;  			leftside.y1 = Math.Min (leftside.y1' othertop - Canvas.GetTop (curObj));  			leftside.y2 = Math.Max (leftside.y2' othertop + item.other.Height - (Canvas.GetTop (curObj)));  		}  	}  	break;  case SnapGridDirections.Y:  	if (!top) {  		top = true;  		topdi = item.Distance;  		if (topModifier != null) {  			if (item.Type == SnapType.Distance) {  				topModifier (otherbottom + SnapGridHelper.SnapDistance);  			}  			else if (item.Type == SnapType.Equal1) {  				topModifier (otherbottom);  			}  			else {  				topModifier (othertop);  			}  		}  	}  	if (top && Math.Abs (topdi - item.Distance) < SnapGridHelper.SnapableWithinDistance) {  		if (item.Type == SnapType.Distance) {  			ty = Math.Round (SnapGridHelper.SnapableDistanceTopBottomX (curObj' item.other)) + .5;  			snaplines.Add (new SnapLine {  				color = SnapLine.DistanceLineColor'  				x1 = ty'  				x2 = ty'  				y1 = 0'  				y2 = -SnapGridHelper.SnapDistance  			});  		}  		else {  			topside.y1 = topside.y2;  			topside.x1 = Math.Min (topside.x1' otherleft - Canvas.GetLeft (curObj));  			topside.x2 = Math.Max (topside.x2' otherleft + item.other.Width - (Canvas.GetLeft (curObj)));  		}  	}  	break;  case SnapGridDirections.Right:  	if (!right) {  		right = true;  		rightdi = item.Distance;  		if (rightModifier != null) {  			if (item.Type == SnapType.Distance) {  				rightModifier (otherleft - SnapGridHelper.SnapDistance);  			}  			else if (item.Type == SnapType.Equal1) {  				rightModifier (otherleft);  			}  			else {  				rightModifier (otherright);  			}  		}  	}  	if (right && Math.Abs (rightdi - item.Distance) < SnapGridHelper.SnapableWithinDistance) {  		if (item.Type == SnapType.Distance) {  			ty = Math.Round (SnapGridHelper.SnapableDistanceLeftRightY (curObj' item.other)) + .5;  			snaplines.Add (new SnapLine {  				y1 = ty'  				y2 = ty'  				color = SnapLine.DistanceLineColor'  				x1 = curObj.Width + SnapGridHelper.SnapDistance'  				x2 = curObj.Width  			});  		}  		else {  			rightside.x1 = rightside.x2 = curObj.Width + 0.5;  			rightside.y1 = Math.Min (rightside.y1' othertop - Canvas.GetTop (curObj));  			rightside.y2 = Math.Max (rightside.y2' othertop + item.other.Height - (Canvas.GetTop (curObj)));  		}  	}  	break;  case SnapGridDirections.Bottom:  	if (!bottom) {  		bottom = true;  		bottomdi = item.Distance;  		if (bottomModifier != null) {  			if (item.Type == SnapType.Distance) {  				bottomModifier (othertop - SnapGridHelper.SnapDistance);  			}  			else if (item.Type == SnapType.Equal1) {  				bottomModifier (othertop);  			}  			else {  				bottomModifier (otherbottom);  			}  		}  	}  	if (bottom && Math.Abs (bottomdi - item.Distance) < SnapGridHelper.SnapableWithinDistance) {  		if (item.Type == SnapType.Distance) {  			ty = Math.Round (SnapGridHelper.SnapableDistanceTopBottomX (curObj' item.other)) + .5;  			snaplines.Add (new SnapLine {  				color = SnapLine.DistanceLineColor'  				x1 = ty'  				x2 = ty'  				y1 = curObj.Height'  				y2 = curObj.Height + SnapGridHelper.SnapDistance  			});  		}  		else {  			bottomside.y1 = bottomside.y2 = curObj.Height + 0.5;  			bottomside.x1 = Math.Min (bottomside.x1' otherleft - Canvas.GetLeft (curObj));  			bottomside.x2 = Math.Max (bottomside.x2' otherleft + item.other.Width - (Canvas.GetLeft (curObj)));  		}  	}  	break;  default:  	throw new InvalidOperationException ("Enum not it!");  }  
Magic Number,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,ShowSnaps,The following statement contains a magic number: if (left && Math.Abs (leftdi - item.Distance) < SnapGridHelper.SnapableWithinDistance) {  	if (item.Type == SnapType.Distance) {  		ty = Math.Round (SnapGridHelper.SnapableDistanceLeftRightY (curObj' item.other)) + .5;  		snaplines.Add (new SnapLine {  			y1 = ty'  			y2 = ty'  			color = SnapLine.DistanceLineColor'  			x1 = -SnapGridHelper.SnapDistance'  			x2 = 0  		});  	}  	else {  		leftside.x1 = leftside.x2;  		leftside.y1 = Math.Min (leftside.y1' othertop - Canvas.GetTop (curObj));  		leftside.y2 = Math.Max (leftside.y2' othertop + item.other.Height - (Canvas.GetTop (curObj)));  	}  }  
Magic Number,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,ShowSnaps,The following statement contains a magic number: if (item.Type == SnapType.Distance) {  	ty = Math.Round (SnapGridHelper.SnapableDistanceLeftRightY (curObj' item.other)) + .5;  	snaplines.Add (new SnapLine {  		y1 = ty'  		y2 = ty'  		color = SnapLine.DistanceLineColor'  		x1 = -SnapGridHelper.SnapDistance'  		x2 = 0  	});  }  else {  	leftside.x1 = leftside.x2;  	leftside.y1 = Math.Min (leftside.y1' othertop - Canvas.GetTop (curObj));  	leftside.y2 = Math.Max (leftside.y2' othertop + item.other.Height - (Canvas.GetTop (curObj)));  }  
Magic Number,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,ShowSnaps,The following statement contains a magic number: ty = Math.Round (SnapGridHelper.SnapableDistanceLeftRightY (curObj' item.other)) + .5;  
Magic Number,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,ShowSnaps,The following statement contains a magic number: if (top && Math.Abs (topdi - item.Distance) < SnapGridHelper.SnapableWithinDistance) {  	if (item.Type == SnapType.Distance) {  		ty = Math.Round (SnapGridHelper.SnapableDistanceTopBottomX (curObj' item.other)) + .5;  		snaplines.Add (new SnapLine {  			color = SnapLine.DistanceLineColor'  			x1 = ty'  			x2 = ty'  			y1 = 0'  			y2 = -SnapGridHelper.SnapDistance  		});  	}  	else {  		topside.y1 = topside.y2;  		topside.x1 = Math.Min (topside.x1' otherleft - Canvas.GetLeft (curObj));  		topside.x2 = Math.Max (topside.x2' otherleft + item.other.Width - (Canvas.GetLeft (curObj)));  	}  }  
Magic Number,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,ShowSnaps,The following statement contains a magic number: if (item.Type == SnapType.Distance) {  	ty = Math.Round (SnapGridHelper.SnapableDistanceTopBottomX (curObj' item.other)) + .5;  	snaplines.Add (new SnapLine {  		color = SnapLine.DistanceLineColor'  		x1 = ty'  		x2 = ty'  		y1 = 0'  		y2 = -SnapGridHelper.SnapDistance  	});  }  else {  	topside.y1 = topside.y2;  	topside.x1 = Math.Min (topside.x1' otherleft - Canvas.GetLeft (curObj));  	topside.x2 = Math.Max (topside.x2' otherleft + item.other.Width - (Canvas.GetLeft (curObj)));  }  
Magic Number,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,ShowSnaps,The following statement contains a magic number: ty = Math.Round (SnapGridHelper.SnapableDistanceTopBottomX (curObj' item.other)) + .5;  
Magic Number,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,ShowSnaps,The following statement contains a magic number: if (right && Math.Abs (rightdi - item.Distance) < SnapGridHelper.SnapableWithinDistance) {  	if (item.Type == SnapType.Distance) {  		ty = Math.Round (SnapGridHelper.SnapableDistanceLeftRightY (curObj' item.other)) + .5;  		snaplines.Add (new SnapLine {  			y1 = ty'  			y2 = ty'  			color = SnapLine.DistanceLineColor'  			x1 = curObj.Width + SnapGridHelper.SnapDistance'  			x2 = curObj.Width  		});  	}  	else {  		rightside.x1 = rightside.x2 = curObj.Width + 0.5;  		rightside.y1 = Math.Min (rightside.y1' othertop - Canvas.GetTop (curObj));  		rightside.y2 = Math.Max (rightside.y2' othertop + item.other.Height - (Canvas.GetTop (curObj)));  	}  }  
Magic Number,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,ShowSnaps,The following statement contains a magic number: if (right && Math.Abs (rightdi - item.Distance) < SnapGridHelper.SnapableWithinDistance) {  	if (item.Type == SnapType.Distance) {  		ty = Math.Round (SnapGridHelper.SnapableDistanceLeftRightY (curObj' item.other)) + .5;  		snaplines.Add (new SnapLine {  			y1 = ty'  			y2 = ty'  			color = SnapLine.DistanceLineColor'  			x1 = curObj.Width + SnapGridHelper.SnapDistance'  			x2 = curObj.Width  		});  	}  	else {  		rightside.x1 = rightside.x2 = curObj.Width + 0.5;  		rightside.y1 = Math.Min (rightside.y1' othertop - Canvas.GetTop (curObj));  		rightside.y2 = Math.Max (rightside.y2' othertop + item.other.Height - (Canvas.GetTop (curObj)));  	}  }  
Magic Number,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,ShowSnaps,The following statement contains a magic number: if (item.Type == SnapType.Distance) {  	ty = Math.Round (SnapGridHelper.SnapableDistanceLeftRightY (curObj' item.other)) + .5;  	snaplines.Add (new SnapLine {  		y1 = ty'  		y2 = ty'  		color = SnapLine.DistanceLineColor'  		x1 = curObj.Width + SnapGridHelper.SnapDistance'  		x2 = curObj.Width  	});  }  else {  	rightside.x1 = rightside.x2 = curObj.Width + 0.5;  	rightside.y1 = Math.Min (rightside.y1' othertop - Canvas.GetTop (curObj));  	rightside.y2 = Math.Max (rightside.y2' othertop + item.other.Height - (Canvas.GetTop (curObj)));  }  
Magic Number,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,ShowSnaps,The following statement contains a magic number: if (item.Type == SnapType.Distance) {  	ty = Math.Round (SnapGridHelper.SnapableDistanceLeftRightY (curObj' item.other)) + .5;  	snaplines.Add (new SnapLine {  		y1 = ty'  		y2 = ty'  		color = SnapLine.DistanceLineColor'  		x1 = curObj.Width + SnapGridHelper.SnapDistance'  		x2 = curObj.Width  	});  }  else {  	rightside.x1 = rightside.x2 = curObj.Width + 0.5;  	rightside.y1 = Math.Min (rightside.y1' othertop - Canvas.GetTop (curObj));  	rightside.y2 = Math.Max (rightside.y2' othertop + item.other.Height - (Canvas.GetTop (curObj)));  }  
Magic Number,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,ShowSnaps,The following statement contains a magic number: ty = Math.Round (SnapGridHelper.SnapableDistanceLeftRightY (curObj' item.other)) + .5;  
Magic Number,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,ShowSnaps,The following statement contains a magic number: rightside.x1 = rightside.x2 = curObj.Width + 0.5;  
Magic Number,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,ShowSnaps,The following statement contains a magic number: if (bottom && Math.Abs (bottomdi - item.Distance) < SnapGridHelper.SnapableWithinDistance) {  	if (item.Type == SnapType.Distance) {  		ty = Math.Round (SnapGridHelper.SnapableDistanceTopBottomX (curObj' item.other)) + .5;  		snaplines.Add (new SnapLine {  			color = SnapLine.DistanceLineColor'  			x1 = ty'  			x2 = ty'  			y1 = curObj.Height'  			y2 = curObj.Height + SnapGridHelper.SnapDistance  		});  	}  	else {  		bottomside.y1 = bottomside.y2 = curObj.Height + 0.5;  		bottomside.x1 = Math.Min (bottomside.x1' otherleft - Canvas.GetLeft (curObj));  		bottomside.x2 = Math.Max (bottomside.x2' otherleft + item.other.Width - (Canvas.GetLeft (curObj)));  	}  }  
Magic Number,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,ShowSnaps,The following statement contains a magic number: if (bottom && Math.Abs (bottomdi - item.Distance) < SnapGridHelper.SnapableWithinDistance) {  	if (item.Type == SnapType.Distance) {  		ty = Math.Round (SnapGridHelper.SnapableDistanceTopBottomX (curObj' item.other)) + .5;  		snaplines.Add (new SnapLine {  			color = SnapLine.DistanceLineColor'  			x1 = ty'  			x2 = ty'  			y1 = curObj.Height'  			y2 = curObj.Height + SnapGridHelper.SnapDistance  		});  	}  	else {  		bottomside.y1 = bottomside.y2 = curObj.Height + 0.5;  		bottomside.x1 = Math.Min (bottomside.x1' otherleft - Canvas.GetLeft (curObj));  		bottomside.x2 = Math.Max (bottomside.x2' otherleft + item.other.Width - (Canvas.GetLeft (curObj)));  	}  }  
Magic Number,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,ShowSnaps,The following statement contains a magic number: if (item.Type == SnapType.Distance) {  	ty = Math.Round (SnapGridHelper.SnapableDistanceTopBottomX (curObj' item.other)) + .5;  	snaplines.Add (new SnapLine {  		color = SnapLine.DistanceLineColor'  		x1 = ty'  		x2 = ty'  		y1 = curObj.Height'  		y2 = curObj.Height + SnapGridHelper.SnapDistance  	});  }  else {  	bottomside.y1 = bottomside.y2 = curObj.Height + 0.5;  	bottomside.x1 = Math.Min (bottomside.x1' otherleft - Canvas.GetLeft (curObj));  	bottomside.x2 = Math.Max (bottomside.x2' otherleft + item.other.Width - (Canvas.GetLeft (curObj)));  }  
Magic Number,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,ShowSnaps,The following statement contains a magic number: if (item.Type == SnapType.Distance) {  	ty = Math.Round (SnapGridHelper.SnapableDistanceTopBottomX (curObj' item.other)) + .5;  	snaplines.Add (new SnapLine {  		color = SnapLine.DistanceLineColor'  		x1 = ty'  		x2 = ty'  		y1 = curObj.Height'  		y2 = curObj.Height + SnapGridHelper.SnapDistance  	});  }  else {  	bottomside.y1 = bottomside.y2 = curObj.Height + 0.5;  	bottomside.x1 = Math.Min (bottomside.x1' otherleft - Canvas.GetLeft (curObj));  	bottomside.x2 = Math.Max (bottomside.x2' otherleft + item.other.Width - (Canvas.GetLeft (curObj)));  }  
Magic Number,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,ShowSnaps,The following statement contains a magic number: ty = Math.Round (SnapGridHelper.SnapableDistanceTopBottomX (curObj' item.other)) + .5;  
Magic Number,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,ShowSnaps,The following statement contains a magic number: bottomside.y1 = bottomside.y2 = curObj.Height + 0.5;  
Magic Number,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,ResizeGrip_MouseMove,The following statement contains a magic number: LayoutCvs.Width = (ZDChrome.Width = ZDash.Width = newInnerSize.Width) + 4;  
Magic Number,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,ResizeGrip_MouseMove,The following statement contains a magic number: LayoutCvs.Height = (ZDChrome.Height = ZDash.Height = newInnerSize.Height) + 4;  
Magic Number,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,listBox2_PreviewMouseMove,The following statement contains a magic number: try {  	// Get the current mouse position  	Point mousePos = e.GetPosition (null);  	Vector diff = dndopoint - mousePos;  	if (lbdragging && (e.LeftButton == MouseButtonState.Pressed && Math.Abs (diff.X) + Math.Abs (diff.Y) > 3)) {  		// Get the dragged ListViewItem  		ListBoxItem listViewItem = FindAnchestor<ListBoxItem' WrapPanel> ((DependencyObject)origSrc);  		//System.Diagnostics.Debug.Print("Moving...");  		// Find the data behind the ListViewItem  		ZomBControlAttribute contact = (ZomBControlAttribute)FindAnchestor<ListBox> (listViewItem).ItemContainerGenerator.ItemFromContainer (listViewItem);  		//System.Diagnostics.Debug.Print("Found...");  		// Initialize the drag & drop operation  		DataObject dragData = new DataObject ("ZomBControl2"' contact);  		DragDrop.DoDragDrop (listViewItem' dragData' DragDropEffects.Copy);  		lbdragging = false;  	}  }  catch {  }  
Magic Number,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,listBox2_PreviewMouseMove,The following statement contains a magic number: if (lbdragging && (e.LeftButton == MouseButtonState.Pressed && Math.Abs (diff.X) + Math.Abs (diff.Y) > 3)) {  	// Get the dragged ListViewItem  	ListBoxItem listViewItem = FindAnchestor<ListBoxItem' WrapPanel> ((DependencyObject)origSrc);  	//System.Diagnostics.Debug.Print("Moving...");  	// Find the data behind the ListViewItem  	ZomBControlAttribute contact = (ZomBControlAttribute)FindAnchestor<ListBox> (listViewItem).ItemContainerGenerator.ItemFromContainer (listViewItem);  	//System.Diagnostics.Debug.Print("Found...");  	// Initialize the drag & drop operation  	DataObject dragData = new DataObject ("ZomBControl2"' contact);  	DragDrop.DoDragDrop (listViewItem' dragData' DragDropEffects.Copy);  	lbdragging = false;  }  
Magic Number,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,bc,The following statement contains a magic number: AddAutoStub (Guid.NewGuid ().ToString ().Substring (0' 5));  
Magic Number,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,LoadFile,The following statement contains a magic number: try {  	StoppedDDHCVS cvs = XamlReader.Load (new MemoryStream (UTF8Encoding.UTF8.GetBytes (new StreamReader (new FileStream (fileName' FileMode.Open' FileAccess.Read' FileShare.Read)).ReadToEnd ().Replace ("ZomB:DashboardDataCanvas "' "ViZ:StoppedDDHCVS xmlns:ViZ=\"clr-namespace:System451.Communication.Dashboard.ViZ;assembly=ViZ\" ").Replace ("/ZomB:DashboardDataCanvas"' "/ViZ:StoppedDDHCVS")))) as StoppedDDHCVS;  	if (cvs == null)  		return;  	List<UIElement> lc = new List<UIElement> (cvs.Children.Count);  	//canvas size  	var ofv = new Point (cvs.Width' cvs.Height) - new Point (ZDash.ActualWidth' ZDash.ActualHeight);  	var newInnerSize = (Size)(new Point (ZDash.ActualWidth' ZDash.ActualHeight) + ofv);  	var newOuterSize = (Size)(new Point (this.ActualWidth' this.ActualHeight) + ofv);  	this.Width = newOuterSize.Width;  	this.Height = newOuterSize.Height;  	LayoutCvs.Width = (ZDChrome.Width = ZDash.Width = newInnerSize.Width) + 4;  	LayoutCvs.Height = (ZDChrome.Height = ZDash.Height = newInnerSize.Height) + 4;  	(designerProps [3] as ComboBox).SelectedIndex = ((int)cvs.InvalidPacketAction) - 1;  	//this hinges on the values  	((designerProps [5] as FrameworkElement).Tag as ZomBUrlCollectionDesigner).Set ((cvs.DefaultSources));  	(designerProps [7] as TextBox).Text = cvs.Team.ToString ();  	foreach (UIElement item in cvs.Children) {  		var type = item.GetType ();  		if (type.GetCustomAttributes (typeof(ZomBControlAttribute)' true).Length > 0 || type == typeof(ZomBGLControlGroup)) {  			lc.Add (item);  		}  	}  	ZDash.Children.Clear ();  	foreach (var item in lc) {  		cvs.Children.Remove (item);  		AddControl ((FrameworkElement)item);  	}  	Deselect ();  }  catch (Exception ex) {  	ErrorDialog.PrcException (ex);  }  
Magic Number,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,LoadFile,The following statement contains a magic number: try {  	StoppedDDHCVS cvs = XamlReader.Load (new MemoryStream (UTF8Encoding.UTF8.GetBytes (new StreamReader (new FileStream (fileName' FileMode.Open' FileAccess.Read' FileShare.Read)).ReadToEnd ().Replace ("ZomB:DashboardDataCanvas "' "ViZ:StoppedDDHCVS xmlns:ViZ=\"clr-namespace:System451.Communication.Dashboard.ViZ;assembly=ViZ\" ").Replace ("/ZomB:DashboardDataCanvas"' "/ViZ:StoppedDDHCVS")))) as StoppedDDHCVS;  	if (cvs == null)  		return;  	List<UIElement> lc = new List<UIElement> (cvs.Children.Count);  	//canvas size  	var ofv = new Point (cvs.Width' cvs.Height) - new Point (ZDash.ActualWidth' ZDash.ActualHeight);  	var newInnerSize = (Size)(new Point (ZDash.ActualWidth' ZDash.ActualHeight) + ofv);  	var newOuterSize = (Size)(new Point (this.ActualWidth' this.ActualHeight) + ofv);  	this.Width = newOuterSize.Width;  	this.Height = newOuterSize.Height;  	LayoutCvs.Width = (ZDChrome.Width = ZDash.Width = newInnerSize.Width) + 4;  	LayoutCvs.Height = (ZDChrome.Height = ZDash.Height = newInnerSize.Height) + 4;  	(designerProps [3] as ComboBox).SelectedIndex = ((int)cvs.InvalidPacketAction) - 1;  	//this hinges on the values  	((designerProps [5] as FrameworkElement).Tag as ZomBUrlCollectionDesigner).Set ((cvs.DefaultSources));  	(designerProps [7] as TextBox).Text = cvs.Team.ToString ();  	foreach (UIElement item in cvs.Children) {  		var type = item.GetType ();  		if (type.GetCustomAttributes (typeof(ZomBControlAttribute)' true).Length > 0 || type == typeof(ZomBGLControlGroup)) {  			lc.Add (item);  		}  	}  	ZDash.Children.Clear ();  	foreach (var item in lc) {  		cvs.Children.Remove (item);  		AddControl ((FrameworkElement)item);  	}  	Deselect ();  }  catch (Exception ex) {  	ErrorDialog.PrcException (ex);  }  
Magic Number,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,LoadFile,The following statement contains a magic number: try {  	StoppedDDHCVS cvs = XamlReader.Load (new MemoryStream (UTF8Encoding.UTF8.GetBytes (new StreamReader (new FileStream (fileName' FileMode.Open' FileAccess.Read' FileShare.Read)).ReadToEnd ().Replace ("ZomB:DashboardDataCanvas "' "ViZ:StoppedDDHCVS xmlns:ViZ=\"clr-namespace:System451.Communication.Dashboard.ViZ;assembly=ViZ\" ").Replace ("/ZomB:DashboardDataCanvas"' "/ViZ:StoppedDDHCVS")))) as StoppedDDHCVS;  	if (cvs == null)  		return;  	List<UIElement> lc = new List<UIElement> (cvs.Children.Count);  	//canvas size  	var ofv = new Point (cvs.Width' cvs.Height) - new Point (ZDash.ActualWidth' ZDash.ActualHeight);  	var newInnerSize = (Size)(new Point (ZDash.ActualWidth' ZDash.ActualHeight) + ofv);  	var newOuterSize = (Size)(new Point (this.ActualWidth' this.ActualHeight) + ofv);  	this.Width = newOuterSize.Width;  	this.Height = newOuterSize.Height;  	LayoutCvs.Width = (ZDChrome.Width = ZDash.Width = newInnerSize.Width) + 4;  	LayoutCvs.Height = (ZDChrome.Height = ZDash.Height = newInnerSize.Height) + 4;  	(designerProps [3] as ComboBox).SelectedIndex = ((int)cvs.InvalidPacketAction) - 1;  	//this hinges on the values  	((designerProps [5] as FrameworkElement).Tag as ZomBUrlCollectionDesigner).Set ((cvs.DefaultSources));  	(designerProps [7] as TextBox).Text = cvs.Team.ToString ();  	foreach (UIElement item in cvs.Children) {  		var type = item.GetType ();  		if (type.GetCustomAttributes (typeof(ZomBControlAttribute)' true).Length > 0 || type == typeof(ZomBGLControlGroup)) {  			lc.Add (item);  		}  	}  	ZDash.Children.Clear ();  	foreach (var item in lc) {  		cvs.Children.Remove (item);  		AddControl ((FrameworkElement)item);  	}  	Deselect ();  }  catch (Exception ex) {  	ErrorDialog.PrcException (ex);  }  
Magic Number,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,LoadFile,The following statement contains a magic number: try {  	StoppedDDHCVS cvs = XamlReader.Load (new MemoryStream (UTF8Encoding.UTF8.GetBytes (new StreamReader (new FileStream (fileName' FileMode.Open' FileAccess.Read' FileShare.Read)).ReadToEnd ().Replace ("ZomB:DashboardDataCanvas "' "ViZ:StoppedDDHCVS xmlns:ViZ=\"clr-namespace:System451.Communication.Dashboard.ViZ;assembly=ViZ\" ").Replace ("/ZomB:DashboardDataCanvas"' "/ViZ:StoppedDDHCVS")))) as StoppedDDHCVS;  	if (cvs == null)  		return;  	List<UIElement> lc = new List<UIElement> (cvs.Children.Count);  	//canvas size  	var ofv = new Point (cvs.Width' cvs.Height) - new Point (ZDash.ActualWidth' ZDash.ActualHeight);  	var newInnerSize = (Size)(new Point (ZDash.ActualWidth' ZDash.ActualHeight) + ofv);  	var newOuterSize = (Size)(new Point (this.ActualWidth' this.ActualHeight) + ofv);  	this.Width = newOuterSize.Width;  	this.Height = newOuterSize.Height;  	LayoutCvs.Width = (ZDChrome.Width = ZDash.Width = newInnerSize.Width) + 4;  	LayoutCvs.Height = (ZDChrome.Height = ZDash.Height = newInnerSize.Height) + 4;  	(designerProps [3] as ComboBox).SelectedIndex = ((int)cvs.InvalidPacketAction) - 1;  	//this hinges on the values  	((designerProps [5] as FrameworkElement).Tag as ZomBUrlCollectionDesigner).Set ((cvs.DefaultSources));  	(designerProps [7] as TextBox).Text = cvs.Team.ToString ();  	foreach (UIElement item in cvs.Children) {  		var type = item.GetType ();  		if (type.GetCustomAttributes (typeof(ZomBControlAttribute)' true).Length > 0 || type == typeof(ZomBGLControlGroup)) {  			lc.Add (item);  		}  	}  	ZDash.Children.Clear ();  	foreach (var item in lc) {  		cvs.Children.Remove (item);  		AddControl ((FrameworkElement)item);  	}  	Deselect ();  }  catch (Exception ex) {  	ErrorDialog.PrcException (ex);  }  
Magic Number,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,LoadFile,The following statement contains a magic number: try {  	StoppedDDHCVS cvs = XamlReader.Load (new MemoryStream (UTF8Encoding.UTF8.GetBytes (new StreamReader (new FileStream (fileName' FileMode.Open' FileAccess.Read' FileShare.Read)).ReadToEnd ().Replace ("ZomB:DashboardDataCanvas "' "ViZ:StoppedDDHCVS xmlns:ViZ=\"clr-namespace:System451.Communication.Dashboard.ViZ;assembly=ViZ\" ").Replace ("/ZomB:DashboardDataCanvas"' "/ViZ:StoppedDDHCVS")))) as StoppedDDHCVS;  	if (cvs == null)  		return;  	List<UIElement> lc = new List<UIElement> (cvs.Children.Count);  	//canvas size  	var ofv = new Point (cvs.Width' cvs.Height) - new Point (ZDash.ActualWidth' ZDash.ActualHeight);  	var newInnerSize = (Size)(new Point (ZDash.ActualWidth' ZDash.ActualHeight) + ofv);  	var newOuterSize = (Size)(new Point (this.ActualWidth' this.ActualHeight) + ofv);  	this.Width = newOuterSize.Width;  	this.Height = newOuterSize.Height;  	LayoutCvs.Width = (ZDChrome.Width = ZDash.Width = newInnerSize.Width) + 4;  	LayoutCvs.Height = (ZDChrome.Height = ZDash.Height = newInnerSize.Height) + 4;  	(designerProps [3] as ComboBox).SelectedIndex = ((int)cvs.InvalidPacketAction) - 1;  	//this hinges on the values  	((designerProps [5] as FrameworkElement).Tag as ZomBUrlCollectionDesigner).Set ((cvs.DefaultSources));  	(designerProps [7] as TextBox).Text = cvs.Team.ToString ();  	foreach (UIElement item in cvs.Children) {  		var type = item.GetType ();  		if (type.GetCustomAttributes (typeof(ZomBControlAttribute)' true).Length > 0 || type == typeof(ZomBGLControlGroup)) {  			lc.Add (item);  		}  	}  	ZDash.Children.Clear ();  	foreach (var item in lc) {  		cvs.Children.Remove (item);  		AddControl ((FrameworkElement)item);  	}  	Deselect ();  }  catch (Exception ex) {  	ErrorDialog.PrcException (ex);  }  
Magic Number,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,LoadFile,The following statement contains a magic number: LayoutCvs.Width = (ZDChrome.Width = ZDash.Width = newInnerSize.Width) + 4;  
Magic Number,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,LoadFile,The following statement contains a magic number: LayoutCvs.Height = (ZDChrome.Height = ZDash.Height = newInnerSize.Height) + 4;  
Magic Number,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,LoadFile,The following statement contains a magic number: (designerProps [3] as ComboBox).SelectedIndex = ((int)cvs.InvalidPacketAction) - 1;  
Magic Number,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,LoadFile,The following statement contains a magic number: ((designerProps [5] as FrameworkElement).Tag as ZomBUrlCollectionDesigner).Set ((cvs.DefaultSources));  
Magic Number,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,LoadFile,The following statement contains a magic number: (designerProps [7] as TextBox).Text = cvs.Team.ToString ();  
Magic Number,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,Export,The following statement contains a magic number: sb.Append ((designerProps [3] as ComboBox).SelectedValue);  
Magic Number,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,Export,The following statement contains a magic number: sb.Append (((designerProps [5] as FrameworkElement).Tag as ZomBUrlCollectionDesigner).GetValue ());  
Magic Number,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,Export,The following statement contains a magic number: sb.Append ((designerProps [7] as TextBox).Text);  
Magic Number,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,GetTeamNumber,The following statement contains a magic number: try {  	return int.Parse ((designerProps [7] as TextBox).Text);  }  catch {  	return 0;  }  
Magic Number,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,GetTeamNumber,The following statement contains a magic number: return int.Parse ((designerProps [7] as TextBox).Text);  
Magic Number,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,Highlight,The following statement contains a magic number: if (lastlight != null) {  	lastlight.BorderBrush = Brushes.Red;  	lastlight.BorderThickness = new Thickness (4);  }  
Magic Number,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,Highlight,The following statement contains a magic number: lastlight.BorderThickness = new Thickness (4);  
Magic Number,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,SaveAsProfile,The following statement contains a magic number: profileString += (designerProps [7] as TextBox).Text + "|";  
Magic Number,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,SaveAsProfile,The following statement contains a magic number: profileString += (designerProps [3] as ComboBox).Text + "|";  
Magic Number,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,LoadProfile,The following statement contains a magic number: (designerProps [7] as TextBox).Text = teamnumberp;  
Magic Number,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,LoadProfile,The following statement contains a magic number: (designerProps [3] as ComboBox).Text = invalidactionp;  
Magic Number,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,LoadProfile,The following statement contains a magic number: ((designerProps [5] as FrameworkElement).Tag as ZomBUrlCollectionDesigner).Set (ZomBUrlSources);  
Magic Number,System451.Communication.Dashboard.ViZ,DropShadowChrome,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\DropShadowChrome.cs,OnRender,The following statement contains a magic number: rect = new Rect (1.0' 1.0' this.ActualWidth + 2.0' this.ActualHeight + 2.0);  
Magic Number,System451.Communication.Dashboard.ViZ,DropShadowChrome,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\DropShadowChrome.cs,OnRender,The following statement contains a magic number: rect = new Rect (1.0' 1.0' this.ActualWidth + 2.0' this.ActualHeight + 2.0);  
Magic Number,System451.Communication.Dashboard.ViZ,PropertyElement,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\PropertyElement.cs,GetEntry,The following statement contains a magic number: if (Object != null && Property != null) {  	var itm = new FrameworkElement[2];  	itm [0] = (new TextBlock ());  	(itm [0] as TextBlock).Text = Name + ": ";  	(itm [0] as TextBlock).HorizontalAlignment = HorizontalAlignment.Right;  	(itm [0] as TextBlock).VerticalAlignment = VerticalAlignment.Center;  	if (Type == typeof(bool)) {  		itm [1] = (new CheckBox ());  		(itm [1] as CheckBox).VerticalAlignment = VerticalAlignment.Center;  		(itm [1] as CheckBox).IsChecked = (bool)Value;  		(itm [1] as CheckBox).Checked += delegate {  			Value = true;  		};  		(itm [1] as CheckBox).Unchecked += delegate {  			Value = false;  		};  		(itm [1] as CheckBox).Focusable = false;  	}  	else if (Type == typeof(int) || Type == typeof(double)) {  		itm [1] = (new TextBox ());  		if (Dynamic) {  			Binding bind = new Binding ();  			bind.Mode = BindingMode.TwoWay;  			bind.Source = Object;  			bind.Path = new PropertyPath (GetRealProperty ());  			bind.Converter = new StringValueConverter ();  			(itm [1] as TextBox).SetBinding (TextBox.TextProperty' bind);  		}  		else {  			(itm [1] as TextBox).Text = Value.ToString ();  			(itm [1] as TextBox).TextChanged += delegate (object sender' TextChangedEventArgs e) {  				Value = (sender as TextBox).Text;  			};  		}  	}  	else if (Type.IsEnum) {  		itm [1] = (new ComboBox ());  		foreach (var item in Enum.GetNames (Type)) {  			(itm [1] as ComboBox).Items.Add (item);  			if (item == Value.ToString ()) {  				(itm [1] as ComboBox).SelectedValue = item;  			}  		}  		(itm [1] as ComboBox).SelectionChanged += delegate (object sender' SelectionChangedEventArgs e) {  			try {  				Value = (sender as ComboBox).SelectedValue;  			}  			catch {  			}  		};  	}  	else {  		Type tod = DesignerType;  		if (tod != null) {  			itm [1] = (GetDesignerField (tod));  		}  		else {  			itm [1] = (new TextBox ());  			try {  				(itm [1] as TextBox).Text = Value.ToString ();  			}  			catch {  			}  			//Null value  			(itm [1] as TextBox).TextChanged += delegate (object sender' TextChangedEventArgs e) {  				Value = (sender as TextBox).Text;  			};  		}  	}  	itm [1].MaxWidth = 110;  	itm [0].Tag = itm [1].Tag = this;  	itm [0].ToolTip = itm [1].ToolTip = Description;  	return itm;  }  else  	throw new NullReferenceException ("Object and Property must not be null");  
Magic Number,System451.Communication.Dashboard.ViZ,PropertyElement,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\PropertyElement.cs,GetEntry,The following statement contains a magic number: if (Object != null && Property != null) {  	var itm = new FrameworkElement[2];  	itm [0] = (new TextBlock ());  	(itm [0] as TextBlock).Text = Name + ": ";  	(itm [0] as TextBlock).HorizontalAlignment = HorizontalAlignment.Right;  	(itm [0] as TextBlock).VerticalAlignment = VerticalAlignment.Center;  	if (Type == typeof(bool)) {  		itm [1] = (new CheckBox ());  		(itm [1] as CheckBox).VerticalAlignment = VerticalAlignment.Center;  		(itm [1] as CheckBox).IsChecked = (bool)Value;  		(itm [1] as CheckBox).Checked += delegate {  			Value = true;  		};  		(itm [1] as CheckBox).Unchecked += delegate {  			Value = false;  		};  		(itm [1] as CheckBox).Focusable = false;  	}  	else if (Type == typeof(int) || Type == typeof(double)) {  		itm [1] = (new TextBox ());  		if (Dynamic) {  			Binding bind = new Binding ();  			bind.Mode = BindingMode.TwoWay;  			bind.Source = Object;  			bind.Path = new PropertyPath (GetRealProperty ());  			bind.Converter = new StringValueConverter ();  			(itm [1] as TextBox).SetBinding (TextBox.TextProperty' bind);  		}  		else {  			(itm [1] as TextBox).Text = Value.ToString ();  			(itm [1] as TextBox).TextChanged += delegate (object sender' TextChangedEventArgs e) {  				Value = (sender as TextBox).Text;  			};  		}  	}  	else if (Type.IsEnum) {  		itm [1] = (new ComboBox ());  		foreach (var item in Enum.GetNames (Type)) {  			(itm [1] as ComboBox).Items.Add (item);  			if (item == Value.ToString ()) {  				(itm [1] as ComboBox).SelectedValue = item;  			}  		}  		(itm [1] as ComboBox).SelectionChanged += delegate (object sender' SelectionChangedEventArgs e) {  			try {  				Value = (sender as ComboBox).SelectedValue;  			}  			catch {  			}  		};  	}  	else {  		Type tod = DesignerType;  		if (tod != null) {  			itm [1] = (GetDesignerField (tod));  		}  		else {  			itm [1] = (new TextBox ());  			try {  				(itm [1] as TextBox).Text = Value.ToString ();  			}  			catch {  			}  			//Null value  			(itm [1] as TextBox).TextChanged += delegate (object sender' TextChangedEventArgs e) {  				Value = (sender as TextBox).Text;  			};  		}  	}  	itm [1].MaxWidth = 110;  	itm [0].Tag = itm [1].Tag = this;  	itm [0].ToolTip = itm [1].ToolTip = Description;  	return itm;  }  else  	throw new NullReferenceException ("Object and Property must not be null");  
Magic Number,System451.Communication.Dashboard.ViZ,PropertyElement,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\PropertyElement.cs,GetEntry,The following statement contains a magic number: itm [1].MaxWidth = 110;  
Missing Default,System451.Communication.Dashboard.ViZ,Designer,C:\repos\byteit101_ZomB-Dashboard-System\Apps\VisualZomB\Designer.xaml.cs,WndProc,The following switch statement is missing a default case: switch (wParam.ToInt32 ()) {  case AlwaysOnTopMenuID:  	var self = getDesigner ();  	self.Topmost = !self.Topmost;  	CheckMenuItem (self.sysptr' AlwaysOnTopMenuID' self.Topmost ? MF_CHECKED : MF_UNCHECKED);  	handled = true;  	break;  case AboutMenuID:  	getDesigner ().MenuItem_Click (null' null);  	handled = true;  	break;  }  
