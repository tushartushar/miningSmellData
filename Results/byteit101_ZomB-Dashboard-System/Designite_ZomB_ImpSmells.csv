Implementation smell,Namespace,Class,File,Method,Description
Long Method,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,DoWork,The method has 185 lines of code.
Long Method,System451.Communication.Dashboard.Net,SmartDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\SmartDataSource.cs,DoWork,The method has 128 lines of code.
Long Method,System451.Communication.Dashboard.Net,TCPDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\TCPDataSource.cs,TickleClientWorker,The method has 149 lines of code.
Long Method,System451.Communication.Dashboard.Net.Video,MJPEGVideoSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\Video\MJpegStream.cs,GraveWorker,The method has 109 lines of code.
Long Method,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The method has 152 lines of code.
Complex Method,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,ParseObject,Cyclomatic complexity of the method is 8
Complex Method,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,ParseValue,Cyclomatic complexity of the method is 12
Complex Method,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,ParseString,Cyclomatic complexity of the method is 18
Complex Method,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,NextToken,Cyclomatic complexity of the method is 25
Complex Method,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,SerializeValue,Cyclomatic complexity of the method is 8
Complex Method,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,SerializeString,Cyclomatic complexity of the method is 10
Complex Method,System451.Communication.Dashboard.Utils,JsonObject,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,InitWithObject,Cyclomatic complexity of the method is 8
Complex Method,System451.Communication.Dashboard.Utils,BTFinger,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,ZomBworker,Cyclomatic complexity of the method is 30
Complex Method,System451.Communication.Dashboard.Utils,BTZomBServer,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,ZomBworker,Cyclomatic complexity of the method is 11
Complex Method,System451.Communication.Dashboard.Utils,RobotStatusEventMonitor,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\RobotStatusEventMonitor.cs,UpdateStatus,Cyclomatic complexity of the method is 30
Complex Method,System451.Communication.Dashboard.Utils,RangeAndValue,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Utils\RangeAndValue.cs,Validate,Cyclomatic complexity of the method is 14
Complex Method,System451.Communication.Dashboard.Utils,VersionNumber,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Utils\Updater.cs,FromString,Cyclomatic complexity of the method is 14
Complex Method,System451.Communication.Dashboard,CsvSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\CsvDataSource.cs,DoWork,Cyclomatic complexity of the method is 9
Complex Method,System451.Communication.Dashboard,DashboardDataHub,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardDataHub.cs,Start,Cyclomatic complexity of the method is 11
Complex Method,System451.Communication.Dashboard,DashboardDataHubForm,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\DashboardDataHubForm.cs,DashboardDataHubForm,Cyclomatic complexity of the method is 9
Complex Method,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,AlertPeek,Cyclomatic complexity of the method is 10
Complex Method,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,ReadUpdate,Cyclomatic complexity of the method is 13
Complex Method,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,CreateUpdate,Cyclomatic complexity of the method is 16
Complex Method,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,DoWork,Cyclomatic complexity of the method is 34
Complex Method,System451.Communication.Dashboard.Net,SerialDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\SerialDataSource.cs,SerialDataSource,Cyclomatic complexity of the method is 10
Complex Method,System451.Communication.Dashboard.Net,SerialDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\SerialDataSource.cs,DoWork,Cyclomatic complexity of the method is 11
Complex Method,System451.Communication.Dashboard.Net,SmartDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\SmartDataSource.cs,DoWork,Cyclomatic complexity of the method is 26
Complex Method,System451.Communication.Dashboard.Net,SmartInfo,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\SmartDataSource.cs,Parse,Cyclomatic complexity of the method is 25
Complex Method,System451.Communication.Dashboard.Net,DataPlayerSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DataPlayerSource.cs,worker,Cyclomatic complexity of the method is 34
Complex Method,System451.Communication.Dashboard.Net,ZomBUrl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\IDashboardDataSource.cs,ZomBUrl,Cyclomatic complexity of the method is 9
Complex Method,System451.Communication.Dashboard.Net,ZomBUrl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\IDashboardDataSource.cs,FindSourceType,Cyclomatic complexity of the method is 13
Complex Method,System451.Communication.Dashboard.Net,DashboardPacketDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DashboardPacketDataSource.cs,DoWork,Cyclomatic complexity of the method is 19
Complex Method,System451.Communication.Dashboard.Net,TCPDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\TCPDataSource.cs,TickleClientWorker,Cyclomatic complexity of the method is 34
Complex Method,System451.Communication.Dashboard.Net.Video,MJPEGVideoSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\Video\MJpegStream.cs,GraveWorker,Cyclomatic complexity of the method is 14
Complex Method,System451.Communication.Dashboard.Net.Video,WPILibTcpVideoSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\Video\ImageSource.cs,GraveWorker,Cyclomatic complexity of the method is 11
Complex Method,Utils,AutoExtractor,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Utils\AutoExtractor.cs,Extract,Cyclomatic complexity of the method is 11
Complex Method,Utils,VideoStreamSaver,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\VideoStreamSaver.cs,aviSaverbg,Cyclomatic complexity of the method is 12
Complex Method,System451.Communication.Dashboard.Controls,AnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\AnalogMeter.cs,AnalogMeter_Paint,Cyclomatic complexity of the method is 10
Complex Method,System451.Communication.Dashboard.Controls,ValueMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\ValueMeter.cs,OnPaint,Cyclomatic complexity of the method is 17
Complex Method,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,RoundSpeedMeter_Paint,Cyclomatic complexity of the method is 9
Complex Method,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,Cyclomatic complexity of the method is 56
Complex Method,System451.Communication.Dashboard.Controls,VirtualdAnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\VirtualdAnalogMeter.cs,CreateBackground,Cyclomatic complexity of the method is 25
Complex Method,Design,AnalogMeterDesigner,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\AnalogMeter.cs,WndProc,Cyclomatic complexity of the method is 17
Complex Method,Design,ValueMeterDesigner,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\ValueMeter.cs,WndProc,Cyclomatic complexity of the method is 15
Complex Method,Design,DirectionMeterDesigner,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\DirectionMeter.cs,WndProc,Cyclomatic complexity of the method is 13
Complex Method,Design,OnOffControlDesigner,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\OnOffControl.cs,WndProc,Cyclomatic complexity of the method is 14
Complex Method,Design,AlertControlDesigner,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\OnOffControl.cs,WndProc,Cyclomatic complexity of the method is 14
Complex Method,Design,SpikeControlDesigner,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\OnOffControl.cs,WndProc,Cyclomatic complexity of the method is 14
Complex Method,Controls,CameraView,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\CameraView.cs,UserControl2_Paint,Cyclomatic complexity of the method is 8
Complex Method,System451.Communication.Dashboard.WPF.Controls,DataGraph,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\DataGraph.cs,Regenerate,Cyclomatic complexity of the method is 8
Complex Method,System451.Communication.Dashboard.WPF.Controls,SpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\SpeedMeter.cs,Convert,Cyclomatic complexity of the method is 10
Complex Method,System451.Communication.Dashboard.WPF.Controls,SpikeControl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\SpikeControl.cs,AlertControl_MouseLeftButtonUp,Cyclomatic complexity of the method is 11
Complex Method,System451.Communication.Dashboard.WPF.Controls,DashboardDataCanvas,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\DashboardDataCanvas.cs,AddControls,Cyclomatic complexity of the method is 8
Complex Method,System451.Communication.Dashboard.WPF.Controls,DashboardDataHubWindow,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\DashboardDataHubWindow.cs,Init,Cyclomatic complexity of the method is 10
Complex Method,System451.Communication.Dashboard.WPF.Controls,ViZBindingParser,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Design\ViZBindingParser.cs,Convert,Cyclomatic complexity of the method is 17
Complex Method,System451.Communication.Dashboard.WPF.Controls.Designer.PrimitiveControls,GraphScale,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\PrimitiveControls\GraphScale.cs,OnRender,Cyclomatic complexity of the method is 9
Complex Method,System451.Communication.Dashboard.WPF.Controls.Designer,ZomBUrlCollectionDesignerWindow,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\ZomBUrlCollectionDesignerWindow.xaml.cs,FindUrls,Cyclomatic complexity of the method is 8
Long Parameter List,System451.Communication.Dashboard.Utils,RangeAndValue,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Utils\RangeAndValue.cs,RangeAndValue,The method has 5 parameters.
Long Parameter List,System451.Communication.Dashboard.Utils,RangeAndValue,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Utils\RangeAndValue.cs,RangeAndValue,The method has 6 parameters.
Long Parameter List,System451.Communication.Dashboard.Utils,RangeAndValue,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Utils\RangeAndValue.cs,Init,The method has 5 parameters.
Long Parameter List,System451.Communication.Dashboard.Net.Video,binencode,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\Video\MJpegStream.cs,GetBytes,The method has 5 parameters.
Long Parameter List,System451.Communication.Dashboard.Net.Video,binencode,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\Video\MJpegStream.cs,GetChars,The method has 5 parameters.
Long Parameter List,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The method has 6 parameters.
Long Parameter List,System451.Communication.Dashboard.Controls,VirtualdAnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\VirtualdAnalogMeter.cs,GetLine,The method has 5 parameters.
Long Parameter List,System451.Communication.Dashboard.Libs.WebCam_Capture,WebCamCapture,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\WebCam_Capture\WebCamCapture.cs,capCreateCaptureWindowA,The method has 8 parameters.
Long Parameter List,System451.Communication.Dashboard.Libs,Crc32,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\Crc32.cs,CalculateHash,The method has 5 parameters.
Long Parameter List,System451.Communication.Dashboard.WPF.Controls,DashboardDataHubWindow,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\DashboardDataHubWindow.cs,WndProc,The method has 5 parameters.
Long Statement,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,ParseString,The length of the statement  "					if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint))) { " is 134.
Long Statement,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,ParseNumber,The length of the statement  "	success = Double.TryParse (new string (json' index' charLength)' NumberStyles.Any' CultureInfo.InvariantCulture' out number); " is 125.
Long Statement,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,NextToken,The length of the statement  "		if (json [index] == 'f' && json [index + 1] == 'a' && json [index + 2] == 'l' && json [index + 3] == 's' && json [index + 4] == 'e') { " is 134.
Long Statement,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,SerializeValue,The length of the statement  "	else if ((value is Boolean) && ((Boolean)value == true) || (value is JsonObject && (value as JsonObject).Type == typeof(bool) && (value as JsonObject).bValue)) { " is 161.
Long Statement,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,SerializeValue,The length of the statement  "	else if ((value is Boolean) && ((Boolean)value == false) || (value is JsonObject && (value as JsonObject).Type == typeof(bool) && !(value as JsonObject).bValue)) { " is 163.
Long Statement,System451.Communication.Dashboard.Utils,CPU,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Utils\CPU.cs,Is64BitOperatingSystem,The length of the statement  "		return ((DoesWin32MethodExist ("kernel32.dll"' "IsWow64Process") && IsWow64Process (GetCurrentProcess ()' out flag)) && flag); " is 126.
Long Statement,System451.Communication.Dashboard.Utils,RobotStatusEventMonitor,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\RobotStatusEventMonitor.cs,UpdateStatus,The length of the statement  "						if (DateTime.Now.Subtract (matchStart).Seconds >= 14 && DateTime.Now.Subtract (matchStart).Seconds <= 18 && DateTime.Now.Subtract (matchStart).Minutes == 2) { " is 158.
Long Statement,System451.Communication.Dashboard.Utils,InstallUtils,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Utils\InstallUtils.cs,NGen,The length of the statement  "	var pi = new ProcessStartInfo (Registry.LocalMachine.OpenSubKey (@"Software\Microsoft\.NETFramework").GetValue ("InstallRoot"' @"C:\WINDOWS\Microsoft.NET\Framework\").ToString () + "v2.0.50727\\ngen.exe"' "install \"" + AssemblyPath + "\""); " is 241.
Long Statement,System451.Communication.Dashboard.Utils,InstallUtils,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Utils\InstallUtils.cs,Install,The length of the statement  "	var p = NGen ("ZomB' Version=" + System451.Communication.Dashboard.ZVersionMgr.ShortNumber + "' Culture=neutral' PublicKeyToken=5880636763ded5de"); " is 147.
Long Statement,System451.Communication.Dashboard.Utils,InstallUtils,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Utils\InstallUtils.cs,Install,The length of the statement  "	p = NGen ("ZomB' Version=" + System451.Communication.Dashboard.ZVersionMgr.ShortNumber + "' Culture=neutral' PublicKeyToken=5880636763ded5de"); " is 143.
Long Statement,System451.Communication.Dashboard.Utils,VersionNumber,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Utils\Updater.cs,ToString,The length of the statement  "	return Major.ToString () + "." + Minor.ToString () + "." + Bug.ToString () + "." + Build.ToString () + (BuildType == Type.Release ? "g" : (BuildType == Type.Alpha ? "a" : "b")) + BuildTypeNumber.ToString (); " is 207.
Long Statement,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,FieldIDToDottedNameNoCache,The length of the statement  "	if (hideSmartTypes && ((name == "Data" && lup.ContainsKey ("~TYPE~") && tablesbyparent.ContainsKey (lup)) || (name == "~TYPE~" && tablesbyparent.ContainsKey (lup)))) " is 165.
Long Statement,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,FieldIDToDottedNameNoCache,The length of the statement  "		if (hideSmartTypes && ((tmp.Name == "Data" && tmp.Table.ContainsKey ("~TYPE~") && tablesbyparent.ContainsKey (tmp.Table)) || (tmp.Name == "~TYPE~" && tablesbyparent.ContainsKey (tmp.Table)))) " is 191.
Long Statement,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,ReadUpdate,The length of the statement  "		int value = (stream.ReadByte () << 0x18) + (stream.ReadByte () << 0x10) + (stream.ReadByte () << 0x08) + (stream.ReadByte ()); " is 126.
Long Statement,System451.Communication.Dashboard.Net,SmartDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\SmartDataSource.cs,DoWork,The length of the statement  "					InvalidPacketRecievedEventArgs e = new InvalidPacketRecievedEventArgs (buffer' ddh.InvalidPacketAction == InvalidPacketActions.AlwaysContinue || ddh.InvalidPacketAction == InvalidPacketActions.Continue); " is 203.
Long Statement,System451.Communication.Dashboard.Net,SmartDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\SmartDataSource.cs,DoWork,The length of the statement  "					System.Windows.Forms.MessageBox.Show ("Dashboard selection via Protocol has not been implemented in ZomB' try WPF tabs instead"); " is 129.
Long Statement,System451.Communication.Dashboard.Net,ZomBUrl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\IDashboardDataSource.cs,Exec,The length of the statement  "	var ctor = SourceType.GetConstructor (BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public' null' new Type[] { " is 126.
Long Statement,System451.Communication.Dashboard.Net,ZomBUrl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\IDashboardDataSource.cs,Exec,The length of the statement  "		ctor = SourceType.GetConstructor (BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public' null' new Type[] { " is 122.
Long Statement,System451.Communication.Dashboard.Net,ZomBUrl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\IDashboardDataSource.cs,Exec,The length of the statement  "			throw new InvalidProgramException ("Type '" + SourceType.ToString () + "' does not contain required constructor with arguments (ZomBUrl[' IZomBController])"); " is 158.
Long Statement,System451.Communication.Dashboard.Net,DashboardPacketDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DashboardPacketDataSource.cs,DoWork,The length of the statement  "				Output = Output.Substring (Output.IndexOf ("@@ZomB:|") + 8' (Output.IndexOf ("|:ZomB@@") - (Output.IndexOf ("@@ZomB:|") + 8))); " is 127.
Long Statement,System451.Communication.Dashboard.Net,DashboardPacketDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DashboardPacketDataSource.cs,DoWork,The length of the statement  "							InvalidPacketRecievedEventArgs e = new InvalidPacketRecievedEventArgs (buffer' ddh.InvalidPacketAction == InvalidPacketActions.AlwaysContinue || ddh.InvalidPacketAction == InvalidPacketActions.Continue); " is 203.
Long Statement,System451.Communication.Dashboard.Net.Sockets,TsUdpClient,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\Socket\TsUdpClient.cs,GetUdpClient,The length of the statement  "		throw new InvalidOperationException ("No unnamed Thread Safe UdpClient objects avalible. Add one or add a port number to the call"); " is 132.
Long Statement,System451.Communication.Dashboard.Net.Sockets,TcpPool,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\Socket\TsTcpClient.cs,GetTcpClient,The length of the statement  "		throw new InvalidOperationException ("No unnamed TcpClient objects avalible. Add one or add a port number to the call"); " is 120.
Long Statement,System451.Communication.Dashboard.Net.Video,FFmpeg,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\Video\FFmpeg.cs,GetEncoderStream,The length of the statement  "	return exec ("-f image2pipe -vcodec mjpeg -r " + fps.ToString () + " -i - \"" + fileName + "\"").StandardInput.BaseStream; " is 122.
Long Statement,System451.Communication.Dashboard.Net.Video,MJPEGVideoSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\Video\MJpegStream.cs,GraveWorker,The length of the statement  "		HttpWebRequest hrq = (HttpWebRequest)HttpWebRequest.Create ("http://" + IP.ToString () + "/axis-cgi/mjpg/video.cgi?fps=" + FPS.ToString ()); " is 140.
Long Statement,System451.Communication.Dashboard.Net.Video,WPILibTcpVideoSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\Video\ImageSource.cs,GraveWorker,The length of the statement  "					while ((istream.ReadByte () != 1) || (istream.ReadByte () != 0) || (istream.ReadByte () != 0) || (istream.ReadByte () != 0)) { " is 126.
Long Statement,System451.Communication.Dashboard.Controls,DataGraph,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\DataGraph.cs,DataGraph_Paint,The length of the statement  "				e.Graphics.DrawLine (pn' 200 - (i - 1)' 200 - (((vals [i - 1] - Min) / (Max - Min)) * 200)' 200 - (i)' 200 - (((vals [i] - Min) / (Max - Min)) * 200)); " is 151.
Long Statement,System451.Communication.Dashboard.Controls,DataGraph,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\DataGraph.cs,DataGraph_Paint,The length of the statement  "				e.Graphics.DrawLine (pn' 199' 200 - (((vals [0] - Min) / (Max - Min)) * 200)' 200' 200 - (((vals [0] - Min) / (Max - Min)) * 200)); " is 131.
Long Statement,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,RoundSpeedMeter_Paint,The length of the statement  "		e.Graphics.DrawLine (p' new PointF ((float)Math.Cos ((startangle + sweepangle) * Math.PI / 180) * (85.5f) + 62.5f' (float)Math.Sin ((startangle + sweepangle) * Math.PI / 180) * (85.5f) + 107.5f)' new PointF ((float)Math.Cos ((startangle + sweepangle) * Math.PI / 180) * (60f) + 62.5f' //2.5'46.5 " is 295.
Long Statement,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,RoundSpeedMeter_Paint,The length of the statement  "		e.Graphics.DrawString (this.Value.ToString ("0.00")' Font' b' (125f - e.Graphics.MeasureString (this.Value.ToString ("0.00")' Font).Width) / 2f' 73 - (e.Graphics.MeasureString (this.Value.ToString ("0.00")' Font).Height)); " is 222.
Long Statement,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The length of the statement  "	PointF last = new PointF ((float)Math.Cos (startangle * Math.PI / 180) * (width / 2) + x + (width / 2)' (float)Math.Sin (startangle * Math.PI / 180) * (height / 2) + y + (height / 2)); " is 184.
Long Statement,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The length of the statement  "	last = new PointF ((float)Math.Cos ((startangle + sweepangle) * Math.PI / 180) * (width / 2) + x + (width / 2)' (float)Math.Sin ((startangle + sweepangle) * Math.PI / 180) * (height / 2) + y + (height / 2)); " is 207.
Long Statement,System451.Communication.Dashboard.Controls,StatusLabel,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\StatusLabel.cs,ymove_ControlUpdated,The length of the statement  "		this.Location = new Point (this.Location.X' (int)((1 - (float.Parse (e.Value) - YVMin) / (YVMax - YVMin)) * (YMax - YMin) - YMin)); " is 131.
Long Statement,System451.Communication.Dashboard.Controls,StatusLabel,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\StatusLabel.cs,xmove_ControlUpdated,The length of the statement  "		this.Location = new Point ((int)(((float.Parse (e.Value) - XVMin) / (XVMax - XVMin)) * (XMax - XMin) + XMin)' this.Location.Y); " is 127.
Long Statement,System451.Communication.Dashboard.Controls,CameraView,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\CameraView.Designer.cs,InitializeComponent,The length of the statement  "	this.checkBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left))); " is 147.
Long Statement,System451.Communication.Dashboard.Controls,VirtualdAnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\VirtualdAnalogMeter.cs,CreateBackground,The length of the statement  "		meterLocation = new Rectangle (framePadding.Left' framePadding.Top' Width - framePadding.Horizontal' Height - framePadding.Vertical); " is 133.
Long Statement,System451.Communication.Dashboard.Controls,VirtualdAnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\VirtualdAnalogMeter.cs,CreateBackground,The length of the statement  "		meterLocation = new Rectangle (framePadding.Left' framePadding.Top' Width - framePadding.Horizontal' internalPadding.Vertical + Width / 2 - framePadding.Top); " is 158.
Long Statement,System451.Communication.Dashboard.Controls,VirtualdAnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\VirtualdAnalogMeter.cs,CreateBackground,The length of the statement  "				if ((tickSmallFrequency > 0 && (i - minValue) % tickSmallFrequency == 0) || (tickLargeFrequency > 0 && (i - minValue) % tickLargeFrequency == 0)) " is 145.
Long Statement,System451.Communication.Dashboard.Controls,VirtualdAnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\VirtualdAnalogMeter.cs,CreateBackground,The length of the statement  "			g.DrawString (Text' Font' b' framePadding.Left + (meterLocation.Width / 2) - sz.Width / 2' framePadding.Top + (meterLocation.Height * 3) / 4 - sz.Height / 2); " is 158.
Long Statement,System451.Communication.Dashboard.Controls,VirtualdAnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\VirtualdAnalogMeter.cs,GetLine,The length of the statement  "	float angle = ((value > maxValue ? maxValue : (value < minValue ? minValue : value)) - minValue) * (((float)Math.PI - tickStartAngle * 2) / (maxValue - minValue)) + tickStartAngle; " is 180.
Long Statement,System451.Communication.Dashboard.Controls,VirtualdAnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\VirtualdAnalogMeter.cs,GetLine,The length of the statement  "	p [0] = new PointF ((float)(framePadding.Left + internalPadding.Left + (r1x - r1x * Math.Cos (angle)))' (float)(framePadding.Top + internalPadding.Top + (r1y - r1y * Math.Sin (angle)))); " is 186.
Long Statement,System451.Communication.Dashboard.Controls,VirtualdAnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\VirtualdAnalogMeter.cs,GetLine,The length of the statement  "	p [1] = new PointF ((float)(framePadding.Left + internalPadding.Left + (r1x - r2x * Math.Cos (angle)))' (float)(framePadding.Top + internalPadding.Top + (r1y - r2y * Math.Sin (angle)))); " is 186.
Long Statement,Design,AnalogMeterDesigner,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\AnalogMeter.cs,GetValueRec,The length of the statement  "	gp.AddArc ((float)((.05f) * vm.Width)' (float)((1f / 3f) * vm.Height)' (float)(.90f) * vm.Width' (float)(1.2f) * vm.Height' -180f' 180f); " is 137.
Long Statement,Design,AnalogMeterDesigner,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\AnalogMeter.cs,GetValueRec,The length of the statement  "	gp.AddLine ((float)((.05f) * vm.Width)' (float)((70f / 75f) * vm.Height)' (float)(.95f) * vm.Width' (float)((70f / 75f) * vm.Height)); " is 134.
Long Statement,Design,DirectionMeterDesigner,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\DirectionMeter.cs,GetValueRec,The length of the statement  "	gp.AddEllipse ((float)((.05 - vm.CircleWidth / 200f) * vm.Width)' (float)((.05 - vm.CircleWidth / 200f) * vm.Height)' (float)(.90 + vm.CircleWidth / 100f) * vm.Width' (float)(.90 + vm.CircleWidth / 100f) * vm.Height); " is 217.
Long Statement,Design,DirectionMeterDesigner,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\DirectionMeter.cs,GetValueRec,The length of the statement  "	gp.AddEllipse ((float)((.05 + vm.CircleWidth / 200f) * vm.Width)' (float)((.05 + vm.CircleWidth / 200f) * vm.Height)' (float)(.90 - vm.CircleWidth / 100f) * vm.Width' (float)(.90 - vm.CircleWidth / 100f) * vm.Height); " is 217.
Long Statement,Design,OnOffControlDesigner,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\OnOffControl.cs,GetValueRec,The length of the statement  "	gp.AddEllipse ((float)((.04) * vm.Width)' (float)((.04) * vm.Height)' (float)(.92) * vm.Width' (float)(.92) * vm.Height); " is 121.
Long Statement,System451.Communication.Dashboard.Libs.WebCam_Capture,WebCamCapture,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\WebCam_Capture\WebCamCapture.cs,Start,The length of the statement  "		MessageBox.Show ("An error ocurred while starting the video capture. Check that your webcamera is connected properly and turned on.\r\n\n" + excep.Message); " is 156.
Long Statement,System451.Communication.Dashboard.Libs.WebCam_Capture,WebCamCapture,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\WebCam_Capture\WebCamCapture.cs,timer1_Tick,The length of the statement  "		MessageBox.Show ("An error ocurred while capturing the video image. The video capture will now be terminated.\r\n\n" + excep.Message); " is 134.
Long Statement,System451.Communication.Dashboard.WPF.Controls,AnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\AnalogMeter.cs,Convert,The length of the statement  "	return Math.Max (-90' Math.Min (((Math.Max (ths.Min' Math.Min ((double)value [1]' ths.Max)) - ths.Min) / (ths.Max - ths.Min) * 180) - 90' 90)); " is 143.
Long Statement,System451.Communication.Dashboard.WPF.Controls,AnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\AnalogMeter.cs,ValueMeter_MouseMove,The length of the statement  "		DoubleValue = Math.Max (this.Min' Math.Min (this.Max' PointToAngle (e.GetPosition (this)) / 180 * (this.Max - this.Min) + this.Min)); " is 133.
Long Statement,System451.Communication.Dashboard.WPF.Controls,BluFinger,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\BluFinger.cs,init,The length of the statement  "	bf = (BlueFinger.GetFactory (team' BTZomBFingerFactory.DefaultLoadLocation' BTZomBFingerFactory.DefaultSaveLocation)).GetServer (); " is 131.
Long Statement,System451.Communication.Dashboard.WPF.Controls,CameraView,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\CameraView.cs,StopSave,The length of the statement  "		vss = new VideoStreamSaver (this' BTZomBFingerFactory.DefaultSaveLocation + "\\Capture" + (DateTime.Now.Ticks.ToString ("x")) + ((long)Math.Round (rand.NextTSDouble () * 999)).ToString ("x") + ".webm"); " is 202.
Long Statement,System451.Communication.Dashboard.WPF.Controls,CameraView,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\CameraView.cs,OnApplyTemplate,The length of the statement  "	PART_refresh.PreviewMouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler (PART_refresh_PreviewMouseLeftButtonUp); " is 130.
Long Statement,System451.Communication.Dashboard.WPF.Controls,CameraView,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\CameraView.cs,TeamUpdated,The length of the statement  "		var iparea = VideoSourceArgs.Contains ('?') ? VideoSourceArgs.Substring (0' VideoSourceArgs.IndexOf ('?')) : VideoSourceArgs; " is 125.
Long Statement,System451.Communication.Dashboard.WPF.Controls,CameraView,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\CameraView.cs,TeamUpdated,The length of the statement  "		var fps = VideoSourceArgs.Contains ('?') ? int.Parse (VideoSourceArgs.Substring (VideoSourceArgs.IndexOf ('?') + 1)) : 15; " is 122.
Long Statement,System451.Communication.Dashboard.WPF.Controls,CameraView,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\CameraView.cs,TeamUpdated,The length of the statement  "		videoSource = ((VideoSource == DefaultVideoSource.WPILibTcpStream) ? (IDashboardVideoDataSource)new WPILibTcpVideoSource (TeamNumber) : ((VideoSource == DefaultVideoSource.Webcam) ? (IDashboardVideoDataSource)new WebCamVideoSource () : ((VideoSource == DefaultVideoSource.MJPEGStream) ? (IDashboardVideoDataSource)new MJPEGVideoSource (IPAddress.Parse (iparea)' fps) : null))); " is 377.
Long Statement,System451.Communication.Dashboard.WPF.Controls,CameraTarget,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\CameraView.cs,RectParse,The length of the statement  "			rf.Height = double.Parse (value.Substring (value.IndexOf ('x') + 1' (value.IndexOf ('+') - (value.IndexOf ('x') + 1)))); " is 120.
Long Statement,System451.Communication.Dashboard.WPF.Controls,ZomBGLControlGroup,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Composite\ZomBGLControlGroup.cs,Add,The length of the statement  "		(rcl as ZomBRemoteDataControl).DataControlEnabledChanged += new EventHandler (ZomBGLControlGroup_DataControlEnabledChanged); " is 124.
Long Statement,System451.Communication.Dashboard.WPF.Controls,ZomBGLControlGroup,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Composite\ZomBGLControlGroup.cs,ZomBGLControlGroup_DataControlEnabledChanged,The length of the statement  "	((sender as ZomBRemoteDataControl).Tag as IZomBDataControl).DataControlEnabled = (sender as ZomBRemoteDataControl).DataControlEnabled; " is 134.
Long Statement,System451.Communication.Dashboard.WPF.Controls,FlowPropertyGrid,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\FlowPropertyGrid.cs,UpdateBorder_Change,The length of the statement  "	grid.SetStats (grid.CfinalWidthl' grid.CfinalWidthr' grid.CCollumnPadding' grid.CfinalHeight' grid.Cnumcols' grid.Cnumrows); " is 124.
Long Statement,System451.Communication.Dashboard.WPF.Controls,ValueMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\ValueMeter.cs,ValueMeter_MouseMove,The length of the statement  "		DoubleValue = Math.Max (Min' Math.Min (Max' (1 - e.GetPosition (this).Y / this.ActualHeight) * (this.Max - this.Min) + this.Min)); " is 130.
Long Statement,System451.Communication.Dashboard.WPF.Controls,TacoMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\TacoMeter.cs,ValueMeter_MouseMove,The length of the statement  "		DoubleValue = Math.Max (this.Min' Math.Min (this.Max' PointToAngle (e.GetPosition (this)) / 180 * (this.Max - this.Min) + this.Min)); " is 133.
Long Statement,System451.Communication.Dashboard.WPF.Controls,SpikeControl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\SpikeControl.cs,boolchange,The length of the statement  "		Binding b = new Binding (Value == SpikePositions.Forward ? "Foreground" : Value == SpikePositions.Reverse ? "Background" : "BorderBrush"); " is 138.
Long Statement,System451.Communication.Dashboard.WPF.Controls,SpikeControl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\SpikeControl.cs,UpdateControl,The length of the statement  "		if (0 != (value.TypeHint & (ZomBDataTypeHint.Number | ZomBDataTypeHint.Boolean)) || DoubleValue.ToString () == StringValue) { " is 125.
Long Statement,System451.Communication.Dashboard.WPF.Controls,DashboardDataHubWindow,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\DashboardDataHubWindow.cs,Init,The length of the statement  "		if ((!current.MainModule.FileName.Contains ("Microsoft Visual Studio")) && (!current.MainModule.FileName.Contains ("devenv")) && (!current.MainModule.FileName.Contains ("MonoDevelop")) && (!current.MainModule.FileName.Contains ("VCSExpress.exe"))) { " is 249.
Long Statement,System451.Communication.Dashboard.WPF.Controls,DashboardDataHubWindow,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\DashboardDataHubWindow.cs,Init,The length of the statement  "	this.Icon = BitmapFrame.Create (new Uri ("pack://application:'''/ZomB;component/Resources/ZomB.ico"' UriKind.RelativeOrAbsolute)); " is 130.
Long Statement,System451.Communication.Dashboard.WPF.Controls.Designer.PrimitiveControls,GraphScale,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\PrimitiveControls\GraphScale.cs,OnRender,The length of the statement  "	var maxytext = new FormattedText ("-451.236789"' CultureInfo.CurrentUICulture' System.Windows.FlowDirection.LeftToRight' tface' emz' Foreground); " is 145.
Long Statement,System451.Communication.Dashboard.WPF.Controls.Designer.PrimitiveControls,GraphScale,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\PrimitiveControls\GraphScale.cs,OnRender,The length of the statement  "	var minytext = new FormattedText ("0"' CultureInfo.CurrentUICulture' System.Windows.FlowDirection.LeftToRight' tface' emz' Foreground); " is 135.
Long Statement,System451.Communication.Dashboard.WPF.Controls.Designer.PrimitiveControls,GraphScale,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\PrimitiveControls\GraphScale.cs,OnRender,The length of the statement  "		var virty = ((goodmax - realy) * (this.ActualHeight * (goodmax - goodmin) / (MaxY - MinY))) / (goodmax - goodmin) + ((MaxY - goodmax) * this.ActualHeight / (MaxY - MinY)); " is 171.
Long Statement,System451.Communication.Dashboard.WPF.Controls.Designer.PrimitiveControls,GraphScale,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\PrimitiveControls\GraphScale.cs,OnRender,The length of the statement  "		var localtext = new FormattedText (realy.ToString (fmstring)' CultureInfo.CurrentUICulture' System.Windows.FlowDirection.LeftToRight' tface' emz' Foreground); " is 158.
Long Statement,System451.Communication.Dashboard.WPF.Controls.Designer.PrimitiveControls,GraphScale,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\PrimitiveControls\GraphScale.cs,OnRender,The length of the statement  "	drawingContext.DrawLine (linepen' new Point (ActualWidth' ActualHeight + 2)' new Point (ActualWidth' ActualHeight + 4)); " is 120.
Long Statement,System451.Communication.Dashboard.WPF.Controls.Designer.PrimitiveControls,GraphScale,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\PrimitiveControls\GraphScale.cs,OnRender,The length of the statement  "	var TextX = new FormattedText (MinX.ToString ()' CultureInfo.CurrentUICulture' System.Windows.FlowDirection.LeftToRight' tface' emz' Foreground); " is 145.
Long Statement,System451.Communication.Dashboard.WPF.Controls.Designer.PrimitiveControls,GraphScale,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\PrimitiveControls\GraphScale.cs,OnRender,The length of the statement  "	TextX = new FormattedText (MaxX.ToString ()' CultureInfo.CurrentUICulture' System.Windows.FlowDirection.LeftToRight' tface' emz' Foreground); " is 141.
Long Statement,System451.Communication.Dashboard.WPF.Controls.Designer.PrimitiveControls,GraphScale,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\PrimitiveControls\GraphScale.cs,OnRender,The length of the statement  "		var realx = Math.Round (MinX + ((i * 80.0 * (MaxX - MinX) / ActualWidth)) * ActualWidth / (Math.Floor (ActualWidth / 80.0) * 80.0)); " is 132.
Long Statement,System451.Communication.Dashboard.WPF.Controls.Designer.PrimitiveControls,GraphScale,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\PrimitiveControls\GraphScale.cs,OnRender,The length of the statement  "		var virtx = (((realx - MinX) * (Math.Floor (ActualWidth / 80.0) * 80.0)) / ActualWidth) * ActualWidth / (MaxX - MinX) * ActualWidth / (Math.Floor (ActualWidth / 80.0) * 80.0); " is 175.
Long Statement,System451.Communication.Dashboard.WPF.Controls.Designer.PrimitiveControls,GraphScale,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\PrimitiveControls\GraphScale.cs,OnRender,The length of the statement  "		TextX = new FormattedText (realx.ToString ()' CultureInfo.CurrentUICulture' System.Windows.FlowDirection.LeftToRight' tface' emz' Foreground); " is 142.
Long Statement,System451.Communication.Dashboard.WPF.Controls.Designers,DesignerBase,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\DesignerBase.cs,GetRealProperty,The length of the statement  "	FieldInfo fieldInfo = Object.GetType ().GetField (Property.Name + "Property"' BindingFlags.Static | BindingFlags.FlattenHierarchy | BindingFlags.Public); " is 153.
Long Statement,System451.Communication.Dashboard.WPF.Controls.Designer,TriggerListenersDesignerWindow,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\TriggerListenersDesignerWindow.xaml.cs,btn_Click,The length of the statement  "	if (box != null && LogicalTreeHelper.GetParent (box) == Stacker && Stacker.Children.IndexOf (box) < Stacker.Children.Count - 1) { " is 129.
Long Statement,System451.Communication.Dashboard.WPF.Controls.Designer,TriggerListenersDesignerWindow,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\TriggerListenersDesignerWindow.xaml.cs,cb_SelectionChanged,The length of the statement  "	(box.Children [1] as ComboBox).ItemsSource = from src in ZDesigner.GetChildByName (cbbx.SelectedValue.ToString ()).GetType ().GetMethods () " is 139.
Long Statement,System451.Communication.Dashboard.WPF.Controls.Designer,ZomBUrlCollectionDesignerWindow,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\ZomBUrlCollectionDesignerWindow.xaml.cs,FindUrls,The length of the statement  "		ErrorDialog.PrcException (new Exception ("Error searching for Sources. This is most likely caused by a missing dependency. Is SlimDX installed?"' ex)); " is 151.
Long Statement,System451.Communication.Dashboard.WPF.Controls.Designer,ZomBUrlCollectionDesignerWindow,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\ZomBUrlCollectionDesignerWindow.xaml.cs,ListItems_SelectionChanged,The length of the statement  "			if (nbtxt == ("/" + kvpair.Value.SourceName) || nbtxt.StartsWith ("/" + kvpair.Value.SourceName + "?") || nbtxt.StartsWith ("/" + kvpair.Value.SourceName + "/")) { " is 163.
Long Statement,System451.Communication.Dashboard.WPF.Controls.Designer,ZomBUrlCollectionDesignerWindow,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\ZomBUrlCollectionDesignerWindow.xaml.cs,GeneralCustardBtn_Checked,The length of the statement  "		var newtxt = ((KeyValuePair<TypedDataSourceAttributeComparer' DataSourceAttribute>)KnownTypes.SelectedItem).Value.SourceName; " is 125.
Long Statement,System451.Communication.Dashboard.WPF.Controls.Designer,ZomBUrlCollectionDesignerWindow,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\ZomBUrlCollectionDesignerWindow.xaml.cs,nameBox_KeyDown,The length of the statement  "			if (nbtxt == ("/" + kvpair.Value.SourceName) || nbtxt.StartsWith ("/" + kvpair.Value.SourceName + "?") || nbtxt.StartsWith ("/" + kvpair.Value.SourceName + "/")) { " is 163.
Long Statement,System451.Communication.Dashboard.WPF.Controls.Designer,BrushDesignerWindow,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\BrushDesignerWindow.xaml.cs,ColorMidpoint,The length of the statement  "	return Color.FromArgb ((byte)((c1.A + c2.A) / 2)' (byte)((c1.R + c2.R) / 2)' (byte)((c1.G + c2.G) / 2)' (byte)((c1.B + c2.B) / 2)); " is 131.
Long Statement,System451.Communication.Dashboard.WPF.Controls.Designer,CameraDesignerWindow,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\CameraDesignerWindow.xaml.cs,ListItems_SelectionChanged,The length of the statement  "		pensp.Children.Add (DesignUtils.GetDesignerField ((ListItems.SelectedItem as CameraTarget).Border' typeof(Pen).GetProperty ("Brush"))); " is 135.
Long Statement,System451.Communication.Dashboard.WPF.Controls.Designer,CameraDesignerWindow,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\CameraDesignerWindow.xaml.cs,ListItems_SelectionChanged,The length of the statement  "		WidthBox.Text = ((ListItems.SelectedItem as CameraTarget).Border.Thickness * ((Object.Width + Object.Height) / 2.0)).ToString (); " is 129.
Long Statement,System451.Communication.Dashboard.WPF.Controls.Designer,CameraDesignerWindow,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\CameraDesignerWindow.xaml.cs,WidthBox_TextChanged,The length of the statement  "			(zcc [zcc.IndexOf (ListItems.SelectedItem as CameraTarget)] as CameraTarget).Border.Thickness = (double.Parse (WidthBox.Text) / ((Object.Width + Object.Height) / 2.0)); " is 168.
Long Statement,System451.Communication.Dashboard.WPF.Controls.Designer,ColorControlColorSeperator,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\ColorControlColorSeperator.cs,Convert,The length of the statement  "	return new SolidColorBrush (Color.FromArgb (System.Convert.ToByte (value [3])' System.Convert.ToByte (value [0])' System.Convert.ToByte (value [1])' System.Convert.ToByte (value [2]))); " is 185.
Long Statement,System451.Communication.Dashboard.WPF.Design,BrushDesigner,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\ColorDesigner.cs,GetValue,The length of the statement  "			StringBuilder s = new StringBuilder ("<LinearGradientBrush StartPoint=\"" + lb.StartPoint.ToString () + "\" EndPoint=\""); " is 122.
Long Statement,WPF.Design,Reflector,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Design\Reflector.cs,GetZomBDesignableClasses,The length of the statement  "		throw new Exception ("Error searching for Controls. This is most likely caused by a missing dependency. Is SlimDX installed?"' ex); " is 131.
Long Statement,WPF.Design,Reflector,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Design\Reflector.cs,SafeFind,The length of the statement  "			return (DrawingImage)XamlReader.Load (new MemoryStream (UTF8Encoding.UTF8.GetBytes (@"<DrawingImage xmlns=""http://schemas.microsoft.com/winfx/2006/xaml/presentation""> " is 168.
Long Statement,WPF.Design,Reflector,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Design\Reflector.cs,CreateInstanceOf,The length of the statement  "	return Activator.CreateInstance (appDomain' Assembly.GetAssembly (typeof(T)).FullName' typeof(T).FullName).Unwrap () as T; " is 122.
Long Statement,WPF.Design,Reflector,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Design\Reflector.cs,CreateInstanceOf,The length of the statement  "	return Activator.CreateInstance (appDomain' Assembly.GetAssembly (typeof(T)).FullName' typeof(T).FullName' false' BindingFlags.Default' null' args' null' null' new System.Security.Policy.Evidence ()).Unwrap () as T; " is 215.
Complex Conditional,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,NextToken,The conditional expression  "json [index] == 'f' && json [index + 1] == 'a' && json [index + 2] == 'l' && json [index + 3] == 's' && json [index + 4] == 'e'"  is complex.
Complex Conditional,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,NextToken,The conditional expression  "json [index] == 't' && json [index + 1] == 'r' && json [index + 2] == 'u' && json [index + 3] == 'e'"  is complex.
Complex Conditional,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,NextToken,The conditional expression  "json [index] == 'n' && json [index + 1] == 'u' && json [index + 2] == 'l' && json [index + 3] == 'l'"  is complex.
Complex Conditional,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,SerializeValue,The conditional expression  "(value is Boolean) && ((Boolean)value == true) || (value is JsonObject && (value as JsonObject).Type == typeof(bool) && (value as JsonObject).bValue)"  is complex.
Complex Conditional,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,SerializeValue,The conditional expression  "(value is Boolean) && ((Boolean)value == false) || (value is JsonObject && (value as JsonObject).Type == typeof(bool) && !(value as JsonObject).bValue)"  is complex.
Complex Conditional,System451.Communication.Dashboard,DashboardDataHubForm,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\DashboardDataHubForm.cs,DashboardDataHubForm,The conditional expression  "(!current.MainModule.FileName.Contains ("Microsoft Visual Studio")) && (!current.MainModule.FileName.Contains ("devenv")) && (!current.MainModule.FileName.Contains ("MonoDevelop")) && (!current.MainModule.FileName.Contains ("VCSExpress.exe"))"  is complex.
Complex Conditional,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,FieldIDToDottedNameNoCache,The conditional expression  "hideSmartTypes && ((name == "Data" && lup.ContainsKey ("~TYPE~") && tablesbyparent.ContainsKey (lup)) || (name == "~TYPE~" && tablesbyparent.ContainsKey (lup)))"  is complex.
Complex Conditional,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,FieldIDToDottedNameNoCache,The conditional expression  "hideSmartTypes && ((tmp.Name == "Data" && tmp.Table.ContainsKey ("~TYPE~") && tablesbyparent.ContainsKey (tmp.Table)) || (tmp.Name == "~TYPE~" && tablesbyparent.ContainsKey (tmp.Table)))"  is complex.
Complex Conditional,System451.Communication.Dashboard.Net,SerialDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\SerialDataSource.cs,DoWork,The conditional expression  "line [0] != ' ' && line [0] != ';' && line [0] != '/' && line [0] != '#'"  is complex.
Complex Conditional,System451.Communication.Dashboard.Net.Video,WPILibTcpVideoSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\Video\ImageSource.cs,GraveWorker,The conditional expression  "(buf [0] != 1) || (buf [1] != 0) || (buf [2] != 0) || (buf [3] != 0)"  is complex.
Complex Conditional,System451.Communication.Dashboard.Controls,VirtualdAnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\VirtualdAnalogMeter.cs,CreateBackground,The conditional expression  "(tickSmallFrequency > 0 && (i - minValue) % tickSmallFrequency == 0) || (tickLargeFrequency > 0 && (i - minValue) % tickLargeFrequency == 0)"  is complex.
Complex Conditional,Design,AnalogMeterDesigner,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\AnalogMeter.cs,OnSetCursor,The conditional expression  "(!inadorn && !dragin) || (cans && inadorn && !dragin)"  is complex.
Complex Conditional,System451.Communication.Dashboard.WPF.Controls,DashboardDataHubWindow,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\DashboardDataHubWindow.cs,Init,The conditional expression  "(!current.MainModule.FileName.Contains ("Microsoft Visual Studio")) && (!current.MainModule.FileName.Contains ("devenv")) && (!current.MainModule.FileName.Contains ("MonoDevelop")) && (!current.MainModule.FileName.Contains ("VCSExpress.exe"))"  is complex.
Empty Catch Block,System451.Communication.Dashboard.Utils,BTFinger,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,Start,The method has an empty catch block.
Empty Catch Block,System451.Communication.Dashboard.Utils,BTZomBServer,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,Start,The method has an empty catch block.
Empty Catch Block,System451.Communication.Dashboard.Utils,BTZomBServer,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,Stop,The method has an empty catch block.
Empty Catch Block,System451.Communication.Dashboard.Utils,Updater,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Utils\Updater.cs,Download,The method has an empty catch block.
Empty Catch Block,System451.Communication.Dashboard,CsvSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\CsvDataSource.cs,Start,The method has an empty catch block.
Empty Catch Block,System451.Communication.Dashboard,CsvSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\CsvDataSource.cs,Stop,The method has an empty catch block.
Empty Catch Block,System451.Communication.Dashboard,CsvSaver,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\CsvDataMonitor.cs,WriteBuffer,The method has an empty catch block.
Empty Catch Block,System451.Communication.Dashboard,CsvSaver,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\CsvDataMonitor.cs,WriteOff,The method has an empty catch block.
Empty Catch Block,System451.Communication.Dashboard,CsvSaver,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\CsvDataMonitor.cs,UpdateData,The method has an empty catch block.
Empty Catch Block,System451.Communication.Dashboard,DashboardDataHub,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardDataHub.cs,Remove,The method has an empty catch block.
Empty Catch Block,System451.Communication.Dashboard,DashboardDataHub,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardDataHub.cs,control_DataUpdated,The method has an empty catch block.
Empty Catch Block,System451.Communication.Dashboard,DashboardDataHub,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardDataHub.cs,RegisterSource,The method has an empty catch block.
Empty Catch Block,System451.Communication.Dashboard,DashboardDataHub,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardDataHub.cs,RegisterSender,The method has an empty catch block.
Empty Catch Block,System451.Communication.Dashboard,DashboardDataHub,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardDataHub.cs,ProcessControl,The method has an empty catch block.
Empty Catch Block,System451.Communication.Dashboard,DashboardDataHub,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardDataHub.cs,RestartDS,The method has an empty catch block.
Empty Catch Block,System451.Communication.Dashboard,DashboardDataHubForm,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\DashboardDataHubForm.cs,DashboardDataHubForm,The method has an empty catch block.
Empty Catch Block,System451.Communication.Dashboard,DashboardDataHubForm,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\DashboardDataHubForm.cs,DashboardDataHubForm_FormClosing,The method has an empty catch block.
Empty Catch Block,System451.Communication.Dashboard,ErrorDialog,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\ErrorDialog.xaml.cs,PrcException,The method has an empty catch block.
Empty Catch Block,System451.Communication.Dashboard.Net,TestDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\TestDataSource.cs,Start,The method has an empty catch block.
Empty Catch Block,System451.Communication.Dashboard.Net,TestDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\TestDataSource.cs,Stop,The method has an empty catch block.
Empty Catch Block,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,Stop,The method has an empty catch block.
Empty Catch Block,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,DoWork,The method has an empty catch block.
Empty Catch Block,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,DoWork,The method has an empty catch block.
Empty Catch Block,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,DoWork,The method has an empty catch block.
Empty Catch Block,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,DoWork,The method has an empty catch block.
Empty Catch Block,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,DoWork,The method has an empty catch block.
Empty Catch Block,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,DoWork,The method has an empty catch block.
Empty Catch Block,System451.Communication.Dashboard.Net,SerialDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\SerialDataSource.cs,Stop,The method has an empty catch block.
Empty Catch Block,System451.Communication.Dashboard.Net,SerialDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\SerialDataSource.cs,DoWork,The method has an empty catch block.
Empty Catch Block,System451.Communication.Dashboard.Net,SmartDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\SmartDataSource.cs,Stop,The method has an empty catch block.
Empty Catch Block,System451.Communication.Dashboard.Net,SmartDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\SmartDataSource.cs,DoWork,The method has an empty catch block.
Empty Catch Block,System451.Communication.Dashboard.Net,TCPDataSender,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\TCPDataSender.cs,Start,The method has an empty catch block.
Empty Catch Block,System451.Communication.Dashboard.Net,TCPDataSender,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\TCPDataSender.cs,Stop,The method has an empty catch block.
Empty Catch Block,System451.Communication.Dashboard.Net,DashboardPacketEmulator,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DashboardPacketEmulator.cs,Stop,The method has an empty catch block.
Empty Catch Block,System451.Communication.Dashboard.Net,DashboardTCPEmulator,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DashboardPacketEmulator.cs,dowork,The method has an empty catch block.
Empty Catch Block,System451.Communication.Dashboard.Net,DashboardTCPEmulator,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DashboardPacketEmulator.cs,Stop,The method has an empty catch block.
Empty Catch Block,System451.Communication.Dashboard.Net,ZomBUrl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\IDashboardDataSource.cs,ZomBUrl,The method has an empty catch block.
Empty Catch Block,System451.Communication.Dashboard.Net,DashboardPacketDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DashboardPacketDataSource.cs,Stop,The method has an empty catch block.
Empty Catch Block,System451.Communication.Dashboard.Net,DashboardPacketDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DashboardPacketDataSource.cs,DoWork,The method has an empty catch block.
Empty Catch Block,System451.Communication.Dashboard.Net,TCPDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\TCPDataSource.cs,Stop,The method has an empty catch block.
Empty Catch Block,System451.Communication.Dashboard.Net,TCPDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\TCPDataSource.cs,Stop,The method has an empty catch block.
Empty Catch Block,System451.Communication.Dashboard.Net,TCPDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\TCPDataSource.cs,TickleClientWorker,The method has an empty catch block.
Empty Catch Block,System451.Communication.Dashboard.Net,TCPDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\TCPDataSource.cs,TickleClientWorker,The method has an empty catch block.
Empty Catch Block,System451.Communication.Dashboard.Net,TCPDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\TCPDataSource.cs,TickleClientWorker,The method has an empty catch block.
Empty Catch Block,System451.Communication.Dashboard.Net.Video,FFmpeg,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\Video\FFmpeg.cs,exec,The method has an empty catch block.
Empty Catch Block,System451.Communication.Dashboard.Net.Video,MJPEGVideoSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\Video\MJpegStream.cs,Stop,The method has an empty catch block.
Empty Catch Block,System451.Communication.Dashboard.Net.Video,WPILibTcpVideoSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\Video\ImageSource.cs,Stop,The method has an empty catch block.
Empty Catch Block,System451.Communication.Dashboard.Net.Video,WPILibTcpVideoSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\Video\ImageSource.cs,GraveWorker,The method has an empty catch block.
Empty Catch Block,Utils,AutoExtractor,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Utils\AutoExtractor.cs,AssemblyResolve,The method has an empty catch block.
Empty Catch Block,Utils,VideoStreamSaver,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\VideoStreamSaver.cs,Dispose,The method has an empty catch block.
Empty Catch Block,Utils,VideoStreamSaver,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\VideoStreamSaver.cs,Dispose,The method has an empty catch block.
Empty Catch Block,Utils,VideoStreamSaver,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\VideoStreamSaver.cs,Dispose,The method has an empty catch block.
Empty Catch Block,Utils,VideoStreamSaver,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\VideoStreamSaver.cs,aviSaverbg,The method has an empty catch block.
Empty Catch Block,System451.Communication.Dashboard.Controls,ZomBeye,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\ZomBeye.cs,ReloadAll,The method has an empty catch block.
Empty Catch Block,System451.Communication.Dashboard.Libs.WebCam_Capture,WebCamCapture,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\WebCam_Capture\WebCamCapture.cs,Stop,The method has an empty catch block.
Empty Catch Block,Controls,CameraView,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\CameraView.cs,timer1_Tick,The method has an empty catch block.
Empty Catch Block,Net.Video,VideoEncoder,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\VideoStreamSaver.cs,Dispose,The method has an empty catch block.
Empty Catch Block,System451.Communication.Dashboard.WPF.Controls,CameraView,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\CameraView.cs,TeamUpdated,The method has an empty catch block.
Empty Catch Block,System451.Communication.Dashboard.WPF.Controls,CameraTarget,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\CameraView.cs,RectParse,The method has an empty catch block.
Empty Catch Block,System451.Communication.Dashboard.WPF.Controls,ZomBGLControlGroup,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Composite\ZomBGLControlGroup.cs,AddControls,The method has an empty catch block.
Empty Catch Block,System451.Communication.Dashboard.WPF.Controls,DataGraph,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\DataGraph.cs,UpdateControl,The method has an empty catch block.
Empty Catch Block,System451.Communication.Dashboard.WPF.Controls,SpikeControl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\SpikeControl.cs,UpdateControl,The method has an empty catch block.
Empty Catch Block,System451.Communication.Dashboard.WPF.Controls,DashboardDataCanvas,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\DashboardDataCanvas.cs,AddControls,The method has an empty catch block.
Empty Catch Block,System451.Communication.Dashboard.WPF.Controls,DashboardDataHubWindow,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\DashboardDataHubWindow.cs,Init,The method has an empty catch block.
Empty Catch Block,System451.Communication.Dashboard.WPF.Controls,DashboardDataHubWindow,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\DashboardDataHubWindow.cs,Init,The method has an empty catch block.
Empty Catch Block,System451.Communication.Dashboard.WPF.Controls,DashboardDataHubWindow,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\DashboardDataHubWindow.cs,Init,The method has an empty catch block.
Empty Catch Block,System451.Communication.Dashboard.WPF.Controls,DashboardDataHubWindow,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\DashboardDataHubWindow.cs,Init,The method has an empty catch block.
Empty Catch Block,System451.Communication.Dashboard.WPF.Controls,DashboardDataHubWindow,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\DashboardDataHubWindow.cs,Init,The method has an empty catch block.
Empty Catch Block,System451.Communication.Dashboard.WPF.Controls,DashboardDataHubWindow,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\DashboardDataHubWindow.cs,AddControls,The method has an empty catch block.
Empty Catch Block,System451.Communication.Dashboard.WPF.Controls,DashboardDataHubWindow,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\DashboardDataHubWindow.cs,StopAll,The method has an empty catch block.
Empty Catch Block,System451.Communication.Dashboard.WPF.Controls,DashboardDataHubWindow,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\DashboardDataHubWindow.cs,StopControls,The method has an empty catch block.
Empty Catch Block,System451.Communication.Dashboard.WPF.Controls,DashboardDataHubWindow,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\DashboardDataHubWindow.cs,StopControls,The method has an empty catch block.
Empty Catch Block,System451.Communication.Dashboard.WPF.Controls,DashboardDataHubWindow,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\DashboardDataHubWindow.cs,StopControls,The method has an empty catch block.
Empty Catch Block,System451.Communication.Dashboard.WPF.Controls,ViZBindingParser,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Design\ViZBindingParser.cs,Convert,The method has an empty catch block.
Empty Catch Block,System451.Communication.Dashboard.WPF.Controls,ViZBindingParser,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Design\ViZBindingParser.cs,Convert,The method has an empty catch block.
Empty Catch Block,System451.Communication.Dashboard.WPF.Controls,ViZBindingParser,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Design\ViZBindingParser.cs,Convert,The method has an empty catch block.
Empty Catch Block,System451.Communication.Dashboard.WPF.Controls,ViZBindingParser,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Design\ViZBindingParser.cs,Convert,The method has an empty catch block.
Empty Catch Block,System451.Communication.Dashboard.WPF.Controls.Designers,TriggerListenersDesigner,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\TriggerListenersDesigner.cs,GetProperyField,The method has an empty catch block.
Empty Catch Block,System451.Communication.Dashboard.WPF.Controls.Designers,DesignerBase,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\DesignerBase.cs,IsDefaultValue,The method has an empty catch block.
Empty Catch Block,System451.Communication.Dashboard.WPF.Controls.Designer,ImageSourceDesigner,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\ImageSourceDesigner.cs,GetProperyField,The method has an empty catch block.
Empty Catch Block,System451.Communication.Dashboard.WPF.Controls.Designer,ZomBUrlCollectionDesigner,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\ZomBUrlDesigner.cs,GetProperyField,The method has an empty catch block.
Empty Catch Block,System451.Communication.Dashboard.WPF.Controls.Designer,ZomBUrlCollectionDesigner,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\ZomBUrlDesigner.cs,GetProperyField,The method has an empty catch block.
Empty Catch Block,System451.Communication.Dashboard.WPF.Controls.Designer,ZomBUrlCollectionDesigner,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\ZomBUrlDesigner.cs,Set,The method has an empty catch block.
Empty Catch Block,System451.Communication.Dashboard.WPF.Controls.Designer,CameraDesignerWindow,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\CameraDesignerWindow.xaml.cs,WidthBox_TextChanged,The method has an empty catch block.
Empty Catch Block,System451.Communication.Dashboard.WPF.Design,BrushDesigner,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\ColorDesigner.cs,GetProperyField,The method has an empty catch block.
Empty Catch Block,System451.Communication.Dashboard.WPF.Design,ColorDesigner,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\ColorDesigner.cs,GetProperyField,The method has an empty catch block.
Magic Number,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,ParseString,The following statement contains a magic number: while (!complete) {  	if (index == json.Length) {  		break;  	}  	c = json [index++];  	if (c == '"') {  		complete = true;  		break;  	}  	else if (c == '\\') {  		if (index == json.Length) {  			break;  		}  		c = json [index++];  		if (c == '"') {  			s.Append ('"');  		}  		else if (c == '\\') {  			s.Append ('\\');  		}  		else if (c == '/') {  			s.Append ('/');  		}  		else if (c == 'b') {  			s.Append ('\b');  		}  		else if (c == 'f') {  			s.Append ('\f');  		}  		else if (c == 'n') {  			s.Append ('\n');  		}  		else if (c == 'r') {  			s.Append ('\r');  		}  		else if (c == 't') {  			s.Append ('\t');  		}  		else if (c == 'u') {  			int remainingLength = json.Length - index;  			if (remainingLength >= 4) {  				// parse the 32 bit hex into an integer codepoint  				uint codePoint;  				if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint))) {  					return "";  				}  				// convert the integer codepoint to a unicode char and add to string  				s.Append (Char.ConvertFromUtf32 ((int)codePoint));  				// skip 4 chars  				index += 4;  			}  			else {  				break;  			}  		}  	}  	else {  		s.Append (c);  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,ParseString,The following statement contains a magic number: while (!complete) {  	if (index == json.Length) {  		break;  	}  	c = json [index++];  	if (c == '"') {  		complete = true;  		break;  	}  	else if (c == '\\') {  		if (index == json.Length) {  			break;  		}  		c = json [index++];  		if (c == '"') {  			s.Append ('"');  		}  		else if (c == '\\') {  			s.Append ('\\');  		}  		else if (c == '/') {  			s.Append ('/');  		}  		else if (c == 'b') {  			s.Append ('\b');  		}  		else if (c == 'f') {  			s.Append ('\f');  		}  		else if (c == 'n') {  			s.Append ('\n');  		}  		else if (c == 'r') {  			s.Append ('\r');  		}  		else if (c == 't') {  			s.Append ('\t');  		}  		else if (c == 'u') {  			int remainingLength = json.Length - index;  			if (remainingLength >= 4) {  				// parse the 32 bit hex into an integer codepoint  				uint codePoint;  				if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint))) {  					return "";  				}  				// convert the integer codepoint to a unicode char and add to string  				s.Append (Char.ConvertFromUtf32 ((int)codePoint));  				// skip 4 chars  				index += 4;  			}  			else {  				break;  			}  		}  	}  	else {  		s.Append (c);  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,ParseString,The following statement contains a magic number: while (!complete) {  	if (index == json.Length) {  		break;  	}  	c = json [index++];  	if (c == '"') {  		complete = true;  		break;  	}  	else if (c == '\\') {  		if (index == json.Length) {  			break;  		}  		c = json [index++];  		if (c == '"') {  			s.Append ('"');  		}  		else if (c == '\\') {  			s.Append ('\\');  		}  		else if (c == '/') {  			s.Append ('/');  		}  		else if (c == 'b') {  			s.Append ('\b');  		}  		else if (c == 'f') {  			s.Append ('\f');  		}  		else if (c == 'n') {  			s.Append ('\n');  		}  		else if (c == 'r') {  			s.Append ('\r');  		}  		else if (c == 't') {  			s.Append ('\t');  		}  		else if (c == 'u') {  			int remainingLength = json.Length - index;  			if (remainingLength >= 4) {  				// parse the 32 bit hex into an integer codepoint  				uint codePoint;  				if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint))) {  					return "";  				}  				// convert the integer codepoint to a unicode char and add to string  				s.Append (Char.ConvertFromUtf32 ((int)codePoint));  				// skip 4 chars  				index += 4;  			}  			else {  				break;  			}  		}  	}  	else {  		s.Append (c);  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,ParseString,The following statement contains a magic number: if (c == '"') {  	complete = true;  	break;  }  else if (c == '\\') {  	if (index == json.Length) {  		break;  	}  	c = json [index++];  	if (c == '"') {  		s.Append ('"');  	}  	else if (c == '\\') {  		s.Append ('\\');  	}  	else if (c == '/') {  		s.Append ('/');  	}  	else if (c == 'b') {  		s.Append ('\b');  	}  	else if (c == 'f') {  		s.Append ('\f');  	}  	else if (c == 'n') {  		s.Append ('\n');  	}  	else if (c == 'r') {  		s.Append ('\r');  	}  	else if (c == 't') {  		s.Append ('\t');  	}  	else if (c == 'u') {  		int remainingLength = json.Length - index;  		if (remainingLength >= 4) {  			// parse the 32 bit hex into an integer codepoint  			uint codePoint;  			if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint))) {  				return "";  			}  			// convert the integer codepoint to a unicode char and add to string  			s.Append (Char.ConvertFromUtf32 ((int)codePoint));  			// skip 4 chars  			index += 4;  		}  		else {  			break;  		}  	}  }  else {  	s.Append (c);  }  
Magic Number,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,ParseString,The following statement contains a magic number: if (c == '"') {  	complete = true;  	break;  }  else if (c == '\\') {  	if (index == json.Length) {  		break;  	}  	c = json [index++];  	if (c == '"') {  		s.Append ('"');  	}  	else if (c == '\\') {  		s.Append ('\\');  	}  	else if (c == '/') {  		s.Append ('/');  	}  	else if (c == 'b') {  		s.Append ('\b');  	}  	else if (c == 'f') {  		s.Append ('\f');  	}  	else if (c == 'n') {  		s.Append ('\n');  	}  	else if (c == 'r') {  		s.Append ('\r');  	}  	else if (c == 't') {  		s.Append ('\t');  	}  	else if (c == 'u') {  		int remainingLength = json.Length - index;  		if (remainingLength >= 4) {  			// parse the 32 bit hex into an integer codepoint  			uint codePoint;  			if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint))) {  				return "";  			}  			// convert the integer codepoint to a unicode char and add to string  			s.Append (Char.ConvertFromUtf32 ((int)codePoint));  			// skip 4 chars  			index += 4;  		}  		else {  			break;  		}  	}  }  else {  	s.Append (c);  }  
Magic Number,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,ParseString,The following statement contains a magic number: if (c == '"') {  	complete = true;  	break;  }  else if (c == '\\') {  	if (index == json.Length) {  		break;  	}  	c = json [index++];  	if (c == '"') {  		s.Append ('"');  	}  	else if (c == '\\') {  		s.Append ('\\');  	}  	else if (c == '/') {  		s.Append ('/');  	}  	else if (c == 'b') {  		s.Append ('\b');  	}  	else if (c == 'f') {  		s.Append ('\f');  	}  	else if (c == 'n') {  		s.Append ('\n');  	}  	else if (c == 'r') {  		s.Append ('\r');  	}  	else if (c == 't') {  		s.Append ('\t');  	}  	else if (c == 'u') {  		int remainingLength = json.Length - index;  		if (remainingLength >= 4) {  			// parse the 32 bit hex into an integer codepoint  			uint codePoint;  			if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint))) {  				return "";  			}  			// convert the integer codepoint to a unicode char and add to string  			s.Append (Char.ConvertFromUtf32 ((int)codePoint));  			// skip 4 chars  			index += 4;  		}  		else {  			break;  		}  	}  }  else {  	s.Append (c);  }  
Magic Number,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,ParseString,The following statement contains a magic number: if (c == '\\') {  	if (index == json.Length) {  		break;  	}  	c = json [index++];  	if (c == '"') {  		s.Append ('"');  	}  	else if (c == '\\') {  		s.Append ('\\');  	}  	else if (c == '/') {  		s.Append ('/');  	}  	else if (c == 'b') {  		s.Append ('\b');  	}  	else if (c == 'f') {  		s.Append ('\f');  	}  	else if (c == 'n') {  		s.Append ('\n');  	}  	else if (c == 'r') {  		s.Append ('\r');  	}  	else if (c == 't') {  		s.Append ('\t');  	}  	else if (c == 'u') {  		int remainingLength = json.Length - index;  		if (remainingLength >= 4) {  			// parse the 32 bit hex into an integer codepoint  			uint codePoint;  			if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint))) {  				return "";  			}  			// convert the integer codepoint to a unicode char and add to string  			s.Append (Char.ConvertFromUtf32 ((int)codePoint));  			// skip 4 chars  			index += 4;  		}  		else {  			break;  		}  	}  }  else {  	s.Append (c);  }  
Magic Number,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,ParseString,The following statement contains a magic number: if (c == '\\') {  	if (index == json.Length) {  		break;  	}  	c = json [index++];  	if (c == '"') {  		s.Append ('"');  	}  	else if (c == '\\') {  		s.Append ('\\');  	}  	else if (c == '/') {  		s.Append ('/');  	}  	else if (c == 'b') {  		s.Append ('\b');  	}  	else if (c == 'f') {  		s.Append ('\f');  	}  	else if (c == 'n') {  		s.Append ('\n');  	}  	else if (c == 'r') {  		s.Append ('\r');  	}  	else if (c == 't') {  		s.Append ('\t');  	}  	else if (c == 'u') {  		int remainingLength = json.Length - index;  		if (remainingLength >= 4) {  			// parse the 32 bit hex into an integer codepoint  			uint codePoint;  			if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint))) {  				return "";  			}  			// convert the integer codepoint to a unicode char and add to string  			s.Append (Char.ConvertFromUtf32 ((int)codePoint));  			// skip 4 chars  			index += 4;  		}  		else {  			break;  		}  	}  }  else {  	s.Append (c);  }  
Magic Number,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,ParseString,The following statement contains a magic number: if (c == '\\') {  	if (index == json.Length) {  		break;  	}  	c = json [index++];  	if (c == '"') {  		s.Append ('"');  	}  	else if (c == '\\') {  		s.Append ('\\');  	}  	else if (c == '/') {  		s.Append ('/');  	}  	else if (c == 'b') {  		s.Append ('\b');  	}  	else if (c == 'f') {  		s.Append ('\f');  	}  	else if (c == 'n') {  		s.Append ('\n');  	}  	else if (c == 'r') {  		s.Append ('\r');  	}  	else if (c == 't') {  		s.Append ('\t');  	}  	else if (c == 'u') {  		int remainingLength = json.Length - index;  		if (remainingLength >= 4) {  			// parse the 32 bit hex into an integer codepoint  			uint codePoint;  			if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint))) {  				return "";  			}  			// convert the integer codepoint to a unicode char and add to string  			s.Append (Char.ConvertFromUtf32 ((int)codePoint));  			// skip 4 chars  			index += 4;  		}  		else {  			break;  		}  	}  }  else {  	s.Append (c);  }  
Magic Number,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,ParseString,The following statement contains a magic number: if (c == '"') {  	s.Append ('"');  }  else if (c == '\\') {  	s.Append ('\\');  }  else if (c == '/') {  	s.Append ('/');  }  else if (c == 'b') {  	s.Append ('\b');  }  else if (c == 'f') {  	s.Append ('\f');  }  else if (c == 'n') {  	s.Append ('\n');  }  else if (c == 'r') {  	s.Append ('\r');  }  else if (c == 't') {  	s.Append ('\t');  }  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint))) {  			return "";  		}  		// convert the integer codepoint to a unicode char and add to string  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,ParseString,The following statement contains a magic number: if (c == '"') {  	s.Append ('"');  }  else if (c == '\\') {  	s.Append ('\\');  }  else if (c == '/') {  	s.Append ('/');  }  else if (c == 'b') {  	s.Append ('\b');  }  else if (c == 'f') {  	s.Append ('\f');  }  else if (c == 'n') {  	s.Append ('\n');  }  else if (c == 'r') {  	s.Append ('\r');  }  else if (c == 't') {  	s.Append ('\t');  }  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint))) {  			return "";  		}  		// convert the integer codepoint to a unicode char and add to string  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,ParseString,The following statement contains a magic number: if (c == '"') {  	s.Append ('"');  }  else if (c == '\\') {  	s.Append ('\\');  }  else if (c == '/') {  	s.Append ('/');  }  else if (c == 'b') {  	s.Append ('\b');  }  else if (c == 'f') {  	s.Append ('\f');  }  else if (c == 'n') {  	s.Append ('\n');  }  else if (c == 'r') {  	s.Append ('\r');  }  else if (c == 't') {  	s.Append ('\t');  }  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint))) {  			return "";  		}  		// convert the integer codepoint to a unicode char and add to string  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,ParseString,The following statement contains a magic number: if (c == '\\') {  	s.Append ('\\');  }  else if (c == '/') {  	s.Append ('/');  }  else if (c == 'b') {  	s.Append ('\b');  }  else if (c == 'f') {  	s.Append ('\f');  }  else if (c == 'n') {  	s.Append ('\n');  }  else if (c == 'r') {  	s.Append ('\r');  }  else if (c == 't') {  	s.Append ('\t');  }  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint))) {  			return "";  		}  		// convert the integer codepoint to a unicode char and add to string  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,ParseString,The following statement contains a magic number: if (c == '\\') {  	s.Append ('\\');  }  else if (c == '/') {  	s.Append ('/');  }  else if (c == 'b') {  	s.Append ('\b');  }  else if (c == 'f') {  	s.Append ('\f');  }  else if (c == 'n') {  	s.Append ('\n');  }  else if (c == 'r') {  	s.Append ('\r');  }  else if (c == 't') {  	s.Append ('\t');  }  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint))) {  			return "";  		}  		// convert the integer codepoint to a unicode char and add to string  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,ParseString,The following statement contains a magic number: if (c == '\\') {  	s.Append ('\\');  }  else if (c == '/') {  	s.Append ('/');  }  else if (c == 'b') {  	s.Append ('\b');  }  else if (c == 'f') {  	s.Append ('\f');  }  else if (c == 'n') {  	s.Append ('\n');  }  else if (c == 'r') {  	s.Append ('\r');  }  else if (c == 't') {  	s.Append ('\t');  }  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint))) {  			return "";  		}  		// convert the integer codepoint to a unicode char and add to string  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,ParseString,The following statement contains a magic number: if (c == '/') {  	s.Append ('/');  }  else if (c == 'b') {  	s.Append ('\b');  }  else if (c == 'f') {  	s.Append ('\f');  }  else if (c == 'n') {  	s.Append ('\n');  }  else if (c == 'r') {  	s.Append ('\r');  }  else if (c == 't') {  	s.Append ('\t');  }  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint))) {  			return "";  		}  		// convert the integer codepoint to a unicode char and add to string  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,ParseString,The following statement contains a magic number: if (c == '/') {  	s.Append ('/');  }  else if (c == 'b') {  	s.Append ('\b');  }  else if (c == 'f') {  	s.Append ('\f');  }  else if (c == 'n') {  	s.Append ('\n');  }  else if (c == 'r') {  	s.Append ('\r');  }  else if (c == 't') {  	s.Append ('\t');  }  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint))) {  			return "";  		}  		// convert the integer codepoint to a unicode char and add to string  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,ParseString,The following statement contains a magic number: if (c == '/') {  	s.Append ('/');  }  else if (c == 'b') {  	s.Append ('\b');  }  else if (c == 'f') {  	s.Append ('\f');  }  else if (c == 'n') {  	s.Append ('\n');  }  else if (c == 'r') {  	s.Append ('\r');  }  else if (c == 't') {  	s.Append ('\t');  }  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint))) {  			return "";  		}  		// convert the integer codepoint to a unicode char and add to string  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,ParseString,The following statement contains a magic number: if (c == 'b') {  	s.Append ('\b');  }  else if (c == 'f') {  	s.Append ('\f');  }  else if (c == 'n') {  	s.Append ('\n');  }  else if (c == 'r') {  	s.Append ('\r');  }  else if (c == 't') {  	s.Append ('\t');  }  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint))) {  			return "";  		}  		// convert the integer codepoint to a unicode char and add to string  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,ParseString,The following statement contains a magic number: if (c == 'b') {  	s.Append ('\b');  }  else if (c == 'f') {  	s.Append ('\f');  }  else if (c == 'n') {  	s.Append ('\n');  }  else if (c == 'r') {  	s.Append ('\r');  }  else if (c == 't') {  	s.Append ('\t');  }  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint))) {  			return "";  		}  		// convert the integer codepoint to a unicode char and add to string  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,ParseString,The following statement contains a magic number: if (c == 'b') {  	s.Append ('\b');  }  else if (c == 'f') {  	s.Append ('\f');  }  else if (c == 'n') {  	s.Append ('\n');  }  else if (c == 'r') {  	s.Append ('\r');  }  else if (c == 't') {  	s.Append ('\t');  }  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint))) {  			return "";  		}  		// convert the integer codepoint to a unicode char and add to string  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,ParseString,The following statement contains a magic number: if (c == 'f') {  	s.Append ('\f');  }  else if (c == 'n') {  	s.Append ('\n');  }  else if (c == 'r') {  	s.Append ('\r');  }  else if (c == 't') {  	s.Append ('\t');  }  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint))) {  			return "";  		}  		// convert the integer codepoint to a unicode char and add to string  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,ParseString,The following statement contains a magic number: if (c == 'f') {  	s.Append ('\f');  }  else if (c == 'n') {  	s.Append ('\n');  }  else if (c == 'r') {  	s.Append ('\r');  }  else if (c == 't') {  	s.Append ('\t');  }  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint))) {  			return "";  		}  		// convert the integer codepoint to a unicode char and add to string  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,ParseString,The following statement contains a magic number: if (c == 'f') {  	s.Append ('\f');  }  else if (c == 'n') {  	s.Append ('\n');  }  else if (c == 'r') {  	s.Append ('\r');  }  else if (c == 't') {  	s.Append ('\t');  }  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint))) {  			return "";  		}  		// convert the integer codepoint to a unicode char and add to string  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,ParseString,The following statement contains a magic number: if (c == 'n') {  	s.Append ('\n');  }  else if (c == 'r') {  	s.Append ('\r');  }  else if (c == 't') {  	s.Append ('\t');  }  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint))) {  			return "";  		}  		// convert the integer codepoint to a unicode char and add to string  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,ParseString,The following statement contains a magic number: if (c == 'n') {  	s.Append ('\n');  }  else if (c == 'r') {  	s.Append ('\r');  }  else if (c == 't') {  	s.Append ('\t');  }  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint))) {  			return "";  		}  		// convert the integer codepoint to a unicode char and add to string  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,ParseString,The following statement contains a magic number: if (c == 'n') {  	s.Append ('\n');  }  else if (c == 'r') {  	s.Append ('\r');  }  else if (c == 't') {  	s.Append ('\t');  }  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint))) {  			return "";  		}  		// convert the integer codepoint to a unicode char and add to string  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,ParseString,The following statement contains a magic number: if (c == 'r') {  	s.Append ('\r');  }  else if (c == 't') {  	s.Append ('\t');  }  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint))) {  			return "";  		}  		// convert the integer codepoint to a unicode char and add to string  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,ParseString,The following statement contains a magic number: if (c == 'r') {  	s.Append ('\r');  }  else if (c == 't') {  	s.Append ('\t');  }  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint))) {  			return "";  		}  		// convert the integer codepoint to a unicode char and add to string  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,ParseString,The following statement contains a magic number: if (c == 'r') {  	s.Append ('\r');  }  else if (c == 't') {  	s.Append ('\t');  }  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint))) {  			return "";  		}  		// convert the integer codepoint to a unicode char and add to string  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,ParseString,The following statement contains a magic number: if (c == 't') {  	s.Append ('\t');  }  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint))) {  			return "";  		}  		// convert the integer codepoint to a unicode char and add to string  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,ParseString,The following statement contains a magic number: if (c == 't') {  	s.Append ('\t');  }  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint))) {  			return "";  		}  		// convert the integer codepoint to a unicode char and add to string  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,ParseString,The following statement contains a magic number: if (c == 't') {  	s.Append ('\t');  }  else if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint))) {  			return "";  		}  		// convert the integer codepoint to a unicode char and add to string  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,ParseString,The following statement contains a magic number: if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint))) {  			return "";  		}  		// convert the integer codepoint to a unicode char and add to string  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,ParseString,The following statement contains a magic number: if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint))) {  			return "";  		}  		// convert the integer codepoint to a unicode char and add to string  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,ParseString,The following statement contains a magic number: if (c == 'u') {  	int remainingLength = json.Length - index;  	if (remainingLength >= 4) {  		// parse the 32 bit hex into an integer codepoint  		uint codePoint;  		if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint))) {  			return "";  		}  		// convert the integer codepoint to a unicode char and add to string  		s.Append (Char.ConvertFromUtf32 ((int)codePoint));  		// skip 4 chars  		index += 4;  	}  	else {  		break;  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,ParseString,The following statement contains a magic number: if (remainingLength >= 4) {  	// parse the 32 bit hex into an integer codepoint  	uint codePoint;  	if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint))) {  		return "";  	}  	// convert the integer codepoint to a unicode char and add to string  	s.Append (Char.ConvertFromUtf32 ((int)codePoint));  	// skip 4 chars  	index += 4;  }  else {  	break;  }  
Magic Number,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,ParseString,The following statement contains a magic number: if (remainingLength >= 4) {  	// parse the 32 bit hex into an integer codepoint  	uint codePoint;  	if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint))) {  		return "";  	}  	// convert the integer codepoint to a unicode char and add to string  	s.Append (Char.ConvertFromUtf32 ((int)codePoint));  	// skip 4 chars  	index += 4;  }  else {  	break;  }  
Magic Number,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,ParseString,The following statement contains a magic number: if (remainingLength >= 4) {  	// parse the 32 bit hex into an integer codepoint  	uint codePoint;  	if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint))) {  		return "";  	}  	// convert the integer codepoint to a unicode char and add to string  	s.Append (Char.ConvertFromUtf32 ((int)codePoint));  	// skip 4 chars  	index += 4;  }  else {  	break;  }  
Magic Number,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,ParseString,The following statement contains a magic number: if (!(success = UInt32.TryParse (new string (json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint))) {  	return "";  }  
Magic Number,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,ParseString,The following statement contains a magic number: index += 4;  
Magic Number,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 5) {  	if (json [index] == 'f' && json [index + 1] == 'a' && json [index + 2] == 'l' && json [index + 3] == 's' && json [index + 4] == 'e') {  		index += 5;  		return JSON.TOKEN_FALSE;  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 5) {  	if (json [index] == 'f' && json [index + 1] == 'a' && json [index + 2] == 'l' && json [index + 3] == 's' && json [index + 4] == 'e') {  		index += 5;  		return JSON.TOKEN_FALSE;  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 5) {  	if (json [index] == 'f' && json [index + 1] == 'a' && json [index + 2] == 'l' && json [index + 3] == 's' && json [index + 4] == 'e') {  		index += 5;  		return JSON.TOKEN_FALSE;  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 5) {  	if (json [index] == 'f' && json [index + 1] == 'a' && json [index + 2] == 'l' && json [index + 3] == 's' && json [index + 4] == 'e') {  		index += 5;  		return JSON.TOKEN_FALSE;  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 5) {  	if (json [index] == 'f' && json [index + 1] == 'a' && json [index + 2] == 'l' && json [index + 3] == 's' && json [index + 4] == 'e') {  		index += 5;  		return JSON.TOKEN_FALSE;  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,NextToken,The following statement contains a magic number: if (json [index] == 'f' && json [index + 1] == 'a' && json [index + 2] == 'l' && json [index + 3] == 's' && json [index + 4] == 'e') {  	index += 5;  	return JSON.TOKEN_FALSE;  }  
Magic Number,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,NextToken,The following statement contains a magic number: if (json [index] == 'f' && json [index + 1] == 'a' && json [index + 2] == 'l' && json [index + 3] == 's' && json [index + 4] == 'e') {  	index += 5;  	return JSON.TOKEN_FALSE;  }  
Magic Number,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,NextToken,The following statement contains a magic number: if (json [index] == 'f' && json [index + 1] == 'a' && json [index + 2] == 'l' && json [index + 3] == 's' && json [index + 4] == 'e') {  	index += 5;  	return JSON.TOKEN_FALSE;  }  
Magic Number,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,NextToken,The following statement contains a magic number: if (json [index] == 'f' && json [index + 1] == 'a' && json [index + 2] == 'l' && json [index + 3] == 's' && json [index + 4] == 'e') {  	index += 5;  	return JSON.TOKEN_FALSE;  }  
Magic Number,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,NextToken,The following statement contains a magic number: index += 5;  
Magic Number,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4) {  	if (json [index] == 't' && json [index + 1] == 'r' && json [index + 2] == 'u' && json [index + 3] == 'e') {  		index += 4;  		return JSON.TOKEN_TRUE;  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4) {  	if (json [index] == 't' && json [index + 1] == 'r' && json [index + 2] == 'u' && json [index + 3] == 'e') {  		index += 4;  		return JSON.TOKEN_TRUE;  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4) {  	if (json [index] == 't' && json [index + 1] == 'r' && json [index + 2] == 'u' && json [index + 3] == 'e') {  		index += 4;  		return JSON.TOKEN_TRUE;  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4) {  	if (json [index] == 't' && json [index + 1] == 'r' && json [index + 2] == 'u' && json [index + 3] == 'e') {  		index += 4;  		return JSON.TOKEN_TRUE;  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,NextToken,The following statement contains a magic number: if (json [index] == 't' && json [index + 1] == 'r' && json [index + 2] == 'u' && json [index + 3] == 'e') {  	index += 4;  	return JSON.TOKEN_TRUE;  }  
Magic Number,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,NextToken,The following statement contains a magic number: if (json [index] == 't' && json [index + 1] == 'r' && json [index + 2] == 'u' && json [index + 3] == 'e') {  	index += 4;  	return JSON.TOKEN_TRUE;  }  
Magic Number,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,NextToken,The following statement contains a magic number: if (json [index] == 't' && json [index + 1] == 'r' && json [index + 2] == 'u' && json [index + 3] == 'e') {  	index += 4;  	return JSON.TOKEN_TRUE;  }  
Magic Number,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,NextToken,The following statement contains a magic number: index += 4;  
Magic Number,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4) {  	if (json [index] == 'n' && json [index + 1] == 'u' && json [index + 2] == 'l' && json [index + 3] == 'l') {  		index += 4;  		return JSON.TOKEN_NULL;  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4) {  	if (json [index] == 'n' && json [index + 1] == 'u' && json [index + 2] == 'l' && json [index + 3] == 'l') {  		index += 4;  		return JSON.TOKEN_NULL;  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4) {  	if (json [index] == 'n' && json [index + 1] == 'u' && json [index + 2] == 'l' && json [index + 3] == 'l') {  		index += 4;  		return JSON.TOKEN_NULL;  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4) {  	if (json [index] == 'n' && json [index + 1] == 'u' && json [index + 2] == 'l' && json [index + 3] == 'l') {  		index += 4;  		return JSON.TOKEN_NULL;  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,NextToken,The following statement contains a magic number: if (json [index] == 'n' && json [index + 1] == 'u' && json [index + 2] == 'l' && json [index + 3] == 'l') {  	index += 4;  	return JSON.TOKEN_NULL;  }  
Magic Number,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,NextToken,The following statement contains a magic number: if (json [index] == 'n' && json [index + 1] == 'u' && json [index + 2] == 'l' && json [index + 3] == 'l') {  	index += 4;  	return JSON.TOKEN_NULL;  }  
Magic Number,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,NextToken,The following statement contains a magic number: if (json [index] == 'n' && json [index + 1] == 'u' && json [index + 2] == 'l' && json [index + 3] == 'l') {  	index += 4;  	return JSON.TOKEN_NULL;  }  
Magic Number,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,NextToken,The following statement contains a magic number: index += 4;  
Magic Number,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,SerializeString,The following statement contains a magic number: for (int i = 0; i < charArray.Length; i++) {  	char c = charArray [i];  	if (c == '"') {  		builder.Append ("\\\"");  	}  	else if (c == '\\') {  		builder.Append ("\\\\");  	}  	else if (c == '\b') {  		builder.Append ("\\b");  	}  	else if (c == '\f') {  		builder.Append ("\\f");  	}  	else if (c == '\n') {  		builder.Append ("\\n");  	}  	else if (c == '\r') {  		builder.Append ("\\r");  	}  	else if (c == '\t') {  		builder.Append ("\\t");  	}  	else {  		int codepoint = Convert.ToInt32 (c);  		if ((codepoint >= 32) && (codepoint <= 126)) {  			builder.Append (c);  		}  		else {  			builder.Append ("\\u" + Convert.ToString (codepoint' 16).PadLeft (4' '0'));  		}  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,SerializeString,The following statement contains a magic number: for (int i = 0; i < charArray.Length; i++) {  	char c = charArray [i];  	if (c == '"') {  		builder.Append ("\\\"");  	}  	else if (c == '\\') {  		builder.Append ("\\\\");  	}  	else if (c == '\b') {  		builder.Append ("\\b");  	}  	else if (c == '\f') {  		builder.Append ("\\f");  	}  	else if (c == '\n') {  		builder.Append ("\\n");  	}  	else if (c == '\r') {  		builder.Append ("\\r");  	}  	else if (c == '\t') {  		builder.Append ("\\t");  	}  	else {  		int codepoint = Convert.ToInt32 (c);  		if ((codepoint >= 32) && (codepoint <= 126)) {  			builder.Append (c);  		}  		else {  			builder.Append ("\\u" + Convert.ToString (codepoint' 16).PadLeft (4' '0'));  		}  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,SerializeString,The following statement contains a magic number: for (int i = 0; i < charArray.Length; i++) {  	char c = charArray [i];  	if (c == '"') {  		builder.Append ("\\\"");  	}  	else if (c == '\\') {  		builder.Append ("\\\\");  	}  	else if (c == '\b') {  		builder.Append ("\\b");  	}  	else if (c == '\f') {  		builder.Append ("\\f");  	}  	else if (c == '\n') {  		builder.Append ("\\n");  	}  	else if (c == '\r') {  		builder.Append ("\\r");  	}  	else if (c == '\t') {  		builder.Append ("\\t");  	}  	else {  		int codepoint = Convert.ToInt32 (c);  		if ((codepoint >= 32) && (codepoint <= 126)) {  			builder.Append (c);  		}  		else {  			builder.Append ("\\u" + Convert.ToString (codepoint' 16).PadLeft (4' '0'));  		}  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,SerializeString,The following statement contains a magic number: for (int i = 0; i < charArray.Length; i++) {  	char c = charArray [i];  	if (c == '"') {  		builder.Append ("\\\"");  	}  	else if (c == '\\') {  		builder.Append ("\\\\");  	}  	else if (c == '\b') {  		builder.Append ("\\b");  	}  	else if (c == '\f') {  		builder.Append ("\\f");  	}  	else if (c == '\n') {  		builder.Append ("\\n");  	}  	else if (c == '\r') {  		builder.Append ("\\r");  	}  	else if (c == '\t') {  		builder.Append ("\\t");  	}  	else {  		int codepoint = Convert.ToInt32 (c);  		if ((codepoint >= 32) && (codepoint <= 126)) {  			builder.Append (c);  		}  		else {  			builder.Append ("\\u" + Convert.ToString (codepoint' 16).PadLeft (4' '0'));  		}  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,SerializeString,The following statement contains a magic number: if (c == '"') {  	builder.Append ("\\\"");  }  else if (c == '\\') {  	builder.Append ("\\\\");  }  else if (c == '\b') {  	builder.Append ("\\b");  }  else if (c == '\f') {  	builder.Append ("\\f");  }  else if (c == '\n') {  	builder.Append ("\\n");  }  else if (c == '\r') {  	builder.Append ("\\r");  }  else if (c == '\t') {  	builder.Append ("\\t");  }  else {  	int codepoint = Convert.ToInt32 (c);  	if ((codepoint >= 32) && (codepoint <= 126)) {  		builder.Append (c);  	}  	else {  		builder.Append ("\\u" + Convert.ToString (codepoint' 16).PadLeft (4' '0'));  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,SerializeString,The following statement contains a magic number: if (c == '"') {  	builder.Append ("\\\"");  }  else if (c == '\\') {  	builder.Append ("\\\\");  }  else if (c == '\b') {  	builder.Append ("\\b");  }  else if (c == '\f') {  	builder.Append ("\\f");  }  else if (c == '\n') {  	builder.Append ("\\n");  }  else if (c == '\r') {  	builder.Append ("\\r");  }  else if (c == '\t') {  	builder.Append ("\\t");  }  else {  	int codepoint = Convert.ToInt32 (c);  	if ((codepoint >= 32) && (codepoint <= 126)) {  		builder.Append (c);  	}  	else {  		builder.Append ("\\u" + Convert.ToString (codepoint' 16).PadLeft (4' '0'));  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,SerializeString,The following statement contains a magic number: if (c == '"') {  	builder.Append ("\\\"");  }  else if (c == '\\') {  	builder.Append ("\\\\");  }  else if (c == '\b') {  	builder.Append ("\\b");  }  else if (c == '\f') {  	builder.Append ("\\f");  }  else if (c == '\n') {  	builder.Append ("\\n");  }  else if (c == '\r') {  	builder.Append ("\\r");  }  else if (c == '\t') {  	builder.Append ("\\t");  }  else {  	int codepoint = Convert.ToInt32 (c);  	if ((codepoint >= 32) && (codepoint <= 126)) {  		builder.Append (c);  	}  	else {  		builder.Append ("\\u" + Convert.ToString (codepoint' 16).PadLeft (4' '0'));  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,SerializeString,The following statement contains a magic number: if (c == '"') {  	builder.Append ("\\\"");  }  else if (c == '\\') {  	builder.Append ("\\\\");  }  else if (c == '\b') {  	builder.Append ("\\b");  }  else if (c == '\f') {  	builder.Append ("\\f");  }  else if (c == '\n') {  	builder.Append ("\\n");  }  else if (c == '\r') {  	builder.Append ("\\r");  }  else if (c == '\t') {  	builder.Append ("\\t");  }  else {  	int codepoint = Convert.ToInt32 (c);  	if ((codepoint >= 32) && (codepoint <= 126)) {  		builder.Append (c);  	}  	else {  		builder.Append ("\\u" + Convert.ToString (codepoint' 16).PadLeft (4' '0'));  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,SerializeString,The following statement contains a magic number: if (c == '\\') {  	builder.Append ("\\\\");  }  else if (c == '\b') {  	builder.Append ("\\b");  }  else if (c == '\f') {  	builder.Append ("\\f");  }  else if (c == '\n') {  	builder.Append ("\\n");  }  else if (c == '\r') {  	builder.Append ("\\r");  }  else if (c == '\t') {  	builder.Append ("\\t");  }  else {  	int codepoint = Convert.ToInt32 (c);  	if ((codepoint >= 32) && (codepoint <= 126)) {  		builder.Append (c);  	}  	else {  		builder.Append ("\\u" + Convert.ToString (codepoint' 16).PadLeft (4' '0'));  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,SerializeString,The following statement contains a magic number: if (c == '\\') {  	builder.Append ("\\\\");  }  else if (c == '\b') {  	builder.Append ("\\b");  }  else if (c == '\f') {  	builder.Append ("\\f");  }  else if (c == '\n') {  	builder.Append ("\\n");  }  else if (c == '\r') {  	builder.Append ("\\r");  }  else if (c == '\t') {  	builder.Append ("\\t");  }  else {  	int codepoint = Convert.ToInt32 (c);  	if ((codepoint >= 32) && (codepoint <= 126)) {  		builder.Append (c);  	}  	else {  		builder.Append ("\\u" + Convert.ToString (codepoint' 16).PadLeft (4' '0'));  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,SerializeString,The following statement contains a magic number: if (c == '\\') {  	builder.Append ("\\\\");  }  else if (c == '\b') {  	builder.Append ("\\b");  }  else if (c == '\f') {  	builder.Append ("\\f");  }  else if (c == '\n') {  	builder.Append ("\\n");  }  else if (c == '\r') {  	builder.Append ("\\r");  }  else if (c == '\t') {  	builder.Append ("\\t");  }  else {  	int codepoint = Convert.ToInt32 (c);  	if ((codepoint >= 32) && (codepoint <= 126)) {  		builder.Append (c);  	}  	else {  		builder.Append ("\\u" + Convert.ToString (codepoint' 16).PadLeft (4' '0'));  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,SerializeString,The following statement contains a magic number: if (c == '\\') {  	builder.Append ("\\\\");  }  else if (c == '\b') {  	builder.Append ("\\b");  }  else if (c == '\f') {  	builder.Append ("\\f");  }  else if (c == '\n') {  	builder.Append ("\\n");  }  else if (c == '\r') {  	builder.Append ("\\r");  }  else if (c == '\t') {  	builder.Append ("\\t");  }  else {  	int codepoint = Convert.ToInt32 (c);  	if ((codepoint >= 32) && (codepoint <= 126)) {  		builder.Append (c);  	}  	else {  		builder.Append ("\\u" + Convert.ToString (codepoint' 16).PadLeft (4' '0'));  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,SerializeString,The following statement contains a magic number: if (c == '\b') {  	builder.Append ("\\b");  }  else if (c == '\f') {  	builder.Append ("\\f");  }  else if (c == '\n') {  	builder.Append ("\\n");  }  else if (c == '\r') {  	builder.Append ("\\r");  }  else if (c == '\t') {  	builder.Append ("\\t");  }  else {  	int codepoint = Convert.ToInt32 (c);  	if ((codepoint >= 32) && (codepoint <= 126)) {  		builder.Append (c);  	}  	else {  		builder.Append ("\\u" + Convert.ToString (codepoint' 16).PadLeft (4' '0'));  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,SerializeString,The following statement contains a magic number: if (c == '\b') {  	builder.Append ("\\b");  }  else if (c == '\f') {  	builder.Append ("\\f");  }  else if (c == '\n') {  	builder.Append ("\\n");  }  else if (c == '\r') {  	builder.Append ("\\r");  }  else if (c == '\t') {  	builder.Append ("\\t");  }  else {  	int codepoint = Convert.ToInt32 (c);  	if ((codepoint >= 32) && (codepoint <= 126)) {  		builder.Append (c);  	}  	else {  		builder.Append ("\\u" + Convert.ToString (codepoint' 16).PadLeft (4' '0'));  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,SerializeString,The following statement contains a magic number: if (c == '\b') {  	builder.Append ("\\b");  }  else if (c == '\f') {  	builder.Append ("\\f");  }  else if (c == '\n') {  	builder.Append ("\\n");  }  else if (c == '\r') {  	builder.Append ("\\r");  }  else if (c == '\t') {  	builder.Append ("\\t");  }  else {  	int codepoint = Convert.ToInt32 (c);  	if ((codepoint >= 32) && (codepoint <= 126)) {  		builder.Append (c);  	}  	else {  		builder.Append ("\\u" + Convert.ToString (codepoint' 16).PadLeft (4' '0'));  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,SerializeString,The following statement contains a magic number: if (c == '\b') {  	builder.Append ("\\b");  }  else if (c == '\f') {  	builder.Append ("\\f");  }  else if (c == '\n') {  	builder.Append ("\\n");  }  else if (c == '\r') {  	builder.Append ("\\r");  }  else if (c == '\t') {  	builder.Append ("\\t");  }  else {  	int codepoint = Convert.ToInt32 (c);  	if ((codepoint >= 32) && (codepoint <= 126)) {  		builder.Append (c);  	}  	else {  		builder.Append ("\\u" + Convert.ToString (codepoint' 16).PadLeft (4' '0'));  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,SerializeString,The following statement contains a magic number: if (c == '\f') {  	builder.Append ("\\f");  }  else if (c == '\n') {  	builder.Append ("\\n");  }  else if (c == '\r') {  	builder.Append ("\\r");  }  else if (c == '\t') {  	builder.Append ("\\t");  }  else {  	int codepoint = Convert.ToInt32 (c);  	if ((codepoint >= 32) && (codepoint <= 126)) {  		builder.Append (c);  	}  	else {  		builder.Append ("\\u" + Convert.ToString (codepoint' 16).PadLeft (4' '0'));  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,SerializeString,The following statement contains a magic number: if (c == '\f') {  	builder.Append ("\\f");  }  else if (c == '\n') {  	builder.Append ("\\n");  }  else if (c == '\r') {  	builder.Append ("\\r");  }  else if (c == '\t') {  	builder.Append ("\\t");  }  else {  	int codepoint = Convert.ToInt32 (c);  	if ((codepoint >= 32) && (codepoint <= 126)) {  		builder.Append (c);  	}  	else {  		builder.Append ("\\u" + Convert.ToString (codepoint' 16).PadLeft (4' '0'));  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,SerializeString,The following statement contains a magic number: if (c == '\f') {  	builder.Append ("\\f");  }  else if (c == '\n') {  	builder.Append ("\\n");  }  else if (c == '\r') {  	builder.Append ("\\r");  }  else if (c == '\t') {  	builder.Append ("\\t");  }  else {  	int codepoint = Convert.ToInt32 (c);  	if ((codepoint >= 32) && (codepoint <= 126)) {  		builder.Append (c);  	}  	else {  		builder.Append ("\\u" + Convert.ToString (codepoint' 16).PadLeft (4' '0'));  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,SerializeString,The following statement contains a magic number: if (c == '\f') {  	builder.Append ("\\f");  }  else if (c == '\n') {  	builder.Append ("\\n");  }  else if (c == '\r') {  	builder.Append ("\\r");  }  else if (c == '\t') {  	builder.Append ("\\t");  }  else {  	int codepoint = Convert.ToInt32 (c);  	if ((codepoint >= 32) && (codepoint <= 126)) {  		builder.Append (c);  	}  	else {  		builder.Append ("\\u" + Convert.ToString (codepoint' 16).PadLeft (4' '0'));  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,SerializeString,The following statement contains a magic number: if (c == '\n') {  	builder.Append ("\\n");  }  else if (c == '\r') {  	builder.Append ("\\r");  }  else if (c == '\t') {  	builder.Append ("\\t");  }  else {  	int codepoint = Convert.ToInt32 (c);  	if ((codepoint >= 32) && (codepoint <= 126)) {  		builder.Append (c);  	}  	else {  		builder.Append ("\\u" + Convert.ToString (codepoint' 16).PadLeft (4' '0'));  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,SerializeString,The following statement contains a magic number: if (c == '\n') {  	builder.Append ("\\n");  }  else if (c == '\r') {  	builder.Append ("\\r");  }  else if (c == '\t') {  	builder.Append ("\\t");  }  else {  	int codepoint = Convert.ToInt32 (c);  	if ((codepoint >= 32) && (codepoint <= 126)) {  		builder.Append (c);  	}  	else {  		builder.Append ("\\u" + Convert.ToString (codepoint' 16).PadLeft (4' '0'));  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,SerializeString,The following statement contains a magic number: if (c == '\n') {  	builder.Append ("\\n");  }  else if (c == '\r') {  	builder.Append ("\\r");  }  else if (c == '\t') {  	builder.Append ("\\t");  }  else {  	int codepoint = Convert.ToInt32 (c);  	if ((codepoint >= 32) && (codepoint <= 126)) {  		builder.Append (c);  	}  	else {  		builder.Append ("\\u" + Convert.ToString (codepoint' 16).PadLeft (4' '0'));  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,SerializeString,The following statement contains a magic number: if (c == '\n') {  	builder.Append ("\\n");  }  else if (c == '\r') {  	builder.Append ("\\r");  }  else if (c == '\t') {  	builder.Append ("\\t");  }  else {  	int codepoint = Convert.ToInt32 (c);  	if ((codepoint >= 32) && (codepoint <= 126)) {  		builder.Append (c);  	}  	else {  		builder.Append ("\\u" + Convert.ToString (codepoint' 16).PadLeft (4' '0'));  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,SerializeString,The following statement contains a magic number: if (c == '\r') {  	builder.Append ("\\r");  }  else if (c == '\t') {  	builder.Append ("\\t");  }  else {  	int codepoint = Convert.ToInt32 (c);  	if ((codepoint >= 32) && (codepoint <= 126)) {  		builder.Append (c);  	}  	else {  		builder.Append ("\\u" + Convert.ToString (codepoint' 16).PadLeft (4' '0'));  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,SerializeString,The following statement contains a magic number: if (c == '\r') {  	builder.Append ("\\r");  }  else if (c == '\t') {  	builder.Append ("\\t");  }  else {  	int codepoint = Convert.ToInt32 (c);  	if ((codepoint >= 32) && (codepoint <= 126)) {  		builder.Append (c);  	}  	else {  		builder.Append ("\\u" + Convert.ToString (codepoint' 16).PadLeft (4' '0'));  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,SerializeString,The following statement contains a magic number: if (c == '\r') {  	builder.Append ("\\r");  }  else if (c == '\t') {  	builder.Append ("\\t");  }  else {  	int codepoint = Convert.ToInt32 (c);  	if ((codepoint >= 32) && (codepoint <= 126)) {  		builder.Append (c);  	}  	else {  		builder.Append ("\\u" + Convert.ToString (codepoint' 16).PadLeft (4' '0'));  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,SerializeString,The following statement contains a magic number: if (c == '\r') {  	builder.Append ("\\r");  }  else if (c == '\t') {  	builder.Append ("\\t");  }  else {  	int codepoint = Convert.ToInt32 (c);  	if ((codepoint >= 32) && (codepoint <= 126)) {  		builder.Append (c);  	}  	else {  		builder.Append ("\\u" + Convert.ToString (codepoint' 16).PadLeft (4' '0'));  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,SerializeString,The following statement contains a magic number: if (c == '\t') {  	builder.Append ("\\t");  }  else {  	int codepoint = Convert.ToInt32 (c);  	if ((codepoint >= 32) && (codepoint <= 126)) {  		builder.Append (c);  	}  	else {  		builder.Append ("\\u" + Convert.ToString (codepoint' 16).PadLeft (4' '0'));  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,SerializeString,The following statement contains a magic number: if (c == '\t') {  	builder.Append ("\\t");  }  else {  	int codepoint = Convert.ToInt32 (c);  	if ((codepoint >= 32) && (codepoint <= 126)) {  		builder.Append (c);  	}  	else {  		builder.Append ("\\u" + Convert.ToString (codepoint' 16).PadLeft (4' '0'));  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,SerializeString,The following statement contains a magic number: if (c == '\t') {  	builder.Append ("\\t");  }  else {  	int codepoint = Convert.ToInt32 (c);  	if ((codepoint >= 32) && (codepoint <= 126)) {  		builder.Append (c);  	}  	else {  		builder.Append ("\\u" + Convert.ToString (codepoint' 16).PadLeft (4' '0'));  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,SerializeString,The following statement contains a magic number: if (c == '\t') {  	builder.Append ("\\t");  }  else {  	int codepoint = Convert.ToInt32 (c);  	if ((codepoint >= 32) && (codepoint <= 126)) {  		builder.Append (c);  	}  	else {  		builder.Append ("\\u" + Convert.ToString (codepoint' 16).PadLeft (4' '0'));  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,SerializeString,The following statement contains a magic number: if ((codepoint >= 32) && (codepoint <= 126)) {  	builder.Append (c);  }  else {  	builder.Append ("\\u" + Convert.ToString (codepoint' 16).PadLeft (4' '0'));  }  
Magic Number,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,SerializeString,The following statement contains a magic number: if ((codepoint >= 32) && (codepoint <= 126)) {  	builder.Append (c);  }  else {  	builder.Append ("\\u" + Convert.ToString (codepoint' 16).PadLeft (4' '0'));  }  
Magic Number,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,SerializeString,The following statement contains a magic number: if ((codepoint >= 32) && (codepoint <= 126)) {  	builder.Append (c);  }  else {  	builder.Append ("\\u" + Convert.ToString (codepoint' 16).PadLeft (4' '0'));  }  
Magic Number,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,SerializeString,The following statement contains a magic number: if ((codepoint >= 32) && (codepoint <= 126)) {  	builder.Append (c);  }  else {  	builder.Append ("\\u" + Convert.ToString (codepoint' 16).PadLeft (4' '0'));  }  
Magic Number,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,SerializeString,The following statement contains a magic number: builder.Append ("\\u" + Convert.ToString (codepoint' 16).PadLeft (4' '0'));  
Magic Number,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,SerializeString,The following statement contains a magic number: builder.Append ("\\u" + Convert.ToString (codepoint' 16).PadLeft (4' '0'));  
Magic Number,System451.Communication.Dashboard.Utils,AeroGlass,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Utils\AeroGlass.cs,GlassifyHwnd,The following statement contains a magic number: if (Environment.OSVersion.Version.Major >= 6 && DwmIsCompositionEnabled ()) {  	MARGINS margins = new MARGINS ();  	margins.Left = -1;  	margins.Right = -1;  	margins.Top = -1;  	margins.Bottom = -1;  	return !DwmExtendFrameIntoClientArea (ptr' ref margins);  }  
Magic Number,System451.Communication.Dashboard.Utils,AeroGlass,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Utils\AeroGlass.cs,GlassifyWindow,The following statement contains a magic number: if (Environment.OSVersion.Version.Major >= 6 && DwmIsCompositionEnabled ()) {  	IntPtr mainWindowPtr = new WindowInteropHelper (win).Handle;  	HwndSource mainWindowSrc = HwndSource.FromHwnd (mainWindowPtr);  	mainWindowSrc.CompositionTarget.BackgroundColor = Colors.Transparent;  	win.Background = Brushes.Transparent;  	return GlassifyHwnd (mainWindowSrc.Handle);  }  
Magic Number,System451.Communication.Dashboard.Utils,CPU,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Utils\CPU.cs,Is64BitOperatingSystem,The following statement contains a magic number: if (IntPtr.Size == 8)// 64-bit programs run only on Win64   {  	return true;  }  else// 32-bit programs run on both 32-bit and 64-bit Windows   {  	// Detect whether the current process is a 32-bit process   	// running on a 64-bit system.  	bool flag;  	return ((DoesWin32MethodExist ("kernel32.dll"' "IsWow64Process") && IsWow64Process (GetCurrentProcess ()' out flag)) && flag);  }  
Magic Number,System451.Communication.Dashboard.Utils,BTFinger,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,ReadStatus,The following statement contains a magic number: while (strm.CanRead == false) {  	Thread.Sleep (5);  }  
Magic Number,System451.Communication.Dashboard.Utils,BTFinger,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,ReadStatus,The following statement contains a magic number: Thread.Sleep (5);  
Magic Number,System451.Communication.Dashboard.Utils,BTFinger,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,ReadStatus,The following statement contains a magic number: while (readcount < maxlength) {  	Thread.Sleep (40);  	while (strm.CanRead == false) {  		Thread.Sleep (5);  	}  	readcount += strm.Read (hlMsg' readcount' maxlength - readcount);  }  
Magic Number,System451.Communication.Dashboard.Utils,BTFinger,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,ReadStatus,The following statement contains a magic number: while (readcount < maxlength) {  	Thread.Sleep (40);  	while (strm.CanRead == false) {  		Thread.Sleep (5);  	}  	readcount += strm.Read (hlMsg' readcount' maxlength - readcount);  }  
Magic Number,System451.Communication.Dashboard.Utils,BTFinger,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,ReadStatus,The following statement contains a magic number: Thread.Sleep (40);  
Magic Number,System451.Communication.Dashboard.Utils,BTFinger,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,ReadStatus,The following statement contains a magic number: while (strm.CanRead == false) {  	Thread.Sleep (5);  }  
Magic Number,System451.Communication.Dashboard.Utils,BTFinger,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,ReadStatus,The following statement contains a magic number: Thread.Sleep (5);  
Magic Number,System451.Communication.Dashboard.Utils,BTFinger,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,ZomBworker,The following statement contains a magic number: while (sliceing) {  	try {  		blucli.Connect (GetZomBServerAddress ()' ff.BTGuid);  		//finds a server blocking  		using (Stream strm = blucli.GetStream ()) {  			ReplyStatus (strm' BTZomBFingerFactory.BTHelloMessage);  			if (BS (ReadStatus (strm' 10)) == BS (BTZomBFingerFactory.BTHelloMessage))//if good Verify  			 {  				if (ReadStatus (strm) == ((byte)(TeamNumber >> 8)) && ReadStatus (strm) == (byte)TeamNumber)//team # validate  				 {  					ReplyStatus (strm' BTZomBFingerFactory.BTVerifyMessage' ((byte)(TeamNumber >> 8))' (byte)TeamNumber);  					if (DataRecieving != null)  						DataRecieving (this' new EventArgs ());  					if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTGoodVerifyMessage)) {  						while (true) {  							switch (ByteArrayToString (ReadStatus (strm' 8))) {  							case "SendFile":  								if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTNameFileMessage)) {  									if (ReadStatus (strm) == 0x0) {  										string newfilename = ByteArrayToString (ReadStatus (strm' (int)ReadStatus (strm)));  										if (ReadStatus (strm) == 0x0) {  											ReplyStatus (strm' BTZomBFingerFactory.BTAcceptFileMessage);  											if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage)) {  												string filelength = "";  												byte last = ReadStatus (strm);  												while (last != 0xFF) {  													filelength += (char)last;  													last = ReadStatus (strm);  												}  												if (ReadStatus (strm) == 0x0 && ReadStatus (strm) == 0xff && ReadStatus (strm) == 0x0) {  													File.WriteAllBytes (To + newfilename' ReadStatus (strm' int.Parse (filelength)));  													if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage))  														if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTEOFTMessage)) {  															ReplyStatus (strm' BTZomBFingerFactory.BTRecievedMessage);  															break;  														}  												}  											}  										}  									}  								}  								break;  							case "Sign Off":  								if (DataRecieved != null)  									DataRecieved (this' new EventArgs ());  								ReplyStatus (strm' BTZomBFingerFactory.BTByeMessage);  								goto end;  							case "No Files":  								//Ok' I don't care' continue  								break;  							default:  								//TODO: AHHH!  								break;  							}  						}  					}  				}  			}  		}  	}  	catch {  		continue;  	}  	end:  	if (!blucli.Connected) {  		blucli = new BluetoothClient ();  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,BTFinger,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,ZomBworker,The following statement contains a magic number: while (sliceing) {  	try {  		blucli.Connect (GetZomBServerAddress ()' ff.BTGuid);  		//finds a server blocking  		using (Stream strm = blucli.GetStream ()) {  			ReplyStatus (strm' BTZomBFingerFactory.BTHelloMessage);  			if (BS (ReadStatus (strm' 10)) == BS (BTZomBFingerFactory.BTHelloMessage))//if good Verify  			 {  				if (ReadStatus (strm) == ((byte)(TeamNumber >> 8)) && ReadStatus (strm) == (byte)TeamNumber)//team # validate  				 {  					ReplyStatus (strm' BTZomBFingerFactory.BTVerifyMessage' ((byte)(TeamNumber >> 8))' (byte)TeamNumber);  					if (DataRecieving != null)  						DataRecieving (this' new EventArgs ());  					if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTGoodVerifyMessage)) {  						while (true) {  							switch (ByteArrayToString (ReadStatus (strm' 8))) {  							case "SendFile":  								if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTNameFileMessage)) {  									if (ReadStatus (strm) == 0x0) {  										string newfilename = ByteArrayToString (ReadStatus (strm' (int)ReadStatus (strm)));  										if (ReadStatus (strm) == 0x0) {  											ReplyStatus (strm' BTZomBFingerFactory.BTAcceptFileMessage);  											if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage)) {  												string filelength = "";  												byte last = ReadStatus (strm);  												while (last != 0xFF) {  													filelength += (char)last;  													last = ReadStatus (strm);  												}  												if (ReadStatus (strm) == 0x0 && ReadStatus (strm) == 0xff && ReadStatus (strm) == 0x0) {  													File.WriteAllBytes (To + newfilename' ReadStatus (strm' int.Parse (filelength)));  													if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage))  														if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTEOFTMessage)) {  															ReplyStatus (strm' BTZomBFingerFactory.BTRecievedMessage);  															break;  														}  												}  											}  										}  									}  								}  								break;  							case "Sign Off":  								if (DataRecieved != null)  									DataRecieved (this' new EventArgs ());  								ReplyStatus (strm' BTZomBFingerFactory.BTByeMessage);  								goto end;  							case "No Files":  								//Ok' I don't care' continue  								break;  							default:  								//TODO: AHHH!  								break;  							}  						}  					}  				}  			}  		}  	}  	catch {  		continue;  	}  	end:  	if (!blucli.Connected) {  		blucli = new BluetoothClient ();  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,BTFinger,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,ZomBworker,The following statement contains a magic number: while (sliceing) {  	try {  		blucli.Connect (GetZomBServerAddress ()' ff.BTGuid);  		//finds a server blocking  		using (Stream strm = blucli.GetStream ()) {  			ReplyStatus (strm' BTZomBFingerFactory.BTHelloMessage);  			if (BS (ReadStatus (strm' 10)) == BS (BTZomBFingerFactory.BTHelloMessage))//if good Verify  			 {  				if (ReadStatus (strm) == ((byte)(TeamNumber >> 8)) && ReadStatus (strm) == (byte)TeamNumber)//team # validate  				 {  					ReplyStatus (strm' BTZomBFingerFactory.BTVerifyMessage' ((byte)(TeamNumber >> 8))' (byte)TeamNumber);  					if (DataRecieving != null)  						DataRecieving (this' new EventArgs ());  					if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTGoodVerifyMessage)) {  						while (true) {  							switch (ByteArrayToString (ReadStatus (strm' 8))) {  							case "SendFile":  								if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTNameFileMessage)) {  									if (ReadStatus (strm) == 0x0) {  										string newfilename = ByteArrayToString (ReadStatus (strm' (int)ReadStatus (strm)));  										if (ReadStatus (strm) == 0x0) {  											ReplyStatus (strm' BTZomBFingerFactory.BTAcceptFileMessage);  											if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage)) {  												string filelength = "";  												byte last = ReadStatus (strm);  												while (last != 0xFF) {  													filelength += (char)last;  													last = ReadStatus (strm);  												}  												if (ReadStatus (strm) == 0x0 && ReadStatus (strm) == 0xff && ReadStatus (strm) == 0x0) {  													File.WriteAllBytes (To + newfilename' ReadStatus (strm' int.Parse (filelength)));  													if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage))  														if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTEOFTMessage)) {  															ReplyStatus (strm' BTZomBFingerFactory.BTRecievedMessage);  															break;  														}  												}  											}  										}  									}  								}  								break;  							case "Sign Off":  								if (DataRecieved != null)  									DataRecieved (this' new EventArgs ());  								ReplyStatus (strm' BTZomBFingerFactory.BTByeMessage);  								goto end;  							case "No Files":  								//Ok' I don't care' continue  								break;  							default:  								//TODO: AHHH!  								break;  							}  						}  					}  				}  			}  		}  	}  	catch {  		continue;  	}  	end:  	if (!blucli.Connected) {  		blucli = new BluetoothClient ();  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,BTFinger,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,ZomBworker,The following statement contains a magic number: while (sliceing) {  	try {  		blucli.Connect (GetZomBServerAddress ()' ff.BTGuid);  		//finds a server blocking  		using (Stream strm = blucli.GetStream ()) {  			ReplyStatus (strm' BTZomBFingerFactory.BTHelloMessage);  			if (BS (ReadStatus (strm' 10)) == BS (BTZomBFingerFactory.BTHelloMessage))//if good Verify  			 {  				if (ReadStatus (strm) == ((byte)(TeamNumber >> 8)) && ReadStatus (strm) == (byte)TeamNumber)//team # validate  				 {  					ReplyStatus (strm' BTZomBFingerFactory.BTVerifyMessage' ((byte)(TeamNumber >> 8))' (byte)TeamNumber);  					if (DataRecieving != null)  						DataRecieving (this' new EventArgs ());  					if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTGoodVerifyMessage)) {  						while (true) {  							switch (ByteArrayToString (ReadStatus (strm' 8))) {  							case "SendFile":  								if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTNameFileMessage)) {  									if (ReadStatus (strm) == 0x0) {  										string newfilename = ByteArrayToString (ReadStatus (strm' (int)ReadStatus (strm)));  										if (ReadStatus (strm) == 0x0) {  											ReplyStatus (strm' BTZomBFingerFactory.BTAcceptFileMessage);  											if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage)) {  												string filelength = "";  												byte last = ReadStatus (strm);  												while (last != 0xFF) {  													filelength += (char)last;  													last = ReadStatus (strm);  												}  												if (ReadStatus (strm) == 0x0 && ReadStatus (strm) == 0xff && ReadStatus (strm) == 0x0) {  													File.WriteAllBytes (To + newfilename' ReadStatus (strm' int.Parse (filelength)));  													if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage))  														if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTEOFTMessage)) {  															ReplyStatus (strm' BTZomBFingerFactory.BTRecievedMessage);  															break;  														}  												}  											}  										}  									}  								}  								break;  							case "Sign Off":  								if (DataRecieved != null)  									DataRecieved (this' new EventArgs ());  								ReplyStatus (strm' BTZomBFingerFactory.BTByeMessage);  								goto end;  							case "No Files":  								//Ok' I don't care' continue  								break;  							default:  								//TODO: AHHH!  								break;  							}  						}  					}  				}  			}  		}  	}  	catch {  		continue;  	}  	end:  	if (!blucli.Connected) {  		blucli = new BluetoothClient ();  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,BTFinger,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,ZomBworker,The following statement contains a magic number: while (sliceing) {  	try {  		blucli.Connect (GetZomBServerAddress ()' ff.BTGuid);  		//finds a server blocking  		using (Stream strm = blucli.GetStream ()) {  			ReplyStatus (strm' BTZomBFingerFactory.BTHelloMessage);  			if (BS (ReadStatus (strm' 10)) == BS (BTZomBFingerFactory.BTHelloMessage))//if good Verify  			 {  				if (ReadStatus (strm) == ((byte)(TeamNumber >> 8)) && ReadStatus (strm) == (byte)TeamNumber)//team # validate  				 {  					ReplyStatus (strm' BTZomBFingerFactory.BTVerifyMessage' ((byte)(TeamNumber >> 8))' (byte)TeamNumber);  					if (DataRecieving != null)  						DataRecieving (this' new EventArgs ());  					if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTGoodVerifyMessage)) {  						while (true) {  							switch (ByteArrayToString (ReadStatus (strm' 8))) {  							case "SendFile":  								if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTNameFileMessage)) {  									if (ReadStatus (strm) == 0x0) {  										string newfilename = ByteArrayToString (ReadStatus (strm' (int)ReadStatus (strm)));  										if (ReadStatus (strm) == 0x0) {  											ReplyStatus (strm' BTZomBFingerFactory.BTAcceptFileMessage);  											if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage)) {  												string filelength = "";  												byte last = ReadStatus (strm);  												while (last != 0xFF) {  													filelength += (char)last;  													last = ReadStatus (strm);  												}  												if (ReadStatus (strm) == 0x0 && ReadStatus (strm) == 0xff && ReadStatus (strm) == 0x0) {  													File.WriteAllBytes (To + newfilename' ReadStatus (strm' int.Parse (filelength)));  													if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage))  														if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTEOFTMessage)) {  															ReplyStatus (strm' BTZomBFingerFactory.BTRecievedMessage);  															break;  														}  												}  											}  										}  									}  								}  								break;  							case "Sign Off":  								if (DataRecieved != null)  									DataRecieved (this' new EventArgs ());  								ReplyStatus (strm' BTZomBFingerFactory.BTByeMessage);  								goto end;  							case "No Files":  								//Ok' I don't care' continue  								break;  							default:  								//TODO: AHHH!  								break;  							}  						}  					}  				}  			}  		}  	}  	catch {  		continue;  	}  	end:  	if (!blucli.Connected) {  		blucli = new BluetoothClient ();  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,BTFinger,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,ZomBworker,The following statement contains a magic number: while (sliceing) {  	try {  		blucli.Connect (GetZomBServerAddress ()' ff.BTGuid);  		//finds a server blocking  		using (Stream strm = blucli.GetStream ()) {  			ReplyStatus (strm' BTZomBFingerFactory.BTHelloMessage);  			if (BS (ReadStatus (strm' 10)) == BS (BTZomBFingerFactory.BTHelloMessage))//if good Verify  			 {  				if (ReadStatus (strm) == ((byte)(TeamNumber >> 8)) && ReadStatus (strm) == (byte)TeamNumber)//team # validate  				 {  					ReplyStatus (strm' BTZomBFingerFactory.BTVerifyMessage' ((byte)(TeamNumber >> 8))' (byte)TeamNumber);  					if (DataRecieving != null)  						DataRecieving (this' new EventArgs ());  					if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTGoodVerifyMessage)) {  						while (true) {  							switch (ByteArrayToString (ReadStatus (strm' 8))) {  							case "SendFile":  								if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTNameFileMessage)) {  									if (ReadStatus (strm) == 0x0) {  										string newfilename = ByteArrayToString (ReadStatus (strm' (int)ReadStatus (strm)));  										if (ReadStatus (strm) == 0x0) {  											ReplyStatus (strm' BTZomBFingerFactory.BTAcceptFileMessage);  											if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage)) {  												string filelength = "";  												byte last = ReadStatus (strm);  												while (last != 0xFF) {  													filelength += (char)last;  													last = ReadStatus (strm);  												}  												if (ReadStatus (strm) == 0x0 && ReadStatus (strm) == 0xff && ReadStatus (strm) == 0x0) {  													File.WriteAllBytes (To + newfilename' ReadStatus (strm' int.Parse (filelength)));  													if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage))  														if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTEOFTMessage)) {  															ReplyStatus (strm' BTZomBFingerFactory.BTRecievedMessage);  															break;  														}  												}  											}  										}  									}  								}  								break;  							case "Sign Off":  								if (DataRecieved != null)  									DataRecieved (this' new EventArgs ());  								ReplyStatus (strm' BTZomBFingerFactory.BTByeMessage);  								goto end;  							case "No Files":  								//Ok' I don't care' continue  								break;  							default:  								//TODO: AHHH!  								break;  							}  						}  					}  				}  			}  		}  	}  	catch {  		continue;  	}  	end:  	if (!blucli.Connected) {  		blucli = new BluetoothClient ();  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,BTFinger,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,ZomBworker,The following statement contains a magic number: while (sliceing) {  	try {  		blucli.Connect (GetZomBServerAddress ()' ff.BTGuid);  		//finds a server blocking  		using (Stream strm = blucli.GetStream ()) {  			ReplyStatus (strm' BTZomBFingerFactory.BTHelloMessage);  			if (BS (ReadStatus (strm' 10)) == BS (BTZomBFingerFactory.BTHelloMessage))//if good Verify  			 {  				if (ReadStatus (strm) == ((byte)(TeamNumber >> 8)) && ReadStatus (strm) == (byte)TeamNumber)//team # validate  				 {  					ReplyStatus (strm' BTZomBFingerFactory.BTVerifyMessage' ((byte)(TeamNumber >> 8))' (byte)TeamNumber);  					if (DataRecieving != null)  						DataRecieving (this' new EventArgs ());  					if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTGoodVerifyMessage)) {  						while (true) {  							switch (ByteArrayToString (ReadStatus (strm' 8))) {  							case "SendFile":  								if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTNameFileMessage)) {  									if (ReadStatus (strm) == 0x0) {  										string newfilename = ByteArrayToString (ReadStatus (strm' (int)ReadStatus (strm)));  										if (ReadStatus (strm) == 0x0) {  											ReplyStatus (strm' BTZomBFingerFactory.BTAcceptFileMessage);  											if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage)) {  												string filelength = "";  												byte last = ReadStatus (strm);  												while (last != 0xFF) {  													filelength += (char)last;  													last = ReadStatus (strm);  												}  												if (ReadStatus (strm) == 0x0 && ReadStatus (strm) == 0xff && ReadStatus (strm) == 0x0) {  													File.WriteAllBytes (To + newfilename' ReadStatus (strm' int.Parse (filelength)));  													if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage))  														if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTEOFTMessage)) {  															ReplyStatus (strm' BTZomBFingerFactory.BTRecievedMessage);  															break;  														}  												}  											}  										}  									}  								}  								break;  							case "Sign Off":  								if (DataRecieved != null)  									DataRecieved (this' new EventArgs ());  								ReplyStatus (strm' BTZomBFingerFactory.BTByeMessage);  								goto end;  							case "No Files":  								//Ok' I don't care' continue  								break;  							default:  								//TODO: AHHH!  								break;  							}  						}  					}  				}  			}  		}  	}  	catch {  		continue;  	}  	end:  	if (!blucli.Connected) {  		blucli = new BluetoothClient ();  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,BTFinger,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,ZomBworker,The following statement contains a magic number: while (sliceing) {  	try {  		blucli.Connect (GetZomBServerAddress ()' ff.BTGuid);  		//finds a server blocking  		using (Stream strm = blucli.GetStream ()) {  			ReplyStatus (strm' BTZomBFingerFactory.BTHelloMessage);  			if (BS (ReadStatus (strm' 10)) == BS (BTZomBFingerFactory.BTHelloMessage))//if good Verify  			 {  				if (ReadStatus (strm) == ((byte)(TeamNumber >> 8)) && ReadStatus (strm) == (byte)TeamNumber)//team # validate  				 {  					ReplyStatus (strm' BTZomBFingerFactory.BTVerifyMessage' ((byte)(TeamNumber >> 8))' (byte)TeamNumber);  					if (DataRecieving != null)  						DataRecieving (this' new EventArgs ());  					if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTGoodVerifyMessage)) {  						while (true) {  							switch (ByteArrayToString (ReadStatus (strm' 8))) {  							case "SendFile":  								if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTNameFileMessage)) {  									if (ReadStatus (strm) == 0x0) {  										string newfilename = ByteArrayToString (ReadStatus (strm' (int)ReadStatus (strm)));  										if (ReadStatus (strm) == 0x0) {  											ReplyStatus (strm' BTZomBFingerFactory.BTAcceptFileMessage);  											if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage)) {  												string filelength = "";  												byte last = ReadStatus (strm);  												while (last != 0xFF) {  													filelength += (char)last;  													last = ReadStatus (strm);  												}  												if (ReadStatus (strm) == 0x0 && ReadStatus (strm) == 0xff && ReadStatus (strm) == 0x0) {  													File.WriteAllBytes (To + newfilename' ReadStatus (strm' int.Parse (filelength)));  													if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage))  														if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTEOFTMessage)) {  															ReplyStatus (strm' BTZomBFingerFactory.BTRecievedMessage);  															break;  														}  												}  											}  										}  									}  								}  								break;  							case "Sign Off":  								if (DataRecieved != null)  									DataRecieved (this' new EventArgs ());  								ReplyStatus (strm' BTZomBFingerFactory.BTByeMessage);  								goto end;  							case "No Files":  								//Ok' I don't care' continue  								break;  							default:  								//TODO: AHHH!  								break;  							}  						}  					}  				}  			}  		}  	}  	catch {  		continue;  	}  	end:  	if (!blucli.Connected) {  		blucli = new BluetoothClient ();  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,BTFinger,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,ZomBworker,The following statement contains a magic number: while (sliceing) {  	try {  		blucli.Connect (GetZomBServerAddress ()' ff.BTGuid);  		//finds a server blocking  		using (Stream strm = blucli.GetStream ()) {  			ReplyStatus (strm' BTZomBFingerFactory.BTHelloMessage);  			if (BS (ReadStatus (strm' 10)) == BS (BTZomBFingerFactory.BTHelloMessage))//if good Verify  			 {  				if (ReadStatus (strm) == ((byte)(TeamNumber >> 8)) && ReadStatus (strm) == (byte)TeamNumber)//team # validate  				 {  					ReplyStatus (strm' BTZomBFingerFactory.BTVerifyMessage' ((byte)(TeamNumber >> 8))' (byte)TeamNumber);  					if (DataRecieving != null)  						DataRecieving (this' new EventArgs ());  					if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTGoodVerifyMessage)) {  						while (true) {  							switch (ByteArrayToString (ReadStatus (strm' 8))) {  							case "SendFile":  								if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTNameFileMessage)) {  									if (ReadStatus (strm) == 0x0) {  										string newfilename = ByteArrayToString (ReadStatus (strm' (int)ReadStatus (strm)));  										if (ReadStatus (strm) == 0x0) {  											ReplyStatus (strm' BTZomBFingerFactory.BTAcceptFileMessage);  											if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage)) {  												string filelength = "";  												byte last = ReadStatus (strm);  												while (last != 0xFF) {  													filelength += (char)last;  													last = ReadStatus (strm);  												}  												if (ReadStatus (strm) == 0x0 && ReadStatus (strm) == 0xff && ReadStatus (strm) == 0x0) {  													File.WriteAllBytes (To + newfilename' ReadStatus (strm' int.Parse (filelength)));  													if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage))  														if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTEOFTMessage)) {  															ReplyStatus (strm' BTZomBFingerFactory.BTRecievedMessage);  															break;  														}  												}  											}  										}  									}  								}  								break;  							case "Sign Off":  								if (DataRecieved != null)  									DataRecieved (this' new EventArgs ());  								ReplyStatus (strm' BTZomBFingerFactory.BTByeMessage);  								goto end;  							case "No Files":  								//Ok' I don't care' continue  								break;  							default:  								//TODO: AHHH!  								break;  							}  						}  					}  				}  			}  		}  	}  	catch {  		continue;  	}  	end:  	if (!blucli.Connected) {  		blucli = new BluetoothClient ();  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,BTFinger,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,ZomBworker,The following statement contains a magic number: try {  	blucli.Connect (GetZomBServerAddress ()' ff.BTGuid);  	//finds a server blocking  	using (Stream strm = blucli.GetStream ()) {  		ReplyStatus (strm' BTZomBFingerFactory.BTHelloMessage);  		if (BS (ReadStatus (strm' 10)) == BS (BTZomBFingerFactory.BTHelloMessage))//if good Verify  		 {  			if (ReadStatus (strm) == ((byte)(TeamNumber >> 8)) && ReadStatus (strm) == (byte)TeamNumber)//team # validate  			 {  				ReplyStatus (strm' BTZomBFingerFactory.BTVerifyMessage' ((byte)(TeamNumber >> 8))' (byte)TeamNumber);  				if (DataRecieving != null)  					DataRecieving (this' new EventArgs ());  				if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTGoodVerifyMessage)) {  					while (true) {  						switch (ByteArrayToString (ReadStatus (strm' 8))) {  						case "SendFile":  							if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTNameFileMessage)) {  								if (ReadStatus (strm) == 0x0) {  									string newfilename = ByteArrayToString (ReadStatus (strm' (int)ReadStatus (strm)));  									if (ReadStatus (strm) == 0x0) {  										ReplyStatus (strm' BTZomBFingerFactory.BTAcceptFileMessage);  										if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage)) {  											string filelength = "";  											byte last = ReadStatus (strm);  											while (last != 0xFF) {  												filelength += (char)last;  												last = ReadStatus (strm);  											}  											if (ReadStatus (strm) == 0x0 && ReadStatus (strm) == 0xff && ReadStatus (strm) == 0x0) {  												File.WriteAllBytes (To + newfilename' ReadStatus (strm' int.Parse (filelength)));  												if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage))  													if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTEOFTMessage)) {  														ReplyStatus (strm' BTZomBFingerFactory.BTRecievedMessage);  														break;  													}  											}  										}  									}  								}  							}  							break;  						case "Sign Off":  							if (DataRecieved != null)  								DataRecieved (this' new EventArgs ());  							ReplyStatus (strm' BTZomBFingerFactory.BTByeMessage);  							goto end;  						case "No Files":  							//Ok' I don't care' continue  							break;  						default:  							//TODO: AHHH!  							break;  						}  					}  				}  			}  		}  	}  }  catch {  	continue;  }  
Magic Number,System451.Communication.Dashboard.Utils,BTFinger,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,ZomBworker,The following statement contains a magic number: try {  	blucli.Connect (GetZomBServerAddress ()' ff.BTGuid);  	//finds a server blocking  	using (Stream strm = blucli.GetStream ()) {  		ReplyStatus (strm' BTZomBFingerFactory.BTHelloMessage);  		if (BS (ReadStatus (strm' 10)) == BS (BTZomBFingerFactory.BTHelloMessage))//if good Verify  		 {  			if (ReadStatus (strm) == ((byte)(TeamNumber >> 8)) && ReadStatus (strm) == (byte)TeamNumber)//team # validate  			 {  				ReplyStatus (strm' BTZomBFingerFactory.BTVerifyMessage' ((byte)(TeamNumber >> 8))' (byte)TeamNumber);  				if (DataRecieving != null)  					DataRecieving (this' new EventArgs ());  				if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTGoodVerifyMessage)) {  					while (true) {  						switch (ByteArrayToString (ReadStatus (strm' 8))) {  						case "SendFile":  							if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTNameFileMessage)) {  								if (ReadStatus (strm) == 0x0) {  									string newfilename = ByteArrayToString (ReadStatus (strm' (int)ReadStatus (strm)));  									if (ReadStatus (strm) == 0x0) {  										ReplyStatus (strm' BTZomBFingerFactory.BTAcceptFileMessage);  										if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage)) {  											string filelength = "";  											byte last = ReadStatus (strm);  											while (last != 0xFF) {  												filelength += (char)last;  												last = ReadStatus (strm);  											}  											if (ReadStatus (strm) == 0x0 && ReadStatus (strm) == 0xff && ReadStatus (strm) == 0x0) {  												File.WriteAllBytes (To + newfilename' ReadStatus (strm' int.Parse (filelength)));  												if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage))  													if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTEOFTMessage)) {  														ReplyStatus (strm' BTZomBFingerFactory.BTRecievedMessage);  														break;  													}  											}  										}  									}  								}  							}  							break;  						case "Sign Off":  							if (DataRecieved != null)  								DataRecieved (this' new EventArgs ());  							ReplyStatus (strm' BTZomBFingerFactory.BTByeMessage);  							goto end;  						case "No Files":  							//Ok' I don't care' continue  							break;  						default:  							//TODO: AHHH!  							break;  						}  					}  				}  			}  		}  	}  }  catch {  	continue;  }  
Magic Number,System451.Communication.Dashboard.Utils,BTFinger,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,ZomBworker,The following statement contains a magic number: try {  	blucli.Connect (GetZomBServerAddress ()' ff.BTGuid);  	//finds a server blocking  	using (Stream strm = blucli.GetStream ()) {  		ReplyStatus (strm' BTZomBFingerFactory.BTHelloMessage);  		if (BS (ReadStatus (strm' 10)) == BS (BTZomBFingerFactory.BTHelloMessage))//if good Verify  		 {  			if (ReadStatus (strm) == ((byte)(TeamNumber >> 8)) && ReadStatus (strm) == (byte)TeamNumber)//team # validate  			 {  				ReplyStatus (strm' BTZomBFingerFactory.BTVerifyMessage' ((byte)(TeamNumber >> 8))' (byte)TeamNumber);  				if (DataRecieving != null)  					DataRecieving (this' new EventArgs ());  				if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTGoodVerifyMessage)) {  					while (true) {  						switch (ByteArrayToString (ReadStatus (strm' 8))) {  						case "SendFile":  							if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTNameFileMessage)) {  								if (ReadStatus (strm) == 0x0) {  									string newfilename = ByteArrayToString (ReadStatus (strm' (int)ReadStatus (strm)));  									if (ReadStatus (strm) == 0x0) {  										ReplyStatus (strm' BTZomBFingerFactory.BTAcceptFileMessage);  										if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage)) {  											string filelength = "";  											byte last = ReadStatus (strm);  											while (last != 0xFF) {  												filelength += (char)last;  												last = ReadStatus (strm);  											}  											if (ReadStatus (strm) == 0x0 && ReadStatus (strm) == 0xff && ReadStatus (strm) == 0x0) {  												File.WriteAllBytes (To + newfilename' ReadStatus (strm' int.Parse (filelength)));  												if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage))  													if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTEOFTMessage)) {  														ReplyStatus (strm' BTZomBFingerFactory.BTRecievedMessage);  														break;  													}  											}  										}  									}  								}  							}  							break;  						case "Sign Off":  							if (DataRecieved != null)  								DataRecieved (this' new EventArgs ());  							ReplyStatus (strm' BTZomBFingerFactory.BTByeMessage);  							goto end;  						case "No Files":  							//Ok' I don't care' continue  							break;  						default:  							//TODO: AHHH!  							break;  						}  					}  				}  			}  		}  	}  }  catch {  	continue;  }  
Magic Number,System451.Communication.Dashboard.Utils,BTFinger,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,ZomBworker,The following statement contains a magic number: try {  	blucli.Connect (GetZomBServerAddress ()' ff.BTGuid);  	//finds a server blocking  	using (Stream strm = blucli.GetStream ()) {  		ReplyStatus (strm' BTZomBFingerFactory.BTHelloMessage);  		if (BS (ReadStatus (strm' 10)) == BS (BTZomBFingerFactory.BTHelloMessage))//if good Verify  		 {  			if (ReadStatus (strm) == ((byte)(TeamNumber >> 8)) && ReadStatus (strm) == (byte)TeamNumber)//team # validate  			 {  				ReplyStatus (strm' BTZomBFingerFactory.BTVerifyMessage' ((byte)(TeamNumber >> 8))' (byte)TeamNumber);  				if (DataRecieving != null)  					DataRecieving (this' new EventArgs ());  				if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTGoodVerifyMessage)) {  					while (true) {  						switch (ByteArrayToString (ReadStatus (strm' 8))) {  						case "SendFile":  							if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTNameFileMessage)) {  								if (ReadStatus (strm) == 0x0) {  									string newfilename = ByteArrayToString (ReadStatus (strm' (int)ReadStatus (strm)));  									if (ReadStatus (strm) == 0x0) {  										ReplyStatus (strm' BTZomBFingerFactory.BTAcceptFileMessage);  										if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage)) {  											string filelength = "";  											byte last = ReadStatus (strm);  											while (last != 0xFF) {  												filelength += (char)last;  												last = ReadStatus (strm);  											}  											if (ReadStatus (strm) == 0x0 && ReadStatus (strm) == 0xff && ReadStatus (strm) == 0x0) {  												File.WriteAllBytes (To + newfilename' ReadStatus (strm' int.Parse (filelength)));  												if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage))  													if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTEOFTMessage)) {  														ReplyStatus (strm' BTZomBFingerFactory.BTRecievedMessage);  														break;  													}  											}  										}  									}  								}  							}  							break;  						case "Sign Off":  							if (DataRecieved != null)  								DataRecieved (this' new EventArgs ());  							ReplyStatus (strm' BTZomBFingerFactory.BTByeMessage);  							goto end;  						case "No Files":  							//Ok' I don't care' continue  							break;  						default:  							//TODO: AHHH!  							break;  						}  					}  				}  			}  		}  	}  }  catch {  	continue;  }  
Magic Number,System451.Communication.Dashboard.Utils,BTFinger,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,ZomBworker,The following statement contains a magic number: try {  	blucli.Connect (GetZomBServerAddress ()' ff.BTGuid);  	//finds a server blocking  	using (Stream strm = blucli.GetStream ()) {  		ReplyStatus (strm' BTZomBFingerFactory.BTHelloMessage);  		if (BS (ReadStatus (strm' 10)) == BS (BTZomBFingerFactory.BTHelloMessage))//if good Verify  		 {  			if (ReadStatus (strm) == ((byte)(TeamNumber >> 8)) && ReadStatus (strm) == (byte)TeamNumber)//team # validate  			 {  				ReplyStatus (strm' BTZomBFingerFactory.BTVerifyMessage' ((byte)(TeamNumber >> 8))' (byte)TeamNumber);  				if (DataRecieving != null)  					DataRecieving (this' new EventArgs ());  				if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTGoodVerifyMessage)) {  					while (true) {  						switch (ByteArrayToString (ReadStatus (strm' 8))) {  						case "SendFile":  							if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTNameFileMessage)) {  								if (ReadStatus (strm) == 0x0) {  									string newfilename = ByteArrayToString (ReadStatus (strm' (int)ReadStatus (strm)));  									if (ReadStatus (strm) == 0x0) {  										ReplyStatus (strm' BTZomBFingerFactory.BTAcceptFileMessage);  										if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage)) {  											string filelength = "";  											byte last = ReadStatus (strm);  											while (last != 0xFF) {  												filelength += (char)last;  												last = ReadStatus (strm);  											}  											if (ReadStatus (strm) == 0x0 && ReadStatus (strm) == 0xff && ReadStatus (strm) == 0x0) {  												File.WriteAllBytes (To + newfilename' ReadStatus (strm' int.Parse (filelength)));  												if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage))  													if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTEOFTMessage)) {  														ReplyStatus (strm' BTZomBFingerFactory.BTRecievedMessage);  														break;  													}  											}  										}  									}  								}  							}  							break;  						case "Sign Off":  							if (DataRecieved != null)  								DataRecieved (this' new EventArgs ());  							ReplyStatus (strm' BTZomBFingerFactory.BTByeMessage);  							goto end;  						case "No Files":  							//Ok' I don't care' continue  							break;  						default:  							//TODO: AHHH!  							break;  						}  					}  				}  			}  		}  	}  }  catch {  	continue;  }  
Magic Number,System451.Communication.Dashboard.Utils,BTFinger,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,ZomBworker,The following statement contains a magic number: try {  	blucli.Connect (GetZomBServerAddress ()' ff.BTGuid);  	//finds a server blocking  	using (Stream strm = blucli.GetStream ()) {  		ReplyStatus (strm' BTZomBFingerFactory.BTHelloMessage);  		if (BS (ReadStatus (strm' 10)) == BS (BTZomBFingerFactory.BTHelloMessage))//if good Verify  		 {  			if (ReadStatus (strm) == ((byte)(TeamNumber >> 8)) && ReadStatus (strm) == (byte)TeamNumber)//team # validate  			 {  				ReplyStatus (strm' BTZomBFingerFactory.BTVerifyMessage' ((byte)(TeamNumber >> 8))' (byte)TeamNumber);  				if (DataRecieving != null)  					DataRecieving (this' new EventArgs ());  				if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTGoodVerifyMessage)) {  					while (true) {  						switch (ByteArrayToString (ReadStatus (strm' 8))) {  						case "SendFile":  							if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTNameFileMessage)) {  								if (ReadStatus (strm) == 0x0) {  									string newfilename = ByteArrayToString (ReadStatus (strm' (int)ReadStatus (strm)));  									if (ReadStatus (strm) == 0x0) {  										ReplyStatus (strm' BTZomBFingerFactory.BTAcceptFileMessage);  										if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage)) {  											string filelength = "";  											byte last = ReadStatus (strm);  											while (last != 0xFF) {  												filelength += (char)last;  												last = ReadStatus (strm);  											}  											if (ReadStatus (strm) == 0x0 && ReadStatus (strm) == 0xff && ReadStatus (strm) == 0x0) {  												File.WriteAllBytes (To + newfilename' ReadStatus (strm' int.Parse (filelength)));  												if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage))  													if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTEOFTMessage)) {  														ReplyStatus (strm' BTZomBFingerFactory.BTRecievedMessage);  														break;  													}  											}  										}  									}  								}  							}  							break;  						case "Sign Off":  							if (DataRecieved != null)  								DataRecieved (this' new EventArgs ());  							ReplyStatus (strm' BTZomBFingerFactory.BTByeMessage);  							goto end;  						case "No Files":  							//Ok' I don't care' continue  							break;  						default:  							//TODO: AHHH!  							break;  						}  					}  				}  			}  		}  	}  }  catch {  	continue;  }  
Magic Number,System451.Communication.Dashboard.Utils,BTFinger,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,ZomBworker,The following statement contains a magic number: try {  	blucli.Connect (GetZomBServerAddress ()' ff.BTGuid);  	//finds a server blocking  	using (Stream strm = blucli.GetStream ()) {  		ReplyStatus (strm' BTZomBFingerFactory.BTHelloMessage);  		if (BS (ReadStatus (strm' 10)) == BS (BTZomBFingerFactory.BTHelloMessage))//if good Verify  		 {  			if (ReadStatus (strm) == ((byte)(TeamNumber >> 8)) && ReadStatus (strm) == (byte)TeamNumber)//team # validate  			 {  				ReplyStatus (strm' BTZomBFingerFactory.BTVerifyMessage' ((byte)(TeamNumber >> 8))' (byte)TeamNumber);  				if (DataRecieving != null)  					DataRecieving (this' new EventArgs ());  				if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTGoodVerifyMessage)) {  					while (true) {  						switch (ByteArrayToString (ReadStatus (strm' 8))) {  						case "SendFile":  							if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTNameFileMessage)) {  								if (ReadStatus (strm) == 0x0) {  									string newfilename = ByteArrayToString (ReadStatus (strm' (int)ReadStatus (strm)));  									if (ReadStatus (strm) == 0x0) {  										ReplyStatus (strm' BTZomBFingerFactory.BTAcceptFileMessage);  										if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage)) {  											string filelength = "";  											byte last = ReadStatus (strm);  											while (last != 0xFF) {  												filelength += (char)last;  												last = ReadStatus (strm);  											}  											if (ReadStatus (strm) == 0x0 && ReadStatus (strm) == 0xff && ReadStatus (strm) == 0x0) {  												File.WriteAllBytes (To + newfilename' ReadStatus (strm' int.Parse (filelength)));  												if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage))  													if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTEOFTMessage)) {  														ReplyStatus (strm' BTZomBFingerFactory.BTRecievedMessage);  														break;  													}  											}  										}  									}  								}  							}  							break;  						case "Sign Off":  							if (DataRecieved != null)  								DataRecieved (this' new EventArgs ());  							ReplyStatus (strm' BTZomBFingerFactory.BTByeMessage);  							goto end;  						case "No Files":  							//Ok' I don't care' continue  							break;  						default:  							//TODO: AHHH!  							break;  						}  					}  				}  			}  		}  	}  }  catch {  	continue;  }  
Magic Number,System451.Communication.Dashboard.Utils,BTFinger,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,ZomBworker,The following statement contains a magic number: try {  	blucli.Connect (GetZomBServerAddress ()' ff.BTGuid);  	//finds a server blocking  	using (Stream strm = blucli.GetStream ()) {  		ReplyStatus (strm' BTZomBFingerFactory.BTHelloMessage);  		if (BS (ReadStatus (strm' 10)) == BS (BTZomBFingerFactory.BTHelloMessage))//if good Verify  		 {  			if (ReadStatus (strm) == ((byte)(TeamNumber >> 8)) && ReadStatus (strm) == (byte)TeamNumber)//team # validate  			 {  				ReplyStatus (strm' BTZomBFingerFactory.BTVerifyMessage' ((byte)(TeamNumber >> 8))' (byte)TeamNumber);  				if (DataRecieving != null)  					DataRecieving (this' new EventArgs ());  				if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTGoodVerifyMessage)) {  					while (true) {  						switch (ByteArrayToString (ReadStatus (strm' 8))) {  						case "SendFile":  							if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTNameFileMessage)) {  								if (ReadStatus (strm) == 0x0) {  									string newfilename = ByteArrayToString (ReadStatus (strm' (int)ReadStatus (strm)));  									if (ReadStatus (strm) == 0x0) {  										ReplyStatus (strm' BTZomBFingerFactory.BTAcceptFileMessage);  										if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage)) {  											string filelength = "";  											byte last = ReadStatus (strm);  											while (last != 0xFF) {  												filelength += (char)last;  												last = ReadStatus (strm);  											}  											if (ReadStatus (strm) == 0x0 && ReadStatus (strm) == 0xff && ReadStatus (strm) == 0x0) {  												File.WriteAllBytes (To + newfilename' ReadStatus (strm' int.Parse (filelength)));  												if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage))  													if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTEOFTMessage)) {  														ReplyStatus (strm' BTZomBFingerFactory.BTRecievedMessage);  														break;  													}  											}  										}  									}  								}  							}  							break;  						case "Sign Off":  							if (DataRecieved != null)  								DataRecieved (this' new EventArgs ());  							ReplyStatus (strm' BTZomBFingerFactory.BTByeMessage);  							goto end;  						case "No Files":  							//Ok' I don't care' continue  							break;  						default:  							//TODO: AHHH!  							break;  						}  					}  				}  			}  		}  	}  }  catch {  	continue;  }  
Magic Number,System451.Communication.Dashboard.Utils,BTFinger,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,ZomBworker,The following statement contains a magic number: try {  	blucli.Connect (GetZomBServerAddress ()' ff.BTGuid);  	//finds a server blocking  	using (Stream strm = blucli.GetStream ()) {  		ReplyStatus (strm' BTZomBFingerFactory.BTHelloMessage);  		if (BS (ReadStatus (strm' 10)) == BS (BTZomBFingerFactory.BTHelloMessage))//if good Verify  		 {  			if (ReadStatus (strm) == ((byte)(TeamNumber >> 8)) && ReadStatus (strm) == (byte)TeamNumber)//team # validate  			 {  				ReplyStatus (strm' BTZomBFingerFactory.BTVerifyMessage' ((byte)(TeamNumber >> 8))' (byte)TeamNumber);  				if (DataRecieving != null)  					DataRecieving (this' new EventArgs ());  				if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTGoodVerifyMessage)) {  					while (true) {  						switch (ByteArrayToString (ReadStatus (strm' 8))) {  						case "SendFile":  							if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTNameFileMessage)) {  								if (ReadStatus (strm) == 0x0) {  									string newfilename = ByteArrayToString (ReadStatus (strm' (int)ReadStatus (strm)));  									if (ReadStatus (strm) == 0x0) {  										ReplyStatus (strm' BTZomBFingerFactory.BTAcceptFileMessage);  										if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage)) {  											string filelength = "";  											byte last = ReadStatus (strm);  											while (last != 0xFF) {  												filelength += (char)last;  												last = ReadStatus (strm);  											}  											if (ReadStatus (strm) == 0x0 && ReadStatus (strm) == 0xff && ReadStatus (strm) == 0x0) {  												File.WriteAllBytes (To + newfilename' ReadStatus (strm' int.Parse (filelength)));  												if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage))  													if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTEOFTMessage)) {  														ReplyStatus (strm' BTZomBFingerFactory.BTRecievedMessage);  														break;  													}  											}  										}  									}  								}  							}  							break;  						case "Sign Off":  							if (DataRecieved != null)  								DataRecieved (this' new EventArgs ());  							ReplyStatus (strm' BTZomBFingerFactory.BTByeMessage);  							goto end;  						case "No Files":  							//Ok' I don't care' continue  							break;  						default:  							//TODO: AHHH!  							break;  						}  					}  				}  			}  		}  	}  }  catch {  	continue;  }  
Magic Number,System451.Communication.Dashboard.Utils,BTFinger,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,ZomBworker,The following statement contains a magic number: using (Stream strm = blucli.GetStream ()) {  	ReplyStatus (strm' BTZomBFingerFactory.BTHelloMessage);  	if (BS (ReadStatus (strm' 10)) == BS (BTZomBFingerFactory.BTHelloMessage))//if good Verify  	 {  		if (ReadStatus (strm) == ((byte)(TeamNumber >> 8)) && ReadStatus (strm) == (byte)TeamNumber)//team # validate  		 {  			ReplyStatus (strm' BTZomBFingerFactory.BTVerifyMessage' ((byte)(TeamNumber >> 8))' (byte)TeamNumber);  			if (DataRecieving != null)  				DataRecieving (this' new EventArgs ());  			if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTGoodVerifyMessage)) {  				while (true) {  					switch (ByteArrayToString (ReadStatus (strm' 8))) {  					case "SendFile":  						if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTNameFileMessage)) {  							if (ReadStatus (strm) == 0x0) {  								string newfilename = ByteArrayToString (ReadStatus (strm' (int)ReadStatus (strm)));  								if (ReadStatus (strm) == 0x0) {  									ReplyStatus (strm' BTZomBFingerFactory.BTAcceptFileMessage);  									if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage)) {  										string filelength = "";  										byte last = ReadStatus (strm);  										while (last != 0xFF) {  											filelength += (char)last;  											last = ReadStatus (strm);  										}  										if (ReadStatus (strm) == 0x0 && ReadStatus (strm) == 0xff && ReadStatus (strm) == 0x0) {  											File.WriteAllBytes (To + newfilename' ReadStatus (strm' int.Parse (filelength)));  											if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage))  												if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTEOFTMessage)) {  													ReplyStatus (strm' BTZomBFingerFactory.BTRecievedMessage);  													break;  												}  										}  									}  								}  							}  						}  						break;  					case "Sign Off":  						if (DataRecieved != null)  							DataRecieved (this' new EventArgs ());  						ReplyStatus (strm' BTZomBFingerFactory.BTByeMessage);  						goto end;  					case "No Files":  						//Ok' I don't care' continue  						break;  					default:  						//TODO: AHHH!  						break;  					}  				}  			}  		}  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,BTFinger,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,ZomBworker,The following statement contains a magic number: using (Stream strm = blucli.GetStream ()) {  	ReplyStatus (strm' BTZomBFingerFactory.BTHelloMessage);  	if (BS (ReadStatus (strm' 10)) == BS (BTZomBFingerFactory.BTHelloMessage))//if good Verify  	 {  		if (ReadStatus (strm) == ((byte)(TeamNumber >> 8)) && ReadStatus (strm) == (byte)TeamNumber)//team # validate  		 {  			ReplyStatus (strm' BTZomBFingerFactory.BTVerifyMessage' ((byte)(TeamNumber >> 8))' (byte)TeamNumber);  			if (DataRecieving != null)  				DataRecieving (this' new EventArgs ());  			if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTGoodVerifyMessage)) {  				while (true) {  					switch (ByteArrayToString (ReadStatus (strm' 8))) {  					case "SendFile":  						if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTNameFileMessage)) {  							if (ReadStatus (strm) == 0x0) {  								string newfilename = ByteArrayToString (ReadStatus (strm' (int)ReadStatus (strm)));  								if (ReadStatus (strm) == 0x0) {  									ReplyStatus (strm' BTZomBFingerFactory.BTAcceptFileMessage);  									if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage)) {  										string filelength = "";  										byte last = ReadStatus (strm);  										while (last != 0xFF) {  											filelength += (char)last;  											last = ReadStatus (strm);  										}  										if (ReadStatus (strm) == 0x0 && ReadStatus (strm) == 0xff && ReadStatus (strm) == 0x0) {  											File.WriteAllBytes (To + newfilename' ReadStatus (strm' int.Parse (filelength)));  											if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage))  												if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTEOFTMessage)) {  													ReplyStatus (strm' BTZomBFingerFactory.BTRecievedMessage);  													break;  												}  										}  									}  								}  							}  						}  						break;  					case "Sign Off":  						if (DataRecieved != null)  							DataRecieved (this' new EventArgs ());  						ReplyStatus (strm' BTZomBFingerFactory.BTByeMessage);  						goto end;  					case "No Files":  						//Ok' I don't care' continue  						break;  					default:  						//TODO: AHHH!  						break;  					}  				}  			}  		}  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,BTFinger,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,ZomBworker,The following statement contains a magic number: using (Stream strm = blucli.GetStream ()) {  	ReplyStatus (strm' BTZomBFingerFactory.BTHelloMessage);  	if (BS (ReadStatus (strm' 10)) == BS (BTZomBFingerFactory.BTHelloMessage))//if good Verify  	 {  		if (ReadStatus (strm) == ((byte)(TeamNumber >> 8)) && ReadStatus (strm) == (byte)TeamNumber)//team # validate  		 {  			ReplyStatus (strm' BTZomBFingerFactory.BTVerifyMessage' ((byte)(TeamNumber >> 8))' (byte)TeamNumber);  			if (DataRecieving != null)  				DataRecieving (this' new EventArgs ());  			if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTGoodVerifyMessage)) {  				while (true) {  					switch (ByteArrayToString (ReadStatus (strm' 8))) {  					case "SendFile":  						if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTNameFileMessage)) {  							if (ReadStatus (strm) == 0x0) {  								string newfilename = ByteArrayToString (ReadStatus (strm' (int)ReadStatus (strm)));  								if (ReadStatus (strm) == 0x0) {  									ReplyStatus (strm' BTZomBFingerFactory.BTAcceptFileMessage);  									if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage)) {  										string filelength = "";  										byte last = ReadStatus (strm);  										while (last != 0xFF) {  											filelength += (char)last;  											last = ReadStatus (strm);  										}  										if (ReadStatus (strm) == 0x0 && ReadStatus (strm) == 0xff && ReadStatus (strm) == 0x0) {  											File.WriteAllBytes (To + newfilename' ReadStatus (strm' int.Parse (filelength)));  											if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage))  												if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTEOFTMessage)) {  													ReplyStatus (strm' BTZomBFingerFactory.BTRecievedMessage);  													break;  												}  										}  									}  								}  							}  						}  						break;  					case "Sign Off":  						if (DataRecieved != null)  							DataRecieved (this' new EventArgs ());  						ReplyStatus (strm' BTZomBFingerFactory.BTByeMessage);  						goto end;  					case "No Files":  						//Ok' I don't care' continue  						break;  					default:  						//TODO: AHHH!  						break;  					}  				}  			}  		}  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,BTFinger,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,ZomBworker,The following statement contains a magic number: using (Stream strm = blucli.GetStream ()) {  	ReplyStatus (strm' BTZomBFingerFactory.BTHelloMessage);  	if (BS (ReadStatus (strm' 10)) == BS (BTZomBFingerFactory.BTHelloMessage))//if good Verify  	 {  		if (ReadStatus (strm) == ((byte)(TeamNumber >> 8)) && ReadStatus (strm) == (byte)TeamNumber)//team # validate  		 {  			ReplyStatus (strm' BTZomBFingerFactory.BTVerifyMessage' ((byte)(TeamNumber >> 8))' (byte)TeamNumber);  			if (DataRecieving != null)  				DataRecieving (this' new EventArgs ());  			if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTGoodVerifyMessage)) {  				while (true) {  					switch (ByteArrayToString (ReadStatus (strm' 8))) {  					case "SendFile":  						if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTNameFileMessage)) {  							if (ReadStatus (strm) == 0x0) {  								string newfilename = ByteArrayToString (ReadStatus (strm' (int)ReadStatus (strm)));  								if (ReadStatus (strm) == 0x0) {  									ReplyStatus (strm' BTZomBFingerFactory.BTAcceptFileMessage);  									if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage)) {  										string filelength = "";  										byte last = ReadStatus (strm);  										while (last != 0xFF) {  											filelength += (char)last;  											last = ReadStatus (strm);  										}  										if (ReadStatus (strm) == 0x0 && ReadStatus (strm) == 0xff && ReadStatus (strm) == 0x0) {  											File.WriteAllBytes (To + newfilename' ReadStatus (strm' int.Parse (filelength)));  											if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage))  												if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTEOFTMessage)) {  													ReplyStatus (strm' BTZomBFingerFactory.BTRecievedMessage);  													break;  												}  										}  									}  								}  							}  						}  						break;  					case "Sign Off":  						if (DataRecieved != null)  							DataRecieved (this' new EventArgs ());  						ReplyStatus (strm' BTZomBFingerFactory.BTByeMessage);  						goto end;  					case "No Files":  						//Ok' I don't care' continue  						break;  					default:  						//TODO: AHHH!  						break;  					}  				}  			}  		}  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,BTFinger,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,ZomBworker,The following statement contains a magic number: using (Stream strm = blucli.GetStream ()) {  	ReplyStatus (strm' BTZomBFingerFactory.BTHelloMessage);  	if (BS (ReadStatus (strm' 10)) == BS (BTZomBFingerFactory.BTHelloMessage))//if good Verify  	 {  		if (ReadStatus (strm) == ((byte)(TeamNumber >> 8)) && ReadStatus (strm) == (byte)TeamNumber)//team # validate  		 {  			ReplyStatus (strm' BTZomBFingerFactory.BTVerifyMessage' ((byte)(TeamNumber >> 8))' (byte)TeamNumber);  			if (DataRecieving != null)  				DataRecieving (this' new EventArgs ());  			if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTGoodVerifyMessage)) {  				while (true) {  					switch (ByteArrayToString (ReadStatus (strm' 8))) {  					case "SendFile":  						if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTNameFileMessage)) {  							if (ReadStatus (strm) == 0x0) {  								string newfilename = ByteArrayToString (ReadStatus (strm' (int)ReadStatus (strm)));  								if (ReadStatus (strm) == 0x0) {  									ReplyStatus (strm' BTZomBFingerFactory.BTAcceptFileMessage);  									if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage)) {  										string filelength = "";  										byte last = ReadStatus (strm);  										while (last != 0xFF) {  											filelength += (char)last;  											last = ReadStatus (strm);  										}  										if (ReadStatus (strm) == 0x0 && ReadStatus (strm) == 0xff && ReadStatus (strm) == 0x0) {  											File.WriteAllBytes (To + newfilename' ReadStatus (strm' int.Parse (filelength)));  											if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage))  												if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTEOFTMessage)) {  													ReplyStatus (strm' BTZomBFingerFactory.BTRecievedMessage);  													break;  												}  										}  									}  								}  							}  						}  						break;  					case "Sign Off":  						if (DataRecieved != null)  							DataRecieved (this' new EventArgs ());  						ReplyStatus (strm' BTZomBFingerFactory.BTByeMessage);  						goto end;  					case "No Files":  						//Ok' I don't care' continue  						break;  					default:  						//TODO: AHHH!  						break;  					}  				}  			}  		}  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,BTFinger,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,ZomBworker,The following statement contains a magic number: using (Stream strm = blucli.GetStream ()) {  	ReplyStatus (strm' BTZomBFingerFactory.BTHelloMessage);  	if (BS (ReadStatus (strm' 10)) == BS (BTZomBFingerFactory.BTHelloMessage))//if good Verify  	 {  		if (ReadStatus (strm) == ((byte)(TeamNumber >> 8)) && ReadStatus (strm) == (byte)TeamNumber)//team # validate  		 {  			ReplyStatus (strm' BTZomBFingerFactory.BTVerifyMessage' ((byte)(TeamNumber >> 8))' (byte)TeamNumber);  			if (DataRecieving != null)  				DataRecieving (this' new EventArgs ());  			if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTGoodVerifyMessage)) {  				while (true) {  					switch (ByteArrayToString (ReadStatus (strm' 8))) {  					case "SendFile":  						if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTNameFileMessage)) {  							if (ReadStatus (strm) == 0x0) {  								string newfilename = ByteArrayToString (ReadStatus (strm' (int)ReadStatus (strm)));  								if (ReadStatus (strm) == 0x0) {  									ReplyStatus (strm' BTZomBFingerFactory.BTAcceptFileMessage);  									if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage)) {  										string filelength = "";  										byte last = ReadStatus (strm);  										while (last != 0xFF) {  											filelength += (char)last;  											last = ReadStatus (strm);  										}  										if (ReadStatus (strm) == 0x0 && ReadStatus (strm) == 0xff && ReadStatus (strm) == 0x0) {  											File.WriteAllBytes (To + newfilename' ReadStatus (strm' int.Parse (filelength)));  											if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage))  												if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTEOFTMessage)) {  													ReplyStatus (strm' BTZomBFingerFactory.BTRecievedMessage);  													break;  												}  										}  									}  								}  							}  						}  						break;  					case "Sign Off":  						if (DataRecieved != null)  							DataRecieved (this' new EventArgs ());  						ReplyStatus (strm' BTZomBFingerFactory.BTByeMessage);  						goto end;  					case "No Files":  						//Ok' I don't care' continue  						break;  					default:  						//TODO: AHHH!  						break;  					}  				}  			}  		}  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,BTFinger,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,ZomBworker,The following statement contains a magic number: using (Stream strm = blucli.GetStream ()) {  	ReplyStatus (strm' BTZomBFingerFactory.BTHelloMessage);  	if (BS (ReadStatus (strm' 10)) == BS (BTZomBFingerFactory.BTHelloMessage))//if good Verify  	 {  		if (ReadStatus (strm) == ((byte)(TeamNumber >> 8)) && ReadStatus (strm) == (byte)TeamNumber)//team # validate  		 {  			ReplyStatus (strm' BTZomBFingerFactory.BTVerifyMessage' ((byte)(TeamNumber >> 8))' (byte)TeamNumber);  			if (DataRecieving != null)  				DataRecieving (this' new EventArgs ());  			if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTGoodVerifyMessage)) {  				while (true) {  					switch (ByteArrayToString (ReadStatus (strm' 8))) {  					case "SendFile":  						if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTNameFileMessage)) {  							if (ReadStatus (strm) == 0x0) {  								string newfilename = ByteArrayToString (ReadStatus (strm' (int)ReadStatus (strm)));  								if (ReadStatus (strm) == 0x0) {  									ReplyStatus (strm' BTZomBFingerFactory.BTAcceptFileMessage);  									if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage)) {  										string filelength = "";  										byte last = ReadStatus (strm);  										while (last != 0xFF) {  											filelength += (char)last;  											last = ReadStatus (strm);  										}  										if (ReadStatus (strm) == 0x0 && ReadStatus (strm) == 0xff && ReadStatus (strm) == 0x0) {  											File.WriteAllBytes (To + newfilename' ReadStatus (strm' int.Parse (filelength)));  											if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage))  												if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTEOFTMessage)) {  													ReplyStatus (strm' BTZomBFingerFactory.BTRecievedMessage);  													break;  												}  										}  									}  								}  							}  						}  						break;  					case "Sign Off":  						if (DataRecieved != null)  							DataRecieved (this' new EventArgs ());  						ReplyStatus (strm' BTZomBFingerFactory.BTByeMessage);  						goto end;  					case "No Files":  						//Ok' I don't care' continue  						break;  					default:  						//TODO: AHHH!  						break;  					}  				}  			}  		}  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,BTFinger,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,ZomBworker,The following statement contains a magic number: using (Stream strm = blucli.GetStream ()) {  	ReplyStatus (strm' BTZomBFingerFactory.BTHelloMessage);  	if (BS (ReadStatus (strm' 10)) == BS (BTZomBFingerFactory.BTHelloMessage))//if good Verify  	 {  		if (ReadStatus (strm) == ((byte)(TeamNumber >> 8)) && ReadStatus (strm) == (byte)TeamNumber)//team # validate  		 {  			ReplyStatus (strm' BTZomBFingerFactory.BTVerifyMessage' ((byte)(TeamNumber >> 8))' (byte)TeamNumber);  			if (DataRecieving != null)  				DataRecieving (this' new EventArgs ());  			if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTGoodVerifyMessage)) {  				while (true) {  					switch (ByteArrayToString (ReadStatus (strm' 8))) {  					case "SendFile":  						if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTNameFileMessage)) {  							if (ReadStatus (strm) == 0x0) {  								string newfilename = ByteArrayToString (ReadStatus (strm' (int)ReadStatus (strm)));  								if (ReadStatus (strm) == 0x0) {  									ReplyStatus (strm' BTZomBFingerFactory.BTAcceptFileMessage);  									if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage)) {  										string filelength = "";  										byte last = ReadStatus (strm);  										while (last != 0xFF) {  											filelength += (char)last;  											last = ReadStatus (strm);  										}  										if (ReadStatus (strm) == 0x0 && ReadStatus (strm) == 0xff && ReadStatus (strm) == 0x0) {  											File.WriteAllBytes (To + newfilename' ReadStatus (strm' int.Parse (filelength)));  											if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage))  												if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTEOFTMessage)) {  													ReplyStatus (strm' BTZomBFingerFactory.BTRecievedMessage);  													break;  												}  										}  									}  								}  							}  						}  						break;  					case "Sign Off":  						if (DataRecieved != null)  							DataRecieved (this' new EventArgs ());  						ReplyStatus (strm' BTZomBFingerFactory.BTByeMessage);  						goto end;  					case "No Files":  						//Ok' I don't care' continue  						break;  					default:  						//TODO: AHHH!  						break;  					}  				}  			}  		}  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,BTFinger,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,ZomBworker,The following statement contains a magic number: using (Stream strm = blucli.GetStream ()) {  	ReplyStatus (strm' BTZomBFingerFactory.BTHelloMessage);  	if (BS (ReadStatus (strm' 10)) == BS (BTZomBFingerFactory.BTHelloMessage))//if good Verify  	 {  		if (ReadStatus (strm) == ((byte)(TeamNumber >> 8)) && ReadStatus (strm) == (byte)TeamNumber)//team # validate  		 {  			ReplyStatus (strm' BTZomBFingerFactory.BTVerifyMessage' ((byte)(TeamNumber >> 8))' (byte)TeamNumber);  			if (DataRecieving != null)  				DataRecieving (this' new EventArgs ());  			if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTGoodVerifyMessage)) {  				while (true) {  					switch (ByteArrayToString (ReadStatus (strm' 8))) {  					case "SendFile":  						if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTNameFileMessage)) {  							if (ReadStatus (strm) == 0x0) {  								string newfilename = ByteArrayToString (ReadStatus (strm' (int)ReadStatus (strm)));  								if (ReadStatus (strm) == 0x0) {  									ReplyStatus (strm' BTZomBFingerFactory.BTAcceptFileMessage);  									if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage)) {  										string filelength = "";  										byte last = ReadStatus (strm);  										while (last != 0xFF) {  											filelength += (char)last;  											last = ReadStatus (strm);  										}  										if (ReadStatus (strm) == 0x0 && ReadStatus (strm) == 0xff && ReadStatus (strm) == 0x0) {  											File.WriteAllBytes (To + newfilename' ReadStatus (strm' int.Parse (filelength)));  											if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage))  												if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTEOFTMessage)) {  													ReplyStatus (strm' BTZomBFingerFactory.BTRecievedMessage);  													break;  												}  										}  									}  								}  							}  						}  						break;  					case "Sign Off":  						if (DataRecieved != null)  							DataRecieved (this' new EventArgs ());  						ReplyStatus (strm' BTZomBFingerFactory.BTByeMessage);  						goto end;  					case "No Files":  						//Ok' I don't care' continue  						break;  					default:  						//TODO: AHHH!  						break;  					}  				}  			}  		}  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,BTFinger,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,ZomBworker,The following statement contains a magic number: if (BS (ReadStatus (strm' 10)) == BS (BTZomBFingerFactory.BTHelloMessage))//if good Verify   {  	if (ReadStatus (strm) == ((byte)(TeamNumber >> 8)) && ReadStatus (strm) == (byte)TeamNumber)//team # validate  	 {  		ReplyStatus (strm' BTZomBFingerFactory.BTVerifyMessage' ((byte)(TeamNumber >> 8))' (byte)TeamNumber);  		if (DataRecieving != null)  			DataRecieving (this' new EventArgs ());  		if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTGoodVerifyMessage)) {  			while (true) {  				switch (ByteArrayToString (ReadStatus (strm' 8))) {  				case "SendFile":  					if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTNameFileMessage)) {  						if (ReadStatus (strm) == 0x0) {  							string newfilename = ByteArrayToString (ReadStatus (strm' (int)ReadStatus (strm)));  							if (ReadStatus (strm) == 0x0) {  								ReplyStatus (strm' BTZomBFingerFactory.BTAcceptFileMessage);  								if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage)) {  									string filelength = "";  									byte last = ReadStatus (strm);  									while (last != 0xFF) {  										filelength += (char)last;  										last = ReadStatus (strm);  									}  									if (ReadStatus (strm) == 0x0 && ReadStatus (strm) == 0xff && ReadStatus (strm) == 0x0) {  										File.WriteAllBytes (To + newfilename' ReadStatus (strm' int.Parse (filelength)));  										if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage))  											if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTEOFTMessage)) {  												ReplyStatus (strm' BTZomBFingerFactory.BTRecievedMessage);  												break;  											}  									}  								}  							}  						}  					}  					break;  				case "Sign Off":  					if (DataRecieved != null)  						DataRecieved (this' new EventArgs ());  					ReplyStatus (strm' BTZomBFingerFactory.BTByeMessage);  					goto end;  				case "No Files":  					//Ok' I don't care' continue  					break;  				default:  					//TODO: AHHH!  					break;  				}  			}  		}  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,BTFinger,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,ZomBworker,The following statement contains a magic number: if (BS (ReadStatus (strm' 10)) == BS (BTZomBFingerFactory.BTHelloMessage))//if good Verify   {  	if (ReadStatus (strm) == ((byte)(TeamNumber >> 8)) && ReadStatus (strm) == (byte)TeamNumber)//team # validate  	 {  		ReplyStatus (strm' BTZomBFingerFactory.BTVerifyMessage' ((byte)(TeamNumber >> 8))' (byte)TeamNumber);  		if (DataRecieving != null)  			DataRecieving (this' new EventArgs ());  		if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTGoodVerifyMessage)) {  			while (true) {  				switch (ByteArrayToString (ReadStatus (strm' 8))) {  				case "SendFile":  					if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTNameFileMessage)) {  						if (ReadStatus (strm) == 0x0) {  							string newfilename = ByteArrayToString (ReadStatus (strm' (int)ReadStatus (strm)));  							if (ReadStatus (strm) == 0x0) {  								ReplyStatus (strm' BTZomBFingerFactory.BTAcceptFileMessage);  								if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage)) {  									string filelength = "";  									byte last = ReadStatus (strm);  									while (last != 0xFF) {  										filelength += (char)last;  										last = ReadStatus (strm);  									}  									if (ReadStatus (strm) == 0x0 && ReadStatus (strm) == 0xff && ReadStatus (strm) == 0x0) {  										File.WriteAllBytes (To + newfilename' ReadStatus (strm' int.Parse (filelength)));  										if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage))  											if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTEOFTMessage)) {  												ReplyStatus (strm' BTZomBFingerFactory.BTRecievedMessage);  												break;  											}  									}  								}  							}  						}  					}  					break;  				case "Sign Off":  					if (DataRecieved != null)  						DataRecieved (this' new EventArgs ());  					ReplyStatus (strm' BTZomBFingerFactory.BTByeMessage);  					goto end;  				case "No Files":  					//Ok' I don't care' continue  					break;  				default:  					//TODO: AHHH!  					break;  				}  			}  		}  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,BTFinger,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,ZomBworker,The following statement contains a magic number: if (BS (ReadStatus (strm' 10)) == BS (BTZomBFingerFactory.BTHelloMessage))//if good Verify   {  	if (ReadStatus (strm) == ((byte)(TeamNumber >> 8)) && ReadStatus (strm) == (byte)TeamNumber)//team # validate  	 {  		ReplyStatus (strm' BTZomBFingerFactory.BTVerifyMessage' ((byte)(TeamNumber >> 8))' (byte)TeamNumber);  		if (DataRecieving != null)  			DataRecieving (this' new EventArgs ());  		if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTGoodVerifyMessage)) {  			while (true) {  				switch (ByteArrayToString (ReadStatus (strm' 8))) {  				case "SendFile":  					if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTNameFileMessage)) {  						if (ReadStatus (strm) == 0x0) {  							string newfilename = ByteArrayToString (ReadStatus (strm' (int)ReadStatus (strm)));  							if (ReadStatus (strm) == 0x0) {  								ReplyStatus (strm' BTZomBFingerFactory.BTAcceptFileMessage);  								if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage)) {  									string filelength = "";  									byte last = ReadStatus (strm);  									while (last != 0xFF) {  										filelength += (char)last;  										last = ReadStatus (strm);  									}  									if (ReadStatus (strm) == 0x0 && ReadStatus (strm) == 0xff && ReadStatus (strm) == 0x0) {  										File.WriteAllBytes (To + newfilename' ReadStatus (strm' int.Parse (filelength)));  										if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage))  											if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTEOFTMessage)) {  												ReplyStatus (strm' BTZomBFingerFactory.BTRecievedMessage);  												break;  											}  									}  								}  							}  						}  					}  					break;  				case "Sign Off":  					if (DataRecieved != null)  						DataRecieved (this' new EventArgs ());  					ReplyStatus (strm' BTZomBFingerFactory.BTByeMessage);  					goto end;  				case "No Files":  					//Ok' I don't care' continue  					break;  				default:  					//TODO: AHHH!  					break;  				}  			}  		}  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,BTFinger,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,ZomBworker,The following statement contains a magic number: if (BS (ReadStatus (strm' 10)) == BS (BTZomBFingerFactory.BTHelloMessage))//if good Verify   {  	if (ReadStatus (strm) == ((byte)(TeamNumber >> 8)) && ReadStatus (strm) == (byte)TeamNumber)//team # validate  	 {  		ReplyStatus (strm' BTZomBFingerFactory.BTVerifyMessage' ((byte)(TeamNumber >> 8))' (byte)TeamNumber);  		if (DataRecieving != null)  			DataRecieving (this' new EventArgs ());  		if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTGoodVerifyMessage)) {  			while (true) {  				switch (ByteArrayToString (ReadStatus (strm' 8))) {  				case "SendFile":  					if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTNameFileMessage)) {  						if (ReadStatus (strm) == 0x0) {  							string newfilename = ByteArrayToString (ReadStatus (strm' (int)ReadStatus (strm)));  							if (ReadStatus (strm) == 0x0) {  								ReplyStatus (strm' BTZomBFingerFactory.BTAcceptFileMessage);  								if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage)) {  									string filelength = "";  									byte last = ReadStatus (strm);  									while (last != 0xFF) {  										filelength += (char)last;  										last = ReadStatus (strm);  									}  									if (ReadStatus (strm) == 0x0 && ReadStatus (strm) == 0xff && ReadStatus (strm) == 0x0) {  										File.WriteAllBytes (To + newfilename' ReadStatus (strm' int.Parse (filelength)));  										if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage))  											if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTEOFTMessage)) {  												ReplyStatus (strm' BTZomBFingerFactory.BTRecievedMessage);  												break;  											}  									}  								}  							}  						}  					}  					break;  				case "Sign Off":  					if (DataRecieved != null)  						DataRecieved (this' new EventArgs ());  					ReplyStatus (strm' BTZomBFingerFactory.BTByeMessage);  					goto end;  				case "No Files":  					//Ok' I don't care' continue  					break;  				default:  					//TODO: AHHH!  					break;  				}  			}  		}  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,BTFinger,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,ZomBworker,The following statement contains a magic number: if (BS (ReadStatus (strm' 10)) == BS (BTZomBFingerFactory.BTHelloMessage))//if good Verify   {  	if (ReadStatus (strm) == ((byte)(TeamNumber >> 8)) && ReadStatus (strm) == (byte)TeamNumber)//team # validate  	 {  		ReplyStatus (strm' BTZomBFingerFactory.BTVerifyMessage' ((byte)(TeamNumber >> 8))' (byte)TeamNumber);  		if (DataRecieving != null)  			DataRecieving (this' new EventArgs ());  		if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTGoodVerifyMessage)) {  			while (true) {  				switch (ByteArrayToString (ReadStatus (strm' 8))) {  				case "SendFile":  					if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTNameFileMessage)) {  						if (ReadStatus (strm) == 0x0) {  							string newfilename = ByteArrayToString (ReadStatus (strm' (int)ReadStatus (strm)));  							if (ReadStatus (strm) == 0x0) {  								ReplyStatus (strm' BTZomBFingerFactory.BTAcceptFileMessage);  								if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage)) {  									string filelength = "";  									byte last = ReadStatus (strm);  									while (last != 0xFF) {  										filelength += (char)last;  										last = ReadStatus (strm);  									}  									if (ReadStatus (strm) == 0x0 && ReadStatus (strm) == 0xff && ReadStatus (strm) == 0x0) {  										File.WriteAllBytes (To + newfilename' ReadStatus (strm' int.Parse (filelength)));  										if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage))  											if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTEOFTMessage)) {  												ReplyStatus (strm' BTZomBFingerFactory.BTRecievedMessage);  												break;  											}  									}  								}  							}  						}  					}  					break;  				case "Sign Off":  					if (DataRecieved != null)  						DataRecieved (this' new EventArgs ());  					ReplyStatus (strm' BTZomBFingerFactory.BTByeMessage);  					goto end;  				case "No Files":  					//Ok' I don't care' continue  					break;  				default:  					//TODO: AHHH!  					break;  				}  			}  		}  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,BTFinger,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,ZomBworker,The following statement contains a magic number: if (BS (ReadStatus (strm' 10)) == BS (BTZomBFingerFactory.BTHelloMessage))//if good Verify   {  	if (ReadStatus (strm) == ((byte)(TeamNumber >> 8)) && ReadStatus (strm) == (byte)TeamNumber)//team # validate  	 {  		ReplyStatus (strm' BTZomBFingerFactory.BTVerifyMessage' ((byte)(TeamNumber >> 8))' (byte)TeamNumber);  		if (DataRecieving != null)  			DataRecieving (this' new EventArgs ());  		if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTGoodVerifyMessage)) {  			while (true) {  				switch (ByteArrayToString (ReadStatus (strm' 8))) {  				case "SendFile":  					if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTNameFileMessage)) {  						if (ReadStatus (strm) == 0x0) {  							string newfilename = ByteArrayToString (ReadStatus (strm' (int)ReadStatus (strm)));  							if (ReadStatus (strm) == 0x0) {  								ReplyStatus (strm' BTZomBFingerFactory.BTAcceptFileMessage);  								if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage)) {  									string filelength = "";  									byte last = ReadStatus (strm);  									while (last != 0xFF) {  										filelength += (char)last;  										last = ReadStatus (strm);  									}  									if (ReadStatus (strm) == 0x0 && ReadStatus (strm) == 0xff && ReadStatus (strm) == 0x0) {  										File.WriteAllBytes (To + newfilename' ReadStatus (strm' int.Parse (filelength)));  										if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage))  											if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTEOFTMessage)) {  												ReplyStatus (strm' BTZomBFingerFactory.BTRecievedMessage);  												break;  											}  									}  								}  							}  						}  					}  					break;  				case "Sign Off":  					if (DataRecieved != null)  						DataRecieved (this' new EventArgs ());  					ReplyStatus (strm' BTZomBFingerFactory.BTByeMessage);  					goto end;  				case "No Files":  					//Ok' I don't care' continue  					break;  				default:  					//TODO: AHHH!  					break;  				}  			}  		}  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,BTFinger,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,ZomBworker,The following statement contains a magic number: if (BS (ReadStatus (strm' 10)) == BS (BTZomBFingerFactory.BTHelloMessage))//if good Verify   {  	if (ReadStatus (strm) == ((byte)(TeamNumber >> 8)) && ReadStatus (strm) == (byte)TeamNumber)//team # validate  	 {  		ReplyStatus (strm' BTZomBFingerFactory.BTVerifyMessage' ((byte)(TeamNumber >> 8))' (byte)TeamNumber);  		if (DataRecieving != null)  			DataRecieving (this' new EventArgs ());  		if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTGoodVerifyMessage)) {  			while (true) {  				switch (ByteArrayToString (ReadStatus (strm' 8))) {  				case "SendFile":  					if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTNameFileMessage)) {  						if (ReadStatus (strm) == 0x0) {  							string newfilename = ByteArrayToString (ReadStatus (strm' (int)ReadStatus (strm)));  							if (ReadStatus (strm) == 0x0) {  								ReplyStatus (strm' BTZomBFingerFactory.BTAcceptFileMessage);  								if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage)) {  									string filelength = "";  									byte last = ReadStatus (strm);  									while (last != 0xFF) {  										filelength += (char)last;  										last = ReadStatus (strm);  									}  									if (ReadStatus (strm) == 0x0 && ReadStatus (strm) == 0xff && ReadStatus (strm) == 0x0) {  										File.WriteAllBytes (To + newfilename' ReadStatus (strm' int.Parse (filelength)));  										if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage))  											if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTEOFTMessage)) {  												ReplyStatus (strm' BTZomBFingerFactory.BTRecievedMessage);  												break;  											}  									}  								}  							}  						}  					}  					break;  				case "Sign Off":  					if (DataRecieved != null)  						DataRecieved (this' new EventArgs ());  					ReplyStatus (strm' BTZomBFingerFactory.BTByeMessage);  					goto end;  				case "No Files":  					//Ok' I don't care' continue  					break;  				default:  					//TODO: AHHH!  					break;  				}  			}  		}  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,BTFinger,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,ZomBworker,The following statement contains a magic number: if (BS (ReadStatus (strm' 10)) == BS (BTZomBFingerFactory.BTHelloMessage))//if good Verify   {  	if (ReadStatus (strm) == ((byte)(TeamNumber >> 8)) && ReadStatus (strm) == (byte)TeamNumber)//team # validate  	 {  		ReplyStatus (strm' BTZomBFingerFactory.BTVerifyMessage' ((byte)(TeamNumber >> 8))' (byte)TeamNumber);  		if (DataRecieving != null)  			DataRecieving (this' new EventArgs ());  		if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTGoodVerifyMessage)) {  			while (true) {  				switch (ByteArrayToString (ReadStatus (strm' 8))) {  				case "SendFile":  					if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTNameFileMessage)) {  						if (ReadStatus (strm) == 0x0) {  							string newfilename = ByteArrayToString (ReadStatus (strm' (int)ReadStatus (strm)));  							if (ReadStatus (strm) == 0x0) {  								ReplyStatus (strm' BTZomBFingerFactory.BTAcceptFileMessage);  								if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage)) {  									string filelength = "";  									byte last = ReadStatus (strm);  									while (last != 0xFF) {  										filelength += (char)last;  										last = ReadStatus (strm);  									}  									if (ReadStatus (strm) == 0x0 && ReadStatus (strm) == 0xff && ReadStatus (strm) == 0x0) {  										File.WriteAllBytes (To + newfilename' ReadStatus (strm' int.Parse (filelength)));  										if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage))  											if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTEOFTMessage)) {  												ReplyStatus (strm' BTZomBFingerFactory.BTRecievedMessage);  												break;  											}  									}  								}  							}  						}  					}  					break;  				case "Sign Off":  					if (DataRecieved != null)  						DataRecieved (this' new EventArgs ());  					ReplyStatus (strm' BTZomBFingerFactory.BTByeMessage);  					goto end;  				case "No Files":  					//Ok' I don't care' continue  					break;  				default:  					//TODO: AHHH!  					break;  				}  			}  		}  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,BTFinger,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,ZomBworker,The following statement contains a magic number: if (BS (ReadStatus (strm' 10)) == BS (BTZomBFingerFactory.BTHelloMessage))//if good Verify   {  	if (ReadStatus (strm) == ((byte)(TeamNumber >> 8)) && ReadStatus (strm) == (byte)TeamNumber)//team # validate  	 {  		ReplyStatus (strm' BTZomBFingerFactory.BTVerifyMessage' ((byte)(TeamNumber >> 8))' (byte)TeamNumber);  		if (DataRecieving != null)  			DataRecieving (this' new EventArgs ());  		if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTGoodVerifyMessage)) {  			while (true) {  				switch (ByteArrayToString (ReadStatus (strm' 8))) {  				case "SendFile":  					if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTNameFileMessage)) {  						if (ReadStatus (strm) == 0x0) {  							string newfilename = ByteArrayToString (ReadStatus (strm' (int)ReadStatus (strm)));  							if (ReadStatus (strm) == 0x0) {  								ReplyStatus (strm' BTZomBFingerFactory.BTAcceptFileMessage);  								if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage)) {  									string filelength = "";  									byte last = ReadStatus (strm);  									while (last != 0xFF) {  										filelength += (char)last;  										last = ReadStatus (strm);  									}  									if (ReadStatus (strm) == 0x0 && ReadStatus (strm) == 0xff && ReadStatus (strm) == 0x0) {  										File.WriteAllBytes (To + newfilename' ReadStatus (strm' int.Parse (filelength)));  										if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage))  											if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTEOFTMessage)) {  												ReplyStatus (strm' BTZomBFingerFactory.BTRecievedMessage);  												break;  											}  									}  								}  							}  						}  					}  					break;  				case "Sign Off":  					if (DataRecieved != null)  						DataRecieved (this' new EventArgs ());  					ReplyStatus (strm' BTZomBFingerFactory.BTByeMessage);  					goto end;  				case "No Files":  					//Ok' I don't care' continue  					break;  				default:  					//TODO: AHHH!  					break;  				}  			}  		}  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,BTFinger,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,ZomBworker,The following statement contains a magic number: if (ReadStatus (strm) == ((byte)(TeamNumber >> 8)) && ReadStatus (strm) == (byte)TeamNumber)//team # validate   {  	ReplyStatus (strm' BTZomBFingerFactory.BTVerifyMessage' ((byte)(TeamNumber >> 8))' (byte)TeamNumber);  	if (DataRecieving != null)  		DataRecieving (this' new EventArgs ());  	if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTGoodVerifyMessage)) {  		while (true) {  			switch (ByteArrayToString (ReadStatus (strm' 8))) {  			case "SendFile":  				if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTNameFileMessage)) {  					if (ReadStatus (strm) == 0x0) {  						string newfilename = ByteArrayToString (ReadStatus (strm' (int)ReadStatus (strm)));  						if (ReadStatus (strm) == 0x0) {  							ReplyStatus (strm' BTZomBFingerFactory.BTAcceptFileMessage);  							if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage)) {  								string filelength = "";  								byte last = ReadStatus (strm);  								while (last != 0xFF) {  									filelength += (char)last;  									last = ReadStatus (strm);  								}  								if (ReadStatus (strm) == 0x0 && ReadStatus (strm) == 0xff && ReadStatus (strm) == 0x0) {  									File.WriteAllBytes (To + newfilename' ReadStatus (strm' int.Parse (filelength)));  									if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage))  										if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTEOFTMessage)) {  											ReplyStatus (strm' BTZomBFingerFactory.BTRecievedMessage);  											break;  										}  								}  							}  						}  					}  				}  				break;  			case "Sign Off":  				if (DataRecieved != null)  					DataRecieved (this' new EventArgs ());  				ReplyStatus (strm' BTZomBFingerFactory.BTByeMessage);  				goto end;  			case "No Files":  				//Ok' I don't care' continue  				break;  			default:  				//TODO: AHHH!  				break;  			}  		}  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,BTFinger,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,ZomBworker,The following statement contains a magic number: if (ReadStatus (strm) == ((byte)(TeamNumber >> 8)) && ReadStatus (strm) == (byte)TeamNumber)//team # validate   {  	ReplyStatus (strm' BTZomBFingerFactory.BTVerifyMessage' ((byte)(TeamNumber >> 8))' (byte)TeamNumber);  	if (DataRecieving != null)  		DataRecieving (this' new EventArgs ());  	if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTGoodVerifyMessage)) {  		while (true) {  			switch (ByteArrayToString (ReadStatus (strm' 8))) {  			case "SendFile":  				if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTNameFileMessage)) {  					if (ReadStatus (strm) == 0x0) {  						string newfilename = ByteArrayToString (ReadStatus (strm' (int)ReadStatus (strm)));  						if (ReadStatus (strm) == 0x0) {  							ReplyStatus (strm' BTZomBFingerFactory.BTAcceptFileMessage);  							if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage)) {  								string filelength = "";  								byte last = ReadStatus (strm);  								while (last != 0xFF) {  									filelength += (char)last;  									last = ReadStatus (strm);  								}  								if (ReadStatus (strm) == 0x0 && ReadStatus (strm) == 0xff && ReadStatus (strm) == 0x0) {  									File.WriteAllBytes (To + newfilename' ReadStatus (strm' int.Parse (filelength)));  									if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage))  										if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTEOFTMessage)) {  											ReplyStatus (strm' BTZomBFingerFactory.BTRecievedMessage);  											break;  										}  								}  							}  						}  					}  				}  				break;  			case "Sign Off":  				if (DataRecieved != null)  					DataRecieved (this' new EventArgs ());  				ReplyStatus (strm' BTZomBFingerFactory.BTByeMessage);  				goto end;  			case "No Files":  				//Ok' I don't care' continue  				break;  			default:  				//TODO: AHHH!  				break;  			}  		}  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,BTFinger,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,ZomBworker,The following statement contains a magic number: if (ReadStatus (strm) == ((byte)(TeamNumber >> 8)) && ReadStatus (strm) == (byte)TeamNumber)//team # validate   {  	ReplyStatus (strm' BTZomBFingerFactory.BTVerifyMessage' ((byte)(TeamNumber >> 8))' (byte)TeamNumber);  	if (DataRecieving != null)  		DataRecieving (this' new EventArgs ());  	if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTGoodVerifyMessage)) {  		while (true) {  			switch (ByteArrayToString (ReadStatus (strm' 8))) {  			case "SendFile":  				if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTNameFileMessage)) {  					if (ReadStatus (strm) == 0x0) {  						string newfilename = ByteArrayToString (ReadStatus (strm' (int)ReadStatus (strm)));  						if (ReadStatus (strm) == 0x0) {  							ReplyStatus (strm' BTZomBFingerFactory.BTAcceptFileMessage);  							if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage)) {  								string filelength = "";  								byte last = ReadStatus (strm);  								while (last != 0xFF) {  									filelength += (char)last;  									last = ReadStatus (strm);  								}  								if (ReadStatus (strm) == 0x0 && ReadStatus (strm) == 0xff && ReadStatus (strm) == 0x0) {  									File.WriteAllBytes (To + newfilename' ReadStatus (strm' int.Parse (filelength)));  									if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage))  										if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTEOFTMessage)) {  											ReplyStatus (strm' BTZomBFingerFactory.BTRecievedMessage);  											break;  										}  								}  							}  						}  					}  				}  				break;  			case "Sign Off":  				if (DataRecieved != null)  					DataRecieved (this' new EventArgs ());  				ReplyStatus (strm' BTZomBFingerFactory.BTByeMessage);  				goto end;  			case "No Files":  				//Ok' I don't care' continue  				break;  			default:  				//TODO: AHHH!  				break;  			}  		}  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,BTFinger,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,ZomBworker,The following statement contains a magic number: if (ReadStatus (strm) == ((byte)(TeamNumber >> 8)) && ReadStatus (strm) == (byte)TeamNumber)//team # validate   {  	ReplyStatus (strm' BTZomBFingerFactory.BTVerifyMessage' ((byte)(TeamNumber >> 8))' (byte)TeamNumber);  	if (DataRecieving != null)  		DataRecieving (this' new EventArgs ());  	if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTGoodVerifyMessage)) {  		while (true) {  			switch (ByteArrayToString (ReadStatus (strm' 8))) {  			case "SendFile":  				if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTNameFileMessage)) {  					if (ReadStatus (strm) == 0x0) {  						string newfilename = ByteArrayToString (ReadStatus (strm' (int)ReadStatus (strm)));  						if (ReadStatus (strm) == 0x0) {  							ReplyStatus (strm' BTZomBFingerFactory.BTAcceptFileMessage);  							if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage)) {  								string filelength = "";  								byte last = ReadStatus (strm);  								while (last != 0xFF) {  									filelength += (char)last;  									last = ReadStatus (strm);  								}  								if (ReadStatus (strm) == 0x0 && ReadStatus (strm) == 0xff && ReadStatus (strm) == 0x0) {  									File.WriteAllBytes (To + newfilename' ReadStatus (strm' int.Parse (filelength)));  									if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage))  										if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTEOFTMessage)) {  											ReplyStatus (strm' BTZomBFingerFactory.BTRecievedMessage);  											break;  										}  								}  							}  						}  					}  				}  				break;  			case "Sign Off":  				if (DataRecieved != null)  					DataRecieved (this' new EventArgs ());  				ReplyStatus (strm' BTZomBFingerFactory.BTByeMessage);  				goto end;  			case "No Files":  				//Ok' I don't care' continue  				break;  			default:  				//TODO: AHHH!  				break;  			}  		}  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,BTFinger,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,ZomBworker,The following statement contains a magic number: if (ReadStatus (strm) == ((byte)(TeamNumber >> 8)) && ReadStatus (strm) == (byte)TeamNumber)//team # validate   {  	ReplyStatus (strm' BTZomBFingerFactory.BTVerifyMessage' ((byte)(TeamNumber >> 8))' (byte)TeamNumber);  	if (DataRecieving != null)  		DataRecieving (this' new EventArgs ());  	if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTGoodVerifyMessage)) {  		while (true) {  			switch (ByteArrayToString (ReadStatus (strm' 8))) {  			case "SendFile":  				if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTNameFileMessage)) {  					if (ReadStatus (strm) == 0x0) {  						string newfilename = ByteArrayToString (ReadStatus (strm' (int)ReadStatus (strm)));  						if (ReadStatus (strm) == 0x0) {  							ReplyStatus (strm' BTZomBFingerFactory.BTAcceptFileMessage);  							if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage)) {  								string filelength = "";  								byte last = ReadStatus (strm);  								while (last != 0xFF) {  									filelength += (char)last;  									last = ReadStatus (strm);  								}  								if (ReadStatus (strm) == 0x0 && ReadStatus (strm) == 0xff && ReadStatus (strm) == 0x0) {  									File.WriteAllBytes (To + newfilename' ReadStatus (strm' int.Parse (filelength)));  									if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage))  										if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTEOFTMessage)) {  											ReplyStatus (strm' BTZomBFingerFactory.BTRecievedMessage);  											break;  										}  								}  							}  						}  					}  				}  				break;  			case "Sign Off":  				if (DataRecieved != null)  					DataRecieved (this' new EventArgs ());  				ReplyStatus (strm' BTZomBFingerFactory.BTByeMessage);  				goto end;  			case "No Files":  				//Ok' I don't care' continue  				break;  			default:  				//TODO: AHHH!  				break;  			}  		}  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,BTFinger,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,ZomBworker,The following statement contains a magic number: if (ReadStatus (strm) == ((byte)(TeamNumber >> 8)) && ReadStatus (strm) == (byte)TeamNumber)//team # validate   {  	ReplyStatus (strm' BTZomBFingerFactory.BTVerifyMessage' ((byte)(TeamNumber >> 8))' (byte)TeamNumber);  	if (DataRecieving != null)  		DataRecieving (this' new EventArgs ());  	if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTGoodVerifyMessage)) {  		while (true) {  			switch (ByteArrayToString (ReadStatus (strm' 8))) {  			case "SendFile":  				if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTNameFileMessage)) {  					if (ReadStatus (strm) == 0x0) {  						string newfilename = ByteArrayToString (ReadStatus (strm' (int)ReadStatus (strm)));  						if (ReadStatus (strm) == 0x0) {  							ReplyStatus (strm' BTZomBFingerFactory.BTAcceptFileMessage);  							if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage)) {  								string filelength = "";  								byte last = ReadStatus (strm);  								while (last != 0xFF) {  									filelength += (char)last;  									last = ReadStatus (strm);  								}  								if (ReadStatus (strm) == 0x0 && ReadStatus (strm) == 0xff && ReadStatus (strm) == 0x0) {  									File.WriteAllBytes (To + newfilename' ReadStatus (strm' int.Parse (filelength)));  									if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage))  										if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTEOFTMessage)) {  											ReplyStatus (strm' BTZomBFingerFactory.BTRecievedMessage);  											break;  										}  								}  							}  						}  					}  				}  				break;  			case "Sign Off":  				if (DataRecieved != null)  					DataRecieved (this' new EventArgs ());  				ReplyStatus (strm' BTZomBFingerFactory.BTByeMessage);  				goto end;  			case "No Files":  				//Ok' I don't care' continue  				break;  			default:  				//TODO: AHHH!  				break;  			}  		}  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,BTFinger,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,ZomBworker,The following statement contains a magic number: if (ReadStatus (strm) == ((byte)(TeamNumber >> 8)) && ReadStatus (strm) == (byte)TeamNumber)//team # validate   {  	ReplyStatus (strm' BTZomBFingerFactory.BTVerifyMessage' ((byte)(TeamNumber >> 8))' (byte)TeamNumber);  	if (DataRecieving != null)  		DataRecieving (this' new EventArgs ());  	if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTGoodVerifyMessage)) {  		while (true) {  			switch (ByteArrayToString (ReadStatus (strm' 8))) {  			case "SendFile":  				if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTNameFileMessage)) {  					if (ReadStatus (strm) == 0x0) {  						string newfilename = ByteArrayToString (ReadStatus (strm' (int)ReadStatus (strm)));  						if (ReadStatus (strm) == 0x0) {  							ReplyStatus (strm' BTZomBFingerFactory.BTAcceptFileMessage);  							if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage)) {  								string filelength = "";  								byte last = ReadStatus (strm);  								while (last != 0xFF) {  									filelength += (char)last;  									last = ReadStatus (strm);  								}  								if (ReadStatus (strm) == 0x0 && ReadStatus (strm) == 0xff && ReadStatus (strm) == 0x0) {  									File.WriteAllBytes (To + newfilename' ReadStatus (strm' int.Parse (filelength)));  									if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage))  										if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTEOFTMessage)) {  											ReplyStatus (strm' BTZomBFingerFactory.BTRecievedMessage);  											break;  										}  								}  							}  						}  					}  				}  				break;  			case "Sign Off":  				if (DataRecieved != null)  					DataRecieved (this' new EventArgs ());  				ReplyStatus (strm' BTZomBFingerFactory.BTByeMessage);  				goto end;  			case "No Files":  				//Ok' I don't care' continue  				break;  			default:  				//TODO: AHHH!  				break;  			}  		}  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,BTFinger,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,ZomBworker,The following statement contains a magic number: if (ReadStatus (strm) == ((byte)(TeamNumber >> 8)) && ReadStatus (strm) == (byte)TeamNumber)//team # validate   {  	ReplyStatus (strm' BTZomBFingerFactory.BTVerifyMessage' ((byte)(TeamNumber >> 8))' (byte)TeamNumber);  	if (DataRecieving != null)  		DataRecieving (this' new EventArgs ());  	if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTGoodVerifyMessage)) {  		while (true) {  			switch (ByteArrayToString (ReadStatus (strm' 8))) {  			case "SendFile":  				if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTNameFileMessage)) {  					if (ReadStatus (strm) == 0x0) {  						string newfilename = ByteArrayToString (ReadStatus (strm' (int)ReadStatus (strm)));  						if (ReadStatus (strm) == 0x0) {  							ReplyStatus (strm' BTZomBFingerFactory.BTAcceptFileMessage);  							if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage)) {  								string filelength = "";  								byte last = ReadStatus (strm);  								while (last != 0xFF) {  									filelength += (char)last;  									last = ReadStatus (strm);  								}  								if (ReadStatus (strm) == 0x0 && ReadStatus (strm) == 0xff && ReadStatus (strm) == 0x0) {  									File.WriteAllBytes (To + newfilename' ReadStatus (strm' int.Parse (filelength)));  									if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage))  										if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTEOFTMessage)) {  											ReplyStatus (strm' BTZomBFingerFactory.BTRecievedMessage);  											break;  										}  								}  							}  						}  					}  				}  				break;  			case "Sign Off":  				if (DataRecieved != null)  					DataRecieved (this' new EventArgs ());  				ReplyStatus (strm' BTZomBFingerFactory.BTByeMessage);  				goto end;  			case "No Files":  				//Ok' I don't care' continue  				break;  			default:  				//TODO: AHHH!  				break;  			}  		}  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,BTFinger,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,ZomBworker,The following statement contains a magic number: ReplyStatus (strm' BTZomBFingerFactory.BTVerifyMessage' ((byte)(TeamNumber >> 8))' (byte)TeamNumber);  
Magic Number,System451.Communication.Dashboard.Utils,BTFinger,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,ZomBworker,The following statement contains a magic number: if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTGoodVerifyMessage)) {  	while (true) {  		switch (ByteArrayToString (ReadStatus (strm' 8))) {  		case "SendFile":  			if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTNameFileMessage)) {  				if (ReadStatus (strm) == 0x0) {  					string newfilename = ByteArrayToString (ReadStatus (strm' (int)ReadStatus (strm)));  					if (ReadStatus (strm) == 0x0) {  						ReplyStatus (strm' BTZomBFingerFactory.BTAcceptFileMessage);  						if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage)) {  							string filelength = "";  							byte last = ReadStatus (strm);  							while (last != 0xFF) {  								filelength += (char)last;  								last = ReadStatus (strm);  							}  							if (ReadStatus (strm) == 0x0 && ReadStatus (strm) == 0xff && ReadStatus (strm) == 0x0) {  								File.WriteAllBytes (To + newfilename' ReadStatus (strm' int.Parse (filelength)));  								if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage))  									if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTEOFTMessage)) {  										ReplyStatus (strm' BTZomBFingerFactory.BTRecievedMessage);  										break;  									}  							}  						}  					}  				}  			}  			break;  		case "Sign Off":  			if (DataRecieved != null)  				DataRecieved (this' new EventArgs ());  			ReplyStatus (strm' BTZomBFingerFactory.BTByeMessage);  			goto end;  		case "No Files":  			//Ok' I don't care' continue  			break;  		default:  			//TODO: AHHH!  			break;  		}  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,BTFinger,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,ZomBworker,The following statement contains a magic number: if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTGoodVerifyMessage)) {  	while (true) {  		switch (ByteArrayToString (ReadStatus (strm' 8))) {  		case "SendFile":  			if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTNameFileMessage)) {  				if (ReadStatus (strm) == 0x0) {  					string newfilename = ByteArrayToString (ReadStatus (strm' (int)ReadStatus (strm)));  					if (ReadStatus (strm) == 0x0) {  						ReplyStatus (strm' BTZomBFingerFactory.BTAcceptFileMessage);  						if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage)) {  							string filelength = "";  							byte last = ReadStatus (strm);  							while (last != 0xFF) {  								filelength += (char)last;  								last = ReadStatus (strm);  							}  							if (ReadStatus (strm) == 0x0 && ReadStatus (strm) == 0xff && ReadStatus (strm) == 0x0) {  								File.WriteAllBytes (To + newfilename' ReadStatus (strm' int.Parse (filelength)));  								if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage))  									if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTEOFTMessage)) {  										ReplyStatus (strm' BTZomBFingerFactory.BTRecievedMessage);  										break;  									}  							}  						}  					}  				}  			}  			break;  		case "Sign Off":  			if (DataRecieved != null)  				DataRecieved (this' new EventArgs ());  			ReplyStatus (strm' BTZomBFingerFactory.BTByeMessage);  			goto end;  		case "No Files":  			//Ok' I don't care' continue  			break;  		default:  			//TODO: AHHH!  			break;  		}  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,BTFinger,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,ZomBworker,The following statement contains a magic number: if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTGoodVerifyMessage)) {  	while (true) {  		switch (ByteArrayToString (ReadStatus (strm' 8))) {  		case "SendFile":  			if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTNameFileMessage)) {  				if (ReadStatus (strm) == 0x0) {  					string newfilename = ByteArrayToString (ReadStatus (strm' (int)ReadStatus (strm)));  					if (ReadStatus (strm) == 0x0) {  						ReplyStatus (strm' BTZomBFingerFactory.BTAcceptFileMessage);  						if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage)) {  							string filelength = "";  							byte last = ReadStatus (strm);  							while (last != 0xFF) {  								filelength += (char)last;  								last = ReadStatus (strm);  							}  							if (ReadStatus (strm) == 0x0 && ReadStatus (strm) == 0xff && ReadStatus (strm) == 0x0) {  								File.WriteAllBytes (To + newfilename' ReadStatus (strm' int.Parse (filelength)));  								if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage))  									if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTEOFTMessage)) {  										ReplyStatus (strm' BTZomBFingerFactory.BTRecievedMessage);  										break;  									}  							}  						}  					}  				}  			}  			break;  		case "Sign Off":  			if (DataRecieved != null)  				DataRecieved (this' new EventArgs ());  			ReplyStatus (strm' BTZomBFingerFactory.BTByeMessage);  			goto end;  		case "No Files":  			//Ok' I don't care' continue  			break;  		default:  			//TODO: AHHH!  			break;  		}  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,BTFinger,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,ZomBworker,The following statement contains a magic number: if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTGoodVerifyMessage)) {  	while (true) {  		switch (ByteArrayToString (ReadStatus (strm' 8))) {  		case "SendFile":  			if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTNameFileMessage)) {  				if (ReadStatus (strm) == 0x0) {  					string newfilename = ByteArrayToString (ReadStatus (strm' (int)ReadStatus (strm)));  					if (ReadStatus (strm) == 0x0) {  						ReplyStatus (strm' BTZomBFingerFactory.BTAcceptFileMessage);  						if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage)) {  							string filelength = "";  							byte last = ReadStatus (strm);  							while (last != 0xFF) {  								filelength += (char)last;  								last = ReadStatus (strm);  							}  							if (ReadStatus (strm) == 0x0 && ReadStatus (strm) == 0xff && ReadStatus (strm) == 0x0) {  								File.WriteAllBytes (To + newfilename' ReadStatus (strm' int.Parse (filelength)));  								if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage))  									if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTEOFTMessage)) {  										ReplyStatus (strm' BTZomBFingerFactory.BTRecievedMessage);  										break;  									}  							}  						}  					}  				}  			}  			break;  		case "Sign Off":  			if (DataRecieved != null)  				DataRecieved (this' new EventArgs ());  			ReplyStatus (strm' BTZomBFingerFactory.BTByeMessage);  			goto end;  		case "No Files":  			//Ok' I don't care' continue  			break;  		default:  			//TODO: AHHH!  			break;  		}  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,BTFinger,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,ZomBworker,The following statement contains a magic number: if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTGoodVerifyMessage)) {  	while (true) {  		switch (ByteArrayToString (ReadStatus (strm' 8))) {  		case "SendFile":  			if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTNameFileMessage)) {  				if (ReadStatus (strm) == 0x0) {  					string newfilename = ByteArrayToString (ReadStatus (strm' (int)ReadStatus (strm)));  					if (ReadStatus (strm) == 0x0) {  						ReplyStatus (strm' BTZomBFingerFactory.BTAcceptFileMessage);  						if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage)) {  							string filelength = "";  							byte last = ReadStatus (strm);  							while (last != 0xFF) {  								filelength += (char)last;  								last = ReadStatus (strm);  							}  							if (ReadStatus (strm) == 0x0 && ReadStatus (strm) == 0xff && ReadStatus (strm) == 0x0) {  								File.WriteAllBytes (To + newfilename' ReadStatus (strm' int.Parse (filelength)));  								if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage))  									if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTEOFTMessage)) {  										ReplyStatus (strm' BTZomBFingerFactory.BTRecievedMessage);  										break;  									}  							}  						}  					}  				}  			}  			break;  		case "Sign Off":  			if (DataRecieved != null)  				DataRecieved (this' new EventArgs ());  			ReplyStatus (strm' BTZomBFingerFactory.BTByeMessage);  			goto end;  		case "No Files":  			//Ok' I don't care' continue  			break;  		default:  			//TODO: AHHH!  			break;  		}  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,BTFinger,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,ZomBworker,The following statement contains a magic number: if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTGoodVerifyMessage)) {  	while (true) {  		switch (ByteArrayToString (ReadStatus (strm' 8))) {  		case "SendFile":  			if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTNameFileMessage)) {  				if (ReadStatus (strm) == 0x0) {  					string newfilename = ByteArrayToString (ReadStatus (strm' (int)ReadStatus (strm)));  					if (ReadStatus (strm) == 0x0) {  						ReplyStatus (strm' BTZomBFingerFactory.BTAcceptFileMessage);  						if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage)) {  							string filelength = "";  							byte last = ReadStatus (strm);  							while (last != 0xFF) {  								filelength += (char)last;  								last = ReadStatus (strm);  							}  							if (ReadStatus (strm) == 0x0 && ReadStatus (strm) == 0xff && ReadStatus (strm) == 0x0) {  								File.WriteAllBytes (To + newfilename' ReadStatus (strm' int.Parse (filelength)));  								if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage))  									if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTEOFTMessage)) {  										ReplyStatus (strm' BTZomBFingerFactory.BTRecievedMessage);  										break;  									}  							}  						}  					}  				}  			}  			break;  		case "Sign Off":  			if (DataRecieved != null)  				DataRecieved (this' new EventArgs ());  			ReplyStatus (strm' BTZomBFingerFactory.BTByeMessage);  			goto end;  		case "No Files":  			//Ok' I don't care' continue  			break;  		default:  			//TODO: AHHH!  			break;  		}  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,BTFinger,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,ZomBworker,The following statement contains a magic number: while (true) {  	switch (ByteArrayToString (ReadStatus (strm' 8))) {  	case "SendFile":  		if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTNameFileMessage)) {  			if (ReadStatus (strm) == 0x0) {  				string newfilename = ByteArrayToString (ReadStatus (strm' (int)ReadStatus (strm)));  				if (ReadStatus (strm) == 0x0) {  					ReplyStatus (strm' BTZomBFingerFactory.BTAcceptFileMessage);  					if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage)) {  						string filelength = "";  						byte last = ReadStatus (strm);  						while (last != 0xFF) {  							filelength += (char)last;  							last = ReadStatus (strm);  						}  						if (ReadStatus (strm) == 0x0 && ReadStatus (strm) == 0xff && ReadStatus (strm) == 0x0) {  							File.WriteAllBytes (To + newfilename' ReadStatus (strm' int.Parse (filelength)));  							if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage))  								if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTEOFTMessage)) {  									ReplyStatus (strm' BTZomBFingerFactory.BTRecievedMessage);  									break;  								}  						}  					}  				}  			}  		}  		break;  	case "Sign Off":  		if (DataRecieved != null)  			DataRecieved (this' new EventArgs ());  		ReplyStatus (strm' BTZomBFingerFactory.BTByeMessage);  		goto end;  	case "No Files":  		//Ok' I don't care' continue  		break;  	default:  		//TODO: AHHH!  		break;  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,BTFinger,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,ZomBworker,The following statement contains a magic number: while (true) {  	switch (ByteArrayToString (ReadStatus (strm' 8))) {  	case "SendFile":  		if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTNameFileMessage)) {  			if (ReadStatus (strm) == 0x0) {  				string newfilename = ByteArrayToString (ReadStatus (strm' (int)ReadStatus (strm)));  				if (ReadStatus (strm) == 0x0) {  					ReplyStatus (strm' BTZomBFingerFactory.BTAcceptFileMessage);  					if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage)) {  						string filelength = "";  						byte last = ReadStatus (strm);  						while (last != 0xFF) {  							filelength += (char)last;  							last = ReadStatus (strm);  						}  						if (ReadStatus (strm) == 0x0 && ReadStatus (strm) == 0xff && ReadStatus (strm) == 0x0) {  							File.WriteAllBytes (To + newfilename' ReadStatus (strm' int.Parse (filelength)));  							if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage))  								if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTEOFTMessage)) {  									ReplyStatus (strm' BTZomBFingerFactory.BTRecievedMessage);  									break;  								}  						}  					}  				}  			}  		}  		break;  	case "Sign Off":  		if (DataRecieved != null)  			DataRecieved (this' new EventArgs ());  		ReplyStatus (strm' BTZomBFingerFactory.BTByeMessage);  		goto end;  	case "No Files":  		//Ok' I don't care' continue  		break;  	default:  		//TODO: AHHH!  		break;  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,BTFinger,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,ZomBworker,The following statement contains a magic number: while (true) {  	switch (ByteArrayToString (ReadStatus (strm' 8))) {  	case "SendFile":  		if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTNameFileMessage)) {  			if (ReadStatus (strm) == 0x0) {  				string newfilename = ByteArrayToString (ReadStatus (strm' (int)ReadStatus (strm)));  				if (ReadStatus (strm) == 0x0) {  					ReplyStatus (strm' BTZomBFingerFactory.BTAcceptFileMessage);  					if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage)) {  						string filelength = "";  						byte last = ReadStatus (strm);  						while (last != 0xFF) {  							filelength += (char)last;  							last = ReadStatus (strm);  						}  						if (ReadStatus (strm) == 0x0 && ReadStatus (strm) == 0xff && ReadStatus (strm) == 0x0) {  							File.WriteAllBytes (To + newfilename' ReadStatus (strm' int.Parse (filelength)));  							if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage))  								if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTEOFTMessage)) {  									ReplyStatus (strm' BTZomBFingerFactory.BTRecievedMessage);  									break;  								}  						}  					}  				}  			}  		}  		break;  	case "Sign Off":  		if (DataRecieved != null)  			DataRecieved (this' new EventArgs ());  		ReplyStatus (strm' BTZomBFingerFactory.BTByeMessage);  		goto end;  	case "No Files":  		//Ok' I don't care' continue  		break;  	default:  		//TODO: AHHH!  		break;  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,BTFinger,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,ZomBworker,The following statement contains a magic number: while (true) {  	switch (ByteArrayToString (ReadStatus (strm' 8))) {  	case "SendFile":  		if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTNameFileMessage)) {  			if (ReadStatus (strm) == 0x0) {  				string newfilename = ByteArrayToString (ReadStatus (strm' (int)ReadStatus (strm)));  				if (ReadStatus (strm) == 0x0) {  					ReplyStatus (strm' BTZomBFingerFactory.BTAcceptFileMessage);  					if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage)) {  						string filelength = "";  						byte last = ReadStatus (strm);  						while (last != 0xFF) {  							filelength += (char)last;  							last = ReadStatus (strm);  						}  						if (ReadStatus (strm) == 0x0 && ReadStatus (strm) == 0xff && ReadStatus (strm) == 0x0) {  							File.WriteAllBytes (To + newfilename' ReadStatus (strm' int.Parse (filelength)));  							if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage))  								if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTEOFTMessage)) {  									ReplyStatus (strm' BTZomBFingerFactory.BTRecievedMessage);  									break;  								}  						}  					}  				}  			}  		}  		break;  	case "Sign Off":  		if (DataRecieved != null)  			DataRecieved (this' new EventArgs ());  		ReplyStatus (strm' BTZomBFingerFactory.BTByeMessage);  		goto end;  	case "No Files":  		//Ok' I don't care' continue  		break;  	default:  		//TODO: AHHH!  		break;  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,BTFinger,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,ZomBworker,The following statement contains a magic number: while (true) {  	switch (ByteArrayToString (ReadStatus (strm' 8))) {  	case "SendFile":  		if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTNameFileMessage)) {  			if (ReadStatus (strm) == 0x0) {  				string newfilename = ByteArrayToString (ReadStatus (strm' (int)ReadStatus (strm)));  				if (ReadStatus (strm) == 0x0) {  					ReplyStatus (strm' BTZomBFingerFactory.BTAcceptFileMessage);  					if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage)) {  						string filelength = "";  						byte last = ReadStatus (strm);  						while (last != 0xFF) {  							filelength += (char)last;  							last = ReadStatus (strm);  						}  						if (ReadStatus (strm) == 0x0 && ReadStatus (strm) == 0xff && ReadStatus (strm) == 0x0) {  							File.WriteAllBytes (To + newfilename' ReadStatus (strm' int.Parse (filelength)));  							if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage))  								if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTEOFTMessage)) {  									ReplyStatus (strm' BTZomBFingerFactory.BTRecievedMessage);  									break;  								}  						}  					}  				}  			}  		}  		break;  	case "Sign Off":  		if (DataRecieved != null)  			DataRecieved (this' new EventArgs ());  		ReplyStatus (strm' BTZomBFingerFactory.BTByeMessage);  		goto end;  	case "No Files":  		//Ok' I don't care' continue  		break;  	default:  		//TODO: AHHH!  		break;  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,BTFinger,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,ZomBworker,The following statement contains a magic number: switch (ByteArrayToString (ReadStatus (strm' 8))) {  case "SendFile":  	if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTNameFileMessage)) {  		if (ReadStatus (strm) == 0x0) {  			string newfilename = ByteArrayToString (ReadStatus (strm' (int)ReadStatus (strm)));  			if (ReadStatus (strm) == 0x0) {  				ReplyStatus (strm' BTZomBFingerFactory.BTAcceptFileMessage);  				if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage)) {  					string filelength = "";  					byte last = ReadStatus (strm);  					while (last != 0xFF) {  						filelength += (char)last;  						last = ReadStatus (strm);  					}  					if (ReadStatus (strm) == 0x0 && ReadStatus (strm) == 0xff && ReadStatus (strm) == 0x0) {  						File.WriteAllBytes (To + newfilename' ReadStatus (strm' int.Parse (filelength)));  						if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage))  							if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTEOFTMessage)) {  								ReplyStatus (strm' BTZomBFingerFactory.BTRecievedMessage);  								break;  							}  					}  				}  			}  		}  	}  	break;  case "Sign Off":  	if (DataRecieved != null)  		DataRecieved (this' new EventArgs ());  	ReplyStatus (strm' BTZomBFingerFactory.BTByeMessage);  	goto end;  case "No Files":  	//Ok' I don't care' continue  	break;  default:  	//TODO: AHHH!  	break;  }  
Magic Number,System451.Communication.Dashboard.Utils,BTFinger,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,ZomBworker,The following statement contains a magic number: switch (ByteArrayToString (ReadStatus (strm' 8))) {  case "SendFile":  	if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTNameFileMessage)) {  		if (ReadStatus (strm) == 0x0) {  			string newfilename = ByteArrayToString (ReadStatus (strm' (int)ReadStatus (strm)));  			if (ReadStatus (strm) == 0x0) {  				ReplyStatus (strm' BTZomBFingerFactory.BTAcceptFileMessage);  				if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage)) {  					string filelength = "";  					byte last = ReadStatus (strm);  					while (last != 0xFF) {  						filelength += (char)last;  						last = ReadStatus (strm);  					}  					if (ReadStatus (strm) == 0x0 && ReadStatus (strm) == 0xff && ReadStatus (strm) == 0x0) {  						File.WriteAllBytes (To + newfilename' ReadStatus (strm' int.Parse (filelength)));  						if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage))  							if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTEOFTMessage)) {  								ReplyStatus (strm' BTZomBFingerFactory.BTRecievedMessage);  								break;  							}  					}  				}  			}  		}  	}  	break;  case "Sign Off":  	if (DataRecieved != null)  		DataRecieved (this' new EventArgs ());  	ReplyStatus (strm' BTZomBFingerFactory.BTByeMessage);  	goto end;  case "No Files":  	//Ok' I don't care' continue  	break;  default:  	//TODO: AHHH!  	break;  }  
Magic Number,System451.Communication.Dashboard.Utils,BTFinger,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,ZomBworker,The following statement contains a magic number: switch (ByteArrayToString (ReadStatus (strm' 8))) {  case "SendFile":  	if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTNameFileMessage)) {  		if (ReadStatus (strm) == 0x0) {  			string newfilename = ByteArrayToString (ReadStatus (strm' (int)ReadStatus (strm)));  			if (ReadStatus (strm) == 0x0) {  				ReplyStatus (strm' BTZomBFingerFactory.BTAcceptFileMessage);  				if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage)) {  					string filelength = "";  					byte last = ReadStatus (strm);  					while (last != 0xFF) {  						filelength += (char)last;  						last = ReadStatus (strm);  					}  					if (ReadStatus (strm) == 0x0 && ReadStatus (strm) == 0xff && ReadStatus (strm) == 0x0) {  						File.WriteAllBytes (To + newfilename' ReadStatus (strm' int.Parse (filelength)));  						if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage))  							if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTEOFTMessage)) {  								ReplyStatus (strm' BTZomBFingerFactory.BTRecievedMessage);  								break;  							}  					}  				}  			}  		}  	}  	break;  case "Sign Off":  	if (DataRecieved != null)  		DataRecieved (this' new EventArgs ());  	ReplyStatus (strm' BTZomBFingerFactory.BTByeMessage);  	goto end;  case "No Files":  	//Ok' I don't care' continue  	break;  default:  	//TODO: AHHH!  	break;  }  
Magic Number,System451.Communication.Dashboard.Utils,BTFinger,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,ZomBworker,The following statement contains a magic number: switch (ByteArrayToString (ReadStatus (strm' 8))) {  case "SendFile":  	if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTNameFileMessage)) {  		if (ReadStatus (strm) == 0x0) {  			string newfilename = ByteArrayToString (ReadStatus (strm' (int)ReadStatus (strm)));  			if (ReadStatus (strm) == 0x0) {  				ReplyStatus (strm' BTZomBFingerFactory.BTAcceptFileMessage);  				if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage)) {  					string filelength = "";  					byte last = ReadStatus (strm);  					while (last != 0xFF) {  						filelength += (char)last;  						last = ReadStatus (strm);  					}  					if (ReadStatus (strm) == 0x0 && ReadStatus (strm) == 0xff && ReadStatus (strm) == 0x0) {  						File.WriteAllBytes (To + newfilename' ReadStatus (strm' int.Parse (filelength)));  						if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage))  							if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTEOFTMessage)) {  								ReplyStatus (strm' BTZomBFingerFactory.BTRecievedMessage);  								break;  							}  					}  				}  			}  		}  	}  	break;  case "Sign Off":  	if (DataRecieved != null)  		DataRecieved (this' new EventArgs ());  	ReplyStatus (strm' BTZomBFingerFactory.BTByeMessage);  	goto end;  case "No Files":  	//Ok' I don't care' continue  	break;  default:  	//TODO: AHHH!  	break;  }  
Magic Number,System451.Communication.Dashboard.Utils,BTFinger,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,ZomBworker,The following statement contains a magic number: switch (ByteArrayToString (ReadStatus (strm' 8))) {  case "SendFile":  	if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTNameFileMessage)) {  		if (ReadStatus (strm) == 0x0) {  			string newfilename = ByteArrayToString (ReadStatus (strm' (int)ReadStatus (strm)));  			if (ReadStatus (strm) == 0x0) {  				ReplyStatus (strm' BTZomBFingerFactory.BTAcceptFileMessage);  				if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage)) {  					string filelength = "";  					byte last = ReadStatus (strm);  					while (last != 0xFF) {  						filelength += (char)last;  						last = ReadStatus (strm);  					}  					if (ReadStatus (strm) == 0x0 && ReadStatus (strm) == 0xff && ReadStatus (strm) == 0x0) {  						File.WriteAllBytes (To + newfilename' ReadStatus (strm' int.Parse (filelength)));  						if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage))  							if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTEOFTMessage)) {  								ReplyStatus (strm' BTZomBFingerFactory.BTRecievedMessage);  								break;  							}  					}  				}  			}  		}  	}  	break;  case "Sign Off":  	if (DataRecieved != null)  		DataRecieved (this' new EventArgs ());  	ReplyStatus (strm' BTZomBFingerFactory.BTByeMessage);  	goto end;  case "No Files":  	//Ok' I don't care' continue  	break;  default:  	//TODO: AHHH!  	break;  }  
Magic Number,System451.Communication.Dashboard.Utils,BTFinger,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,ZomBworker,The following statement contains a magic number: if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTNameFileMessage)) {  	if (ReadStatus (strm) == 0x0) {  		string newfilename = ByteArrayToString (ReadStatus (strm' (int)ReadStatus (strm)));  		if (ReadStatus (strm) == 0x0) {  			ReplyStatus (strm' BTZomBFingerFactory.BTAcceptFileMessage);  			if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage)) {  				string filelength = "";  				byte last = ReadStatus (strm);  				while (last != 0xFF) {  					filelength += (char)last;  					last = ReadStatus (strm);  				}  				if (ReadStatus (strm) == 0x0 && ReadStatus (strm) == 0xff && ReadStatus (strm) == 0x0) {  					File.WriteAllBytes (To + newfilename' ReadStatus (strm' int.Parse (filelength)));  					if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage))  						if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTEOFTMessage)) {  							ReplyStatus (strm' BTZomBFingerFactory.BTRecievedMessage);  							break;  						}  				}  			}  		}  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,BTFinger,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,ZomBworker,The following statement contains a magic number: if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTNameFileMessage)) {  	if (ReadStatus (strm) == 0x0) {  		string newfilename = ByteArrayToString (ReadStatus (strm' (int)ReadStatus (strm)));  		if (ReadStatus (strm) == 0x0) {  			ReplyStatus (strm' BTZomBFingerFactory.BTAcceptFileMessage);  			if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage)) {  				string filelength = "";  				byte last = ReadStatus (strm);  				while (last != 0xFF) {  					filelength += (char)last;  					last = ReadStatus (strm);  				}  				if (ReadStatus (strm) == 0x0 && ReadStatus (strm) == 0xff && ReadStatus (strm) == 0x0) {  					File.WriteAllBytes (To + newfilename' ReadStatus (strm' int.Parse (filelength)));  					if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage))  						if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTEOFTMessage)) {  							ReplyStatus (strm' BTZomBFingerFactory.BTRecievedMessage);  							break;  						}  				}  			}  		}  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,BTFinger,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,ZomBworker,The following statement contains a magic number: if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTNameFileMessage)) {  	if (ReadStatus (strm) == 0x0) {  		string newfilename = ByteArrayToString (ReadStatus (strm' (int)ReadStatus (strm)));  		if (ReadStatus (strm) == 0x0) {  			ReplyStatus (strm' BTZomBFingerFactory.BTAcceptFileMessage);  			if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage)) {  				string filelength = "";  				byte last = ReadStatus (strm);  				while (last != 0xFF) {  					filelength += (char)last;  					last = ReadStatus (strm);  				}  				if (ReadStatus (strm) == 0x0 && ReadStatus (strm) == 0xff && ReadStatus (strm) == 0x0) {  					File.WriteAllBytes (To + newfilename' ReadStatus (strm' int.Parse (filelength)));  					if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage))  						if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTEOFTMessage)) {  							ReplyStatus (strm' BTZomBFingerFactory.BTRecievedMessage);  							break;  						}  				}  			}  		}  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,BTFinger,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,ZomBworker,The following statement contains a magic number: if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTNameFileMessage)) {  	if (ReadStatus (strm) == 0x0) {  		string newfilename = ByteArrayToString (ReadStatus (strm' (int)ReadStatus (strm)));  		if (ReadStatus (strm) == 0x0) {  			ReplyStatus (strm' BTZomBFingerFactory.BTAcceptFileMessage);  			if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage)) {  				string filelength = "";  				byte last = ReadStatus (strm);  				while (last != 0xFF) {  					filelength += (char)last;  					last = ReadStatus (strm);  				}  				if (ReadStatus (strm) == 0x0 && ReadStatus (strm) == 0xff && ReadStatus (strm) == 0x0) {  					File.WriteAllBytes (To + newfilename' ReadStatus (strm' int.Parse (filelength)));  					if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage))  						if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTEOFTMessage)) {  							ReplyStatus (strm' BTZomBFingerFactory.BTRecievedMessage);  							break;  						}  				}  			}  		}  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,BTFinger,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,ZomBworker,The following statement contains a magic number: if (ReadStatus (strm) == 0x0) {  	string newfilename = ByteArrayToString (ReadStatus (strm' (int)ReadStatus (strm)));  	if (ReadStatus (strm) == 0x0) {  		ReplyStatus (strm' BTZomBFingerFactory.BTAcceptFileMessage);  		if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage)) {  			string filelength = "";  			byte last = ReadStatus (strm);  			while (last != 0xFF) {  				filelength += (char)last;  				last = ReadStatus (strm);  			}  			if (ReadStatus (strm) == 0x0 && ReadStatus (strm) == 0xff && ReadStatus (strm) == 0x0) {  				File.WriteAllBytes (To + newfilename' ReadStatus (strm' int.Parse (filelength)));  				if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage))  					if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTEOFTMessage)) {  						ReplyStatus (strm' BTZomBFingerFactory.BTRecievedMessage);  						break;  					}  			}  		}  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,BTFinger,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,ZomBworker,The following statement contains a magic number: if (ReadStatus (strm) == 0x0) {  	string newfilename = ByteArrayToString (ReadStatus (strm' (int)ReadStatus (strm)));  	if (ReadStatus (strm) == 0x0) {  		ReplyStatus (strm' BTZomBFingerFactory.BTAcceptFileMessage);  		if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage)) {  			string filelength = "";  			byte last = ReadStatus (strm);  			while (last != 0xFF) {  				filelength += (char)last;  				last = ReadStatus (strm);  			}  			if (ReadStatus (strm) == 0x0 && ReadStatus (strm) == 0xff && ReadStatus (strm) == 0x0) {  				File.WriteAllBytes (To + newfilename' ReadStatus (strm' int.Parse (filelength)));  				if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage))  					if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTEOFTMessage)) {  						ReplyStatus (strm' BTZomBFingerFactory.BTRecievedMessage);  						break;  					}  			}  		}  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,BTFinger,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,ZomBworker,The following statement contains a magic number: if (ReadStatus (strm) == 0x0) {  	string newfilename = ByteArrayToString (ReadStatus (strm' (int)ReadStatus (strm)));  	if (ReadStatus (strm) == 0x0) {  		ReplyStatus (strm' BTZomBFingerFactory.BTAcceptFileMessage);  		if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage)) {  			string filelength = "";  			byte last = ReadStatus (strm);  			while (last != 0xFF) {  				filelength += (char)last;  				last = ReadStatus (strm);  			}  			if (ReadStatus (strm) == 0x0 && ReadStatus (strm) == 0xff && ReadStatus (strm) == 0x0) {  				File.WriteAllBytes (To + newfilename' ReadStatus (strm' int.Parse (filelength)));  				if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage))  					if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTEOFTMessage)) {  						ReplyStatus (strm' BTZomBFingerFactory.BTRecievedMessage);  						break;  					}  			}  		}  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,BTFinger,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,ZomBworker,The following statement contains a magic number: if (ReadStatus (strm) == 0x0) {  	ReplyStatus (strm' BTZomBFingerFactory.BTAcceptFileMessage);  	if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage)) {  		string filelength = "";  		byte last = ReadStatus (strm);  		while (last != 0xFF) {  			filelength += (char)last;  			last = ReadStatus (strm);  		}  		if (ReadStatus (strm) == 0x0 && ReadStatus (strm) == 0xff && ReadStatus (strm) == 0x0) {  			File.WriteAllBytes (To + newfilename' ReadStatus (strm' int.Parse (filelength)));  			if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage))  				if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTEOFTMessage)) {  					ReplyStatus (strm' BTZomBFingerFactory.BTRecievedMessage);  					break;  				}  		}  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,BTFinger,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,ZomBworker,The following statement contains a magic number: if (ReadStatus (strm) == 0x0) {  	ReplyStatus (strm' BTZomBFingerFactory.BTAcceptFileMessage);  	if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage)) {  		string filelength = "";  		byte last = ReadStatus (strm);  		while (last != 0xFF) {  			filelength += (char)last;  			last = ReadStatus (strm);  		}  		if (ReadStatus (strm) == 0x0 && ReadStatus (strm) == 0xff && ReadStatus (strm) == 0x0) {  			File.WriteAllBytes (To + newfilename' ReadStatus (strm' int.Parse (filelength)));  			if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage))  				if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTEOFTMessage)) {  					ReplyStatus (strm' BTZomBFingerFactory.BTRecievedMessage);  					break;  				}  		}  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,BTFinger,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,ZomBworker,The following statement contains a magic number: if (ReadStatus (strm) == 0x0) {  	ReplyStatus (strm' BTZomBFingerFactory.BTAcceptFileMessage);  	if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage)) {  		string filelength = "";  		byte last = ReadStatus (strm);  		while (last != 0xFF) {  			filelength += (char)last;  			last = ReadStatus (strm);  		}  		if (ReadStatus (strm) == 0x0 && ReadStatus (strm) == 0xff && ReadStatus (strm) == 0x0) {  			File.WriteAllBytes (To + newfilename' ReadStatus (strm' int.Parse (filelength)));  			if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage))  				if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTEOFTMessage)) {  					ReplyStatus (strm' BTZomBFingerFactory.BTRecievedMessage);  					break;  				}  		}  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,BTFinger,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,ZomBworker,The following statement contains a magic number: if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage)) {  	string filelength = "";  	byte last = ReadStatus (strm);  	while (last != 0xFF) {  		filelength += (char)last;  		last = ReadStatus (strm);  	}  	if (ReadStatus (strm) == 0x0 && ReadStatus (strm) == 0xff && ReadStatus (strm) == 0x0) {  		File.WriteAllBytes (To + newfilename' ReadStatus (strm' int.Parse (filelength)));  		if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage))  			if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTEOFTMessage)) {  				ReplyStatus (strm' BTZomBFingerFactory.BTRecievedMessage);  				break;  			}  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,BTFinger,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,ZomBworker,The following statement contains a magic number: if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage)) {  	string filelength = "";  	byte last = ReadStatus (strm);  	while (last != 0xFF) {  		filelength += (char)last;  		last = ReadStatus (strm);  	}  	if (ReadStatus (strm) == 0x0 && ReadStatus (strm) == 0xff && ReadStatus (strm) == 0x0) {  		File.WriteAllBytes (To + newfilename' ReadStatus (strm' int.Parse (filelength)));  		if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage))  			if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTEOFTMessage)) {  				ReplyStatus (strm' BTZomBFingerFactory.BTRecievedMessage);  				break;  			}  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,BTFinger,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,ZomBworker,The following statement contains a magic number: if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage)) {  	string filelength = "";  	byte last = ReadStatus (strm);  	while (last != 0xFF) {  		filelength += (char)last;  		last = ReadStatus (strm);  	}  	if (ReadStatus (strm) == 0x0 && ReadStatus (strm) == 0xff && ReadStatus (strm) == 0x0) {  		File.WriteAllBytes (To + newfilename' ReadStatus (strm' int.Parse (filelength)));  		if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage))  			if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTEOFTMessage)) {  				ReplyStatus (strm' BTZomBFingerFactory.BTRecievedMessage);  				break;  			}  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,BTFinger,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,ZomBworker,The following statement contains a magic number: if (ReadStatus (strm) == 0x0 && ReadStatus (strm) == 0xff && ReadStatus (strm) == 0x0) {  	File.WriteAllBytes (To + newfilename' ReadStatus (strm' int.Parse (filelength)));  	if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage))  		if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTEOFTMessage)) {  			ReplyStatus (strm' BTZomBFingerFactory.BTRecievedMessage);  			break;  		}  }  
Magic Number,System451.Communication.Dashboard.Utils,BTFinger,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,ZomBworker,The following statement contains a magic number: if (ReadStatus (strm) == 0x0 && ReadStatus (strm) == 0xff && ReadStatus (strm) == 0x0) {  	File.WriteAllBytes (To + newfilename' ReadStatus (strm' int.Parse (filelength)));  	if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage))  		if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTEOFTMessage)) {  			ReplyStatus (strm' BTZomBFingerFactory.BTRecievedMessage);  			break;  		}  }  
Magic Number,System451.Communication.Dashboard.Utils,BTFinger,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,ZomBworker,The following statement contains a magic number: if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage))  	if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTEOFTMessage)) {  		ReplyStatus (strm' BTZomBFingerFactory.BTRecievedMessage);  		break;  	}  
Magic Number,System451.Communication.Dashboard.Utils,BTFinger,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,ZomBworker,The following statement contains a magic number: if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTFileSequenceMessage))  	if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTEOFTMessage)) {  		ReplyStatus (strm' BTZomBFingerFactory.BTRecievedMessage);  		break;  	}  
Magic Number,System451.Communication.Dashboard.Utils,BTFinger,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,ZomBworker,The following statement contains a magic number: if (BS (ReadStatus (strm' 4)) == BS (BTZomBFingerFactory.BTEOFTMessage)) {  	ReplyStatus (strm' BTZomBFingerFactory.BTRecievedMessage);  	break;  }  
Magic Number,System451.Communication.Dashboard.Utils,BTFinger,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,GetZomBServerAddress,The following statement contains a magic number: while (sliceing) {  	BluetoothDeviceInfo[] bdi = blucli.DiscoverDevices ();  	foreach (BluetoothDeviceInfo item in bdi) {  		string DN = item.DeviceName;  		if (DN == "ZomBServer" + TeamNumber && sliceing)  			return item.DeviceAddress;  	}  	Thread.Sleep (10);  }  
Magic Number,System451.Communication.Dashboard.Utils,BTFinger,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,GetZomBServerAddress,The following statement contains a magic number: Thread.Sleep (10);  
Magic Number,System451.Communication.Dashboard.Utils,BTZomBServer,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,ReadStatus,The following statement contains a magic number: while (strm.CanRead == false) {  	Thread.Sleep (5);  }  
Magic Number,System451.Communication.Dashboard.Utils,BTZomBServer,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,ReadStatus,The following statement contains a magic number: Thread.Sleep (5);  
Magic Number,System451.Communication.Dashboard.Utils,BTZomBServer,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,ReadStatus,The following statement contains a magic number: while (readcount < maxlength) {  	Thread.Sleep (40);  	while (strm.CanRead == false) {  		Thread.Sleep (5);  	}  	readcount += strm.Read (hlMsg' readcount' maxlength - readcount);  }  
Magic Number,System451.Communication.Dashboard.Utils,BTZomBServer,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,ReadStatus,The following statement contains a magic number: while (readcount < maxlength) {  	Thread.Sleep (40);  	while (strm.CanRead == false) {  		Thread.Sleep (5);  	}  	readcount += strm.Read (hlMsg' readcount' maxlength - readcount);  }  
Magic Number,System451.Communication.Dashboard.Utils,BTZomBServer,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,ReadStatus,The following statement contains a magic number: Thread.Sleep (40);  
Magic Number,System451.Communication.Dashboard.Utils,BTZomBServer,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,ReadStatus,The following statement contains a magic number: while (strm.CanRead == false) {  	Thread.Sleep (5);  }  
Magic Number,System451.Communication.Dashboard.Utils,BTZomBServer,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,ReadStatus,The following statement contains a magic number: Thread.Sleep (5);  
Magic Number,System451.Communication.Dashboard.Utils,BTZomBServer,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,ZomBworker,The following statement contains a magic number: Thread.Sleep (30);  
Magic Number,System451.Communication.Dashboard.Utils,BTZomBServer,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,ZomBworker,The following statement contains a magic number: while (!listen.Pending ()) {  	Thread.Sleep (30);  }  
Magic Number,System451.Communication.Dashboard.Utils,BTZomBServer,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,ZomBworker,The following statement contains a magic number: Thread.Sleep (30);  
Magic Number,System451.Communication.Dashboard.Utils,BTZomBServer,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,ZomBworker,The following statement contains a magic number: using (BluetoothClient bcli = listen.AcceptBluetoothClient ())//This blocks   {  	using (Stream strm = bcli.GetStream ()) {  		if (BS (ReadStatus (strm' 10)) == BS (BTZomBFingerFactory.BTHelloMessage))//if good sign on  		 {  			//Reply with team Verification  			ReplyStatus (strm' BTZomBFingerFactory.BTHelloMessage' ((byte)(TeamNumber >> 8))' (byte)TeamNumber);  			if (BS (ReadStatus (strm' 11)) == BS (BTZomBFingerFactory.BTVerifyMessage))//if good Verify  			 {  				if (ReadStatus (strm) == ((byte)(TeamNumber >> 8)) && ReadStatus (strm) == (byte)TeamNumber)//team # validate  				 {  					if (DataSending != null)  						DataSending (this' new EventArgs ());  					ReplyStatus (strm' BTZomBFingerFactory.BTGoodVerifyMessage);  					SendFiles (strm' GetNewFiles ());  					if (DataSent != null)  						DataSent (this' new EventArgs ());  					ReplyStatus (strm' BTZomBFingerFactory.BTSignOffMessage);  				}  			}  		}  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,BTZomBServer,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,ZomBworker,The following statement contains a magic number: using (BluetoothClient bcli = listen.AcceptBluetoothClient ())//This blocks   {  	using (Stream strm = bcli.GetStream ()) {  		if (BS (ReadStatus (strm' 10)) == BS (BTZomBFingerFactory.BTHelloMessage))//if good sign on  		 {  			//Reply with team Verification  			ReplyStatus (strm' BTZomBFingerFactory.BTHelloMessage' ((byte)(TeamNumber >> 8))' (byte)TeamNumber);  			if (BS (ReadStatus (strm' 11)) == BS (BTZomBFingerFactory.BTVerifyMessage))//if good Verify  			 {  				if (ReadStatus (strm) == ((byte)(TeamNumber >> 8)) && ReadStatus (strm) == (byte)TeamNumber)//team # validate  				 {  					if (DataSending != null)  						DataSending (this' new EventArgs ());  					ReplyStatus (strm' BTZomBFingerFactory.BTGoodVerifyMessage);  					SendFiles (strm' GetNewFiles ());  					if (DataSent != null)  						DataSent (this' new EventArgs ());  					ReplyStatus (strm' BTZomBFingerFactory.BTSignOffMessage);  				}  			}  		}  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,BTZomBServer,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,ZomBworker,The following statement contains a magic number: using (BluetoothClient bcli = listen.AcceptBluetoothClient ())//This blocks   {  	using (Stream strm = bcli.GetStream ()) {  		if (BS (ReadStatus (strm' 10)) == BS (BTZomBFingerFactory.BTHelloMessage))//if good sign on  		 {  			//Reply with team Verification  			ReplyStatus (strm' BTZomBFingerFactory.BTHelloMessage' ((byte)(TeamNumber >> 8))' (byte)TeamNumber);  			if (BS (ReadStatus (strm' 11)) == BS (BTZomBFingerFactory.BTVerifyMessage))//if good Verify  			 {  				if (ReadStatus (strm) == ((byte)(TeamNumber >> 8)) && ReadStatus (strm) == (byte)TeamNumber)//team # validate  				 {  					if (DataSending != null)  						DataSending (this' new EventArgs ());  					ReplyStatus (strm' BTZomBFingerFactory.BTGoodVerifyMessage);  					SendFiles (strm' GetNewFiles ());  					if (DataSent != null)  						DataSent (this' new EventArgs ());  					ReplyStatus (strm' BTZomBFingerFactory.BTSignOffMessage);  				}  			}  		}  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,BTZomBServer,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,ZomBworker,The following statement contains a magic number: using (BluetoothClient bcli = listen.AcceptBluetoothClient ())//This blocks   {  	using (Stream strm = bcli.GetStream ()) {  		if (BS (ReadStatus (strm' 10)) == BS (BTZomBFingerFactory.BTHelloMessage))//if good sign on  		 {  			//Reply with team Verification  			ReplyStatus (strm' BTZomBFingerFactory.BTHelloMessage' ((byte)(TeamNumber >> 8))' (byte)TeamNumber);  			if (BS (ReadStatus (strm' 11)) == BS (BTZomBFingerFactory.BTVerifyMessage))//if good Verify  			 {  				if (ReadStatus (strm) == ((byte)(TeamNumber >> 8)) && ReadStatus (strm) == (byte)TeamNumber)//team # validate  				 {  					if (DataSending != null)  						DataSending (this' new EventArgs ());  					ReplyStatus (strm' BTZomBFingerFactory.BTGoodVerifyMessage);  					SendFiles (strm' GetNewFiles ());  					if (DataSent != null)  						DataSent (this' new EventArgs ());  					ReplyStatus (strm' BTZomBFingerFactory.BTSignOffMessage);  				}  			}  		}  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,BTZomBServer,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,ZomBworker,The following statement contains a magic number: using (Stream strm = bcli.GetStream ()) {  	if (BS (ReadStatus (strm' 10)) == BS (BTZomBFingerFactory.BTHelloMessage))//if good sign on  	 {  		//Reply with team Verification  		ReplyStatus (strm' BTZomBFingerFactory.BTHelloMessage' ((byte)(TeamNumber >> 8))' (byte)TeamNumber);  		if (BS (ReadStatus (strm' 11)) == BS (BTZomBFingerFactory.BTVerifyMessage))//if good Verify  		 {  			if (ReadStatus (strm) == ((byte)(TeamNumber >> 8)) && ReadStatus (strm) == (byte)TeamNumber)//team # validate  			 {  				if (DataSending != null)  					DataSending (this' new EventArgs ());  				ReplyStatus (strm' BTZomBFingerFactory.BTGoodVerifyMessage);  				SendFiles (strm' GetNewFiles ());  				if (DataSent != null)  					DataSent (this' new EventArgs ());  				ReplyStatus (strm' BTZomBFingerFactory.BTSignOffMessage);  			}  		}  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,BTZomBServer,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,ZomBworker,The following statement contains a magic number: using (Stream strm = bcli.GetStream ()) {  	if (BS (ReadStatus (strm' 10)) == BS (BTZomBFingerFactory.BTHelloMessage))//if good sign on  	 {  		//Reply with team Verification  		ReplyStatus (strm' BTZomBFingerFactory.BTHelloMessage' ((byte)(TeamNumber >> 8))' (byte)TeamNumber);  		if (BS (ReadStatus (strm' 11)) == BS (BTZomBFingerFactory.BTVerifyMessage))//if good Verify  		 {  			if (ReadStatus (strm) == ((byte)(TeamNumber >> 8)) && ReadStatus (strm) == (byte)TeamNumber)//team # validate  			 {  				if (DataSending != null)  					DataSending (this' new EventArgs ());  				ReplyStatus (strm' BTZomBFingerFactory.BTGoodVerifyMessage);  				SendFiles (strm' GetNewFiles ());  				if (DataSent != null)  					DataSent (this' new EventArgs ());  				ReplyStatus (strm' BTZomBFingerFactory.BTSignOffMessage);  			}  		}  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,BTZomBServer,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,ZomBworker,The following statement contains a magic number: using (Stream strm = bcli.GetStream ()) {  	if (BS (ReadStatus (strm' 10)) == BS (BTZomBFingerFactory.BTHelloMessage))//if good sign on  	 {  		//Reply with team Verification  		ReplyStatus (strm' BTZomBFingerFactory.BTHelloMessage' ((byte)(TeamNumber >> 8))' (byte)TeamNumber);  		if (BS (ReadStatus (strm' 11)) == BS (BTZomBFingerFactory.BTVerifyMessage))//if good Verify  		 {  			if (ReadStatus (strm) == ((byte)(TeamNumber >> 8)) && ReadStatus (strm) == (byte)TeamNumber)//team # validate  			 {  				if (DataSending != null)  					DataSending (this' new EventArgs ());  				ReplyStatus (strm' BTZomBFingerFactory.BTGoodVerifyMessage);  				SendFiles (strm' GetNewFiles ());  				if (DataSent != null)  					DataSent (this' new EventArgs ());  				ReplyStatus (strm' BTZomBFingerFactory.BTSignOffMessage);  			}  		}  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,BTZomBServer,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,ZomBworker,The following statement contains a magic number: using (Stream strm = bcli.GetStream ()) {  	if (BS (ReadStatus (strm' 10)) == BS (BTZomBFingerFactory.BTHelloMessage))//if good sign on  	 {  		//Reply with team Verification  		ReplyStatus (strm' BTZomBFingerFactory.BTHelloMessage' ((byte)(TeamNumber >> 8))' (byte)TeamNumber);  		if (BS (ReadStatus (strm' 11)) == BS (BTZomBFingerFactory.BTVerifyMessage))//if good Verify  		 {  			if (ReadStatus (strm) == ((byte)(TeamNumber >> 8)) && ReadStatus (strm) == (byte)TeamNumber)//team # validate  			 {  				if (DataSending != null)  					DataSending (this' new EventArgs ());  				ReplyStatus (strm' BTZomBFingerFactory.BTGoodVerifyMessage);  				SendFiles (strm' GetNewFiles ());  				if (DataSent != null)  					DataSent (this' new EventArgs ());  				ReplyStatus (strm' BTZomBFingerFactory.BTSignOffMessage);  			}  		}  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,BTZomBServer,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,ZomBworker,The following statement contains a magic number: if (BS (ReadStatus (strm' 10)) == BS (BTZomBFingerFactory.BTHelloMessage))//if good sign on   {  	//Reply with team Verification  	ReplyStatus (strm' BTZomBFingerFactory.BTHelloMessage' ((byte)(TeamNumber >> 8))' (byte)TeamNumber);  	if (BS (ReadStatus (strm' 11)) == BS (BTZomBFingerFactory.BTVerifyMessage))//if good Verify  	 {  		if (ReadStatus (strm) == ((byte)(TeamNumber >> 8)) && ReadStatus (strm) == (byte)TeamNumber)//team # validate  		 {  			if (DataSending != null)  				DataSending (this' new EventArgs ());  			ReplyStatus (strm' BTZomBFingerFactory.BTGoodVerifyMessage);  			SendFiles (strm' GetNewFiles ());  			if (DataSent != null)  				DataSent (this' new EventArgs ());  			ReplyStatus (strm' BTZomBFingerFactory.BTSignOffMessage);  		}  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,BTZomBServer,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,ZomBworker,The following statement contains a magic number: if (BS (ReadStatus (strm' 10)) == BS (BTZomBFingerFactory.BTHelloMessage))//if good sign on   {  	//Reply with team Verification  	ReplyStatus (strm' BTZomBFingerFactory.BTHelloMessage' ((byte)(TeamNumber >> 8))' (byte)TeamNumber);  	if (BS (ReadStatus (strm' 11)) == BS (BTZomBFingerFactory.BTVerifyMessage))//if good Verify  	 {  		if (ReadStatus (strm) == ((byte)(TeamNumber >> 8)) && ReadStatus (strm) == (byte)TeamNumber)//team # validate  		 {  			if (DataSending != null)  				DataSending (this' new EventArgs ());  			ReplyStatus (strm' BTZomBFingerFactory.BTGoodVerifyMessage);  			SendFiles (strm' GetNewFiles ());  			if (DataSent != null)  				DataSent (this' new EventArgs ());  			ReplyStatus (strm' BTZomBFingerFactory.BTSignOffMessage);  		}  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,BTZomBServer,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,ZomBworker,The following statement contains a magic number: if (BS (ReadStatus (strm' 10)) == BS (BTZomBFingerFactory.BTHelloMessage))//if good sign on   {  	//Reply with team Verification  	ReplyStatus (strm' BTZomBFingerFactory.BTHelloMessage' ((byte)(TeamNumber >> 8))' (byte)TeamNumber);  	if (BS (ReadStatus (strm' 11)) == BS (BTZomBFingerFactory.BTVerifyMessage))//if good Verify  	 {  		if (ReadStatus (strm) == ((byte)(TeamNumber >> 8)) && ReadStatus (strm) == (byte)TeamNumber)//team # validate  		 {  			if (DataSending != null)  				DataSending (this' new EventArgs ());  			ReplyStatus (strm' BTZomBFingerFactory.BTGoodVerifyMessage);  			SendFiles (strm' GetNewFiles ());  			if (DataSent != null)  				DataSent (this' new EventArgs ());  			ReplyStatus (strm' BTZomBFingerFactory.BTSignOffMessage);  		}  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,BTZomBServer,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,ZomBworker,The following statement contains a magic number: if (BS (ReadStatus (strm' 10)) == BS (BTZomBFingerFactory.BTHelloMessage))//if good sign on   {  	//Reply with team Verification  	ReplyStatus (strm' BTZomBFingerFactory.BTHelloMessage' ((byte)(TeamNumber >> 8))' (byte)TeamNumber);  	if (BS (ReadStatus (strm' 11)) == BS (BTZomBFingerFactory.BTVerifyMessage))//if good Verify  	 {  		if (ReadStatus (strm) == ((byte)(TeamNumber >> 8)) && ReadStatus (strm) == (byte)TeamNumber)//team # validate  		 {  			if (DataSending != null)  				DataSending (this' new EventArgs ());  			ReplyStatus (strm' BTZomBFingerFactory.BTGoodVerifyMessage);  			SendFiles (strm' GetNewFiles ());  			if (DataSent != null)  				DataSent (this' new EventArgs ());  			ReplyStatus (strm' BTZomBFingerFactory.BTSignOffMessage);  		}  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,BTZomBServer,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,ZomBworker,The following statement contains a magic number: ReplyStatus (strm' BTZomBFingerFactory.BTHelloMessage' ((byte)(TeamNumber >> 8))' (byte)TeamNumber);  
Magic Number,System451.Communication.Dashboard.Utils,BTZomBServer,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,ZomBworker,The following statement contains a magic number: if (BS (ReadStatus (strm' 11)) == BS (BTZomBFingerFactory.BTVerifyMessage))//if good Verify   {  	if (ReadStatus (strm) == ((byte)(TeamNumber >> 8)) && ReadStatus (strm) == (byte)TeamNumber)//team # validate  	 {  		if (DataSending != null)  			DataSending (this' new EventArgs ());  		ReplyStatus (strm' BTZomBFingerFactory.BTGoodVerifyMessage);  		SendFiles (strm' GetNewFiles ());  		if (DataSent != null)  			DataSent (this' new EventArgs ());  		ReplyStatus (strm' BTZomBFingerFactory.BTSignOffMessage);  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,BTZomBServer,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,ZomBworker,The following statement contains a magic number: if (BS (ReadStatus (strm' 11)) == BS (BTZomBFingerFactory.BTVerifyMessage))//if good Verify   {  	if (ReadStatus (strm) == ((byte)(TeamNumber >> 8)) && ReadStatus (strm) == (byte)TeamNumber)//team # validate  	 {  		if (DataSending != null)  			DataSending (this' new EventArgs ());  		ReplyStatus (strm' BTZomBFingerFactory.BTGoodVerifyMessage);  		SendFiles (strm' GetNewFiles ());  		if (DataSent != null)  			DataSent (this' new EventArgs ());  		ReplyStatus (strm' BTZomBFingerFactory.BTSignOffMessage);  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,BTZomBServer,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,ZomBworker,The following statement contains a magic number: if (ReadStatus (strm) == ((byte)(TeamNumber >> 8)) && ReadStatus (strm) == (byte)TeamNumber)//team # validate   {  	if (DataSending != null)  		DataSending (this' new EventArgs ());  	ReplyStatus (strm' BTZomBFingerFactory.BTGoodVerifyMessage);  	SendFiles (strm' GetNewFiles ());  	if (DataSent != null)  		DataSent (this' new EventArgs ());  	ReplyStatus (strm' BTZomBFingerFactory.BTSignOffMessage);  }  
Magic Number,System451.Communication.Dashboard.Utils,BTZomBServer,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,SendFiles,The following statement contains a magic number: foreach (string file in files) {  	ReplyStatus (strm' BTZomBFingerFactory.BTSendFileMessage);  	string pureName = Path.GetFileName (file);  	ReplyStatus (strm' BTZomBFingerFactory.BTNameFileMessage' 0' (byte)pureName.Length);  	ReplyStatus (strm' StringToByteArray (pureName)' 0);  	if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTAcceptFileMessage)) {  		byte[] tmp = File.ReadAllBytes (file);  		ReplyStatus (strm' BTZomBFingerFactory.BTFileSequenceMessage);  		ReplyStatus (strm' StringToByteArray (tmp.Length.ToString ()));  		ReplyStatus (strm' BTZomBFingerFactory.BTFileSequenceMessage);  		ReplyStatus (strm' tmp);  		//send file  		ReplyStatus (strm' BTZomBFingerFactory.BTFileSequenceMessage);  		ReplyStatus (strm' BTZomBFingerFactory.BTEOFTMessage);  		if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTRecievedMessage)) {  			//TODO: implement this  			File.Move (file' file + ".ZomBarchive" + (((short)DateTime.Now.Ticks).ToString ("x").PadLeft (4' '0')));  		}  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,BTZomBServer,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,SendFiles,The following statement contains a magic number: foreach (string file in files) {  	ReplyStatus (strm' BTZomBFingerFactory.BTSendFileMessage);  	string pureName = Path.GetFileName (file);  	ReplyStatus (strm' BTZomBFingerFactory.BTNameFileMessage' 0' (byte)pureName.Length);  	ReplyStatus (strm' StringToByteArray (pureName)' 0);  	if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTAcceptFileMessage)) {  		byte[] tmp = File.ReadAllBytes (file);  		ReplyStatus (strm' BTZomBFingerFactory.BTFileSequenceMessage);  		ReplyStatus (strm' StringToByteArray (tmp.Length.ToString ()));  		ReplyStatus (strm' BTZomBFingerFactory.BTFileSequenceMessage);  		ReplyStatus (strm' tmp);  		//send file  		ReplyStatus (strm' BTZomBFingerFactory.BTFileSequenceMessage);  		ReplyStatus (strm' BTZomBFingerFactory.BTEOFTMessage);  		if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTRecievedMessage)) {  			//TODO: implement this  			File.Move (file' file + ".ZomBarchive" + (((short)DateTime.Now.Ticks).ToString ("x").PadLeft (4' '0')));  		}  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,BTZomBServer,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,SendFiles,The following statement contains a magic number: foreach (string file in files) {  	ReplyStatus (strm' BTZomBFingerFactory.BTSendFileMessage);  	string pureName = Path.GetFileName (file);  	ReplyStatus (strm' BTZomBFingerFactory.BTNameFileMessage' 0' (byte)pureName.Length);  	ReplyStatus (strm' StringToByteArray (pureName)' 0);  	if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTAcceptFileMessage)) {  		byte[] tmp = File.ReadAllBytes (file);  		ReplyStatus (strm' BTZomBFingerFactory.BTFileSequenceMessage);  		ReplyStatus (strm' StringToByteArray (tmp.Length.ToString ()));  		ReplyStatus (strm' BTZomBFingerFactory.BTFileSequenceMessage);  		ReplyStatus (strm' tmp);  		//send file  		ReplyStatus (strm' BTZomBFingerFactory.BTFileSequenceMessage);  		ReplyStatus (strm' BTZomBFingerFactory.BTEOFTMessage);  		if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTRecievedMessage)) {  			//TODO: implement this  			File.Move (file' file + ".ZomBarchive" + (((short)DateTime.Now.Ticks).ToString ("x").PadLeft (4' '0')));  		}  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,BTZomBServer,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,SendFiles,The following statement contains a magic number: if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTAcceptFileMessage)) {  	byte[] tmp = File.ReadAllBytes (file);  	ReplyStatus (strm' BTZomBFingerFactory.BTFileSequenceMessage);  	ReplyStatus (strm' StringToByteArray (tmp.Length.ToString ()));  	ReplyStatus (strm' BTZomBFingerFactory.BTFileSequenceMessage);  	ReplyStatus (strm' tmp);  	//send file  	ReplyStatus (strm' BTZomBFingerFactory.BTFileSequenceMessage);  	ReplyStatus (strm' BTZomBFingerFactory.BTEOFTMessage);  	if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTRecievedMessage)) {  		//TODO: implement this  		File.Move (file' file + ".ZomBarchive" + (((short)DateTime.Now.Ticks).ToString ("x").PadLeft (4' '0')));  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,BTZomBServer,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,SendFiles,The following statement contains a magic number: if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTAcceptFileMessage)) {  	byte[] tmp = File.ReadAllBytes (file);  	ReplyStatus (strm' BTZomBFingerFactory.BTFileSequenceMessage);  	ReplyStatus (strm' StringToByteArray (tmp.Length.ToString ()));  	ReplyStatus (strm' BTZomBFingerFactory.BTFileSequenceMessage);  	ReplyStatus (strm' tmp);  	//send file  	ReplyStatus (strm' BTZomBFingerFactory.BTFileSequenceMessage);  	ReplyStatus (strm' BTZomBFingerFactory.BTEOFTMessage);  	if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTRecievedMessage)) {  		//TODO: implement this  		File.Move (file' file + ".ZomBarchive" + (((short)DateTime.Now.Ticks).ToString ("x").PadLeft (4' '0')));  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,BTZomBServer,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,SendFiles,The following statement contains a magic number: if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTAcceptFileMessage)) {  	byte[] tmp = File.ReadAllBytes (file);  	ReplyStatus (strm' BTZomBFingerFactory.BTFileSequenceMessage);  	ReplyStatus (strm' StringToByteArray (tmp.Length.ToString ()));  	ReplyStatus (strm' BTZomBFingerFactory.BTFileSequenceMessage);  	ReplyStatus (strm' tmp);  	//send file  	ReplyStatus (strm' BTZomBFingerFactory.BTFileSequenceMessage);  	ReplyStatus (strm' BTZomBFingerFactory.BTEOFTMessage);  	if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTRecievedMessage)) {  		//TODO: implement this  		File.Move (file' file + ".ZomBarchive" + (((short)DateTime.Now.Ticks).ToString ("x").PadLeft (4' '0')));  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,BTZomBServer,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,SendFiles,The following statement contains a magic number: if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTRecievedMessage)) {  	//TODO: implement this  	File.Move (file' file + ".ZomBarchive" + (((short)DateTime.Now.Ticks).ToString ("x").PadLeft (4' '0')));  }  
Magic Number,System451.Communication.Dashboard.Utils,BTZomBServer,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,SendFiles,The following statement contains a magic number: if (BS (ReadStatus (strm' 8)) == BS (BTZomBFingerFactory.BTRecievedMessage)) {  	//TODO: implement this  	File.Move (file' file + ".ZomBarchive" + (((short)DateTime.Now.Ticks).ToString ("x").PadLeft (4' '0')));  }  
Magic Number,System451.Communication.Dashboard.Utils,BTZomBServer,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\BTFingerArc.cs,SendFiles,The following statement contains a magic number: File.Move (file' file + ".ZomBarchive" + (((short)DateTime.Now.Ticks).ToString ("x").PadLeft (4' '0')));  
Magic Number,System451.Communication.Dashboard.Utils,RobotStatusEventMonitor,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\RobotStatusEventMonitor.cs,UpdateStatus,The following statement contains a magic number: if (EnableEvents) {  	EventArgs e = new EventArgs ();  	if (NewPacketRecieved != null)  		NewPacketRecieved (this' e);  	if (status.Error.PacketLost && PacketLost != null)  		PacketLost (this' e);  	//RobotCom  	if (status.Status.RobotAttached) {  		if (!stat.RobotAttached && RobotConnected != null)  			RobotConnected (this' e);  		//Enable  		if (status.Status.Enabled && !stat.Enabled) {  			if (Enabled != null)  				Enabled (this' e);  			//Begin Auto  			if (status.Status.Auto) {  				if (AutoBegin != null)  					AutoBegin (this' e);  				if (status.Status.FMSAttached) {  					matchStart = new DateTime (DateTime.Now.Ticks);  					if (MatchStarted != null)  						MatchStarted (this' e);  				}  			}  			//Begin Telop  			else {  				if (TelopBegin != null)  					TelopBegin (this' e);  				if (status.Status.FMSAttached) {  					//Give Leeway  					if (DateTime.Now.Subtract (matchStart).Seconds >= 14 && DateTime.Now.Subtract (matchStart).Seconds <= 18) {  					}  					//uh oh!  					else {  						if (MatchAborted != null)  							MatchAborted (this' e);  					}  				}  			}  		}  		//Disable  		if (!status.Status.Enabled && stat.Enabled) {  			if (Disabled != null)  				Disabled (this' e);  			//end Auto  			if (status.Status.Auto) {  				if (AutoEnd != null)  					AutoEnd (this' e);  				if (status.Status.FMSAttached) {  					//Give Leeway  					if (DateTime.Now.Subtract (matchStart).Seconds >= 14 && DateTime.Now.Subtract (matchStart).Seconds <= 18) {  					}  					//uh oh!  					else {  						if (MatchAborted != null)  							MatchAborted (this' e);  					}  				}  			}  			//end Telop  			else {  				if (TelopEnd != null)  					TelopEnd (this' e);  				if (status.Status.FMSAttached) {  					//Give Leeway  					if (DateTime.Now.Subtract (matchStart).Seconds >= 14 && DateTime.Now.Subtract (matchStart).Seconds <= 18 && DateTime.Now.Subtract (matchStart).Minutes == 2) {  						if (MatchEnded != null)  							MatchEnded (this' e);  					}  					//uh oh!  					else {  						if (MatchAborted != null)  							MatchAborted (this' e);  					}  				}  			}  		}  		if (status.Status.EmergencyStopped && !stat.EmergencyStopped && EStopped != null)  			EStopped (this' e);  		if (status.Status.FMSAttached && !stat.FMSAttached && FMSAttached != null)  			FMSAttached (this' e);  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,RobotStatusEventMonitor,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\RobotStatusEventMonitor.cs,UpdateStatus,The following statement contains a magic number: if (EnableEvents) {  	EventArgs e = new EventArgs ();  	if (NewPacketRecieved != null)  		NewPacketRecieved (this' e);  	if (status.Error.PacketLost && PacketLost != null)  		PacketLost (this' e);  	//RobotCom  	if (status.Status.RobotAttached) {  		if (!stat.RobotAttached && RobotConnected != null)  			RobotConnected (this' e);  		//Enable  		if (status.Status.Enabled && !stat.Enabled) {  			if (Enabled != null)  				Enabled (this' e);  			//Begin Auto  			if (status.Status.Auto) {  				if (AutoBegin != null)  					AutoBegin (this' e);  				if (status.Status.FMSAttached) {  					matchStart = new DateTime (DateTime.Now.Ticks);  					if (MatchStarted != null)  						MatchStarted (this' e);  				}  			}  			//Begin Telop  			else {  				if (TelopBegin != null)  					TelopBegin (this' e);  				if (status.Status.FMSAttached) {  					//Give Leeway  					if (DateTime.Now.Subtract (matchStart).Seconds >= 14 && DateTime.Now.Subtract (matchStart).Seconds <= 18) {  					}  					//uh oh!  					else {  						if (MatchAborted != null)  							MatchAborted (this' e);  					}  				}  			}  		}  		//Disable  		if (!status.Status.Enabled && stat.Enabled) {  			if (Disabled != null)  				Disabled (this' e);  			//end Auto  			if (status.Status.Auto) {  				if (AutoEnd != null)  					AutoEnd (this' e);  				if (status.Status.FMSAttached) {  					//Give Leeway  					if (DateTime.Now.Subtract (matchStart).Seconds >= 14 && DateTime.Now.Subtract (matchStart).Seconds <= 18) {  					}  					//uh oh!  					else {  						if (MatchAborted != null)  							MatchAborted (this' e);  					}  				}  			}  			//end Telop  			else {  				if (TelopEnd != null)  					TelopEnd (this' e);  				if (status.Status.FMSAttached) {  					//Give Leeway  					if (DateTime.Now.Subtract (matchStart).Seconds >= 14 && DateTime.Now.Subtract (matchStart).Seconds <= 18 && DateTime.Now.Subtract (matchStart).Minutes == 2) {  						if (MatchEnded != null)  							MatchEnded (this' e);  					}  					//uh oh!  					else {  						if (MatchAborted != null)  							MatchAborted (this' e);  					}  				}  			}  		}  		if (status.Status.EmergencyStopped && !stat.EmergencyStopped && EStopped != null)  			EStopped (this' e);  		if (status.Status.FMSAttached && !stat.FMSAttached && FMSAttached != null)  			FMSAttached (this' e);  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,RobotStatusEventMonitor,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\RobotStatusEventMonitor.cs,UpdateStatus,The following statement contains a magic number: if (EnableEvents) {  	EventArgs e = new EventArgs ();  	if (NewPacketRecieved != null)  		NewPacketRecieved (this' e);  	if (status.Error.PacketLost && PacketLost != null)  		PacketLost (this' e);  	//RobotCom  	if (status.Status.RobotAttached) {  		if (!stat.RobotAttached && RobotConnected != null)  			RobotConnected (this' e);  		//Enable  		if (status.Status.Enabled && !stat.Enabled) {  			if (Enabled != null)  				Enabled (this' e);  			//Begin Auto  			if (status.Status.Auto) {  				if (AutoBegin != null)  					AutoBegin (this' e);  				if (status.Status.FMSAttached) {  					matchStart = new DateTime (DateTime.Now.Ticks);  					if (MatchStarted != null)  						MatchStarted (this' e);  				}  			}  			//Begin Telop  			else {  				if (TelopBegin != null)  					TelopBegin (this' e);  				if (status.Status.FMSAttached) {  					//Give Leeway  					if (DateTime.Now.Subtract (matchStart).Seconds >= 14 && DateTime.Now.Subtract (matchStart).Seconds <= 18) {  					}  					//uh oh!  					else {  						if (MatchAborted != null)  							MatchAborted (this' e);  					}  				}  			}  		}  		//Disable  		if (!status.Status.Enabled && stat.Enabled) {  			if (Disabled != null)  				Disabled (this' e);  			//end Auto  			if (status.Status.Auto) {  				if (AutoEnd != null)  					AutoEnd (this' e);  				if (status.Status.FMSAttached) {  					//Give Leeway  					if (DateTime.Now.Subtract (matchStart).Seconds >= 14 && DateTime.Now.Subtract (matchStart).Seconds <= 18) {  					}  					//uh oh!  					else {  						if (MatchAborted != null)  							MatchAborted (this' e);  					}  				}  			}  			//end Telop  			else {  				if (TelopEnd != null)  					TelopEnd (this' e);  				if (status.Status.FMSAttached) {  					//Give Leeway  					if (DateTime.Now.Subtract (matchStart).Seconds >= 14 && DateTime.Now.Subtract (matchStart).Seconds <= 18 && DateTime.Now.Subtract (matchStart).Minutes == 2) {  						if (MatchEnded != null)  							MatchEnded (this' e);  					}  					//uh oh!  					else {  						if (MatchAborted != null)  							MatchAborted (this' e);  					}  				}  			}  		}  		if (status.Status.EmergencyStopped && !stat.EmergencyStopped && EStopped != null)  			EStopped (this' e);  		if (status.Status.FMSAttached && !stat.FMSAttached && FMSAttached != null)  			FMSAttached (this' e);  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,RobotStatusEventMonitor,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\RobotStatusEventMonitor.cs,UpdateStatus,The following statement contains a magic number: if (EnableEvents) {  	EventArgs e = new EventArgs ();  	if (NewPacketRecieved != null)  		NewPacketRecieved (this' e);  	if (status.Error.PacketLost && PacketLost != null)  		PacketLost (this' e);  	//RobotCom  	if (status.Status.RobotAttached) {  		if (!stat.RobotAttached && RobotConnected != null)  			RobotConnected (this' e);  		//Enable  		if (status.Status.Enabled && !stat.Enabled) {  			if (Enabled != null)  				Enabled (this' e);  			//Begin Auto  			if (status.Status.Auto) {  				if (AutoBegin != null)  					AutoBegin (this' e);  				if (status.Status.FMSAttached) {  					matchStart = new DateTime (DateTime.Now.Ticks);  					if (MatchStarted != null)  						MatchStarted (this' e);  				}  			}  			//Begin Telop  			else {  				if (TelopBegin != null)  					TelopBegin (this' e);  				if (status.Status.FMSAttached) {  					//Give Leeway  					if (DateTime.Now.Subtract (matchStart).Seconds >= 14 && DateTime.Now.Subtract (matchStart).Seconds <= 18) {  					}  					//uh oh!  					else {  						if (MatchAborted != null)  							MatchAborted (this' e);  					}  				}  			}  		}  		//Disable  		if (!status.Status.Enabled && stat.Enabled) {  			if (Disabled != null)  				Disabled (this' e);  			//end Auto  			if (status.Status.Auto) {  				if (AutoEnd != null)  					AutoEnd (this' e);  				if (status.Status.FMSAttached) {  					//Give Leeway  					if (DateTime.Now.Subtract (matchStart).Seconds >= 14 && DateTime.Now.Subtract (matchStart).Seconds <= 18) {  					}  					//uh oh!  					else {  						if (MatchAborted != null)  							MatchAborted (this' e);  					}  				}  			}  			//end Telop  			else {  				if (TelopEnd != null)  					TelopEnd (this' e);  				if (status.Status.FMSAttached) {  					//Give Leeway  					if (DateTime.Now.Subtract (matchStart).Seconds >= 14 && DateTime.Now.Subtract (matchStart).Seconds <= 18 && DateTime.Now.Subtract (matchStart).Minutes == 2) {  						if (MatchEnded != null)  							MatchEnded (this' e);  					}  					//uh oh!  					else {  						if (MatchAborted != null)  							MatchAborted (this' e);  					}  				}  			}  		}  		if (status.Status.EmergencyStopped && !stat.EmergencyStopped && EStopped != null)  			EStopped (this' e);  		if (status.Status.FMSAttached && !stat.FMSAttached && FMSAttached != null)  			FMSAttached (this' e);  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,RobotStatusEventMonitor,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\RobotStatusEventMonitor.cs,UpdateStatus,The following statement contains a magic number: if (EnableEvents) {  	EventArgs e = new EventArgs ();  	if (NewPacketRecieved != null)  		NewPacketRecieved (this' e);  	if (status.Error.PacketLost && PacketLost != null)  		PacketLost (this' e);  	//RobotCom  	if (status.Status.RobotAttached) {  		if (!stat.RobotAttached && RobotConnected != null)  			RobotConnected (this' e);  		//Enable  		if (status.Status.Enabled && !stat.Enabled) {  			if (Enabled != null)  				Enabled (this' e);  			//Begin Auto  			if (status.Status.Auto) {  				if (AutoBegin != null)  					AutoBegin (this' e);  				if (status.Status.FMSAttached) {  					matchStart = new DateTime (DateTime.Now.Ticks);  					if (MatchStarted != null)  						MatchStarted (this' e);  				}  			}  			//Begin Telop  			else {  				if (TelopBegin != null)  					TelopBegin (this' e);  				if (status.Status.FMSAttached) {  					//Give Leeway  					if (DateTime.Now.Subtract (matchStart).Seconds >= 14 && DateTime.Now.Subtract (matchStart).Seconds <= 18) {  					}  					//uh oh!  					else {  						if (MatchAborted != null)  							MatchAborted (this' e);  					}  				}  			}  		}  		//Disable  		if (!status.Status.Enabled && stat.Enabled) {  			if (Disabled != null)  				Disabled (this' e);  			//end Auto  			if (status.Status.Auto) {  				if (AutoEnd != null)  					AutoEnd (this' e);  				if (status.Status.FMSAttached) {  					//Give Leeway  					if (DateTime.Now.Subtract (matchStart).Seconds >= 14 && DateTime.Now.Subtract (matchStart).Seconds <= 18) {  					}  					//uh oh!  					else {  						if (MatchAborted != null)  							MatchAborted (this' e);  					}  				}  			}  			//end Telop  			else {  				if (TelopEnd != null)  					TelopEnd (this' e);  				if (status.Status.FMSAttached) {  					//Give Leeway  					if (DateTime.Now.Subtract (matchStart).Seconds >= 14 && DateTime.Now.Subtract (matchStart).Seconds <= 18 && DateTime.Now.Subtract (matchStart).Minutes == 2) {  						if (MatchEnded != null)  							MatchEnded (this' e);  					}  					//uh oh!  					else {  						if (MatchAborted != null)  							MatchAborted (this' e);  					}  				}  			}  		}  		if (status.Status.EmergencyStopped && !stat.EmergencyStopped && EStopped != null)  			EStopped (this' e);  		if (status.Status.FMSAttached && !stat.FMSAttached && FMSAttached != null)  			FMSAttached (this' e);  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,RobotStatusEventMonitor,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\RobotStatusEventMonitor.cs,UpdateStatus,The following statement contains a magic number: if (EnableEvents) {  	EventArgs e = new EventArgs ();  	if (NewPacketRecieved != null)  		NewPacketRecieved (this' e);  	if (status.Error.PacketLost && PacketLost != null)  		PacketLost (this' e);  	//RobotCom  	if (status.Status.RobotAttached) {  		if (!stat.RobotAttached && RobotConnected != null)  			RobotConnected (this' e);  		//Enable  		if (status.Status.Enabled && !stat.Enabled) {  			if (Enabled != null)  				Enabled (this' e);  			//Begin Auto  			if (status.Status.Auto) {  				if (AutoBegin != null)  					AutoBegin (this' e);  				if (status.Status.FMSAttached) {  					matchStart = new DateTime (DateTime.Now.Ticks);  					if (MatchStarted != null)  						MatchStarted (this' e);  				}  			}  			//Begin Telop  			else {  				if (TelopBegin != null)  					TelopBegin (this' e);  				if (status.Status.FMSAttached) {  					//Give Leeway  					if (DateTime.Now.Subtract (matchStart).Seconds >= 14 && DateTime.Now.Subtract (matchStart).Seconds <= 18) {  					}  					//uh oh!  					else {  						if (MatchAborted != null)  							MatchAborted (this' e);  					}  				}  			}  		}  		//Disable  		if (!status.Status.Enabled && stat.Enabled) {  			if (Disabled != null)  				Disabled (this' e);  			//end Auto  			if (status.Status.Auto) {  				if (AutoEnd != null)  					AutoEnd (this' e);  				if (status.Status.FMSAttached) {  					//Give Leeway  					if (DateTime.Now.Subtract (matchStart).Seconds >= 14 && DateTime.Now.Subtract (matchStart).Seconds <= 18) {  					}  					//uh oh!  					else {  						if (MatchAborted != null)  							MatchAborted (this' e);  					}  				}  			}  			//end Telop  			else {  				if (TelopEnd != null)  					TelopEnd (this' e);  				if (status.Status.FMSAttached) {  					//Give Leeway  					if (DateTime.Now.Subtract (matchStart).Seconds >= 14 && DateTime.Now.Subtract (matchStart).Seconds <= 18 && DateTime.Now.Subtract (matchStart).Minutes == 2) {  						if (MatchEnded != null)  							MatchEnded (this' e);  					}  					//uh oh!  					else {  						if (MatchAborted != null)  							MatchAborted (this' e);  					}  				}  			}  		}  		if (status.Status.EmergencyStopped && !stat.EmergencyStopped && EStopped != null)  			EStopped (this' e);  		if (status.Status.FMSAttached && !stat.FMSAttached && FMSAttached != null)  			FMSAttached (this' e);  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,RobotStatusEventMonitor,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\RobotStatusEventMonitor.cs,UpdateStatus,The following statement contains a magic number: if (EnableEvents) {  	EventArgs e = new EventArgs ();  	if (NewPacketRecieved != null)  		NewPacketRecieved (this' e);  	if (status.Error.PacketLost && PacketLost != null)  		PacketLost (this' e);  	//RobotCom  	if (status.Status.RobotAttached) {  		if (!stat.RobotAttached && RobotConnected != null)  			RobotConnected (this' e);  		//Enable  		if (status.Status.Enabled && !stat.Enabled) {  			if (Enabled != null)  				Enabled (this' e);  			//Begin Auto  			if (status.Status.Auto) {  				if (AutoBegin != null)  					AutoBegin (this' e);  				if (status.Status.FMSAttached) {  					matchStart = new DateTime (DateTime.Now.Ticks);  					if (MatchStarted != null)  						MatchStarted (this' e);  				}  			}  			//Begin Telop  			else {  				if (TelopBegin != null)  					TelopBegin (this' e);  				if (status.Status.FMSAttached) {  					//Give Leeway  					if (DateTime.Now.Subtract (matchStart).Seconds >= 14 && DateTime.Now.Subtract (matchStart).Seconds <= 18) {  					}  					//uh oh!  					else {  						if (MatchAborted != null)  							MatchAborted (this' e);  					}  				}  			}  		}  		//Disable  		if (!status.Status.Enabled && stat.Enabled) {  			if (Disabled != null)  				Disabled (this' e);  			//end Auto  			if (status.Status.Auto) {  				if (AutoEnd != null)  					AutoEnd (this' e);  				if (status.Status.FMSAttached) {  					//Give Leeway  					if (DateTime.Now.Subtract (matchStart).Seconds >= 14 && DateTime.Now.Subtract (matchStart).Seconds <= 18) {  					}  					//uh oh!  					else {  						if (MatchAborted != null)  							MatchAborted (this' e);  					}  				}  			}  			//end Telop  			else {  				if (TelopEnd != null)  					TelopEnd (this' e);  				if (status.Status.FMSAttached) {  					//Give Leeway  					if (DateTime.Now.Subtract (matchStart).Seconds >= 14 && DateTime.Now.Subtract (matchStart).Seconds <= 18 && DateTime.Now.Subtract (matchStart).Minutes == 2) {  						if (MatchEnded != null)  							MatchEnded (this' e);  					}  					//uh oh!  					else {  						if (MatchAborted != null)  							MatchAborted (this' e);  					}  				}  			}  		}  		if (status.Status.EmergencyStopped && !stat.EmergencyStopped && EStopped != null)  			EStopped (this' e);  		if (status.Status.FMSAttached && !stat.FMSAttached && FMSAttached != null)  			FMSAttached (this' e);  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,RobotStatusEventMonitor,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\RobotStatusEventMonitor.cs,UpdateStatus,The following statement contains a magic number: if (status.Status.RobotAttached) {  	if (!stat.RobotAttached && RobotConnected != null)  		RobotConnected (this' e);  	//Enable  	if (status.Status.Enabled && !stat.Enabled) {  		if (Enabled != null)  			Enabled (this' e);  		//Begin Auto  		if (status.Status.Auto) {  			if (AutoBegin != null)  				AutoBegin (this' e);  			if (status.Status.FMSAttached) {  				matchStart = new DateTime (DateTime.Now.Ticks);  				if (MatchStarted != null)  					MatchStarted (this' e);  			}  		}  		//Begin Telop  		else {  			if (TelopBegin != null)  				TelopBegin (this' e);  			if (status.Status.FMSAttached) {  				//Give Leeway  				if (DateTime.Now.Subtract (matchStart).Seconds >= 14 && DateTime.Now.Subtract (matchStart).Seconds <= 18) {  				}  				//uh oh!  				else {  					if (MatchAborted != null)  						MatchAborted (this' e);  				}  			}  		}  	}  	//Disable  	if (!status.Status.Enabled && stat.Enabled) {  		if (Disabled != null)  			Disabled (this' e);  		//end Auto  		if (status.Status.Auto) {  			if (AutoEnd != null)  				AutoEnd (this' e);  			if (status.Status.FMSAttached) {  				//Give Leeway  				if (DateTime.Now.Subtract (matchStart).Seconds >= 14 && DateTime.Now.Subtract (matchStart).Seconds <= 18) {  				}  				//uh oh!  				else {  					if (MatchAborted != null)  						MatchAborted (this' e);  				}  			}  		}  		//end Telop  		else {  			if (TelopEnd != null)  				TelopEnd (this' e);  			if (status.Status.FMSAttached) {  				//Give Leeway  				if (DateTime.Now.Subtract (matchStart).Seconds >= 14 && DateTime.Now.Subtract (matchStart).Seconds <= 18 && DateTime.Now.Subtract (matchStart).Minutes == 2) {  					if (MatchEnded != null)  						MatchEnded (this' e);  				}  				//uh oh!  				else {  					if (MatchAborted != null)  						MatchAborted (this' e);  				}  			}  		}  	}  	if (status.Status.EmergencyStopped && !stat.EmergencyStopped && EStopped != null)  		EStopped (this' e);  	if (status.Status.FMSAttached && !stat.FMSAttached && FMSAttached != null)  		FMSAttached (this' e);  }  
Magic Number,System451.Communication.Dashboard.Utils,RobotStatusEventMonitor,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\RobotStatusEventMonitor.cs,UpdateStatus,The following statement contains a magic number: if (status.Status.RobotAttached) {  	if (!stat.RobotAttached && RobotConnected != null)  		RobotConnected (this' e);  	//Enable  	if (status.Status.Enabled && !stat.Enabled) {  		if (Enabled != null)  			Enabled (this' e);  		//Begin Auto  		if (status.Status.Auto) {  			if (AutoBegin != null)  				AutoBegin (this' e);  			if (status.Status.FMSAttached) {  				matchStart = new DateTime (DateTime.Now.Ticks);  				if (MatchStarted != null)  					MatchStarted (this' e);  			}  		}  		//Begin Telop  		else {  			if (TelopBegin != null)  				TelopBegin (this' e);  			if (status.Status.FMSAttached) {  				//Give Leeway  				if (DateTime.Now.Subtract (matchStart).Seconds >= 14 && DateTime.Now.Subtract (matchStart).Seconds <= 18) {  				}  				//uh oh!  				else {  					if (MatchAborted != null)  						MatchAborted (this' e);  				}  			}  		}  	}  	//Disable  	if (!status.Status.Enabled && stat.Enabled) {  		if (Disabled != null)  			Disabled (this' e);  		//end Auto  		if (status.Status.Auto) {  			if (AutoEnd != null)  				AutoEnd (this' e);  			if (status.Status.FMSAttached) {  				//Give Leeway  				if (DateTime.Now.Subtract (matchStart).Seconds >= 14 && DateTime.Now.Subtract (matchStart).Seconds <= 18) {  				}  				//uh oh!  				else {  					if (MatchAborted != null)  						MatchAborted (this' e);  				}  			}  		}  		//end Telop  		else {  			if (TelopEnd != null)  				TelopEnd (this' e);  			if (status.Status.FMSAttached) {  				//Give Leeway  				if (DateTime.Now.Subtract (matchStart).Seconds >= 14 && DateTime.Now.Subtract (matchStart).Seconds <= 18 && DateTime.Now.Subtract (matchStart).Minutes == 2) {  					if (MatchEnded != null)  						MatchEnded (this' e);  				}  				//uh oh!  				else {  					if (MatchAborted != null)  						MatchAborted (this' e);  				}  			}  		}  	}  	if (status.Status.EmergencyStopped && !stat.EmergencyStopped && EStopped != null)  		EStopped (this' e);  	if (status.Status.FMSAttached && !stat.FMSAttached && FMSAttached != null)  		FMSAttached (this' e);  }  
Magic Number,System451.Communication.Dashboard.Utils,RobotStatusEventMonitor,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\RobotStatusEventMonitor.cs,UpdateStatus,The following statement contains a magic number: if (status.Status.RobotAttached) {  	if (!stat.RobotAttached && RobotConnected != null)  		RobotConnected (this' e);  	//Enable  	if (status.Status.Enabled && !stat.Enabled) {  		if (Enabled != null)  			Enabled (this' e);  		//Begin Auto  		if (status.Status.Auto) {  			if (AutoBegin != null)  				AutoBegin (this' e);  			if (status.Status.FMSAttached) {  				matchStart = new DateTime (DateTime.Now.Ticks);  				if (MatchStarted != null)  					MatchStarted (this' e);  			}  		}  		//Begin Telop  		else {  			if (TelopBegin != null)  				TelopBegin (this' e);  			if (status.Status.FMSAttached) {  				//Give Leeway  				if (DateTime.Now.Subtract (matchStart).Seconds >= 14 && DateTime.Now.Subtract (matchStart).Seconds <= 18) {  				}  				//uh oh!  				else {  					if (MatchAborted != null)  						MatchAborted (this' e);  				}  			}  		}  	}  	//Disable  	if (!status.Status.Enabled && stat.Enabled) {  		if (Disabled != null)  			Disabled (this' e);  		//end Auto  		if (status.Status.Auto) {  			if (AutoEnd != null)  				AutoEnd (this' e);  			if (status.Status.FMSAttached) {  				//Give Leeway  				if (DateTime.Now.Subtract (matchStart).Seconds >= 14 && DateTime.Now.Subtract (matchStart).Seconds <= 18) {  				}  				//uh oh!  				else {  					if (MatchAborted != null)  						MatchAborted (this' e);  				}  			}  		}  		//end Telop  		else {  			if (TelopEnd != null)  				TelopEnd (this' e);  			if (status.Status.FMSAttached) {  				//Give Leeway  				if (DateTime.Now.Subtract (matchStart).Seconds >= 14 && DateTime.Now.Subtract (matchStart).Seconds <= 18 && DateTime.Now.Subtract (matchStart).Minutes == 2) {  					if (MatchEnded != null)  						MatchEnded (this' e);  				}  				//uh oh!  				else {  					if (MatchAborted != null)  						MatchAborted (this' e);  				}  			}  		}  	}  	if (status.Status.EmergencyStopped && !stat.EmergencyStopped && EStopped != null)  		EStopped (this' e);  	if (status.Status.FMSAttached && !stat.FMSAttached && FMSAttached != null)  		FMSAttached (this' e);  }  
Magic Number,System451.Communication.Dashboard.Utils,RobotStatusEventMonitor,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\RobotStatusEventMonitor.cs,UpdateStatus,The following statement contains a magic number: if (status.Status.RobotAttached) {  	if (!stat.RobotAttached && RobotConnected != null)  		RobotConnected (this' e);  	//Enable  	if (status.Status.Enabled && !stat.Enabled) {  		if (Enabled != null)  			Enabled (this' e);  		//Begin Auto  		if (status.Status.Auto) {  			if (AutoBegin != null)  				AutoBegin (this' e);  			if (status.Status.FMSAttached) {  				matchStart = new DateTime (DateTime.Now.Ticks);  				if (MatchStarted != null)  					MatchStarted (this' e);  			}  		}  		//Begin Telop  		else {  			if (TelopBegin != null)  				TelopBegin (this' e);  			if (status.Status.FMSAttached) {  				//Give Leeway  				if (DateTime.Now.Subtract (matchStart).Seconds >= 14 && DateTime.Now.Subtract (matchStart).Seconds <= 18) {  				}  				//uh oh!  				else {  					if (MatchAborted != null)  						MatchAborted (this' e);  				}  			}  		}  	}  	//Disable  	if (!status.Status.Enabled && stat.Enabled) {  		if (Disabled != null)  			Disabled (this' e);  		//end Auto  		if (status.Status.Auto) {  			if (AutoEnd != null)  				AutoEnd (this' e);  			if (status.Status.FMSAttached) {  				//Give Leeway  				if (DateTime.Now.Subtract (matchStart).Seconds >= 14 && DateTime.Now.Subtract (matchStart).Seconds <= 18) {  				}  				//uh oh!  				else {  					if (MatchAborted != null)  						MatchAborted (this' e);  				}  			}  		}  		//end Telop  		else {  			if (TelopEnd != null)  				TelopEnd (this' e);  			if (status.Status.FMSAttached) {  				//Give Leeway  				if (DateTime.Now.Subtract (matchStart).Seconds >= 14 && DateTime.Now.Subtract (matchStart).Seconds <= 18 && DateTime.Now.Subtract (matchStart).Minutes == 2) {  					if (MatchEnded != null)  						MatchEnded (this' e);  				}  				//uh oh!  				else {  					if (MatchAborted != null)  						MatchAborted (this' e);  				}  			}  		}  	}  	if (status.Status.EmergencyStopped && !stat.EmergencyStopped && EStopped != null)  		EStopped (this' e);  	if (status.Status.FMSAttached && !stat.FMSAttached && FMSAttached != null)  		FMSAttached (this' e);  }  
Magic Number,System451.Communication.Dashboard.Utils,RobotStatusEventMonitor,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\RobotStatusEventMonitor.cs,UpdateStatus,The following statement contains a magic number: if (status.Status.RobotAttached) {  	if (!stat.RobotAttached && RobotConnected != null)  		RobotConnected (this' e);  	//Enable  	if (status.Status.Enabled && !stat.Enabled) {  		if (Enabled != null)  			Enabled (this' e);  		//Begin Auto  		if (status.Status.Auto) {  			if (AutoBegin != null)  				AutoBegin (this' e);  			if (status.Status.FMSAttached) {  				matchStart = new DateTime (DateTime.Now.Ticks);  				if (MatchStarted != null)  					MatchStarted (this' e);  			}  		}  		//Begin Telop  		else {  			if (TelopBegin != null)  				TelopBegin (this' e);  			if (status.Status.FMSAttached) {  				//Give Leeway  				if (DateTime.Now.Subtract (matchStart).Seconds >= 14 && DateTime.Now.Subtract (matchStart).Seconds <= 18) {  				}  				//uh oh!  				else {  					if (MatchAborted != null)  						MatchAborted (this' e);  				}  			}  		}  	}  	//Disable  	if (!status.Status.Enabled && stat.Enabled) {  		if (Disabled != null)  			Disabled (this' e);  		//end Auto  		if (status.Status.Auto) {  			if (AutoEnd != null)  				AutoEnd (this' e);  			if (status.Status.FMSAttached) {  				//Give Leeway  				if (DateTime.Now.Subtract (matchStart).Seconds >= 14 && DateTime.Now.Subtract (matchStart).Seconds <= 18) {  				}  				//uh oh!  				else {  					if (MatchAborted != null)  						MatchAborted (this' e);  				}  			}  		}  		//end Telop  		else {  			if (TelopEnd != null)  				TelopEnd (this' e);  			if (status.Status.FMSAttached) {  				//Give Leeway  				if (DateTime.Now.Subtract (matchStart).Seconds >= 14 && DateTime.Now.Subtract (matchStart).Seconds <= 18 && DateTime.Now.Subtract (matchStart).Minutes == 2) {  					if (MatchEnded != null)  						MatchEnded (this' e);  				}  				//uh oh!  				else {  					if (MatchAborted != null)  						MatchAborted (this' e);  				}  			}  		}  	}  	if (status.Status.EmergencyStopped && !stat.EmergencyStopped && EStopped != null)  		EStopped (this' e);  	if (status.Status.FMSAttached && !stat.FMSAttached && FMSAttached != null)  		FMSAttached (this' e);  }  
Magic Number,System451.Communication.Dashboard.Utils,RobotStatusEventMonitor,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\RobotStatusEventMonitor.cs,UpdateStatus,The following statement contains a magic number: if (status.Status.RobotAttached) {  	if (!stat.RobotAttached && RobotConnected != null)  		RobotConnected (this' e);  	//Enable  	if (status.Status.Enabled && !stat.Enabled) {  		if (Enabled != null)  			Enabled (this' e);  		//Begin Auto  		if (status.Status.Auto) {  			if (AutoBegin != null)  				AutoBegin (this' e);  			if (status.Status.FMSAttached) {  				matchStart = new DateTime (DateTime.Now.Ticks);  				if (MatchStarted != null)  					MatchStarted (this' e);  			}  		}  		//Begin Telop  		else {  			if (TelopBegin != null)  				TelopBegin (this' e);  			if (status.Status.FMSAttached) {  				//Give Leeway  				if (DateTime.Now.Subtract (matchStart).Seconds >= 14 && DateTime.Now.Subtract (matchStart).Seconds <= 18) {  				}  				//uh oh!  				else {  					if (MatchAborted != null)  						MatchAborted (this' e);  				}  			}  		}  	}  	//Disable  	if (!status.Status.Enabled && stat.Enabled) {  		if (Disabled != null)  			Disabled (this' e);  		//end Auto  		if (status.Status.Auto) {  			if (AutoEnd != null)  				AutoEnd (this' e);  			if (status.Status.FMSAttached) {  				//Give Leeway  				if (DateTime.Now.Subtract (matchStart).Seconds >= 14 && DateTime.Now.Subtract (matchStart).Seconds <= 18) {  				}  				//uh oh!  				else {  					if (MatchAborted != null)  						MatchAborted (this' e);  				}  			}  		}  		//end Telop  		else {  			if (TelopEnd != null)  				TelopEnd (this' e);  			if (status.Status.FMSAttached) {  				//Give Leeway  				if (DateTime.Now.Subtract (matchStart).Seconds >= 14 && DateTime.Now.Subtract (matchStart).Seconds <= 18 && DateTime.Now.Subtract (matchStart).Minutes == 2) {  					if (MatchEnded != null)  						MatchEnded (this' e);  				}  				//uh oh!  				else {  					if (MatchAborted != null)  						MatchAborted (this' e);  				}  			}  		}  	}  	if (status.Status.EmergencyStopped && !stat.EmergencyStopped && EStopped != null)  		EStopped (this' e);  	if (status.Status.FMSAttached && !stat.FMSAttached && FMSAttached != null)  		FMSAttached (this' e);  }  
Magic Number,System451.Communication.Dashboard.Utils,RobotStatusEventMonitor,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\RobotStatusEventMonitor.cs,UpdateStatus,The following statement contains a magic number: if (status.Status.RobotAttached) {  	if (!stat.RobotAttached && RobotConnected != null)  		RobotConnected (this' e);  	//Enable  	if (status.Status.Enabled && !stat.Enabled) {  		if (Enabled != null)  			Enabled (this' e);  		//Begin Auto  		if (status.Status.Auto) {  			if (AutoBegin != null)  				AutoBegin (this' e);  			if (status.Status.FMSAttached) {  				matchStart = new DateTime (DateTime.Now.Ticks);  				if (MatchStarted != null)  					MatchStarted (this' e);  			}  		}  		//Begin Telop  		else {  			if (TelopBegin != null)  				TelopBegin (this' e);  			if (status.Status.FMSAttached) {  				//Give Leeway  				if (DateTime.Now.Subtract (matchStart).Seconds >= 14 && DateTime.Now.Subtract (matchStart).Seconds <= 18) {  				}  				//uh oh!  				else {  					if (MatchAborted != null)  						MatchAborted (this' e);  				}  			}  		}  	}  	//Disable  	if (!status.Status.Enabled && stat.Enabled) {  		if (Disabled != null)  			Disabled (this' e);  		//end Auto  		if (status.Status.Auto) {  			if (AutoEnd != null)  				AutoEnd (this' e);  			if (status.Status.FMSAttached) {  				//Give Leeway  				if (DateTime.Now.Subtract (matchStart).Seconds >= 14 && DateTime.Now.Subtract (matchStart).Seconds <= 18) {  				}  				//uh oh!  				else {  					if (MatchAborted != null)  						MatchAborted (this' e);  				}  			}  		}  		//end Telop  		else {  			if (TelopEnd != null)  				TelopEnd (this' e);  			if (status.Status.FMSAttached) {  				//Give Leeway  				if (DateTime.Now.Subtract (matchStart).Seconds >= 14 && DateTime.Now.Subtract (matchStart).Seconds <= 18 && DateTime.Now.Subtract (matchStart).Minutes == 2) {  					if (MatchEnded != null)  						MatchEnded (this' e);  				}  				//uh oh!  				else {  					if (MatchAborted != null)  						MatchAborted (this' e);  				}  			}  		}  	}  	if (status.Status.EmergencyStopped && !stat.EmergencyStopped && EStopped != null)  		EStopped (this' e);  	if (status.Status.FMSAttached && !stat.FMSAttached && FMSAttached != null)  		FMSAttached (this' e);  }  
Magic Number,System451.Communication.Dashboard.Utils,RobotStatusEventMonitor,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\RobotStatusEventMonitor.cs,UpdateStatus,The following statement contains a magic number: if (status.Status.Enabled && !stat.Enabled) {  	if (Enabled != null)  		Enabled (this' e);  	//Begin Auto  	if (status.Status.Auto) {  		if (AutoBegin != null)  			AutoBegin (this' e);  		if (status.Status.FMSAttached) {  			matchStart = new DateTime (DateTime.Now.Ticks);  			if (MatchStarted != null)  				MatchStarted (this' e);  		}  	}  	//Begin Telop  	else {  		if (TelopBegin != null)  			TelopBegin (this' e);  		if (status.Status.FMSAttached) {  			//Give Leeway  			if (DateTime.Now.Subtract (matchStart).Seconds >= 14 && DateTime.Now.Subtract (matchStart).Seconds <= 18) {  			}  			//uh oh!  			else {  				if (MatchAborted != null)  					MatchAborted (this' e);  			}  		}  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,RobotStatusEventMonitor,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\RobotStatusEventMonitor.cs,UpdateStatus,The following statement contains a magic number: if (status.Status.Enabled && !stat.Enabled) {  	if (Enabled != null)  		Enabled (this' e);  	//Begin Auto  	if (status.Status.Auto) {  		if (AutoBegin != null)  			AutoBegin (this' e);  		if (status.Status.FMSAttached) {  			matchStart = new DateTime (DateTime.Now.Ticks);  			if (MatchStarted != null)  				MatchStarted (this' e);  		}  	}  	//Begin Telop  	else {  		if (TelopBegin != null)  			TelopBegin (this' e);  		if (status.Status.FMSAttached) {  			//Give Leeway  			if (DateTime.Now.Subtract (matchStart).Seconds >= 14 && DateTime.Now.Subtract (matchStart).Seconds <= 18) {  			}  			//uh oh!  			else {  				if (MatchAborted != null)  					MatchAborted (this' e);  			}  		}  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,RobotStatusEventMonitor,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\RobotStatusEventMonitor.cs,UpdateStatus,The following statement contains a magic number: if (status.Status.Auto) {  	if (AutoBegin != null)  		AutoBegin (this' e);  	if (status.Status.FMSAttached) {  		matchStart = new DateTime (DateTime.Now.Ticks);  		if (MatchStarted != null)  			MatchStarted (this' e);  	}  }  //Begin Telop  else {  	if (TelopBegin != null)  		TelopBegin (this' e);  	if (status.Status.FMSAttached) {  		//Give Leeway  		if (DateTime.Now.Subtract (matchStart).Seconds >= 14 && DateTime.Now.Subtract (matchStart).Seconds <= 18) {  		}  		//uh oh!  		else {  			if (MatchAborted != null)  				MatchAborted (this' e);  		}  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,RobotStatusEventMonitor,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\RobotStatusEventMonitor.cs,UpdateStatus,The following statement contains a magic number: if (status.Status.Auto) {  	if (AutoBegin != null)  		AutoBegin (this' e);  	if (status.Status.FMSAttached) {  		matchStart = new DateTime (DateTime.Now.Ticks);  		if (MatchStarted != null)  			MatchStarted (this' e);  	}  }  //Begin Telop  else {  	if (TelopBegin != null)  		TelopBegin (this' e);  	if (status.Status.FMSAttached) {  		//Give Leeway  		if (DateTime.Now.Subtract (matchStart).Seconds >= 14 && DateTime.Now.Subtract (matchStart).Seconds <= 18) {  		}  		//uh oh!  		else {  			if (MatchAborted != null)  				MatchAborted (this' e);  		}  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,RobotStatusEventMonitor,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\RobotStatusEventMonitor.cs,UpdateStatus,The following statement contains a magic number: if (status.Status.FMSAttached) {  	//Give Leeway  	if (DateTime.Now.Subtract (matchStart).Seconds >= 14 && DateTime.Now.Subtract (matchStart).Seconds <= 18) {  	}  	//uh oh!  	else {  		if (MatchAborted != null)  			MatchAborted (this' e);  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,RobotStatusEventMonitor,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\RobotStatusEventMonitor.cs,UpdateStatus,The following statement contains a magic number: if (status.Status.FMSAttached) {  	//Give Leeway  	if (DateTime.Now.Subtract (matchStart).Seconds >= 14 && DateTime.Now.Subtract (matchStart).Seconds <= 18) {  	}  	//uh oh!  	else {  		if (MatchAborted != null)  			MatchAborted (this' e);  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,RobotStatusEventMonitor,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\RobotStatusEventMonitor.cs,UpdateStatus,The following statement contains a magic number: if (DateTime.Now.Subtract (matchStart).Seconds >= 14 && DateTime.Now.Subtract (matchStart).Seconds <= 18) {  }  //uh oh!  else {  	if (MatchAborted != null)  		MatchAborted (this' e);  }  
Magic Number,System451.Communication.Dashboard.Utils,RobotStatusEventMonitor,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\RobotStatusEventMonitor.cs,UpdateStatus,The following statement contains a magic number: if (DateTime.Now.Subtract (matchStart).Seconds >= 14 && DateTime.Now.Subtract (matchStart).Seconds <= 18) {  }  //uh oh!  else {  	if (MatchAborted != null)  		MatchAborted (this' e);  }  
Magic Number,System451.Communication.Dashboard.Utils,RobotStatusEventMonitor,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\RobotStatusEventMonitor.cs,UpdateStatus,The following statement contains a magic number: if (!status.Status.Enabled && stat.Enabled) {  	if (Disabled != null)  		Disabled (this' e);  	//end Auto  	if (status.Status.Auto) {  		if (AutoEnd != null)  			AutoEnd (this' e);  		if (status.Status.FMSAttached) {  			//Give Leeway  			if (DateTime.Now.Subtract (matchStart).Seconds >= 14 && DateTime.Now.Subtract (matchStart).Seconds <= 18) {  			}  			//uh oh!  			else {  				if (MatchAborted != null)  					MatchAborted (this' e);  			}  		}  	}  	//end Telop  	else {  		if (TelopEnd != null)  			TelopEnd (this' e);  		if (status.Status.FMSAttached) {  			//Give Leeway  			if (DateTime.Now.Subtract (matchStart).Seconds >= 14 && DateTime.Now.Subtract (matchStart).Seconds <= 18 && DateTime.Now.Subtract (matchStart).Minutes == 2) {  				if (MatchEnded != null)  					MatchEnded (this' e);  			}  			//uh oh!  			else {  				if (MatchAborted != null)  					MatchAborted (this' e);  			}  		}  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,RobotStatusEventMonitor,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\RobotStatusEventMonitor.cs,UpdateStatus,The following statement contains a magic number: if (!status.Status.Enabled && stat.Enabled) {  	if (Disabled != null)  		Disabled (this' e);  	//end Auto  	if (status.Status.Auto) {  		if (AutoEnd != null)  			AutoEnd (this' e);  		if (status.Status.FMSAttached) {  			//Give Leeway  			if (DateTime.Now.Subtract (matchStart).Seconds >= 14 && DateTime.Now.Subtract (matchStart).Seconds <= 18) {  			}  			//uh oh!  			else {  				if (MatchAborted != null)  					MatchAborted (this' e);  			}  		}  	}  	//end Telop  	else {  		if (TelopEnd != null)  			TelopEnd (this' e);  		if (status.Status.FMSAttached) {  			//Give Leeway  			if (DateTime.Now.Subtract (matchStart).Seconds >= 14 && DateTime.Now.Subtract (matchStart).Seconds <= 18 && DateTime.Now.Subtract (matchStart).Minutes == 2) {  				if (MatchEnded != null)  					MatchEnded (this' e);  			}  			//uh oh!  			else {  				if (MatchAborted != null)  					MatchAborted (this' e);  			}  		}  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,RobotStatusEventMonitor,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\RobotStatusEventMonitor.cs,UpdateStatus,The following statement contains a magic number: if (!status.Status.Enabled && stat.Enabled) {  	if (Disabled != null)  		Disabled (this' e);  	//end Auto  	if (status.Status.Auto) {  		if (AutoEnd != null)  			AutoEnd (this' e);  		if (status.Status.FMSAttached) {  			//Give Leeway  			if (DateTime.Now.Subtract (matchStart).Seconds >= 14 && DateTime.Now.Subtract (matchStart).Seconds <= 18) {  			}  			//uh oh!  			else {  				if (MatchAborted != null)  					MatchAborted (this' e);  			}  		}  	}  	//end Telop  	else {  		if (TelopEnd != null)  			TelopEnd (this' e);  		if (status.Status.FMSAttached) {  			//Give Leeway  			if (DateTime.Now.Subtract (matchStart).Seconds >= 14 && DateTime.Now.Subtract (matchStart).Seconds <= 18 && DateTime.Now.Subtract (matchStart).Minutes == 2) {  				if (MatchEnded != null)  					MatchEnded (this' e);  			}  			//uh oh!  			else {  				if (MatchAborted != null)  					MatchAborted (this' e);  			}  		}  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,RobotStatusEventMonitor,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\RobotStatusEventMonitor.cs,UpdateStatus,The following statement contains a magic number: if (!status.Status.Enabled && stat.Enabled) {  	if (Disabled != null)  		Disabled (this' e);  	//end Auto  	if (status.Status.Auto) {  		if (AutoEnd != null)  			AutoEnd (this' e);  		if (status.Status.FMSAttached) {  			//Give Leeway  			if (DateTime.Now.Subtract (matchStart).Seconds >= 14 && DateTime.Now.Subtract (matchStart).Seconds <= 18) {  			}  			//uh oh!  			else {  				if (MatchAborted != null)  					MatchAborted (this' e);  			}  		}  	}  	//end Telop  	else {  		if (TelopEnd != null)  			TelopEnd (this' e);  		if (status.Status.FMSAttached) {  			//Give Leeway  			if (DateTime.Now.Subtract (matchStart).Seconds >= 14 && DateTime.Now.Subtract (matchStart).Seconds <= 18 && DateTime.Now.Subtract (matchStart).Minutes == 2) {  				if (MatchEnded != null)  					MatchEnded (this' e);  			}  			//uh oh!  			else {  				if (MatchAborted != null)  					MatchAborted (this' e);  			}  		}  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,RobotStatusEventMonitor,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\RobotStatusEventMonitor.cs,UpdateStatus,The following statement contains a magic number: if (!status.Status.Enabled && stat.Enabled) {  	if (Disabled != null)  		Disabled (this' e);  	//end Auto  	if (status.Status.Auto) {  		if (AutoEnd != null)  			AutoEnd (this' e);  		if (status.Status.FMSAttached) {  			//Give Leeway  			if (DateTime.Now.Subtract (matchStart).Seconds >= 14 && DateTime.Now.Subtract (matchStart).Seconds <= 18) {  			}  			//uh oh!  			else {  				if (MatchAborted != null)  					MatchAborted (this' e);  			}  		}  	}  	//end Telop  	else {  		if (TelopEnd != null)  			TelopEnd (this' e);  		if (status.Status.FMSAttached) {  			//Give Leeway  			if (DateTime.Now.Subtract (matchStart).Seconds >= 14 && DateTime.Now.Subtract (matchStart).Seconds <= 18 && DateTime.Now.Subtract (matchStart).Minutes == 2) {  				if (MatchEnded != null)  					MatchEnded (this' e);  			}  			//uh oh!  			else {  				if (MatchAborted != null)  					MatchAborted (this' e);  			}  		}  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,RobotStatusEventMonitor,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\RobotStatusEventMonitor.cs,UpdateStatus,The following statement contains a magic number: if (status.Status.Auto) {  	if (AutoEnd != null)  		AutoEnd (this' e);  	if (status.Status.FMSAttached) {  		//Give Leeway  		if (DateTime.Now.Subtract (matchStart).Seconds >= 14 && DateTime.Now.Subtract (matchStart).Seconds <= 18) {  		}  		//uh oh!  		else {  			if (MatchAborted != null)  				MatchAborted (this' e);  		}  	}  }  //end Telop  else {  	if (TelopEnd != null)  		TelopEnd (this' e);  	if (status.Status.FMSAttached) {  		//Give Leeway  		if (DateTime.Now.Subtract (matchStart).Seconds >= 14 && DateTime.Now.Subtract (matchStart).Seconds <= 18 && DateTime.Now.Subtract (matchStart).Minutes == 2) {  			if (MatchEnded != null)  				MatchEnded (this' e);  		}  		//uh oh!  		else {  			if (MatchAborted != null)  				MatchAborted (this' e);  		}  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,RobotStatusEventMonitor,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\RobotStatusEventMonitor.cs,UpdateStatus,The following statement contains a magic number: if (status.Status.Auto) {  	if (AutoEnd != null)  		AutoEnd (this' e);  	if (status.Status.FMSAttached) {  		//Give Leeway  		if (DateTime.Now.Subtract (matchStart).Seconds >= 14 && DateTime.Now.Subtract (matchStart).Seconds <= 18) {  		}  		//uh oh!  		else {  			if (MatchAborted != null)  				MatchAborted (this' e);  		}  	}  }  //end Telop  else {  	if (TelopEnd != null)  		TelopEnd (this' e);  	if (status.Status.FMSAttached) {  		//Give Leeway  		if (DateTime.Now.Subtract (matchStart).Seconds >= 14 && DateTime.Now.Subtract (matchStart).Seconds <= 18 && DateTime.Now.Subtract (matchStart).Minutes == 2) {  			if (MatchEnded != null)  				MatchEnded (this' e);  		}  		//uh oh!  		else {  			if (MatchAborted != null)  				MatchAborted (this' e);  		}  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,RobotStatusEventMonitor,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\RobotStatusEventMonitor.cs,UpdateStatus,The following statement contains a magic number: if (status.Status.Auto) {  	if (AutoEnd != null)  		AutoEnd (this' e);  	if (status.Status.FMSAttached) {  		//Give Leeway  		if (DateTime.Now.Subtract (matchStart).Seconds >= 14 && DateTime.Now.Subtract (matchStart).Seconds <= 18) {  		}  		//uh oh!  		else {  			if (MatchAborted != null)  				MatchAborted (this' e);  		}  	}  }  //end Telop  else {  	if (TelopEnd != null)  		TelopEnd (this' e);  	if (status.Status.FMSAttached) {  		//Give Leeway  		if (DateTime.Now.Subtract (matchStart).Seconds >= 14 && DateTime.Now.Subtract (matchStart).Seconds <= 18 && DateTime.Now.Subtract (matchStart).Minutes == 2) {  			if (MatchEnded != null)  				MatchEnded (this' e);  		}  		//uh oh!  		else {  			if (MatchAborted != null)  				MatchAborted (this' e);  		}  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,RobotStatusEventMonitor,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\RobotStatusEventMonitor.cs,UpdateStatus,The following statement contains a magic number: if (status.Status.Auto) {  	if (AutoEnd != null)  		AutoEnd (this' e);  	if (status.Status.FMSAttached) {  		//Give Leeway  		if (DateTime.Now.Subtract (matchStart).Seconds >= 14 && DateTime.Now.Subtract (matchStart).Seconds <= 18) {  		}  		//uh oh!  		else {  			if (MatchAborted != null)  				MatchAborted (this' e);  		}  	}  }  //end Telop  else {  	if (TelopEnd != null)  		TelopEnd (this' e);  	if (status.Status.FMSAttached) {  		//Give Leeway  		if (DateTime.Now.Subtract (matchStart).Seconds >= 14 && DateTime.Now.Subtract (matchStart).Seconds <= 18 && DateTime.Now.Subtract (matchStart).Minutes == 2) {  			if (MatchEnded != null)  				MatchEnded (this' e);  		}  		//uh oh!  		else {  			if (MatchAborted != null)  				MatchAborted (this' e);  		}  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,RobotStatusEventMonitor,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\RobotStatusEventMonitor.cs,UpdateStatus,The following statement contains a magic number: if (status.Status.Auto) {  	if (AutoEnd != null)  		AutoEnd (this' e);  	if (status.Status.FMSAttached) {  		//Give Leeway  		if (DateTime.Now.Subtract (matchStart).Seconds >= 14 && DateTime.Now.Subtract (matchStart).Seconds <= 18) {  		}  		//uh oh!  		else {  			if (MatchAborted != null)  				MatchAborted (this' e);  		}  	}  }  //end Telop  else {  	if (TelopEnd != null)  		TelopEnd (this' e);  	if (status.Status.FMSAttached) {  		//Give Leeway  		if (DateTime.Now.Subtract (matchStart).Seconds >= 14 && DateTime.Now.Subtract (matchStart).Seconds <= 18 && DateTime.Now.Subtract (matchStart).Minutes == 2) {  			if (MatchEnded != null)  				MatchEnded (this' e);  		}  		//uh oh!  		else {  			if (MatchAborted != null)  				MatchAborted (this' e);  		}  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,RobotStatusEventMonitor,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\RobotStatusEventMonitor.cs,UpdateStatus,The following statement contains a magic number: if (status.Status.FMSAttached) {  	//Give Leeway  	if (DateTime.Now.Subtract (matchStart).Seconds >= 14 && DateTime.Now.Subtract (matchStart).Seconds <= 18) {  	}  	//uh oh!  	else {  		if (MatchAborted != null)  			MatchAborted (this' e);  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,RobotStatusEventMonitor,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\RobotStatusEventMonitor.cs,UpdateStatus,The following statement contains a magic number: if (status.Status.FMSAttached) {  	//Give Leeway  	if (DateTime.Now.Subtract (matchStart).Seconds >= 14 && DateTime.Now.Subtract (matchStart).Seconds <= 18) {  	}  	//uh oh!  	else {  		if (MatchAborted != null)  			MatchAborted (this' e);  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,RobotStatusEventMonitor,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\RobotStatusEventMonitor.cs,UpdateStatus,The following statement contains a magic number: if (DateTime.Now.Subtract (matchStart).Seconds >= 14 && DateTime.Now.Subtract (matchStart).Seconds <= 18) {  }  //uh oh!  else {  	if (MatchAborted != null)  		MatchAborted (this' e);  }  
Magic Number,System451.Communication.Dashboard.Utils,RobotStatusEventMonitor,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\RobotStatusEventMonitor.cs,UpdateStatus,The following statement contains a magic number: if (DateTime.Now.Subtract (matchStart).Seconds >= 14 && DateTime.Now.Subtract (matchStart).Seconds <= 18) {  }  //uh oh!  else {  	if (MatchAborted != null)  		MatchAborted (this' e);  }  
Magic Number,System451.Communication.Dashboard.Utils,RobotStatusEventMonitor,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\RobotStatusEventMonitor.cs,UpdateStatus,The following statement contains a magic number: if (status.Status.FMSAttached) {  	//Give Leeway  	if (DateTime.Now.Subtract (matchStart).Seconds >= 14 && DateTime.Now.Subtract (matchStart).Seconds <= 18 && DateTime.Now.Subtract (matchStart).Minutes == 2) {  		if (MatchEnded != null)  			MatchEnded (this' e);  	}  	//uh oh!  	else {  		if (MatchAborted != null)  			MatchAborted (this' e);  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,RobotStatusEventMonitor,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\RobotStatusEventMonitor.cs,UpdateStatus,The following statement contains a magic number: if (status.Status.FMSAttached) {  	//Give Leeway  	if (DateTime.Now.Subtract (matchStart).Seconds >= 14 && DateTime.Now.Subtract (matchStart).Seconds <= 18 && DateTime.Now.Subtract (matchStart).Minutes == 2) {  		if (MatchEnded != null)  			MatchEnded (this' e);  	}  	//uh oh!  	else {  		if (MatchAborted != null)  			MatchAborted (this' e);  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,RobotStatusEventMonitor,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\RobotStatusEventMonitor.cs,UpdateStatus,The following statement contains a magic number: if (status.Status.FMSAttached) {  	//Give Leeway  	if (DateTime.Now.Subtract (matchStart).Seconds >= 14 && DateTime.Now.Subtract (matchStart).Seconds <= 18 && DateTime.Now.Subtract (matchStart).Minutes == 2) {  		if (MatchEnded != null)  			MatchEnded (this' e);  	}  	//uh oh!  	else {  		if (MatchAborted != null)  			MatchAborted (this' e);  	}  }  
Magic Number,System451.Communication.Dashboard.Utils,RobotStatusEventMonitor,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\RobotStatusEventMonitor.cs,UpdateStatus,The following statement contains a magic number: if (DateTime.Now.Subtract (matchStart).Seconds >= 14 && DateTime.Now.Subtract (matchStart).Seconds <= 18 && DateTime.Now.Subtract (matchStart).Minutes == 2) {  	if (MatchEnded != null)  		MatchEnded (this' e);  }  //uh oh!  else {  	if (MatchAborted != null)  		MatchAborted (this' e);  }  
Magic Number,System451.Communication.Dashboard.Utils,RobotStatusEventMonitor,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\RobotStatusEventMonitor.cs,UpdateStatus,The following statement contains a magic number: if (DateTime.Now.Subtract (matchStart).Seconds >= 14 && DateTime.Now.Subtract (matchStart).Seconds <= 18 && DateTime.Now.Subtract (matchStart).Minutes == 2) {  	if (MatchEnded != null)  		MatchEnded (this' e);  }  //uh oh!  else {  	if (MatchAborted != null)  		MatchAborted (this' e);  }  
Magic Number,System451.Communication.Dashboard.Utils,RobotStatusEventMonitor,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\RobotStatusEventMonitor.cs,UpdateStatus,The following statement contains a magic number: if (DateTime.Now.Subtract (matchStart).Seconds >= 14 && DateTime.Now.Subtract (matchStart).Seconds <= 18 && DateTime.Now.Subtract (matchStart).Minutes == 2) {  	if (MatchEnded != null)  		MatchEnded (this' e);  }  //uh oh!  else {  	if (MatchAborted != null)  		MatchAborted (this' e);  }  
Magic Number,System451.Communication.Dashboard.Utils,VersionNumber,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Utils\Updater.cs,FromString,The following statement contains a magic number: vn.Minor = int.Parse (m.Groups [2].Value);  
Magic Number,System451.Communication.Dashboard.Utils,VersionNumber,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Utils\Updater.cs,FromString,The following statement contains a magic number: vn.Bug = int.Parse (m.Groups [3].Value);  
Magic Number,System451.Communication.Dashboard.Utils,VersionNumber,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Utils\Updater.cs,FromString,The following statement contains a magic number: try {  	vn.Build = int.Parse (m.Groups [4].Value);  }  catch {  	if (m.Groups [4].Value == "svn")  		vn.Build = int.MaxValue;  	else  		vn.Build = 0;  }  
Magic Number,System451.Communication.Dashboard.Utils,VersionNumber,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Utils\Updater.cs,FromString,The following statement contains a magic number: try {  	vn.Build = int.Parse (m.Groups [4].Value);  }  catch {  	if (m.Groups [4].Value == "svn")  		vn.Build = int.MaxValue;  	else  		vn.Build = 0;  }  
Magic Number,System451.Communication.Dashboard.Utils,VersionNumber,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Utils\Updater.cs,FromString,The following statement contains a magic number: vn.Build = int.Parse (m.Groups [4].Value);  
Magic Number,System451.Communication.Dashboard.Utils,VersionNumber,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Utils\Updater.cs,FromString,The following statement contains a magic number: if (m.Groups [4].Value == "svn")  	vn.Build = int.MaxValue;  else  	vn.Build = 0;  
Magic Number,System451.Communication.Dashboard.Utils,VersionNumber,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Utils\Updater.cs,FromString,The following statement contains a magic number: switch (m.Groups [5].Value) {  case "a":  	vn.BuildType = Type.Alpha;  	break;  case "b":  	vn.BuildType = Type.Beta;  	break;  case "g":  	vn.BuildType = Type.Release;  	break;  default:  	vn.BuildType = Type.None;  	break;  }  
Magic Number,System451.Communication.Dashboard.Utils,VersionNumber,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Utils\Updater.cs,FromString,The following statement contains a magic number: try {  	vn.BuildTypeNumber = int.Parse (m.Groups [6].Value);  }  catch {  	vn.BuildTypeNumber = 0;  }  
Magic Number,System451.Communication.Dashboard.Utils,VersionNumber,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Utils\Updater.cs,FromString,The following statement contains a magic number: vn.BuildTypeNumber = int.Parse (m.Groups [6].Value);  
Magic Number,System451.Communication.Dashboard,CsvSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\CsvDataSource.cs,DoWork,The following statement contains a magic number: while (saving) {  	//create a new object so we don't clobber the old data  	kys = new ZomBDataLookup ();  	var str = ins.ReadLine ();  	if (str == null) {  		ins.BaseStream.Seek (0' SeekOrigin.Begin);  		str = ins.ReadLine ();  		str = ins.ReadLine ();  		if (str == null) {  			saving = false;  			return;  		}  	}  	var strs = str.Split (''');  	for (int i = 0; i < Math.Min (header.Count' strs.Length); i++) {  		kys.Add (header [i]' new ZomBDataObject (strs [i]' ZomBDataTypeHint.Unknown));  	}  	Thread.Sleep (20);  	if (peeking) {  		foreach (var item in kys) {  			dp.Invoke (cb' item.Key);  		}  	}  	//Fire events  	if (DataRecieved != null)  		DataRecieved (this' new EventArgs ());  	if (NewDataRecieved != null)  		NewDataRecieved (this' new NewDataRecievedEventArgs (kys));  }  
Magic Number,System451.Communication.Dashboard,CsvSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\CsvDataSource.cs,DoWork,The following statement contains a magic number: Thread.Sleep (20);  
Magic Number,System451.Communication.Dashboard,CsvSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\CsvDataSource.cs,Stop,The following statement contains a magic number: if (Running) {  	try {  		saving = false;  		Thread.Sleep (500);  		if (backThread.IsAlive)  			backThread.Abort ();  		ins.Close ();  	}  	catch {  		try {  			ins.Close ();  		}  		catch {  		}  	}  }  
Magic Number,System451.Communication.Dashboard,CsvSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\CsvDataSource.cs,Stop,The following statement contains a magic number: try {  	saving = false;  	Thread.Sleep (500);  	if (backThread.IsAlive)  		backThread.Abort ();  	ins.Close ();  }  catch {  	try {  		ins.Close ();  	}  	catch {  	}  }  
Magic Number,System451.Communication.Dashboard,CsvSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\CsvDataSource.cs,Stop,The following statement contains a magic number: Thread.Sleep (500);  
Magic Number,System451.Communication.Dashboard,CsvSaver,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\CsvDataMonitor.cs,AddLookupData,The following statement contains a magic number: if (saving) {  	lock (dataq) {  		var scl = new StringCollection ();  		foreach (var item in datal) {  			if (item.Value.Value is ZomBDataLookup) {  				AddLookupData (prefix + item.Key + "."' item.Value.Value as ZomBDataLookup);  				continue;  			}  			if (!header.Contains (prefix + item.Key)) {  				header.Add (prefix + item.Key);  			}  			int hidx = header.IndexOf (prefix + item.Key);  			while (scl.Count <= hidx) {  				scl.Add (null);  			}  			scl [hidx] = item.Value.ToString ();  		}  		if (dataq.Count > 0 && GetTime () - lasttime < 50)//less than 50ms  		 {  			var mmine = new string[scl.Count];  			scl.CopyTo (mmine' 0);  			if (Mergable (ref scl)) {  				dataq [dataq.Count - 1] = scl;  			}  			else {  				scl = new StringCollection ();  				scl.AddRange (mmine);  				dataq.Add (scl);  			}  		}  		else {  			dataq.Add (scl);  			lasttime = GetTime ();  		}  	}  }  
Magic Number,System451.Communication.Dashboard,CsvSaver,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\CsvDataMonitor.cs,AddLookupData,The following statement contains a magic number: lock (dataq) {  	var scl = new StringCollection ();  	foreach (var item in datal) {  		if (item.Value.Value is ZomBDataLookup) {  			AddLookupData (prefix + item.Key + "."' item.Value.Value as ZomBDataLookup);  			continue;  		}  		if (!header.Contains (prefix + item.Key)) {  			header.Add (prefix + item.Key);  		}  		int hidx = header.IndexOf (prefix + item.Key);  		while (scl.Count <= hidx) {  			scl.Add (null);  		}  		scl [hidx] = item.Value.ToString ();  	}  	if (dataq.Count > 0 && GetTime () - lasttime < 50)//less than 50ms  	 {  		var mmine = new string[scl.Count];  		scl.CopyTo (mmine' 0);  		if (Mergable (ref scl)) {  			dataq [dataq.Count - 1] = scl;  		}  		else {  			scl = new StringCollection ();  			scl.AddRange (mmine);  			dataq.Add (scl);  		}  	}  	else {  		dataq.Add (scl);  		lasttime = GetTime ();  	}  }  
Magic Number,System451.Communication.Dashboard,CsvSaver,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\CsvDataMonitor.cs,AddLookupData,The following statement contains a magic number: if (dataq.Count > 0 && GetTime () - lasttime < 50)//less than 50ms   {  	var mmine = new string[scl.Count];  	scl.CopyTo (mmine' 0);  	if (Mergable (ref scl)) {  		dataq [dataq.Count - 1] = scl;  	}  	else {  		scl = new StringCollection ();  		scl.AddRange (mmine);  		dataq.Add (scl);  	}  }  else {  	dataq.Add (scl);  	lasttime = GetTime ();  }  
Magic Number,System451.Communication.Dashboard,CsvSaver,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\CsvDataMonitor.cs,GetTime,The following statement contains a magic number: return (uint)(dif.TotalMinutes * 60000);  
Magic Number,System451.Communication.Dashboard,CsvSaver,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\CsvDataMonitor.cs,UpdateData,The following statement contains a magic number: try {  	AddLookupData (""' data);  	if (dataq.Count > 100 || lasttime - savetime > 10000)  		WriteBuffer ();  }  catch {  }  
Magic Number,System451.Communication.Dashboard,CsvSaver,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\CsvDataMonitor.cs,UpdateData,The following statement contains a magic number: try {  	AddLookupData (""' data);  	if (dataq.Count > 100 || lasttime - savetime > 10000)  		WriteBuffer ();  }  catch {  }  
Magic Number,System451.Communication.Dashboard,CsvSaver,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\CsvDataMonitor.cs,UpdateData,The following statement contains a magic number: if (dataq.Count > 100 || lasttime - savetime > 10000)  	WriteBuffer ();  
Magic Number,System451.Communication.Dashboard,CsvSaver,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\CsvDataMonitor.cs,UpdateData,The following statement contains a magic number: if (dataq.Count > 100 || lasttime - savetime > 10000)  	WriteBuffer ();  
Magic Number,System451.Communication.Dashboard,DashboardDataHubPanel,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\DashboardDataHubPanel.cs,OnPaintBackground,The following statement contains a magic number: if (DesignMode)  	e.Graphics.DrawImage (Resources.ZomBZ' 3' 3);  
Magic Number,System451.Communication.Dashboard,DashboardDataHubPanel,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\DashboardDataHubPanel.cs,OnPaintBackground,The following statement contains a magic number: if (DesignMode)  	e.Graphics.DrawImage (Resources.ZomBZ' 3' 3);  
Magic Number,System451.Communication.Dashboard,DashboardDataHubPanel,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\DashboardDataHubPanel.cs,OnPaintBackground,The following statement contains a magic number: e.Graphics.DrawImage (Resources.ZomBZ' 3' 3);  
Magic Number,System451.Communication.Dashboard,DashboardDataHubPanel,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\DashboardDataHubPanel.cs,OnPaintBackground,The following statement contains a magic number: e.Graphics.DrawImage (Resources.ZomBZ' 3' 3);  
Magic Number,System451.Communication.Dashboard,DashboardDataHub,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardDataHub.cs,RestartDS,The following statement contains a magic number: if (dgs.Length != 1) {  	MessageBox.Show ("DS not running' starting");  }  else {  	dgs [0].CloseMainWindow ();  	dgs [0].WaitForExit (6000);  	//If http://www.youtube.com/watch?v=dGFXGwHsD_A' then kill  	if (!dgs [0].HasExited) {  		dgs [0].Kill ();  	}  }  
Magic Number,System451.Communication.Dashboard,DashboardDataHub,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardDataHub.cs,RestartDS,The following statement contains a magic number: dgs [0].WaitForExit (6000);  
Magic Number,System451.Communication.Dashboard,ControlBoxMenuButton,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardDataHub.cs,ControlBoxMenuButton,The following statement contains a magic number: this.contextMenuStrip1.Size = new System.Drawing.Size (138' 70);  
Magic Number,System451.Communication.Dashboard,ControlBoxMenuButton,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardDataHub.cs,ControlBoxMenuButton,The following statement contains a magic number: this.contextMenuStrip1.Size = new System.Drawing.Size (138' 70);  
Magic Number,System451.Communication.Dashboard,ControlBoxMenuButton,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardDataHub.cs,ControlBoxMenuButton,The following statement contains a magic number: this.restartToolStripMenuItem.Size = new System.Drawing.Size (137' 22);  
Magic Number,System451.Communication.Dashboard,ControlBoxMenuButton,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardDataHub.cs,ControlBoxMenuButton,The following statement contains a magic number: this.restartToolStripMenuItem.Size = new System.Drawing.Size (137' 22);  
Magic Number,System451.Communication.Dashboard,ControlBoxMenuButton,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardDataHub.cs,ControlBoxMenuButton,The following statement contains a magic number: this.exitToolStripMenuItem.Size = new System.Drawing.Size (137' 22);  
Magic Number,System451.Communication.Dashboard,ControlBoxMenuButton,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardDataHub.cs,ControlBoxMenuButton,The following statement contains a magic number: this.exitToolStripMenuItem.Size = new System.Drawing.Size (137' 22);  
Magic Number,System451.Communication.Dashboard,ControlBoxMenuButton,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardDataHub.cs,ControlBoxMenuButton,The following statement contains a magic number: this.restartDSToolStripMenuItem.Size = new System.Drawing.Size (137' 22);  
Magic Number,System451.Communication.Dashboard,ControlBoxMenuButton,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardDataHub.cs,ControlBoxMenuButton,The following statement contains a magic number: this.restartDSToolStripMenuItem.Size = new System.Drawing.Size (137' 22);  
Magic Number,System451.Communication.Dashboard,DataSaver,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DataSaver.cs,AddValue,The following statement contains a magic number: if (saving) {  	if (value != null) {  		lock (buffer) {  			buffer.Enqueue (GetTime ());  			buffer.Enqueue (value);  		}  		if (buffer.Count >= 30)  			WriteBuffer ();  	}  }  
Magic Number,System451.Communication.Dashboard,DataSaver,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DataSaver.cs,AddValue,The following statement contains a magic number: if (value != null) {  	lock (buffer) {  		buffer.Enqueue (GetTime ());  		buffer.Enqueue (value);  	}  	if (buffer.Count >= 30)  		WriteBuffer ();  }  
Magic Number,System451.Communication.Dashboard,DataSaver,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DataSaver.cs,AddValue,The following statement contains a magic number: if (buffer.Count >= 30)  	WriteBuffer ();  
Magic Number,System451.Communication.Dashboard,DataSaver,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DataSaver.cs,GetTime,The following statement contains a magic number: bits [0] = 84;  
Magic Number,System451.Communication.Dashboard,DataSaver,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DataSaver.cs,GetTime,The following statement contains a magic number: bits [1] = (byte)(msd >> 8);  
Magic Number,System451.Communication.Dashboard,DataSaver,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DataSaver.cs,GetTime,The following statement contains a magic number: bits [2] = (byte)msd;  
Magic Number,System451.Communication.Dashboard,DataSaver,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DataSaver.cs,WriteOff,The following statement contains a magic number: if (outs != null) {  	lock (outs) {  		outs.Write ((byte)81);  		//Q  		outs.Flush ();  		outs.Close ();  		outs = null;  	}  }  
Magic Number,System451.Communication.Dashboard,DataSaver,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DataSaver.cs,WriteOff,The following statement contains a magic number: lock (outs) {  	outs.Write ((byte)81);  	//Q  	outs.Flush ();  	outs.Close ();  	outs = null;  }  
Magic Number,System451.Communication.Dashboard,DataSaver,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DataSaver.cs,WriteOff,The following statement contains a magic number: outs.Write ((byte)81);  
Magic Number,System451.Communication.Dashboard,DataSaver,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DataSaver.cs,UpdateStatus,The following statement contains a magic number: if (saving) {  	byte[] bit = new byte[9];  	bit [0] = 83;  	//"S"  	bit [1] = status.Status.Byte;  	bit [2] = status.Error.Byte;  	bit [3] = status.DigitalIn.Byte;  	bit [4] = status.DigitalOut.Byte;  	bit [5] = (byte)(status.PacketNumber >> 8);  	bit [6] = (byte)status.PacketNumber;  	bit [7] = (byte)((int)status.Battery);  	bit [8] = (byte)((status.Battery - ((int)status.Battery)) * 100);  	AddValue (bit);  }  
Magic Number,System451.Communication.Dashboard,DataSaver,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DataSaver.cs,UpdateStatus,The following statement contains a magic number: if (saving) {  	byte[] bit = new byte[9];  	bit [0] = 83;  	//"S"  	bit [1] = status.Status.Byte;  	bit [2] = status.Error.Byte;  	bit [3] = status.DigitalIn.Byte;  	bit [4] = status.DigitalOut.Byte;  	bit [5] = (byte)(status.PacketNumber >> 8);  	bit [6] = (byte)status.PacketNumber;  	bit [7] = (byte)((int)status.Battery);  	bit [8] = (byte)((status.Battery - ((int)status.Battery)) * 100);  	AddValue (bit);  }  
Magic Number,System451.Communication.Dashboard,DataSaver,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DataSaver.cs,UpdateStatus,The following statement contains a magic number: if (saving) {  	byte[] bit = new byte[9];  	bit [0] = 83;  	//"S"  	bit [1] = status.Status.Byte;  	bit [2] = status.Error.Byte;  	bit [3] = status.DigitalIn.Byte;  	bit [4] = status.DigitalOut.Byte;  	bit [5] = (byte)(status.PacketNumber >> 8);  	bit [6] = (byte)status.PacketNumber;  	bit [7] = (byte)((int)status.Battery);  	bit [8] = (byte)((status.Battery - ((int)status.Battery)) * 100);  	AddValue (bit);  }  
Magic Number,System451.Communication.Dashboard,DataSaver,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DataSaver.cs,UpdateStatus,The following statement contains a magic number: if (saving) {  	byte[] bit = new byte[9];  	bit [0] = 83;  	//"S"  	bit [1] = status.Status.Byte;  	bit [2] = status.Error.Byte;  	bit [3] = status.DigitalIn.Byte;  	bit [4] = status.DigitalOut.Byte;  	bit [5] = (byte)(status.PacketNumber >> 8);  	bit [6] = (byte)status.PacketNumber;  	bit [7] = (byte)((int)status.Battery);  	bit [8] = (byte)((status.Battery - ((int)status.Battery)) * 100);  	AddValue (bit);  }  
Magic Number,System451.Communication.Dashboard,DataSaver,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DataSaver.cs,UpdateStatus,The following statement contains a magic number: if (saving) {  	byte[] bit = new byte[9];  	bit [0] = 83;  	//"S"  	bit [1] = status.Status.Byte;  	bit [2] = status.Error.Byte;  	bit [3] = status.DigitalIn.Byte;  	bit [4] = status.DigitalOut.Byte;  	bit [5] = (byte)(status.PacketNumber >> 8);  	bit [6] = (byte)status.PacketNumber;  	bit [7] = (byte)((int)status.Battery);  	bit [8] = (byte)((status.Battery - ((int)status.Battery)) * 100);  	AddValue (bit);  }  
Magic Number,System451.Communication.Dashboard,DataSaver,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DataSaver.cs,UpdateStatus,The following statement contains a magic number: if (saving) {  	byte[] bit = new byte[9];  	bit [0] = 83;  	//"S"  	bit [1] = status.Status.Byte;  	bit [2] = status.Error.Byte;  	bit [3] = status.DigitalIn.Byte;  	bit [4] = status.DigitalOut.Byte;  	bit [5] = (byte)(status.PacketNumber >> 8);  	bit [6] = (byte)status.PacketNumber;  	bit [7] = (byte)((int)status.Battery);  	bit [8] = (byte)((status.Battery - ((int)status.Battery)) * 100);  	AddValue (bit);  }  
Magic Number,System451.Communication.Dashboard,DataSaver,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DataSaver.cs,UpdateStatus,The following statement contains a magic number: if (saving) {  	byte[] bit = new byte[9];  	bit [0] = 83;  	//"S"  	bit [1] = status.Status.Byte;  	bit [2] = status.Error.Byte;  	bit [3] = status.DigitalIn.Byte;  	bit [4] = status.DigitalOut.Byte;  	bit [5] = (byte)(status.PacketNumber >> 8);  	bit [6] = (byte)status.PacketNumber;  	bit [7] = (byte)((int)status.Battery);  	bit [8] = (byte)((status.Battery - ((int)status.Battery)) * 100);  	AddValue (bit);  }  
Magic Number,System451.Communication.Dashboard,DataSaver,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DataSaver.cs,UpdateStatus,The following statement contains a magic number: if (saving) {  	byte[] bit = new byte[9];  	bit [0] = 83;  	//"S"  	bit [1] = status.Status.Byte;  	bit [2] = status.Error.Byte;  	bit [3] = status.DigitalIn.Byte;  	bit [4] = status.DigitalOut.Byte;  	bit [5] = (byte)(status.PacketNumber >> 8);  	bit [6] = (byte)status.PacketNumber;  	bit [7] = (byte)((int)status.Battery);  	bit [8] = (byte)((status.Battery - ((int)status.Battery)) * 100);  	AddValue (bit);  }  
Magic Number,System451.Communication.Dashboard,DataSaver,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DataSaver.cs,UpdateStatus,The following statement contains a magic number: if (saving) {  	byte[] bit = new byte[9];  	bit [0] = 83;  	//"S"  	bit [1] = status.Status.Byte;  	bit [2] = status.Error.Byte;  	bit [3] = status.DigitalIn.Byte;  	bit [4] = status.DigitalOut.Byte;  	bit [5] = (byte)(status.PacketNumber >> 8);  	bit [6] = (byte)status.PacketNumber;  	bit [7] = (byte)((int)status.Battery);  	bit [8] = (byte)((status.Battery - ((int)status.Battery)) * 100);  	AddValue (bit);  }  
Magic Number,System451.Communication.Dashboard,DataSaver,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DataSaver.cs,UpdateStatus,The following statement contains a magic number: if (saving) {  	byte[] bit = new byte[9];  	bit [0] = 83;  	//"S"  	bit [1] = status.Status.Byte;  	bit [2] = status.Error.Byte;  	bit [3] = status.DigitalIn.Byte;  	bit [4] = status.DigitalOut.Byte;  	bit [5] = (byte)(status.PacketNumber >> 8);  	bit [6] = (byte)status.PacketNumber;  	bit [7] = (byte)((int)status.Battery);  	bit [8] = (byte)((status.Battery - ((int)status.Battery)) * 100);  	AddValue (bit);  }  
Magic Number,System451.Communication.Dashboard,DataSaver,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DataSaver.cs,UpdateStatus,The following statement contains a magic number: if (saving) {  	byte[] bit = new byte[9];  	bit [0] = 83;  	//"S"  	bit [1] = status.Status.Byte;  	bit [2] = status.Error.Byte;  	bit [3] = status.DigitalIn.Byte;  	bit [4] = status.DigitalOut.Byte;  	bit [5] = (byte)(status.PacketNumber >> 8);  	bit [6] = (byte)status.PacketNumber;  	bit [7] = (byte)((int)status.Battery);  	bit [8] = (byte)((status.Battery - ((int)status.Battery)) * 100);  	AddValue (bit);  }  
Magic Number,System451.Communication.Dashboard,DataSaver,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DataSaver.cs,UpdateStatus,The following statement contains a magic number: bit [0] = 83;  
Magic Number,System451.Communication.Dashboard,DataSaver,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DataSaver.cs,UpdateStatus,The following statement contains a magic number: bit [2] = status.Error.Byte;  
Magic Number,System451.Communication.Dashboard,DataSaver,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DataSaver.cs,UpdateStatus,The following statement contains a magic number: bit [3] = status.DigitalIn.Byte;  
Magic Number,System451.Communication.Dashboard,DataSaver,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DataSaver.cs,UpdateStatus,The following statement contains a magic number: bit [4] = status.DigitalOut.Byte;  
Magic Number,System451.Communication.Dashboard,DataSaver,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DataSaver.cs,UpdateStatus,The following statement contains a magic number: bit [5] = (byte)(status.PacketNumber >> 8);  
Magic Number,System451.Communication.Dashboard,DataSaver,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DataSaver.cs,UpdateStatus,The following statement contains a magic number: bit [5] = (byte)(status.PacketNumber >> 8);  
Magic Number,System451.Communication.Dashboard,DataSaver,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DataSaver.cs,UpdateStatus,The following statement contains a magic number: bit [6] = (byte)status.PacketNumber;  
Magic Number,System451.Communication.Dashboard,DataSaver,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DataSaver.cs,UpdateStatus,The following statement contains a magic number: bit [7] = (byte)((int)status.Battery);  
Magic Number,System451.Communication.Dashboard,DataSaver,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DataSaver.cs,UpdateStatus,The following statement contains a magic number: bit [8] = (byte)((status.Battery - ((int)status.Battery)) * 100);  
Magic Number,System451.Communication.Dashboard,DataSaver,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DataSaver.cs,UpdateStatus,The following statement contains a magic number: bit [8] = (byte)((status.Battery - ((int)status.Battery)) * 100);  
Magic Number,System451.Communication.Dashboard,DataSaver,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DataSaver.cs,UpdateData,The following statement contains a magic number: if (saving) {  	StringBuilder sb = new StringBuilder ();  	sb.Append ("D00");  	//hog space for the size  	foreach (var item in data) {  		sb.Append (item.Key);  		sb.Append ("=");  		sb.Append (item.Value);  		sb.Append ("|");  	}  	byte[] bit = UTF8Encoding.UTF8.GetBytes (sb.ToString ());  	bit [1] = (byte)(sb.Length >> 8);  	bit [2] = (byte)(sb.Length);  	AddValue (bit);  }  
Magic Number,System451.Communication.Dashboard,DataSaver,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DataSaver.cs,UpdateData,The following statement contains a magic number: if (saving) {  	StringBuilder sb = new StringBuilder ();  	sb.Append ("D00");  	//hog space for the size  	foreach (var item in data) {  		sb.Append (item.Key);  		sb.Append ("=");  		sb.Append (item.Value);  		sb.Append ("|");  	}  	byte[] bit = UTF8Encoding.UTF8.GetBytes (sb.ToString ());  	bit [1] = (byte)(sb.Length >> 8);  	bit [2] = (byte)(sb.Length);  	AddValue (bit);  }  
Magic Number,System451.Communication.Dashboard,DataSaver,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DataSaver.cs,UpdateData,The following statement contains a magic number: bit [1] = (byte)(sb.Length >> 8);  
Magic Number,System451.Communication.Dashboard,DataSaver,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DataSaver.cs,UpdateData,The following statement contains a magic number: bit [2] = (byte)(sb.Length);  
Magic Number,System451.Communication.Dashboard.Net,TestDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\TestDataSource.cs,Stop,The following statement contains a magic number: if (isrunning) {  	try {  		isrunning = false;  		Thread.Sleep (500);  		if (backThread.IsAlive)  			backThread.Abort ();  	}  	catch {  	}  }  
Magic Number,System451.Communication.Dashboard.Net,TestDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\TestDataSource.cs,Stop,The following statement contains a magic number: try {  	isrunning = false;  	Thread.Sleep (500);  	if (backThread.IsAlive)  		backThread.Abort ();  }  catch {  }  
Magic Number,System451.Communication.Dashboard.Net,TestDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\TestDataSource.cs,Stop,The following statement contains a magic number: Thread.Sleep (500);  
Magic Number,System451.Communication.Dashboard.Net,TestDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\TestDataSource.cs,DoWork,The following statement contains a magic number: while (isrunning) {  	kys ["float"] = new ZomBDataObject (Math.Sin ((i++) / 100.0)' ZomBDataTypeHint.Double);  	kys ["int"] = new ZomBDataObject (Math.Sin ((i++) / 100.0) + Math.Sin ((i) / 5.0) * .1' ZomBDataTypeHint.Integer);  	kys ["bool"] = new ZomBDataObject (Math.Sin ((i++) / 100.0) > 0' ZomBDataTypeHint.Boolean);  	kys ["str"] = new ZomBDataObject (Math.Round (Math.Sin ((i++) / 100.0)' 3).ToString ()' ZomBDataTypeHint.String);  	kys ["floatrand"] = new ZomBDataObject (rand.NextDouble ()' ZomBDataTypeHint.Double);  	kys ["group.Data.p"] = new ZomBDataObject ((Math.Sin ((i) / 100.0) + 1) * 2.0' ZomBDataTypeHint.Double);  	kys ["group.Data.i"] = new ZomBDataObject ((Math.Sin ((i + 50) / 100.0) + 1) * 2.0' ZomBDataTypeHint.Double);  	kys ["group.Data.d"] = new ZomBDataObject ((Math.Sin ((i - 50) / 100.0) + 1) * 2.0' ZomBDataTypeHint.Double);  	Thread.Sleep (10);  	if (peeking) {  		foreach (var item in kys) {  			dp.Invoke (cb' item.Key);  		}  	}  	//Fire events  	if (DataRecieved != null)  		DataRecieved (this' new EventArgs ());  	if (NewDataRecieved != null)  		NewDataRecieved (this' new NewDataRecievedEventArgs (kys));  }  
Magic Number,System451.Communication.Dashboard.Net,TestDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\TestDataSource.cs,DoWork,The following statement contains a magic number: while (isrunning) {  	kys ["float"] = new ZomBDataObject (Math.Sin ((i++) / 100.0)' ZomBDataTypeHint.Double);  	kys ["int"] = new ZomBDataObject (Math.Sin ((i++) / 100.0) + Math.Sin ((i) / 5.0) * .1' ZomBDataTypeHint.Integer);  	kys ["bool"] = new ZomBDataObject (Math.Sin ((i++) / 100.0) > 0' ZomBDataTypeHint.Boolean);  	kys ["str"] = new ZomBDataObject (Math.Round (Math.Sin ((i++) / 100.0)' 3).ToString ()' ZomBDataTypeHint.String);  	kys ["floatrand"] = new ZomBDataObject (rand.NextDouble ()' ZomBDataTypeHint.Double);  	kys ["group.Data.p"] = new ZomBDataObject ((Math.Sin ((i) / 100.0) + 1) * 2.0' ZomBDataTypeHint.Double);  	kys ["group.Data.i"] = new ZomBDataObject ((Math.Sin ((i + 50) / 100.0) + 1) * 2.0' ZomBDataTypeHint.Double);  	kys ["group.Data.d"] = new ZomBDataObject ((Math.Sin ((i - 50) / 100.0) + 1) * 2.0' ZomBDataTypeHint.Double);  	Thread.Sleep (10);  	if (peeking) {  		foreach (var item in kys) {  			dp.Invoke (cb' item.Key);  		}  	}  	//Fire events  	if (DataRecieved != null)  		DataRecieved (this' new EventArgs ());  	if (NewDataRecieved != null)  		NewDataRecieved (this' new NewDataRecievedEventArgs (kys));  }  
Magic Number,System451.Communication.Dashboard.Net,TestDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\TestDataSource.cs,DoWork,The following statement contains a magic number: while (isrunning) {  	kys ["float"] = new ZomBDataObject (Math.Sin ((i++) / 100.0)' ZomBDataTypeHint.Double);  	kys ["int"] = new ZomBDataObject (Math.Sin ((i++) / 100.0) + Math.Sin ((i) / 5.0) * .1' ZomBDataTypeHint.Integer);  	kys ["bool"] = new ZomBDataObject (Math.Sin ((i++) / 100.0) > 0' ZomBDataTypeHint.Boolean);  	kys ["str"] = new ZomBDataObject (Math.Round (Math.Sin ((i++) / 100.0)' 3).ToString ()' ZomBDataTypeHint.String);  	kys ["floatrand"] = new ZomBDataObject (rand.NextDouble ()' ZomBDataTypeHint.Double);  	kys ["group.Data.p"] = new ZomBDataObject ((Math.Sin ((i) / 100.0) + 1) * 2.0' ZomBDataTypeHint.Double);  	kys ["group.Data.i"] = new ZomBDataObject ((Math.Sin ((i + 50) / 100.0) + 1) * 2.0' ZomBDataTypeHint.Double);  	kys ["group.Data.d"] = new ZomBDataObject ((Math.Sin ((i - 50) / 100.0) + 1) * 2.0' ZomBDataTypeHint.Double);  	Thread.Sleep (10);  	if (peeking) {  		foreach (var item in kys) {  			dp.Invoke (cb' item.Key);  		}  	}  	//Fire events  	if (DataRecieved != null)  		DataRecieved (this' new EventArgs ());  	if (NewDataRecieved != null)  		NewDataRecieved (this' new NewDataRecievedEventArgs (kys));  }  
Magic Number,System451.Communication.Dashboard.Net,TestDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\TestDataSource.cs,DoWork,The following statement contains a magic number: while (isrunning) {  	kys ["float"] = new ZomBDataObject (Math.Sin ((i++) / 100.0)' ZomBDataTypeHint.Double);  	kys ["int"] = new ZomBDataObject (Math.Sin ((i++) / 100.0) + Math.Sin ((i) / 5.0) * .1' ZomBDataTypeHint.Integer);  	kys ["bool"] = new ZomBDataObject (Math.Sin ((i++) / 100.0) > 0' ZomBDataTypeHint.Boolean);  	kys ["str"] = new ZomBDataObject (Math.Round (Math.Sin ((i++) / 100.0)' 3).ToString ()' ZomBDataTypeHint.String);  	kys ["floatrand"] = new ZomBDataObject (rand.NextDouble ()' ZomBDataTypeHint.Double);  	kys ["group.Data.p"] = new ZomBDataObject ((Math.Sin ((i) / 100.0) + 1) * 2.0' ZomBDataTypeHint.Double);  	kys ["group.Data.i"] = new ZomBDataObject ((Math.Sin ((i + 50) / 100.0) + 1) * 2.0' ZomBDataTypeHint.Double);  	kys ["group.Data.d"] = new ZomBDataObject ((Math.Sin ((i - 50) / 100.0) + 1) * 2.0' ZomBDataTypeHint.Double);  	Thread.Sleep (10);  	if (peeking) {  		foreach (var item in kys) {  			dp.Invoke (cb' item.Key);  		}  	}  	//Fire events  	if (DataRecieved != null)  		DataRecieved (this' new EventArgs ());  	if (NewDataRecieved != null)  		NewDataRecieved (this' new NewDataRecievedEventArgs (kys));  }  
Magic Number,System451.Communication.Dashboard.Net,TestDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\TestDataSource.cs,DoWork,The following statement contains a magic number: while (isrunning) {  	kys ["float"] = new ZomBDataObject (Math.Sin ((i++) / 100.0)' ZomBDataTypeHint.Double);  	kys ["int"] = new ZomBDataObject (Math.Sin ((i++) / 100.0) + Math.Sin ((i) / 5.0) * .1' ZomBDataTypeHint.Integer);  	kys ["bool"] = new ZomBDataObject (Math.Sin ((i++) / 100.0) > 0' ZomBDataTypeHint.Boolean);  	kys ["str"] = new ZomBDataObject (Math.Round (Math.Sin ((i++) / 100.0)' 3).ToString ()' ZomBDataTypeHint.String);  	kys ["floatrand"] = new ZomBDataObject (rand.NextDouble ()' ZomBDataTypeHint.Double);  	kys ["group.Data.p"] = new ZomBDataObject ((Math.Sin ((i) / 100.0) + 1) * 2.0' ZomBDataTypeHint.Double);  	kys ["group.Data.i"] = new ZomBDataObject ((Math.Sin ((i + 50) / 100.0) + 1) * 2.0' ZomBDataTypeHint.Double);  	kys ["group.Data.d"] = new ZomBDataObject ((Math.Sin ((i - 50) / 100.0) + 1) * 2.0' ZomBDataTypeHint.Double);  	Thread.Sleep (10);  	if (peeking) {  		foreach (var item in kys) {  			dp.Invoke (cb' item.Key);  		}  	}  	//Fire events  	if (DataRecieved != null)  		DataRecieved (this' new EventArgs ());  	if (NewDataRecieved != null)  		NewDataRecieved (this' new NewDataRecievedEventArgs (kys));  }  
Magic Number,System451.Communication.Dashboard.Net,TestDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\TestDataSource.cs,DoWork,The following statement contains a magic number: while (isrunning) {  	kys ["float"] = new ZomBDataObject (Math.Sin ((i++) / 100.0)' ZomBDataTypeHint.Double);  	kys ["int"] = new ZomBDataObject (Math.Sin ((i++) / 100.0) + Math.Sin ((i) / 5.0) * .1' ZomBDataTypeHint.Integer);  	kys ["bool"] = new ZomBDataObject (Math.Sin ((i++) / 100.0) > 0' ZomBDataTypeHint.Boolean);  	kys ["str"] = new ZomBDataObject (Math.Round (Math.Sin ((i++) / 100.0)' 3).ToString ()' ZomBDataTypeHint.String);  	kys ["floatrand"] = new ZomBDataObject (rand.NextDouble ()' ZomBDataTypeHint.Double);  	kys ["group.Data.p"] = new ZomBDataObject ((Math.Sin ((i) / 100.0) + 1) * 2.0' ZomBDataTypeHint.Double);  	kys ["group.Data.i"] = new ZomBDataObject ((Math.Sin ((i + 50) / 100.0) + 1) * 2.0' ZomBDataTypeHint.Double);  	kys ["group.Data.d"] = new ZomBDataObject ((Math.Sin ((i - 50) / 100.0) + 1) * 2.0' ZomBDataTypeHint.Double);  	Thread.Sleep (10);  	if (peeking) {  		foreach (var item in kys) {  			dp.Invoke (cb' item.Key);  		}  	}  	//Fire events  	if (DataRecieved != null)  		DataRecieved (this' new EventArgs ());  	if (NewDataRecieved != null)  		NewDataRecieved (this' new NewDataRecievedEventArgs (kys));  }  
Magic Number,System451.Communication.Dashboard.Net,TestDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\TestDataSource.cs,DoWork,The following statement contains a magic number: while (isrunning) {  	kys ["float"] = new ZomBDataObject (Math.Sin ((i++) / 100.0)' ZomBDataTypeHint.Double);  	kys ["int"] = new ZomBDataObject (Math.Sin ((i++) / 100.0) + Math.Sin ((i) / 5.0) * .1' ZomBDataTypeHint.Integer);  	kys ["bool"] = new ZomBDataObject (Math.Sin ((i++) / 100.0) > 0' ZomBDataTypeHint.Boolean);  	kys ["str"] = new ZomBDataObject (Math.Round (Math.Sin ((i++) / 100.0)' 3).ToString ()' ZomBDataTypeHint.String);  	kys ["floatrand"] = new ZomBDataObject (rand.NextDouble ()' ZomBDataTypeHint.Double);  	kys ["group.Data.p"] = new ZomBDataObject ((Math.Sin ((i) / 100.0) + 1) * 2.0' ZomBDataTypeHint.Double);  	kys ["group.Data.i"] = new ZomBDataObject ((Math.Sin ((i + 50) / 100.0) + 1) * 2.0' ZomBDataTypeHint.Double);  	kys ["group.Data.d"] = new ZomBDataObject ((Math.Sin ((i - 50) / 100.0) + 1) * 2.0' ZomBDataTypeHint.Double);  	Thread.Sleep (10);  	if (peeking) {  		foreach (var item in kys) {  			dp.Invoke (cb' item.Key);  		}  	}  	//Fire events  	if (DataRecieved != null)  		DataRecieved (this' new EventArgs ());  	if (NewDataRecieved != null)  		NewDataRecieved (this' new NewDataRecievedEventArgs (kys));  }  
Magic Number,System451.Communication.Dashboard.Net,TestDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\TestDataSource.cs,DoWork,The following statement contains a magic number: while (isrunning) {  	kys ["float"] = new ZomBDataObject (Math.Sin ((i++) / 100.0)' ZomBDataTypeHint.Double);  	kys ["int"] = new ZomBDataObject (Math.Sin ((i++) / 100.0) + Math.Sin ((i) / 5.0) * .1' ZomBDataTypeHint.Integer);  	kys ["bool"] = new ZomBDataObject (Math.Sin ((i++) / 100.0) > 0' ZomBDataTypeHint.Boolean);  	kys ["str"] = new ZomBDataObject (Math.Round (Math.Sin ((i++) / 100.0)' 3).ToString ()' ZomBDataTypeHint.String);  	kys ["floatrand"] = new ZomBDataObject (rand.NextDouble ()' ZomBDataTypeHint.Double);  	kys ["group.Data.p"] = new ZomBDataObject ((Math.Sin ((i) / 100.0) + 1) * 2.0' ZomBDataTypeHint.Double);  	kys ["group.Data.i"] = new ZomBDataObject ((Math.Sin ((i + 50) / 100.0) + 1) * 2.0' ZomBDataTypeHint.Double);  	kys ["group.Data.d"] = new ZomBDataObject ((Math.Sin ((i - 50) / 100.0) + 1) * 2.0' ZomBDataTypeHint.Double);  	Thread.Sleep (10);  	if (peeking) {  		foreach (var item in kys) {  			dp.Invoke (cb' item.Key);  		}  	}  	//Fire events  	if (DataRecieved != null)  		DataRecieved (this' new EventArgs ());  	if (NewDataRecieved != null)  		NewDataRecieved (this' new NewDataRecievedEventArgs (kys));  }  
Magic Number,System451.Communication.Dashboard.Net,TestDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\TestDataSource.cs,DoWork,The following statement contains a magic number: while (isrunning) {  	kys ["float"] = new ZomBDataObject (Math.Sin ((i++) / 100.0)' ZomBDataTypeHint.Double);  	kys ["int"] = new ZomBDataObject (Math.Sin ((i++) / 100.0) + Math.Sin ((i) / 5.0) * .1' ZomBDataTypeHint.Integer);  	kys ["bool"] = new ZomBDataObject (Math.Sin ((i++) / 100.0) > 0' ZomBDataTypeHint.Boolean);  	kys ["str"] = new ZomBDataObject (Math.Round (Math.Sin ((i++) / 100.0)' 3).ToString ()' ZomBDataTypeHint.String);  	kys ["floatrand"] = new ZomBDataObject (rand.NextDouble ()' ZomBDataTypeHint.Double);  	kys ["group.Data.p"] = new ZomBDataObject ((Math.Sin ((i) / 100.0) + 1) * 2.0' ZomBDataTypeHint.Double);  	kys ["group.Data.i"] = new ZomBDataObject ((Math.Sin ((i + 50) / 100.0) + 1) * 2.0' ZomBDataTypeHint.Double);  	kys ["group.Data.d"] = new ZomBDataObject ((Math.Sin ((i - 50) / 100.0) + 1) * 2.0' ZomBDataTypeHint.Double);  	Thread.Sleep (10);  	if (peeking) {  		foreach (var item in kys) {  			dp.Invoke (cb' item.Key);  		}  	}  	//Fire events  	if (DataRecieved != null)  		DataRecieved (this' new EventArgs ());  	if (NewDataRecieved != null)  		NewDataRecieved (this' new NewDataRecievedEventArgs (kys));  }  
Magic Number,System451.Communication.Dashboard.Net,TestDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\TestDataSource.cs,DoWork,The following statement contains a magic number: while (isrunning) {  	kys ["float"] = new ZomBDataObject (Math.Sin ((i++) / 100.0)' ZomBDataTypeHint.Double);  	kys ["int"] = new ZomBDataObject (Math.Sin ((i++) / 100.0) + Math.Sin ((i) / 5.0) * .1' ZomBDataTypeHint.Integer);  	kys ["bool"] = new ZomBDataObject (Math.Sin ((i++) / 100.0) > 0' ZomBDataTypeHint.Boolean);  	kys ["str"] = new ZomBDataObject (Math.Round (Math.Sin ((i++) / 100.0)' 3).ToString ()' ZomBDataTypeHint.String);  	kys ["floatrand"] = new ZomBDataObject (rand.NextDouble ()' ZomBDataTypeHint.Double);  	kys ["group.Data.p"] = new ZomBDataObject ((Math.Sin ((i) / 100.0) + 1) * 2.0' ZomBDataTypeHint.Double);  	kys ["group.Data.i"] = new ZomBDataObject ((Math.Sin ((i + 50) / 100.0) + 1) * 2.0' ZomBDataTypeHint.Double);  	kys ["group.Data.d"] = new ZomBDataObject ((Math.Sin ((i - 50) / 100.0) + 1) * 2.0' ZomBDataTypeHint.Double);  	Thread.Sleep (10);  	if (peeking) {  		foreach (var item in kys) {  			dp.Invoke (cb' item.Key);  		}  	}  	//Fire events  	if (DataRecieved != null)  		DataRecieved (this' new EventArgs ());  	if (NewDataRecieved != null)  		NewDataRecieved (this' new NewDataRecievedEventArgs (kys));  }  
Magic Number,System451.Communication.Dashboard.Net,TestDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\TestDataSource.cs,DoWork,The following statement contains a magic number: while (isrunning) {  	kys ["float"] = new ZomBDataObject (Math.Sin ((i++) / 100.0)' ZomBDataTypeHint.Double);  	kys ["int"] = new ZomBDataObject (Math.Sin ((i++) / 100.0) + Math.Sin ((i) / 5.0) * .1' ZomBDataTypeHint.Integer);  	kys ["bool"] = new ZomBDataObject (Math.Sin ((i++) / 100.0) > 0' ZomBDataTypeHint.Boolean);  	kys ["str"] = new ZomBDataObject (Math.Round (Math.Sin ((i++) / 100.0)' 3).ToString ()' ZomBDataTypeHint.String);  	kys ["floatrand"] = new ZomBDataObject (rand.NextDouble ()' ZomBDataTypeHint.Double);  	kys ["group.Data.p"] = new ZomBDataObject ((Math.Sin ((i) / 100.0) + 1) * 2.0' ZomBDataTypeHint.Double);  	kys ["group.Data.i"] = new ZomBDataObject ((Math.Sin ((i + 50) / 100.0) + 1) * 2.0' ZomBDataTypeHint.Double);  	kys ["group.Data.d"] = new ZomBDataObject ((Math.Sin ((i - 50) / 100.0) + 1) * 2.0' ZomBDataTypeHint.Double);  	Thread.Sleep (10);  	if (peeking) {  		foreach (var item in kys) {  			dp.Invoke (cb' item.Key);  		}  	}  	//Fire events  	if (DataRecieved != null)  		DataRecieved (this' new EventArgs ());  	if (NewDataRecieved != null)  		NewDataRecieved (this' new NewDataRecievedEventArgs (kys));  }  
Magic Number,System451.Communication.Dashboard.Net,TestDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\TestDataSource.cs,DoWork,The following statement contains a magic number: while (isrunning) {  	kys ["float"] = new ZomBDataObject (Math.Sin ((i++) / 100.0)' ZomBDataTypeHint.Double);  	kys ["int"] = new ZomBDataObject (Math.Sin ((i++) / 100.0) + Math.Sin ((i) / 5.0) * .1' ZomBDataTypeHint.Integer);  	kys ["bool"] = new ZomBDataObject (Math.Sin ((i++) / 100.0) > 0' ZomBDataTypeHint.Boolean);  	kys ["str"] = new ZomBDataObject (Math.Round (Math.Sin ((i++) / 100.0)' 3).ToString ()' ZomBDataTypeHint.String);  	kys ["floatrand"] = new ZomBDataObject (rand.NextDouble ()' ZomBDataTypeHint.Double);  	kys ["group.Data.p"] = new ZomBDataObject ((Math.Sin ((i) / 100.0) + 1) * 2.0' ZomBDataTypeHint.Double);  	kys ["group.Data.i"] = new ZomBDataObject ((Math.Sin ((i + 50) / 100.0) + 1) * 2.0' ZomBDataTypeHint.Double);  	kys ["group.Data.d"] = new ZomBDataObject ((Math.Sin ((i - 50) / 100.0) + 1) * 2.0' ZomBDataTypeHint.Double);  	Thread.Sleep (10);  	if (peeking) {  		foreach (var item in kys) {  			dp.Invoke (cb' item.Key);  		}  	}  	//Fire events  	if (DataRecieved != null)  		DataRecieved (this' new EventArgs ());  	if (NewDataRecieved != null)  		NewDataRecieved (this' new NewDataRecievedEventArgs (kys));  }  
Magic Number,System451.Communication.Dashboard.Net,TestDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\TestDataSource.cs,DoWork,The following statement contains a magic number: while (isrunning) {  	kys ["float"] = new ZomBDataObject (Math.Sin ((i++) / 100.0)' ZomBDataTypeHint.Double);  	kys ["int"] = new ZomBDataObject (Math.Sin ((i++) / 100.0) + Math.Sin ((i) / 5.0) * .1' ZomBDataTypeHint.Integer);  	kys ["bool"] = new ZomBDataObject (Math.Sin ((i++) / 100.0) > 0' ZomBDataTypeHint.Boolean);  	kys ["str"] = new ZomBDataObject (Math.Round (Math.Sin ((i++) / 100.0)' 3).ToString ()' ZomBDataTypeHint.String);  	kys ["floatrand"] = new ZomBDataObject (rand.NextDouble ()' ZomBDataTypeHint.Double);  	kys ["group.Data.p"] = new ZomBDataObject ((Math.Sin ((i) / 100.0) + 1) * 2.0' ZomBDataTypeHint.Double);  	kys ["group.Data.i"] = new ZomBDataObject ((Math.Sin ((i + 50) / 100.0) + 1) * 2.0' ZomBDataTypeHint.Double);  	kys ["group.Data.d"] = new ZomBDataObject ((Math.Sin ((i - 50) / 100.0) + 1) * 2.0' ZomBDataTypeHint.Double);  	Thread.Sleep (10);  	if (peeking) {  		foreach (var item in kys) {  			dp.Invoke (cb' item.Key);  		}  	}  	//Fire events  	if (DataRecieved != null)  		DataRecieved (this' new EventArgs ());  	if (NewDataRecieved != null)  		NewDataRecieved (this' new NewDataRecievedEventArgs (kys));  }  
Magic Number,System451.Communication.Dashboard.Net,TestDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\TestDataSource.cs,DoWork,The following statement contains a magic number: while (isrunning) {  	kys ["float"] = new ZomBDataObject (Math.Sin ((i++) / 100.0)' ZomBDataTypeHint.Double);  	kys ["int"] = new ZomBDataObject (Math.Sin ((i++) / 100.0) + Math.Sin ((i) / 5.0) * .1' ZomBDataTypeHint.Integer);  	kys ["bool"] = new ZomBDataObject (Math.Sin ((i++) / 100.0) > 0' ZomBDataTypeHint.Boolean);  	kys ["str"] = new ZomBDataObject (Math.Round (Math.Sin ((i++) / 100.0)' 3).ToString ()' ZomBDataTypeHint.String);  	kys ["floatrand"] = new ZomBDataObject (rand.NextDouble ()' ZomBDataTypeHint.Double);  	kys ["group.Data.p"] = new ZomBDataObject ((Math.Sin ((i) / 100.0) + 1) * 2.0' ZomBDataTypeHint.Double);  	kys ["group.Data.i"] = new ZomBDataObject ((Math.Sin ((i + 50) / 100.0) + 1) * 2.0' ZomBDataTypeHint.Double);  	kys ["group.Data.d"] = new ZomBDataObject ((Math.Sin ((i - 50) / 100.0) + 1) * 2.0' ZomBDataTypeHint.Double);  	Thread.Sleep (10);  	if (peeking) {  		foreach (var item in kys) {  			dp.Invoke (cb' item.Key);  		}  	}  	//Fire events  	if (DataRecieved != null)  		DataRecieved (this' new EventArgs ());  	if (NewDataRecieved != null)  		NewDataRecieved (this' new NewDataRecievedEventArgs (kys));  }  
Magic Number,System451.Communication.Dashboard.Net,TestDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\TestDataSource.cs,DoWork,The following statement contains a magic number: while (isrunning) {  	kys ["float"] = new ZomBDataObject (Math.Sin ((i++) / 100.0)' ZomBDataTypeHint.Double);  	kys ["int"] = new ZomBDataObject (Math.Sin ((i++) / 100.0) + Math.Sin ((i) / 5.0) * .1' ZomBDataTypeHint.Integer);  	kys ["bool"] = new ZomBDataObject (Math.Sin ((i++) / 100.0) > 0' ZomBDataTypeHint.Boolean);  	kys ["str"] = new ZomBDataObject (Math.Round (Math.Sin ((i++) / 100.0)' 3).ToString ()' ZomBDataTypeHint.String);  	kys ["floatrand"] = new ZomBDataObject (rand.NextDouble ()' ZomBDataTypeHint.Double);  	kys ["group.Data.p"] = new ZomBDataObject ((Math.Sin ((i) / 100.0) + 1) * 2.0' ZomBDataTypeHint.Double);  	kys ["group.Data.i"] = new ZomBDataObject ((Math.Sin ((i + 50) / 100.0) + 1) * 2.0' ZomBDataTypeHint.Double);  	kys ["group.Data.d"] = new ZomBDataObject ((Math.Sin ((i - 50) / 100.0) + 1) * 2.0' ZomBDataTypeHint.Double);  	Thread.Sleep (10);  	if (peeking) {  		foreach (var item in kys) {  			dp.Invoke (cb' item.Key);  		}  	}  	//Fire events  	if (DataRecieved != null)  		DataRecieved (this' new EventArgs ());  	if (NewDataRecieved != null)  		NewDataRecieved (this' new NewDataRecievedEventArgs (kys));  }  
Magic Number,System451.Communication.Dashboard.Net,TestDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\TestDataSource.cs,DoWork,The following statement contains a magic number: while (isrunning) {  	kys ["float"] = new ZomBDataObject (Math.Sin ((i++) / 100.0)' ZomBDataTypeHint.Double);  	kys ["int"] = new ZomBDataObject (Math.Sin ((i++) / 100.0) + Math.Sin ((i) / 5.0) * .1' ZomBDataTypeHint.Integer);  	kys ["bool"] = new ZomBDataObject (Math.Sin ((i++) / 100.0) > 0' ZomBDataTypeHint.Boolean);  	kys ["str"] = new ZomBDataObject (Math.Round (Math.Sin ((i++) / 100.0)' 3).ToString ()' ZomBDataTypeHint.String);  	kys ["floatrand"] = new ZomBDataObject (rand.NextDouble ()' ZomBDataTypeHint.Double);  	kys ["group.Data.p"] = new ZomBDataObject ((Math.Sin ((i) / 100.0) + 1) * 2.0' ZomBDataTypeHint.Double);  	kys ["group.Data.i"] = new ZomBDataObject ((Math.Sin ((i + 50) / 100.0) + 1) * 2.0' ZomBDataTypeHint.Double);  	kys ["group.Data.d"] = new ZomBDataObject ((Math.Sin ((i - 50) / 100.0) + 1) * 2.0' ZomBDataTypeHint.Double);  	Thread.Sleep (10);  	if (peeking) {  		foreach (var item in kys) {  			dp.Invoke (cb' item.Key);  		}  	}  	//Fire events  	if (DataRecieved != null)  		DataRecieved (this' new EventArgs ());  	if (NewDataRecieved != null)  		NewDataRecieved (this' new NewDataRecievedEventArgs (kys));  }  
Magic Number,System451.Communication.Dashboard.Net,TestDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\TestDataSource.cs,DoWork,The following statement contains a magic number: kys ["float"] = new ZomBDataObject (Math.Sin ((i++) / 100.0)' ZomBDataTypeHint.Double);  
Magic Number,System451.Communication.Dashboard.Net,TestDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\TestDataSource.cs,DoWork,The following statement contains a magic number: kys ["int"] = new ZomBDataObject (Math.Sin ((i++) / 100.0) + Math.Sin ((i) / 5.0) * .1' ZomBDataTypeHint.Integer);  
Magic Number,System451.Communication.Dashboard.Net,TestDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\TestDataSource.cs,DoWork,The following statement contains a magic number: kys ["int"] = new ZomBDataObject (Math.Sin ((i++) / 100.0) + Math.Sin ((i) / 5.0) * .1' ZomBDataTypeHint.Integer);  
Magic Number,System451.Communication.Dashboard.Net,TestDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\TestDataSource.cs,DoWork,The following statement contains a magic number: kys ["int"] = new ZomBDataObject (Math.Sin ((i++) / 100.0) + Math.Sin ((i) / 5.0) * .1' ZomBDataTypeHint.Integer);  
Magic Number,System451.Communication.Dashboard.Net,TestDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\TestDataSource.cs,DoWork,The following statement contains a magic number: kys ["bool"] = new ZomBDataObject (Math.Sin ((i++) / 100.0) > 0' ZomBDataTypeHint.Boolean);  
Magic Number,System451.Communication.Dashboard.Net,TestDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\TestDataSource.cs,DoWork,The following statement contains a magic number: kys ["str"] = new ZomBDataObject (Math.Round (Math.Sin ((i++) / 100.0)' 3).ToString ()' ZomBDataTypeHint.String);  
Magic Number,System451.Communication.Dashboard.Net,TestDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\TestDataSource.cs,DoWork,The following statement contains a magic number: kys ["str"] = new ZomBDataObject (Math.Round (Math.Sin ((i++) / 100.0)' 3).ToString ()' ZomBDataTypeHint.String);  
Magic Number,System451.Communication.Dashboard.Net,TestDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\TestDataSource.cs,DoWork,The following statement contains a magic number: kys ["group.Data.p"] = new ZomBDataObject ((Math.Sin ((i) / 100.0) + 1) * 2.0' ZomBDataTypeHint.Double);  
Magic Number,System451.Communication.Dashboard.Net,TestDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\TestDataSource.cs,DoWork,The following statement contains a magic number: kys ["group.Data.p"] = new ZomBDataObject ((Math.Sin ((i) / 100.0) + 1) * 2.0' ZomBDataTypeHint.Double);  
Magic Number,System451.Communication.Dashboard.Net,TestDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\TestDataSource.cs,DoWork,The following statement contains a magic number: kys ["group.Data.i"] = new ZomBDataObject ((Math.Sin ((i + 50) / 100.0) + 1) * 2.0' ZomBDataTypeHint.Double);  
Magic Number,System451.Communication.Dashboard.Net,TestDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\TestDataSource.cs,DoWork,The following statement contains a magic number: kys ["group.Data.i"] = new ZomBDataObject ((Math.Sin ((i + 50) / 100.0) + 1) * 2.0' ZomBDataTypeHint.Double);  
Magic Number,System451.Communication.Dashboard.Net,TestDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\TestDataSource.cs,DoWork,The following statement contains a magic number: kys ["group.Data.i"] = new ZomBDataObject ((Math.Sin ((i + 50) / 100.0) + 1) * 2.0' ZomBDataTypeHint.Double);  
Magic Number,System451.Communication.Dashboard.Net,TestDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\TestDataSource.cs,DoWork,The following statement contains a magic number: kys ["group.Data.d"] = new ZomBDataObject ((Math.Sin ((i - 50) / 100.0) + 1) * 2.0' ZomBDataTypeHint.Double);  
Magic Number,System451.Communication.Dashboard.Net,TestDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\TestDataSource.cs,DoWork,The following statement contains a magic number: kys ["group.Data.d"] = new ZomBDataObject ((Math.Sin ((i - 50) / 100.0) + 1) * 2.0' ZomBDataTypeHint.Double);  
Magic Number,System451.Communication.Dashboard.Net,TestDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\TestDataSource.cs,DoWork,The following statement contains a magic number: kys ["group.Data.d"] = new ZomBDataObject ((Math.Sin ((i - 50) / 100.0) + 1) * 2.0' ZomBDataTypeHint.Double);  
Magic Number,System451.Communication.Dashboard.Net,TestDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\TestDataSource.cs,DoWork,The following statement contains a magic number: Thread.Sleep (10);  
Magic Number,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,Stop,The following statement contains a magic number: if (isrunning) {  	try {  		isrunning = false;  		Thread.Sleep (500);  		if (backThread.IsAlive)  			backThread.Abort ();  		cRIOConnection.Close ();  	}  	catch {  		try {  			cRIOConnection.Close ();  		}  		catch {  		}  	}  }  
Magic Number,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,Stop,The following statement contains a magic number: try {  	isrunning = false;  	Thread.Sleep (500);  	if (backThread.IsAlive)  		backThread.Abort ();  	cRIOConnection.Close ();  }  catch {  	try {  		cRIOConnection.Close ();  	}  	catch {  	}  }  
Magic Number,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,Stop,The following statement contains a magic number: Thread.Sleep (500);  
Magic Number,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,FieldIDToBytes,The following statement contains a magic number: if (id < 124)  	return new byte[] {  		(byte)(id | FIELD_ID)  	};  else if (id <= 0xFF)  	return new byte[] {  		0xFC'  		(byte)id  	};  else if (id <= 0xFFFF)  	return new byte[] {  		0xFD'  		(byte)(id << 0x08)'  		(byte)id  	};  else if (id <= 0xFFFFFF)  	return new byte[] {  		0xFE'  		(byte)(id << 0x10)'  		(byte)(id << 0x08)'  		(byte)id  	};  else  	//if (id <= 0xFFFFFFFF)  	return new byte[] {  		0xFF'  		(byte)(id << 0x18)'  		(byte)(id << 0x10)'  		(byte)(id << 0x08)'  		(byte)id  	};  
Magic Number,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,TableIDToBytes,The following statement contains a magic number: if (id < 60)  	return new byte[] {  		(byte)(id | TABLE_ID)  	};  else if (id <= 0xFF)  	return new byte[] {  		0x7C'  		(byte)id  	};  else if (id <= 0xFFFF)  	return new byte[] {  		0x7D'  		(byte)(id >> 0x08)'  		(byte)id  	};  else if (id <= 0xFFFFFF)  	return new byte[] {  		0x7E'  		(byte)(id >> 0x10)'  		(byte)(id >> 0x08)'  		(byte)id  	};  else  	//if (id <= 0xFFFFFFFF)  	return new byte[] {  		0x7F'  		(byte)(id >> 0x18)'  		(byte)(id >> 0x10)'  		(byte)(id >> 0x08)'  		(byte)id  	};  
Magic Number,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,BytesToTableID,The following statement contains a magic number: if ((bytes [0] & 0x7C) != 0x7C)  	return (uint)(bytes [0] & ~TABLE_ID);  else if ((bytes [0] & 0x03) == 0)  	return (uint)bytes [1];  else if ((bytes [0] & 0x03) == 1)  	return (uint)((bytes [1] << 0x08) + bytes [2]);  else if ((bytes [0] & 0x03) == 2)  	return (uint)(((uint)bytes [1] << 0x10) + (bytes [2] << 0x08) + bytes [3]);  else  	//if ((bytes[0] & 0x03) == 3)  	return (uint)(((uint)bytes [1] << 0x18) + ((uint)bytes [2] << 0x10) + (bytes [3] << 0x08) + bytes [4]);  
Magic Number,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,BytesToTableID,The following statement contains a magic number: if ((bytes [0] & 0x7C) != 0x7C)  	return (uint)(bytes [0] & ~TABLE_ID);  else if ((bytes [0] & 0x03) == 0)  	return (uint)bytes [1];  else if ((bytes [0] & 0x03) == 1)  	return (uint)((bytes [1] << 0x08) + bytes [2]);  else if ((bytes [0] & 0x03) == 2)  	return (uint)(((uint)bytes [1] << 0x10) + (bytes [2] << 0x08) + bytes [3]);  else  	//if ((bytes[0] & 0x03) == 3)  	return (uint)(((uint)bytes [1] << 0x18) + ((uint)bytes [2] << 0x10) + (bytes [3] << 0x08) + bytes [4]);  
Magic Number,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,BytesToTableID,The following statement contains a magic number: if ((bytes [0] & 0x7C) != 0x7C)  	return (uint)(bytes [0] & ~TABLE_ID);  else if ((bytes [0] & 0x03) == 0)  	return (uint)bytes [1];  else if ((bytes [0] & 0x03) == 1)  	return (uint)((bytes [1] << 0x08) + bytes [2]);  else if ((bytes [0] & 0x03) == 2)  	return (uint)(((uint)bytes [1] << 0x10) + (bytes [2] << 0x08) + bytes [3]);  else  	//if ((bytes[0] & 0x03) == 3)  	return (uint)(((uint)bytes [1] << 0x18) + ((uint)bytes [2] << 0x10) + (bytes [3] << 0x08) + bytes [4]);  
Magic Number,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,BytesToTableID,The following statement contains a magic number: if ((bytes [0] & 0x7C) != 0x7C)  	return (uint)(bytes [0] & ~TABLE_ID);  else if ((bytes [0] & 0x03) == 0)  	return (uint)bytes [1];  else if ((bytes [0] & 0x03) == 1)  	return (uint)((bytes [1] << 0x08) + bytes [2]);  else if ((bytes [0] & 0x03) == 2)  	return (uint)(((uint)bytes [1] << 0x10) + (bytes [2] << 0x08) + bytes [3]);  else  	//if ((bytes[0] & 0x03) == 3)  	return (uint)(((uint)bytes [1] << 0x18) + ((uint)bytes [2] << 0x10) + (bytes [3] << 0x08) + bytes [4]);  
Magic Number,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,BytesToTableID,The following statement contains a magic number: if ((bytes [0] & 0x7C) != 0x7C)  	return (uint)(bytes [0] & ~TABLE_ID);  else if ((bytes [0] & 0x03) == 0)  	return (uint)bytes [1];  else if ((bytes [0] & 0x03) == 1)  	return (uint)((bytes [1] << 0x08) + bytes [2]);  else if ((bytes [0] & 0x03) == 2)  	return (uint)(((uint)bytes [1] << 0x10) + (bytes [2] << 0x08) + bytes [3]);  else  	//if ((bytes[0] & 0x03) == 3)  	return (uint)(((uint)bytes [1] << 0x18) + ((uint)bytes [2] << 0x10) + (bytes [3] << 0x08) + bytes [4]);  
Magic Number,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,BytesToTableID,The following statement contains a magic number: if ((bytes [0] & 0x7C) != 0x7C)  	return (uint)(bytes [0] & ~TABLE_ID);  else if ((bytes [0] & 0x03) == 0)  	return (uint)bytes [1];  else if ((bytes [0] & 0x03) == 1)  	return (uint)((bytes [1] << 0x08) + bytes [2]);  else if ((bytes [0] & 0x03) == 2)  	return (uint)(((uint)bytes [1] << 0x10) + (bytes [2] << 0x08) + bytes [3]);  else  	//if ((bytes[0] & 0x03) == 3)  	return (uint)(((uint)bytes [1] << 0x18) + ((uint)bytes [2] << 0x10) + (bytes [3] << 0x08) + bytes [4]);  
Magic Number,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,BytesToTableID,The following statement contains a magic number: if ((bytes [0] & 0x7C) != 0x7C)  	return (uint)(bytes [0] & ~TABLE_ID);  else if ((bytes [0] & 0x03) == 0)  	return (uint)bytes [1];  else if ((bytes [0] & 0x03) == 1)  	return (uint)((bytes [1] << 0x08) + bytes [2]);  else if ((bytes [0] & 0x03) == 2)  	return (uint)(((uint)bytes [1] << 0x10) + (bytes [2] << 0x08) + bytes [3]);  else  	//if ((bytes[0] & 0x03) == 3)  	return (uint)(((uint)bytes [1] << 0x18) + ((uint)bytes [2] << 0x10) + (bytes [3] << 0x08) + bytes [4]);  
Magic Number,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,BytesToTableID,The following statement contains a magic number: if ((bytes [0] & 0x03) == 0)  	return (uint)bytes [1];  else if ((bytes [0] & 0x03) == 1)  	return (uint)((bytes [1] << 0x08) + bytes [2]);  else if ((bytes [0] & 0x03) == 2)  	return (uint)(((uint)bytes [1] << 0x10) + (bytes [2] << 0x08) + bytes [3]);  else  	//if ((bytes[0] & 0x03) == 3)  	return (uint)(((uint)bytes [1] << 0x18) + ((uint)bytes [2] << 0x10) + (bytes [3] << 0x08) + bytes [4]);  
Magic Number,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,BytesToTableID,The following statement contains a magic number: if ((bytes [0] & 0x03) == 0)  	return (uint)bytes [1];  else if ((bytes [0] & 0x03) == 1)  	return (uint)((bytes [1] << 0x08) + bytes [2]);  else if ((bytes [0] & 0x03) == 2)  	return (uint)(((uint)bytes [1] << 0x10) + (bytes [2] << 0x08) + bytes [3]);  else  	//if ((bytes[0] & 0x03) == 3)  	return (uint)(((uint)bytes [1] << 0x18) + ((uint)bytes [2] << 0x10) + (bytes [3] << 0x08) + bytes [4]);  
Magic Number,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,BytesToTableID,The following statement contains a magic number: if ((bytes [0] & 0x03) == 0)  	return (uint)bytes [1];  else if ((bytes [0] & 0x03) == 1)  	return (uint)((bytes [1] << 0x08) + bytes [2]);  else if ((bytes [0] & 0x03) == 2)  	return (uint)(((uint)bytes [1] << 0x10) + (bytes [2] << 0x08) + bytes [3]);  else  	//if ((bytes[0] & 0x03) == 3)  	return (uint)(((uint)bytes [1] << 0x18) + ((uint)bytes [2] << 0x10) + (bytes [3] << 0x08) + bytes [4]);  
Magic Number,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,BytesToTableID,The following statement contains a magic number: if ((bytes [0] & 0x03) == 0)  	return (uint)bytes [1];  else if ((bytes [0] & 0x03) == 1)  	return (uint)((bytes [1] << 0x08) + bytes [2]);  else if ((bytes [0] & 0x03) == 2)  	return (uint)(((uint)bytes [1] << 0x10) + (bytes [2] << 0x08) + bytes [3]);  else  	//if ((bytes[0] & 0x03) == 3)  	return (uint)(((uint)bytes [1] << 0x18) + ((uint)bytes [2] << 0x10) + (bytes [3] << 0x08) + bytes [4]);  
Magic Number,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,BytesToTableID,The following statement contains a magic number: if ((bytes [0] & 0x03) == 0)  	return (uint)bytes [1];  else if ((bytes [0] & 0x03) == 1)  	return (uint)((bytes [1] << 0x08) + bytes [2]);  else if ((bytes [0] & 0x03) == 2)  	return (uint)(((uint)bytes [1] << 0x10) + (bytes [2] << 0x08) + bytes [3]);  else  	//if ((bytes[0] & 0x03) == 3)  	return (uint)(((uint)bytes [1] << 0x18) + ((uint)bytes [2] << 0x10) + (bytes [3] << 0x08) + bytes [4]);  
Magic Number,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,BytesToTableID,The following statement contains a magic number: if ((bytes [0] & 0x03) == 0)  	return (uint)bytes [1];  else if ((bytes [0] & 0x03) == 1)  	return (uint)((bytes [1] << 0x08) + bytes [2]);  else if ((bytes [0] & 0x03) == 2)  	return (uint)(((uint)bytes [1] << 0x10) + (bytes [2] << 0x08) + bytes [3]);  else  	//if ((bytes[0] & 0x03) == 3)  	return (uint)(((uint)bytes [1] << 0x18) + ((uint)bytes [2] << 0x10) + (bytes [3] << 0x08) + bytes [4]);  
Magic Number,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,BytesToTableID,The following statement contains a magic number: if ((bytes [0] & 0x03) == 0)  	return (uint)bytes [1];  else if ((bytes [0] & 0x03) == 1)  	return (uint)((bytes [1] << 0x08) + bytes [2]);  else if ((bytes [0] & 0x03) == 2)  	return (uint)(((uint)bytes [1] << 0x10) + (bytes [2] << 0x08) + bytes [3]);  else  	//if ((bytes[0] & 0x03) == 3)  	return (uint)(((uint)bytes [1] << 0x18) + ((uint)bytes [2] << 0x10) + (bytes [3] << 0x08) + bytes [4]);  
Magic Number,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,BytesToTableID,The following statement contains a magic number: if ((bytes [0] & 0x03) == 1)  	return (uint)((bytes [1] << 0x08) + bytes [2]);  else if ((bytes [0] & 0x03) == 2)  	return (uint)(((uint)bytes [1] << 0x10) + (bytes [2] << 0x08) + bytes [3]);  else  	//if ((bytes[0] & 0x03) == 3)  	return (uint)(((uint)bytes [1] << 0x18) + ((uint)bytes [2] << 0x10) + (bytes [3] << 0x08) + bytes [4]);  
Magic Number,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,BytesToTableID,The following statement contains a magic number: if ((bytes [0] & 0x03) == 1)  	return (uint)((bytes [1] << 0x08) + bytes [2]);  else if ((bytes [0] & 0x03) == 2)  	return (uint)(((uint)bytes [1] << 0x10) + (bytes [2] << 0x08) + bytes [3]);  else  	//if ((bytes[0] & 0x03) == 3)  	return (uint)(((uint)bytes [1] << 0x18) + ((uint)bytes [2] << 0x10) + (bytes [3] << 0x08) + bytes [4]);  
Magic Number,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,BytesToTableID,The following statement contains a magic number: if ((bytes [0] & 0x03) == 1)  	return (uint)((bytes [1] << 0x08) + bytes [2]);  else if ((bytes [0] & 0x03) == 2)  	return (uint)(((uint)bytes [1] << 0x10) + (bytes [2] << 0x08) + bytes [3]);  else  	//if ((bytes[0] & 0x03) == 3)  	return (uint)(((uint)bytes [1] << 0x18) + ((uint)bytes [2] << 0x10) + (bytes [3] << 0x08) + bytes [4]);  
Magic Number,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,BytesToTableID,The following statement contains a magic number: if ((bytes [0] & 0x03) == 1)  	return (uint)((bytes [1] << 0x08) + bytes [2]);  else if ((bytes [0] & 0x03) == 2)  	return (uint)(((uint)bytes [1] << 0x10) + (bytes [2] << 0x08) + bytes [3]);  else  	//if ((bytes[0] & 0x03) == 3)  	return (uint)(((uint)bytes [1] << 0x18) + ((uint)bytes [2] << 0x10) + (bytes [3] << 0x08) + bytes [4]);  
Magic Number,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,BytesToTableID,The following statement contains a magic number: if ((bytes [0] & 0x03) == 1)  	return (uint)((bytes [1] << 0x08) + bytes [2]);  else if ((bytes [0] & 0x03) == 2)  	return (uint)(((uint)bytes [1] << 0x10) + (bytes [2] << 0x08) + bytes [3]);  else  	//if ((bytes[0] & 0x03) == 3)  	return (uint)(((uint)bytes [1] << 0x18) + ((uint)bytes [2] << 0x10) + (bytes [3] << 0x08) + bytes [4]);  
Magic Number,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,BytesToTableID,The following statement contains a magic number: if ((bytes [0] & 0x03) == 1)  	return (uint)((bytes [1] << 0x08) + bytes [2]);  else if ((bytes [0] & 0x03) == 2)  	return (uint)(((uint)bytes [1] << 0x10) + (bytes [2] << 0x08) + bytes [3]);  else  	//if ((bytes[0] & 0x03) == 3)  	return (uint)(((uint)bytes [1] << 0x18) + ((uint)bytes [2] << 0x10) + (bytes [3] << 0x08) + bytes [4]);  
Magic Number,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,BytesToTableID,The following statement contains a magic number: if ((bytes [0] & 0x03) == 1)  	return (uint)((bytes [1] << 0x08) + bytes [2]);  else if ((bytes [0] & 0x03) == 2)  	return (uint)(((uint)bytes [1] << 0x10) + (bytes [2] << 0x08) + bytes [3]);  else  	//if ((bytes[0] & 0x03) == 3)  	return (uint)(((uint)bytes [1] << 0x18) + ((uint)bytes [2] << 0x10) + (bytes [3] << 0x08) + bytes [4]);  
Magic Number,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,BytesToTableID,The following statement contains a magic number: return (uint)((bytes [1] << 0x08) + bytes [2]);  
Magic Number,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,BytesToTableID,The following statement contains a magic number: if ((bytes [0] & 0x03) == 2)  	return (uint)(((uint)bytes [1] << 0x10) + (bytes [2] << 0x08) + bytes [3]);  else  	//if ((bytes[0] & 0x03) == 3)  	return (uint)(((uint)bytes [1] << 0x18) + ((uint)bytes [2] << 0x10) + (bytes [3] << 0x08) + bytes [4]);  
Magic Number,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,BytesToTableID,The following statement contains a magic number: if ((bytes [0] & 0x03) == 2)  	return (uint)(((uint)bytes [1] << 0x10) + (bytes [2] << 0x08) + bytes [3]);  else  	//if ((bytes[0] & 0x03) == 3)  	return (uint)(((uint)bytes [1] << 0x18) + ((uint)bytes [2] << 0x10) + (bytes [3] << 0x08) + bytes [4]);  
Magic Number,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,BytesToTableID,The following statement contains a magic number: if ((bytes [0] & 0x03) == 2)  	return (uint)(((uint)bytes [1] << 0x10) + (bytes [2] << 0x08) + bytes [3]);  else  	//if ((bytes[0] & 0x03) == 3)  	return (uint)(((uint)bytes [1] << 0x18) + ((uint)bytes [2] << 0x10) + (bytes [3] << 0x08) + bytes [4]);  
Magic Number,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,BytesToTableID,The following statement contains a magic number: if ((bytes [0] & 0x03) == 2)  	return (uint)(((uint)bytes [1] << 0x10) + (bytes [2] << 0x08) + bytes [3]);  else  	//if ((bytes[0] & 0x03) == 3)  	return (uint)(((uint)bytes [1] << 0x18) + ((uint)bytes [2] << 0x10) + (bytes [3] << 0x08) + bytes [4]);  
Magic Number,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,BytesToTableID,The following statement contains a magic number: if ((bytes [0] & 0x03) == 2)  	return (uint)(((uint)bytes [1] << 0x10) + (bytes [2] << 0x08) + bytes [3]);  else  	//if ((bytes[0] & 0x03) == 3)  	return (uint)(((uint)bytes [1] << 0x18) + ((uint)bytes [2] << 0x10) + (bytes [3] << 0x08) + bytes [4]);  
Magic Number,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,BytesToTableID,The following statement contains a magic number: if ((bytes [0] & 0x03) == 2)  	return (uint)(((uint)bytes [1] << 0x10) + (bytes [2] << 0x08) + bytes [3]);  else  	//if ((bytes[0] & 0x03) == 3)  	return (uint)(((uint)bytes [1] << 0x18) + ((uint)bytes [2] << 0x10) + (bytes [3] << 0x08) + bytes [4]);  
Magic Number,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,BytesToTableID,The following statement contains a magic number: return (uint)(((uint)bytes [1] << 0x10) + (bytes [2] << 0x08) + bytes [3]);  
Magic Number,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,BytesToTableID,The following statement contains a magic number: return (uint)(((uint)bytes [1] << 0x10) + (bytes [2] << 0x08) + bytes [3]);  
Magic Number,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,BytesToTableID,The following statement contains a magic number: return (uint)(((uint)bytes [1] << 0x18) + ((uint)bytes [2] << 0x10) + (bytes [3] << 0x08) + bytes [4]);  
Magic Number,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,BytesToTableID,The following statement contains a magic number: return (uint)(((uint)bytes [1] << 0x18) + ((uint)bytes [2] << 0x10) + (bytes [3] << 0x08) + bytes [4]);  
Magic Number,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,BytesToTableID,The following statement contains a magic number: return (uint)(((uint)bytes [1] << 0x18) + ((uint)bytes [2] << 0x10) + (bytes [3] << 0x08) + bytes [4]);  
Magic Number,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,BytesToFieldID,The following statement contains a magic number: if ((bytes [0] & 0xFC) != 0xFC)  	return (uint)(bytes [0] & ~FIELD_ID);  else if ((bytes [0] & 0x03) == 0)  	return (uint)bytes [1];  else if ((bytes [0] & 0x03) == 1)  	return (uint)((bytes [1] << 0x08) + bytes [2]);  else if ((bytes [0] & 0x03) == 2)  	return (uint)(((uint)bytes [1] << 0x10) + (bytes [2] << 0x08) + bytes [3]);  else  	//if ((bytes[0] & 0x03) == 3)  	return (uint)(((uint)bytes [1] << 0x18) + ((uint)bytes [2] << 0x10) + (bytes [3] << 0x08) + bytes [4]);  
Magic Number,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,BytesToFieldID,The following statement contains a magic number: if ((bytes [0] & 0xFC) != 0xFC)  	return (uint)(bytes [0] & ~FIELD_ID);  else if ((bytes [0] & 0x03) == 0)  	return (uint)bytes [1];  else if ((bytes [0] & 0x03) == 1)  	return (uint)((bytes [1] << 0x08) + bytes [2]);  else if ((bytes [0] & 0x03) == 2)  	return (uint)(((uint)bytes [1] << 0x10) + (bytes [2] << 0x08) + bytes [3]);  else  	//if ((bytes[0] & 0x03) == 3)  	return (uint)(((uint)bytes [1] << 0x18) + ((uint)bytes [2] << 0x10) + (bytes [3] << 0x08) + bytes [4]);  
Magic Number,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,BytesToFieldID,The following statement contains a magic number: if ((bytes [0] & 0xFC) != 0xFC)  	return (uint)(bytes [0] & ~FIELD_ID);  else if ((bytes [0] & 0x03) == 0)  	return (uint)bytes [1];  else if ((bytes [0] & 0x03) == 1)  	return (uint)((bytes [1] << 0x08) + bytes [2]);  else if ((bytes [0] & 0x03) == 2)  	return (uint)(((uint)bytes [1] << 0x10) + (bytes [2] << 0x08) + bytes [3]);  else  	//if ((bytes[0] & 0x03) == 3)  	return (uint)(((uint)bytes [1] << 0x18) + ((uint)bytes [2] << 0x10) + (bytes [3] << 0x08) + bytes [4]);  
Magic Number,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,BytesToFieldID,The following statement contains a magic number: if ((bytes [0] & 0xFC) != 0xFC)  	return (uint)(bytes [0] & ~FIELD_ID);  else if ((bytes [0] & 0x03) == 0)  	return (uint)bytes [1];  else if ((bytes [0] & 0x03) == 1)  	return (uint)((bytes [1] << 0x08) + bytes [2]);  else if ((bytes [0] & 0x03) == 2)  	return (uint)(((uint)bytes [1] << 0x10) + (bytes [2] << 0x08) + bytes [3]);  else  	//if ((bytes[0] & 0x03) == 3)  	return (uint)(((uint)bytes [1] << 0x18) + ((uint)bytes [2] << 0x10) + (bytes [3] << 0x08) + bytes [4]);  
Magic Number,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,BytesToFieldID,The following statement contains a magic number: if ((bytes [0] & 0xFC) != 0xFC)  	return (uint)(bytes [0] & ~FIELD_ID);  else if ((bytes [0] & 0x03) == 0)  	return (uint)bytes [1];  else if ((bytes [0] & 0x03) == 1)  	return (uint)((bytes [1] << 0x08) + bytes [2]);  else if ((bytes [0] & 0x03) == 2)  	return (uint)(((uint)bytes [1] << 0x10) + (bytes [2] << 0x08) + bytes [3]);  else  	//if ((bytes[0] & 0x03) == 3)  	return (uint)(((uint)bytes [1] << 0x18) + ((uint)bytes [2] << 0x10) + (bytes [3] << 0x08) + bytes [4]);  
Magic Number,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,BytesToFieldID,The following statement contains a magic number: if ((bytes [0] & 0xFC) != 0xFC)  	return (uint)(bytes [0] & ~FIELD_ID);  else if ((bytes [0] & 0x03) == 0)  	return (uint)bytes [1];  else if ((bytes [0] & 0x03) == 1)  	return (uint)((bytes [1] << 0x08) + bytes [2]);  else if ((bytes [0] & 0x03) == 2)  	return (uint)(((uint)bytes [1] << 0x10) + (bytes [2] << 0x08) + bytes [3]);  else  	//if ((bytes[0] & 0x03) == 3)  	return (uint)(((uint)bytes [1] << 0x18) + ((uint)bytes [2] << 0x10) + (bytes [3] << 0x08) + bytes [4]);  
Magic Number,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,BytesToFieldID,The following statement contains a magic number: if ((bytes [0] & 0xFC) != 0xFC)  	return (uint)(bytes [0] & ~FIELD_ID);  else if ((bytes [0] & 0x03) == 0)  	return (uint)bytes [1];  else if ((bytes [0] & 0x03) == 1)  	return (uint)((bytes [1] << 0x08) + bytes [2]);  else if ((bytes [0] & 0x03) == 2)  	return (uint)(((uint)bytes [1] << 0x10) + (bytes [2] << 0x08) + bytes [3]);  else  	//if ((bytes[0] & 0x03) == 3)  	return (uint)(((uint)bytes [1] << 0x18) + ((uint)bytes [2] << 0x10) + (bytes [3] << 0x08) + bytes [4]);  
Magic Number,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,BytesToFieldID,The following statement contains a magic number: if ((bytes [0] & 0x03) == 0)  	return (uint)bytes [1];  else if ((bytes [0] & 0x03) == 1)  	return (uint)((bytes [1] << 0x08) + bytes [2]);  else if ((bytes [0] & 0x03) == 2)  	return (uint)(((uint)bytes [1] << 0x10) + (bytes [2] << 0x08) + bytes [3]);  else  	//if ((bytes[0] & 0x03) == 3)  	return (uint)(((uint)bytes [1] << 0x18) + ((uint)bytes [2] << 0x10) + (bytes [3] << 0x08) + bytes [4]);  
Magic Number,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,BytesToFieldID,The following statement contains a magic number: if ((bytes [0] & 0x03) == 0)  	return (uint)bytes [1];  else if ((bytes [0] & 0x03) == 1)  	return (uint)((bytes [1] << 0x08) + bytes [2]);  else if ((bytes [0] & 0x03) == 2)  	return (uint)(((uint)bytes [1] << 0x10) + (bytes [2] << 0x08) + bytes [3]);  else  	//if ((bytes[0] & 0x03) == 3)  	return (uint)(((uint)bytes [1] << 0x18) + ((uint)bytes [2] << 0x10) + (bytes [3] << 0x08) + bytes [4]);  
Magic Number,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,BytesToFieldID,The following statement contains a magic number: if ((bytes [0] & 0x03) == 0)  	return (uint)bytes [1];  else if ((bytes [0] & 0x03) == 1)  	return (uint)((bytes [1] << 0x08) + bytes [2]);  else if ((bytes [0] & 0x03) == 2)  	return (uint)(((uint)bytes [1] << 0x10) + (bytes [2] << 0x08) + bytes [3]);  else  	//if ((bytes[0] & 0x03) == 3)  	return (uint)(((uint)bytes [1] << 0x18) + ((uint)bytes [2] << 0x10) + (bytes [3] << 0x08) + bytes [4]);  
Magic Number,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,BytesToFieldID,The following statement contains a magic number: if ((bytes [0] & 0x03) == 0)  	return (uint)bytes [1];  else if ((bytes [0] & 0x03) == 1)  	return (uint)((bytes [1] << 0x08) + bytes [2]);  else if ((bytes [0] & 0x03) == 2)  	return (uint)(((uint)bytes [1] << 0x10) + (bytes [2] << 0x08) + bytes [3]);  else  	//if ((bytes[0] & 0x03) == 3)  	return (uint)(((uint)bytes [1] << 0x18) + ((uint)bytes [2] << 0x10) + (bytes [3] << 0x08) + bytes [4]);  
Magic Number,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,BytesToFieldID,The following statement contains a magic number: if ((bytes [0] & 0x03) == 0)  	return (uint)bytes [1];  else if ((bytes [0] & 0x03) == 1)  	return (uint)((bytes [1] << 0x08) + bytes [2]);  else if ((bytes [0] & 0x03) == 2)  	return (uint)(((uint)bytes [1] << 0x10) + (bytes [2] << 0x08) + bytes [3]);  else  	//if ((bytes[0] & 0x03) == 3)  	return (uint)(((uint)bytes [1] << 0x18) + ((uint)bytes [2] << 0x10) + (bytes [3] << 0x08) + bytes [4]);  
Magic Number,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,BytesToFieldID,The following statement contains a magic number: if ((bytes [0] & 0x03) == 0)  	return (uint)bytes [1];  else if ((bytes [0] & 0x03) == 1)  	return (uint)((bytes [1] << 0x08) + bytes [2]);  else if ((bytes [0] & 0x03) == 2)  	return (uint)(((uint)bytes [1] << 0x10) + (bytes [2] << 0x08) + bytes [3]);  else  	//if ((bytes[0] & 0x03) == 3)  	return (uint)(((uint)bytes [1] << 0x18) + ((uint)bytes [2] << 0x10) + (bytes [3] << 0x08) + bytes [4]);  
Magic Number,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,BytesToFieldID,The following statement contains a magic number: if ((bytes [0] & 0x03) == 0)  	return (uint)bytes [1];  else if ((bytes [0] & 0x03) == 1)  	return (uint)((bytes [1] << 0x08) + bytes [2]);  else if ((bytes [0] & 0x03) == 2)  	return (uint)(((uint)bytes [1] << 0x10) + (bytes [2] << 0x08) + bytes [3]);  else  	//if ((bytes[0] & 0x03) == 3)  	return (uint)(((uint)bytes [1] << 0x18) + ((uint)bytes [2] << 0x10) + (bytes [3] << 0x08) + bytes [4]);  
Magic Number,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,BytesToFieldID,The following statement contains a magic number: if ((bytes [0] & 0x03) == 1)  	return (uint)((bytes [1] << 0x08) + bytes [2]);  else if ((bytes [0] & 0x03) == 2)  	return (uint)(((uint)bytes [1] << 0x10) + (bytes [2] << 0x08) + bytes [3]);  else  	//if ((bytes[0] & 0x03) == 3)  	return (uint)(((uint)bytes [1] << 0x18) + ((uint)bytes [2] << 0x10) + (bytes [3] << 0x08) + bytes [4]);  
Magic Number,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,BytesToFieldID,The following statement contains a magic number: if ((bytes [0] & 0x03) == 1)  	return (uint)((bytes [1] << 0x08) + bytes [2]);  else if ((bytes [0] & 0x03) == 2)  	return (uint)(((uint)bytes [1] << 0x10) + (bytes [2] << 0x08) + bytes [3]);  else  	//if ((bytes[0] & 0x03) == 3)  	return (uint)(((uint)bytes [1] << 0x18) + ((uint)bytes [2] << 0x10) + (bytes [3] << 0x08) + bytes [4]);  
Magic Number,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,BytesToFieldID,The following statement contains a magic number: if ((bytes [0] & 0x03) == 1)  	return (uint)((bytes [1] << 0x08) + bytes [2]);  else if ((bytes [0] & 0x03) == 2)  	return (uint)(((uint)bytes [1] << 0x10) + (bytes [2] << 0x08) + bytes [3]);  else  	//if ((bytes[0] & 0x03) == 3)  	return (uint)(((uint)bytes [1] << 0x18) + ((uint)bytes [2] << 0x10) + (bytes [3] << 0x08) + bytes [4]);  
Magic Number,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,BytesToFieldID,The following statement contains a magic number: if ((bytes [0] & 0x03) == 1)  	return (uint)((bytes [1] << 0x08) + bytes [2]);  else if ((bytes [0] & 0x03) == 2)  	return (uint)(((uint)bytes [1] << 0x10) + (bytes [2] << 0x08) + bytes [3]);  else  	//if ((bytes[0] & 0x03) == 3)  	return (uint)(((uint)bytes [1] << 0x18) + ((uint)bytes [2] << 0x10) + (bytes [3] << 0x08) + bytes [4]);  
Magic Number,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,BytesToFieldID,The following statement contains a magic number: if ((bytes [0] & 0x03) == 1)  	return (uint)((bytes [1] << 0x08) + bytes [2]);  else if ((bytes [0] & 0x03) == 2)  	return (uint)(((uint)bytes [1] << 0x10) + (bytes [2] << 0x08) + bytes [3]);  else  	//if ((bytes[0] & 0x03) == 3)  	return (uint)(((uint)bytes [1] << 0x18) + ((uint)bytes [2] << 0x10) + (bytes [3] << 0x08) + bytes [4]);  
Magic Number,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,BytesToFieldID,The following statement contains a magic number: if ((bytes [0] & 0x03) == 1)  	return (uint)((bytes [1] << 0x08) + bytes [2]);  else if ((bytes [0] & 0x03) == 2)  	return (uint)(((uint)bytes [1] << 0x10) + (bytes [2] << 0x08) + bytes [3]);  else  	//if ((bytes[0] & 0x03) == 3)  	return (uint)(((uint)bytes [1] << 0x18) + ((uint)bytes [2] << 0x10) + (bytes [3] << 0x08) + bytes [4]);  
Magic Number,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,BytesToFieldID,The following statement contains a magic number: if ((bytes [0] & 0x03) == 1)  	return (uint)((bytes [1] << 0x08) + bytes [2]);  else if ((bytes [0] & 0x03) == 2)  	return (uint)(((uint)bytes [1] << 0x10) + (bytes [2] << 0x08) + bytes [3]);  else  	//if ((bytes[0] & 0x03) == 3)  	return (uint)(((uint)bytes [1] << 0x18) + ((uint)bytes [2] << 0x10) + (bytes [3] << 0x08) + bytes [4]);  
Magic Number,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,BytesToFieldID,The following statement contains a magic number: return (uint)((bytes [1] << 0x08) + bytes [2]);  
Magic Number,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,BytesToFieldID,The following statement contains a magic number: if ((bytes [0] & 0x03) == 2)  	return (uint)(((uint)bytes [1] << 0x10) + (bytes [2] << 0x08) + bytes [3]);  else  	//if ((bytes[0] & 0x03) == 3)  	return (uint)(((uint)bytes [1] << 0x18) + ((uint)bytes [2] << 0x10) + (bytes [3] << 0x08) + bytes [4]);  
Magic Number,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,BytesToFieldID,The following statement contains a magic number: if ((bytes [0] & 0x03) == 2)  	return (uint)(((uint)bytes [1] << 0x10) + (bytes [2] << 0x08) + bytes [3]);  else  	//if ((bytes[0] & 0x03) == 3)  	return (uint)(((uint)bytes [1] << 0x18) + ((uint)bytes [2] << 0x10) + (bytes [3] << 0x08) + bytes [4]);  
Magic Number,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,BytesToFieldID,The following statement contains a magic number: if ((bytes [0] & 0x03) == 2)  	return (uint)(((uint)bytes [1] << 0x10) + (bytes [2] << 0x08) + bytes [3]);  else  	//if ((bytes[0] & 0x03) == 3)  	return (uint)(((uint)bytes [1] << 0x18) + ((uint)bytes [2] << 0x10) + (bytes [3] << 0x08) + bytes [4]);  
Magic Number,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,BytesToFieldID,The following statement contains a magic number: if ((bytes [0] & 0x03) == 2)  	return (uint)(((uint)bytes [1] << 0x10) + (bytes [2] << 0x08) + bytes [3]);  else  	//if ((bytes[0] & 0x03) == 3)  	return (uint)(((uint)bytes [1] << 0x18) + ((uint)bytes [2] << 0x10) + (bytes [3] << 0x08) + bytes [4]);  
Magic Number,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,BytesToFieldID,The following statement contains a magic number: if ((bytes [0] & 0x03) == 2)  	return (uint)(((uint)bytes [1] << 0x10) + (bytes [2] << 0x08) + bytes [3]);  else  	//if ((bytes[0] & 0x03) == 3)  	return (uint)(((uint)bytes [1] << 0x18) + ((uint)bytes [2] << 0x10) + (bytes [3] << 0x08) + bytes [4]);  
Magic Number,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,BytesToFieldID,The following statement contains a magic number: if ((bytes [0] & 0x03) == 2)  	return (uint)(((uint)bytes [1] << 0x10) + (bytes [2] << 0x08) + bytes [3]);  else  	//if ((bytes[0] & 0x03) == 3)  	return (uint)(((uint)bytes [1] << 0x18) + ((uint)bytes [2] << 0x10) + (bytes [3] << 0x08) + bytes [4]);  
Magic Number,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,BytesToFieldID,The following statement contains a magic number: return (uint)(((uint)bytes [1] << 0x10) + (bytes [2] << 0x08) + bytes [3]);  
Magic Number,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,BytesToFieldID,The following statement contains a magic number: return (uint)(((uint)bytes [1] << 0x10) + (bytes [2] << 0x08) + bytes [3]);  
Magic Number,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,BytesToFieldID,The following statement contains a magic number: return (uint)(((uint)bytes [1] << 0x18) + ((uint)bytes [2] << 0x10) + (bytes [3] << 0x08) + bytes [4]);  
Magic Number,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,BytesToFieldID,The following statement contains a magic number: return (uint)(((uint)bytes [1] << 0x18) + ((uint)bytes [2] << 0x10) + (bytes [3] << 0x08) + bytes [4]);  
Magic Number,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,BytesToFieldID,The following statement contains a magic number: return (uint)(((uint)bytes [1] << 0x18) + ((uint)bytes [2] << 0x10) + (bytes [3] << 0x08) + bytes [4]);  
Magic Number,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,CreateNetString,The following statement contains a magic number: if (value.Length < 255) {  	buffer [0] = (byte)value.Length;  	Buffer.BlockCopy (ASCIIEncoding.ASCII.GetBytes (value)' 0' buffer' 1' value.Length);  }  else {  	buffer [0] = BEGIN_STRING;  	Buffer.BlockCopy (ASCIIEncoding.ASCII.GetBytes (value)' 0' buffer' 1' value.Length);  	buffer [buffer.Length - 1] = END_STRING;  }  
Magic Number,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,FireBuffered,The following statement contains a magic number: if ((DateTime.Now - lastfiretime).Milliseconds > 50 || updates++ > 20) {  	//Fire events  	if (DataRecieved != null)  		DataRecieved (this' new EventArgs ());  	if (NewDataRecieved != null)  		NewDataRecieved (this' new NewDataRecievedEventArgs (kys));  	lastfiretime = DateTime.Now;  	updates = 0;  }  
Magic Number,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,FireBuffered,The following statement contains a magic number: if ((DateTime.Now - lastfiretime).Milliseconds > 50 || updates++ > 20) {  	//Fire events  	if (DataRecieved != null)  		DataRecieved (this' new EventArgs ());  	if (NewDataRecieved != null)  		NewDataRecieved (this' new NewDataRecievedEventArgs (kys));  	lastfiretime = DateTime.Now;  	updates = 0;  }  
Magic Number,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,ReadUpdate,The following statement contains a magic number: switch (type) {  case STRING: {  	typetable [fid] = ZomBDataTypeHint.String;  	string value = ReadNetString (stream);  	this.UpdateValue (fid' value' fire);  	break;  }  case INT: {  	typetable [fid] = ZomBDataTypeHint.Integer;  	int value = (stream.ReadByte () << 0x18) + (stream.ReadByte () << 0x10) + (stream.ReadByte () << 0x08) + (stream.ReadByte ());  	this.UpdateValue (fid' value' fire);  	break;  }  case BOOLEAN_TRUE:  case BOOLEAN_FALSE: {  	typetable [fid] = ZomBDataTypeHint.Boolean;  	bool value = (type & 1) == 1;  	this.UpdateValue (fid' value' fire);  	break;  }  case DOUBLE: {  	typetable [fid] = ZomBDataTypeHint.Double;  	long part = 0;  	part += (long)(((long)stream.ReadByte ()) << 56);  	part += (long)(((long)stream.ReadByte ()) << 48);  	part += (long)(((long)stream.ReadByte ()) << 40);  	part += (long)(((long)stream.ReadByte ()) << 32);  	part += (long)(stream.ReadByte () << 24);  	part += (long)(stream.ReadByte () << 16);  	part += (long)(stream.ReadByte () << 8);  	part += (long)(stream.ReadByte ());  	double value = BitConverter.Int64BitsToDouble (part);  	this.UpdateValue (fid' value' fire);  	break;  }  default:  	if ((type & TABLE_ID) == TABLE_ID)//We have a subtable  	 {  		typetable [fid] = ZomBDataTypeHint.Lookup;  		byte[] tableidbuff = new byte[5];  		buffer [0] = (byte)type;  		uint tableid = BytesToTableID (ReadID (buffer' stream' TABLE_ID_MAGIC_NUMBER));  		ZomBDataLookup dict;  		if (!tables.ContainsKey (tableid))//gotta create it  		 {  			throw new InvalidOperationException ("Throw er in the debugger! Something odd happened!");  			//dict = new ZomBDataLookup();  			//tables.AddOrUpdate(tableid' dict);  			////tablesbyfield.AddOrUpdate(fid' dict);//TODO: fix this  			//this.SillySendTableLink(tableid);  		}  		else//only gotta assign the fid  		 {  			dict = tables [tableid];  		}  		tablesbyparent.AddOrUpdate (dict' new NameTableGrouping {  			Table = tablesbyfield [fid]'  			Name = nametable [fid].Replace ("\\"' "\\\\").Replace ("."' "\\.")  		});  		this.UpdateValue (fid' dict' fire);  		break;  	}  	else {  		typetable [fid] = ZomBDataTypeHint.Unknown;  		throw new Exception ("WHOA! Unknown type' buddy!");  	}  }  
Magic Number,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,ReadUpdate,The following statement contains a magic number: switch (type) {  case STRING: {  	typetable [fid] = ZomBDataTypeHint.String;  	string value = ReadNetString (stream);  	this.UpdateValue (fid' value' fire);  	break;  }  case INT: {  	typetable [fid] = ZomBDataTypeHint.Integer;  	int value = (stream.ReadByte () << 0x18) + (stream.ReadByte () << 0x10) + (stream.ReadByte () << 0x08) + (stream.ReadByte ());  	this.UpdateValue (fid' value' fire);  	break;  }  case BOOLEAN_TRUE:  case BOOLEAN_FALSE: {  	typetable [fid] = ZomBDataTypeHint.Boolean;  	bool value = (type & 1) == 1;  	this.UpdateValue (fid' value' fire);  	break;  }  case DOUBLE: {  	typetable [fid] = ZomBDataTypeHint.Double;  	long part = 0;  	part += (long)(((long)stream.ReadByte ()) << 56);  	part += (long)(((long)stream.ReadByte ()) << 48);  	part += (long)(((long)stream.ReadByte ()) << 40);  	part += (long)(((long)stream.ReadByte ()) << 32);  	part += (long)(stream.ReadByte () << 24);  	part += (long)(stream.ReadByte () << 16);  	part += (long)(stream.ReadByte () << 8);  	part += (long)(stream.ReadByte ());  	double value = BitConverter.Int64BitsToDouble (part);  	this.UpdateValue (fid' value' fire);  	break;  }  default:  	if ((type & TABLE_ID) == TABLE_ID)//We have a subtable  	 {  		typetable [fid] = ZomBDataTypeHint.Lookup;  		byte[] tableidbuff = new byte[5];  		buffer [0] = (byte)type;  		uint tableid = BytesToTableID (ReadID (buffer' stream' TABLE_ID_MAGIC_NUMBER));  		ZomBDataLookup dict;  		if (!tables.ContainsKey (tableid))//gotta create it  		 {  			throw new InvalidOperationException ("Throw er in the debugger! Something odd happened!");  			//dict = new ZomBDataLookup();  			//tables.AddOrUpdate(tableid' dict);  			////tablesbyfield.AddOrUpdate(fid' dict);//TODO: fix this  			//this.SillySendTableLink(tableid);  		}  		else//only gotta assign the fid  		 {  			dict = tables [tableid];  		}  		tablesbyparent.AddOrUpdate (dict' new NameTableGrouping {  			Table = tablesbyfield [fid]'  			Name = nametable [fid].Replace ("\\"' "\\\\").Replace ("."' "\\.")  		});  		this.UpdateValue (fid' dict' fire);  		break;  	}  	else {  		typetable [fid] = ZomBDataTypeHint.Unknown;  		throw new Exception ("WHOA! Unknown type' buddy!");  	}  }  
Magic Number,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,ReadUpdate,The following statement contains a magic number: switch (type) {  case STRING: {  	typetable [fid] = ZomBDataTypeHint.String;  	string value = ReadNetString (stream);  	this.UpdateValue (fid' value' fire);  	break;  }  case INT: {  	typetable [fid] = ZomBDataTypeHint.Integer;  	int value = (stream.ReadByte () << 0x18) + (stream.ReadByte () << 0x10) + (stream.ReadByte () << 0x08) + (stream.ReadByte ());  	this.UpdateValue (fid' value' fire);  	break;  }  case BOOLEAN_TRUE:  case BOOLEAN_FALSE: {  	typetable [fid] = ZomBDataTypeHint.Boolean;  	bool value = (type & 1) == 1;  	this.UpdateValue (fid' value' fire);  	break;  }  case DOUBLE: {  	typetable [fid] = ZomBDataTypeHint.Double;  	long part = 0;  	part += (long)(((long)stream.ReadByte ()) << 56);  	part += (long)(((long)stream.ReadByte ()) << 48);  	part += (long)(((long)stream.ReadByte ()) << 40);  	part += (long)(((long)stream.ReadByte ()) << 32);  	part += (long)(stream.ReadByte () << 24);  	part += (long)(stream.ReadByte () << 16);  	part += (long)(stream.ReadByte () << 8);  	part += (long)(stream.ReadByte ());  	double value = BitConverter.Int64BitsToDouble (part);  	this.UpdateValue (fid' value' fire);  	break;  }  default:  	if ((type & TABLE_ID) == TABLE_ID)//We have a subtable  	 {  		typetable [fid] = ZomBDataTypeHint.Lookup;  		byte[] tableidbuff = new byte[5];  		buffer [0] = (byte)type;  		uint tableid = BytesToTableID (ReadID (buffer' stream' TABLE_ID_MAGIC_NUMBER));  		ZomBDataLookup dict;  		if (!tables.ContainsKey (tableid))//gotta create it  		 {  			throw new InvalidOperationException ("Throw er in the debugger! Something odd happened!");  			//dict = new ZomBDataLookup();  			//tables.AddOrUpdate(tableid' dict);  			////tablesbyfield.AddOrUpdate(fid' dict);//TODO: fix this  			//this.SillySendTableLink(tableid);  		}  		else//only gotta assign the fid  		 {  			dict = tables [tableid];  		}  		tablesbyparent.AddOrUpdate (dict' new NameTableGrouping {  			Table = tablesbyfield [fid]'  			Name = nametable [fid].Replace ("\\"' "\\\\").Replace ("."' "\\.")  		});  		this.UpdateValue (fid' dict' fire);  		break;  	}  	else {  		typetable [fid] = ZomBDataTypeHint.Unknown;  		throw new Exception ("WHOA! Unknown type' buddy!");  	}  }  
Magic Number,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,ReadUpdate,The following statement contains a magic number: switch (type) {  case STRING: {  	typetable [fid] = ZomBDataTypeHint.String;  	string value = ReadNetString (stream);  	this.UpdateValue (fid' value' fire);  	break;  }  case INT: {  	typetable [fid] = ZomBDataTypeHint.Integer;  	int value = (stream.ReadByte () << 0x18) + (stream.ReadByte () << 0x10) + (stream.ReadByte () << 0x08) + (stream.ReadByte ());  	this.UpdateValue (fid' value' fire);  	break;  }  case BOOLEAN_TRUE:  case BOOLEAN_FALSE: {  	typetable [fid] = ZomBDataTypeHint.Boolean;  	bool value = (type & 1) == 1;  	this.UpdateValue (fid' value' fire);  	break;  }  case DOUBLE: {  	typetable [fid] = ZomBDataTypeHint.Double;  	long part = 0;  	part += (long)(((long)stream.ReadByte ()) << 56);  	part += (long)(((long)stream.ReadByte ()) << 48);  	part += (long)(((long)stream.ReadByte ()) << 40);  	part += (long)(((long)stream.ReadByte ()) << 32);  	part += (long)(stream.ReadByte () << 24);  	part += (long)(stream.ReadByte () << 16);  	part += (long)(stream.ReadByte () << 8);  	part += (long)(stream.ReadByte ());  	double value = BitConverter.Int64BitsToDouble (part);  	this.UpdateValue (fid' value' fire);  	break;  }  default:  	if ((type & TABLE_ID) == TABLE_ID)//We have a subtable  	 {  		typetable [fid] = ZomBDataTypeHint.Lookup;  		byte[] tableidbuff = new byte[5];  		buffer [0] = (byte)type;  		uint tableid = BytesToTableID (ReadID (buffer' stream' TABLE_ID_MAGIC_NUMBER));  		ZomBDataLookup dict;  		if (!tables.ContainsKey (tableid))//gotta create it  		 {  			throw new InvalidOperationException ("Throw er in the debugger! Something odd happened!");  			//dict = new ZomBDataLookup();  			//tables.AddOrUpdate(tableid' dict);  			////tablesbyfield.AddOrUpdate(fid' dict);//TODO: fix this  			//this.SillySendTableLink(tableid);  		}  		else//only gotta assign the fid  		 {  			dict = tables [tableid];  		}  		tablesbyparent.AddOrUpdate (dict' new NameTableGrouping {  			Table = tablesbyfield [fid]'  			Name = nametable [fid].Replace ("\\"' "\\\\").Replace ("."' "\\.")  		});  		this.UpdateValue (fid' dict' fire);  		break;  	}  	else {  		typetable [fid] = ZomBDataTypeHint.Unknown;  		throw new Exception ("WHOA! Unknown type' buddy!");  	}  }  
Magic Number,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,ReadUpdate,The following statement contains a magic number: switch (type) {  case STRING: {  	typetable [fid] = ZomBDataTypeHint.String;  	string value = ReadNetString (stream);  	this.UpdateValue (fid' value' fire);  	break;  }  case INT: {  	typetable [fid] = ZomBDataTypeHint.Integer;  	int value = (stream.ReadByte () << 0x18) + (stream.ReadByte () << 0x10) + (stream.ReadByte () << 0x08) + (stream.ReadByte ());  	this.UpdateValue (fid' value' fire);  	break;  }  case BOOLEAN_TRUE:  case BOOLEAN_FALSE: {  	typetable [fid] = ZomBDataTypeHint.Boolean;  	bool value = (type & 1) == 1;  	this.UpdateValue (fid' value' fire);  	break;  }  case DOUBLE: {  	typetable [fid] = ZomBDataTypeHint.Double;  	long part = 0;  	part += (long)(((long)stream.ReadByte ()) << 56);  	part += (long)(((long)stream.ReadByte ()) << 48);  	part += (long)(((long)stream.ReadByte ()) << 40);  	part += (long)(((long)stream.ReadByte ()) << 32);  	part += (long)(stream.ReadByte () << 24);  	part += (long)(stream.ReadByte () << 16);  	part += (long)(stream.ReadByte () << 8);  	part += (long)(stream.ReadByte ());  	double value = BitConverter.Int64BitsToDouble (part);  	this.UpdateValue (fid' value' fire);  	break;  }  default:  	if ((type & TABLE_ID) == TABLE_ID)//We have a subtable  	 {  		typetable [fid] = ZomBDataTypeHint.Lookup;  		byte[] tableidbuff = new byte[5];  		buffer [0] = (byte)type;  		uint tableid = BytesToTableID (ReadID (buffer' stream' TABLE_ID_MAGIC_NUMBER));  		ZomBDataLookup dict;  		if (!tables.ContainsKey (tableid))//gotta create it  		 {  			throw new InvalidOperationException ("Throw er in the debugger! Something odd happened!");  			//dict = new ZomBDataLookup();  			//tables.AddOrUpdate(tableid' dict);  			////tablesbyfield.AddOrUpdate(fid' dict);//TODO: fix this  			//this.SillySendTableLink(tableid);  		}  		else//only gotta assign the fid  		 {  			dict = tables [tableid];  		}  		tablesbyparent.AddOrUpdate (dict' new NameTableGrouping {  			Table = tablesbyfield [fid]'  			Name = nametable [fid].Replace ("\\"' "\\\\").Replace ("."' "\\.")  		});  		this.UpdateValue (fid' dict' fire);  		break;  	}  	else {  		typetable [fid] = ZomBDataTypeHint.Unknown;  		throw new Exception ("WHOA! Unknown type' buddy!");  	}  }  
Magic Number,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,ReadUpdate,The following statement contains a magic number: switch (type) {  case STRING: {  	typetable [fid] = ZomBDataTypeHint.String;  	string value = ReadNetString (stream);  	this.UpdateValue (fid' value' fire);  	break;  }  case INT: {  	typetable [fid] = ZomBDataTypeHint.Integer;  	int value = (stream.ReadByte () << 0x18) + (stream.ReadByte () << 0x10) + (stream.ReadByte () << 0x08) + (stream.ReadByte ());  	this.UpdateValue (fid' value' fire);  	break;  }  case BOOLEAN_TRUE:  case BOOLEAN_FALSE: {  	typetable [fid] = ZomBDataTypeHint.Boolean;  	bool value = (type & 1) == 1;  	this.UpdateValue (fid' value' fire);  	break;  }  case DOUBLE: {  	typetable [fid] = ZomBDataTypeHint.Double;  	long part = 0;  	part += (long)(((long)stream.ReadByte ()) << 56);  	part += (long)(((long)stream.ReadByte ()) << 48);  	part += (long)(((long)stream.ReadByte ()) << 40);  	part += (long)(((long)stream.ReadByte ()) << 32);  	part += (long)(stream.ReadByte () << 24);  	part += (long)(stream.ReadByte () << 16);  	part += (long)(stream.ReadByte () << 8);  	part += (long)(stream.ReadByte ());  	double value = BitConverter.Int64BitsToDouble (part);  	this.UpdateValue (fid' value' fire);  	break;  }  default:  	if ((type & TABLE_ID) == TABLE_ID)//We have a subtable  	 {  		typetable [fid] = ZomBDataTypeHint.Lookup;  		byte[] tableidbuff = new byte[5];  		buffer [0] = (byte)type;  		uint tableid = BytesToTableID (ReadID (buffer' stream' TABLE_ID_MAGIC_NUMBER));  		ZomBDataLookup dict;  		if (!tables.ContainsKey (tableid))//gotta create it  		 {  			throw new InvalidOperationException ("Throw er in the debugger! Something odd happened!");  			//dict = new ZomBDataLookup();  			//tables.AddOrUpdate(tableid' dict);  			////tablesbyfield.AddOrUpdate(fid' dict);//TODO: fix this  			//this.SillySendTableLink(tableid);  		}  		else//only gotta assign the fid  		 {  			dict = tables [tableid];  		}  		tablesbyparent.AddOrUpdate (dict' new NameTableGrouping {  			Table = tablesbyfield [fid]'  			Name = nametable [fid].Replace ("\\"' "\\\\").Replace ("."' "\\.")  		});  		this.UpdateValue (fid' dict' fire);  		break;  	}  	else {  		typetable [fid] = ZomBDataTypeHint.Unknown;  		throw new Exception ("WHOA! Unknown type' buddy!");  	}  }  
Magic Number,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,ReadUpdate,The following statement contains a magic number: switch (type) {  case STRING: {  	typetable [fid] = ZomBDataTypeHint.String;  	string value = ReadNetString (stream);  	this.UpdateValue (fid' value' fire);  	break;  }  case INT: {  	typetable [fid] = ZomBDataTypeHint.Integer;  	int value = (stream.ReadByte () << 0x18) + (stream.ReadByte () << 0x10) + (stream.ReadByte () << 0x08) + (stream.ReadByte ());  	this.UpdateValue (fid' value' fire);  	break;  }  case BOOLEAN_TRUE:  case BOOLEAN_FALSE: {  	typetable [fid] = ZomBDataTypeHint.Boolean;  	bool value = (type & 1) == 1;  	this.UpdateValue (fid' value' fire);  	break;  }  case DOUBLE: {  	typetable [fid] = ZomBDataTypeHint.Double;  	long part = 0;  	part += (long)(((long)stream.ReadByte ()) << 56);  	part += (long)(((long)stream.ReadByte ()) << 48);  	part += (long)(((long)stream.ReadByte ()) << 40);  	part += (long)(((long)stream.ReadByte ()) << 32);  	part += (long)(stream.ReadByte () << 24);  	part += (long)(stream.ReadByte () << 16);  	part += (long)(stream.ReadByte () << 8);  	part += (long)(stream.ReadByte ());  	double value = BitConverter.Int64BitsToDouble (part);  	this.UpdateValue (fid' value' fire);  	break;  }  default:  	if ((type & TABLE_ID) == TABLE_ID)//We have a subtable  	 {  		typetable [fid] = ZomBDataTypeHint.Lookup;  		byte[] tableidbuff = new byte[5];  		buffer [0] = (byte)type;  		uint tableid = BytesToTableID (ReadID (buffer' stream' TABLE_ID_MAGIC_NUMBER));  		ZomBDataLookup dict;  		if (!tables.ContainsKey (tableid))//gotta create it  		 {  			throw new InvalidOperationException ("Throw er in the debugger! Something odd happened!");  			//dict = new ZomBDataLookup();  			//tables.AddOrUpdate(tableid' dict);  			////tablesbyfield.AddOrUpdate(fid' dict);//TODO: fix this  			//this.SillySendTableLink(tableid);  		}  		else//only gotta assign the fid  		 {  			dict = tables [tableid];  		}  		tablesbyparent.AddOrUpdate (dict' new NameTableGrouping {  			Table = tablesbyfield [fid]'  			Name = nametable [fid].Replace ("\\"' "\\\\").Replace ("."' "\\.")  		});  		this.UpdateValue (fid' dict' fire);  		break;  	}  	else {  		typetable [fid] = ZomBDataTypeHint.Unknown;  		throw new Exception ("WHOA! Unknown type' buddy!");  	}  }  
Magic Number,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,ReadUpdate,The following statement contains a magic number: switch (type) {  case STRING: {  	typetable [fid] = ZomBDataTypeHint.String;  	string value = ReadNetString (stream);  	this.UpdateValue (fid' value' fire);  	break;  }  case INT: {  	typetable [fid] = ZomBDataTypeHint.Integer;  	int value = (stream.ReadByte () << 0x18) + (stream.ReadByte () << 0x10) + (stream.ReadByte () << 0x08) + (stream.ReadByte ());  	this.UpdateValue (fid' value' fire);  	break;  }  case BOOLEAN_TRUE:  case BOOLEAN_FALSE: {  	typetable [fid] = ZomBDataTypeHint.Boolean;  	bool value = (type & 1) == 1;  	this.UpdateValue (fid' value' fire);  	break;  }  case DOUBLE: {  	typetable [fid] = ZomBDataTypeHint.Double;  	long part = 0;  	part += (long)(((long)stream.ReadByte ()) << 56);  	part += (long)(((long)stream.ReadByte ()) << 48);  	part += (long)(((long)stream.ReadByte ()) << 40);  	part += (long)(((long)stream.ReadByte ()) << 32);  	part += (long)(stream.ReadByte () << 24);  	part += (long)(stream.ReadByte () << 16);  	part += (long)(stream.ReadByte () << 8);  	part += (long)(stream.ReadByte ());  	double value = BitConverter.Int64BitsToDouble (part);  	this.UpdateValue (fid' value' fire);  	break;  }  default:  	if ((type & TABLE_ID) == TABLE_ID)//We have a subtable  	 {  		typetable [fid] = ZomBDataTypeHint.Lookup;  		byte[] tableidbuff = new byte[5];  		buffer [0] = (byte)type;  		uint tableid = BytesToTableID (ReadID (buffer' stream' TABLE_ID_MAGIC_NUMBER));  		ZomBDataLookup dict;  		if (!tables.ContainsKey (tableid))//gotta create it  		 {  			throw new InvalidOperationException ("Throw er in the debugger! Something odd happened!");  			//dict = new ZomBDataLookup();  			//tables.AddOrUpdate(tableid' dict);  			////tablesbyfield.AddOrUpdate(fid' dict);//TODO: fix this  			//this.SillySendTableLink(tableid);  		}  		else//only gotta assign the fid  		 {  			dict = tables [tableid];  		}  		tablesbyparent.AddOrUpdate (dict' new NameTableGrouping {  			Table = tablesbyfield [fid]'  			Name = nametable [fid].Replace ("\\"' "\\\\").Replace ("."' "\\.")  		});  		this.UpdateValue (fid' dict' fire);  		break;  	}  	else {  		typetable [fid] = ZomBDataTypeHint.Unknown;  		throw new Exception ("WHOA! Unknown type' buddy!");  	}  }  
Magic Number,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,ReadUpdate,The following statement contains a magic number: part += (long)(((long)stream.ReadByte ()) << 56);  
Magic Number,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,ReadUpdate,The following statement contains a magic number: part += (long)(((long)stream.ReadByte ()) << 48);  
Magic Number,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,ReadUpdate,The following statement contains a magic number: part += (long)(((long)stream.ReadByte ()) << 40);  
Magic Number,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,ReadUpdate,The following statement contains a magic number: part += (long)(((long)stream.ReadByte ()) << 32);  
Magic Number,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,ReadUpdate,The following statement contains a magic number: part += (long)(stream.ReadByte () << 24);  
Magic Number,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,ReadUpdate,The following statement contains a magic number: part += (long)(stream.ReadByte () << 16);  
Magic Number,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,ReadUpdate,The following statement contains a magic number: part += (long)(stream.ReadByte () << 8);  
Magic Number,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,ReadUpdate,The following statement contains a magic number: if ((type & TABLE_ID) == TABLE_ID)//We have a subtable   {  	typetable [fid] = ZomBDataTypeHint.Lookup;  	byte[] tableidbuff = new byte[5];  	buffer [0] = (byte)type;  	uint tableid = BytesToTableID (ReadID (buffer' stream' TABLE_ID_MAGIC_NUMBER));  	ZomBDataLookup dict;  	if (!tables.ContainsKey (tableid))//gotta create it  	 {  		throw new InvalidOperationException ("Throw er in the debugger! Something odd happened!");  		//dict = new ZomBDataLookup();  		//tables.AddOrUpdate(tableid' dict);  		////tablesbyfield.AddOrUpdate(fid' dict);//TODO: fix this  		//this.SillySendTableLink(tableid);  	}  	else//only gotta assign the fid  	 {  		dict = tables [tableid];  	}  	tablesbyparent.AddOrUpdate (dict' new NameTableGrouping {  		Table = tablesbyfield [fid]'  		Name = nametable [fid].Replace ("\\"' "\\\\").Replace ("."' "\\.")  	});  	this.UpdateValue (fid' dict' fire);  	break;  }  else {  	typetable [fid] = ZomBDataTypeHint.Unknown;  	throw new Exception ("WHOA! Unknown type' buddy!");  }  
Magic Number,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,CreateUpdate,The following statement contains a magic number: switch (type) {  case ZomBDataTypeHint.String: {  	byte[] netstring = CreateNetString (value);  	buffer = new byte[netstring.Length + 1 + bufferid.Length];  	Buffer.BlockCopy (bufferid' 0' buffer' 0' bufferid.Length);  	buffer [bufferid.Length] = STRING;  	Buffer.BlockCopy (netstring' 0' buffer' bufferid.Length + 1' netstring.Length);  	break;  }  case ZomBDataTypeHint.Integer: {  	double tvalue;  	double.TryParse (value' out tvalue);  	int ivalue = (int)tvalue;  	buffer = new byte[5 + bufferid.Length];  	Buffer.BlockCopy (bufferid' 0' buffer' 0' bufferid.Length);  	buffer [bufferid.Length] = INT;  	buffer [bufferid.Length + 1] = (byte)(ivalue >> 0x18);  	buffer [bufferid.Length + 2] = (byte)(ivalue >> 0x10);  	buffer [bufferid.Length + 3] = (byte)(ivalue >> 0x08);  	buffer [bufferid.Length + 4] = (byte)(ivalue);  	break;  }  case ZomBDataTypeHint.Double: {  	double tvalue;  	double.TryParse (value' out tvalue);  	long lvalue = BitConverter.DoubleToInt64Bits (tvalue);  	buffer = new byte[9 + bufferid.Length];  	Buffer.BlockCopy (bufferid' 0' buffer' 0' bufferid.Length);  	buffer [bufferid.Length] = DOUBLE;  	for (int i = 1; i < 9; i++) {  		buffer [bufferid.Length + i] = (byte)(lvalue >> (64 - (i * 8)));  	}  	break;  }  case ZomBDataTypeHint.Boolean: {  	bool bvalue = true;  	if (value.ToLower () == "false" || value == "0")  		bvalue = false;  	else {  		if (!bool.TryParse (value' out bvalue))  			bvalue = true;  	}  	buffer = new byte[1 + bufferid.Length];  	Buffer.BlockCopy (bufferid' 0' buffer' 0' bufferid.Length);  	buffer [bufferid.Length] = (byte)(BOOLEAN_FALSE + (bvalue ? 1 : 0));  	break;  }  case ZomBDataTypeHint.Lookup:  	return;  case ZomBDataTypeHint.Unknown:  default:  	return;  }  
Magic Number,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,CreateUpdate,The following statement contains a magic number: switch (type) {  case ZomBDataTypeHint.String: {  	byte[] netstring = CreateNetString (value);  	buffer = new byte[netstring.Length + 1 + bufferid.Length];  	Buffer.BlockCopy (bufferid' 0' buffer' 0' bufferid.Length);  	buffer [bufferid.Length] = STRING;  	Buffer.BlockCopy (netstring' 0' buffer' bufferid.Length + 1' netstring.Length);  	break;  }  case ZomBDataTypeHint.Integer: {  	double tvalue;  	double.TryParse (value' out tvalue);  	int ivalue = (int)tvalue;  	buffer = new byte[5 + bufferid.Length];  	Buffer.BlockCopy (bufferid' 0' buffer' 0' bufferid.Length);  	buffer [bufferid.Length] = INT;  	buffer [bufferid.Length + 1] = (byte)(ivalue >> 0x18);  	buffer [bufferid.Length + 2] = (byte)(ivalue >> 0x10);  	buffer [bufferid.Length + 3] = (byte)(ivalue >> 0x08);  	buffer [bufferid.Length + 4] = (byte)(ivalue);  	break;  }  case ZomBDataTypeHint.Double: {  	double tvalue;  	double.TryParse (value' out tvalue);  	long lvalue = BitConverter.DoubleToInt64Bits (tvalue);  	buffer = new byte[9 + bufferid.Length];  	Buffer.BlockCopy (bufferid' 0' buffer' 0' bufferid.Length);  	buffer [bufferid.Length] = DOUBLE;  	for (int i = 1; i < 9; i++) {  		buffer [bufferid.Length + i] = (byte)(lvalue >> (64 - (i * 8)));  	}  	break;  }  case ZomBDataTypeHint.Boolean: {  	bool bvalue = true;  	if (value.ToLower () == "false" || value == "0")  		bvalue = false;  	else {  		if (!bool.TryParse (value' out bvalue))  			bvalue = true;  	}  	buffer = new byte[1 + bufferid.Length];  	Buffer.BlockCopy (bufferid' 0' buffer' 0' bufferid.Length);  	buffer [bufferid.Length] = (byte)(BOOLEAN_FALSE + (bvalue ? 1 : 0));  	break;  }  case ZomBDataTypeHint.Lookup:  	return;  case ZomBDataTypeHint.Unknown:  default:  	return;  }  
Magic Number,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,CreateUpdate,The following statement contains a magic number: switch (type) {  case ZomBDataTypeHint.String: {  	byte[] netstring = CreateNetString (value);  	buffer = new byte[netstring.Length + 1 + bufferid.Length];  	Buffer.BlockCopy (bufferid' 0' buffer' 0' bufferid.Length);  	buffer [bufferid.Length] = STRING;  	Buffer.BlockCopy (netstring' 0' buffer' bufferid.Length + 1' netstring.Length);  	break;  }  case ZomBDataTypeHint.Integer: {  	double tvalue;  	double.TryParse (value' out tvalue);  	int ivalue = (int)tvalue;  	buffer = new byte[5 + bufferid.Length];  	Buffer.BlockCopy (bufferid' 0' buffer' 0' bufferid.Length);  	buffer [bufferid.Length] = INT;  	buffer [bufferid.Length + 1] = (byte)(ivalue >> 0x18);  	buffer [bufferid.Length + 2] = (byte)(ivalue >> 0x10);  	buffer [bufferid.Length + 3] = (byte)(ivalue >> 0x08);  	buffer [bufferid.Length + 4] = (byte)(ivalue);  	break;  }  case ZomBDataTypeHint.Double: {  	double tvalue;  	double.TryParse (value' out tvalue);  	long lvalue = BitConverter.DoubleToInt64Bits (tvalue);  	buffer = new byte[9 + bufferid.Length];  	Buffer.BlockCopy (bufferid' 0' buffer' 0' bufferid.Length);  	buffer [bufferid.Length] = DOUBLE;  	for (int i = 1; i < 9; i++) {  		buffer [bufferid.Length + i] = (byte)(lvalue >> (64 - (i * 8)));  	}  	break;  }  case ZomBDataTypeHint.Boolean: {  	bool bvalue = true;  	if (value.ToLower () == "false" || value == "0")  		bvalue = false;  	else {  		if (!bool.TryParse (value' out bvalue))  			bvalue = true;  	}  	buffer = new byte[1 + bufferid.Length];  	Buffer.BlockCopy (bufferid' 0' buffer' 0' bufferid.Length);  	buffer [bufferid.Length] = (byte)(BOOLEAN_FALSE + (bvalue ? 1 : 0));  	break;  }  case ZomBDataTypeHint.Lookup:  	return;  case ZomBDataTypeHint.Unknown:  default:  	return;  }  
Magic Number,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,CreateUpdate,The following statement contains a magic number: switch (type) {  case ZomBDataTypeHint.String: {  	byte[] netstring = CreateNetString (value);  	buffer = new byte[netstring.Length + 1 + bufferid.Length];  	Buffer.BlockCopy (bufferid' 0' buffer' 0' bufferid.Length);  	buffer [bufferid.Length] = STRING;  	Buffer.BlockCopy (netstring' 0' buffer' bufferid.Length + 1' netstring.Length);  	break;  }  case ZomBDataTypeHint.Integer: {  	double tvalue;  	double.TryParse (value' out tvalue);  	int ivalue = (int)tvalue;  	buffer = new byte[5 + bufferid.Length];  	Buffer.BlockCopy (bufferid' 0' buffer' 0' bufferid.Length);  	buffer [bufferid.Length] = INT;  	buffer [bufferid.Length + 1] = (byte)(ivalue >> 0x18);  	buffer [bufferid.Length + 2] = (byte)(ivalue >> 0x10);  	buffer [bufferid.Length + 3] = (byte)(ivalue >> 0x08);  	buffer [bufferid.Length + 4] = (byte)(ivalue);  	break;  }  case ZomBDataTypeHint.Double: {  	double tvalue;  	double.TryParse (value' out tvalue);  	long lvalue = BitConverter.DoubleToInt64Bits (tvalue);  	buffer = new byte[9 + bufferid.Length];  	Buffer.BlockCopy (bufferid' 0' buffer' 0' bufferid.Length);  	buffer [bufferid.Length] = DOUBLE;  	for (int i = 1; i < 9; i++) {  		buffer [bufferid.Length + i] = (byte)(lvalue >> (64 - (i * 8)));  	}  	break;  }  case ZomBDataTypeHint.Boolean: {  	bool bvalue = true;  	if (value.ToLower () == "false" || value == "0")  		bvalue = false;  	else {  		if (!bool.TryParse (value' out bvalue))  			bvalue = true;  	}  	buffer = new byte[1 + bufferid.Length];  	Buffer.BlockCopy (bufferid' 0' buffer' 0' bufferid.Length);  	buffer [bufferid.Length] = (byte)(BOOLEAN_FALSE + (bvalue ? 1 : 0));  	break;  }  case ZomBDataTypeHint.Lookup:  	return;  case ZomBDataTypeHint.Unknown:  default:  	return;  }  
Magic Number,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,CreateUpdate,The following statement contains a magic number: switch (type) {  case ZomBDataTypeHint.String: {  	byte[] netstring = CreateNetString (value);  	buffer = new byte[netstring.Length + 1 + bufferid.Length];  	Buffer.BlockCopy (bufferid' 0' buffer' 0' bufferid.Length);  	buffer [bufferid.Length] = STRING;  	Buffer.BlockCopy (netstring' 0' buffer' bufferid.Length + 1' netstring.Length);  	break;  }  case ZomBDataTypeHint.Integer: {  	double tvalue;  	double.TryParse (value' out tvalue);  	int ivalue = (int)tvalue;  	buffer = new byte[5 + bufferid.Length];  	Buffer.BlockCopy (bufferid' 0' buffer' 0' bufferid.Length);  	buffer [bufferid.Length] = INT;  	buffer [bufferid.Length + 1] = (byte)(ivalue >> 0x18);  	buffer [bufferid.Length + 2] = (byte)(ivalue >> 0x10);  	buffer [bufferid.Length + 3] = (byte)(ivalue >> 0x08);  	buffer [bufferid.Length + 4] = (byte)(ivalue);  	break;  }  case ZomBDataTypeHint.Double: {  	double tvalue;  	double.TryParse (value' out tvalue);  	long lvalue = BitConverter.DoubleToInt64Bits (tvalue);  	buffer = new byte[9 + bufferid.Length];  	Buffer.BlockCopy (bufferid' 0' buffer' 0' bufferid.Length);  	buffer [bufferid.Length] = DOUBLE;  	for (int i = 1; i < 9; i++) {  		buffer [bufferid.Length + i] = (byte)(lvalue >> (64 - (i * 8)));  	}  	break;  }  case ZomBDataTypeHint.Boolean: {  	bool bvalue = true;  	if (value.ToLower () == "false" || value == "0")  		bvalue = false;  	else {  		if (!bool.TryParse (value' out bvalue))  			bvalue = true;  	}  	buffer = new byte[1 + bufferid.Length];  	Buffer.BlockCopy (bufferid' 0' buffer' 0' bufferid.Length);  	buffer [bufferid.Length] = (byte)(BOOLEAN_FALSE + (bvalue ? 1 : 0));  	break;  }  case ZomBDataTypeHint.Lookup:  	return;  case ZomBDataTypeHint.Unknown:  default:  	return;  }  
Magic Number,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,CreateUpdate,The following statement contains a magic number: switch (type) {  case ZomBDataTypeHint.String: {  	byte[] netstring = CreateNetString (value);  	buffer = new byte[netstring.Length + 1 + bufferid.Length];  	Buffer.BlockCopy (bufferid' 0' buffer' 0' bufferid.Length);  	buffer [bufferid.Length] = STRING;  	Buffer.BlockCopy (netstring' 0' buffer' bufferid.Length + 1' netstring.Length);  	break;  }  case ZomBDataTypeHint.Integer: {  	double tvalue;  	double.TryParse (value' out tvalue);  	int ivalue = (int)tvalue;  	buffer = new byte[5 + bufferid.Length];  	Buffer.BlockCopy (bufferid' 0' buffer' 0' bufferid.Length);  	buffer [bufferid.Length] = INT;  	buffer [bufferid.Length + 1] = (byte)(ivalue >> 0x18);  	buffer [bufferid.Length + 2] = (byte)(ivalue >> 0x10);  	buffer [bufferid.Length + 3] = (byte)(ivalue >> 0x08);  	buffer [bufferid.Length + 4] = (byte)(ivalue);  	break;  }  case ZomBDataTypeHint.Double: {  	double tvalue;  	double.TryParse (value' out tvalue);  	long lvalue = BitConverter.DoubleToInt64Bits (tvalue);  	buffer = new byte[9 + bufferid.Length];  	Buffer.BlockCopy (bufferid' 0' buffer' 0' bufferid.Length);  	buffer [bufferid.Length] = DOUBLE;  	for (int i = 1; i < 9; i++) {  		buffer [bufferid.Length + i] = (byte)(lvalue >> (64 - (i * 8)));  	}  	break;  }  case ZomBDataTypeHint.Boolean: {  	bool bvalue = true;  	if (value.ToLower () == "false" || value == "0")  		bvalue = false;  	else {  		if (!bool.TryParse (value' out bvalue))  			bvalue = true;  	}  	buffer = new byte[1 + bufferid.Length];  	Buffer.BlockCopy (bufferid' 0' buffer' 0' bufferid.Length);  	buffer [bufferid.Length] = (byte)(BOOLEAN_FALSE + (bvalue ? 1 : 0));  	break;  }  case ZomBDataTypeHint.Lookup:  	return;  case ZomBDataTypeHint.Unknown:  default:  	return;  }  
Magic Number,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,CreateUpdate,The following statement contains a magic number: switch (type) {  case ZomBDataTypeHint.String: {  	byte[] netstring = CreateNetString (value);  	buffer = new byte[netstring.Length + 1 + bufferid.Length];  	Buffer.BlockCopy (bufferid' 0' buffer' 0' bufferid.Length);  	buffer [bufferid.Length] = STRING;  	Buffer.BlockCopy (netstring' 0' buffer' bufferid.Length + 1' netstring.Length);  	break;  }  case ZomBDataTypeHint.Integer: {  	double tvalue;  	double.TryParse (value' out tvalue);  	int ivalue = (int)tvalue;  	buffer = new byte[5 + bufferid.Length];  	Buffer.BlockCopy (bufferid' 0' buffer' 0' bufferid.Length);  	buffer [bufferid.Length] = INT;  	buffer [bufferid.Length + 1] = (byte)(ivalue >> 0x18);  	buffer [bufferid.Length + 2] = (byte)(ivalue >> 0x10);  	buffer [bufferid.Length + 3] = (byte)(ivalue >> 0x08);  	buffer [bufferid.Length + 4] = (byte)(ivalue);  	break;  }  case ZomBDataTypeHint.Double: {  	double tvalue;  	double.TryParse (value' out tvalue);  	long lvalue = BitConverter.DoubleToInt64Bits (tvalue);  	buffer = new byte[9 + bufferid.Length];  	Buffer.BlockCopy (bufferid' 0' buffer' 0' bufferid.Length);  	buffer [bufferid.Length] = DOUBLE;  	for (int i = 1; i < 9; i++) {  		buffer [bufferid.Length + i] = (byte)(lvalue >> (64 - (i * 8)));  	}  	break;  }  case ZomBDataTypeHint.Boolean: {  	bool bvalue = true;  	if (value.ToLower () == "false" || value == "0")  		bvalue = false;  	else {  		if (!bool.TryParse (value' out bvalue))  			bvalue = true;  	}  	buffer = new byte[1 + bufferid.Length];  	Buffer.BlockCopy (bufferid' 0' buffer' 0' bufferid.Length);  	buffer [bufferid.Length] = (byte)(BOOLEAN_FALSE + (bvalue ? 1 : 0));  	break;  }  case ZomBDataTypeHint.Lookup:  	return;  case ZomBDataTypeHint.Unknown:  default:  	return;  }  
Magic Number,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,CreateUpdate,The following statement contains a magic number: switch (type) {  case ZomBDataTypeHint.String: {  	byte[] netstring = CreateNetString (value);  	buffer = new byte[netstring.Length + 1 + bufferid.Length];  	Buffer.BlockCopy (bufferid' 0' buffer' 0' bufferid.Length);  	buffer [bufferid.Length] = STRING;  	Buffer.BlockCopy (netstring' 0' buffer' bufferid.Length + 1' netstring.Length);  	break;  }  case ZomBDataTypeHint.Integer: {  	double tvalue;  	double.TryParse (value' out tvalue);  	int ivalue = (int)tvalue;  	buffer = new byte[5 + bufferid.Length];  	Buffer.BlockCopy (bufferid' 0' buffer' 0' bufferid.Length);  	buffer [bufferid.Length] = INT;  	buffer [bufferid.Length + 1] = (byte)(ivalue >> 0x18);  	buffer [bufferid.Length + 2] = (byte)(ivalue >> 0x10);  	buffer [bufferid.Length + 3] = (byte)(ivalue >> 0x08);  	buffer [bufferid.Length + 4] = (byte)(ivalue);  	break;  }  case ZomBDataTypeHint.Double: {  	double tvalue;  	double.TryParse (value' out tvalue);  	long lvalue = BitConverter.DoubleToInt64Bits (tvalue);  	buffer = new byte[9 + bufferid.Length];  	Buffer.BlockCopy (bufferid' 0' buffer' 0' bufferid.Length);  	buffer [bufferid.Length] = DOUBLE;  	for (int i = 1; i < 9; i++) {  		buffer [bufferid.Length + i] = (byte)(lvalue >> (64 - (i * 8)));  	}  	break;  }  case ZomBDataTypeHint.Boolean: {  	bool bvalue = true;  	if (value.ToLower () == "false" || value == "0")  		bvalue = false;  	else {  		if (!bool.TryParse (value' out bvalue))  			bvalue = true;  	}  	buffer = new byte[1 + bufferid.Length];  	Buffer.BlockCopy (bufferid' 0' buffer' 0' bufferid.Length);  	buffer [bufferid.Length] = (byte)(BOOLEAN_FALSE + (bvalue ? 1 : 0));  	break;  }  case ZomBDataTypeHint.Lookup:  	return;  case ZomBDataTypeHint.Unknown:  default:  	return;  }  
Magic Number,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,CreateUpdate,The following statement contains a magic number: buffer = new byte[5 + bufferid.Length];  
Magic Number,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,CreateUpdate,The following statement contains a magic number: buffer [bufferid.Length + 2] = (byte)(ivalue >> 0x10);  
Magic Number,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,CreateUpdate,The following statement contains a magic number: buffer [bufferid.Length + 3] = (byte)(ivalue >> 0x08);  
Magic Number,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,CreateUpdate,The following statement contains a magic number: buffer [bufferid.Length + 4] = (byte)(ivalue);  
Magic Number,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,CreateUpdate,The following statement contains a magic number: buffer = new byte[9 + bufferid.Length];  
Magic Number,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,CreateUpdate,The following statement contains a magic number: for (int i = 1; i < 9; i++) {  	buffer [bufferid.Length + i] = (byte)(lvalue >> (64 - (i * 8)));  }  
Magic Number,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,CreateUpdate,The following statement contains a magic number: for (int i = 1; i < 9; i++) {  	buffer [bufferid.Length + i] = (byte)(lvalue >> (64 - (i * 8)));  }  
Magic Number,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,CreateUpdate,The following statement contains a magic number: for (int i = 1; i < 9; i++) {  	buffer [bufferid.Length + i] = (byte)(lvalue >> (64 - (i * 8)));  }  
Magic Number,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,CreateUpdate,The following statement contains a magic number: buffer [bufferid.Length + i] = (byte)(lvalue >> (64 - (i * 8)));  
Magic Number,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,CreateUpdate,The following statement contains a magic number: buffer [bufferid.Length + i] = (byte)(lvalue >> (64 - (i * 8)));  
Magic Number,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,DoWork,The following statement contains a magic number: while (isrunning) {  	try {  		NetworkStream stream = null;  		while (isrunning) {  			stream = null;  			this.nstream = null;  			try {  				cRIOConnection = new TcpClient (Hostname' port);  				stream = cRIOConnection.GetStream ();  				this.nstream = stream;  				stream.WriteByte (PING);  				cRIOConnection.NoDelay = true;  			}  			catch {  			}  			if (stream != null)  				break;  			else {  				Thread.Sleep (50);  			}  		}  		if (!isrunning)  			return;  		//Request Tables  		stream.Write (SMART_REQUEST' 0' SMART_REQUEST.Length);  		while (isrunning) {  			stream.WriteByte (PING);  			Qlock.Release ();  			int b = stream.ReadByte ();  			Qlock.WaitOne ();  			switch (b) {  			case -1:  				//closed  				isrunning = false;  				return;  			case PING:  				stream.WriteByte (PING);  				while (sendQ.Count > 0) {  					byte[] sendPop = sendQ.Dequeue ();  					stream.Write (sendPop' 0' sendPop.Length);  				}  				break;  			case TABLE_ASSIGNMENT: {  				//table(local)' table(remote-table-number)  				byte[] buffer = ReadID (stream' TABLE_ID_MAGIC_NUMBER);  				uint tableid = BytesToTableID (buffer);  				//if we have the first table' link with the old  				if (tableid == 0) {  					buffer = ReadID (stream' TABLE_ID_MAGIC_NUMBER);  					remoteTable = BytesToTableID (buffer);  					remoteTableBytes = TableIDToBytes (remoteTable);  					//do it fresh to avoid extra empty bytes  					tables [remoteTable] = kys;  				}  				else {  					//this.SillySendTableLink(tableid);  					buffer = ReadID (stream' TABLE_ID_MAGIC_NUMBER);  					throw new NotImplementedException ("Argh! Throw 'er in the debugger' laddie!");  				}  				break;  			}  			case ASSIGNMENT: {  				//tableid(remote)' string(name)' fieldid(number)  				byte[] buffer = ReadID (stream' TABLE_ID_MAGIC_NUMBER);  				uint tableid = BytesToTableID (buffer);  				bool master = (tableid == remoteTable);  				string fname = ReadNetString (stream);  				buffer = ReadID (stream' FIELD_ID_MAGIC_NUMBER);  				uint fid = BytesToFieldID (buffer);  				if (fname == null || fname == "") {  					throw new Exception ("INVALID NAME");  				}  				nametable.AddOrUpdate (fid' fname);  				typetable.AddOrUpdate (fid' ZomBDataTypeHint.Unknown);  				if (!tables.ContainsKey (tableid))//gotta create it  				 {  					ZomBDataLookup dict = new ZomBDataLookup ();  					tables.AddOrUpdate (tableid' dict);  					tablesbyfield.AddOrUpdate (fid' dict);  					this.SillySendTableLink (tableid);  				}  				else//only gotta assign the fid  				 {  					tablesbyfield.AddOrUpdate (fid' tables [tableid]);  				}  				//Send it back so sending works...  				buffer = TableIDToBytes (master ? 0 : tableid);  				byte[] netstring = CreateNetString (fname);  				byte[] idbuff = FieldIDToBytes (fid);  				byte[] outbuffer = new byte[netstring.Length + idbuff.Length + 1 + buffer.Length];  				outbuffer [0] = ASSIGNMENT;  				Buffer.BlockCopy (buffer' 0' outbuffer' 1' buffer.Length);  				Buffer.BlockCopy (netstring' 0' outbuffer' buffer.Length + 1' netstring.Length);  				Buffer.BlockCopy (idbuff' 0' outbuffer' netstring.Length + buffer.Length + 1' idbuff.Length);  				stream.Write (outbuffer' 0' outbuffer.Length);  				AlertPeek (fid' true);  				break;  			}  			case TRANSACTION:  				{  					do {  						this.ReadUpdate (b' stream' false);  						b = stream.ReadByte ();  					}  					while (b != TRANSACTION);  					stream.WriteByte ((byte)CONFIRMATION + 1);  					//Fire events  					if (DataRecieved != null)  						DataRecieved (this' new EventArgs ());  					if (NewDataRecieved != null)  						NewDataRecieved (this' new NewDataRecievedEventArgs (kys));  				}  				break;  			case OLD_DATA:  				//What? we are not a server. If you feel like implementing this' please do.  				break;  			default: {  				if ((b & FIELD_ID) == FIELD_ID)//update things  				 {  					this.ReadUpdate (b' stream);  					stream.WriteByte ((byte)CONFIRMATION + 1);  				}  				else if ((b & CONFIRMATION) == CONFIRMATION)//Great!  				 {  					//TODO: confirm  				}  				else if ((b & DENIAL) == DENIAL)//UMM...  				 {  					//TODO: Confirm something...  				}  				break;  			}  			}  		}  		if (nume > 0)  			nume--;  	}  	catch (ThreadAbortException) {  		isrunning = false;  		//TODO: there has to be a better way to do this  		try {  			cRIOConnection.Close ();  		}  		catch {  		}  		try {  			cRIOConnection = null;  		}  		catch {  		}  		return;  	}  	catch (Exception ex) {  		try {  			Qlock.Release ();  		}  		catch {  		}  		Qlock.WaitOne (1);  		nume++;  		try {  			cRIOConnection.Close ();  		}  		catch {  		}  		try {  			cRIOConnection = null;  		}  		catch {  		}  		if (nume > 1) {  			isrunning = false;  			DoError (new Exception (ex.Message + "\r\n2 consecutive errors were encountered' stopping NetTable"' ex));  			isrunning = false;  			return;  		}  		else  			DoError (ex);  	}  }  
Magic Number,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,DoWork,The following statement contains a magic number: try {  	NetworkStream stream = null;  	while (isrunning) {  		stream = null;  		this.nstream = null;  		try {  			cRIOConnection = new TcpClient (Hostname' port);  			stream = cRIOConnection.GetStream ();  			this.nstream = stream;  			stream.WriteByte (PING);  			cRIOConnection.NoDelay = true;  		}  		catch {  		}  		if (stream != null)  			break;  		else {  			Thread.Sleep (50);  		}  	}  	if (!isrunning)  		return;  	//Request Tables  	stream.Write (SMART_REQUEST' 0' SMART_REQUEST.Length);  	while (isrunning) {  		stream.WriteByte (PING);  		Qlock.Release ();  		int b = stream.ReadByte ();  		Qlock.WaitOne ();  		switch (b) {  		case -1:  			//closed  			isrunning = false;  			return;  		case PING:  			stream.WriteByte (PING);  			while (sendQ.Count > 0) {  				byte[] sendPop = sendQ.Dequeue ();  				stream.Write (sendPop' 0' sendPop.Length);  			}  			break;  		case TABLE_ASSIGNMENT: {  			//table(local)' table(remote-table-number)  			byte[] buffer = ReadID (stream' TABLE_ID_MAGIC_NUMBER);  			uint tableid = BytesToTableID (buffer);  			//if we have the first table' link with the old  			if (tableid == 0) {  				buffer = ReadID (stream' TABLE_ID_MAGIC_NUMBER);  				remoteTable = BytesToTableID (buffer);  				remoteTableBytes = TableIDToBytes (remoteTable);  				//do it fresh to avoid extra empty bytes  				tables [remoteTable] = kys;  			}  			else {  				//this.SillySendTableLink(tableid);  				buffer = ReadID (stream' TABLE_ID_MAGIC_NUMBER);  				throw new NotImplementedException ("Argh! Throw 'er in the debugger' laddie!");  			}  			break;  		}  		case ASSIGNMENT: {  			//tableid(remote)' string(name)' fieldid(number)  			byte[] buffer = ReadID (stream' TABLE_ID_MAGIC_NUMBER);  			uint tableid = BytesToTableID (buffer);  			bool master = (tableid == remoteTable);  			string fname = ReadNetString (stream);  			buffer = ReadID (stream' FIELD_ID_MAGIC_NUMBER);  			uint fid = BytesToFieldID (buffer);  			if (fname == null || fname == "") {  				throw new Exception ("INVALID NAME");  			}  			nametable.AddOrUpdate (fid' fname);  			typetable.AddOrUpdate (fid' ZomBDataTypeHint.Unknown);  			if (!tables.ContainsKey (tableid))//gotta create it  			 {  				ZomBDataLookup dict = new ZomBDataLookup ();  				tables.AddOrUpdate (tableid' dict);  				tablesbyfield.AddOrUpdate (fid' dict);  				this.SillySendTableLink (tableid);  			}  			else//only gotta assign the fid  			 {  				tablesbyfield.AddOrUpdate (fid' tables [tableid]);  			}  			//Send it back so sending works...  			buffer = TableIDToBytes (master ? 0 : tableid);  			byte[] netstring = CreateNetString (fname);  			byte[] idbuff = FieldIDToBytes (fid);  			byte[] outbuffer = new byte[netstring.Length + idbuff.Length + 1 + buffer.Length];  			outbuffer [0] = ASSIGNMENT;  			Buffer.BlockCopy (buffer' 0' outbuffer' 1' buffer.Length);  			Buffer.BlockCopy (netstring' 0' outbuffer' buffer.Length + 1' netstring.Length);  			Buffer.BlockCopy (idbuff' 0' outbuffer' netstring.Length + buffer.Length + 1' idbuff.Length);  			stream.Write (outbuffer' 0' outbuffer.Length);  			AlertPeek (fid' true);  			break;  		}  		case TRANSACTION:  			{  				do {  					this.ReadUpdate (b' stream' false);  					b = stream.ReadByte ();  				}  				while (b != TRANSACTION);  				stream.WriteByte ((byte)CONFIRMATION + 1);  				//Fire events  				if (DataRecieved != null)  					DataRecieved (this' new EventArgs ());  				if (NewDataRecieved != null)  					NewDataRecieved (this' new NewDataRecievedEventArgs (kys));  			}  			break;  		case OLD_DATA:  			//What? we are not a server. If you feel like implementing this' please do.  			break;  		default: {  			if ((b & FIELD_ID) == FIELD_ID)//update things  			 {  				this.ReadUpdate (b' stream);  				stream.WriteByte ((byte)CONFIRMATION + 1);  			}  			else if ((b & CONFIRMATION) == CONFIRMATION)//Great!  			 {  				//TODO: confirm  			}  			else if ((b & DENIAL) == DENIAL)//UMM...  			 {  				//TODO: Confirm something...  			}  			break;  		}  		}  	}  	if (nume > 0)  		nume--;  }  catch (ThreadAbortException) {  	isrunning = false;  	//TODO: there has to be a better way to do this  	try {  		cRIOConnection.Close ();  	}  	catch {  	}  	try {  		cRIOConnection = null;  	}  	catch {  	}  	return;  }  catch (Exception ex) {  	try {  		Qlock.Release ();  	}  	catch {  	}  	Qlock.WaitOne (1);  	nume++;  	try {  		cRIOConnection.Close ();  	}  	catch {  	}  	try {  		cRIOConnection = null;  	}  	catch {  	}  	if (nume > 1) {  		isrunning = false;  		DoError (new Exception (ex.Message + "\r\n2 consecutive errors were encountered' stopping NetTable"' ex));  		isrunning = false;  		return;  	}  	else  		DoError (ex);  }  
Magic Number,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,DoWork,The following statement contains a magic number: while (isrunning) {  	stream = null;  	this.nstream = null;  	try {  		cRIOConnection = new TcpClient (Hostname' port);  		stream = cRIOConnection.GetStream ();  		this.nstream = stream;  		stream.WriteByte (PING);  		cRIOConnection.NoDelay = true;  	}  	catch {  	}  	if (stream != null)  		break;  	else {  		Thread.Sleep (50);  	}  }  
Magic Number,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,DoWork,The following statement contains a magic number: if (stream != null)  	break;  else {  	Thread.Sleep (50);  }  
Magic Number,System451.Communication.Dashboard.Net,NetTableSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\NetTableSource.cs,DoWork,The following statement contains a magic number: Thread.Sleep (50);  
Magic Number,System451.Communication.Dashboard.Net,EBinaryReader,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\EBinaryReader.cs,ReadUInt16,The following statement contains a magic number: part += (ushort)(ReadByte () << 8);  
Magic Number,System451.Communication.Dashboard.Net,EBinaryReader,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\EBinaryReader.cs,ReadUInt32,The following statement contains a magic number: part += (uint)(ReadByte () << 24);  
Magic Number,System451.Communication.Dashboard.Net,EBinaryReader,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\EBinaryReader.cs,ReadUInt32,The following statement contains a magic number: part += (uint)(ReadByte () << 16);  
Magic Number,System451.Communication.Dashboard.Net,EBinaryReader,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\EBinaryReader.cs,ReadUInt32,The following statement contains a magic number: part += (uint)(ReadByte () << 8);  
Magic Number,System451.Communication.Dashboard.Net,EBinaryReader,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\EBinaryReader.cs,ReadInt16,The following statement contains a magic number: part += (short)(ReadByte () << 8);  
Magic Number,System451.Communication.Dashboard.Net,EBinaryReader,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\EBinaryReader.cs,ReadInt32,The following statement contains a magic number: part += (int)(ReadByte () << 24);  
Magic Number,System451.Communication.Dashboard.Net,EBinaryReader,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\EBinaryReader.cs,ReadInt32,The following statement contains a magic number: part += (int)(ReadByte () << 16);  
Magic Number,System451.Communication.Dashboard.Net,EBinaryReader,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\EBinaryReader.cs,ReadInt32,The following statement contains a magic number: part += (int)(ReadByte () << 8);  
Magic Number,System451.Communication.Dashboard.Net,EBinaryReader,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\EBinaryReader.cs,ReadInt64,The following statement contains a magic number: part += (long)(((long)ReadByte ()) << 56);  
Magic Number,System451.Communication.Dashboard.Net,EBinaryReader,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\EBinaryReader.cs,ReadInt64,The following statement contains a magic number: part += (long)(((long)ReadByte ()) << 48);  
Magic Number,System451.Communication.Dashboard.Net,EBinaryReader,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\EBinaryReader.cs,ReadInt64,The following statement contains a magic number: part += (long)(((long)ReadByte ()) << 40);  
Magic Number,System451.Communication.Dashboard.Net,EBinaryReader,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\EBinaryReader.cs,ReadInt64,The following statement contains a magic number: part += (long)(((long)ReadByte ()) << 32);  
Magic Number,System451.Communication.Dashboard.Net,EBinaryReader,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\EBinaryReader.cs,ReadInt64,The following statement contains a magic number: part += (long)(ReadByte () << 24);  
Magic Number,System451.Communication.Dashboard.Net,EBinaryReader,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\EBinaryReader.cs,ReadInt64,The following statement contains a magic number: part += (long)(ReadByte () << 16);  
Magic Number,System451.Communication.Dashboard.Net,EBinaryReader,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\EBinaryReader.cs,ReadInt64,The following statement contains a magic number: part += (long)(ReadByte () << 8);  
Magic Number,System451.Communication.Dashboard.Net,SerialDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\SerialDataSource.cs,SerialDataSource,The following statement contains a magic number: if (info.Path.Length > 5 && info.Path [0] == '?') {  	var nv = HttpUtility.ParseQueryString (info.Path);  	if (nv ["baud"] != null) {  		if (!int.TryParse (nv ["baud"]' out baud))  			baud = 115200;  	}  	if (nv ["data"] != null) {  		if (!int.TryParse (nv ["data"]' out data))  			data = 8;  	}  	if (nv ["parity"] != null) {  		try {  			parity = (Parity)Enum.Parse (typeof(Parity)' nv ["parity"]' true);  		}  		catch {  			parity = Parity.None;  		}  	}  	if (nv ["stop"] != null) {  		try {  			stopbits = (StopBits)Enum.Parse (typeof(StopBits)' nv ["stop"]' true);  		}  		catch {  			stopbits = StopBits.One;  		}  	}  }  
Magic Number,System451.Communication.Dashboard.Net,SerialDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\SerialDataSource.cs,SerialDataSource,The following statement contains a magic number: if (info.Path.Length > 5 && info.Path [0] == '?') {  	var nv = HttpUtility.ParseQueryString (info.Path);  	if (nv ["baud"] != null) {  		if (!int.TryParse (nv ["baud"]' out baud))  			baud = 115200;  	}  	if (nv ["data"] != null) {  		if (!int.TryParse (nv ["data"]' out data))  			data = 8;  	}  	if (nv ["parity"] != null) {  		try {  			parity = (Parity)Enum.Parse (typeof(Parity)' nv ["parity"]' true);  		}  		catch {  			parity = Parity.None;  		}  	}  	if (nv ["stop"] != null) {  		try {  			stopbits = (StopBits)Enum.Parse (typeof(StopBits)' nv ["stop"]' true);  		}  		catch {  			stopbits = StopBits.One;  		}  	}  }  
Magic Number,System451.Communication.Dashboard.Net,SerialDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\SerialDataSource.cs,SerialDataSource,The following statement contains a magic number: if (info.Path.Length > 5 && info.Path [0] == '?') {  	var nv = HttpUtility.ParseQueryString (info.Path);  	if (nv ["baud"] != null) {  		if (!int.TryParse (nv ["baud"]' out baud))  			baud = 115200;  	}  	if (nv ["data"] != null) {  		if (!int.TryParse (nv ["data"]' out data))  			data = 8;  	}  	if (nv ["parity"] != null) {  		try {  			parity = (Parity)Enum.Parse (typeof(Parity)' nv ["parity"]' true);  		}  		catch {  			parity = Parity.None;  		}  	}  	if (nv ["stop"] != null) {  		try {  			stopbits = (StopBits)Enum.Parse (typeof(StopBits)' nv ["stop"]' true);  		}  		catch {  			stopbits = StopBits.One;  		}  	}  }  
Magic Number,System451.Communication.Dashboard.Net,SerialDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\SerialDataSource.cs,SerialDataSource,The following statement contains a magic number: if (nv ["baud"] != null) {  	if (!int.TryParse (nv ["baud"]' out baud))  		baud = 115200;  }  
Magic Number,System451.Communication.Dashboard.Net,SerialDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\SerialDataSource.cs,SerialDataSource,The following statement contains a magic number: if (!int.TryParse (nv ["baud"]' out baud))  	baud = 115200;  
Magic Number,System451.Communication.Dashboard.Net,SerialDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\SerialDataSource.cs,SerialDataSource,The following statement contains a magic number: baud = 115200;  
Magic Number,System451.Communication.Dashboard.Net,SerialDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\SerialDataSource.cs,SerialDataSource,The following statement contains a magic number: if (nv ["data"] != null) {  	if (!int.TryParse (nv ["data"]' out data))  		data = 8;  }  
Magic Number,System451.Communication.Dashboard.Net,SerialDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\SerialDataSource.cs,SerialDataSource,The following statement contains a magic number: if (!int.TryParse (nv ["data"]' out data))  	data = 8;  
Magic Number,System451.Communication.Dashboard.Net,SerialDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\SerialDataSource.cs,SerialDataSource,The following statement contains a magic number: data = 8;  
Magic Number,System451.Communication.Dashboard.Net,SerialDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\SerialDataSource.cs,Stop,The following statement contains a magic number: if (isrunning) {  	try {  		isrunning = false;  		Thread.Sleep (500);  		if (backThread.IsAlive)  			backThread.Abort ();  	}  	catch {  	}  	if (killer.IsOpen)  		killer.Close ();  }  
Magic Number,System451.Communication.Dashboard.Net,SerialDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\SerialDataSource.cs,Stop,The following statement contains a magic number: try {  	isrunning = false;  	Thread.Sleep (500);  	if (backThread.IsAlive)  		backThread.Abort ();  }  catch {  }  
Magic Number,System451.Communication.Dashboard.Net,SerialDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\SerialDataSource.cs,Stop,The following statement contains a magic number: Thread.Sleep (500);  
Magic Number,System451.Communication.Dashboard.Net,SerialDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\SerialDataSource.cs,DoWork,The following statement contains a magic number: while (isrunning) {  	try {  		string line = killer.ReadLine ();  		if (line [0] != ' ' && line [0] != ';' && line [0] != '/' && line [0] != '#') {  			//Get the items in a dictionary  			try {  				ZomBDataLookup vals = SplitParams (line);  				if (peeking) {  					foreach (var keys in vals) {  						dp.Invoke (cb' keys.Key);  					}  				}  				else {  					kys = vals;  					//Fire events  					if (DataRecieved != null)  						DataRecieved (this' new EventArgs ());  					if (NewDataRecieved != null)  						NewDataRecieved (this' new NewDataRecievedEventArgs (vals));  				}  			}  			catch {  			}  		}  		if (nume > 0)  			nume--;  	}  	catch (ThreadAbortException) {  		isrunning = false;  		killer.Close ();  		return;  	}  	catch (Exception ex) {  		nume++;  		DoError (ex);  		if (nume > 10) {  			isrunning = false;  			killer.Close ();  			DoError (new Exception ("10 consecutive errors were encountered' stopping DashboardDataHub"));  			isrunning = false;  			return;  		}  	}  }  
Magic Number,System451.Communication.Dashboard.Net,SerialDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\SerialDataSource.cs,DoWork,The following statement contains a magic number: try {  	string line = killer.ReadLine ();  	if (line [0] != ' ' && line [0] != ';' && line [0] != '/' && line [0] != '#') {  		//Get the items in a dictionary  		try {  			ZomBDataLookup vals = SplitParams (line);  			if (peeking) {  				foreach (var keys in vals) {  					dp.Invoke (cb' keys.Key);  				}  			}  			else {  				kys = vals;  				//Fire events  				if (DataRecieved != null)  					DataRecieved (this' new EventArgs ());  				if (NewDataRecieved != null)  					NewDataRecieved (this' new NewDataRecievedEventArgs (vals));  			}  		}  		catch {  		}  	}  	if (nume > 0)  		nume--;  }  catch (ThreadAbortException) {  	isrunning = false;  	killer.Close ();  	return;  }  catch (Exception ex) {  	nume++;  	DoError (ex);  	if (nume > 10) {  		isrunning = false;  		killer.Close ();  		DoError (new Exception ("10 consecutive errors were encountered' stopping DashboardDataHub"));  		isrunning = false;  		return;  	}  }  
Magic Number,System451.Communication.Dashboard.Net,SerialDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\SerialDataSource.cs,DoWork,The following statement contains a magic number: if (nume > 10) {  	isrunning = false;  	killer.Close ();  	DoError (new Exception ("10 consecutive errors were encountered' stopping DashboardDataHub"));  	isrunning = false;  	return;  }  
Magic Number,System451.Communication.Dashboard.Net,SmartDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\SmartDataSource.cs,Stop,The following statement contains a magic number: if (isrunning) {  	try {  		isrunning = false;  		Thread.Sleep (500);  		if (backThread.IsAlive)  			backThread.Abort ();  		cRIOConnection.Close ();  	}  	catch {  		try {  			cRIOConnection.Close ();  		}  		catch {  		}  	}  }  
Magic Number,System451.Communication.Dashboard.Net,SmartDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\SmartDataSource.cs,Stop,The following statement contains a magic number: try {  	isrunning = false;  	Thread.Sleep (500);  	if (backThread.IsAlive)  		backThread.Abort ();  	cRIOConnection.Close ();  }  catch {  	try {  		cRIOConnection.Close ();  	}  	catch {  	}  }  
Magic Number,System451.Communication.Dashboard.Net,SmartDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\SmartDataSource.cs,Stop,The following statement contains a magic number: Thread.Sleep (500);  
Magic Number,System451.Communication.Dashboard.Net,SmartDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\SmartDataSource.cs,DoWork,The following statement contains a magic number: while (isrunning) {  	try {  		IPEndPoint RIPend = null;  		//Recieve the data  		while (cRIOConnection.Available < 1018 && isrunning) {  			Thread.Sleep (2);  		}  		if (!isrunning) {  			cRIOConnection.Close ();  			return;  		}  		byte[] buffer = cRIOConnection.Receive (ref RIPend);  		//Check first  		if (!VerifyPacket (buffer)) {  			if (InvalidPacketRecieved != null && !peeking) {  				//Create our e  				InvalidPacketRecievedEventArgs e = new InvalidPacketRecievedEventArgs (buffer' ddh.InvalidPacketAction == InvalidPacketActions.AlwaysContinue || ddh.InvalidPacketAction == InvalidPacketActions.Continue);  				InvalidPacketRecieved (this' e);  				if ((int)ddh.InvalidPacketAction < 3)//1-4  				 {  					if (!e.ContinueAnyway)  						break;  				}  				else if (ddh.InvalidPacketAction == InvalidPacketActions.AlwaysIgnore)  					break;  			}  		}  		//DS Status  		cStat = ParseDSBytes (buffer);  		//Get a stream  		MemoryStream Output = new MemoryStream (buffer);  		Output.Seek (27' SeekOrigin.Begin);  		EBinaryReader binladen = new EBinaryReader (Output);  		//get length  		int totallength = (binladen.ReadUInt16 () << 16);  		totallength += binladen.ReadUInt16 ();  		//clear last loop's controls  		kys = new ZomBDataLookup ();  		//loop all controls  		while (totallength > (Output.Position - 27)) {  			byte b = binladen.ReadByte ();  			switch (b) {  			case 0://Announce  			 {  				int id = binladen.ReadByte ();  				SmartDataTypes type = (SmartDataTypes)binladen.ReadByte ();  				int len = binladen.ReadUInt16 ();  				byte[] name = new byte[len];  				binladen.Read (name' 0' len);  				if (peeking) {  					dp.Invoke (cb' Encoding.UTF8.GetString (name));  					nametable [id] = new SmartInfo {  						Name = Encoding.UTF8.GetString (name)'  						Type = type  					};  				}  				else {  					nametable [id] = new SmartInfo {  						Name = Encoding.UTF8.GetString (name)'  						Type = type  					};  				}  				break;  			}  			case 1://Update  			 {  				int id = binladen.ReadByte ();  				if (nametable.ContainsKey (id)) {  					var info = nametable [id];  					string value = info.Parse (binladen);  					kys [info.Name] = new ZomBDataObject (value' info.ZomBTypeHint);  				}  				else {  					b = binladen.ReadByte ();  					//get length  					binladen.Read (new byte[b]' 0' b);  					//skip it  				}  				break;  			}  			case 2://GUI Announce' not impl  			 {  				System.Windows.Forms.MessageBox.Show ("Dashboard selection via Protocol has not been implemented in ZomB' try WPF tabs instead");  				break;  			}  			default:  				throw new Exception ("Bin (" + b + ") not a 1 or zero' exiting");  			}  		}  		if (kys.Count > 0)//Empty keys in empty packet' "Smart" Dashboard can be dumb  		//All in favor of chaging the name to DumbDashboard say "aye!" "sqrt(-1)!"  		 {  			//Fire events  			if (DataRecieved != null)  				DataRecieved (this' new EventArgs ());  			if (NewStatusRecieved != null)  				NewStatusRecieved (this' new NewStatusRecievedEventArgs (cStat));  			if (NewDataRecieved != null)  				NewDataRecieved (this' new NewDataRecievedEventArgs (kys));  		}  		if (nume > 0)  			nume--;  	}  	catch (ThreadAbortException) {  		isrunning = false;  		cRIOConnection.Close ();  		return;  	}  	catch (Exception ex) {  		nume++;  		DoError (ex);  		if (nume > 10) {  			isrunning = false;  			DoError (new Exception ("10 consecutive errors were encountered' stopping Smart"));  			isrunning = false;  			try {  				cRIOConnection.Close ();  			}  			catch {  			}  			return;  		}  	}  }  
Magic Number,System451.Communication.Dashboard.Net,SmartDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\SmartDataSource.cs,DoWork,The following statement contains a magic number: while (isrunning) {  	try {  		IPEndPoint RIPend = null;  		//Recieve the data  		while (cRIOConnection.Available < 1018 && isrunning) {  			Thread.Sleep (2);  		}  		if (!isrunning) {  			cRIOConnection.Close ();  			return;  		}  		byte[] buffer = cRIOConnection.Receive (ref RIPend);  		//Check first  		if (!VerifyPacket (buffer)) {  			if (InvalidPacketRecieved != null && !peeking) {  				//Create our e  				InvalidPacketRecievedEventArgs e = new InvalidPacketRecievedEventArgs (buffer' ddh.InvalidPacketAction == InvalidPacketActions.AlwaysContinue || ddh.InvalidPacketAction == InvalidPacketActions.Continue);  				InvalidPacketRecieved (this' e);  				if ((int)ddh.InvalidPacketAction < 3)//1-4  				 {  					if (!e.ContinueAnyway)  						break;  				}  				else if (ddh.InvalidPacketAction == InvalidPacketActions.AlwaysIgnore)  					break;  			}  		}  		//DS Status  		cStat = ParseDSBytes (buffer);  		//Get a stream  		MemoryStream Output = new MemoryStream (buffer);  		Output.Seek (27' SeekOrigin.Begin);  		EBinaryReader binladen = new EBinaryReader (Output);  		//get length  		int totallength = (binladen.ReadUInt16 () << 16);  		totallength += binladen.ReadUInt16 ();  		//clear last loop's controls  		kys = new ZomBDataLookup ();  		//loop all controls  		while (totallength > (Output.Position - 27)) {  			byte b = binladen.ReadByte ();  			switch (b) {  			case 0://Announce  			 {  				int id = binladen.ReadByte ();  				SmartDataTypes type = (SmartDataTypes)binladen.ReadByte ();  				int len = binladen.ReadUInt16 ();  				byte[] name = new byte[len];  				binladen.Read (name' 0' len);  				if (peeking) {  					dp.Invoke (cb' Encoding.UTF8.GetString (name));  					nametable [id] = new SmartInfo {  						Name = Encoding.UTF8.GetString (name)'  						Type = type  					};  				}  				else {  					nametable [id] = new SmartInfo {  						Name = Encoding.UTF8.GetString (name)'  						Type = type  					};  				}  				break;  			}  			case 1://Update  			 {  				int id = binladen.ReadByte ();  				if (nametable.ContainsKey (id)) {  					var info = nametable [id];  					string value = info.Parse (binladen);  					kys [info.Name] = new ZomBDataObject (value' info.ZomBTypeHint);  				}  				else {  					b = binladen.ReadByte ();  					//get length  					binladen.Read (new byte[b]' 0' b);  					//skip it  				}  				break;  			}  			case 2://GUI Announce' not impl  			 {  				System.Windows.Forms.MessageBox.Show ("Dashboard selection via Protocol has not been implemented in ZomB' try WPF tabs instead");  				break;  			}  			default:  				throw new Exception ("Bin (" + b + ") not a 1 or zero' exiting");  			}  		}  		if (kys.Count > 0)//Empty keys in empty packet' "Smart" Dashboard can be dumb  		//All in favor of chaging the name to DumbDashboard say "aye!" "sqrt(-1)!"  		 {  			//Fire events  			if (DataRecieved != null)  				DataRecieved (this' new EventArgs ());  			if (NewStatusRecieved != null)  				NewStatusRecieved (this' new NewStatusRecievedEventArgs (cStat));  			if (NewDataRecieved != null)  				NewDataRecieved (this' new NewDataRecievedEventArgs (kys));  		}  		if (nume > 0)  			nume--;  	}  	catch (ThreadAbortException) {  		isrunning = false;  		cRIOConnection.Close ();  		return;  	}  	catch (Exception ex) {  		nume++;  		DoError (ex);  		if (nume > 10) {  			isrunning = false;  			DoError (new Exception ("10 consecutive errors were encountered' stopping Smart"));  			isrunning = false;  			try {  				cRIOConnection.Close ();  			}  			catch {  			}  			return;  		}  	}  }  
Magic Number,System451.Communication.Dashboard.Net,SmartDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\SmartDataSource.cs,DoWork,The following statement contains a magic number: while (isrunning) {  	try {  		IPEndPoint RIPend = null;  		//Recieve the data  		while (cRIOConnection.Available < 1018 && isrunning) {  			Thread.Sleep (2);  		}  		if (!isrunning) {  			cRIOConnection.Close ();  			return;  		}  		byte[] buffer = cRIOConnection.Receive (ref RIPend);  		//Check first  		if (!VerifyPacket (buffer)) {  			if (InvalidPacketRecieved != null && !peeking) {  				//Create our e  				InvalidPacketRecievedEventArgs e = new InvalidPacketRecievedEventArgs (buffer' ddh.InvalidPacketAction == InvalidPacketActions.AlwaysContinue || ddh.InvalidPacketAction == InvalidPacketActions.Continue);  				InvalidPacketRecieved (this' e);  				if ((int)ddh.InvalidPacketAction < 3)//1-4  				 {  					if (!e.ContinueAnyway)  						break;  				}  				else if (ddh.InvalidPacketAction == InvalidPacketActions.AlwaysIgnore)  					break;  			}  		}  		//DS Status  		cStat = ParseDSBytes (buffer);  		//Get a stream  		MemoryStream Output = new MemoryStream (buffer);  		Output.Seek (27' SeekOrigin.Begin);  		EBinaryReader binladen = new EBinaryReader (Output);  		//get length  		int totallength = (binladen.ReadUInt16 () << 16);  		totallength += binladen.ReadUInt16 ();  		//clear last loop's controls  		kys = new ZomBDataLookup ();  		//loop all controls  		while (totallength > (Output.Position - 27)) {  			byte b = binladen.ReadByte ();  			switch (b) {  			case 0://Announce  			 {  				int id = binladen.ReadByte ();  				SmartDataTypes type = (SmartDataTypes)binladen.ReadByte ();  				int len = binladen.ReadUInt16 ();  				byte[] name = new byte[len];  				binladen.Read (name' 0' len);  				if (peeking) {  					dp.Invoke (cb' Encoding.UTF8.GetString (name));  					nametable [id] = new SmartInfo {  						Name = Encoding.UTF8.GetString (name)'  						Type = type  					};  				}  				else {  					nametable [id] = new SmartInfo {  						Name = Encoding.UTF8.GetString (name)'  						Type = type  					};  				}  				break;  			}  			case 1://Update  			 {  				int id = binladen.ReadByte ();  				if (nametable.ContainsKey (id)) {  					var info = nametable [id];  					string value = info.Parse (binladen);  					kys [info.Name] = new ZomBDataObject (value' info.ZomBTypeHint);  				}  				else {  					b = binladen.ReadByte ();  					//get length  					binladen.Read (new byte[b]' 0' b);  					//skip it  				}  				break;  			}  			case 2://GUI Announce' not impl  			 {  				System.Windows.Forms.MessageBox.Show ("Dashboard selection via Protocol has not been implemented in ZomB' try WPF tabs instead");  				break;  			}  			default:  				throw new Exception ("Bin (" + b + ") not a 1 or zero' exiting");  			}  		}  		if (kys.Count > 0)//Empty keys in empty packet' "Smart" Dashboard can be dumb  		//All in favor of chaging the name to DumbDashboard say "aye!" "sqrt(-1)!"  		 {  			//Fire events  			if (DataRecieved != null)  				DataRecieved (this' new EventArgs ());  			if (NewStatusRecieved != null)  				NewStatusRecieved (this' new NewStatusRecievedEventArgs (cStat));  			if (NewDataRecieved != null)  				NewDataRecieved (this' new NewDataRecievedEventArgs (kys));  		}  		if (nume > 0)  			nume--;  	}  	catch (ThreadAbortException) {  		isrunning = false;  		cRIOConnection.Close ();  		return;  	}  	catch (Exception ex) {  		nume++;  		DoError (ex);  		if (nume > 10) {  			isrunning = false;  			DoError (new Exception ("10 consecutive errors were encountered' stopping Smart"));  			isrunning = false;  			try {  				cRIOConnection.Close ();  			}  			catch {  			}  			return;  		}  	}  }  
Magic Number,System451.Communication.Dashboard.Net,SmartDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\SmartDataSource.cs,DoWork,The following statement contains a magic number: while (isrunning) {  	try {  		IPEndPoint RIPend = null;  		//Recieve the data  		while (cRIOConnection.Available < 1018 && isrunning) {  			Thread.Sleep (2);  		}  		if (!isrunning) {  			cRIOConnection.Close ();  			return;  		}  		byte[] buffer = cRIOConnection.Receive (ref RIPend);  		//Check first  		if (!VerifyPacket (buffer)) {  			if (InvalidPacketRecieved != null && !peeking) {  				//Create our e  				InvalidPacketRecievedEventArgs e = new InvalidPacketRecievedEventArgs (buffer' ddh.InvalidPacketAction == InvalidPacketActions.AlwaysContinue || ddh.InvalidPacketAction == InvalidPacketActions.Continue);  				InvalidPacketRecieved (this' e);  				if ((int)ddh.InvalidPacketAction < 3)//1-4  				 {  					if (!e.ContinueAnyway)  						break;  				}  				else if (ddh.InvalidPacketAction == InvalidPacketActions.AlwaysIgnore)  					break;  			}  		}  		//DS Status  		cStat = ParseDSBytes (buffer);  		//Get a stream  		MemoryStream Output = new MemoryStream (buffer);  		Output.Seek (27' SeekOrigin.Begin);  		EBinaryReader binladen = new EBinaryReader (Output);  		//get length  		int totallength = (binladen.ReadUInt16 () << 16);  		totallength += binladen.ReadUInt16 ();  		//clear last loop's controls  		kys = new ZomBDataLookup ();  		//loop all controls  		while (totallength > (Output.Position - 27)) {  			byte b = binladen.ReadByte ();  			switch (b) {  			case 0://Announce  			 {  				int id = binladen.ReadByte ();  				SmartDataTypes type = (SmartDataTypes)binladen.ReadByte ();  				int len = binladen.ReadUInt16 ();  				byte[] name = new byte[len];  				binladen.Read (name' 0' len);  				if (peeking) {  					dp.Invoke (cb' Encoding.UTF8.GetString (name));  					nametable [id] = new SmartInfo {  						Name = Encoding.UTF8.GetString (name)'  						Type = type  					};  				}  				else {  					nametable [id] = new SmartInfo {  						Name = Encoding.UTF8.GetString (name)'  						Type = type  					};  				}  				break;  			}  			case 1://Update  			 {  				int id = binladen.ReadByte ();  				if (nametable.ContainsKey (id)) {  					var info = nametable [id];  					string value = info.Parse (binladen);  					kys [info.Name] = new ZomBDataObject (value' info.ZomBTypeHint);  				}  				else {  					b = binladen.ReadByte ();  					//get length  					binladen.Read (new byte[b]' 0' b);  					//skip it  				}  				break;  			}  			case 2://GUI Announce' not impl  			 {  				System.Windows.Forms.MessageBox.Show ("Dashboard selection via Protocol has not been implemented in ZomB' try WPF tabs instead");  				break;  			}  			default:  				throw new Exception ("Bin (" + b + ") not a 1 or zero' exiting");  			}  		}  		if (kys.Count > 0)//Empty keys in empty packet' "Smart" Dashboard can be dumb  		//All in favor of chaging the name to DumbDashboard say "aye!" "sqrt(-1)!"  		 {  			//Fire events  			if (DataRecieved != null)  				DataRecieved (this' new EventArgs ());  			if (NewStatusRecieved != null)  				NewStatusRecieved (this' new NewStatusRecievedEventArgs (cStat));  			if (NewDataRecieved != null)  				NewDataRecieved (this' new NewDataRecievedEventArgs (kys));  		}  		if (nume > 0)  			nume--;  	}  	catch (ThreadAbortException) {  		isrunning = false;  		cRIOConnection.Close ();  		return;  	}  	catch (Exception ex) {  		nume++;  		DoError (ex);  		if (nume > 10) {  			isrunning = false;  			DoError (new Exception ("10 consecutive errors were encountered' stopping Smart"));  			isrunning = false;  			try {  				cRIOConnection.Close ();  			}  			catch {  			}  			return;  		}  	}  }  
Magic Number,System451.Communication.Dashboard.Net,SmartDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\SmartDataSource.cs,DoWork,The following statement contains a magic number: while (isrunning) {  	try {  		IPEndPoint RIPend = null;  		//Recieve the data  		while (cRIOConnection.Available < 1018 && isrunning) {  			Thread.Sleep (2);  		}  		if (!isrunning) {  			cRIOConnection.Close ();  			return;  		}  		byte[] buffer = cRIOConnection.Receive (ref RIPend);  		//Check first  		if (!VerifyPacket (buffer)) {  			if (InvalidPacketRecieved != null && !peeking) {  				//Create our e  				InvalidPacketRecievedEventArgs e = new InvalidPacketRecievedEventArgs (buffer' ddh.InvalidPacketAction == InvalidPacketActions.AlwaysContinue || ddh.InvalidPacketAction == InvalidPacketActions.Continue);  				InvalidPacketRecieved (this' e);  				if ((int)ddh.InvalidPacketAction < 3)//1-4  				 {  					if (!e.ContinueAnyway)  						break;  				}  				else if (ddh.InvalidPacketAction == InvalidPacketActions.AlwaysIgnore)  					break;  			}  		}  		//DS Status  		cStat = ParseDSBytes (buffer);  		//Get a stream  		MemoryStream Output = new MemoryStream (buffer);  		Output.Seek (27' SeekOrigin.Begin);  		EBinaryReader binladen = new EBinaryReader (Output);  		//get length  		int totallength = (binladen.ReadUInt16 () << 16);  		totallength += binladen.ReadUInt16 ();  		//clear last loop's controls  		kys = new ZomBDataLookup ();  		//loop all controls  		while (totallength > (Output.Position - 27)) {  			byte b = binladen.ReadByte ();  			switch (b) {  			case 0://Announce  			 {  				int id = binladen.ReadByte ();  				SmartDataTypes type = (SmartDataTypes)binladen.ReadByte ();  				int len = binladen.ReadUInt16 ();  				byte[] name = new byte[len];  				binladen.Read (name' 0' len);  				if (peeking) {  					dp.Invoke (cb' Encoding.UTF8.GetString (name));  					nametable [id] = new SmartInfo {  						Name = Encoding.UTF8.GetString (name)'  						Type = type  					};  				}  				else {  					nametable [id] = new SmartInfo {  						Name = Encoding.UTF8.GetString (name)'  						Type = type  					};  				}  				break;  			}  			case 1://Update  			 {  				int id = binladen.ReadByte ();  				if (nametable.ContainsKey (id)) {  					var info = nametable [id];  					string value = info.Parse (binladen);  					kys [info.Name] = new ZomBDataObject (value' info.ZomBTypeHint);  				}  				else {  					b = binladen.ReadByte ();  					//get length  					binladen.Read (new byte[b]' 0' b);  					//skip it  				}  				break;  			}  			case 2://GUI Announce' not impl  			 {  				System.Windows.Forms.MessageBox.Show ("Dashboard selection via Protocol has not been implemented in ZomB' try WPF tabs instead");  				break;  			}  			default:  				throw new Exception ("Bin (" + b + ") not a 1 or zero' exiting");  			}  		}  		if (kys.Count > 0)//Empty keys in empty packet' "Smart" Dashboard can be dumb  		//All in favor of chaging the name to DumbDashboard say "aye!" "sqrt(-1)!"  		 {  			//Fire events  			if (DataRecieved != null)  				DataRecieved (this' new EventArgs ());  			if (NewStatusRecieved != null)  				NewStatusRecieved (this' new NewStatusRecievedEventArgs (cStat));  			if (NewDataRecieved != null)  				NewDataRecieved (this' new NewDataRecievedEventArgs (kys));  		}  		if (nume > 0)  			nume--;  	}  	catch (ThreadAbortException) {  		isrunning = false;  		cRIOConnection.Close ();  		return;  	}  	catch (Exception ex) {  		nume++;  		DoError (ex);  		if (nume > 10) {  			isrunning = false;  			DoError (new Exception ("10 consecutive errors were encountered' stopping Smart"));  			isrunning = false;  			try {  				cRIOConnection.Close ();  			}  			catch {  			}  			return;  		}  	}  }  
Magic Number,System451.Communication.Dashboard.Net,SmartDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\SmartDataSource.cs,DoWork,The following statement contains a magic number: while (isrunning) {  	try {  		IPEndPoint RIPend = null;  		//Recieve the data  		while (cRIOConnection.Available < 1018 && isrunning) {  			Thread.Sleep (2);  		}  		if (!isrunning) {  			cRIOConnection.Close ();  			return;  		}  		byte[] buffer = cRIOConnection.Receive (ref RIPend);  		//Check first  		if (!VerifyPacket (buffer)) {  			if (InvalidPacketRecieved != null && !peeking) {  				//Create our e  				InvalidPacketRecievedEventArgs e = new InvalidPacketRecievedEventArgs (buffer' ddh.InvalidPacketAction == InvalidPacketActions.AlwaysContinue || ddh.InvalidPacketAction == InvalidPacketActions.Continue);  				InvalidPacketRecieved (this' e);  				if ((int)ddh.InvalidPacketAction < 3)//1-4  				 {  					if (!e.ContinueAnyway)  						break;  				}  				else if (ddh.InvalidPacketAction == InvalidPacketActions.AlwaysIgnore)  					break;  			}  		}  		//DS Status  		cStat = ParseDSBytes (buffer);  		//Get a stream  		MemoryStream Output = new MemoryStream (buffer);  		Output.Seek (27' SeekOrigin.Begin);  		EBinaryReader binladen = new EBinaryReader (Output);  		//get length  		int totallength = (binladen.ReadUInt16 () << 16);  		totallength += binladen.ReadUInt16 ();  		//clear last loop's controls  		kys = new ZomBDataLookup ();  		//loop all controls  		while (totallength > (Output.Position - 27)) {  			byte b = binladen.ReadByte ();  			switch (b) {  			case 0://Announce  			 {  				int id = binladen.ReadByte ();  				SmartDataTypes type = (SmartDataTypes)binladen.ReadByte ();  				int len = binladen.ReadUInt16 ();  				byte[] name = new byte[len];  				binladen.Read (name' 0' len);  				if (peeking) {  					dp.Invoke (cb' Encoding.UTF8.GetString (name));  					nametable [id] = new SmartInfo {  						Name = Encoding.UTF8.GetString (name)'  						Type = type  					};  				}  				else {  					nametable [id] = new SmartInfo {  						Name = Encoding.UTF8.GetString (name)'  						Type = type  					};  				}  				break;  			}  			case 1://Update  			 {  				int id = binladen.ReadByte ();  				if (nametable.ContainsKey (id)) {  					var info = nametable [id];  					string value = info.Parse (binladen);  					kys [info.Name] = new ZomBDataObject (value' info.ZomBTypeHint);  				}  				else {  					b = binladen.ReadByte ();  					//get length  					binladen.Read (new byte[b]' 0' b);  					//skip it  				}  				break;  			}  			case 2://GUI Announce' not impl  			 {  				System.Windows.Forms.MessageBox.Show ("Dashboard selection via Protocol has not been implemented in ZomB' try WPF tabs instead");  				break;  			}  			default:  				throw new Exception ("Bin (" + b + ") not a 1 or zero' exiting");  			}  		}  		if (kys.Count > 0)//Empty keys in empty packet' "Smart" Dashboard can be dumb  		//All in favor of chaging the name to DumbDashboard say "aye!" "sqrt(-1)!"  		 {  			//Fire events  			if (DataRecieved != null)  				DataRecieved (this' new EventArgs ());  			if (NewStatusRecieved != null)  				NewStatusRecieved (this' new NewStatusRecievedEventArgs (cStat));  			if (NewDataRecieved != null)  				NewDataRecieved (this' new NewDataRecievedEventArgs (kys));  		}  		if (nume > 0)  			nume--;  	}  	catch (ThreadAbortException) {  		isrunning = false;  		cRIOConnection.Close ();  		return;  	}  	catch (Exception ex) {  		nume++;  		DoError (ex);  		if (nume > 10) {  			isrunning = false;  			DoError (new Exception ("10 consecutive errors were encountered' stopping Smart"));  			isrunning = false;  			try {  				cRIOConnection.Close ();  			}  			catch {  			}  			return;  		}  	}  }  
Magic Number,System451.Communication.Dashboard.Net,SmartDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\SmartDataSource.cs,DoWork,The following statement contains a magic number: while (isrunning) {  	try {  		IPEndPoint RIPend = null;  		//Recieve the data  		while (cRIOConnection.Available < 1018 && isrunning) {  			Thread.Sleep (2);  		}  		if (!isrunning) {  			cRIOConnection.Close ();  			return;  		}  		byte[] buffer = cRIOConnection.Receive (ref RIPend);  		//Check first  		if (!VerifyPacket (buffer)) {  			if (InvalidPacketRecieved != null && !peeking) {  				//Create our e  				InvalidPacketRecievedEventArgs e = new InvalidPacketRecievedEventArgs (buffer' ddh.InvalidPacketAction == InvalidPacketActions.AlwaysContinue || ddh.InvalidPacketAction == InvalidPacketActions.Continue);  				InvalidPacketRecieved (this' e);  				if ((int)ddh.InvalidPacketAction < 3)//1-4  				 {  					if (!e.ContinueAnyway)  						break;  				}  				else if (ddh.InvalidPacketAction == InvalidPacketActions.AlwaysIgnore)  					break;  			}  		}  		//DS Status  		cStat = ParseDSBytes (buffer);  		//Get a stream  		MemoryStream Output = new MemoryStream (buffer);  		Output.Seek (27' SeekOrigin.Begin);  		EBinaryReader binladen = new EBinaryReader (Output);  		//get length  		int totallength = (binladen.ReadUInt16 () << 16);  		totallength += binladen.ReadUInt16 ();  		//clear last loop's controls  		kys = new ZomBDataLookup ();  		//loop all controls  		while (totallength > (Output.Position - 27)) {  			byte b = binladen.ReadByte ();  			switch (b) {  			case 0://Announce  			 {  				int id = binladen.ReadByte ();  				SmartDataTypes type = (SmartDataTypes)binladen.ReadByte ();  				int len = binladen.ReadUInt16 ();  				byte[] name = new byte[len];  				binladen.Read (name' 0' len);  				if (peeking) {  					dp.Invoke (cb' Encoding.UTF8.GetString (name));  					nametable [id] = new SmartInfo {  						Name = Encoding.UTF8.GetString (name)'  						Type = type  					};  				}  				else {  					nametable [id] = new SmartInfo {  						Name = Encoding.UTF8.GetString (name)'  						Type = type  					};  				}  				break;  			}  			case 1://Update  			 {  				int id = binladen.ReadByte ();  				if (nametable.ContainsKey (id)) {  					var info = nametable [id];  					string value = info.Parse (binladen);  					kys [info.Name] = new ZomBDataObject (value' info.ZomBTypeHint);  				}  				else {  					b = binladen.ReadByte ();  					//get length  					binladen.Read (new byte[b]' 0' b);  					//skip it  				}  				break;  			}  			case 2://GUI Announce' not impl  			 {  				System.Windows.Forms.MessageBox.Show ("Dashboard selection via Protocol has not been implemented in ZomB' try WPF tabs instead");  				break;  			}  			default:  				throw new Exception ("Bin (" + b + ") not a 1 or zero' exiting");  			}  		}  		if (kys.Count > 0)//Empty keys in empty packet' "Smart" Dashboard can be dumb  		//All in favor of chaging the name to DumbDashboard say "aye!" "sqrt(-1)!"  		 {  			//Fire events  			if (DataRecieved != null)  				DataRecieved (this' new EventArgs ());  			if (NewStatusRecieved != null)  				NewStatusRecieved (this' new NewStatusRecievedEventArgs (cStat));  			if (NewDataRecieved != null)  				NewDataRecieved (this' new NewDataRecievedEventArgs (kys));  		}  		if (nume > 0)  			nume--;  	}  	catch (ThreadAbortException) {  		isrunning = false;  		cRIOConnection.Close ();  		return;  	}  	catch (Exception ex) {  		nume++;  		DoError (ex);  		if (nume > 10) {  			isrunning = false;  			DoError (new Exception ("10 consecutive errors were encountered' stopping Smart"));  			isrunning = false;  			try {  				cRIOConnection.Close ();  			}  			catch {  			}  			return;  		}  	}  }  
Magic Number,System451.Communication.Dashboard.Net,SmartDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\SmartDataSource.cs,DoWork,The following statement contains a magic number: while (isrunning) {  	try {  		IPEndPoint RIPend = null;  		//Recieve the data  		while (cRIOConnection.Available < 1018 && isrunning) {  			Thread.Sleep (2);  		}  		if (!isrunning) {  			cRIOConnection.Close ();  			return;  		}  		byte[] buffer = cRIOConnection.Receive (ref RIPend);  		//Check first  		if (!VerifyPacket (buffer)) {  			if (InvalidPacketRecieved != null && !peeking) {  				//Create our e  				InvalidPacketRecievedEventArgs e = new InvalidPacketRecievedEventArgs (buffer' ddh.InvalidPacketAction == InvalidPacketActions.AlwaysContinue || ddh.InvalidPacketAction == InvalidPacketActions.Continue);  				InvalidPacketRecieved (this' e);  				if ((int)ddh.InvalidPacketAction < 3)//1-4  				 {  					if (!e.ContinueAnyway)  						break;  				}  				else if (ddh.InvalidPacketAction == InvalidPacketActions.AlwaysIgnore)  					break;  			}  		}  		//DS Status  		cStat = ParseDSBytes (buffer);  		//Get a stream  		MemoryStream Output = new MemoryStream (buffer);  		Output.Seek (27' SeekOrigin.Begin);  		EBinaryReader binladen = new EBinaryReader (Output);  		//get length  		int totallength = (binladen.ReadUInt16 () << 16);  		totallength += binladen.ReadUInt16 ();  		//clear last loop's controls  		kys = new ZomBDataLookup ();  		//loop all controls  		while (totallength > (Output.Position - 27)) {  			byte b = binladen.ReadByte ();  			switch (b) {  			case 0://Announce  			 {  				int id = binladen.ReadByte ();  				SmartDataTypes type = (SmartDataTypes)binladen.ReadByte ();  				int len = binladen.ReadUInt16 ();  				byte[] name = new byte[len];  				binladen.Read (name' 0' len);  				if (peeking) {  					dp.Invoke (cb' Encoding.UTF8.GetString (name));  					nametable [id] = new SmartInfo {  						Name = Encoding.UTF8.GetString (name)'  						Type = type  					};  				}  				else {  					nametable [id] = new SmartInfo {  						Name = Encoding.UTF8.GetString (name)'  						Type = type  					};  				}  				break;  			}  			case 1://Update  			 {  				int id = binladen.ReadByte ();  				if (nametable.ContainsKey (id)) {  					var info = nametable [id];  					string value = info.Parse (binladen);  					kys [info.Name] = new ZomBDataObject (value' info.ZomBTypeHint);  				}  				else {  					b = binladen.ReadByte ();  					//get length  					binladen.Read (new byte[b]' 0' b);  					//skip it  				}  				break;  			}  			case 2://GUI Announce' not impl  			 {  				System.Windows.Forms.MessageBox.Show ("Dashboard selection via Protocol has not been implemented in ZomB' try WPF tabs instead");  				break;  			}  			default:  				throw new Exception ("Bin (" + b + ") not a 1 or zero' exiting");  			}  		}  		if (kys.Count > 0)//Empty keys in empty packet' "Smart" Dashboard can be dumb  		//All in favor of chaging the name to DumbDashboard say "aye!" "sqrt(-1)!"  		 {  			//Fire events  			if (DataRecieved != null)  				DataRecieved (this' new EventArgs ());  			if (NewStatusRecieved != null)  				NewStatusRecieved (this' new NewStatusRecievedEventArgs (cStat));  			if (NewDataRecieved != null)  				NewDataRecieved (this' new NewDataRecievedEventArgs (kys));  		}  		if (nume > 0)  			nume--;  	}  	catch (ThreadAbortException) {  		isrunning = false;  		cRIOConnection.Close ();  		return;  	}  	catch (Exception ex) {  		nume++;  		DoError (ex);  		if (nume > 10) {  			isrunning = false;  			DoError (new Exception ("10 consecutive errors were encountered' stopping Smart"));  			isrunning = false;  			try {  				cRIOConnection.Close ();  			}  			catch {  			}  			return;  		}  	}  }  
Magic Number,System451.Communication.Dashboard.Net,SmartDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\SmartDataSource.cs,DoWork,The following statement contains a magic number: try {  	IPEndPoint RIPend = null;  	//Recieve the data  	while (cRIOConnection.Available < 1018 && isrunning) {  		Thread.Sleep (2);  	}  	if (!isrunning) {  		cRIOConnection.Close ();  		return;  	}  	byte[] buffer = cRIOConnection.Receive (ref RIPend);  	//Check first  	if (!VerifyPacket (buffer)) {  		if (InvalidPacketRecieved != null && !peeking) {  			//Create our e  			InvalidPacketRecievedEventArgs e = new InvalidPacketRecievedEventArgs (buffer' ddh.InvalidPacketAction == InvalidPacketActions.AlwaysContinue || ddh.InvalidPacketAction == InvalidPacketActions.Continue);  			InvalidPacketRecieved (this' e);  			if ((int)ddh.InvalidPacketAction < 3)//1-4  			 {  				if (!e.ContinueAnyway)  					break;  			}  			else if (ddh.InvalidPacketAction == InvalidPacketActions.AlwaysIgnore)  				break;  		}  	}  	//DS Status  	cStat = ParseDSBytes (buffer);  	//Get a stream  	MemoryStream Output = new MemoryStream (buffer);  	Output.Seek (27' SeekOrigin.Begin);  	EBinaryReader binladen = new EBinaryReader (Output);  	//get length  	int totallength = (binladen.ReadUInt16 () << 16);  	totallength += binladen.ReadUInt16 ();  	//clear last loop's controls  	kys = new ZomBDataLookup ();  	//loop all controls  	while (totallength > (Output.Position - 27)) {  		byte b = binladen.ReadByte ();  		switch (b) {  		case 0://Announce  		 {  			int id = binladen.ReadByte ();  			SmartDataTypes type = (SmartDataTypes)binladen.ReadByte ();  			int len = binladen.ReadUInt16 ();  			byte[] name = new byte[len];  			binladen.Read (name' 0' len);  			if (peeking) {  				dp.Invoke (cb' Encoding.UTF8.GetString (name));  				nametable [id] = new SmartInfo {  					Name = Encoding.UTF8.GetString (name)'  					Type = type  				};  			}  			else {  				nametable [id] = new SmartInfo {  					Name = Encoding.UTF8.GetString (name)'  					Type = type  				};  			}  			break;  		}  		case 1://Update  		 {  			int id = binladen.ReadByte ();  			if (nametable.ContainsKey (id)) {  				var info = nametable [id];  				string value = info.Parse (binladen);  				kys [info.Name] = new ZomBDataObject (value' info.ZomBTypeHint);  			}  			else {  				b = binladen.ReadByte ();  				//get length  				binladen.Read (new byte[b]' 0' b);  				//skip it  			}  			break;  		}  		case 2://GUI Announce' not impl  		 {  			System.Windows.Forms.MessageBox.Show ("Dashboard selection via Protocol has not been implemented in ZomB' try WPF tabs instead");  			break;  		}  		default:  			throw new Exception ("Bin (" + b + ") not a 1 or zero' exiting");  		}  	}  	if (kys.Count > 0)//Empty keys in empty packet' "Smart" Dashboard can be dumb  	//All in favor of chaging the name to DumbDashboard say "aye!" "sqrt(-1)!"  	 {  		//Fire events  		if (DataRecieved != null)  			DataRecieved (this' new EventArgs ());  		if (NewStatusRecieved != null)  			NewStatusRecieved (this' new NewStatusRecievedEventArgs (cStat));  		if (NewDataRecieved != null)  			NewDataRecieved (this' new NewDataRecievedEventArgs (kys));  	}  	if (nume > 0)  		nume--;  }  catch (ThreadAbortException) {  	isrunning = false;  	cRIOConnection.Close ();  	return;  }  catch (Exception ex) {  	nume++;  	DoError (ex);  	if (nume > 10) {  		isrunning = false;  		DoError (new Exception ("10 consecutive errors were encountered' stopping Smart"));  		isrunning = false;  		try {  			cRIOConnection.Close ();  		}  		catch {  		}  		return;  	}  }  
Magic Number,System451.Communication.Dashboard.Net,SmartDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\SmartDataSource.cs,DoWork,The following statement contains a magic number: try {  	IPEndPoint RIPend = null;  	//Recieve the data  	while (cRIOConnection.Available < 1018 && isrunning) {  		Thread.Sleep (2);  	}  	if (!isrunning) {  		cRIOConnection.Close ();  		return;  	}  	byte[] buffer = cRIOConnection.Receive (ref RIPend);  	//Check first  	if (!VerifyPacket (buffer)) {  		if (InvalidPacketRecieved != null && !peeking) {  			//Create our e  			InvalidPacketRecievedEventArgs e = new InvalidPacketRecievedEventArgs (buffer' ddh.InvalidPacketAction == InvalidPacketActions.AlwaysContinue || ddh.InvalidPacketAction == InvalidPacketActions.Continue);  			InvalidPacketRecieved (this' e);  			if ((int)ddh.InvalidPacketAction < 3)//1-4  			 {  				if (!e.ContinueAnyway)  					break;  			}  			else if (ddh.InvalidPacketAction == InvalidPacketActions.AlwaysIgnore)  				break;  		}  	}  	//DS Status  	cStat = ParseDSBytes (buffer);  	//Get a stream  	MemoryStream Output = new MemoryStream (buffer);  	Output.Seek (27' SeekOrigin.Begin);  	EBinaryReader binladen = new EBinaryReader (Output);  	//get length  	int totallength = (binladen.ReadUInt16 () << 16);  	totallength += binladen.ReadUInt16 ();  	//clear last loop's controls  	kys = new ZomBDataLookup ();  	//loop all controls  	while (totallength > (Output.Position - 27)) {  		byte b = binladen.ReadByte ();  		switch (b) {  		case 0://Announce  		 {  			int id = binladen.ReadByte ();  			SmartDataTypes type = (SmartDataTypes)binladen.ReadByte ();  			int len = binladen.ReadUInt16 ();  			byte[] name = new byte[len];  			binladen.Read (name' 0' len);  			if (peeking) {  				dp.Invoke (cb' Encoding.UTF8.GetString (name));  				nametable [id] = new SmartInfo {  					Name = Encoding.UTF8.GetString (name)'  					Type = type  				};  			}  			else {  				nametable [id] = new SmartInfo {  					Name = Encoding.UTF8.GetString (name)'  					Type = type  				};  			}  			break;  		}  		case 1://Update  		 {  			int id = binladen.ReadByte ();  			if (nametable.ContainsKey (id)) {  				var info = nametable [id];  				string value = info.Parse (binladen);  				kys [info.Name] = new ZomBDataObject (value' info.ZomBTypeHint);  			}  			else {  				b = binladen.ReadByte ();  				//get length  				binladen.Read (new byte[b]' 0' b);  				//skip it  			}  			break;  		}  		case 2://GUI Announce' not impl  		 {  			System.Windows.Forms.MessageBox.Show ("Dashboard selection via Protocol has not been implemented in ZomB' try WPF tabs instead");  			break;  		}  		default:  			throw new Exception ("Bin (" + b + ") not a 1 or zero' exiting");  		}  	}  	if (kys.Count > 0)//Empty keys in empty packet' "Smart" Dashboard can be dumb  	//All in favor of chaging the name to DumbDashboard say "aye!" "sqrt(-1)!"  	 {  		//Fire events  		if (DataRecieved != null)  			DataRecieved (this' new EventArgs ());  		if (NewStatusRecieved != null)  			NewStatusRecieved (this' new NewStatusRecievedEventArgs (cStat));  		if (NewDataRecieved != null)  			NewDataRecieved (this' new NewDataRecievedEventArgs (kys));  	}  	if (nume > 0)  		nume--;  }  catch (ThreadAbortException) {  	isrunning = false;  	cRIOConnection.Close ();  	return;  }  catch (Exception ex) {  	nume++;  	DoError (ex);  	if (nume > 10) {  		isrunning = false;  		DoError (new Exception ("10 consecutive errors were encountered' stopping Smart"));  		isrunning = false;  		try {  			cRIOConnection.Close ();  		}  		catch {  		}  		return;  	}  }  
Magic Number,System451.Communication.Dashboard.Net,SmartDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\SmartDataSource.cs,DoWork,The following statement contains a magic number: try {  	IPEndPoint RIPend = null;  	//Recieve the data  	while (cRIOConnection.Available < 1018 && isrunning) {  		Thread.Sleep (2);  	}  	if (!isrunning) {  		cRIOConnection.Close ();  		return;  	}  	byte[] buffer = cRIOConnection.Receive (ref RIPend);  	//Check first  	if (!VerifyPacket (buffer)) {  		if (InvalidPacketRecieved != null && !peeking) {  			//Create our e  			InvalidPacketRecievedEventArgs e = new InvalidPacketRecievedEventArgs (buffer' ddh.InvalidPacketAction == InvalidPacketActions.AlwaysContinue || ddh.InvalidPacketAction == InvalidPacketActions.Continue);  			InvalidPacketRecieved (this' e);  			if ((int)ddh.InvalidPacketAction < 3)//1-4  			 {  				if (!e.ContinueAnyway)  					break;  			}  			else if (ddh.InvalidPacketAction == InvalidPacketActions.AlwaysIgnore)  				break;  		}  	}  	//DS Status  	cStat = ParseDSBytes (buffer);  	//Get a stream  	MemoryStream Output = new MemoryStream (buffer);  	Output.Seek (27' SeekOrigin.Begin);  	EBinaryReader binladen = new EBinaryReader (Output);  	//get length  	int totallength = (binladen.ReadUInt16 () << 16);  	totallength += binladen.ReadUInt16 ();  	//clear last loop's controls  	kys = new ZomBDataLookup ();  	//loop all controls  	while (totallength > (Output.Position - 27)) {  		byte b = binladen.ReadByte ();  		switch (b) {  		case 0://Announce  		 {  			int id = binladen.ReadByte ();  			SmartDataTypes type = (SmartDataTypes)binladen.ReadByte ();  			int len = binladen.ReadUInt16 ();  			byte[] name = new byte[len];  			binladen.Read (name' 0' len);  			if (peeking) {  				dp.Invoke (cb' Encoding.UTF8.GetString (name));  				nametable [id] = new SmartInfo {  					Name = Encoding.UTF8.GetString (name)'  					Type = type  				};  			}  			else {  				nametable [id] = new SmartInfo {  					Name = Encoding.UTF8.GetString (name)'  					Type = type  				};  			}  			break;  		}  		case 1://Update  		 {  			int id = binladen.ReadByte ();  			if (nametable.ContainsKey (id)) {  				var info = nametable [id];  				string value = info.Parse (binladen);  				kys [info.Name] = new ZomBDataObject (value' info.ZomBTypeHint);  			}  			else {  				b = binladen.ReadByte ();  				//get length  				binladen.Read (new byte[b]' 0' b);  				//skip it  			}  			break;  		}  		case 2://GUI Announce' not impl  		 {  			System.Windows.Forms.MessageBox.Show ("Dashboard selection via Protocol has not been implemented in ZomB' try WPF tabs instead");  			break;  		}  		default:  			throw new Exception ("Bin (" + b + ") not a 1 or zero' exiting");  		}  	}  	if (kys.Count > 0)//Empty keys in empty packet' "Smart" Dashboard can be dumb  	//All in favor of chaging the name to DumbDashboard say "aye!" "sqrt(-1)!"  	 {  		//Fire events  		if (DataRecieved != null)  			DataRecieved (this' new EventArgs ());  		if (NewStatusRecieved != null)  			NewStatusRecieved (this' new NewStatusRecievedEventArgs (cStat));  		if (NewDataRecieved != null)  			NewDataRecieved (this' new NewDataRecievedEventArgs (kys));  	}  	if (nume > 0)  		nume--;  }  catch (ThreadAbortException) {  	isrunning = false;  	cRIOConnection.Close ();  	return;  }  catch (Exception ex) {  	nume++;  	DoError (ex);  	if (nume > 10) {  		isrunning = false;  		DoError (new Exception ("10 consecutive errors were encountered' stopping Smart"));  		isrunning = false;  		try {  			cRIOConnection.Close ();  		}  		catch {  		}  		return;  	}  }  
Magic Number,System451.Communication.Dashboard.Net,SmartDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\SmartDataSource.cs,DoWork,The following statement contains a magic number: try {  	IPEndPoint RIPend = null;  	//Recieve the data  	while (cRIOConnection.Available < 1018 && isrunning) {  		Thread.Sleep (2);  	}  	if (!isrunning) {  		cRIOConnection.Close ();  		return;  	}  	byte[] buffer = cRIOConnection.Receive (ref RIPend);  	//Check first  	if (!VerifyPacket (buffer)) {  		if (InvalidPacketRecieved != null && !peeking) {  			//Create our e  			InvalidPacketRecievedEventArgs e = new InvalidPacketRecievedEventArgs (buffer' ddh.InvalidPacketAction == InvalidPacketActions.AlwaysContinue || ddh.InvalidPacketAction == InvalidPacketActions.Continue);  			InvalidPacketRecieved (this' e);  			if ((int)ddh.InvalidPacketAction < 3)//1-4  			 {  				if (!e.ContinueAnyway)  					break;  			}  			else if (ddh.InvalidPacketAction == InvalidPacketActions.AlwaysIgnore)  				break;  		}  	}  	//DS Status  	cStat = ParseDSBytes (buffer);  	//Get a stream  	MemoryStream Output = new MemoryStream (buffer);  	Output.Seek (27' SeekOrigin.Begin);  	EBinaryReader binladen = new EBinaryReader (Output);  	//get length  	int totallength = (binladen.ReadUInt16 () << 16);  	totallength += binladen.ReadUInt16 ();  	//clear last loop's controls  	kys = new ZomBDataLookup ();  	//loop all controls  	while (totallength > (Output.Position - 27)) {  		byte b = binladen.ReadByte ();  		switch (b) {  		case 0://Announce  		 {  			int id = binladen.ReadByte ();  			SmartDataTypes type = (SmartDataTypes)binladen.ReadByte ();  			int len = binladen.ReadUInt16 ();  			byte[] name = new byte[len];  			binladen.Read (name' 0' len);  			if (peeking) {  				dp.Invoke (cb' Encoding.UTF8.GetString (name));  				nametable [id] = new SmartInfo {  					Name = Encoding.UTF8.GetString (name)'  					Type = type  				};  			}  			else {  				nametable [id] = new SmartInfo {  					Name = Encoding.UTF8.GetString (name)'  					Type = type  				};  			}  			break;  		}  		case 1://Update  		 {  			int id = binladen.ReadByte ();  			if (nametable.ContainsKey (id)) {  				var info = nametable [id];  				string value = info.Parse (binladen);  				kys [info.Name] = new ZomBDataObject (value' info.ZomBTypeHint);  			}  			else {  				b = binladen.ReadByte ();  				//get length  				binladen.Read (new byte[b]' 0' b);  				//skip it  			}  			break;  		}  		case 2://GUI Announce' not impl  		 {  			System.Windows.Forms.MessageBox.Show ("Dashboard selection via Protocol has not been implemented in ZomB' try WPF tabs instead");  			break;  		}  		default:  			throw new Exception ("Bin (" + b + ") not a 1 or zero' exiting");  		}  	}  	if (kys.Count > 0)//Empty keys in empty packet' "Smart" Dashboard can be dumb  	//All in favor of chaging the name to DumbDashboard say "aye!" "sqrt(-1)!"  	 {  		//Fire events  		if (DataRecieved != null)  			DataRecieved (this' new EventArgs ());  		if (NewStatusRecieved != null)  			NewStatusRecieved (this' new NewStatusRecievedEventArgs (cStat));  		if (NewDataRecieved != null)  			NewDataRecieved (this' new NewDataRecievedEventArgs (kys));  	}  	if (nume > 0)  		nume--;  }  catch (ThreadAbortException) {  	isrunning = false;  	cRIOConnection.Close ();  	return;  }  catch (Exception ex) {  	nume++;  	DoError (ex);  	if (nume > 10) {  		isrunning = false;  		DoError (new Exception ("10 consecutive errors were encountered' stopping Smart"));  		isrunning = false;  		try {  			cRIOConnection.Close ();  		}  		catch {  		}  		return;  	}  }  
Magic Number,System451.Communication.Dashboard.Net,SmartDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\SmartDataSource.cs,DoWork,The following statement contains a magic number: try {  	IPEndPoint RIPend = null;  	//Recieve the data  	while (cRIOConnection.Available < 1018 && isrunning) {  		Thread.Sleep (2);  	}  	if (!isrunning) {  		cRIOConnection.Close ();  		return;  	}  	byte[] buffer = cRIOConnection.Receive (ref RIPend);  	//Check first  	if (!VerifyPacket (buffer)) {  		if (InvalidPacketRecieved != null && !peeking) {  			//Create our e  			InvalidPacketRecievedEventArgs e = new InvalidPacketRecievedEventArgs (buffer' ddh.InvalidPacketAction == InvalidPacketActions.AlwaysContinue || ddh.InvalidPacketAction == InvalidPacketActions.Continue);  			InvalidPacketRecieved (this' e);  			if ((int)ddh.InvalidPacketAction < 3)//1-4  			 {  				if (!e.ContinueAnyway)  					break;  			}  			else if (ddh.InvalidPacketAction == InvalidPacketActions.AlwaysIgnore)  				break;  		}  	}  	//DS Status  	cStat = ParseDSBytes (buffer);  	//Get a stream  	MemoryStream Output = new MemoryStream (buffer);  	Output.Seek (27' SeekOrigin.Begin);  	EBinaryReader binladen = new EBinaryReader (Output);  	//get length  	int totallength = (binladen.ReadUInt16 () << 16);  	totallength += binladen.ReadUInt16 ();  	//clear last loop's controls  	kys = new ZomBDataLookup ();  	//loop all controls  	while (totallength > (Output.Position - 27)) {  		byte b = binladen.ReadByte ();  		switch (b) {  		case 0://Announce  		 {  			int id = binladen.ReadByte ();  			SmartDataTypes type = (SmartDataTypes)binladen.ReadByte ();  			int len = binladen.ReadUInt16 ();  			byte[] name = new byte[len];  			binladen.Read (name' 0' len);  			if (peeking) {  				dp.Invoke (cb' Encoding.UTF8.GetString (name));  				nametable [id] = new SmartInfo {  					Name = Encoding.UTF8.GetString (name)'  					Type = type  				};  			}  			else {  				nametable [id] = new SmartInfo {  					Name = Encoding.UTF8.GetString (name)'  					Type = type  				};  			}  			break;  		}  		case 1://Update  		 {  			int id = binladen.ReadByte ();  			if (nametable.ContainsKey (id)) {  				var info = nametable [id];  				string value = info.Parse (binladen);  				kys [info.Name] = new ZomBDataObject (value' info.ZomBTypeHint);  			}  			else {  				b = binladen.ReadByte ();  				//get length  				binladen.Read (new byte[b]' 0' b);  				//skip it  			}  			break;  		}  		case 2://GUI Announce' not impl  		 {  			System.Windows.Forms.MessageBox.Show ("Dashboard selection via Protocol has not been implemented in ZomB' try WPF tabs instead");  			break;  		}  		default:  			throw new Exception ("Bin (" + b + ") not a 1 or zero' exiting");  		}  	}  	if (kys.Count > 0)//Empty keys in empty packet' "Smart" Dashboard can be dumb  	//All in favor of chaging the name to DumbDashboard say "aye!" "sqrt(-1)!"  	 {  		//Fire events  		if (DataRecieved != null)  			DataRecieved (this' new EventArgs ());  		if (NewStatusRecieved != null)  			NewStatusRecieved (this' new NewStatusRecievedEventArgs (cStat));  		if (NewDataRecieved != null)  			NewDataRecieved (this' new NewDataRecievedEventArgs (kys));  	}  	if (nume > 0)  		nume--;  }  catch (ThreadAbortException) {  	isrunning = false;  	cRIOConnection.Close ();  	return;  }  catch (Exception ex) {  	nume++;  	DoError (ex);  	if (nume > 10) {  		isrunning = false;  		DoError (new Exception ("10 consecutive errors were encountered' stopping Smart"));  		isrunning = false;  		try {  			cRIOConnection.Close ();  		}  		catch {  		}  		return;  	}  }  
Magic Number,System451.Communication.Dashboard.Net,SmartDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\SmartDataSource.cs,DoWork,The following statement contains a magic number: try {  	IPEndPoint RIPend = null;  	//Recieve the data  	while (cRIOConnection.Available < 1018 && isrunning) {  		Thread.Sleep (2);  	}  	if (!isrunning) {  		cRIOConnection.Close ();  		return;  	}  	byte[] buffer = cRIOConnection.Receive (ref RIPend);  	//Check first  	if (!VerifyPacket (buffer)) {  		if (InvalidPacketRecieved != null && !peeking) {  			//Create our e  			InvalidPacketRecievedEventArgs e = new InvalidPacketRecievedEventArgs (buffer' ddh.InvalidPacketAction == InvalidPacketActions.AlwaysContinue || ddh.InvalidPacketAction == InvalidPacketActions.Continue);  			InvalidPacketRecieved (this' e);  			if ((int)ddh.InvalidPacketAction < 3)//1-4  			 {  				if (!e.ContinueAnyway)  					break;  			}  			else if (ddh.InvalidPacketAction == InvalidPacketActions.AlwaysIgnore)  				break;  		}  	}  	//DS Status  	cStat = ParseDSBytes (buffer);  	//Get a stream  	MemoryStream Output = new MemoryStream (buffer);  	Output.Seek (27' SeekOrigin.Begin);  	EBinaryReader binladen = new EBinaryReader (Output);  	//get length  	int totallength = (binladen.ReadUInt16 () << 16);  	totallength += binladen.ReadUInt16 ();  	//clear last loop's controls  	kys = new ZomBDataLookup ();  	//loop all controls  	while (totallength > (Output.Position - 27)) {  		byte b = binladen.ReadByte ();  		switch (b) {  		case 0://Announce  		 {  			int id = binladen.ReadByte ();  			SmartDataTypes type = (SmartDataTypes)binladen.ReadByte ();  			int len = binladen.ReadUInt16 ();  			byte[] name = new byte[len];  			binladen.Read (name' 0' len);  			if (peeking) {  				dp.Invoke (cb' Encoding.UTF8.GetString (name));  				nametable [id] = new SmartInfo {  					Name = Encoding.UTF8.GetString (name)'  					Type = type  				};  			}  			else {  				nametable [id] = new SmartInfo {  					Name = Encoding.UTF8.GetString (name)'  					Type = type  				};  			}  			break;  		}  		case 1://Update  		 {  			int id = binladen.ReadByte ();  			if (nametable.ContainsKey (id)) {  				var info = nametable [id];  				string value = info.Parse (binladen);  				kys [info.Name] = new ZomBDataObject (value' info.ZomBTypeHint);  			}  			else {  				b = binladen.ReadByte ();  				//get length  				binladen.Read (new byte[b]' 0' b);  				//skip it  			}  			break;  		}  		case 2://GUI Announce' not impl  		 {  			System.Windows.Forms.MessageBox.Show ("Dashboard selection via Protocol has not been implemented in ZomB' try WPF tabs instead");  			break;  		}  		default:  			throw new Exception ("Bin (" + b + ") not a 1 or zero' exiting");  		}  	}  	if (kys.Count > 0)//Empty keys in empty packet' "Smart" Dashboard can be dumb  	//All in favor of chaging the name to DumbDashboard say "aye!" "sqrt(-1)!"  	 {  		//Fire events  		if (DataRecieved != null)  			DataRecieved (this' new EventArgs ());  		if (NewStatusRecieved != null)  			NewStatusRecieved (this' new NewStatusRecievedEventArgs (cStat));  		if (NewDataRecieved != null)  			NewDataRecieved (this' new NewDataRecievedEventArgs (kys));  	}  	if (nume > 0)  		nume--;  }  catch (ThreadAbortException) {  	isrunning = false;  	cRIOConnection.Close ();  	return;  }  catch (Exception ex) {  	nume++;  	DoError (ex);  	if (nume > 10) {  		isrunning = false;  		DoError (new Exception ("10 consecutive errors were encountered' stopping Smart"));  		isrunning = false;  		try {  			cRIOConnection.Close ();  		}  		catch {  		}  		return;  	}  }  
Magic Number,System451.Communication.Dashboard.Net,SmartDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\SmartDataSource.cs,DoWork,The following statement contains a magic number: try {  	IPEndPoint RIPend = null;  	//Recieve the data  	while (cRIOConnection.Available < 1018 && isrunning) {  		Thread.Sleep (2);  	}  	if (!isrunning) {  		cRIOConnection.Close ();  		return;  	}  	byte[] buffer = cRIOConnection.Receive (ref RIPend);  	//Check first  	if (!VerifyPacket (buffer)) {  		if (InvalidPacketRecieved != null && !peeking) {  			//Create our e  			InvalidPacketRecievedEventArgs e = new InvalidPacketRecievedEventArgs (buffer' ddh.InvalidPacketAction == InvalidPacketActions.AlwaysContinue || ddh.InvalidPacketAction == InvalidPacketActions.Continue);  			InvalidPacketRecieved (this' e);  			if ((int)ddh.InvalidPacketAction < 3)//1-4  			 {  				if (!e.ContinueAnyway)  					break;  			}  			else if (ddh.InvalidPacketAction == InvalidPacketActions.AlwaysIgnore)  				break;  		}  	}  	//DS Status  	cStat = ParseDSBytes (buffer);  	//Get a stream  	MemoryStream Output = new MemoryStream (buffer);  	Output.Seek (27' SeekOrigin.Begin);  	EBinaryReader binladen = new EBinaryReader (Output);  	//get length  	int totallength = (binladen.ReadUInt16 () << 16);  	totallength += binladen.ReadUInt16 ();  	//clear last loop's controls  	kys = new ZomBDataLookup ();  	//loop all controls  	while (totallength > (Output.Position - 27)) {  		byte b = binladen.ReadByte ();  		switch (b) {  		case 0://Announce  		 {  			int id = binladen.ReadByte ();  			SmartDataTypes type = (SmartDataTypes)binladen.ReadByte ();  			int len = binladen.ReadUInt16 ();  			byte[] name = new byte[len];  			binladen.Read (name' 0' len);  			if (peeking) {  				dp.Invoke (cb' Encoding.UTF8.GetString (name));  				nametable [id] = new SmartInfo {  					Name = Encoding.UTF8.GetString (name)'  					Type = type  				};  			}  			else {  				nametable [id] = new SmartInfo {  					Name = Encoding.UTF8.GetString (name)'  					Type = type  				};  			}  			break;  		}  		case 1://Update  		 {  			int id = binladen.ReadByte ();  			if (nametable.ContainsKey (id)) {  				var info = nametable [id];  				string value = info.Parse (binladen);  				kys [info.Name] = new ZomBDataObject (value' info.ZomBTypeHint);  			}  			else {  				b = binladen.ReadByte ();  				//get length  				binladen.Read (new byte[b]' 0' b);  				//skip it  			}  			break;  		}  		case 2://GUI Announce' not impl  		 {  			System.Windows.Forms.MessageBox.Show ("Dashboard selection via Protocol has not been implemented in ZomB' try WPF tabs instead");  			break;  		}  		default:  			throw new Exception ("Bin (" + b + ") not a 1 or zero' exiting");  		}  	}  	if (kys.Count > 0)//Empty keys in empty packet' "Smart" Dashboard can be dumb  	//All in favor of chaging the name to DumbDashboard say "aye!" "sqrt(-1)!"  	 {  		//Fire events  		if (DataRecieved != null)  			DataRecieved (this' new EventArgs ());  		if (NewStatusRecieved != null)  			NewStatusRecieved (this' new NewStatusRecievedEventArgs (cStat));  		if (NewDataRecieved != null)  			NewDataRecieved (this' new NewDataRecievedEventArgs (kys));  	}  	if (nume > 0)  		nume--;  }  catch (ThreadAbortException) {  	isrunning = false;  	cRIOConnection.Close ();  	return;  }  catch (Exception ex) {  	nume++;  	DoError (ex);  	if (nume > 10) {  		isrunning = false;  		DoError (new Exception ("10 consecutive errors were encountered' stopping Smart"));  		isrunning = false;  		try {  			cRIOConnection.Close ();  		}  		catch {  		}  		return;  	}  }  
Magic Number,System451.Communication.Dashboard.Net,SmartDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\SmartDataSource.cs,DoWork,The following statement contains a magic number: try {  	IPEndPoint RIPend = null;  	//Recieve the data  	while (cRIOConnection.Available < 1018 && isrunning) {  		Thread.Sleep (2);  	}  	if (!isrunning) {  		cRIOConnection.Close ();  		return;  	}  	byte[] buffer = cRIOConnection.Receive (ref RIPend);  	//Check first  	if (!VerifyPacket (buffer)) {  		if (InvalidPacketRecieved != null && !peeking) {  			//Create our e  			InvalidPacketRecievedEventArgs e = new InvalidPacketRecievedEventArgs (buffer' ddh.InvalidPacketAction == InvalidPacketActions.AlwaysContinue || ddh.InvalidPacketAction == InvalidPacketActions.Continue);  			InvalidPacketRecieved (this' e);  			if ((int)ddh.InvalidPacketAction < 3)//1-4  			 {  				if (!e.ContinueAnyway)  					break;  			}  			else if (ddh.InvalidPacketAction == InvalidPacketActions.AlwaysIgnore)  				break;  		}  	}  	//DS Status  	cStat = ParseDSBytes (buffer);  	//Get a stream  	MemoryStream Output = new MemoryStream (buffer);  	Output.Seek (27' SeekOrigin.Begin);  	EBinaryReader binladen = new EBinaryReader (Output);  	//get length  	int totallength = (binladen.ReadUInt16 () << 16);  	totallength += binladen.ReadUInt16 ();  	//clear last loop's controls  	kys = new ZomBDataLookup ();  	//loop all controls  	while (totallength > (Output.Position - 27)) {  		byte b = binladen.ReadByte ();  		switch (b) {  		case 0://Announce  		 {  			int id = binladen.ReadByte ();  			SmartDataTypes type = (SmartDataTypes)binladen.ReadByte ();  			int len = binladen.ReadUInt16 ();  			byte[] name = new byte[len];  			binladen.Read (name' 0' len);  			if (peeking) {  				dp.Invoke (cb' Encoding.UTF8.GetString (name));  				nametable [id] = new SmartInfo {  					Name = Encoding.UTF8.GetString (name)'  					Type = type  				};  			}  			else {  				nametable [id] = new SmartInfo {  					Name = Encoding.UTF8.GetString (name)'  					Type = type  				};  			}  			break;  		}  		case 1://Update  		 {  			int id = binladen.ReadByte ();  			if (nametable.ContainsKey (id)) {  				var info = nametable [id];  				string value = info.Parse (binladen);  				kys [info.Name] = new ZomBDataObject (value' info.ZomBTypeHint);  			}  			else {  				b = binladen.ReadByte ();  				//get length  				binladen.Read (new byte[b]' 0' b);  				//skip it  			}  			break;  		}  		case 2://GUI Announce' not impl  		 {  			System.Windows.Forms.MessageBox.Show ("Dashboard selection via Protocol has not been implemented in ZomB' try WPF tabs instead");  			break;  		}  		default:  			throw new Exception ("Bin (" + b + ") not a 1 or zero' exiting");  		}  	}  	if (kys.Count > 0)//Empty keys in empty packet' "Smart" Dashboard can be dumb  	//All in favor of chaging the name to DumbDashboard say "aye!" "sqrt(-1)!"  	 {  		//Fire events  		if (DataRecieved != null)  			DataRecieved (this' new EventArgs ());  		if (NewStatusRecieved != null)  			NewStatusRecieved (this' new NewStatusRecievedEventArgs (cStat));  		if (NewDataRecieved != null)  			NewDataRecieved (this' new NewDataRecievedEventArgs (kys));  	}  	if (nume > 0)  		nume--;  }  catch (ThreadAbortException) {  	isrunning = false;  	cRIOConnection.Close ();  	return;  }  catch (Exception ex) {  	nume++;  	DoError (ex);  	if (nume > 10) {  		isrunning = false;  		DoError (new Exception ("10 consecutive errors were encountered' stopping Smart"));  		isrunning = false;  		try {  			cRIOConnection.Close ();  		}  		catch {  		}  		return;  	}  }  
Magic Number,System451.Communication.Dashboard.Net,SmartDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\SmartDataSource.cs,DoWork,The following statement contains a magic number: while (cRIOConnection.Available < 1018 && isrunning) {  	Thread.Sleep (2);  }  
Magic Number,System451.Communication.Dashboard.Net,SmartDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\SmartDataSource.cs,DoWork,The following statement contains a magic number: while (cRIOConnection.Available < 1018 && isrunning) {  	Thread.Sleep (2);  }  
Magic Number,System451.Communication.Dashboard.Net,SmartDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\SmartDataSource.cs,DoWork,The following statement contains a magic number: Thread.Sleep (2);  
Magic Number,System451.Communication.Dashboard.Net,SmartDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\SmartDataSource.cs,DoWork,The following statement contains a magic number: if (!VerifyPacket (buffer)) {  	if (InvalidPacketRecieved != null && !peeking) {  		//Create our e  		InvalidPacketRecievedEventArgs e = new InvalidPacketRecievedEventArgs (buffer' ddh.InvalidPacketAction == InvalidPacketActions.AlwaysContinue || ddh.InvalidPacketAction == InvalidPacketActions.Continue);  		InvalidPacketRecieved (this' e);  		if ((int)ddh.InvalidPacketAction < 3)//1-4  		 {  			if (!e.ContinueAnyway)  				break;  		}  		else if (ddh.InvalidPacketAction == InvalidPacketActions.AlwaysIgnore)  			break;  	}  }  
Magic Number,System451.Communication.Dashboard.Net,SmartDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\SmartDataSource.cs,DoWork,The following statement contains a magic number: if (InvalidPacketRecieved != null && !peeking) {  	//Create our e  	InvalidPacketRecievedEventArgs e = new InvalidPacketRecievedEventArgs (buffer' ddh.InvalidPacketAction == InvalidPacketActions.AlwaysContinue || ddh.InvalidPacketAction == InvalidPacketActions.Continue);  	InvalidPacketRecieved (this' e);  	if ((int)ddh.InvalidPacketAction < 3)//1-4  	 {  		if (!e.ContinueAnyway)  			break;  	}  	else if (ddh.InvalidPacketAction == InvalidPacketActions.AlwaysIgnore)  		break;  }  
Magic Number,System451.Communication.Dashboard.Net,SmartDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\SmartDataSource.cs,DoWork,The following statement contains a magic number: if ((int)ddh.InvalidPacketAction < 3)//1-4   {  	if (!e.ContinueAnyway)  		break;  }  else if (ddh.InvalidPacketAction == InvalidPacketActions.AlwaysIgnore)  	break;  
Magic Number,System451.Communication.Dashboard.Net,SmartDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\SmartDataSource.cs,DoWork,The following statement contains a magic number: Output.Seek (27' SeekOrigin.Begin);  
Magic Number,System451.Communication.Dashboard.Net,SmartDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\SmartDataSource.cs,DoWork,The following statement contains a magic number: while (totallength > (Output.Position - 27)) {  	byte b = binladen.ReadByte ();  	switch (b) {  	case 0://Announce  	 {  		int id = binladen.ReadByte ();  		SmartDataTypes type = (SmartDataTypes)binladen.ReadByte ();  		int len = binladen.ReadUInt16 ();  		byte[] name = new byte[len];  		binladen.Read (name' 0' len);  		if (peeking) {  			dp.Invoke (cb' Encoding.UTF8.GetString (name));  			nametable [id] = new SmartInfo {  				Name = Encoding.UTF8.GetString (name)'  				Type = type  			};  		}  		else {  			nametable [id] = new SmartInfo {  				Name = Encoding.UTF8.GetString (name)'  				Type = type  			};  		}  		break;  	}  	case 1://Update  	 {  		int id = binladen.ReadByte ();  		if (nametable.ContainsKey (id)) {  			var info = nametable [id];  			string value = info.Parse (binladen);  			kys [info.Name] = new ZomBDataObject (value' info.ZomBTypeHint);  		}  		else {  			b = binladen.ReadByte ();  			//get length  			binladen.Read (new byte[b]' 0' b);  			//skip it  		}  		break;  	}  	case 2://GUI Announce' not impl  	 {  		System.Windows.Forms.MessageBox.Show ("Dashboard selection via Protocol has not been implemented in ZomB' try WPF tabs instead");  		break;  	}  	default:  		throw new Exception ("Bin (" + b + ") not a 1 or zero' exiting");  	}  }  
Magic Number,System451.Communication.Dashboard.Net,SmartDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\SmartDataSource.cs,DoWork,The following statement contains a magic number: while (totallength > (Output.Position - 27)) {  	byte b = binladen.ReadByte ();  	switch (b) {  	case 0://Announce  	 {  		int id = binladen.ReadByte ();  		SmartDataTypes type = (SmartDataTypes)binladen.ReadByte ();  		int len = binladen.ReadUInt16 ();  		byte[] name = new byte[len];  		binladen.Read (name' 0' len);  		if (peeking) {  			dp.Invoke (cb' Encoding.UTF8.GetString (name));  			nametable [id] = new SmartInfo {  				Name = Encoding.UTF8.GetString (name)'  				Type = type  			};  		}  		else {  			nametable [id] = new SmartInfo {  				Name = Encoding.UTF8.GetString (name)'  				Type = type  			};  		}  		break;  	}  	case 1://Update  	 {  		int id = binladen.ReadByte ();  		if (nametable.ContainsKey (id)) {  			var info = nametable [id];  			string value = info.Parse (binladen);  			kys [info.Name] = new ZomBDataObject (value' info.ZomBTypeHint);  		}  		else {  			b = binladen.ReadByte ();  			//get length  			binladen.Read (new byte[b]' 0' b);  			//skip it  		}  		break;  	}  	case 2://GUI Announce' not impl  	 {  		System.Windows.Forms.MessageBox.Show ("Dashboard selection via Protocol has not been implemented in ZomB' try WPF tabs instead");  		break;  	}  	default:  		throw new Exception ("Bin (" + b + ") not a 1 or zero' exiting");  	}  }  
Magic Number,System451.Communication.Dashboard.Net,SmartDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\SmartDataSource.cs,DoWork,The following statement contains a magic number: switch (b) {  case 0://Announce   {  	int id = binladen.ReadByte ();  	SmartDataTypes type = (SmartDataTypes)binladen.ReadByte ();  	int len = binladen.ReadUInt16 ();  	byte[] name = new byte[len];  	binladen.Read (name' 0' len);  	if (peeking) {  		dp.Invoke (cb' Encoding.UTF8.GetString (name));  		nametable [id] = new SmartInfo {  			Name = Encoding.UTF8.GetString (name)'  			Type = type  		};  	}  	else {  		nametable [id] = new SmartInfo {  			Name = Encoding.UTF8.GetString (name)'  			Type = type  		};  	}  	break;  }  case 1://Update   {  	int id = binladen.ReadByte ();  	if (nametable.ContainsKey (id)) {  		var info = nametable [id];  		string value = info.Parse (binladen);  		kys [info.Name] = new ZomBDataObject (value' info.ZomBTypeHint);  	}  	else {  		b = binladen.ReadByte ();  		//get length  		binladen.Read (new byte[b]' 0' b);  		//skip it  	}  	break;  }  case 2://GUI Announce' not impl   {  	System.Windows.Forms.MessageBox.Show ("Dashboard selection via Protocol has not been implemented in ZomB' try WPF tabs instead");  	break;  }  default:  	throw new Exception ("Bin (" + b + ") not a 1 or zero' exiting");  }  
Magic Number,System451.Communication.Dashboard.Net,SmartDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\SmartDataSource.cs,DoWork,The following statement contains a magic number: if (nume > 10) {  	isrunning = false;  	DoError (new Exception ("10 consecutive errors were encountered' stopping Smart"));  	isrunning = false;  	try {  		cRIOConnection.Close ();  	}  	catch {  	}  	return;  }  
Magic Number,System451.Communication.Dashboard.Net,SmartDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\SmartDataSource.cs,ParseDSBytes,The following statement contains a magic number: ret.PacketNumber += (ushort)(buffer [1] << 8);  
Magic Number,System451.Communication.Dashboard.Net,SmartDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\SmartDataSource.cs,ParseDSBytes,The following statement contains a magic number: ret.DigitalIn = new DIOBitField (buffer [2]);  
Magic Number,System451.Communication.Dashboard.Net,SmartDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\SmartDataSource.cs,ParseDSBytes,The following statement contains a magic number: ret.DigitalOut = new DIOBitField (buffer [3]);  
Magic Number,System451.Communication.Dashboard.Net,SmartDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\SmartDataSource.cs,ParseDSBytes,The following statement contains a magic number: ret.Battery = float.Parse (buffer [4].ToString ("x") + "." + buffer [5].ToString ("x"));  
Magic Number,System451.Communication.Dashboard.Net,SmartDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\SmartDataSource.cs,ParseDSBytes,The following statement contains a magic number: ret.Battery = float.Parse (buffer [4].ToString ("x") + "." + buffer [5].ToString ("x"));  
Magic Number,System451.Communication.Dashboard.Net,SmartDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\SmartDataSource.cs,ParseDSBytes,The following statement contains a magic number: ret.Status = new StatusBitField (buffer [6]);  
Magic Number,System451.Communication.Dashboard.Net,SmartDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\SmartDataSource.cs,ParseDSBytes,The following statement contains a magic number: ret.Error = new ErrorBitField (buffer [7]);  
Magic Number,System451.Communication.Dashboard.Net,SmartDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\SmartDataSource.cs,ParseDSBytes,The following statement contains a magic number: ret.Team = (int)(buffer [8] * 100) + (int)(buffer [9]);  
Magic Number,System451.Communication.Dashboard.Net,SmartDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\SmartDataSource.cs,ParseDSBytes,The following statement contains a magic number: ret.Team = (int)(buffer [8] * 100) + (int)(buffer [9]);  
Magic Number,System451.Communication.Dashboard.Net,SmartDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\SmartDataSource.cs,ParseDSBytes,The following statement contains a magic number: ret.Team = (int)(buffer [8] * 100) + (int)(buffer [9]);  
Magic Number,System451.Communication.Dashboard.Net,SmartDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\SmartDataSource.cs,VerifyPacket,The following statement contains a magic number: if (data.Length != 1018)  	return false;  
Magic Number,System451.Communication.Dashboard.Net,SmartDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\SmartDataSource.cs,VerifyPacket,The following statement contains a magic number: dataCrc = BitConverter.ToUInt32 (data' data.Length - 4);  
Magic Number,System451.Communication.Dashboard.Net,SmartDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\SmartDataSource.cs,VerifyPacket,The following statement contains a magic number: Buffer.BlockCopy (data' 0' crcData' 0' data.Length - 4);  
Magic Number,System451.Communication.Dashboard.Net,SmartDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\SmartDataSource.cs,GetZomBUrlInfo,The following statement contains a magic number: return new ZomBUrlInfo {  	DefaultPort = 1165  };  
Magic Number,System451.Communication.Dashboard.Net,TCPDataSender,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\TCPDataSender.cs,TCPDataSender,The following statement contains a magic number: IPAddress = IPAddress.Parse ("10." + ((int)(team / 100)) + "." + ((int)(team % 100)) + ".2");  
Magic Number,System451.Communication.Dashboard.Net,TCPDataSender,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\TCPDataSender.cs,TCPDataSender,The following statement contains a magic number: IPAddress = IPAddress.Parse ("10." + ((int)(team / 100)) + "." + ((int)(team % 100)) + ".2");  
Magic Number,System451.Communication.Dashboard.Net,TCPDataSender,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\TCPDataSender.cs,TCPDataSender,The following statement contains a magic number: IPAddress = IPAddress.Parse ("10." + ((int)(team / 100)) + "." + ((int)(team % 100)) + ".2");  
Magic Number,System451.Communication.Dashboard.Net,TCPDataSender,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\TCPDataSender.cs,TCPDataSender,The following statement contains a magic number: IPAddress = IPAddress.Parse ("10." + ((int)(team / 100)) + "." + ((int)(team % 100)) + ".2");  
Magic Number,System451.Communication.Dashboard.Net,TCPDataSender,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\TCPDataSender.cs,Send,The following statement contains a magic number: if (isrunning && tcpc != null) {  	if (name.Length > 255)  		throw new ArgumentException ("Control name is too long"' "name");  	if (value.Length > 255)  		//TODO: longvalues  		throw new ArgumentException ("Value is too long"' "value");  	tcpc.GetStream ().WriteByte (Convert.ToByte (name.Length));  	tcpc.GetStream ().WriteByte (Convert.ToByte (value.Length));  	byte[] buff = ASCIIEncoding.ASCII.GetBytes (name);  	tcpc.GetStream ().Write (buff' 0' buff.Length);  	buff = ASCIIEncoding.ASCII.GetBytes (value);  	tcpc.GetStream ().Write (buff' 0' buff.Length);  	tcpc.GetStream ().WriteByte (0x00);  }  else  	throw new InvalidOperationException ("You need to start the sender before sending data");  
Magic Number,System451.Communication.Dashboard.Net,TCPDataSender,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\TCPDataSender.cs,Send,The following statement contains a magic number: if (isrunning && tcpc != null) {  	if (name.Length > 255)  		throw new ArgumentException ("Control name is too long"' "name");  	if (value.Length > 255)  		//TODO: longvalues  		throw new ArgumentException ("Value is too long"' "value");  	tcpc.GetStream ().WriteByte (Convert.ToByte (name.Length));  	tcpc.GetStream ().WriteByte (Convert.ToByte (value.Length));  	byte[] buff = ASCIIEncoding.ASCII.GetBytes (name);  	tcpc.GetStream ().Write (buff' 0' buff.Length);  	buff = ASCIIEncoding.ASCII.GetBytes (value);  	tcpc.GetStream ().Write (buff' 0' buff.Length);  	tcpc.GetStream ().WriteByte (0x00);  }  else  	throw new InvalidOperationException ("You need to start the sender before sending data");  
Magic Number,System451.Communication.Dashboard.Net,TCPDataSender,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\TCPDataSender.cs,Send,The following statement contains a magic number: if (name.Length > 255)  	throw new ArgumentException ("Control name is too long"' "name");  
Magic Number,System451.Communication.Dashboard.Net,TCPDataSender,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\TCPDataSender.cs,Send,The following statement contains a magic number: if (value.Length > 255)  	//TODO: longvalues  	throw new ArgumentException ("Value is too long"' "value");  
Magic Number,System451.Communication.Dashboard.Net,TCPDataSender,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\TCPDataSender.cs,GetZomBUrlInfo,The following statement contains a magic number: return new ZomBUrlInfo {  	DefaultPort = 9067  };  
Magic Number,System451.Communication.Dashboard.Net,TCPProxy,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\TCPProxy.cs,Start,The following statement contains a magic number: localsoc.Listen (10);  
Magic Number,System451.Communication.Dashboard.Net,DataPlayerSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DataPlayerSource.cs,worker,The following statement contains a magic number: while (Running) {  	try {  		c = (char)redbit.ReadByte ();  		switch (c) {  		case 'T':  			iv = (((int)redbit.ReadByte ()) << 8) + redbit.ReadByte ();  			while (Running && iv > 1)//takes some time to read the next one  			 {  				Thread.Sleep (2);  				iv -= 2;  			}  			break;  		case 'S':  			sts = new FRCDSStatus ();  			sts.Status = new StatusBitField (redbit.ReadByte ());  			sts.Error = new ErrorBitField (redbit.ReadByte ());  			sts.DigitalIn = new DIOBitField (redbit.ReadByte ());  			sts.DigitalOut = new DIOBitField (redbit.ReadByte ());  			sts.PacketNumber = (ushort)((((int)redbit.ReadByte ()) << 8) + redbit.ReadByte ());  			sts.Battery = redbit.ReadByte () + (((int)redbit.ReadByte ()) / 100);  			if (NewStatusRecieved != null)  				NewStatusRecieved (this' new NewStatusRecievedEventArgs (sts));  			break;  		case 'D':  			iv = (((int)redbit.ReadByte ()) << 8) + redbit.ReadByte ();  			byte[] buffer = new byte[iv];  			us = 0;  			us = (ushort)redbit.Read (buffer' 0' iv);  			while (us != iv) {  				us += (ushort)redbit.Read (buffer' us' iv - us);  			}  			vls = SplitParams (UTF8Encoding.UTF8.GetString (buffer));  			if (DataRecieved != null)  				DataRecieved (this' new EventArgs ());  			if (NewDataRecieved != null)  				NewDataRecieved (this' new NewDataRecievedEventArgs (vls));  			break;  		case 'Q':  			return;  		default:  			if (OnError != null)  				OnError (this' new ErrorEventArgs (new Exception ("missed command statements")));  			break;  		}  	}  	catch (Exception ex) {  		if (OnError != null)  			OnError (this' new ErrorEventArgs (ex));  	}  }  
Magic Number,System451.Communication.Dashboard.Net,DataPlayerSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DataPlayerSource.cs,worker,The following statement contains a magic number: while (Running) {  	try {  		c = (char)redbit.ReadByte ();  		switch (c) {  		case 'T':  			iv = (((int)redbit.ReadByte ()) << 8) + redbit.ReadByte ();  			while (Running && iv > 1)//takes some time to read the next one  			 {  				Thread.Sleep (2);  				iv -= 2;  			}  			break;  		case 'S':  			sts = new FRCDSStatus ();  			sts.Status = new StatusBitField (redbit.ReadByte ());  			sts.Error = new ErrorBitField (redbit.ReadByte ());  			sts.DigitalIn = new DIOBitField (redbit.ReadByte ());  			sts.DigitalOut = new DIOBitField (redbit.ReadByte ());  			sts.PacketNumber = (ushort)((((int)redbit.ReadByte ()) << 8) + redbit.ReadByte ());  			sts.Battery = redbit.ReadByte () + (((int)redbit.ReadByte ()) / 100);  			if (NewStatusRecieved != null)  				NewStatusRecieved (this' new NewStatusRecievedEventArgs (sts));  			break;  		case 'D':  			iv = (((int)redbit.ReadByte ()) << 8) + redbit.ReadByte ();  			byte[] buffer = new byte[iv];  			us = 0;  			us = (ushort)redbit.Read (buffer' 0' iv);  			while (us != iv) {  				us += (ushort)redbit.Read (buffer' us' iv - us);  			}  			vls = SplitParams (UTF8Encoding.UTF8.GetString (buffer));  			if (DataRecieved != null)  				DataRecieved (this' new EventArgs ());  			if (NewDataRecieved != null)  				NewDataRecieved (this' new NewDataRecievedEventArgs (vls));  			break;  		case 'Q':  			return;  		default:  			if (OnError != null)  				OnError (this' new ErrorEventArgs (new Exception ("missed command statements")));  			break;  		}  	}  	catch (Exception ex) {  		if (OnError != null)  			OnError (this' new ErrorEventArgs (ex));  	}  }  
Magic Number,System451.Communication.Dashboard.Net,DataPlayerSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DataPlayerSource.cs,worker,The following statement contains a magic number: while (Running) {  	try {  		c = (char)redbit.ReadByte ();  		switch (c) {  		case 'T':  			iv = (((int)redbit.ReadByte ()) << 8) + redbit.ReadByte ();  			while (Running && iv > 1)//takes some time to read the next one  			 {  				Thread.Sleep (2);  				iv -= 2;  			}  			break;  		case 'S':  			sts = new FRCDSStatus ();  			sts.Status = new StatusBitField (redbit.ReadByte ());  			sts.Error = new ErrorBitField (redbit.ReadByte ());  			sts.DigitalIn = new DIOBitField (redbit.ReadByte ());  			sts.DigitalOut = new DIOBitField (redbit.ReadByte ());  			sts.PacketNumber = (ushort)((((int)redbit.ReadByte ()) << 8) + redbit.ReadByte ());  			sts.Battery = redbit.ReadByte () + (((int)redbit.ReadByte ()) / 100);  			if (NewStatusRecieved != null)  				NewStatusRecieved (this' new NewStatusRecievedEventArgs (sts));  			break;  		case 'D':  			iv = (((int)redbit.ReadByte ()) << 8) + redbit.ReadByte ();  			byte[] buffer = new byte[iv];  			us = 0;  			us = (ushort)redbit.Read (buffer' 0' iv);  			while (us != iv) {  				us += (ushort)redbit.Read (buffer' us' iv - us);  			}  			vls = SplitParams (UTF8Encoding.UTF8.GetString (buffer));  			if (DataRecieved != null)  				DataRecieved (this' new EventArgs ());  			if (NewDataRecieved != null)  				NewDataRecieved (this' new NewDataRecievedEventArgs (vls));  			break;  		case 'Q':  			return;  		default:  			if (OnError != null)  				OnError (this' new ErrorEventArgs (new Exception ("missed command statements")));  			break;  		}  	}  	catch (Exception ex) {  		if (OnError != null)  			OnError (this' new ErrorEventArgs (ex));  	}  }  
Magic Number,System451.Communication.Dashboard.Net,DataPlayerSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DataPlayerSource.cs,worker,The following statement contains a magic number: while (Running) {  	try {  		c = (char)redbit.ReadByte ();  		switch (c) {  		case 'T':  			iv = (((int)redbit.ReadByte ()) << 8) + redbit.ReadByte ();  			while (Running && iv > 1)//takes some time to read the next one  			 {  				Thread.Sleep (2);  				iv -= 2;  			}  			break;  		case 'S':  			sts = new FRCDSStatus ();  			sts.Status = new StatusBitField (redbit.ReadByte ());  			sts.Error = new ErrorBitField (redbit.ReadByte ());  			sts.DigitalIn = new DIOBitField (redbit.ReadByte ());  			sts.DigitalOut = new DIOBitField (redbit.ReadByte ());  			sts.PacketNumber = (ushort)((((int)redbit.ReadByte ()) << 8) + redbit.ReadByte ());  			sts.Battery = redbit.ReadByte () + (((int)redbit.ReadByte ()) / 100);  			if (NewStatusRecieved != null)  				NewStatusRecieved (this' new NewStatusRecievedEventArgs (sts));  			break;  		case 'D':  			iv = (((int)redbit.ReadByte ()) << 8) + redbit.ReadByte ();  			byte[] buffer = new byte[iv];  			us = 0;  			us = (ushort)redbit.Read (buffer' 0' iv);  			while (us != iv) {  				us += (ushort)redbit.Read (buffer' us' iv - us);  			}  			vls = SplitParams (UTF8Encoding.UTF8.GetString (buffer));  			if (DataRecieved != null)  				DataRecieved (this' new EventArgs ());  			if (NewDataRecieved != null)  				NewDataRecieved (this' new NewDataRecievedEventArgs (vls));  			break;  		case 'Q':  			return;  		default:  			if (OnError != null)  				OnError (this' new ErrorEventArgs (new Exception ("missed command statements")));  			break;  		}  	}  	catch (Exception ex) {  		if (OnError != null)  			OnError (this' new ErrorEventArgs (ex));  	}  }  
Magic Number,System451.Communication.Dashboard.Net,DataPlayerSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DataPlayerSource.cs,worker,The following statement contains a magic number: while (Running) {  	try {  		c = (char)redbit.ReadByte ();  		switch (c) {  		case 'T':  			iv = (((int)redbit.ReadByte ()) << 8) + redbit.ReadByte ();  			while (Running && iv > 1)//takes some time to read the next one  			 {  				Thread.Sleep (2);  				iv -= 2;  			}  			break;  		case 'S':  			sts = new FRCDSStatus ();  			sts.Status = new StatusBitField (redbit.ReadByte ());  			sts.Error = new ErrorBitField (redbit.ReadByte ());  			sts.DigitalIn = new DIOBitField (redbit.ReadByte ());  			sts.DigitalOut = new DIOBitField (redbit.ReadByte ());  			sts.PacketNumber = (ushort)((((int)redbit.ReadByte ()) << 8) + redbit.ReadByte ());  			sts.Battery = redbit.ReadByte () + (((int)redbit.ReadByte ()) / 100);  			if (NewStatusRecieved != null)  				NewStatusRecieved (this' new NewStatusRecievedEventArgs (sts));  			break;  		case 'D':  			iv = (((int)redbit.ReadByte ()) << 8) + redbit.ReadByte ();  			byte[] buffer = new byte[iv];  			us = 0;  			us = (ushort)redbit.Read (buffer' 0' iv);  			while (us != iv) {  				us += (ushort)redbit.Read (buffer' us' iv - us);  			}  			vls = SplitParams (UTF8Encoding.UTF8.GetString (buffer));  			if (DataRecieved != null)  				DataRecieved (this' new EventArgs ());  			if (NewDataRecieved != null)  				NewDataRecieved (this' new NewDataRecievedEventArgs (vls));  			break;  		case 'Q':  			return;  		default:  			if (OnError != null)  				OnError (this' new ErrorEventArgs (new Exception ("missed command statements")));  			break;  		}  	}  	catch (Exception ex) {  		if (OnError != null)  			OnError (this' new ErrorEventArgs (ex));  	}  }  
Magic Number,System451.Communication.Dashboard.Net,DataPlayerSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DataPlayerSource.cs,worker,The following statement contains a magic number: while (Running) {  	try {  		c = (char)redbit.ReadByte ();  		switch (c) {  		case 'T':  			iv = (((int)redbit.ReadByte ()) << 8) + redbit.ReadByte ();  			while (Running && iv > 1)//takes some time to read the next one  			 {  				Thread.Sleep (2);  				iv -= 2;  			}  			break;  		case 'S':  			sts = new FRCDSStatus ();  			sts.Status = new StatusBitField (redbit.ReadByte ());  			sts.Error = new ErrorBitField (redbit.ReadByte ());  			sts.DigitalIn = new DIOBitField (redbit.ReadByte ());  			sts.DigitalOut = new DIOBitField (redbit.ReadByte ());  			sts.PacketNumber = (ushort)((((int)redbit.ReadByte ()) << 8) + redbit.ReadByte ());  			sts.Battery = redbit.ReadByte () + (((int)redbit.ReadByte ()) / 100);  			if (NewStatusRecieved != null)  				NewStatusRecieved (this' new NewStatusRecievedEventArgs (sts));  			break;  		case 'D':  			iv = (((int)redbit.ReadByte ()) << 8) + redbit.ReadByte ();  			byte[] buffer = new byte[iv];  			us = 0;  			us = (ushort)redbit.Read (buffer' 0' iv);  			while (us != iv) {  				us += (ushort)redbit.Read (buffer' us' iv - us);  			}  			vls = SplitParams (UTF8Encoding.UTF8.GetString (buffer));  			if (DataRecieved != null)  				DataRecieved (this' new EventArgs ());  			if (NewDataRecieved != null)  				NewDataRecieved (this' new NewDataRecievedEventArgs (vls));  			break;  		case 'Q':  			return;  		default:  			if (OnError != null)  				OnError (this' new ErrorEventArgs (new Exception ("missed command statements")));  			break;  		}  	}  	catch (Exception ex) {  		if (OnError != null)  			OnError (this' new ErrorEventArgs (ex));  	}  }  
Magic Number,System451.Communication.Dashboard.Net,DataPlayerSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DataPlayerSource.cs,worker,The following statement contains a magic number: try {  	c = (char)redbit.ReadByte ();  	switch (c) {  	case 'T':  		iv = (((int)redbit.ReadByte ()) << 8) + redbit.ReadByte ();  		while (Running && iv > 1)//takes some time to read the next one  		 {  			Thread.Sleep (2);  			iv -= 2;  		}  		break;  	case 'S':  		sts = new FRCDSStatus ();  		sts.Status = new StatusBitField (redbit.ReadByte ());  		sts.Error = new ErrorBitField (redbit.ReadByte ());  		sts.DigitalIn = new DIOBitField (redbit.ReadByte ());  		sts.DigitalOut = new DIOBitField (redbit.ReadByte ());  		sts.PacketNumber = (ushort)((((int)redbit.ReadByte ()) << 8) + redbit.ReadByte ());  		sts.Battery = redbit.ReadByte () + (((int)redbit.ReadByte ()) / 100);  		if (NewStatusRecieved != null)  			NewStatusRecieved (this' new NewStatusRecievedEventArgs (sts));  		break;  	case 'D':  		iv = (((int)redbit.ReadByte ()) << 8) + redbit.ReadByte ();  		byte[] buffer = new byte[iv];  		us = 0;  		us = (ushort)redbit.Read (buffer' 0' iv);  		while (us != iv) {  			us += (ushort)redbit.Read (buffer' us' iv - us);  		}  		vls = SplitParams (UTF8Encoding.UTF8.GetString (buffer));  		if (DataRecieved != null)  			DataRecieved (this' new EventArgs ());  		if (NewDataRecieved != null)  			NewDataRecieved (this' new NewDataRecievedEventArgs (vls));  		break;  	case 'Q':  		return;  	default:  		if (OnError != null)  			OnError (this' new ErrorEventArgs (new Exception ("missed command statements")));  		break;  	}  }  catch (Exception ex) {  	if (OnError != null)  		OnError (this' new ErrorEventArgs (ex));  }  
Magic Number,System451.Communication.Dashboard.Net,DataPlayerSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DataPlayerSource.cs,worker,The following statement contains a magic number: try {  	c = (char)redbit.ReadByte ();  	switch (c) {  	case 'T':  		iv = (((int)redbit.ReadByte ()) << 8) + redbit.ReadByte ();  		while (Running && iv > 1)//takes some time to read the next one  		 {  			Thread.Sleep (2);  			iv -= 2;  		}  		break;  	case 'S':  		sts = new FRCDSStatus ();  		sts.Status = new StatusBitField (redbit.ReadByte ());  		sts.Error = new ErrorBitField (redbit.ReadByte ());  		sts.DigitalIn = new DIOBitField (redbit.ReadByte ());  		sts.DigitalOut = new DIOBitField (redbit.ReadByte ());  		sts.PacketNumber = (ushort)((((int)redbit.ReadByte ()) << 8) + redbit.ReadByte ());  		sts.Battery = redbit.ReadByte () + (((int)redbit.ReadByte ()) / 100);  		if (NewStatusRecieved != null)  			NewStatusRecieved (this' new NewStatusRecievedEventArgs (sts));  		break;  	case 'D':  		iv = (((int)redbit.ReadByte ()) << 8) + redbit.ReadByte ();  		byte[] buffer = new byte[iv];  		us = 0;  		us = (ushort)redbit.Read (buffer' 0' iv);  		while (us != iv) {  			us += (ushort)redbit.Read (buffer' us' iv - us);  		}  		vls = SplitParams (UTF8Encoding.UTF8.GetString (buffer));  		if (DataRecieved != null)  			DataRecieved (this' new EventArgs ());  		if (NewDataRecieved != null)  			NewDataRecieved (this' new NewDataRecievedEventArgs (vls));  		break;  	case 'Q':  		return;  	default:  		if (OnError != null)  			OnError (this' new ErrorEventArgs (new Exception ("missed command statements")));  		break;  	}  }  catch (Exception ex) {  	if (OnError != null)  		OnError (this' new ErrorEventArgs (ex));  }  
Magic Number,System451.Communication.Dashboard.Net,DataPlayerSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DataPlayerSource.cs,worker,The following statement contains a magic number: try {  	c = (char)redbit.ReadByte ();  	switch (c) {  	case 'T':  		iv = (((int)redbit.ReadByte ()) << 8) + redbit.ReadByte ();  		while (Running && iv > 1)//takes some time to read the next one  		 {  			Thread.Sleep (2);  			iv -= 2;  		}  		break;  	case 'S':  		sts = new FRCDSStatus ();  		sts.Status = new StatusBitField (redbit.ReadByte ());  		sts.Error = new ErrorBitField (redbit.ReadByte ());  		sts.DigitalIn = new DIOBitField (redbit.ReadByte ());  		sts.DigitalOut = new DIOBitField (redbit.ReadByte ());  		sts.PacketNumber = (ushort)((((int)redbit.ReadByte ()) << 8) + redbit.ReadByte ());  		sts.Battery = redbit.ReadByte () + (((int)redbit.ReadByte ()) / 100);  		if (NewStatusRecieved != null)  			NewStatusRecieved (this' new NewStatusRecievedEventArgs (sts));  		break;  	case 'D':  		iv = (((int)redbit.ReadByte ()) << 8) + redbit.ReadByte ();  		byte[] buffer = new byte[iv];  		us = 0;  		us = (ushort)redbit.Read (buffer' 0' iv);  		while (us != iv) {  			us += (ushort)redbit.Read (buffer' us' iv - us);  		}  		vls = SplitParams (UTF8Encoding.UTF8.GetString (buffer));  		if (DataRecieved != null)  			DataRecieved (this' new EventArgs ());  		if (NewDataRecieved != null)  			NewDataRecieved (this' new NewDataRecievedEventArgs (vls));  		break;  	case 'Q':  		return;  	default:  		if (OnError != null)  			OnError (this' new ErrorEventArgs (new Exception ("missed command statements")));  		break;  	}  }  catch (Exception ex) {  	if (OnError != null)  		OnError (this' new ErrorEventArgs (ex));  }  
Magic Number,System451.Communication.Dashboard.Net,DataPlayerSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DataPlayerSource.cs,worker,The following statement contains a magic number: try {  	c = (char)redbit.ReadByte ();  	switch (c) {  	case 'T':  		iv = (((int)redbit.ReadByte ()) << 8) + redbit.ReadByte ();  		while (Running && iv > 1)//takes some time to read the next one  		 {  			Thread.Sleep (2);  			iv -= 2;  		}  		break;  	case 'S':  		sts = new FRCDSStatus ();  		sts.Status = new StatusBitField (redbit.ReadByte ());  		sts.Error = new ErrorBitField (redbit.ReadByte ());  		sts.DigitalIn = new DIOBitField (redbit.ReadByte ());  		sts.DigitalOut = new DIOBitField (redbit.ReadByte ());  		sts.PacketNumber = (ushort)((((int)redbit.ReadByte ()) << 8) + redbit.ReadByte ());  		sts.Battery = redbit.ReadByte () + (((int)redbit.ReadByte ()) / 100);  		if (NewStatusRecieved != null)  			NewStatusRecieved (this' new NewStatusRecievedEventArgs (sts));  		break;  	case 'D':  		iv = (((int)redbit.ReadByte ()) << 8) + redbit.ReadByte ();  		byte[] buffer = new byte[iv];  		us = 0;  		us = (ushort)redbit.Read (buffer' 0' iv);  		while (us != iv) {  			us += (ushort)redbit.Read (buffer' us' iv - us);  		}  		vls = SplitParams (UTF8Encoding.UTF8.GetString (buffer));  		if (DataRecieved != null)  			DataRecieved (this' new EventArgs ());  		if (NewDataRecieved != null)  			NewDataRecieved (this' new NewDataRecievedEventArgs (vls));  		break;  	case 'Q':  		return;  	default:  		if (OnError != null)  			OnError (this' new ErrorEventArgs (new Exception ("missed command statements")));  		break;  	}  }  catch (Exception ex) {  	if (OnError != null)  		OnError (this' new ErrorEventArgs (ex));  }  
Magic Number,System451.Communication.Dashboard.Net,DataPlayerSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DataPlayerSource.cs,worker,The following statement contains a magic number: try {  	c = (char)redbit.ReadByte ();  	switch (c) {  	case 'T':  		iv = (((int)redbit.ReadByte ()) << 8) + redbit.ReadByte ();  		while (Running && iv > 1)//takes some time to read the next one  		 {  			Thread.Sleep (2);  			iv -= 2;  		}  		break;  	case 'S':  		sts = new FRCDSStatus ();  		sts.Status = new StatusBitField (redbit.ReadByte ());  		sts.Error = new ErrorBitField (redbit.ReadByte ());  		sts.DigitalIn = new DIOBitField (redbit.ReadByte ());  		sts.DigitalOut = new DIOBitField (redbit.ReadByte ());  		sts.PacketNumber = (ushort)((((int)redbit.ReadByte ()) << 8) + redbit.ReadByte ());  		sts.Battery = redbit.ReadByte () + (((int)redbit.ReadByte ()) / 100);  		if (NewStatusRecieved != null)  			NewStatusRecieved (this' new NewStatusRecievedEventArgs (sts));  		break;  	case 'D':  		iv = (((int)redbit.ReadByte ()) << 8) + redbit.ReadByte ();  		byte[] buffer = new byte[iv];  		us = 0;  		us = (ushort)redbit.Read (buffer' 0' iv);  		while (us != iv) {  			us += (ushort)redbit.Read (buffer' us' iv - us);  		}  		vls = SplitParams (UTF8Encoding.UTF8.GetString (buffer));  		if (DataRecieved != null)  			DataRecieved (this' new EventArgs ());  		if (NewDataRecieved != null)  			NewDataRecieved (this' new NewDataRecievedEventArgs (vls));  		break;  	case 'Q':  		return;  	default:  		if (OnError != null)  			OnError (this' new ErrorEventArgs (new Exception ("missed command statements")));  		break;  	}  }  catch (Exception ex) {  	if (OnError != null)  		OnError (this' new ErrorEventArgs (ex));  }  
Magic Number,System451.Communication.Dashboard.Net,DataPlayerSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DataPlayerSource.cs,worker,The following statement contains a magic number: try {  	c = (char)redbit.ReadByte ();  	switch (c) {  	case 'T':  		iv = (((int)redbit.ReadByte ()) << 8) + redbit.ReadByte ();  		while (Running && iv > 1)//takes some time to read the next one  		 {  			Thread.Sleep (2);  			iv -= 2;  		}  		break;  	case 'S':  		sts = new FRCDSStatus ();  		sts.Status = new StatusBitField (redbit.ReadByte ());  		sts.Error = new ErrorBitField (redbit.ReadByte ());  		sts.DigitalIn = new DIOBitField (redbit.ReadByte ());  		sts.DigitalOut = new DIOBitField (redbit.ReadByte ());  		sts.PacketNumber = (ushort)((((int)redbit.ReadByte ()) << 8) + redbit.ReadByte ());  		sts.Battery = redbit.ReadByte () + (((int)redbit.ReadByte ()) / 100);  		if (NewStatusRecieved != null)  			NewStatusRecieved (this' new NewStatusRecievedEventArgs (sts));  		break;  	case 'D':  		iv = (((int)redbit.ReadByte ()) << 8) + redbit.ReadByte ();  		byte[] buffer = new byte[iv];  		us = 0;  		us = (ushort)redbit.Read (buffer' 0' iv);  		while (us != iv) {  			us += (ushort)redbit.Read (buffer' us' iv - us);  		}  		vls = SplitParams (UTF8Encoding.UTF8.GetString (buffer));  		if (DataRecieved != null)  			DataRecieved (this' new EventArgs ());  		if (NewDataRecieved != null)  			NewDataRecieved (this' new NewDataRecievedEventArgs (vls));  		break;  	case 'Q':  		return;  	default:  		if (OnError != null)  			OnError (this' new ErrorEventArgs (new Exception ("missed command statements")));  		break;  	}  }  catch (Exception ex) {  	if (OnError != null)  		OnError (this' new ErrorEventArgs (ex));  }  
Magic Number,System451.Communication.Dashboard.Net,DataPlayerSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DataPlayerSource.cs,worker,The following statement contains a magic number: switch (c) {  case 'T':  	iv = (((int)redbit.ReadByte ()) << 8) + redbit.ReadByte ();  	while (Running && iv > 1)//takes some time to read the next one  	 {  		Thread.Sleep (2);  		iv -= 2;  	}  	break;  case 'S':  	sts = new FRCDSStatus ();  	sts.Status = new StatusBitField (redbit.ReadByte ());  	sts.Error = new ErrorBitField (redbit.ReadByte ());  	sts.DigitalIn = new DIOBitField (redbit.ReadByte ());  	sts.DigitalOut = new DIOBitField (redbit.ReadByte ());  	sts.PacketNumber = (ushort)((((int)redbit.ReadByte ()) << 8) + redbit.ReadByte ());  	sts.Battery = redbit.ReadByte () + (((int)redbit.ReadByte ()) / 100);  	if (NewStatusRecieved != null)  		NewStatusRecieved (this' new NewStatusRecievedEventArgs (sts));  	break;  case 'D':  	iv = (((int)redbit.ReadByte ()) << 8) + redbit.ReadByte ();  	byte[] buffer = new byte[iv];  	us = 0;  	us = (ushort)redbit.Read (buffer' 0' iv);  	while (us != iv) {  		us += (ushort)redbit.Read (buffer' us' iv - us);  	}  	vls = SplitParams (UTF8Encoding.UTF8.GetString (buffer));  	if (DataRecieved != null)  		DataRecieved (this' new EventArgs ());  	if (NewDataRecieved != null)  		NewDataRecieved (this' new NewDataRecievedEventArgs (vls));  	break;  case 'Q':  	return;  default:  	if (OnError != null)  		OnError (this' new ErrorEventArgs (new Exception ("missed command statements")));  	break;  }  
Magic Number,System451.Communication.Dashboard.Net,DataPlayerSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DataPlayerSource.cs,worker,The following statement contains a magic number: switch (c) {  case 'T':  	iv = (((int)redbit.ReadByte ()) << 8) + redbit.ReadByte ();  	while (Running && iv > 1)//takes some time to read the next one  	 {  		Thread.Sleep (2);  		iv -= 2;  	}  	break;  case 'S':  	sts = new FRCDSStatus ();  	sts.Status = new StatusBitField (redbit.ReadByte ());  	sts.Error = new ErrorBitField (redbit.ReadByte ());  	sts.DigitalIn = new DIOBitField (redbit.ReadByte ());  	sts.DigitalOut = new DIOBitField (redbit.ReadByte ());  	sts.PacketNumber = (ushort)((((int)redbit.ReadByte ()) << 8) + redbit.ReadByte ());  	sts.Battery = redbit.ReadByte () + (((int)redbit.ReadByte ()) / 100);  	if (NewStatusRecieved != null)  		NewStatusRecieved (this' new NewStatusRecievedEventArgs (sts));  	break;  case 'D':  	iv = (((int)redbit.ReadByte ()) << 8) + redbit.ReadByte ();  	byte[] buffer = new byte[iv];  	us = 0;  	us = (ushort)redbit.Read (buffer' 0' iv);  	while (us != iv) {  		us += (ushort)redbit.Read (buffer' us' iv - us);  	}  	vls = SplitParams (UTF8Encoding.UTF8.GetString (buffer));  	if (DataRecieved != null)  		DataRecieved (this' new EventArgs ());  	if (NewDataRecieved != null)  		NewDataRecieved (this' new NewDataRecievedEventArgs (vls));  	break;  case 'Q':  	return;  default:  	if (OnError != null)  		OnError (this' new ErrorEventArgs (new Exception ("missed command statements")));  	break;  }  
Magic Number,System451.Communication.Dashboard.Net,DataPlayerSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DataPlayerSource.cs,worker,The following statement contains a magic number: switch (c) {  case 'T':  	iv = (((int)redbit.ReadByte ()) << 8) + redbit.ReadByte ();  	while (Running && iv > 1)//takes some time to read the next one  	 {  		Thread.Sleep (2);  		iv -= 2;  	}  	break;  case 'S':  	sts = new FRCDSStatus ();  	sts.Status = new StatusBitField (redbit.ReadByte ());  	sts.Error = new ErrorBitField (redbit.ReadByte ());  	sts.DigitalIn = new DIOBitField (redbit.ReadByte ());  	sts.DigitalOut = new DIOBitField (redbit.ReadByte ());  	sts.PacketNumber = (ushort)((((int)redbit.ReadByte ()) << 8) + redbit.ReadByte ());  	sts.Battery = redbit.ReadByte () + (((int)redbit.ReadByte ()) / 100);  	if (NewStatusRecieved != null)  		NewStatusRecieved (this' new NewStatusRecievedEventArgs (sts));  	break;  case 'D':  	iv = (((int)redbit.ReadByte ()) << 8) + redbit.ReadByte ();  	byte[] buffer = new byte[iv];  	us = 0;  	us = (ushort)redbit.Read (buffer' 0' iv);  	while (us != iv) {  		us += (ushort)redbit.Read (buffer' us' iv - us);  	}  	vls = SplitParams (UTF8Encoding.UTF8.GetString (buffer));  	if (DataRecieved != null)  		DataRecieved (this' new EventArgs ());  	if (NewDataRecieved != null)  		NewDataRecieved (this' new NewDataRecievedEventArgs (vls));  	break;  case 'Q':  	return;  default:  	if (OnError != null)  		OnError (this' new ErrorEventArgs (new Exception ("missed command statements")));  	break;  }  
Magic Number,System451.Communication.Dashboard.Net,DataPlayerSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DataPlayerSource.cs,worker,The following statement contains a magic number: switch (c) {  case 'T':  	iv = (((int)redbit.ReadByte ()) << 8) + redbit.ReadByte ();  	while (Running && iv > 1)//takes some time to read the next one  	 {  		Thread.Sleep (2);  		iv -= 2;  	}  	break;  case 'S':  	sts = new FRCDSStatus ();  	sts.Status = new StatusBitField (redbit.ReadByte ());  	sts.Error = new ErrorBitField (redbit.ReadByte ());  	sts.DigitalIn = new DIOBitField (redbit.ReadByte ());  	sts.DigitalOut = new DIOBitField (redbit.ReadByte ());  	sts.PacketNumber = (ushort)((((int)redbit.ReadByte ()) << 8) + redbit.ReadByte ());  	sts.Battery = redbit.ReadByte () + (((int)redbit.ReadByte ()) / 100);  	if (NewStatusRecieved != null)  		NewStatusRecieved (this' new NewStatusRecievedEventArgs (sts));  	break;  case 'D':  	iv = (((int)redbit.ReadByte ()) << 8) + redbit.ReadByte ();  	byte[] buffer = new byte[iv];  	us = 0;  	us = (ushort)redbit.Read (buffer' 0' iv);  	while (us != iv) {  		us += (ushort)redbit.Read (buffer' us' iv - us);  	}  	vls = SplitParams (UTF8Encoding.UTF8.GetString (buffer));  	if (DataRecieved != null)  		DataRecieved (this' new EventArgs ());  	if (NewDataRecieved != null)  		NewDataRecieved (this' new NewDataRecievedEventArgs (vls));  	break;  case 'Q':  	return;  default:  	if (OnError != null)  		OnError (this' new ErrorEventArgs (new Exception ("missed command statements")));  	break;  }  
Magic Number,System451.Communication.Dashboard.Net,DataPlayerSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DataPlayerSource.cs,worker,The following statement contains a magic number: switch (c) {  case 'T':  	iv = (((int)redbit.ReadByte ()) << 8) + redbit.ReadByte ();  	while (Running && iv > 1)//takes some time to read the next one  	 {  		Thread.Sleep (2);  		iv -= 2;  	}  	break;  case 'S':  	sts = new FRCDSStatus ();  	sts.Status = new StatusBitField (redbit.ReadByte ());  	sts.Error = new ErrorBitField (redbit.ReadByte ());  	sts.DigitalIn = new DIOBitField (redbit.ReadByte ());  	sts.DigitalOut = new DIOBitField (redbit.ReadByte ());  	sts.PacketNumber = (ushort)((((int)redbit.ReadByte ()) << 8) + redbit.ReadByte ());  	sts.Battery = redbit.ReadByte () + (((int)redbit.ReadByte ()) / 100);  	if (NewStatusRecieved != null)  		NewStatusRecieved (this' new NewStatusRecievedEventArgs (sts));  	break;  case 'D':  	iv = (((int)redbit.ReadByte ()) << 8) + redbit.ReadByte ();  	byte[] buffer = new byte[iv];  	us = 0;  	us = (ushort)redbit.Read (buffer' 0' iv);  	while (us != iv) {  		us += (ushort)redbit.Read (buffer' us' iv - us);  	}  	vls = SplitParams (UTF8Encoding.UTF8.GetString (buffer));  	if (DataRecieved != null)  		DataRecieved (this' new EventArgs ());  	if (NewDataRecieved != null)  		NewDataRecieved (this' new NewDataRecievedEventArgs (vls));  	break;  case 'Q':  	return;  default:  	if (OnError != null)  		OnError (this' new ErrorEventArgs (new Exception ("missed command statements")));  	break;  }  
Magic Number,System451.Communication.Dashboard.Net,DataPlayerSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DataPlayerSource.cs,worker,The following statement contains a magic number: switch (c) {  case 'T':  	iv = (((int)redbit.ReadByte ()) << 8) + redbit.ReadByte ();  	while (Running && iv > 1)//takes some time to read the next one  	 {  		Thread.Sleep (2);  		iv -= 2;  	}  	break;  case 'S':  	sts = new FRCDSStatus ();  	sts.Status = new StatusBitField (redbit.ReadByte ());  	sts.Error = new ErrorBitField (redbit.ReadByte ());  	sts.DigitalIn = new DIOBitField (redbit.ReadByte ());  	sts.DigitalOut = new DIOBitField (redbit.ReadByte ());  	sts.PacketNumber = (ushort)((((int)redbit.ReadByte ()) << 8) + redbit.ReadByte ());  	sts.Battery = redbit.ReadByte () + (((int)redbit.ReadByte ()) / 100);  	if (NewStatusRecieved != null)  		NewStatusRecieved (this' new NewStatusRecievedEventArgs (sts));  	break;  case 'D':  	iv = (((int)redbit.ReadByte ()) << 8) + redbit.ReadByte ();  	byte[] buffer = new byte[iv];  	us = 0;  	us = (ushort)redbit.Read (buffer' 0' iv);  	while (us != iv) {  		us += (ushort)redbit.Read (buffer' us' iv - us);  	}  	vls = SplitParams (UTF8Encoding.UTF8.GetString (buffer));  	if (DataRecieved != null)  		DataRecieved (this' new EventArgs ());  	if (NewDataRecieved != null)  		NewDataRecieved (this' new NewDataRecievedEventArgs (vls));  	break;  case 'Q':  	return;  default:  	if (OnError != null)  		OnError (this' new ErrorEventArgs (new Exception ("missed command statements")));  	break;  }  
Magic Number,System451.Communication.Dashboard.Net,DataPlayerSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DataPlayerSource.cs,worker,The following statement contains a magic number: iv = (((int)redbit.ReadByte ()) << 8) + redbit.ReadByte ();  
Magic Number,System451.Communication.Dashboard.Net,DataPlayerSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DataPlayerSource.cs,worker,The following statement contains a magic number: while (Running && iv > 1)//takes some time to read the next one   {  	Thread.Sleep (2);  	iv -= 2;  }  
Magic Number,System451.Communication.Dashboard.Net,DataPlayerSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DataPlayerSource.cs,worker,The following statement contains a magic number: while (Running && iv > 1)//takes some time to read the next one   {  	Thread.Sleep (2);  	iv -= 2;  }  
Magic Number,System451.Communication.Dashboard.Net,DataPlayerSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DataPlayerSource.cs,worker,The following statement contains a magic number: Thread.Sleep (2);  
Magic Number,System451.Communication.Dashboard.Net,DataPlayerSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DataPlayerSource.cs,worker,The following statement contains a magic number: iv -= 2;  
Magic Number,System451.Communication.Dashboard.Net,DataPlayerSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DataPlayerSource.cs,worker,The following statement contains a magic number: sts.PacketNumber = (ushort)((((int)redbit.ReadByte ()) << 8) + redbit.ReadByte ());  
Magic Number,System451.Communication.Dashboard.Net,DataPlayerSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DataPlayerSource.cs,worker,The following statement contains a magic number: sts.Battery = redbit.ReadByte () + (((int)redbit.ReadByte ()) / 100);  
Magic Number,System451.Communication.Dashboard.Net,DataPlayerSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DataPlayerSource.cs,worker,The following statement contains a magic number: iv = (((int)redbit.ReadByte ()) << 8) + redbit.ReadByte ();  
Magic Number,System451.Communication.Dashboard.Net,DashboardPacketEmulator,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DashboardPacketEmulator.cs,dowork,The following statement contains a magic number: while (true) {  	Thread.Sleep (20);  	lock (pkts) {  		if (i >= Packets.Length)  			i = 0;  		uc.Send (Packets [i]' 1018' new IPEndPoint (IPAddress.Loopback' 1165));  		i++;  	}  }  
Magic Number,System451.Communication.Dashboard.Net,DashboardPacketEmulator,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DashboardPacketEmulator.cs,dowork,The following statement contains a magic number: while (true) {  	Thread.Sleep (20);  	lock (pkts) {  		if (i >= Packets.Length)  			i = 0;  		uc.Send (Packets [i]' 1018' new IPEndPoint (IPAddress.Loopback' 1165));  		i++;  	}  }  
Magic Number,System451.Communication.Dashboard.Net,DashboardPacketEmulator,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DashboardPacketEmulator.cs,dowork,The following statement contains a magic number: while (true) {  	Thread.Sleep (20);  	lock (pkts) {  		if (i >= Packets.Length)  			i = 0;  		uc.Send (Packets [i]' 1018' new IPEndPoint (IPAddress.Loopback' 1165));  		i++;  	}  }  
Magic Number,System451.Communication.Dashboard.Net,DashboardPacketEmulator,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DashboardPacketEmulator.cs,dowork,The following statement contains a magic number: Thread.Sleep (20);  
Magic Number,System451.Communication.Dashboard.Net,DashboardPacketEmulator,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DashboardPacketEmulator.cs,dowork,The following statement contains a magic number: lock (pkts) {  	if (i >= Packets.Length)  		i = 0;  	uc.Send (Packets [i]' 1018' new IPEndPoint (IPAddress.Loopback' 1165));  	i++;  }  
Magic Number,System451.Communication.Dashboard.Net,DashboardPacketEmulator,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DashboardPacketEmulator.cs,dowork,The following statement contains a magic number: lock (pkts) {  	if (i >= Packets.Length)  		i = 0;  	uc.Send (Packets [i]' 1018' new IPEndPoint (IPAddress.Loopback' 1165));  	i++;  }  
Magic Number,System451.Communication.Dashboard.Net,DashboardPacketEmulator,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DashboardPacketEmulator.cs,dowork,The following statement contains a magic number: uc.Send (Packets [i]' 1018' new IPEndPoint (IPAddress.Loopback' 1165));  
Magic Number,System451.Communication.Dashboard.Net,DashboardPacketEmulator,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DashboardPacketEmulator.cs,dowork,The following statement contains a magic number: uc.Send (Packets [i]' 1018' new IPEndPoint (IPAddress.Loopback' 1165));  
Magic Number,System451.Communication.Dashboard.Net,DashboardTCPEmulator,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DashboardPacketEmulator.cs,dowork,The following statement contains a magic number: listen = new TcpListener (new IPEndPoint (IPAddress.Loopback' 9066));  
Magic Number,System451.Communication.Dashboard.Net,DashboardTCPEmulator,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DashboardPacketEmulator.cs,dowork,The following statement contains a magic number: while (true) {  	try {  		var client = listen.AcceptTcpClient ();  		var stream = client.GetStream ();  		stream.Write (new byte[] {  			0x45'  			0x00  		}' 0' 2);  		while (client.Connected) {  			Thread.Sleep (20);  			lock (pkts) {  				if (i >= Packets.Length)  					i = 0;  				stream.Write (Packets [i]' 0' Packets [i].Length);  				i++;  			}  		}  	}  	catch {  	}  }  
Magic Number,System451.Communication.Dashboard.Net,DashboardTCPEmulator,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DashboardPacketEmulator.cs,dowork,The following statement contains a magic number: while (true) {  	try {  		var client = listen.AcceptTcpClient ();  		var stream = client.GetStream ();  		stream.Write (new byte[] {  			0x45'  			0x00  		}' 0' 2);  		while (client.Connected) {  			Thread.Sleep (20);  			lock (pkts) {  				if (i >= Packets.Length)  					i = 0;  				stream.Write (Packets [i]' 0' Packets [i].Length);  				i++;  			}  		}  	}  	catch {  	}  }  
Magic Number,System451.Communication.Dashboard.Net,DashboardTCPEmulator,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DashboardPacketEmulator.cs,dowork,The following statement contains a magic number: try {  	var client = listen.AcceptTcpClient ();  	var stream = client.GetStream ();  	stream.Write (new byte[] {  		0x45'  		0x00  	}' 0' 2);  	while (client.Connected) {  		Thread.Sleep (20);  		lock (pkts) {  			if (i >= Packets.Length)  				i = 0;  			stream.Write (Packets [i]' 0' Packets [i].Length);  			i++;  		}  	}  }  catch {  }  
Magic Number,System451.Communication.Dashboard.Net,DashboardTCPEmulator,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DashboardPacketEmulator.cs,dowork,The following statement contains a magic number: try {  	var client = listen.AcceptTcpClient ();  	var stream = client.GetStream ();  	stream.Write (new byte[] {  		0x45'  		0x00  	}' 0' 2);  	while (client.Connected) {  		Thread.Sleep (20);  		lock (pkts) {  			if (i >= Packets.Length)  				i = 0;  			stream.Write (Packets [i]' 0' Packets [i].Length);  			i++;  		}  	}  }  catch {  }  
Magic Number,System451.Communication.Dashboard.Net,DashboardTCPEmulator,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DashboardPacketEmulator.cs,dowork,The following statement contains a magic number: stream.Write (new byte[] {  	0x45'  	0x00  }' 0' 2);  
Magic Number,System451.Communication.Dashboard.Net,DashboardTCPEmulator,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DashboardPacketEmulator.cs,dowork,The following statement contains a magic number: while (client.Connected) {  	Thread.Sleep (20);  	lock (pkts) {  		if (i >= Packets.Length)  			i = 0;  		stream.Write (Packets [i]' 0' Packets [i].Length);  		i++;  	}  }  
Magic Number,System451.Communication.Dashboard.Net,DashboardTCPEmulator,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DashboardPacketEmulator.cs,dowork,The following statement contains a magic number: Thread.Sleep (20);  
Magic Number,System451.Communication.Dashboard.Net,ZomBUrl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\IDashboardDataSource.cs,ZomBUrl,The following statement contains a magic number: SourceName = res.Groups [4].Value;  
Magic Number,System451.Communication.Dashboard.Net,ZomBUrl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\IDashboardDataSource.cs,ZomBUrl,The following statement contains a magic number: try {  	Path = res.Groups [5].Value;  }  catch {  }  
Magic Number,System451.Communication.Dashboard.Net,ZomBUrl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\IDashboardDataSource.cs,ZomBUrl,The following statement contains a magic number: Path = res.Groups [5].Value;  
Magic Number,System451.Communication.Dashboard.Net,ZomBUrl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\IDashboardDataSource.cs,ZomBUrl,The following statement contains a magic number: if (to.Length < 2)  	throw new InvalidDataException ("ZomB Url is to an invalid host");  
Magic Number,System451.Communication.Dashboard.Net,ZomBUrl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\IDashboardDataSource.cs,ZomBUrl,The following statement contains a magic number: if (to [0] == '.')//team syntax   {  	int team = int.Parse (to.Substring (1));  	IPAddress = IPAddress.Parse ("10." + team / 100 + "." + team % 100 + ".2");  }  else if (to.Equals ("localhost"' StringComparison.CurrentCultureIgnoreCase))  	IPAddress = IPAddress.Loopback;  else  	IPAddress = IPAddress.Parse (to);  
Magic Number,System451.Communication.Dashboard.Net,ZomBUrl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\IDashboardDataSource.cs,ZomBUrl,The following statement contains a magic number: if (to [0] == '.')//team syntax   {  	int team = int.Parse (to.Substring (1));  	IPAddress = IPAddress.Parse ("10." + team / 100 + "." + team % 100 + ".2");  }  else if (to.Equals ("localhost"' StringComparison.CurrentCultureIgnoreCase))  	IPAddress = IPAddress.Loopback;  else  	IPAddress = IPAddress.Parse (to);  
Magic Number,System451.Communication.Dashboard.Net,ZomBUrl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\IDashboardDataSource.cs,ZomBUrl,The following statement contains a magic number: IPAddress = IPAddress.Parse ("10." + team / 100 + "." + team % 100 + ".2");  
Magic Number,System451.Communication.Dashboard.Net,ZomBUrl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\IDashboardDataSource.cs,ZomBUrl,The following statement contains a magic number: IPAddress = IPAddress.Parse ("10." + team / 100 + "." + team % 100 + ".2");  
Magic Number,System451.Communication.Dashboard.Net,ZomBUrl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\IDashboardDataSource.cs,ToString,The following statement contains a magic number: if (useTeamDot && iadr.StartsWith ("10.") && iadr.EndsWith (".2"))  	iadr = "." + (int.Parse (iadr.Substring (3).Replace ("."' "")) / 10);  
Magic Number,System451.Communication.Dashboard.Net,ZomBUrl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\IDashboardDataSource.cs,ToString,The following statement contains a magic number: if (useTeamDot && iadr.StartsWith ("10.") && iadr.EndsWith (".2"))  	iadr = "." + (int.Parse (iadr.Substring (3).Replace ("."' "")) / 10);  
Magic Number,System451.Communication.Dashboard.Net,ZomBUrl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\IDashboardDataSource.cs,ToString,The following statement contains a magic number: iadr = "." + (int.Parse (iadr.Substring (3).Replace ("."' "")) / 10);  
Magic Number,System451.Communication.Dashboard.Net,ZomBUrl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\IDashboardDataSource.cs,ToString,The following statement contains a magic number: iadr = "." + (int.Parse (iadr.Substring (3).Replace ("."' "")) / 10);  
Magic Number,System451.Communication.Dashboard.Net,DashboardPacketDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DashboardPacketDataSource.cs,Stop,The following statement contains a magic number: if (isrunning) {  	try {  		isrunning = false;  		Thread.Sleep (500);  		if (backThread.IsAlive)  			backThread.Abort ();  		cRIOConnection.Close ();  	}  	catch {  		try {  			cRIOConnection.Close ();  		}  		catch {  		}  	}  }  
Magic Number,System451.Communication.Dashboard.Net,DashboardPacketDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DashboardPacketDataSource.cs,Stop,The following statement contains a magic number: try {  	isrunning = false;  	Thread.Sleep (500);  	if (backThread.IsAlive)  		backThread.Abort ();  	cRIOConnection.Close ();  }  catch {  	try {  		cRIOConnection.Close ();  	}  	catch {  	}  }  
Magic Number,System451.Communication.Dashboard.Net,DashboardPacketDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DashboardPacketDataSource.cs,Stop,The following statement contains a magic number: Thread.Sleep (500);  
Magic Number,System451.Communication.Dashboard.Net,DashboardPacketDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DashboardPacketDataSource.cs,DoWork,The following statement contains a magic number: while (isrunning) {  	try {  		IPEndPoint RIPend = null;  		//Recieve the data  		while (cRIOConnection.Available < 1018 && isrunning) {  			Thread.Sleep (2);  		}  		if (!isrunning) {  			cRIOConnection.Close ();  			return;  		}  		byte[] buffer = cRIOConnection.Receive (ref RIPend);  		string Output;  		//Convert  		Output = UTF8Encoding.UTF8.GetString (buffer);  		//Find segment of data  		if (Output.Contains ("@@ZomB:|") && Output.Contains ("|:ZomB@@") && !Output.Contains ("@@ZomB:|:ZomB@@")) {  			Output = Output.Substring (Output.IndexOf ("@@ZomB:|") + 8' (Output.IndexOf ("|:ZomB@@") - (Output.IndexOf ("@@ZomB:|") + 8)));  			if (Output != "") {  				//Check first  				if (!VerifyPacket (buffer)) {  					if (InvalidPacketRecieved != null && !peeking) {  						//Create our e  						InvalidPacketRecievedEventArgs e = new InvalidPacketRecievedEventArgs (buffer' ddh.InvalidPacketAction == InvalidPacketActions.AlwaysContinue || ddh.InvalidPacketAction == InvalidPacketActions.Continue);  						InvalidPacketRecieved (this' e);  						if ((int)ddh.InvalidPacketAction < 3)//1-4  						 {  							if (!e.ContinueAnyway)  								break;  						}  						else if (ddh.InvalidPacketAction == InvalidPacketActions.AlwaysIgnore)  							break;  					}  				}  				//Get the items in a dictionary  				ZomBDataLookup vals = SplitParams (Output);  				if (peeking) {  					foreach (var keys in vals) {  						dp.Invoke (cb' keys.Key);  					}  				}  				else {  					FRCDSStatus status = ParseDSBytes (buffer);  					cStat = status;  					kys = vals;  					//Fire events  					if (DataRecieved != null)  						DataRecieved (this' new EventArgs ());  					if (NewStatusRecieved != null)  						NewStatusRecieved (this' new NewStatusRecievedEventArgs (status));  					if (NewDataRecieved != null)  						NewDataRecieved (this' new NewDataRecievedEventArgs (vals));  				}  			}  		}  		if (nume > 0)  			nume--;  	}  	catch (ThreadAbortException) {  		isrunning = false;  		cRIOConnection.Close ();  		return;  	}  	catch (Exception ex) {  		nume++;  		DoError (ex);  		if (nume > 10) {  			isrunning = false;  			DoError (new Exception ("10 consecutive errors were encountered' stopping DashboardDataHub"));  			isrunning = false;  			try {  				cRIOConnection.Close ();  			}  			catch {  			}  			return;  		}  	}  }  
Magic Number,System451.Communication.Dashboard.Net,DashboardPacketDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DashboardPacketDataSource.cs,DoWork,The following statement contains a magic number: while (isrunning) {  	try {  		IPEndPoint RIPend = null;  		//Recieve the data  		while (cRIOConnection.Available < 1018 && isrunning) {  			Thread.Sleep (2);  		}  		if (!isrunning) {  			cRIOConnection.Close ();  			return;  		}  		byte[] buffer = cRIOConnection.Receive (ref RIPend);  		string Output;  		//Convert  		Output = UTF8Encoding.UTF8.GetString (buffer);  		//Find segment of data  		if (Output.Contains ("@@ZomB:|") && Output.Contains ("|:ZomB@@") && !Output.Contains ("@@ZomB:|:ZomB@@")) {  			Output = Output.Substring (Output.IndexOf ("@@ZomB:|") + 8' (Output.IndexOf ("|:ZomB@@") - (Output.IndexOf ("@@ZomB:|") + 8)));  			if (Output != "") {  				//Check first  				if (!VerifyPacket (buffer)) {  					if (InvalidPacketRecieved != null && !peeking) {  						//Create our e  						InvalidPacketRecievedEventArgs e = new InvalidPacketRecievedEventArgs (buffer' ddh.InvalidPacketAction == InvalidPacketActions.AlwaysContinue || ddh.InvalidPacketAction == InvalidPacketActions.Continue);  						InvalidPacketRecieved (this' e);  						if ((int)ddh.InvalidPacketAction < 3)//1-4  						 {  							if (!e.ContinueAnyway)  								break;  						}  						else if (ddh.InvalidPacketAction == InvalidPacketActions.AlwaysIgnore)  							break;  					}  				}  				//Get the items in a dictionary  				ZomBDataLookup vals = SplitParams (Output);  				if (peeking) {  					foreach (var keys in vals) {  						dp.Invoke (cb' keys.Key);  					}  				}  				else {  					FRCDSStatus status = ParseDSBytes (buffer);  					cStat = status;  					kys = vals;  					//Fire events  					if (DataRecieved != null)  						DataRecieved (this' new EventArgs ());  					if (NewStatusRecieved != null)  						NewStatusRecieved (this' new NewStatusRecievedEventArgs (status));  					if (NewDataRecieved != null)  						NewDataRecieved (this' new NewDataRecievedEventArgs (vals));  				}  			}  		}  		if (nume > 0)  			nume--;  	}  	catch (ThreadAbortException) {  		isrunning = false;  		cRIOConnection.Close ();  		return;  	}  	catch (Exception ex) {  		nume++;  		DoError (ex);  		if (nume > 10) {  			isrunning = false;  			DoError (new Exception ("10 consecutive errors were encountered' stopping DashboardDataHub"));  			isrunning = false;  			try {  				cRIOConnection.Close ();  			}  			catch {  			}  			return;  		}  	}  }  
Magic Number,System451.Communication.Dashboard.Net,DashboardPacketDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DashboardPacketDataSource.cs,DoWork,The following statement contains a magic number: while (isrunning) {  	try {  		IPEndPoint RIPend = null;  		//Recieve the data  		while (cRIOConnection.Available < 1018 && isrunning) {  			Thread.Sleep (2);  		}  		if (!isrunning) {  			cRIOConnection.Close ();  			return;  		}  		byte[] buffer = cRIOConnection.Receive (ref RIPend);  		string Output;  		//Convert  		Output = UTF8Encoding.UTF8.GetString (buffer);  		//Find segment of data  		if (Output.Contains ("@@ZomB:|") && Output.Contains ("|:ZomB@@") && !Output.Contains ("@@ZomB:|:ZomB@@")) {  			Output = Output.Substring (Output.IndexOf ("@@ZomB:|") + 8' (Output.IndexOf ("|:ZomB@@") - (Output.IndexOf ("@@ZomB:|") + 8)));  			if (Output != "") {  				//Check first  				if (!VerifyPacket (buffer)) {  					if (InvalidPacketRecieved != null && !peeking) {  						//Create our e  						InvalidPacketRecievedEventArgs e = new InvalidPacketRecievedEventArgs (buffer' ddh.InvalidPacketAction == InvalidPacketActions.AlwaysContinue || ddh.InvalidPacketAction == InvalidPacketActions.Continue);  						InvalidPacketRecieved (this' e);  						if ((int)ddh.InvalidPacketAction < 3)//1-4  						 {  							if (!e.ContinueAnyway)  								break;  						}  						else if (ddh.InvalidPacketAction == InvalidPacketActions.AlwaysIgnore)  							break;  					}  				}  				//Get the items in a dictionary  				ZomBDataLookup vals = SplitParams (Output);  				if (peeking) {  					foreach (var keys in vals) {  						dp.Invoke (cb' keys.Key);  					}  				}  				else {  					FRCDSStatus status = ParseDSBytes (buffer);  					cStat = status;  					kys = vals;  					//Fire events  					if (DataRecieved != null)  						DataRecieved (this' new EventArgs ());  					if (NewStatusRecieved != null)  						NewStatusRecieved (this' new NewStatusRecievedEventArgs (status));  					if (NewDataRecieved != null)  						NewDataRecieved (this' new NewDataRecievedEventArgs (vals));  				}  			}  		}  		if (nume > 0)  			nume--;  	}  	catch (ThreadAbortException) {  		isrunning = false;  		cRIOConnection.Close ();  		return;  	}  	catch (Exception ex) {  		nume++;  		DoError (ex);  		if (nume > 10) {  			isrunning = false;  			DoError (new Exception ("10 consecutive errors were encountered' stopping DashboardDataHub"));  			isrunning = false;  			try {  				cRIOConnection.Close ();  			}  			catch {  			}  			return;  		}  	}  }  
Magic Number,System451.Communication.Dashboard.Net,DashboardPacketDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DashboardPacketDataSource.cs,DoWork,The following statement contains a magic number: while (isrunning) {  	try {  		IPEndPoint RIPend = null;  		//Recieve the data  		while (cRIOConnection.Available < 1018 && isrunning) {  			Thread.Sleep (2);  		}  		if (!isrunning) {  			cRIOConnection.Close ();  			return;  		}  		byte[] buffer = cRIOConnection.Receive (ref RIPend);  		string Output;  		//Convert  		Output = UTF8Encoding.UTF8.GetString (buffer);  		//Find segment of data  		if (Output.Contains ("@@ZomB:|") && Output.Contains ("|:ZomB@@") && !Output.Contains ("@@ZomB:|:ZomB@@")) {  			Output = Output.Substring (Output.IndexOf ("@@ZomB:|") + 8' (Output.IndexOf ("|:ZomB@@") - (Output.IndexOf ("@@ZomB:|") + 8)));  			if (Output != "") {  				//Check first  				if (!VerifyPacket (buffer)) {  					if (InvalidPacketRecieved != null && !peeking) {  						//Create our e  						InvalidPacketRecievedEventArgs e = new InvalidPacketRecievedEventArgs (buffer' ddh.InvalidPacketAction == InvalidPacketActions.AlwaysContinue || ddh.InvalidPacketAction == InvalidPacketActions.Continue);  						InvalidPacketRecieved (this' e);  						if ((int)ddh.InvalidPacketAction < 3)//1-4  						 {  							if (!e.ContinueAnyway)  								break;  						}  						else if (ddh.InvalidPacketAction == InvalidPacketActions.AlwaysIgnore)  							break;  					}  				}  				//Get the items in a dictionary  				ZomBDataLookup vals = SplitParams (Output);  				if (peeking) {  					foreach (var keys in vals) {  						dp.Invoke (cb' keys.Key);  					}  				}  				else {  					FRCDSStatus status = ParseDSBytes (buffer);  					cStat = status;  					kys = vals;  					//Fire events  					if (DataRecieved != null)  						DataRecieved (this' new EventArgs ());  					if (NewStatusRecieved != null)  						NewStatusRecieved (this' new NewStatusRecievedEventArgs (status));  					if (NewDataRecieved != null)  						NewDataRecieved (this' new NewDataRecievedEventArgs (vals));  				}  			}  		}  		if (nume > 0)  			nume--;  	}  	catch (ThreadAbortException) {  		isrunning = false;  		cRIOConnection.Close ();  		return;  	}  	catch (Exception ex) {  		nume++;  		DoError (ex);  		if (nume > 10) {  			isrunning = false;  			DoError (new Exception ("10 consecutive errors were encountered' stopping DashboardDataHub"));  			isrunning = false;  			try {  				cRIOConnection.Close ();  			}  			catch {  			}  			return;  		}  	}  }  
Magic Number,System451.Communication.Dashboard.Net,DashboardPacketDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DashboardPacketDataSource.cs,DoWork,The following statement contains a magic number: while (isrunning) {  	try {  		IPEndPoint RIPend = null;  		//Recieve the data  		while (cRIOConnection.Available < 1018 && isrunning) {  			Thread.Sleep (2);  		}  		if (!isrunning) {  			cRIOConnection.Close ();  			return;  		}  		byte[] buffer = cRIOConnection.Receive (ref RIPend);  		string Output;  		//Convert  		Output = UTF8Encoding.UTF8.GetString (buffer);  		//Find segment of data  		if (Output.Contains ("@@ZomB:|") && Output.Contains ("|:ZomB@@") && !Output.Contains ("@@ZomB:|:ZomB@@")) {  			Output = Output.Substring (Output.IndexOf ("@@ZomB:|") + 8' (Output.IndexOf ("|:ZomB@@") - (Output.IndexOf ("@@ZomB:|") + 8)));  			if (Output != "") {  				//Check first  				if (!VerifyPacket (buffer)) {  					if (InvalidPacketRecieved != null && !peeking) {  						//Create our e  						InvalidPacketRecievedEventArgs e = new InvalidPacketRecievedEventArgs (buffer' ddh.InvalidPacketAction == InvalidPacketActions.AlwaysContinue || ddh.InvalidPacketAction == InvalidPacketActions.Continue);  						InvalidPacketRecieved (this' e);  						if ((int)ddh.InvalidPacketAction < 3)//1-4  						 {  							if (!e.ContinueAnyway)  								break;  						}  						else if (ddh.InvalidPacketAction == InvalidPacketActions.AlwaysIgnore)  							break;  					}  				}  				//Get the items in a dictionary  				ZomBDataLookup vals = SplitParams (Output);  				if (peeking) {  					foreach (var keys in vals) {  						dp.Invoke (cb' keys.Key);  					}  				}  				else {  					FRCDSStatus status = ParseDSBytes (buffer);  					cStat = status;  					kys = vals;  					//Fire events  					if (DataRecieved != null)  						DataRecieved (this' new EventArgs ());  					if (NewStatusRecieved != null)  						NewStatusRecieved (this' new NewStatusRecievedEventArgs (status));  					if (NewDataRecieved != null)  						NewDataRecieved (this' new NewDataRecievedEventArgs (vals));  				}  			}  		}  		if (nume > 0)  			nume--;  	}  	catch (ThreadAbortException) {  		isrunning = false;  		cRIOConnection.Close ();  		return;  	}  	catch (Exception ex) {  		nume++;  		DoError (ex);  		if (nume > 10) {  			isrunning = false;  			DoError (new Exception ("10 consecutive errors were encountered' stopping DashboardDataHub"));  			isrunning = false;  			try {  				cRIOConnection.Close ();  			}  			catch {  			}  			return;  		}  	}  }  
Magic Number,System451.Communication.Dashboard.Net,DashboardPacketDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DashboardPacketDataSource.cs,DoWork,The following statement contains a magic number: while (isrunning) {  	try {  		IPEndPoint RIPend = null;  		//Recieve the data  		while (cRIOConnection.Available < 1018 && isrunning) {  			Thread.Sleep (2);  		}  		if (!isrunning) {  			cRIOConnection.Close ();  			return;  		}  		byte[] buffer = cRIOConnection.Receive (ref RIPend);  		string Output;  		//Convert  		Output = UTF8Encoding.UTF8.GetString (buffer);  		//Find segment of data  		if (Output.Contains ("@@ZomB:|") && Output.Contains ("|:ZomB@@") && !Output.Contains ("@@ZomB:|:ZomB@@")) {  			Output = Output.Substring (Output.IndexOf ("@@ZomB:|") + 8' (Output.IndexOf ("|:ZomB@@") - (Output.IndexOf ("@@ZomB:|") + 8)));  			if (Output != "") {  				//Check first  				if (!VerifyPacket (buffer)) {  					if (InvalidPacketRecieved != null && !peeking) {  						//Create our e  						InvalidPacketRecievedEventArgs e = new InvalidPacketRecievedEventArgs (buffer' ddh.InvalidPacketAction == InvalidPacketActions.AlwaysContinue || ddh.InvalidPacketAction == InvalidPacketActions.Continue);  						InvalidPacketRecieved (this' e);  						if ((int)ddh.InvalidPacketAction < 3)//1-4  						 {  							if (!e.ContinueAnyway)  								break;  						}  						else if (ddh.InvalidPacketAction == InvalidPacketActions.AlwaysIgnore)  							break;  					}  				}  				//Get the items in a dictionary  				ZomBDataLookup vals = SplitParams (Output);  				if (peeking) {  					foreach (var keys in vals) {  						dp.Invoke (cb' keys.Key);  					}  				}  				else {  					FRCDSStatus status = ParseDSBytes (buffer);  					cStat = status;  					kys = vals;  					//Fire events  					if (DataRecieved != null)  						DataRecieved (this' new EventArgs ());  					if (NewStatusRecieved != null)  						NewStatusRecieved (this' new NewStatusRecievedEventArgs (status));  					if (NewDataRecieved != null)  						NewDataRecieved (this' new NewDataRecievedEventArgs (vals));  				}  			}  		}  		if (nume > 0)  			nume--;  	}  	catch (ThreadAbortException) {  		isrunning = false;  		cRIOConnection.Close ();  		return;  	}  	catch (Exception ex) {  		nume++;  		DoError (ex);  		if (nume > 10) {  			isrunning = false;  			DoError (new Exception ("10 consecutive errors were encountered' stopping DashboardDataHub"));  			isrunning = false;  			try {  				cRIOConnection.Close ();  			}  			catch {  			}  			return;  		}  	}  }  
Magic Number,System451.Communication.Dashboard.Net,DashboardPacketDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DashboardPacketDataSource.cs,DoWork,The following statement contains a magic number: try {  	IPEndPoint RIPend = null;  	//Recieve the data  	while (cRIOConnection.Available < 1018 && isrunning) {  		Thread.Sleep (2);  	}  	if (!isrunning) {  		cRIOConnection.Close ();  		return;  	}  	byte[] buffer = cRIOConnection.Receive (ref RIPend);  	string Output;  	//Convert  	Output = UTF8Encoding.UTF8.GetString (buffer);  	//Find segment of data  	if (Output.Contains ("@@ZomB:|") && Output.Contains ("|:ZomB@@") && !Output.Contains ("@@ZomB:|:ZomB@@")) {  		Output = Output.Substring (Output.IndexOf ("@@ZomB:|") + 8' (Output.IndexOf ("|:ZomB@@") - (Output.IndexOf ("@@ZomB:|") + 8)));  		if (Output != "") {  			//Check first  			if (!VerifyPacket (buffer)) {  				if (InvalidPacketRecieved != null && !peeking) {  					//Create our e  					InvalidPacketRecievedEventArgs e = new InvalidPacketRecievedEventArgs (buffer' ddh.InvalidPacketAction == InvalidPacketActions.AlwaysContinue || ddh.InvalidPacketAction == InvalidPacketActions.Continue);  					InvalidPacketRecieved (this' e);  					if ((int)ddh.InvalidPacketAction < 3)//1-4  					 {  						if (!e.ContinueAnyway)  							break;  					}  					else if (ddh.InvalidPacketAction == InvalidPacketActions.AlwaysIgnore)  						break;  				}  			}  			//Get the items in a dictionary  			ZomBDataLookup vals = SplitParams (Output);  			if (peeking) {  				foreach (var keys in vals) {  					dp.Invoke (cb' keys.Key);  				}  			}  			else {  				FRCDSStatus status = ParseDSBytes (buffer);  				cStat = status;  				kys = vals;  				//Fire events  				if (DataRecieved != null)  					DataRecieved (this' new EventArgs ());  				if (NewStatusRecieved != null)  					NewStatusRecieved (this' new NewStatusRecievedEventArgs (status));  				if (NewDataRecieved != null)  					NewDataRecieved (this' new NewDataRecievedEventArgs (vals));  			}  		}  	}  	if (nume > 0)  		nume--;  }  catch (ThreadAbortException) {  	isrunning = false;  	cRIOConnection.Close ();  	return;  }  catch (Exception ex) {  	nume++;  	DoError (ex);  	if (nume > 10) {  		isrunning = false;  		DoError (new Exception ("10 consecutive errors were encountered' stopping DashboardDataHub"));  		isrunning = false;  		try {  			cRIOConnection.Close ();  		}  		catch {  		}  		return;  	}  }  
Magic Number,System451.Communication.Dashboard.Net,DashboardPacketDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DashboardPacketDataSource.cs,DoWork,The following statement contains a magic number: try {  	IPEndPoint RIPend = null;  	//Recieve the data  	while (cRIOConnection.Available < 1018 && isrunning) {  		Thread.Sleep (2);  	}  	if (!isrunning) {  		cRIOConnection.Close ();  		return;  	}  	byte[] buffer = cRIOConnection.Receive (ref RIPend);  	string Output;  	//Convert  	Output = UTF8Encoding.UTF8.GetString (buffer);  	//Find segment of data  	if (Output.Contains ("@@ZomB:|") && Output.Contains ("|:ZomB@@") && !Output.Contains ("@@ZomB:|:ZomB@@")) {  		Output = Output.Substring (Output.IndexOf ("@@ZomB:|") + 8' (Output.IndexOf ("|:ZomB@@") - (Output.IndexOf ("@@ZomB:|") + 8)));  		if (Output != "") {  			//Check first  			if (!VerifyPacket (buffer)) {  				if (InvalidPacketRecieved != null && !peeking) {  					//Create our e  					InvalidPacketRecievedEventArgs e = new InvalidPacketRecievedEventArgs (buffer' ddh.InvalidPacketAction == InvalidPacketActions.AlwaysContinue || ddh.InvalidPacketAction == InvalidPacketActions.Continue);  					InvalidPacketRecieved (this' e);  					if ((int)ddh.InvalidPacketAction < 3)//1-4  					 {  						if (!e.ContinueAnyway)  							break;  					}  					else if (ddh.InvalidPacketAction == InvalidPacketActions.AlwaysIgnore)  						break;  				}  			}  			//Get the items in a dictionary  			ZomBDataLookup vals = SplitParams (Output);  			if (peeking) {  				foreach (var keys in vals) {  					dp.Invoke (cb' keys.Key);  				}  			}  			else {  				FRCDSStatus status = ParseDSBytes (buffer);  				cStat = status;  				kys = vals;  				//Fire events  				if (DataRecieved != null)  					DataRecieved (this' new EventArgs ());  				if (NewStatusRecieved != null)  					NewStatusRecieved (this' new NewStatusRecievedEventArgs (status));  				if (NewDataRecieved != null)  					NewDataRecieved (this' new NewDataRecievedEventArgs (vals));  			}  		}  	}  	if (nume > 0)  		nume--;  }  catch (ThreadAbortException) {  	isrunning = false;  	cRIOConnection.Close ();  	return;  }  catch (Exception ex) {  	nume++;  	DoError (ex);  	if (nume > 10) {  		isrunning = false;  		DoError (new Exception ("10 consecutive errors were encountered' stopping DashboardDataHub"));  		isrunning = false;  		try {  			cRIOConnection.Close ();  		}  		catch {  		}  		return;  	}  }  
Magic Number,System451.Communication.Dashboard.Net,DashboardPacketDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DashboardPacketDataSource.cs,DoWork,The following statement contains a magic number: try {  	IPEndPoint RIPend = null;  	//Recieve the data  	while (cRIOConnection.Available < 1018 && isrunning) {  		Thread.Sleep (2);  	}  	if (!isrunning) {  		cRIOConnection.Close ();  		return;  	}  	byte[] buffer = cRIOConnection.Receive (ref RIPend);  	string Output;  	//Convert  	Output = UTF8Encoding.UTF8.GetString (buffer);  	//Find segment of data  	if (Output.Contains ("@@ZomB:|") && Output.Contains ("|:ZomB@@") && !Output.Contains ("@@ZomB:|:ZomB@@")) {  		Output = Output.Substring (Output.IndexOf ("@@ZomB:|") + 8' (Output.IndexOf ("|:ZomB@@") - (Output.IndexOf ("@@ZomB:|") + 8)));  		if (Output != "") {  			//Check first  			if (!VerifyPacket (buffer)) {  				if (InvalidPacketRecieved != null && !peeking) {  					//Create our e  					InvalidPacketRecievedEventArgs e = new InvalidPacketRecievedEventArgs (buffer' ddh.InvalidPacketAction == InvalidPacketActions.AlwaysContinue || ddh.InvalidPacketAction == InvalidPacketActions.Continue);  					InvalidPacketRecieved (this' e);  					if ((int)ddh.InvalidPacketAction < 3)//1-4  					 {  						if (!e.ContinueAnyway)  							break;  					}  					else if (ddh.InvalidPacketAction == InvalidPacketActions.AlwaysIgnore)  						break;  				}  			}  			//Get the items in a dictionary  			ZomBDataLookup vals = SplitParams (Output);  			if (peeking) {  				foreach (var keys in vals) {  					dp.Invoke (cb' keys.Key);  				}  			}  			else {  				FRCDSStatus status = ParseDSBytes (buffer);  				cStat = status;  				kys = vals;  				//Fire events  				if (DataRecieved != null)  					DataRecieved (this' new EventArgs ());  				if (NewStatusRecieved != null)  					NewStatusRecieved (this' new NewStatusRecievedEventArgs (status));  				if (NewDataRecieved != null)  					NewDataRecieved (this' new NewDataRecievedEventArgs (vals));  			}  		}  	}  	if (nume > 0)  		nume--;  }  catch (ThreadAbortException) {  	isrunning = false;  	cRIOConnection.Close ();  	return;  }  catch (Exception ex) {  	nume++;  	DoError (ex);  	if (nume > 10) {  		isrunning = false;  		DoError (new Exception ("10 consecutive errors were encountered' stopping DashboardDataHub"));  		isrunning = false;  		try {  			cRIOConnection.Close ();  		}  		catch {  		}  		return;  	}  }  
Magic Number,System451.Communication.Dashboard.Net,DashboardPacketDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DashboardPacketDataSource.cs,DoWork,The following statement contains a magic number: try {  	IPEndPoint RIPend = null;  	//Recieve the data  	while (cRIOConnection.Available < 1018 && isrunning) {  		Thread.Sleep (2);  	}  	if (!isrunning) {  		cRIOConnection.Close ();  		return;  	}  	byte[] buffer = cRIOConnection.Receive (ref RIPend);  	string Output;  	//Convert  	Output = UTF8Encoding.UTF8.GetString (buffer);  	//Find segment of data  	if (Output.Contains ("@@ZomB:|") && Output.Contains ("|:ZomB@@") && !Output.Contains ("@@ZomB:|:ZomB@@")) {  		Output = Output.Substring (Output.IndexOf ("@@ZomB:|") + 8' (Output.IndexOf ("|:ZomB@@") - (Output.IndexOf ("@@ZomB:|") + 8)));  		if (Output != "") {  			//Check first  			if (!VerifyPacket (buffer)) {  				if (InvalidPacketRecieved != null && !peeking) {  					//Create our e  					InvalidPacketRecievedEventArgs e = new InvalidPacketRecievedEventArgs (buffer' ddh.InvalidPacketAction == InvalidPacketActions.AlwaysContinue || ddh.InvalidPacketAction == InvalidPacketActions.Continue);  					InvalidPacketRecieved (this' e);  					if ((int)ddh.InvalidPacketAction < 3)//1-4  					 {  						if (!e.ContinueAnyway)  							break;  					}  					else if (ddh.InvalidPacketAction == InvalidPacketActions.AlwaysIgnore)  						break;  				}  			}  			//Get the items in a dictionary  			ZomBDataLookup vals = SplitParams (Output);  			if (peeking) {  				foreach (var keys in vals) {  					dp.Invoke (cb' keys.Key);  				}  			}  			else {  				FRCDSStatus status = ParseDSBytes (buffer);  				cStat = status;  				kys = vals;  				//Fire events  				if (DataRecieved != null)  					DataRecieved (this' new EventArgs ());  				if (NewStatusRecieved != null)  					NewStatusRecieved (this' new NewStatusRecievedEventArgs (status));  				if (NewDataRecieved != null)  					NewDataRecieved (this' new NewDataRecievedEventArgs (vals));  			}  		}  	}  	if (nume > 0)  		nume--;  }  catch (ThreadAbortException) {  	isrunning = false;  	cRIOConnection.Close ();  	return;  }  catch (Exception ex) {  	nume++;  	DoError (ex);  	if (nume > 10) {  		isrunning = false;  		DoError (new Exception ("10 consecutive errors were encountered' stopping DashboardDataHub"));  		isrunning = false;  		try {  			cRIOConnection.Close ();  		}  		catch {  		}  		return;  	}  }  
Magic Number,System451.Communication.Dashboard.Net,DashboardPacketDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DashboardPacketDataSource.cs,DoWork,The following statement contains a magic number: try {  	IPEndPoint RIPend = null;  	//Recieve the data  	while (cRIOConnection.Available < 1018 && isrunning) {  		Thread.Sleep (2);  	}  	if (!isrunning) {  		cRIOConnection.Close ();  		return;  	}  	byte[] buffer = cRIOConnection.Receive (ref RIPend);  	string Output;  	//Convert  	Output = UTF8Encoding.UTF8.GetString (buffer);  	//Find segment of data  	if (Output.Contains ("@@ZomB:|") && Output.Contains ("|:ZomB@@") && !Output.Contains ("@@ZomB:|:ZomB@@")) {  		Output = Output.Substring (Output.IndexOf ("@@ZomB:|") + 8' (Output.IndexOf ("|:ZomB@@") - (Output.IndexOf ("@@ZomB:|") + 8)));  		if (Output != "") {  			//Check first  			if (!VerifyPacket (buffer)) {  				if (InvalidPacketRecieved != null && !peeking) {  					//Create our e  					InvalidPacketRecievedEventArgs e = new InvalidPacketRecievedEventArgs (buffer' ddh.InvalidPacketAction == InvalidPacketActions.AlwaysContinue || ddh.InvalidPacketAction == InvalidPacketActions.Continue);  					InvalidPacketRecieved (this' e);  					if ((int)ddh.InvalidPacketAction < 3)//1-4  					 {  						if (!e.ContinueAnyway)  							break;  					}  					else if (ddh.InvalidPacketAction == InvalidPacketActions.AlwaysIgnore)  						break;  				}  			}  			//Get the items in a dictionary  			ZomBDataLookup vals = SplitParams (Output);  			if (peeking) {  				foreach (var keys in vals) {  					dp.Invoke (cb' keys.Key);  				}  			}  			else {  				FRCDSStatus status = ParseDSBytes (buffer);  				cStat = status;  				kys = vals;  				//Fire events  				if (DataRecieved != null)  					DataRecieved (this' new EventArgs ());  				if (NewStatusRecieved != null)  					NewStatusRecieved (this' new NewStatusRecievedEventArgs (status));  				if (NewDataRecieved != null)  					NewDataRecieved (this' new NewDataRecievedEventArgs (vals));  			}  		}  	}  	if (nume > 0)  		nume--;  }  catch (ThreadAbortException) {  	isrunning = false;  	cRIOConnection.Close ();  	return;  }  catch (Exception ex) {  	nume++;  	DoError (ex);  	if (nume > 10) {  		isrunning = false;  		DoError (new Exception ("10 consecutive errors were encountered' stopping DashboardDataHub"));  		isrunning = false;  		try {  			cRIOConnection.Close ();  		}  		catch {  		}  		return;  	}  }  
Magic Number,System451.Communication.Dashboard.Net,DashboardPacketDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DashboardPacketDataSource.cs,DoWork,The following statement contains a magic number: try {  	IPEndPoint RIPend = null;  	//Recieve the data  	while (cRIOConnection.Available < 1018 && isrunning) {  		Thread.Sleep (2);  	}  	if (!isrunning) {  		cRIOConnection.Close ();  		return;  	}  	byte[] buffer = cRIOConnection.Receive (ref RIPend);  	string Output;  	//Convert  	Output = UTF8Encoding.UTF8.GetString (buffer);  	//Find segment of data  	if (Output.Contains ("@@ZomB:|") && Output.Contains ("|:ZomB@@") && !Output.Contains ("@@ZomB:|:ZomB@@")) {  		Output = Output.Substring (Output.IndexOf ("@@ZomB:|") + 8' (Output.IndexOf ("|:ZomB@@") - (Output.IndexOf ("@@ZomB:|") + 8)));  		if (Output != "") {  			//Check first  			if (!VerifyPacket (buffer)) {  				if (InvalidPacketRecieved != null && !peeking) {  					//Create our e  					InvalidPacketRecievedEventArgs e = new InvalidPacketRecievedEventArgs (buffer' ddh.InvalidPacketAction == InvalidPacketActions.AlwaysContinue || ddh.InvalidPacketAction == InvalidPacketActions.Continue);  					InvalidPacketRecieved (this' e);  					if ((int)ddh.InvalidPacketAction < 3)//1-4  					 {  						if (!e.ContinueAnyway)  							break;  					}  					else if (ddh.InvalidPacketAction == InvalidPacketActions.AlwaysIgnore)  						break;  				}  			}  			//Get the items in a dictionary  			ZomBDataLookup vals = SplitParams (Output);  			if (peeking) {  				foreach (var keys in vals) {  					dp.Invoke (cb' keys.Key);  				}  			}  			else {  				FRCDSStatus status = ParseDSBytes (buffer);  				cStat = status;  				kys = vals;  				//Fire events  				if (DataRecieved != null)  					DataRecieved (this' new EventArgs ());  				if (NewStatusRecieved != null)  					NewStatusRecieved (this' new NewStatusRecievedEventArgs (status));  				if (NewDataRecieved != null)  					NewDataRecieved (this' new NewDataRecievedEventArgs (vals));  			}  		}  	}  	if (nume > 0)  		nume--;  }  catch (ThreadAbortException) {  	isrunning = false;  	cRIOConnection.Close ();  	return;  }  catch (Exception ex) {  	nume++;  	DoError (ex);  	if (nume > 10) {  		isrunning = false;  		DoError (new Exception ("10 consecutive errors were encountered' stopping DashboardDataHub"));  		isrunning = false;  		try {  			cRIOConnection.Close ();  		}  		catch {  		}  		return;  	}  }  
Magic Number,System451.Communication.Dashboard.Net,DashboardPacketDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DashboardPacketDataSource.cs,DoWork,The following statement contains a magic number: while (cRIOConnection.Available < 1018 && isrunning) {  	Thread.Sleep (2);  }  
Magic Number,System451.Communication.Dashboard.Net,DashboardPacketDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DashboardPacketDataSource.cs,DoWork,The following statement contains a magic number: while (cRIOConnection.Available < 1018 && isrunning) {  	Thread.Sleep (2);  }  
Magic Number,System451.Communication.Dashboard.Net,DashboardPacketDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DashboardPacketDataSource.cs,DoWork,The following statement contains a magic number: Thread.Sleep (2);  
Magic Number,System451.Communication.Dashboard.Net,DashboardPacketDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DashboardPacketDataSource.cs,DoWork,The following statement contains a magic number: if (Output.Contains ("@@ZomB:|") && Output.Contains ("|:ZomB@@") && !Output.Contains ("@@ZomB:|:ZomB@@")) {  	Output = Output.Substring (Output.IndexOf ("@@ZomB:|") + 8' (Output.IndexOf ("|:ZomB@@") - (Output.IndexOf ("@@ZomB:|") + 8)));  	if (Output != "") {  		//Check first  		if (!VerifyPacket (buffer)) {  			if (InvalidPacketRecieved != null && !peeking) {  				//Create our e  				InvalidPacketRecievedEventArgs e = new InvalidPacketRecievedEventArgs (buffer' ddh.InvalidPacketAction == InvalidPacketActions.AlwaysContinue || ddh.InvalidPacketAction == InvalidPacketActions.Continue);  				InvalidPacketRecieved (this' e);  				if ((int)ddh.InvalidPacketAction < 3)//1-4  				 {  					if (!e.ContinueAnyway)  						break;  				}  				else if (ddh.InvalidPacketAction == InvalidPacketActions.AlwaysIgnore)  					break;  			}  		}  		//Get the items in a dictionary  		ZomBDataLookup vals = SplitParams (Output);  		if (peeking) {  			foreach (var keys in vals) {  				dp.Invoke (cb' keys.Key);  			}  		}  		else {  			FRCDSStatus status = ParseDSBytes (buffer);  			cStat = status;  			kys = vals;  			//Fire events  			if (DataRecieved != null)  				DataRecieved (this' new EventArgs ());  			if (NewStatusRecieved != null)  				NewStatusRecieved (this' new NewStatusRecievedEventArgs (status));  			if (NewDataRecieved != null)  				NewDataRecieved (this' new NewDataRecievedEventArgs (vals));  		}  	}  }  
Magic Number,System451.Communication.Dashboard.Net,DashboardPacketDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DashboardPacketDataSource.cs,DoWork,The following statement contains a magic number: if (Output.Contains ("@@ZomB:|") && Output.Contains ("|:ZomB@@") && !Output.Contains ("@@ZomB:|:ZomB@@")) {  	Output = Output.Substring (Output.IndexOf ("@@ZomB:|") + 8' (Output.IndexOf ("|:ZomB@@") - (Output.IndexOf ("@@ZomB:|") + 8)));  	if (Output != "") {  		//Check first  		if (!VerifyPacket (buffer)) {  			if (InvalidPacketRecieved != null && !peeking) {  				//Create our e  				InvalidPacketRecievedEventArgs e = new InvalidPacketRecievedEventArgs (buffer' ddh.InvalidPacketAction == InvalidPacketActions.AlwaysContinue || ddh.InvalidPacketAction == InvalidPacketActions.Continue);  				InvalidPacketRecieved (this' e);  				if ((int)ddh.InvalidPacketAction < 3)//1-4  				 {  					if (!e.ContinueAnyway)  						break;  				}  				else if (ddh.InvalidPacketAction == InvalidPacketActions.AlwaysIgnore)  					break;  			}  		}  		//Get the items in a dictionary  		ZomBDataLookup vals = SplitParams (Output);  		if (peeking) {  			foreach (var keys in vals) {  				dp.Invoke (cb' keys.Key);  			}  		}  		else {  			FRCDSStatus status = ParseDSBytes (buffer);  			cStat = status;  			kys = vals;  			//Fire events  			if (DataRecieved != null)  				DataRecieved (this' new EventArgs ());  			if (NewStatusRecieved != null)  				NewStatusRecieved (this' new NewStatusRecievedEventArgs (status));  			if (NewDataRecieved != null)  				NewDataRecieved (this' new NewDataRecievedEventArgs (vals));  		}  	}  }  
Magic Number,System451.Communication.Dashboard.Net,DashboardPacketDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DashboardPacketDataSource.cs,DoWork,The following statement contains a magic number: if (Output.Contains ("@@ZomB:|") && Output.Contains ("|:ZomB@@") && !Output.Contains ("@@ZomB:|:ZomB@@")) {  	Output = Output.Substring (Output.IndexOf ("@@ZomB:|") + 8' (Output.IndexOf ("|:ZomB@@") - (Output.IndexOf ("@@ZomB:|") + 8)));  	if (Output != "") {  		//Check first  		if (!VerifyPacket (buffer)) {  			if (InvalidPacketRecieved != null && !peeking) {  				//Create our e  				InvalidPacketRecievedEventArgs e = new InvalidPacketRecievedEventArgs (buffer' ddh.InvalidPacketAction == InvalidPacketActions.AlwaysContinue || ddh.InvalidPacketAction == InvalidPacketActions.Continue);  				InvalidPacketRecieved (this' e);  				if ((int)ddh.InvalidPacketAction < 3)//1-4  				 {  					if (!e.ContinueAnyway)  						break;  				}  				else if (ddh.InvalidPacketAction == InvalidPacketActions.AlwaysIgnore)  					break;  			}  		}  		//Get the items in a dictionary  		ZomBDataLookup vals = SplitParams (Output);  		if (peeking) {  			foreach (var keys in vals) {  				dp.Invoke (cb' keys.Key);  			}  		}  		else {  			FRCDSStatus status = ParseDSBytes (buffer);  			cStat = status;  			kys = vals;  			//Fire events  			if (DataRecieved != null)  				DataRecieved (this' new EventArgs ());  			if (NewStatusRecieved != null)  				NewStatusRecieved (this' new NewStatusRecievedEventArgs (status));  			if (NewDataRecieved != null)  				NewDataRecieved (this' new NewDataRecievedEventArgs (vals));  		}  	}  }  
Magic Number,System451.Communication.Dashboard.Net,DashboardPacketDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DashboardPacketDataSource.cs,DoWork,The following statement contains a magic number: Output = Output.Substring (Output.IndexOf ("@@ZomB:|") + 8' (Output.IndexOf ("|:ZomB@@") - (Output.IndexOf ("@@ZomB:|") + 8)));  
Magic Number,System451.Communication.Dashboard.Net,DashboardPacketDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DashboardPacketDataSource.cs,DoWork,The following statement contains a magic number: Output = Output.Substring (Output.IndexOf ("@@ZomB:|") + 8' (Output.IndexOf ("|:ZomB@@") - (Output.IndexOf ("@@ZomB:|") + 8)));  
Magic Number,System451.Communication.Dashboard.Net,DashboardPacketDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DashboardPacketDataSource.cs,DoWork,The following statement contains a magic number: if (Output != "") {  	//Check first  	if (!VerifyPacket (buffer)) {  		if (InvalidPacketRecieved != null && !peeking) {  			//Create our e  			InvalidPacketRecievedEventArgs e = new InvalidPacketRecievedEventArgs (buffer' ddh.InvalidPacketAction == InvalidPacketActions.AlwaysContinue || ddh.InvalidPacketAction == InvalidPacketActions.Continue);  			InvalidPacketRecieved (this' e);  			if ((int)ddh.InvalidPacketAction < 3)//1-4  			 {  				if (!e.ContinueAnyway)  					break;  			}  			else if (ddh.InvalidPacketAction == InvalidPacketActions.AlwaysIgnore)  				break;  		}  	}  	//Get the items in a dictionary  	ZomBDataLookup vals = SplitParams (Output);  	if (peeking) {  		foreach (var keys in vals) {  			dp.Invoke (cb' keys.Key);  		}  	}  	else {  		FRCDSStatus status = ParseDSBytes (buffer);  		cStat = status;  		kys = vals;  		//Fire events  		if (DataRecieved != null)  			DataRecieved (this' new EventArgs ());  		if (NewStatusRecieved != null)  			NewStatusRecieved (this' new NewStatusRecievedEventArgs (status));  		if (NewDataRecieved != null)  			NewDataRecieved (this' new NewDataRecievedEventArgs (vals));  	}  }  
Magic Number,System451.Communication.Dashboard.Net,DashboardPacketDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DashboardPacketDataSource.cs,DoWork,The following statement contains a magic number: if (!VerifyPacket (buffer)) {  	if (InvalidPacketRecieved != null && !peeking) {  		//Create our e  		InvalidPacketRecievedEventArgs e = new InvalidPacketRecievedEventArgs (buffer' ddh.InvalidPacketAction == InvalidPacketActions.AlwaysContinue || ddh.InvalidPacketAction == InvalidPacketActions.Continue);  		InvalidPacketRecieved (this' e);  		if ((int)ddh.InvalidPacketAction < 3)//1-4  		 {  			if (!e.ContinueAnyway)  				break;  		}  		else if (ddh.InvalidPacketAction == InvalidPacketActions.AlwaysIgnore)  			break;  	}  }  
Magic Number,System451.Communication.Dashboard.Net,DashboardPacketDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DashboardPacketDataSource.cs,DoWork,The following statement contains a magic number: if (InvalidPacketRecieved != null && !peeking) {  	//Create our e  	InvalidPacketRecievedEventArgs e = new InvalidPacketRecievedEventArgs (buffer' ddh.InvalidPacketAction == InvalidPacketActions.AlwaysContinue || ddh.InvalidPacketAction == InvalidPacketActions.Continue);  	InvalidPacketRecieved (this' e);  	if ((int)ddh.InvalidPacketAction < 3)//1-4  	 {  		if (!e.ContinueAnyway)  			break;  	}  	else if (ddh.InvalidPacketAction == InvalidPacketActions.AlwaysIgnore)  		break;  }  
Magic Number,System451.Communication.Dashboard.Net,DashboardPacketDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DashboardPacketDataSource.cs,DoWork,The following statement contains a magic number: if ((int)ddh.InvalidPacketAction < 3)//1-4   {  	if (!e.ContinueAnyway)  		break;  }  else if (ddh.InvalidPacketAction == InvalidPacketActions.AlwaysIgnore)  	break;  
Magic Number,System451.Communication.Dashboard.Net,DashboardPacketDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DashboardPacketDataSource.cs,DoWork,The following statement contains a magic number: if (nume > 10) {  	isrunning = false;  	DoError (new Exception ("10 consecutive errors were encountered' stopping DashboardDataHub"));  	isrunning = false;  	try {  		cRIOConnection.Close ();  	}  	catch {  	}  	return;  }  
Magic Number,System451.Communication.Dashboard.Net,DashboardPacketDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DashboardPacketDataSource.cs,ParseDSBytes,The following statement contains a magic number: ret.PacketNumber += (ushort)(buffer [1] << 8);  
Magic Number,System451.Communication.Dashboard.Net,DashboardPacketDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DashboardPacketDataSource.cs,ParseDSBytes,The following statement contains a magic number: ret.DigitalIn = new DIOBitField (buffer [2]);  
Magic Number,System451.Communication.Dashboard.Net,DashboardPacketDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DashboardPacketDataSource.cs,ParseDSBytes,The following statement contains a magic number: ret.DigitalOut = new DIOBitField (buffer [3]);  
Magic Number,System451.Communication.Dashboard.Net,DashboardPacketDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DashboardPacketDataSource.cs,ParseDSBytes,The following statement contains a magic number: ret.Battery = float.Parse (buffer [4].ToString ("x") + "." + buffer [5].ToString ("x"));  
Magic Number,System451.Communication.Dashboard.Net,DashboardPacketDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DashboardPacketDataSource.cs,ParseDSBytes,The following statement contains a magic number: ret.Battery = float.Parse (buffer [4].ToString ("x") + "." + buffer [5].ToString ("x"));  
Magic Number,System451.Communication.Dashboard.Net,DashboardPacketDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DashboardPacketDataSource.cs,ParseDSBytes,The following statement contains a magic number: ret.Status = new StatusBitField (buffer [6]);  
Magic Number,System451.Communication.Dashboard.Net,DashboardPacketDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DashboardPacketDataSource.cs,ParseDSBytes,The following statement contains a magic number: ret.Error = new ErrorBitField (buffer [7]);  
Magic Number,System451.Communication.Dashboard.Net,DashboardPacketDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DashboardPacketDataSource.cs,ParseDSBytes,The following statement contains a magic number: ret.Team = (int)(buffer [8] * 100) + (int)(buffer [9]);  
Magic Number,System451.Communication.Dashboard.Net,DashboardPacketDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DashboardPacketDataSource.cs,ParseDSBytes,The following statement contains a magic number: ret.Team = (int)(buffer [8] * 100) + (int)(buffer [9]);  
Magic Number,System451.Communication.Dashboard.Net,DashboardPacketDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DashboardPacketDataSource.cs,ParseDSBytes,The following statement contains a magic number: ret.Team = (int)(buffer [8] * 100) + (int)(buffer [9]);  
Magic Number,System451.Communication.Dashboard.Net,DashboardPacketDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DashboardPacketDataSource.cs,VerifyPacket,The following statement contains a magic number: if (data.Length != 1018)  	return false;  
Magic Number,System451.Communication.Dashboard.Net,DashboardPacketDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DashboardPacketDataSource.cs,VerifyPacket,The following statement contains a magic number: dataCrc = BitConverter.ToUInt32 (data' data.Length - 4);  
Magic Number,System451.Communication.Dashboard.Net,DashboardPacketDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DashboardPacketDataSource.cs,VerifyPacket,The following statement contains a magic number: Buffer.BlockCopy (data' 0' crcData' 0' data.Length - 4);  
Magic Number,System451.Communication.Dashboard.Net,DashboardPacketDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\DashboardPacketDataSource.cs,GetZomBUrlInfo,The following statement contains a magic number: return new ZomBUrlInfo {  	DefaultPort = 1165  };  
Magic Number,System451.Communication.Dashboard.Net,TCPDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\TCPDataSource.cs,TCPDataSource,The following statement contains a magic number: IPAddress = IPAddress.Parse ("10." + ((int)(team / 100)) + "." + ((int)(team % 100)) + ".2");  
Magic Number,System451.Communication.Dashboard.Net,TCPDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\TCPDataSource.cs,TCPDataSource,The following statement contains a magic number: IPAddress = IPAddress.Parse ("10." + ((int)(team / 100)) + "." + ((int)(team % 100)) + ".2");  
Magic Number,System451.Communication.Dashboard.Net,TCPDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\TCPDataSource.cs,TCPDataSource,The following statement contains a magic number: IPAddress = IPAddress.Parse ("10." + ((int)(team / 100)) + "." + ((int)(team % 100)) + ".2");  
Magic Number,System451.Communication.Dashboard.Net,TCPDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\TCPDataSource.cs,TCPDataSource,The following statement contains a magic number: IPAddress = IPAddress.Parse ("10." + ((int)(team / 100)) + "." + ((int)(team % 100)) + ".2");  
Magic Number,System451.Communication.Dashboard.Net,TCPDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\TCPDataSource.cs,Stop,The following statement contains a magic number: if (isrunning) {  	try {  		isrunning = false;  		Thread.Sleep (500);  		if (backThread.IsAlive)  			backThread.Abort ();  	}  	catch {  	}  	try {  		cRIOConnection.Close ();  		cRIOConnection = null;  	}  	catch {  	}  }  
Magic Number,System451.Communication.Dashboard.Net,TCPDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\TCPDataSource.cs,Stop,The following statement contains a magic number: try {  	isrunning = false;  	Thread.Sleep (500);  	if (backThread.IsAlive)  		backThread.Abort ();  }  catch {  }  
Magic Number,System451.Communication.Dashboard.Net,TCPDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\TCPDataSource.cs,Stop,The following statement contains a magic number: Thread.Sleep (500);  
Magic Number,System451.Communication.Dashboard.Net,TCPDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\TCPDataSource.cs,TickleClientWorker,The following statement contains a magic number: while (isrunning) {  	try {  		cRIOConnection.Connect (IPAddress' Port);  		zb = cRIOConnection.GetStream ();  		break;  	}  	catch (SocketException) {  		//Nohbdy is around  	}  	catch (ThreadAbortException) {  		isrunning = false;  		return;  	}  	catch (Exception ex) {  		nume++;  		DoError (ex);  		if (nume > 10) {  			isrunning = false;  			DoError (new Exception ("10 consecutive errors were encountered' stopping DashboardDataHub"));  			isrunning = false;  			return;  		}  	}  }  
Magic Number,System451.Communication.Dashboard.Net,TCPDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\TCPDataSource.cs,TickleClientWorker,The following statement contains a magic number: try {  	cRIOConnection.Connect (IPAddress' Port);  	zb = cRIOConnection.GetStream ();  	break;  }  catch (SocketException) {  	//Nohbdy is around  }  catch (ThreadAbortException) {  	isrunning = false;  	return;  }  catch (Exception ex) {  	nume++;  	DoError (ex);  	if (nume > 10) {  		isrunning = false;  		DoError (new Exception ("10 consecutive errors were encountered' stopping DashboardDataHub"));  		isrunning = false;  		return;  	}  }  
Magic Number,System451.Communication.Dashboard.Net,TCPDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\TCPDataSource.cs,TickleClientWorker,The following statement contains a magic number: if (nume > 10) {  	isrunning = false;  	DoError (new Exception ("10 consecutive errors were encountered' stopping DashboardDataHub"));  	isrunning = false;  	return;  }  
Magic Number,System451.Communication.Dashboard.Net,TCPDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\TCPDataSource.cs,TickleClientWorker,The following statement contains a magic number: try {  	//config  	int last;  	do {  		last = zb.ReadByte ();  		switch (last) {  		case 0x45:  			implicitSend = false;  			break;  		case 0x49:  			implicitSend = true;  			break;  		case 0x4C:  			longNames = true;  			break;  		case -1:  			return;  		default:  			break;  		}  	}  	while (last != 0x00);  	//end config  	int namel' valuel;  	while (isrunning) {  		try {  			last = zb.ReadByte ();  			//Fire! on 0  			if (last == 0x00 || implicitSend) {  				if (kys.Count > 0) {  					//fire events  					if (DataRecieved != null)  						DataRecieved (this' new EventArgs ());  					if (NewDataRecieved != null)  						NewDataRecieved (this' new NewDataRecievedEventArgs (kys));  					kys = new ZomBDataLookup ();  				}  				if (last == 0x00)  					continue;  			}  			if (last == -1)  				return;  			//stream closed  			//last byte was name lenght  			namel = last;  			//Read the value  			if (longNames) {  				valuel = (zb.ReadByte () << 8) + zb.ReadByte ();  			}  			else {  				valuel = zb.ReadByte ();  			}  			if (valuel < 0)  				return;  			//stream closed  			//Make the buffers  			byte[] buf = new byte[namel]' vbuf = new byte[valuel];  			//Read the name  			while (cRIOConnection.Available < namel)  				Thread.Sleep (1);  			zb.Read (buf' 0' namel);  			//and the value  			while (cRIOConnection.Available < valuel)  				Thread.Sleep (1);  			zb.Read (vbuf' 0' valuel);  			string nom = Encoding.UTF8.GetString (buf)' val = Encoding.UTF8.GetString (vbuf);  			//if peeking' send  			if (peeking) {  				dp.Invoke (cb' nom);  			}  			else {  				//otherwise  				//Add the value  				if (kys.ContainsKey (nom))  					kys [nom] = new ZomBDataObject (val' ZomBDataTypeHint.Unknown);  				else  					kys.Add (nom' new ZomBDataObject (val' ZomBDataTypeHint.Unknown));  			}  			//Decrease error  			if (nume > 0)  				nume--;  		}  		catch (ThreadAbortException) {  			isrunning = false;  			return;  		}  		catch (Exception ex) {  			nume++;  			DoError (ex);  			if (nume > 10) {  				isrunning = false;  				DoError (new Exception ("10 consecutive errors were encountered' stopping DashboardDataHub"));  				isrunning = false;  				return;  			}  		}  	}  }  catch {  }  //Don't let em leak!  finally {  	if (zb != null)  		zb.Dispose ();  	try {  		cRIOConnection.Close ();  	}  	catch {  	}  	cRIOConnection = null;  }  
Magic Number,System451.Communication.Dashboard.Net,TCPDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\TCPDataSource.cs,TickleClientWorker,The following statement contains a magic number: try {  	//config  	int last;  	do {  		last = zb.ReadByte ();  		switch (last) {  		case 0x45:  			implicitSend = false;  			break;  		case 0x49:  			implicitSend = true;  			break;  		case 0x4C:  			longNames = true;  			break;  		case -1:  			return;  		default:  			break;  		}  	}  	while (last != 0x00);  	//end config  	int namel' valuel;  	while (isrunning) {  		try {  			last = zb.ReadByte ();  			//Fire! on 0  			if (last == 0x00 || implicitSend) {  				if (kys.Count > 0) {  					//fire events  					if (DataRecieved != null)  						DataRecieved (this' new EventArgs ());  					if (NewDataRecieved != null)  						NewDataRecieved (this' new NewDataRecievedEventArgs (kys));  					kys = new ZomBDataLookup ();  				}  				if (last == 0x00)  					continue;  			}  			if (last == -1)  				return;  			//stream closed  			//last byte was name lenght  			namel = last;  			//Read the value  			if (longNames) {  				valuel = (zb.ReadByte () << 8) + zb.ReadByte ();  			}  			else {  				valuel = zb.ReadByte ();  			}  			if (valuel < 0)  				return;  			//stream closed  			//Make the buffers  			byte[] buf = new byte[namel]' vbuf = new byte[valuel];  			//Read the name  			while (cRIOConnection.Available < namel)  				Thread.Sleep (1);  			zb.Read (buf' 0' namel);  			//and the value  			while (cRIOConnection.Available < valuel)  				Thread.Sleep (1);  			zb.Read (vbuf' 0' valuel);  			string nom = Encoding.UTF8.GetString (buf)' val = Encoding.UTF8.GetString (vbuf);  			//if peeking' send  			if (peeking) {  				dp.Invoke (cb' nom);  			}  			else {  				//otherwise  				//Add the value  				if (kys.ContainsKey (nom))  					kys [nom] = new ZomBDataObject (val' ZomBDataTypeHint.Unknown);  				else  					kys.Add (nom' new ZomBDataObject (val' ZomBDataTypeHint.Unknown));  			}  			//Decrease error  			if (nume > 0)  				nume--;  		}  		catch (ThreadAbortException) {  			isrunning = false;  			return;  		}  		catch (Exception ex) {  			nume++;  			DoError (ex);  			if (nume > 10) {  				isrunning = false;  				DoError (new Exception ("10 consecutive errors were encountered' stopping DashboardDataHub"));  				isrunning = false;  				return;  			}  		}  	}  }  catch {  }  //Don't let em leak!  finally {  	if (zb != null)  		zb.Dispose ();  	try {  		cRIOConnection.Close ();  	}  	catch {  	}  	cRIOConnection = null;  }  
Magic Number,System451.Communication.Dashboard.Net,TCPDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\TCPDataSource.cs,TickleClientWorker,The following statement contains a magic number: while (isrunning) {  	try {  		last = zb.ReadByte ();  		//Fire! on 0  		if (last == 0x00 || implicitSend) {  			if (kys.Count > 0) {  				//fire events  				if (DataRecieved != null)  					DataRecieved (this' new EventArgs ());  				if (NewDataRecieved != null)  					NewDataRecieved (this' new NewDataRecievedEventArgs (kys));  				kys = new ZomBDataLookup ();  			}  			if (last == 0x00)  				continue;  		}  		if (last == -1)  			return;  		//stream closed  		//last byte was name lenght  		namel = last;  		//Read the value  		if (longNames) {  			valuel = (zb.ReadByte () << 8) + zb.ReadByte ();  		}  		else {  			valuel = zb.ReadByte ();  		}  		if (valuel < 0)  			return;  		//stream closed  		//Make the buffers  		byte[] buf = new byte[namel]' vbuf = new byte[valuel];  		//Read the name  		while (cRIOConnection.Available < namel)  			Thread.Sleep (1);  		zb.Read (buf' 0' namel);  		//and the value  		while (cRIOConnection.Available < valuel)  			Thread.Sleep (1);  		zb.Read (vbuf' 0' valuel);  		string nom = Encoding.UTF8.GetString (buf)' val = Encoding.UTF8.GetString (vbuf);  		//if peeking' send  		if (peeking) {  			dp.Invoke (cb' nom);  		}  		else {  			//otherwise  			//Add the value  			if (kys.ContainsKey (nom))  				kys [nom] = new ZomBDataObject (val' ZomBDataTypeHint.Unknown);  			else  				kys.Add (nom' new ZomBDataObject (val' ZomBDataTypeHint.Unknown));  		}  		//Decrease error  		if (nume > 0)  			nume--;  	}  	catch (ThreadAbortException) {  		isrunning = false;  		return;  	}  	catch (Exception ex) {  		nume++;  		DoError (ex);  		if (nume > 10) {  			isrunning = false;  			DoError (new Exception ("10 consecutive errors were encountered' stopping DashboardDataHub"));  			isrunning = false;  			return;  		}  	}  }  
Magic Number,System451.Communication.Dashboard.Net,TCPDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\TCPDataSource.cs,TickleClientWorker,The following statement contains a magic number: while (isrunning) {  	try {  		last = zb.ReadByte ();  		//Fire! on 0  		if (last == 0x00 || implicitSend) {  			if (kys.Count > 0) {  				//fire events  				if (DataRecieved != null)  					DataRecieved (this' new EventArgs ());  				if (NewDataRecieved != null)  					NewDataRecieved (this' new NewDataRecievedEventArgs (kys));  				kys = new ZomBDataLookup ();  			}  			if (last == 0x00)  				continue;  		}  		if (last == -1)  			return;  		//stream closed  		//last byte was name lenght  		namel = last;  		//Read the value  		if (longNames) {  			valuel = (zb.ReadByte () << 8) + zb.ReadByte ();  		}  		else {  			valuel = zb.ReadByte ();  		}  		if (valuel < 0)  			return;  		//stream closed  		//Make the buffers  		byte[] buf = new byte[namel]' vbuf = new byte[valuel];  		//Read the name  		while (cRIOConnection.Available < namel)  			Thread.Sleep (1);  		zb.Read (buf' 0' namel);  		//and the value  		while (cRIOConnection.Available < valuel)  			Thread.Sleep (1);  		zb.Read (vbuf' 0' valuel);  		string nom = Encoding.UTF8.GetString (buf)' val = Encoding.UTF8.GetString (vbuf);  		//if peeking' send  		if (peeking) {  			dp.Invoke (cb' nom);  		}  		else {  			//otherwise  			//Add the value  			if (kys.ContainsKey (nom))  				kys [nom] = new ZomBDataObject (val' ZomBDataTypeHint.Unknown);  			else  				kys.Add (nom' new ZomBDataObject (val' ZomBDataTypeHint.Unknown));  		}  		//Decrease error  		if (nume > 0)  			nume--;  	}  	catch (ThreadAbortException) {  		isrunning = false;  		return;  	}  	catch (Exception ex) {  		nume++;  		DoError (ex);  		if (nume > 10) {  			isrunning = false;  			DoError (new Exception ("10 consecutive errors were encountered' stopping DashboardDataHub"));  			isrunning = false;  			return;  		}  	}  }  
Magic Number,System451.Communication.Dashboard.Net,TCPDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\TCPDataSource.cs,TickleClientWorker,The following statement contains a magic number: try {  	last = zb.ReadByte ();  	//Fire! on 0  	if (last == 0x00 || implicitSend) {  		if (kys.Count > 0) {  			//fire events  			if (DataRecieved != null)  				DataRecieved (this' new EventArgs ());  			if (NewDataRecieved != null)  				NewDataRecieved (this' new NewDataRecievedEventArgs (kys));  			kys = new ZomBDataLookup ();  		}  		if (last == 0x00)  			continue;  	}  	if (last == -1)  		return;  	//stream closed  	//last byte was name lenght  	namel = last;  	//Read the value  	if (longNames) {  		valuel = (zb.ReadByte () << 8) + zb.ReadByte ();  	}  	else {  		valuel = zb.ReadByte ();  	}  	if (valuel < 0)  		return;  	//stream closed  	//Make the buffers  	byte[] buf = new byte[namel]' vbuf = new byte[valuel];  	//Read the name  	while (cRIOConnection.Available < namel)  		Thread.Sleep (1);  	zb.Read (buf' 0' namel);  	//and the value  	while (cRIOConnection.Available < valuel)  		Thread.Sleep (1);  	zb.Read (vbuf' 0' valuel);  	string nom = Encoding.UTF8.GetString (buf)' val = Encoding.UTF8.GetString (vbuf);  	//if peeking' send  	if (peeking) {  		dp.Invoke (cb' nom);  	}  	else {  		//otherwise  		//Add the value  		if (kys.ContainsKey (nom))  			kys [nom] = new ZomBDataObject (val' ZomBDataTypeHint.Unknown);  		else  			kys.Add (nom' new ZomBDataObject (val' ZomBDataTypeHint.Unknown));  	}  	//Decrease error  	if (nume > 0)  		nume--;  }  catch (ThreadAbortException) {  	isrunning = false;  	return;  }  catch (Exception ex) {  	nume++;  	DoError (ex);  	if (nume > 10) {  		isrunning = false;  		DoError (new Exception ("10 consecutive errors were encountered' stopping DashboardDataHub"));  		isrunning = false;  		return;  	}  }  
Magic Number,System451.Communication.Dashboard.Net,TCPDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\TCPDataSource.cs,TickleClientWorker,The following statement contains a magic number: try {  	last = zb.ReadByte ();  	//Fire! on 0  	if (last == 0x00 || implicitSend) {  		if (kys.Count > 0) {  			//fire events  			if (DataRecieved != null)  				DataRecieved (this' new EventArgs ());  			if (NewDataRecieved != null)  				NewDataRecieved (this' new NewDataRecievedEventArgs (kys));  			kys = new ZomBDataLookup ();  		}  		if (last == 0x00)  			continue;  	}  	if (last == -1)  		return;  	//stream closed  	//last byte was name lenght  	namel = last;  	//Read the value  	if (longNames) {  		valuel = (zb.ReadByte () << 8) + zb.ReadByte ();  	}  	else {  		valuel = zb.ReadByte ();  	}  	if (valuel < 0)  		return;  	//stream closed  	//Make the buffers  	byte[] buf = new byte[namel]' vbuf = new byte[valuel];  	//Read the name  	while (cRIOConnection.Available < namel)  		Thread.Sleep (1);  	zb.Read (buf' 0' namel);  	//and the value  	while (cRIOConnection.Available < valuel)  		Thread.Sleep (1);  	zb.Read (vbuf' 0' valuel);  	string nom = Encoding.UTF8.GetString (buf)' val = Encoding.UTF8.GetString (vbuf);  	//if peeking' send  	if (peeking) {  		dp.Invoke (cb' nom);  	}  	else {  		//otherwise  		//Add the value  		if (kys.ContainsKey (nom))  			kys [nom] = new ZomBDataObject (val' ZomBDataTypeHint.Unknown);  		else  			kys.Add (nom' new ZomBDataObject (val' ZomBDataTypeHint.Unknown));  	}  	//Decrease error  	if (nume > 0)  		nume--;  }  catch (ThreadAbortException) {  	isrunning = false;  	return;  }  catch (Exception ex) {  	nume++;  	DoError (ex);  	if (nume > 10) {  		isrunning = false;  		DoError (new Exception ("10 consecutive errors were encountered' stopping DashboardDataHub"));  		isrunning = false;  		return;  	}  }  
Magic Number,System451.Communication.Dashboard.Net,TCPDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\TCPDataSource.cs,TickleClientWorker,The following statement contains a magic number: if (longNames) {  	valuel = (zb.ReadByte () << 8) + zb.ReadByte ();  }  else {  	valuel = zb.ReadByte ();  }  
Magic Number,System451.Communication.Dashboard.Net,TCPDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\TCPDataSource.cs,TickleClientWorker,The following statement contains a magic number: valuel = (zb.ReadByte () << 8) + zb.ReadByte ();  
Magic Number,System451.Communication.Dashboard.Net,TCPDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\TCPDataSource.cs,TickleClientWorker,The following statement contains a magic number: if (nume > 10) {  	isrunning = false;  	DoError (new Exception ("10 consecutive errors were encountered' stopping DashboardDataHub"));  	isrunning = false;  	return;  }  
Magic Number,System451.Communication.Dashboard.Net,TCPDataSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\TCPDataSource.cs,GetZomBUrlInfo,The following statement contains a magic number: return new ZomBUrlInfo {  	DefaultPort = 9066  };  
Magic Number,System451.Communication.Dashboard.Net.Video,MJPEGVideoSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\Video\MJpegStream.cs,Init,The following statement contains a magic number: Port = 80;  
Magic Number,System451.Communication.Dashboard.Net.Video,MJPEGVideoSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\Video\MJpegStream.cs,GraveWorker,The following statement contains a magic number: while (shouldBeRunning) {  	tryagain:  	//http://myserver/axis-cgi/mjpg/video.cgi  	//produces:  	//Content-Type: multipart/x-mixed-replace; boundary=myboundary  	//  	//--myboundary  	//Content-Type: image/jpeg  	//Content-Length: 123  	//  	//<JPEG image data>   	//--myboundary  	//Content-Type: image/jpeg   	//Content-Length: 456   	//  	//<JPEG image data>   	//--myboundary  	//                User-Agent: HTTPStreamClient\n\  	//Connection: Keep-Alive\n\  	//Cache-Control: no-cache\n\  	//Authorization: Basic RlJDOkZSQw==\n\n";  	HttpWebRequest hrq = (HttpWebRequest)HttpWebRequest.Create ("http://" + IP.ToString () + "/axis-cgi/mjpg/video.cgi?fps=" + FPS.ToString ());  	hrq.UserAgent = "ZomB/" + System451.Communication.Dashboard.ZVersionMgr.ShortNumber + " (Streaming Client)";  	hrq.Credentials = new NetworkCredential ("FRC"' "FRC");  	Stream ns;  	StreamReader sr;  	try {  		//attach limb  		HttpWebResponse resp = (HttpWebResponse)hrq.GetResponse ();  		ns = resp.GetResponseStream ();  		if (resp.StatusCode != HttpStatusCode.OK) {  			Thread.Sleep (1000);  			er ("yaah! retrying!");  		}  		else {  			string boundrywaters = resp.ContentType.Substring (resp.ContentType.IndexOf ("boundary=") + 9);  			if (boundrywaters.Substring (0' 2) == "--")  				boundrywaters = boundrywaters.Substring (2);  			Running = true;  			int image_size = 0;  			char[] buf;  			sr = new StreamReader (ns' new binencode ());  			while (shouldBeRunning) {  				Thread.Sleep (1);  				//let it pile up!  				string sbuf = null;  				int iiii = 0;  				while (sbuf != "--" + boundrywaters) {  					sbuf = sr.ReadLine ();  					iiii += sbuf.Length;  					if (sbuf == null || iiii > 4000000)  						//4MB? we fail!  						goto tryagain;  				}  				sbuf = sr.ReadLine ();  				while (!sbuf.StartsWith ("Content-Type"' StringComparison.CurrentCultureIgnoreCase)) {  					sbuf = sr.ReadLine ();  				}  				sbuf = sr.ReadLine ();  				image_size = int.Parse (sbuf.Substring (sbuf.IndexOf (": ") + 2));  				//Content-Length  				sbuf = sr.ReadLine ();  				//clear the next line  				// image size being less than zero wouldn't make sense' nor larger than buffer  				if (image_size > 0 && image_size <= 2048576) {  					buf = new char[image_size];  					Thread.Sleep (1);  					byte[] bbuf = new byte[image_size];  					int red = 0;  					while (red < image_size) {  						int tred = sr.Read (buf' red' image_size - red);  						if (tred < 1)  							break;  						red += tred;  					}  					for (int i = 0; i < image_size; i++) {  						bbuf [i] = (byte)buf [i];  					}  					//Save Image  					CurImg = Bitmap.FromStream (new MemoryStream (bbuf));  					if (NewImageRecieved != null)  						NewImageRecieved (this' new NewImageDataRecievedEventArgs (CurImg' new MemoryStream (bbuf)));  				}  				else  					er ("Unknown size");  			}  		}  	}  	catch {  		Running = false;  		return;  		//TODO: figure out better way to dispose of bad sockets when we are not connected to the bot  	}  }  
Magic Number,System451.Communication.Dashboard.Net.Video,MJPEGVideoSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\Video\MJpegStream.cs,GraveWorker,The following statement contains a magic number: while (shouldBeRunning) {  	tryagain:  	//http://myserver/axis-cgi/mjpg/video.cgi  	//produces:  	//Content-Type: multipart/x-mixed-replace; boundary=myboundary  	//  	//--myboundary  	//Content-Type: image/jpeg  	//Content-Length: 123  	//  	//<JPEG image data>   	//--myboundary  	//Content-Type: image/jpeg   	//Content-Length: 456   	//  	//<JPEG image data>   	//--myboundary  	//                User-Agent: HTTPStreamClient\n\  	//Connection: Keep-Alive\n\  	//Cache-Control: no-cache\n\  	//Authorization: Basic RlJDOkZSQw==\n\n";  	HttpWebRequest hrq = (HttpWebRequest)HttpWebRequest.Create ("http://" + IP.ToString () + "/axis-cgi/mjpg/video.cgi?fps=" + FPS.ToString ());  	hrq.UserAgent = "ZomB/" + System451.Communication.Dashboard.ZVersionMgr.ShortNumber + " (Streaming Client)";  	hrq.Credentials = new NetworkCredential ("FRC"' "FRC");  	Stream ns;  	StreamReader sr;  	try {  		//attach limb  		HttpWebResponse resp = (HttpWebResponse)hrq.GetResponse ();  		ns = resp.GetResponseStream ();  		if (resp.StatusCode != HttpStatusCode.OK) {  			Thread.Sleep (1000);  			er ("yaah! retrying!");  		}  		else {  			string boundrywaters = resp.ContentType.Substring (resp.ContentType.IndexOf ("boundary=") + 9);  			if (boundrywaters.Substring (0' 2) == "--")  				boundrywaters = boundrywaters.Substring (2);  			Running = true;  			int image_size = 0;  			char[] buf;  			sr = new StreamReader (ns' new binencode ());  			while (shouldBeRunning) {  				Thread.Sleep (1);  				//let it pile up!  				string sbuf = null;  				int iiii = 0;  				while (sbuf != "--" + boundrywaters) {  					sbuf = sr.ReadLine ();  					iiii += sbuf.Length;  					if (sbuf == null || iiii > 4000000)  						//4MB? we fail!  						goto tryagain;  				}  				sbuf = sr.ReadLine ();  				while (!sbuf.StartsWith ("Content-Type"' StringComparison.CurrentCultureIgnoreCase)) {  					sbuf = sr.ReadLine ();  				}  				sbuf = sr.ReadLine ();  				image_size = int.Parse (sbuf.Substring (sbuf.IndexOf (": ") + 2));  				//Content-Length  				sbuf = sr.ReadLine ();  				//clear the next line  				// image size being less than zero wouldn't make sense' nor larger than buffer  				if (image_size > 0 && image_size <= 2048576) {  					buf = new char[image_size];  					Thread.Sleep (1);  					byte[] bbuf = new byte[image_size];  					int red = 0;  					while (red < image_size) {  						int tred = sr.Read (buf' red' image_size - red);  						if (tred < 1)  							break;  						red += tred;  					}  					for (int i = 0; i < image_size; i++) {  						bbuf [i] = (byte)buf [i];  					}  					//Save Image  					CurImg = Bitmap.FromStream (new MemoryStream (bbuf));  					if (NewImageRecieved != null)  						NewImageRecieved (this' new NewImageDataRecievedEventArgs (CurImg' new MemoryStream (bbuf)));  				}  				else  					er ("Unknown size");  			}  		}  	}  	catch {  		Running = false;  		return;  		//TODO: figure out better way to dispose of bad sockets when we are not connected to the bot  	}  }  
Magic Number,System451.Communication.Dashboard.Net.Video,MJPEGVideoSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\Video\MJpegStream.cs,GraveWorker,The following statement contains a magic number: while (shouldBeRunning) {  	tryagain:  	//http://myserver/axis-cgi/mjpg/video.cgi  	//produces:  	//Content-Type: multipart/x-mixed-replace; boundary=myboundary  	//  	//--myboundary  	//Content-Type: image/jpeg  	//Content-Length: 123  	//  	//<JPEG image data>   	//--myboundary  	//Content-Type: image/jpeg   	//Content-Length: 456   	//  	//<JPEG image data>   	//--myboundary  	//                User-Agent: HTTPStreamClient\n\  	//Connection: Keep-Alive\n\  	//Cache-Control: no-cache\n\  	//Authorization: Basic RlJDOkZSQw==\n\n";  	HttpWebRequest hrq = (HttpWebRequest)HttpWebRequest.Create ("http://" + IP.ToString () + "/axis-cgi/mjpg/video.cgi?fps=" + FPS.ToString ());  	hrq.UserAgent = "ZomB/" + System451.Communication.Dashboard.ZVersionMgr.ShortNumber + " (Streaming Client)";  	hrq.Credentials = new NetworkCredential ("FRC"' "FRC");  	Stream ns;  	StreamReader sr;  	try {  		//attach limb  		HttpWebResponse resp = (HttpWebResponse)hrq.GetResponse ();  		ns = resp.GetResponseStream ();  		if (resp.StatusCode != HttpStatusCode.OK) {  			Thread.Sleep (1000);  			er ("yaah! retrying!");  		}  		else {  			string boundrywaters = resp.ContentType.Substring (resp.ContentType.IndexOf ("boundary=") + 9);  			if (boundrywaters.Substring (0' 2) == "--")  				boundrywaters = boundrywaters.Substring (2);  			Running = true;  			int image_size = 0;  			char[] buf;  			sr = new StreamReader (ns' new binencode ());  			while (shouldBeRunning) {  				Thread.Sleep (1);  				//let it pile up!  				string sbuf = null;  				int iiii = 0;  				while (sbuf != "--" + boundrywaters) {  					sbuf = sr.ReadLine ();  					iiii += sbuf.Length;  					if (sbuf == null || iiii > 4000000)  						//4MB? we fail!  						goto tryagain;  				}  				sbuf = sr.ReadLine ();  				while (!sbuf.StartsWith ("Content-Type"' StringComparison.CurrentCultureIgnoreCase)) {  					sbuf = sr.ReadLine ();  				}  				sbuf = sr.ReadLine ();  				image_size = int.Parse (sbuf.Substring (sbuf.IndexOf (": ") + 2));  				//Content-Length  				sbuf = sr.ReadLine ();  				//clear the next line  				// image size being less than zero wouldn't make sense' nor larger than buffer  				if (image_size > 0 && image_size <= 2048576) {  					buf = new char[image_size];  					Thread.Sleep (1);  					byte[] bbuf = new byte[image_size];  					int red = 0;  					while (red < image_size) {  						int tred = sr.Read (buf' red' image_size - red);  						if (tred < 1)  							break;  						red += tred;  					}  					for (int i = 0; i < image_size; i++) {  						bbuf [i] = (byte)buf [i];  					}  					//Save Image  					CurImg = Bitmap.FromStream (new MemoryStream (bbuf));  					if (NewImageRecieved != null)  						NewImageRecieved (this' new NewImageDataRecievedEventArgs (CurImg' new MemoryStream (bbuf)));  				}  				else  					er ("Unknown size");  			}  		}  	}  	catch {  		Running = false;  		return;  		//TODO: figure out better way to dispose of bad sockets when we are not connected to the bot  	}  }  
Magic Number,System451.Communication.Dashboard.Net.Video,MJPEGVideoSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\Video\MJpegStream.cs,GraveWorker,The following statement contains a magic number: while (shouldBeRunning) {  	tryagain:  	//http://myserver/axis-cgi/mjpg/video.cgi  	//produces:  	//Content-Type: multipart/x-mixed-replace; boundary=myboundary  	//  	//--myboundary  	//Content-Type: image/jpeg  	//Content-Length: 123  	//  	//<JPEG image data>   	//--myboundary  	//Content-Type: image/jpeg   	//Content-Length: 456   	//  	//<JPEG image data>   	//--myboundary  	//                User-Agent: HTTPStreamClient\n\  	//Connection: Keep-Alive\n\  	//Cache-Control: no-cache\n\  	//Authorization: Basic RlJDOkZSQw==\n\n";  	HttpWebRequest hrq = (HttpWebRequest)HttpWebRequest.Create ("http://" + IP.ToString () + "/axis-cgi/mjpg/video.cgi?fps=" + FPS.ToString ());  	hrq.UserAgent = "ZomB/" + System451.Communication.Dashboard.ZVersionMgr.ShortNumber + " (Streaming Client)";  	hrq.Credentials = new NetworkCredential ("FRC"' "FRC");  	Stream ns;  	StreamReader sr;  	try {  		//attach limb  		HttpWebResponse resp = (HttpWebResponse)hrq.GetResponse ();  		ns = resp.GetResponseStream ();  		if (resp.StatusCode != HttpStatusCode.OK) {  			Thread.Sleep (1000);  			er ("yaah! retrying!");  		}  		else {  			string boundrywaters = resp.ContentType.Substring (resp.ContentType.IndexOf ("boundary=") + 9);  			if (boundrywaters.Substring (0' 2) == "--")  				boundrywaters = boundrywaters.Substring (2);  			Running = true;  			int image_size = 0;  			char[] buf;  			sr = new StreamReader (ns' new binencode ());  			while (shouldBeRunning) {  				Thread.Sleep (1);  				//let it pile up!  				string sbuf = null;  				int iiii = 0;  				while (sbuf != "--" + boundrywaters) {  					sbuf = sr.ReadLine ();  					iiii += sbuf.Length;  					if (sbuf == null || iiii > 4000000)  						//4MB? we fail!  						goto tryagain;  				}  				sbuf = sr.ReadLine ();  				while (!sbuf.StartsWith ("Content-Type"' StringComparison.CurrentCultureIgnoreCase)) {  					sbuf = sr.ReadLine ();  				}  				sbuf = sr.ReadLine ();  				image_size = int.Parse (sbuf.Substring (sbuf.IndexOf (": ") + 2));  				//Content-Length  				sbuf = sr.ReadLine ();  				//clear the next line  				// image size being less than zero wouldn't make sense' nor larger than buffer  				if (image_size > 0 && image_size <= 2048576) {  					buf = new char[image_size];  					Thread.Sleep (1);  					byte[] bbuf = new byte[image_size];  					int red = 0;  					while (red < image_size) {  						int tred = sr.Read (buf' red' image_size - red);  						if (tred < 1)  							break;  						red += tred;  					}  					for (int i = 0; i < image_size; i++) {  						bbuf [i] = (byte)buf [i];  					}  					//Save Image  					CurImg = Bitmap.FromStream (new MemoryStream (bbuf));  					if (NewImageRecieved != null)  						NewImageRecieved (this' new NewImageDataRecievedEventArgs (CurImg' new MemoryStream (bbuf)));  				}  				else  					er ("Unknown size");  			}  		}  	}  	catch {  		Running = false;  		return;  		//TODO: figure out better way to dispose of bad sockets when we are not connected to the bot  	}  }  
Magic Number,System451.Communication.Dashboard.Net.Video,MJPEGVideoSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\Video\MJpegStream.cs,GraveWorker,The following statement contains a magic number: while (shouldBeRunning) {  	tryagain:  	//http://myserver/axis-cgi/mjpg/video.cgi  	//produces:  	//Content-Type: multipart/x-mixed-replace; boundary=myboundary  	//  	//--myboundary  	//Content-Type: image/jpeg  	//Content-Length: 123  	//  	//<JPEG image data>   	//--myboundary  	//Content-Type: image/jpeg   	//Content-Length: 456   	//  	//<JPEG image data>   	//--myboundary  	//                User-Agent: HTTPStreamClient\n\  	//Connection: Keep-Alive\n\  	//Cache-Control: no-cache\n\  	//Authorization: Basic RlJDOkZSQw==\n\n";  	HttpWebRequest hrq = (HttpWebRequest)HttpWebRequest.Create ("http://" + IP.ToString () + "/axis-cgi/mjpg/video.cgi?fps=" + FPS.ToString ());  	hrq.UserAgent = "ZomB/" + System451.Communication.Dashboard.ZVersionMgr.ShortNumber + " (Streaming Client)";  	hrq.Credentials = new NetworkCredential ("FRC"' "FRC");  	Stream ns;  	StreamReader sr;  	try {  		//attach limb  		HttpWebResponse resp = (HttpWebResponse)hrq.GetResponse ();  		ns = resp.GetResponseStream ();  		if (resp.StatusCode != HttpStatusCode.OK) {  			Thread.Sleep (1000);  			er ("yaah! retrying!");  		}  		else {  			string boundrywaters = resp.ContentType.Substring (resp.ContentType.IndexOf ("boundary=") + 9);  			if (boundrywaters.Substring (0' 2) == "--")  				boundrywaters = boundrywaters.Substring (2);  			Running = true;  			int image_size = 0;  			char[] buf;  			sr = new StreamReader (ns' new binencode ());  			while (shouldBeRunning) {  				Thread.Sleep (1);  				//let it pile up!  				string sbuf = null;  				int iiii = 0;  				while (sbuf != "--" + boundrywaters) {  					sbuf = sr.ReadLine ();  					iiii += sbuf.Length;  					if (sbuf == null || iiii > 4000000)  						//4MB? we fail!  						goto tryagain;  				}  				sbuf = sr.ReadLine ();  				while (!sbuf.StartsWith ("Content-Type"' StringComparison.CurrentCultureIgnoreCase)) {  					sbuf = sr.ReadLine ();  				}  				sbuf = sr.ReadLine ();  				image_size = int.Parse (sbuf.Substring (sbuf.IndexOf (": ") + 2));  				//Content-Length  				sbuf = sr.ReadLine ();  				//clear the next line  				// image size being less than zero wouldn't make sense' nor larger than buffer  				if (image_size > 0 && image_size <= 2048576) {  					buf = new char[image_size];  					Thread.Sleep (1);  					byte[] bbuf = new byte[image_size];  					int red = 0;  					while (red < image_size) {  						int tred = sr.Read (buf' red' image_size - red);  						if (tred < 1)  							break;  						red += tred;  					}  					for (int i = 0; i < image_size; i++) {  						bbuf [i] = (byte)buf [i];  					}  					//Save Image  					CurImg = Bitmap.FromStream (new MemoryStream (bbuf));  					if (NewImageRecieved != null)  						NewImageRecieved (this' new NewImageDataRecievedEventArgs (CurImg' new MemoryStream (bbuf)));  				}  				else  					er ("Unknown size");  			}  		}  	}  	catch {  		Running = false;  		return;  		//TODO: figure out better way to dispose of bad sockets when we are not connected to the bot  	}  }  
Magic Number,System451.Communication.Dashboard.Net.Video,MJPEGVideoSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\Video\MJpegStream.cs,GraveWorker,The following statement contains a magic number: while (shouldBeRunning) {  	tryagain:  	//http://myserver/axis-cgi/mjpg/video.cgi  	//produces:  	//Content-Type: multipart/x-mixed-replace; boundary=myboundary  	//  	//--myboundary  	//Content-Type: image/jpeg  	//Content-Length: 123  	//  	//<JPEG image data>   	//--myboundary  	//Content-Type: image/jpeg   	//Content-Length: 456   	//  	//<JPEG image data>   	//--myboundary  	//                User-Agent: HTTPStreamClient\n\  	//Connection: Keep-Alive\n\  	//Cache-Control: no-cache\n\  	//Authorization: Basic RlJDOkZSQw==\n\n";  	HttpWebRequest hrq = (HttpWebRequest)HttpWebRequest.Create ("http://" + IP.ToString () + "/axis-cgi/mjpg/video.cgi?fps=" + FPS.ToString ());  	hrq.UserAgent = "ZomB/" + System451.Communication.Dashboard.ZVersionMgr.ShortNumber + " (Streaming Client)";  	hrq.Credentials = new NetworkCredential ("FRC"' "FRC");  	Stream ns;  	StreamReader sr;  	try {  		//attach limb  		HttpWebResponse resp = (HttpWebResponse)hrq.GetResponse ();  		ns = resp.GetResponseStream ();  		if (resp.StatusCode != HttpStatusCode.OK) {  			Thread.Sleep (1000);  			er ("yaah! retrying!");  		}  		else {  			string boundrywaters = resp.ContentType.Substring (resp.ContentType.IndexOf ("boundary=") + 9);  			if (boundrywaters.Substring (0' 2) == "--")  				boundrywaters = boundrywaters.Substring (2);  			Running = true;  			int image_size = 0;  			char[] buf;  			sr = new StreamReader (ns' new binencode ());  			while (shouldBeRunning) {  				Thread.Sleep (1);  				//let it pile up!  				string sbuf = null;  				int iiii = 0;  				while (sbuf != "--" + boundrywaters) {  					sbuf = sr.ReadLine ();  					iiii += sbuf.Length;  					if (sbuf == null || iiii > 4000000)  						//4MB? we fail!  						goto tryagain;  				}  				sbuf = sr.ReadLine ();  				while (!sbuf.StartsWith ("Content-Type"' StringComparison.CurrentCultureIgnoreCase)) {  					sbuf = sr.ReadLine ();  				}  				sbuf = sr.ReadLine ();  				image_size = int.Parse (sbuf.Substring (sbuf.IndexOf (": ") + 2));  				//Content-Length  				sbuf = sr.ReadLine ();  				//clear the next line  				// image size being less than zero wouldn't make sense' nor larger than buffer  				if (image_size > 0 && image_size <= 2048576) {  					buf = new char[image_size];  					Thread.Sleep (1);  					byte[] bbuf = new byte[image_size];  					int red = 0;  					while (red < image_size) {  						int tred = sr.Read (buf' red' image_size - red);  						if (tred < 1)  							break;  						red += tred;  					}  					for (int i = 0; i < image_size; i++) {  						bbuf [i] = (byte)buf [i];  					}  					//Save Image  					CurImg = Bitmap.FromStream (new MemoryStream (bbuf));  					if (NewImageRecieved != null)  						NewImageRecieved (this' new NewImageDataRecievedEventArgs (CurImg' new MemoryStream (bbuf)));  				}  				else  					er ("Unknown size");  			}  		}  	}  	catch {  		Running = false;  		return;  		//TODO: figure out better way to dispose of bad sockets when we are not connected to the bot  	}  }  
Magic Number,System451.Communication.Dashboard.Net.Video,MJPEGVideoSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\Video\MJpegStream.cs,GraveWorker,The following statement contains a magic number: while (shouldBeRunning) {  	tryagain:  	//http://myserver/axis-cgi/mjpg/video.cgi  	//produces:  	//Content-Type: multipart/x-mixed-replace; boundary=myboundary  	//  	//--myboundary  	//Content-Type: image/jpeg  	//Content-Length: 123  	//  	//<JPEG image data>   	//--myboundary  	//Content-Type: image/jpeg   	//Content-Length: 456   	//  	//<JPEG image data>   	//--myboundary  	//                User-Agent: HTTPStreamClient\n\  	//Connection: Keep-Alive\n\  	//Cache-Control: no-cache\n\  	//Authorization: Basic RlJDOkZSQw==\n\n";  	HttpWebRequest hrq = (HttpWebRequest)HttpWebRequest.Create ("http://" + IP.ToString () + "/axis-cgi/mjpg/video.cgi?fps=" + FPS.ToString ());  	hrq.UserAgent = "ZomB/" + System451.Communication.Dashboard.ZVersionMgr.ShortNumber + " (Streaming Client)";  	hrq.Credentials = new NetworkCredential ("FRC"' "FRC");  	Stream ns;  	StreamReader sr;  	try {  		//attach limb  		HttpWebResponse resp = (HttpWebResponse)hrq.GetResponse ();  		ns = resp.GetResponseStream ();  		if (resp.StatusCode != HttpStatusCode.OK) {  			Thread.Sleep (1000);  			er ("yaah! retrying!");  		}  		else {  			string boundrywaters = resp.ContentType.Substring (resp.ContentType.IndexOf ("boundary=") + 9);  			if (boundrywaters.Substring (0' 2) == "--")  				boundrywaters = boundrywaters.Substring (2);  			Running = true;  			int image_size = 0;  			char[] buf;  			sr = new StreamReader (ns' new binencode ());  			while (shouldBeRunning) {  				Thread.Sleep (1);  				//let it pile up!  				string sbuf = null;  				int iiii = 0;  				while (sbuf != "--" + boundrywaters) {  					sbuf = sr.ReadLine ();  					iiii += sbuf.Length;  					if (sbuf == null || iiii > 4000000)  						//4MB? we fail!  						goto tryagain;  				}  				sbuf = sr.ReadLine ();  				while (!sbuf.StartsWith ("Content-Type"' StringComparison.CurrentCultureIgnoreCase)) {  					sbuf = sr.ReadLine ();  				}  				sbuf = sr.ReadLine ();  				image_size = int.Parse (sbuf.Substring (sbuf.IndexOf (": ") + 2));  				//Content-Length  				sbuf = sr.ReadLine ();  				//clear the next line  				// image size being less than zero wouldn't make sense' nor larger than buffer  				if (image_size > 0 && image_size <= 2048576) {  					buf = new char[image_size];  					Thread.Sleep (1);  					byte[] bbuf = new byte[image_size];  					int red = 0;  					while (red < image_size) {  						int tred = sr.Read (buf' red' image_size - red);  						if (tred < 1)  							break;  						red += tred;  					}  					for (int i = 0; i < image_size; i++) {  						bbuf [i] = (byte)buf [i];  					}  					//Save Image  					CurImg = Bitmap.FromStream (new MemoryStream (bbuf));  					if (NewImageRecieved != null)  						NewImageRecieved (this' new NewImageDataRecievedEventArgs (CurImg' new MemoryStream (bbuf)));  				}  				else  					er ("Unknown size");  			}  		}  	}  	catch {  		Running = false;  		return;  		//TODO: figure out better way to dispose of bad sockets when we are not connected to the bot  	}  }  
Magic Number,System451.Communication.Dashboard.Net.Video,MJPEGVideoSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\Video\MJpegStream.cs,GraveWorker,The following statement contains a magic number: try {  	//attach limb  	HttpWebResponse resp = (HttpWebResponse)hrq.GetResponse ();  	ns = resp.GetResponseStream ();  	if (resp.StatusCode != HttpStatusCode.OK) {  		Thread.Sleep (1000);  		er ("yaah! retrying!");  	}  	else {  		string boundrywaters = resp.ContentType.Substring (resp.ContentType.IndexOf ("boundary=") + 9);  		if (boundrywaters.Substring (0' 2) == "--")  			boundrywaters = boundrywaters.Substring (2);  		Running = true;  		int image_size = 0;  		char[] buf;  		sr = new StreamReader (ns' new binencode ());  		while (shouldBeRunning) {  			Thread.Sleep (1);  			//let it pile up!  			string sbuf = null;  			int iiii = 0;  			while (sbuf != "--" + boundrywaters) {  				sbuf = sr.ReadLine ();  				iiii += sbuf.Length;  				if (sbuf == null || iiii > 4000000)  					//4MB? we fail!  					goto tryagain;  			}  			sbuf = sr.ReadLine ();  			while (!sbuf.StartsWith ("Content-Type"' StringComparison.CurrentCultureIgnoreCase)) {  				sbuf = sr.ReadLine ();  			}  			sbuf = sr.ReadLine ();  			image_size = int.Parse (sbuf.Substring (sbuf.IndexOf (": ") + 2));  			//Content-Length  			sbuf = sr.ReadLine ();  			//clear the next line  			// image size being less than zero wouldn't make sense' nor larger than buffer  			if (image_size > 0 && image_size <= 2048576) {  				buf = new char[image_size];  				Thread.Sleep (1);  				byte[] bbuf = new byte[image_size];  				int red = 0;  				while (red < image_size) {  					int tred = sr.Read (buf' red' image_size - red);  					if (tred < 1)  						break;  					red += tred;  				}  				for (int i = 0; i < image_size; i++) {  					bbuf [i] = (byte)buf [i];  				}  				//Save Image  				CurImg = Bitmap.FromStream (new MemoryStream (bbuf));  				if (NewImageRecieved != null)  					NewImageRecieved (this' new NewImageDataRecievedEventArgs (CurImg' new MemoryStream (bbuf)));  			}  			else  				er ("Unknown size");  		}  	}  }  catch {  	Running = false;  	return;  	//TODO: figure out better way to dispose of bad sockets when we are not connected to the bot  }  
Magic Number,System451.Communication.Dashboard.Net.Video,MJPEGVideoSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\Video\MJpegStream.cs,GraveWorker,The following statement contains a magic number: try {  	//attach limb  	HttpWebResponse resp = (HttpWebResponse)hrq.GetResponse ();  	ns = resp.GetResponseStream ();  	if (resp.StatusCode != HttpStatusCode.OK) {  		Thread.Sleep (1000);  		er ("yaah! retrying!");  	}  	else {  		string boundrywaters = resp.ContentType.Substring (resp.ContentType.IndexOf ("boundary=") + 9);  		if (boundrywaters.Substring (0' 2) == "--")  			boundrywaters = boundrywaters.Substring (2);  		Running = true;  		int image_size = 0;  		char[] buf;  		sr = new StreamReader (ns' new binencode ());  		while (shouldBeRunning) {  			Thread.Sleep (1);  			//let it pile up!  			string sbuf = null;  			int iiii = 0;  			while (sbuf != "--" + boundrywaters) {  				sbuf = sr.ReadLine ();  				iiii += sbuf.Length;  				if (sbuf == null || iiii > 4000000)  					//4MB? we fail!  					goto tryagain;  			}  			sbuf = sr.ReadLine ();  			while (!sbuf.StartsWith ("Content-Type"' StringComparison.CurrentCultureIgnoreCase)) {  				sbuf = sr.ReadLine ();  			}  			sbuf = sr.ReadLine ();  			image_size = int.Parse (sbuf.Substring (sbuf.IndexOf (": ") + 2));  			//Content-Length  			sbuf = sr.ReadLine ();  			//clear the next line  			// image size being less than zero wouldn't make sense' nor larger than buffer  			if (image_size > 0 && image_size <= 2048576) {  				buf = new char[image_size];  				Thread.Sleep (1);  				byte[] bbuf = new byte[image_size];  				int red = 0;  				while (red < image_size) {  					int tred = sr.Read (buf' red' image_size - red);  					if (tred < 1)  						break;  					red += tred;  				}  				for (int i = 0; i < image_size; i++) {  					bbuf [i] = (byte)buf [i];  				}  				//Save Image  				CurImg = Bitmap.FromStream (new MemoryStream (bbuf));  				if (NewImageRecieved != null)  					NewImageRecieved (this' new NewImageDataRecievedEventArgs (CurImg' new MemoryStream (bbuf)));  			}  			else  				er ("Unknown size");  		}  	}  }  catch {  	Running = false;  	return;  	//TODO: figure out better way to dispose of bad sockets when we are not connected to the bot  }  
Magic Number,System451.Communication.Dashboard.Net.Video,MJPEGVideoSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\Video\MJpegStream.cs,GraveWorker,The following statement contains a magic number: try {  	//attach limb  	HttpWebResponse resp = (HttpWebResponse)hrq.GetResponse ();  	ns = resp.GetResponseStream ();  	if (resp.StatusCode != HttpStatusCode.OK) {  		Thread.Sleep (1000);  		er ("yaah! retrying!");  	}  	else {  		string boundrywaters = resp.ContentType.Substring (resp.ContentType.IndexOf ("boundary=") + 9);  		if (boundrywaters.Substring (0' 2) == "--")  			boundrywaters = boundrywaters.Substring (2);  		Running = true;  		int image_size = 0;  		char[] buf;  		sr = new StreamReader (ns' new binencode ());  		while (shouldBeRunning) {  			Thread.Sleep (1);  			//let it pile up!  			string sbuf = null;  			int iiii = 0;  			while (sbuf != "--" + boundrywaters) {  				sbuf = sr.ReadLine ();  				iiii += sbuf.Length;  				if (sbuf == null || iiii > 4000000)  					//4MB? we fail!  					goto tryagain;  			}  			sbuf = sr.ReadLine ();  			while (!sbuf.StartsWith ("Content-Type"' StringComparison.CurrentCultureIgnoreCase)) {  				sbuf = sr.ReadLine ();  			}  			sbuf = sr.ReadLine ();  			image_size = int.Parse (sbuf.Substring (sbuf.IndexOf (": ") + 2));  			//Content-Length  			sbuf = sr.ReadLine ();  			//clear the next line  			// image size being less than zero wouldn't make sense' nor larger than buffer  			if (image_size > 0 && image_size <= 2048576) {  				buf = new char[image_size];  				Thread.Sleep (1);  				byte[] bbuf = new byte[image_size];  				int red = 0;  				while (red < image_size) {  					int tred = sr.Read (buf' red' image_size - red);  					if (tred < 1)  						break;  					red += tred;  				}  				for (int i = 0; i < image_size; i++) {  					bbuf [i] = (byte)buf [i];  				}  				//Save Image  				CurImg = Bitmap.FromStream (new MemoryStream (bbuf));  				if (NewImageRecieved != null)  					NewImageRecieved (this' new NewImageDataRecievedEventArgs (CurImg' new MemoryStream (bbuf)));  			}  			else  				er ("Unknown size");  		}  	}  }  catch {  	Running = false;  	return;  	//TODO: figure out better way to dispose of bad sockets when we are not connected to the bot  }  
Magic Number,System451.Communication.Dashboard.Net.Video,MJPEGVideoSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\Video\MJpegStream.cs,GraveWorker,The following statement contains a magic number: try {  	//attach limb  	HttpWebResponse resp = (HttpWebResponse)hrq.GetResponse ();  	ns = resp.GetResponseStream ();  	if (resp.StatusCode != HttpStatusCode.OK) {  		Thread.Sleep (1000);  		er ("yaah! retrying!");  	}  	else {  		string boundrywaters = resp.ContentType.Substring (resp.ContentType.IndexOf ("boundary=") + 9);  		if (boundrywaters.Substring (0' 2) == "--")  			boundrywaters = boundrywaters.Substring (2);  		Running = true;  		int image_size = 0;  		char[] buf;  		sr = new StreamReader (ns' new binencode ());  		while (shouldBeRunning) {  			Thread.Sleep (1);  			//let it pile up!  			string sbuf = null;  			int iiii = 0;  			while (sbuf != "--" + boundrywaters) {  				sbuf = sr.ReadLine ();  				iiii += sbuf.Length;  				if (sbuf == null || iiii > 4000000)  					//4MB? we fail!  					goto tryagain;  			}  			sbuf = sr.ReadLine ();  			while (!sbuf.StartsWith ("Content-Type"' StringComparison.CurrentCultureIgnoreCase)) {  				sbuf = sr.ReadLine ();  			}  			sbuf = sr.ReadLine ();  			image_size = int.Parse (sbuf.Substring (sbuf.IndexOf (": ") + 2));  			//Content-Length  			sbuf = sr.ReadLine ();  			//clear the next line  			// image size being less than zero wouldn't make sense' nor larger than buffer  			if (image_size > 0 && image_size <= 2048576) {  				buf = new char[image_size];  				Thread.Sleep (1);  				byte[] bbuf = new byte[image_size];  				int red = 0;  				while (red < image_size) {  					int tred = sr.Read (buf' red' image_size - red);  					if (tred < 1)  						break;  					red += tred;  				}  				for (int i = 0; i < image_size; i++) {  					bbuf [i] = (byte)buf [i];  				}  				//Save Image  				CurImg = Bitmap.FromStream (new MemoryStream (bbuf));  				if (NewImageRecieved != null)  					NewImageRecieved (this' new NewImageDataRecievedEventArgs (CurImg' new MemoryStream (bbuf)));  			}  			else  				er ("Unknown size");  		}  	}  }  catch {  	Running = false;  	return;  	//TODO: figure out better way to dispose of bad sockets when we are not connected to the bot  }  
Magic Number,System451.Communication.Dashboard.Net.Video,MJPEGVideoSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\Video\MJpegStream.cs,GraveWorker,The following statement contains a magic number: try {  	//attach limb  	HttpWebResponse resp = (HttpWebResponse)hrq.GetResponse ();  	ns = resp.GetResponseStream ();  	if (resp.StatusCode != HttpStatusCode.OK) {  		Thread.Sleep (1000);  		er ("yaah! retrying!");  	}  	else {  		string boundrywaters = resp.ContentType.Substring (resp.ContentType.IndexOf ("boundary=") + 9);  		if (boundrywaters.Substring (0' 2) == "--")  			boundrywaters = boundrywaters.Substring (2);  		Running = true;  		int image_size = 0;  		char[] buf;  		sr = new StreamReader (ns' new binencode ());  		while (shouldBeRunning) {  			Thread.Sleep (1);  			//let it pile up!  			string sbuf = null;  			int iiii = 0;  			while (sbuf != "--" + boundrywaters) {  				sbuf = sr.ReadLine ();  				iiii += sbuf.Length;  				if (sbuf == null || iiii > 4000000)  					//4MB? we fail!  					goto tryagain;  			}  			sbuf = sr.ReadLine ();  			while (!sbuf.StartsWith ("Content-Type"' StringComparison.CurrentCultureIgnoreCase)) {  				sbuf = sr.ReadLine ();  			}  			sbuf = sr.ReadLine ();  			image_size = int.Parse (sbuf.Substring (sbuf.IndexOf (": ") + 2));  			//Content-Length  			sbuf = sr.ReadLine ();  			//clear the next line  			// image size being less than zero wouldn't make sense' nor larger than buffer  			if (image_size > 0 && image_size <= 2048576) {  				buf = new char[image_size];  				Thread.Sleep (1);  				byte[] bbuf = new byte[image_size];  				int red = 0;  				while (red < image_size) {  					int tred = sr.Read (buf' red' image_size - red);  					if (tred < 1)  						break;  					red += tred;  				}  				for (int i = 0; i < image_size; i++) {  					bbuf [i] = (byte)buf [i];  				}  				//Save Image  				CurImg = Bitmap.FromStream (new MemoryStream (bbuf));  				if (NewImageRecieved != null)  					NewImageRecieved (this' new NewImageDataRecievedEventArgs (CurImg' new MemoryStream (bbuf)));  			}  			else  				er ("Unknown size");  		}  	}  }  catch {  	Running = false;  	return;  	//TODO: figure out better way to dispose of bad sockets when we are not connected to the bot  }  
Magic Number,System451.Communication.Dashboard.Net.Video,MJPEGVideoSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\Video\MJpegStream.cs,GraveWorker,The following statement contains a magic number: try {  	//attach limb  	HttpWebResponse resp = (HttpWebResponse)hrq.GetResponse ();  	ns = resp.GetResponseStream ();  	if (resp.StatusCode != HttpStatusCode.OK) {  		Thread.Sleep (1000);  		er ("yaah! retrying!");  	}  	else {  		string boundrywaters = resp.ContentType.Substring (resp.ContentType.IndexOf ("boundary=") + 9);  		if (boundrywaters.Substring (0' 2) == "--")  			boundrywaters = boundrywaters.Substring (2);  		Running = true;  		int image_size = 0;  		char[] buf;  		sr = new StreamReader (ns' new binencode ());  		while (shouldBeRunning) {  			Thread.Sleep (1);  			//let it pile up!  			string sbuf = null;  			int iiii = 0;  			while (sbuf != "--" + boundrywaters) {  				sbuf = sr.ReadLine ();  				iiii += sbuf.Length;  				if (sbuf == null || iiii > 4000000)  					//4MB? we fail!  					goto tryagain;  			}  			sbuf = sr.ReadLine ();  			while (!sbuf.StartsWith ("Content-Type"' StringComparison.CurrentCultureIgnoreCase)) {  				sbuf = sr.ReadLine ();  			}  			sbuf = sr.ReadLine ();  			image_size = int.Parse (sbuf.Substring (sbuf.IndexOf (": ") + 2));  			//Content-Length  			sbuf = sr.ReadLine ();  			//clear the next line  			// image size being less than zero wouldn't make sense' nor larger than buffer  			if (image_size > 0 && image_size <= 2048576) {  				buf = new char[image_size];  				Thread.Sleep (1);  				byte[] bbuf = new byte[image_size];  				int red = 0;  				while (red < image_size) {  					int tred = sr.Read (buf' red' image_size - red);  					if (tred < 1)  						break;  					red += tred;  				}  				for (int i = 0; i < image_size; i++) {  					bbuf [i] = (byte)buf [i];  				}  				//Save Image  				CurImg = Bitmap.FromStream (new MemoryStream (bbuf));  				if (NewImageRecieved != null)  					NewImageRecieved (this' new NewImageDataRecievedEventArgs (CurImg' new MemoryStream (bbuf)));  			}  			else  				er ("Unknown size");  		}  	}  }  catch {  	Running = false;  	return;  	//TODO: figure out better way to dispose of bad sockets when we are not connected to the bot  }  
Magic Number,System451.Communication.Dashboard.Net.Video,MJPEGVideoSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\Video\MJpegStream.cs,GraveWorker,The following statement contains a magic number: try {  	//attach limb  	HttpWebResponse resp = (HttpWebResponse)hrq.GetResponse ();  	ns = resp.GetResponseStream ();  	if (resp.StatusCode != HttpStatusCode.OK) {  		Thread.Sleep (1000);  		er ("yaah! retrying!");  	}  	else {  		string boundrywaters = resp.ContentType.Substring (resp.ContentType.IndexOf ("boundary=") + 9);  		if (boundrywaters.Substring (0' 2) == "--")  			boundrywaters = boundrywaters.Substring (2);  		Running = true;  		int image_size = 0;  		char[] buf;  		sr = new StreamReader (ns' new binencode ());  		while (shouldBeRunning) {  			Thread.Sleep (1);  			//let it pile up!  			string sbuf = null;  			int iiii = 0;  			while (sbuf != "--" + boundrywaters) {  				sbuf = sr.ReadLine ();  				iiii += sbuf.Length;  				if (sbuf == null || iiii > 4000000)  					//4MB? we fail!  					goto tryagain;  			}  			sbuf = sr.ReadLine ();  			while (!sbuf.StartsWith ("Content-Type"' StringComparison.CurrentCultureIgnoreCase)) {  				sbuf = sr.ReadLine ();  			}  			sbuf = sr.ReadLine ();  			image_size = int.Parse (sbuf.Substring (sbuf.IndexOf (": ") + 2));  			//Content-Length  			sbuf = sr.ReadLine ();  			//clear the next line  			// image size being less than zero wouldn't make sense' nor larger than buffer  			if (image_size > 0 && image_size <= 2048576) {  				buf = new char[image_size];  				Thread.Sleep (1);  				byte[] bbuf = new byte[image_size];  				int red = 0;  				while (red < image_size) {  					int tred = sr.Read (buf' red' image_size - red);  					if (tred < 1)  						break;  					red += tred;  				}  				for (int i = 0; i < image_size; i++) {  					bbuf [i] = (byte)buf [i];  				}  				//Save Image  				CurImg = Bitmap.FromStream (new MemoryStream (bbuf));  				if (NewImageRecieved != null)  					NewImageRecieved (this' new NewImageDataRecievedEventArgs (CurImg' new MemoryStream (bbuf)));  			}  			else  				er ("Unknown size");  		}  	}  }  catch {  	Running = false;  	return;  	//TODO: figure out better way to dispose of bad sockets when we are not connected to the bot  }  
Magic Number,System451.Communication.Dashboard.Net.Video,MJPEGVideoSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\Video\MJpegStream.cs,GraveWorker,The following statement contains a magic number: if (resp.StatusCode != HttpStatusCode.OK) {  	Thread.Sleep (1000);  	er ("yaah! retrying!");  }  else {  	string boundrywaters = resp.ContentType.Substring (resp.ContentType.IndexOf ("boundary=") + 9);  	if (boundrywaters.Substring (0' 2) == "--")  		boundrywaters = boundrywaters.Substring (2);  	Running = true;  	int image_size = 0;  	char[] buf;  	sr = new StreamReader (ns' new binencode ());  	while (shouldBeRunning) {  		Thread.Sleep (1);  		//let it pile up!  		string sbuf = null;  		int iiii = 0;  		while (sbuf != "--" + boundrywaters) {  			sbuf = sr.ReadLine ();  			iiii += sbuf.Length;  			if (sbuf == null || iiii > 4000000)  				//4MB? we fail!  				goto tryagain;  		}  		sbuf = sr.ReadLine ();  		while (!sbuf.StartsWith ("Content-Type"' StringComparison.CurrentCultureIgnoreCase)) {  			sbuf = sr.ReadLine ();  		}  		sbuf = sr.ReadLine ();  		image_size = int.Parse (sbuf.Substring (sbuf.IndexOf (": ") + 2));  		//Content-Length  		sbuf = sr.ReadLine ();  		//clear the next line  		// image size being less than zero wouldn't make sense' nor larger than buffer  		if (image_size > 0 && image_size <= 2048576) {  			buf = new char[image_size];  			Thread.Sleep (1);  			byte[] bbuf = new byte[image_size];  			int red = 0;  			while (red < image_size) {  				int tred = sr.Read (buf' red' image_size - red);  				if (tred < 1)  					break;  				red += tred;  			}  			for (int i = 0; i < image_size; i++) {  				bbuf [i] = (byte)buf [i];  			}  			//Save Image  			CurImg = Bitmap.FromStream (new MemoryStream (bbuf));  			if (NewImageRecieved != null)  				NewImageRecieved (this' new NewImageDataRecievedEventArgs (CurImg' new MemoryStream (bbuf)));  		}  		else  			er ("Unknown size");  	}  }  
Magic Number,System451.Communication.Dashboard.Net.Video,MJPEGVideoSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\Video\MJpegStream.cs,GraveWorker,The following statement contains a magic number: if (resp.StatusCode != HttpStatusCode.OK) {  	Thread.Sleep (1000);  	er ("yaah! retrying!");  }  else {  	string boundrywaters = resp.ContentType.Substring (resp.ContentType.IndexOf ("boundary=") + 9);  	if (boundrywaters.Substring (0' 2) == "--")  		boundrywaters = boundrywaters.Substring (2);  	Running = true;  	int image_size = 0;  	char[] buf;  	sr = new StreamReader (ns' new binencode ());  	while (shouldBeRunning) {  		Thread.Sleep (1);  		//let it pile up!  		string sbuf = null;  		int iiii = 0;  		while (sbuf != "--" + boundrywaters) {  			sbuf = sr.ReadLine ();  			iiii += sbuf.Length;  			if (sbuf == null || iiii > 4000000)  				//4MB? we fail!  				goto tryagain;  		}  		sbuf = sr.ReadLine ();  		while (!sbuf.StartsWith ("Content-Type"' StringComparison.CurrentCultureIgnoreCase)) {  			sbuf = sr.ReadLine ();  		}  		sbuf = sr.ReadLine ();  		image_size = int.Parse (sbuf.Substring (sbuf.IndexOf (": ") + 2));  		//Content-Length  		sbuf = sr.ReadLine ();  		//clear the next line  		// image size being less than zero wouldn't make sense' nor larger than buffer  		if (image_size > 0 && image_size <= 2048576) {  			buf = new char[image_size];  			Thread.Sleep (1);  			byte[] bbuf = new byte[image_size];  			int red = 0;  			while (red < image_size) {  				int tred = sr.Read (buf' red' image_size - red);  				if (tred < 1)  					break;  				red += tred;  			}  			for (int i = 0; i < image_size; i++) {  				bbuf [i] = (byte)buf [i];  			}  			//Save Image  			CurImg = Bitmap.FromStream (new MemoryStream (bbuf));  			if (NewImageRecieved != null)  				NewImageRecieved (this' new NewImageDataRecievedEventArgs (CurImg' new MemoryStream (bbuf)));  		}  		else  			er ("Unknown size");  	}  }  
Magic Number,System451.Communication.Dashboard.Net.Video,MJPEGVideoSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\Video\MJpegStream.cs,GraveWorker,The following statement contains a magic number: if (resp.StatusCode != HttpStatusCode.OK) {  	Thread.Sleep (1000);  	er ("yaah! retrying!");  }  else {  	string boundrywaters = resp.ContentType.Substring (resp.ContentType.IndexOf ("boundary=") + 9);  	if (boundrywaters.Substring (0' 2) == "--")  		boundrywaters = boundrywaters.Substring (2);  	Running = true;  	int image_size = 0;  	char[] buf;  	sr = new StreamReader (ns' new binencode ());  	while (shouldBeRunning) {  		Thread.Sleep (1);  		//let it pile up!  		string sbuf = null;  		int iiii = 0;  		while (sbuf != "--" + boundrywaters) {  			sbuf = sr.ReadLine ();  			iiii += sbuf.Length;  			if (sbuf == null || iiii > 4000000)  				//4MB? we fail!  				goto tryagain;  		}  		sbuf = sr.ReadLine ();  		while (!sbuf.StartsWith ("Content-Type"' StringComparison.CurrentCultureIgnoreCase)) {  			sbuf = sr.ReadLine ();  		}  		sbuf = sr.ReadLine ();  		image_size = int.Parse (sbuf.Substring (sbuf.IndexOf (": ") + 2));  		//Content-Length  		sbuf = sr.ReadLine ();  		//clear the next line  		// image size being less than zero wouldn't make sense' nor larger than buffer  		if (image_size > 0 && image_size <= 2048576) {  			buf = new char[image_size];  			Thread.Sleep (1);  			byte[] bbuf = new byte[image_size];  			int red = 0;  			while (red < image_size) {  				int tred = sr.Read (buf' red' image_size - red);  				if (tred < 1)  					break;  				red += tred;  			}  			for (int i = 0; i < image_size; i++) {  				bbuf [i] = (byte)buf [i];  			}  			//Save Image  			CurImg = Bitmap.FromStream (new MemoryStream (bbuf));  			if (NewImageRecieved != null)  				NewImageRecieved (this' new NewImageDataRecievedEventArgs (CurImg' new MemoryStream (bbuf)));  		}  		else  			er ("Unknown size");  	}  }  
Magic Number,System451.Communication.Dashboard.Net.Video,MJPEGVideoSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\Video\MJpegStream.cs,GraveWorker,The following statement contains a magic number: if (resp.StatusCode != HttpStatusCode.OK) {  	Thread.Sleep (1000);  	er ("yaah! retrying!");  }  else {  	string boundrywaters = resp.ContentType.Substring (resp.ContentType.IndexOf ("boundary=") + 9);  	if (boundrywaters.Substring (0' 2) == "--")  		boundrywaters = boundrywaters.Substring (2);  	Running = true;  	int image_size = 0;  	char[] buf;  	sr = new StreamReader (ns' new binencode ());  	while (shouldBeRunning) {  		Thread.Sleep (1);  		//let it pile up!  		string sbuf = null;  		int iiii = 0;  		while (sbuf != "--" + boundrywaters) {  			sbuf = sr.ReadLine ();  			iiii += sbuf.Length;  			if (sbuf == null || iiii > 4000000)  				//4MB? we fail!  				goto tryagain;  		}  		sbuf = sr.ReadLine ();  		while (!sbuf.StartsWith ("Content-Type"' StringComparison.CurrentCultureIgnoreCase)) {  			sbuf = sr.ReadLine ();  		}  		sbuf = sr.ReadLine ();  		image_size = int.Parse (sbuf.Substring (sbuf.IndexOf (": ") + 2));  		//Content-Length  		sbuf = sr.ReadLine ();  		//clear the next line  		// image size being less than zero wouldn't make sense' nor larger than buffer  		if (image_size > 0 && image_size <= 2048576) {  			buf = new char[image_size];  			Thread.Sleep (1);  			byte[] bbuf = new byte[image_size];  			int red = 0;  			while (red < image_size) {  				int tred = sr.Read (buf' red' image_size - red);  				if (tred < 1)  					break;  				red += tred;  			}  			for (int i = 0; i < image_size; i++) {  				bbuf [i] = (byte)buf [i];  			}  			//Save Image  			CurImg = Bitmap.FromStream (new MemoryStream (bbuf));  			if (NewImageRecieved != null)  				NewImageRecieved (this' new NewImageDataRecievedEventArgs (CurImg' new MemoryStream (bbuf)));  		}  		else  			er ("Unknown size");  	}  }  
Magic Number,System451.Communication.Dashboard.Net.Video,MJPEGVideoSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\Video\MJpegStream.cs,GraveWorker,The following statement contains a magic number: if (resp.StatusCode != HttpStatusCode.OK) {  	Thread.Sleep (1000);  	er ("yaah! retrying!");  }  else {  	string boundrywaters = resp.ContentType.Substring (resp.ContentType.IndexOf ("boundary=") + 9);  	if (boundrywaters.Substring (0' 2) == "--")  		boundrywaters = boundrywaters.Substring (2);  	Running = true;  	int image_size = 0;  	char[] buf;  	sr = new StreamReader (ns' new binencode ());  	while (shouldBeRunning) {  		Thread.Sleep (1);  		//let it pile up!  		string sbuf = null;  		int iiii = 0;  		while (sbuf != "--" + boundrywaters) {  			sbuf = sr.ReadLine ();  			iiii += sbuf.Length;  			if (sbuf == null || iiii > 4000000)  				//4MB? we fail!  				goto tryagain;  		}  		sbuf = sr.ReadLine ();  		while (!sbuf.StartsWith ("Content-Type"' StringComparison.CurrentCultureIgnoreCase)) {  			sbuf = sr.ReadLine ();  		}  		sbuf = sr.ReadLine ();  		image_size = int.Parse (sbuf.Substring (sbuf.IndexOf (": ") + 2));  		//Content-Length  		sbuf = sr.ReadLine ();  		//clear the next line  		// image size being less than zero wouldn't make sense' nor larger than buffer  		if (image_size > 0 && image_size <= 2048576) {  			buf = new char[image_size];  			Thread.Sleep (1);  			byte[] bbuf = new byte[image_size];  			int red = 0;  			while (red < image_size) {  				int tred = sr.Read (buf' red' image_size - red);  				if (tred < 1)  					break;  				red += tred;  			}  			for (int i = 0; i < image_size; i++) {  				bbuf [i] = (byte)buf [i];  			}  			//Save Image  			CurImg = Bitmap.FromStream (new MemoryStream (bbuf));  			if (NewImageRecieved != null)  				NewImageRecieved (this' new NewImageDataRecievedEventArgs (CurImg' new MemoryStream (bbuf)));  		}  		else  			er ("Unknown size");  	}  }  
Magic Number,System451.Communication.Dashboard.Net.Video,MJPEGVideoSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\Video\MJpegStream.cs,GraveWorker,The following statement contains a magic number: if (resp.StatusCode != HttpStatusCode.OK) {  	Thread.Sleep (1000);  	er ("yaah! retrying!");  }  else {  	string boundrywaters = resp.ContentType.Substring (resp.ContentType.IndexOf ("boundary=") + 9);  	if (boundrywaters.Substring (0' 2) == "--")  		boundrywaters = boundrywaters.Substring (2);  	Running = true;  	int image_size = 0;  	char[] buf;  	sr = new StreamReader (ns' new binencode ());  	while (shouldBeRunning) {  		Thread.Sleep (1);  		//let it pile up!  		string sbuf = null;  		int iiii = 0;  		while (sbuf != "--" + boundrywaters) {  			sbuf = sr.ReadLine ();  			iiii += sbuf.Length;  			if (sbuf == null || iiii > 4000000)  				//4MB? we fail!  				goto tryagain;  		}  		sbuf = sr.ReadLine ();  		while (!sbuf.StartsWith ("Content-Type"' StringComparison.CurrentCultureIgnoreCase)) {  			sbuf = sr.ReadLine ();  		}  		sbuf = sr.ReadLine ();  		image_size = int.Parse (sbuf.Substring (sbuf.IndexOf (": ") + 2));  		//Content-Length  		sbuf = sr.ReadLine ();  		//clear the next line  		// image size being less than zero wouldn't make sense' nor larger than buffer  		if (image_size > 0 && image_size <= 2048576) {  			buf = new char[image_size];  			Thread.Sleep (1);  			byte[] bbuf = new byte[image_size];  			int red = 0;  			while (red < image_size) {  				int tred = sr.Read (buf' red' image_size - red);  				if (tred < 1)  					break;  				red += tred;  			}  			for (int i = 0; i < image_size; i++) {  				bbuf [i] = (byte)buf [i];  			}  			//Save Image  			CurImg = Bitmap.FromStream (new MemoryStream (bbuf));  			if (NewImageRecieved != null)  				NewImageRecieved (this' new NewImageDataRecievedEventArgs (CurImg' new MemoryStream (bbuf)));  		}  		else  			er ("Unknown size");  	}  }  
Magic Number,System451.Communication.Dashboard.Net.Video,MJPEGVideoSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\Video\MJpegStream.cs,GraveWorker,The following statement contains a magic number: if (resp.StatusCode != HttpStatusCode.OK) {  	Thread.Sleep (1000);  	er ("yaah! retrying!");  }  else {  	string boundrywaters = resp.ContentType.Substring (resp.ContentType.IndexOf ("boundary=") + 9);  	if (boundrywaters.Substring (0' 2) == "--")  		boundrywaters = boundrywaters.Substring (2);  	Running = true;  	int image_size = 0;  	char[] buf;  	sr = new StreamReader (ns' new binencode ());  	while (shouldBeRunning) {  		Thread.Sleep (1);  		//let it pile up!  		string sbuf = null;  		int iiii = 0;  		while (sbuf != "--" + boundrywaters) {  			sbuf = sr.ReadLine ();  			iiii += sbuf.Length;  			if (sbuf == null || iiii > 4000000)  				//4MB? we fail!  				goto tryagain;  		}  		sbuf = sr.ReadLine ();  		while (!sbuf.StartsWith ("Content-Type"' StringComparison.CurrentCultureIgnoreCase)) {  			sbuf = sr.ReadLine ();  		}  		sbuf = sr.ReadLine ();  		image_size = int.Parse (sbuf.Substring (sbuf.IndexOf (": ") + 2));  		//Content-Length  		sbuf = sr.ReadLine ();  		//clear the next line  		// image size being less than zero wouldn't make sense' nor larger than buffer  		if (image_size > 0 && image_size <= 2048576) {  			buf = new char[image_size];  			Thread.Sleep (1);  			byte[] bbuf = new byte[image_size];  			int red = 0;  			while (red < image_size) {  				int tred = sr.Read (buf' red' image_size - red);  				if (tred < 1)  					break;  				red += tred;  			}  			for (int i = 0; i < image_size; i++) {  				bbuf [i] = (byte)buf [i];  			}  			//Save Image  			CurImg = Bitmap.FromStream (new MemoryStream (bbuf));  			if (NewImageRecieved != null)  				NewImageRecieved (this' new NewImageDataRecievedEventArgs (CurImg' new MemoryStream (bbuf)));  		}  		else  			er ("Unknown size");  	}  }  
Magic Number,System451.Communication.Dashboard.Net.Video,MJPEGVideoSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\Video\MJpegStream.cs,GraveWorker,The following statement contains a magic number: Thread.Sleep (1000);  
Magic Number,System451.Communication.Dashboard.Net.Video,MJPEGVideoSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\Video\MJpegStream.cs,GraveWorker,The following statement contains a magic number: if (boundrywaters.Substring (0' 2) == "--")  	boundrywaters = boundrywaters.Substring (2);  
Magic Number,System451.Communication.Dashboard.Net.Video,MJPEGVideoSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\Video\MJpegStream.cs,GraveWorker,The following statement contains a magic number: if (boundrywaters.Substring (0' 2) == "--")  	boundrywaters = boundrywaters.Substring (2);  
Magic Number,System451.Communication.Dashboard.Net.Video,MJPEGVideoSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\Video\MJpegStream.cs,GraveWorker,The following statement contains a magic number: boundrywaters = boundrywaters.Substring (2);  
Magic Number,System451.Communication.Dashboard.Net.Video,MJPEGVideoSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\Video\MJpegStream.cs,GraveWorker,The following statement contains a magic number: while (shouldBeRunning) {  	Thread.Sleep (1);  	//let it pile up!  	string sbuf = null;  	int iiii = 0;  	while (sbuf != "--" + boundrywaters) {  		sbuf = sr.ReadLine ();  		iiii += sbuf.Length;  		if (sbuf == null || iiii > 4000000)  			//4MB? we fail!  			goto tryagain;  	}  	sbuf = sr.ReadLine ();  	while (!sbuf.StartsWith ("Content-Type"' StringComparison.CurrentCultureIgnoreCase)) {  		sbuf = sr.ReadLine ();  	}  	sbuf = sr.ReadLine ();  	image_size = int.Parse (sbuf.Substring (sbuf.IndexOf (": ") + 2));  	//Content-Length  	sbuf = sr.ReadLine ();  	//clear the next line  	// image size being less than zero wouldn't make sense' nor larger than buffer  	if (image_size > 0 && image_size <= 2048576) {  		buf = new char[image_size];  		Thread.Sleep (1);  		byte[] bbuf = new byte[image_size];  		int red = 0;  		while (red < image_size) {  			int tred = sr.Read (buf' red' image_size - red);  			if (tred < 1)  				break;  			red += tred;  		}  		for (int i = 0; i < image_size; i++) {  			bbuf [i] = (byte)buf [i];  		}  		//Save Image  		CurImg = Bitmap.FromStream (new MemoryStream (bbuf));  		if (NewImageRecieved != null)  			NewImageRecieved (this' new NewImageDataRecievedEventArgs (CurImg' new MemoryStream (bbuf)));  	}  	else  		er ("Unknown size");  }  
Magic Number,System451.Communication.Dashboard.Net.Video,MJPEGVideoSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\Video\MJpegStream.cs,GraveWorker,The following statement contains a magic number: while (shouldBeRunning) {  	Thread.Sleep (1);  	//let it pile up!  	string sbuf = null;  	int iiii = 0;  	while (sbuf != "--" + boundrywaters) {  		sbuf = sr.ReadLine ();  		iiii += sbuf.Length;  		if (sbuf == null || iiii > 4000000)  			//4MB? we fail!  			goto tryagain;  	}  	sbuf = sr.ReadLine ();  	while (!sbuf.StartsWith ("Content-Type"' StringComparison.CurrentCultureIgnoreCase)) {  		sbuf = sr.ReadLine ();  	}  	sbuf = sr.ReadLine ();  	image_size = int.Parse (sbuf.Substring (sbuf.IndexOf (": ") + 2));  	//Content-Length  	sbuf = sr.ReadLine ();  	//clear the next line  	// image size being less than zero wouldn't make sense' nor larger than buffer  	if (image_size > 0 && image_size <= 2048576) {  		buf = new char[image_size];  		Thread.Sleep (1);  		byte[] bbuf = new byte[image_size];  		int red = 0;  		while (red < image_size) {  			int tred = sr.Read (buf' red' image_size - red);  			if (tred < 1)  				break;  			red += tred;  		}  		for (int i = 0; i < image_size; i++) {  			bbuf [i] = (byte)buf [i];  		}  		//Save Image  		CurImg = Bitmap.FromStream (new MemoryStream (bbuf));  		if (NewImageRecieved != null)  			NewImageRecieved (this' new NewImageDataRecievedEventArgs (CurImg' new MemoryStream (bbuf)));  	}  	else  		er ("Unknown size");  }  
Magic Number,System451.Communication.Dashboard.Net.Video,MJPEGVideoSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\Video\MJpegStream.cs,GraveWorker,The following statement contains a magic number: while (shouldBeRunning) {  	Thread.Sleep (1);  	//let it pile up!  	string sbuf = null;  	int iiii = 0;  	while (sbuf != "--" + boundrywaters) {  		sbuf = sr.ReadLine ();  		iiii += sbuf.Length;  		if (sbuf == null || iiii > 4000000)  			//4MB? we fail!  			goto tryagain;  	}  	sbuf = sr.ReadLine ();  	while (!sbuf.StartsWith ("Content-Type"' StringComparison.CurrentCultureIgnoreCase)) {  		sbuf = sr.ReadLine ();  	}  	sbuf = sr.ReadLine ();  	image_size = int.Parse (sbuf.Substring (sbuf.IndexOf (": ") + 2));  	//Content-Length  	sbuf = sr.ReadLine ();  	//clear the next line  	// image size being less than zero wouldn't make sense' nor larger than buffer  	if (image_size > 0 && image_size <= 2048576) {  		buf = new char[image_size];  		Thread.Sleep (1);  		byte[] bbuf = new byte[image_size];  		int red = 0;  		while (red < image_size) {  			int tred = sr.Read (buf' red' image_size - red);  			if (tred < 1)  				break;  			red += tred;  		}  		for (int i = 0; i < image_size; i++) {  			bbuf [i] = (byte)buf [i];  		}  		//Save Image  		CurImg = Bitmap.FromStream (new MemoryStream (bbuf));  		if (NewImageRecieved != null)  			NewImageRecieved (this' new NewImageDataRecievedEventArgs (CurImg' new MemoryStream (bbuf)));  	}  	else  		er ("Unknown size");  }  
Magic Number,System451.Communication.Dashboard.Net.Video,MJPEGVideoSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\Video\MJpegStream.cs,GraveWorker,The following statement contains a magic number: while (sbuf != "--" + boundrywaters) {  	sbuf = sr.ReadLine ();  	iiii += sbuf.Length;  	if (sbuf == null || iiii > 4000000)  		//4MB? we fail!  		goto tryagain;  }  
Magic Number,System451.Communication.Dashboard.Net.Video,MJPEGVideoSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\Video\MJpegStream.cs,GraveWorker,The following statement contains a magic number: if (sbuf == null || iiii > 4000000)  	//4MB? we fail!  	goto tryagain;  
Magic Number,System451.Communication.Dashboard.Net.Video,MJPEGVideoSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\Video\MJpegStream.cs,GraveWorker,The following statement contains a magic number: image_size = int.Parse (sbuf.Substring (sbuf.IndexOf (": ") + 2));  
Magic Number,System451.Communication.Dashboard.Net.Video,MJPEGVideoSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\Video\MJpegStream.cs,GraveWorker,The following statement contains a magic number: if (image_size > 0 && image_size <= 2048576) {  	buf = new char[image_size];  	Thread.Sleep (1);  	byte[] bbuf = new byte[image_size];  	int red = 0;  	while (red < image_size) {  		int tred = sr.Read (buf' red' image_size - red);  		if (tred < 1)  			break;  		red += tred;  	}  	for (int i = 0; i < image_size; i++) {  		bbuf [i] = (byte)buf [i];  	}  	//Save Image  	CurImg = Bitmap.FromStream (new MemoryStream (bbuf));  	if (NewImageRecieved != null)  		NewImageRecieved (this' new NewImageDataRecievedEventArgs (CurImg' new MemoryStream (bbuf)));  }  else  	er ("Unknown size");  
Magic Number,System451.Communication.Dashboard.Net.Video,WPILibTcpVideoSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\Video\ImageSource.cs,Init,The following statement contains a magic number: IP = IPAddress.Parse ("10." + ((int)(team / 100)) + "." + ((int)(team % 100)) + ".2");  
Magic Number,System451.Communication.Dashboard.Net.Video,WPILibTcpVideoSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\Video\ImageSource.cs,Init,The following statement contains a magic number: IP = IPAddress.Parse ("10." + ((int)(team / 100)) + "." + ((int)(team % 100)) + ".2");  
Magic Number,System451.Communication.Dashboard.Net.Video,WPILibTcpVideoSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\Video\ImageSource.cs,Init,The following statement contains a magic number: Port = 1179 + instance;  
Magic Number,System451.Communication.Dashboard.Net.Video,WPILibTcpVideoSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\Video\ImageSource.cs,GraveWorker,The following statement contains a magic number: while (shouldBeRunning) {  	NetworkStream istream = null;  	try {  		//attach limb  		eyeSocket = new TcpClient (new IPEndPoint (IPAddress.Any' Port));  		eyeSocket.ReceiveBufferSize = 2048576;  		//2mb  		eyeSocket.Connect (IP' Port);  		istream = eyeSocket.GetStream ();  		Running = true;  		int image_size = 0;  		byte[] buf;  		while (shouldBeRunning) {  			Thread.Sleep (5);  			//gather data in RecieveQ' don't overload  			//switch' but without the compare overhead' and with fall through  			//based off IL optimizations in LR's .net Reflector  			while (eyeSocket.Available < 4) {  				Thread.Sleep (1);  			}  			buf = new byte[4];  			istream.Read (buf' 0' 4);  			//correct header?  			//if any of the bytes are wrong  			if ((buf [0] != 1) || (buf [1] != 0) || (buf [2] != 0) || (buf [3] != 0)) {  				//find the header  				//this goes down the line until one of the conditions fails' then starts over  				while ((istream.ReadByte () != 1) || (istream.ReadByte () != 0) || (istream.ReadByte () != 0) || (istream.ReadByte () != 0)) {  				}  			}  			//Got correct header' wait for next bit  			while (eyeSocket.Available < 4) {  				Thread.Sleep (1);  			}  			//buf = new byte[4];//not strictly necesarry' we just had 4 byte header  			istream.Read (buf' 0' 4);  			image_size = IPAddress.NetworkToHostOrder (BitConverter.ToInt32 (buf' 0));  			// image size being less than zero wouldn't make sense' nor larger than buffer  			if (image_size > 0 && image_size <= 2048576) {  				buf = new byte[image_size];  				while (eyeSocket.Available < image_size) {  					Thread.Sleep (1);  				}  				istream.Read (buf' 0' image_size);  				image_size = 0;  				//Save Image  				CurImg = Bitmap.FromStream (new MemoryStream (buf));  				if (NewImageRecieved != null)  					NewImageRecieved (this' new NewImageDataRecievedEventArgs (CurImg' new MemoryStream (buf)));  			}  			else  				er ("Unknown size");  		}  	}  	catch {  		Running = false;  		return;  		//TODO: figure out better way to dispose of bad sockets when we are not connected to the bot  	}  	finally {  		try {  			eyeSocket.Close ();  			if (istream != null)  				istream.Close ();  		}  		catch {  		}  	}  }  
Magic Number,System451.Communication.Dashboard.Net.Video,WPILibTcpVideoSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\Video\ImageSource.cs,GraveWorker,The following statement contains a magic number: while (shouldBeRunning) {  	NetworkStream istream = null;  	try {  		//attach limb  		eyeSocket = new TcpClient (new IPEndPoint (IPAddress.Any' Port));  		eyeSocket.ReceiveBufferSize = 2048576;  		//2mb  		eyeSocket.Connect (IP' Port);  		istream = eyeSocket.GetStream ();  		Running = true;  		int image_size = 0;  		byte[] buf;  		while (shouldBeRunning) {  			Thread.Sleep (5);  			//gather data in RecieveQ' don't overload  			//switch' but without the compare overhead' and with fall through  			//based off IL optimizations in LR's .net Reflector  			while (eyeSocket.Available < 4) {  				Thread.Sleep (1);  			}  			buf = new byte[4];  			istream.Read (buf' 0' 4);  			//correct header?  			//if any of the bytes are wrong  			if ((buf [0] != 1) || (buf [1] != 0) || (buf [2] != 0) || (buf [3] != 0)) {  				//find the header  				//this goes down the line until one of the conditions fails' then starts over  				while ((istream.ReadByte () != 1) || (istream.ReadByte () != 0) || (istream.ReadByte () != 0) || (istream.ReadByte () != 0)) {  				}  			}  			//Got correct header' wait for next bit  			while (eyeSocket.Available < 4) {  				Thread.Sleep (1);  			}  			//buf = new byte[4];//not strictly necesarry' we just had 4 byte header  			istream.Read (buf' 0' 4);  			image_size = IPAddress.NetworkToHostOrder (BitConverter.ToInt32 (buf' 0));  			// image size being less than zero wouldn't make sense' nor larger than buffer  			if (image_size > 0 && image_size <= 2048576) {  				buf = new byte[image_size];  				while (eyeSocket.Available < image_size) {  					Thread.Sleep (1);  				}  				istream.Read (buf' 0' image_size);  				image_size = 0;  				//Save Image  				CurImg = Bitmap.FromStream (new MemoryStream (buf));  				if (NewImageRecieved != null)  					NewImageRecieved (this' new NewImageDataRecievedEventArgs (CurImg' new MemoryStream (buf)));  			}  			else  				er ("Unknown size");  		}  	}  	catch {  		Running = false;  		return;  		//TODO: figure out better way to dispose of bad sockets when we are not connected to the bot  	}  	finally {  		try {  			eyeSocket.Close ();  			if (istream != null)  				istream.Close ();  		}  		catch {  		}  	}  }  
Magic Number,System451.Communication.Dashboard.Net.Video,WPILibTcpVideoSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\Video\ImageSource.cs,GraveWorker,The following statement contains a magic number: while (shouldBeRunning) {  	NetworkStream istream = null;  	try {  		//attach limb  		eyeSocket = new TcpClient (new IPEndPoint (IPAddress.Any' Port));  		eyeSocket.ReceiveBufferSize = 2048576;  		//2mb  		eyeSocket.Connect (IP' Port);  		istream = eyeSocket.GetStream ();  		Running = true;  		int image_size = 0;  		byte[] buf;  		while (shouldBeRunning) {  			Thread.Sleep (5);  			//gather data in RecieveQ' don't overload  			//switch' but without the compare overhead' and with fall through  			//based off IL optimizations in LR's .net Reflector  			while (eyeSocket.Available < 4) {  				Thread.Sleep (1);  			}  			buf = new byte[4];  			istream.Read (buf' 0' 4);  			//correct header?  			//if any of the bytes are wrong  			if ((buf [0] != 1) || (buf [1] != 0) || (buf [2] != 0) || (buf [3] != 0)) {  				//find the header  				//this goes down the line until one of the conditions fails' then starts over  				while ((istream.ReadByte () != 1) || (istream.ReadByte () != 0) || (istream.ReadByte () != 0) || (istream.ReadByte () != 0)) {  				}  			}  			//Got correct header' wait for next bit  			while (eyeSocket.Available < 4) {  				Thread.Sleep (1);  			}  			//buf = new byte[4];//not strictly necesarry' we just had 4 byte header  			istream.Read (buf' 0' 4);  			image_size = IPAddress.NetworkToHostOrder (BitConverter.ToInt32 (buf' 0));  			// image size being less than zero wouldn't make sense' nor larger than buffer  			if (image_size > 0 && image_size <= 2048576) {  				buf = new byte[image_size];  				while (eyeSocket.Available < image_size) {  					Thread.Sleep (1);  				}  				istream.Read (buf' 0' image_size);  				image_size = 0;  				//Save Image  				CurImg = Bitmap.FromStream (new MemoryStream (buf));  				if (NewImageRecieved != null)  					NewImageRecieved (this' new NewImageDataRecievedEventArgs (CurImg' new MemoryStream (buf)));  			}  			else  				er ("Unknown size");  		}  	}  	catch {  		Running = false;  		return;  		//TODO: figure out better way to dispose of bad sockets when we are not connected to the bot  	}  	finally {  		try {  			eyeSocket.Close ();  			if (istream != null)  				istream.Close ();  		}  		catch {  		}  	}  }  
Magic Number,System451.Communication.Dashboard.Net.Video,WPILibTcpVideoSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\Video\ImageSource.cs,GraveWorker,The following statement contains a magic number: while (shouldBeRunning) {  	NetworkStream istream = null;  	try {  		//attach limb  		eyeSocket = new TcpClient (new IPEndPoint (IPAddress.Any' Port));  		eyeSocket.ReceiveBufferSize = 2048576;  		//2mb  		eyeSocket.Connect (IP' Port);  		istream = eyeSocket.GetStream ();  		Running = true;  		int image_size = 0;  		byte[] buf;  		while (shouldBeRunning) {  			Thread.Sleep (5);  			//gather data in RecieveQ' don't overload  			//switch' but without the compare overhead' and with fall through  			//based off IL optimizations in LR's .net Reflector  			while (eyeSocket.Available < 4) {  				Thread.Sleep (1);  			}  			buf = new byte[4];  			istream.Read (buf' 0' 4);  			//correct header?  			//if any of the bytes are wrong  			if ((buf [0] != 1) || (buf [1] != 0) || (buf [2] != 0) || (buf [3] != 0)) {  				//find the header  				//this goes down the line until one of the conditions fails' then starts over  				while ((istream.ReadByte () != 1) || (istream.ReadByte () != 0) || (istream.ReadByte () != 0) || (istream.ReadByte () != 0)) {  				}  			}  			//Got correct header' wait for next bit  			while (eyeSocket.Available < 4) {  				Thread.Sleep (1);  			}  			//buf = new byte[4];//not strictly necesarry' we just had 4 byte header  			istream.Read (buf' 0' 4);  			image_size = IPAddress.NetworkToHostOrder (BitConverter.ToInt32 (buf' 0));  			// image size being less than zero wouldn't make sense' nor larger than buffer  			if (image_size > 0 && image_size <= 2048576) {  				buf = new byte[image_size];  				while (eyeSocket.Available < image_size) {  					Thread.Sleep (1);  				}  				istream.Read (buf' 0' image_size);  				image_size = 0;  				//Save Image  				CurImg = Bitmap.FromStream (new MemoryStream (buf));  				if (NewImageRecieved != null)  					NewImageRecieved (this' new NewImageDataRecievedEventArgs (CurImg' new MemoryStream (buf)));  			}  			else  				er ("Unknown size");  		}  	}  	catch {  		Running = false;  		return;  		//TODO: figure out better way to dispose of bad sockets when we are not connected to the bot  	}  	finally {  		try {  			eyeSocket.Close ();  			if (istream != null)  				istream.Close ();  		}  		catch {  		}  	}  }  
Magic Number,System451.Communication.Dashboard.Net.Video,WPILibTcpVideoSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\Video\ImageSource.cs,GraveWorker,The following statement contains a magic number: while (shouldBeRunning) {  	NetworkStream istream = null;  	try {  		//attach limb  		eyeSocket = new TcpClient (new IPEndPoint (IPAddress.Any' Port));  		eyeSocket.ReceiveBufferSize = 2048576;  		//2mb  		eyeSocket.Connect (IP' Port);  		istream = eyeSocket.GetStream ();  		Running = true;  		int image_size = 0;  		byte[] buf;  		while (shouldBeRunning) {  			Thread.Sleep (5);  			//gather data in RecieveQ' don't overload  			//switch' but without the compare overhead' and with fall through  			//based off IL optimizations in LR's .net Reflector  			while (eyeSocket.Available < 4) {  				Thread.Sleep (1);  			}  			buf = new byte[4];  			istream.Read (buf' 0' 4);  			//correct header?  			//if any of the bytes are wrong  			if ((buf [0] != 1) || (buf [1] != 0) || (buf [2] != 0) || (buf [3] != 0)) {  				//find the header  				//this goes down the line until one of the conditions fails' then starts over  				while ((istream.ReadByte () != 1) || (istream.ReadByte () != 0) || (istream.ReadByte () != 0) || (istream.ReadByte () != 0)) {  				}  			}  			//Got correct header' wait for next bit  			while (eyeSocket.Available < 4) {  				Thread.Sleep (1);  			}  			//buf = new byte[4];//not strictly necesarry' we just had 4 byte header  			istream.Read (buf' 0' 4);  			image_size = IPAddress.NetworkToHostOrder (BitConverter.ToInt32 (buf' 0));  			// image size being less than zero wouldn't make sense' nor larger than buffer  			if (image_size > 0 && image_size <= 2048576) {  				buf = new byte[image_size];  				while (eyeSocket.Available < image_size) {  					Thread.Sleep (1);  				}  				istream.Read (buf' 0' image_size);  				image_size = 0;  				//Save Image  				CurImg = Bitmap.FromStream (new MemoryStream (buf));  				if (NewImageRecieved != null)  					NewImageRecieved (this' new NewImageDataRecievedEventArgs (CurImg' new MemoryStream (buf)));  			}  			else  				er ("Unknown size");  		}  	}  	catch {  		Running = false;  		return;  		//TODO: figure out better way to dispose of bad sockets when we are not connected to the bot  	}  	finally {  		try {  			eyeSocket.Close ();  			if (istream != null)  				istream.Close ();  		}  		catch {  		}  	}  }  
Magic Number,System451.Communication.Dashboard.Net.Video,WPILibTcpVideoSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\Video\ImageSource.cs,GraveWorker,The following statement contains a magic number: while (shouldBeRunning) {  	NetworkStream istream = null;  	try {  		//attach limb  		eyeSocket = new TcpClient (new IPEndPoint (IPAddress.Any' Port));  		eyeSocket.ReceiveBufferSize = 2048576;  		//2mb  		eyeSocket.Connect (IP' Port);  		istream = eyeSocket.GetStream ();  		Running = true;  		int image_size = 0;  		byte[] buf;  		while (shouldBeRunning) {  			Thread.Sleep (5);  			//gather data in RecieveQ' don't overload  			//switch' but without the compare overhead' and with fall through  			//based off IL optimizations in LR's .net Reflector  			while (eyeSocket.Available < 4) {  				Thread.Sleep (1);  			}  			buf = new byte[4];  			istream.Read (buf' 0' 4);  			//correct header?  			//if any of the bytes are wrong  			if ((buf [0] != 1) || (buf [1] != 0) || (buf [2] != 0) || (buf [3] != 0)) {  				//find the header  				//this goes down the line until one of the conditions fails' then starts over  				while ((istream.ReadByte () != 1) || (istream.ReadByte () != 0) || (istream.ReadByte () != 0) || (istream.ReadByte () != 0)) {  				}  			}  			//Got correct header' wait for next bit  			while (eyeSocket.Available < 4) {  				Thread.Sleep (1);  			}  			//buf = new byte[4];//not strictly necesarry' we just had 4 byte header  			istream.Read (buf' 0' 4);  			image_size = IPAddress.NetworkToHostOrder (BitConverter.ToInt32 (buf' 0));  			// image size being less than zero wouldn't make sense' nor larger than buffer  			if (image_size > 0 && image_size <= 2048576) {  				buf = new byte[image_size];  				while (eyeSocket.Available < image_size) {  					Thread.Sleep (1);  				}  				istream.Read (buf' 0' image_size);  				image_size = 0;  				//Save Image  				CurImg = Bitmap.FromStream (new MemoryStream (buf));  				if (NewImageRecieved != null)  					NewImageRecieved (this' new NewImageDataRecievedEventArgs (CurImg' new MemoryStream (buf)));  			}  			else  				er ("Unknown size");  		}  	}  	catch {  		Running = false;  		return;  		//TODO: figure out better way to dispose of bad sockets when we are not connected to the bot  	}  	finally {  		try {  			eyeSocket.Close ();  			if (istream != null)  				istream.Close ();  		}  		catch {  		}  	}  }  
Magic Number,System451.Communication.Dashboard.Net.Video,WPILibTcpVideoSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\Video\ImageSource.cs,GraveWorker,The following statement contains a magic number: while (shouldBeRunning) {  	NetworkStream istream = null;  	try {  		//attach limb  		eyeSocket = new TcpClient (new IPEndPoint (IPAddress.Any' Port));  		eyeSocket.ReceiveBufferSize = 2048576;  		//2mb  		eyeSocket.Connect (IP' Port);  		istream = eyeSocket.GetStream ();  		Running = true;  		int image_size = 0;  		byte[] buf;  		while (shouldBeRunning) {  			Thread.Sleep (5);  			//gather data in RecieveQ' don't overload  			//switch' but without the compare overhead' and with fall through  			//based off IL optimizations in LR's .net Reflector  			while (eyeSocket.Available < 4) {  				Thread.Sleep (1);  			}  			buf = new byte[4];  			istream.Read (buf' 0' 4);  			//correct header?  			//if any of the bytes are wrong  			if ((buf [0] != 1) || (buf [1] != 0) || (buf [2] != 0) || (buf [3] != 0)) {  				//find the header  				//this goes down the line until one of the conditions fails' then starts over  				while ((istream.ReadByte () != 1) || (istream.ReadByte () != 0) || (istream.ReadByte () != 0) || (istream.ReadByte () != 0)) {  				}  			}  			//Got correct header' wait for next bit  			while (eyeSocket.Available < 4) {  				Thread.Sleep (1);  			}  			//buf = new byte[4];//not strictly necesarry' we just had 4 byte header  			istream.Read (buf' 0' 4);  			image_size = IPAddress.NetworkToHostOrder (BitConverter.ToInt32 (buf' 0));  			// image size being less than zero wouldn't make sense' nor larger than buffer  			if (image_size > 0 && image_size <= 2048576) {  				buf = new byte[image_size];  				while (eyeSocket.Available < image_size) {  					Thread.Sleep (1);  				}  				istream.Read (buf' 0' image_size);  				image_size = 0;  				//Save Image  				CurImg = Bitmap.FromStream (new MemoryStream (buf));  				if (NewImageRecieved != null)  					NewImageRecieved (this' new NewImageDataRecievedEventArgs (CurImg' new MemoryStream (buf)));  			}  			else  				er ("Unknown size");  		}  	}  	catch {  		Running = false;  		return;  		//TODO: figure out better way to dispose of bad sockets when we are not connected to the bot  	}  	finally {  		try {  			eyeSocket.Close ();  			if (istream != null)  				istream.Close ();  		}  		catch {  		}  	}  }  
Magic Number,System451.Communication.Dashboard.Net.Video,WPILibTcpVideoSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\Video\ImageSource.cs,GraveWorker,The following statement contains a magic number: while (shouldBeRunning) {  	NetworkStream istream = null;  	try {  		//attach limb  		eyeSocket = new TcpClient (new IPEndPoint (IPAddress.Any' Port));  		eyeSocket.ReceiveBufferSize = 2048576;  		//2mb  		eyeSocket.Connect (IP' Port);  		istream = eyeSocket.GetStream ();  		Running = true;  		int image_size = 0;  		byte[] buf;  		while (shouldBeRunning) {  			Thread.Sleep (5);  			//gather data in RecieveQ' don't overload  			//switch' but without the compare overhead' and with fall through  			//based off IL optimizations in LR's .net Reflector  			while (eyeSocket.Available < 4) {  				Thread.Sleep (1);  			}  			buf = new byte[4];  			istream.Read (buf' 0' 4);  			//correct header?  			//if any of the bytes are wrong  			if ((buf [0] != 1) || (buf [1] != 0) || (buf [2] != 0) || (buf [3] != 0)) {  				//find the header  				//this goes down the line until one of the conditions fails' then starts over  				while ((istream.ReadByte () != 1) || (istream.ReadByte () != 0) || (istream.ReadByte () != 0) || (istream.ReadByte () != 0)) {  				}  			}  			//Got correct header' wait for next bit  			while (eyeSocket.Available < 4) {  				Thread.Sleep (1);  			}  			//buf = new byte[4];//not strictly necesarry' we just had 4 byte header  			istream.Read (buf' 0' 4);  			image_size = IPAddress.NetworkToHostOrder (BitConverter.ToInt32 (buf' 0));  			// image size being less than zero wouldn't make sense' nor larger than buffer  			if (image_size > 0 && image_size <= 2048576) {  				buf = new byte[image_size];  				while (eyeSocket.Available < image_size) {  					Thread.Sleep (1);  				}  				istream.Read (buf' 0' image_size);  				image_size = 0;  				//Save Image  				CurImg = Bitmap.FromStream (new MemoryStream (buf));  				if (NewImageRecieved != null)  					NewImageRecieved (this' new NewImageDataRecievedEventArgs (CurImg' new MemoryStream (buf)));  			}  			else  				er ("Unknown size");  		}  	}  	catch {  		Running = false;  		return;  		//TODO: figure out better way to dispose of bad sockets when we are not connected to the bot  	}  	finally {  		try {  			eyeSocket.Close ();  			if (istream != null)  				istream.Close ();  		}  		catch {  		}  	}  }  
Magic Number,System451.Communication.Dashboard.Net.Video,WPILibTcpVideoSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\Video\ImageSource.cs,GraveWorker,The following statement contains a magic number: while (shouldBeRunning) {  	NetworkStream istream = null;  	try {  		//attach limb  		eyeSocket = new TcpClient (new IPEndPoint (IPAddress.Any' Port));  		eyeSocket.ReceiveBufferSize = 2048576;  		//2mb  		eyeSocket.Connect (IP' Port);  		istream = eyeSocket.GetStream ();  		Running = true;  		int image_size = 0;  		byte[] buf;  		while (shouldBeRunning) {  			Thread.Sleep (5);  			//gather data in RecieveQ' don't overload  			//switch' but without the compare overhead' and with fall through  			//based off IL optimizations in LR's .net Reflector  			while (eyeSocket.Available < 4) {  				Thread.Sleep (1);  			}  			buf = new byte[4];  			istream.Read (buf' 0' 4);  			//correct header?  			//if any of the bytes are wrong  			if ((buf [0] != 1) || (buf [1] != 0) || (buf [2] != 0) || (buf [3] != 0)) {  				//find the header  				//this goes down the line until one of the conditions fails' then starts over  				while ((istream.ReadByte () != 1) || (istream.ReadByte () != 0) || (istream.ReadByte () != 0) || (istream.ReadByte () != 0)) {  				}  			}  			//Got correct header' wait for next bit  			while (eyeSocket.Available < 4) {  				Thread.Sleep (1);  			}  			//buf = new byte[4];//not strictly necesarry' we just had 4 byte header  			istream.Read (buf' 0' 4);  			image_size = IPAddress.NetworkToHostOrder (BitConverter.ToInt32 (buf' 0));  			// image size being less than zero wouldn't make sense' nor larger than buffer  			if (image_size > 0 && image_size <= 2048576) {  				buf = new byte[image_size];  				while (eyeSocket.Available < image_size) {  					Thread.Sleep (1);  				}  				istream.Read (buf' 0' image_size);  				image_size = 0;  				//Save Image  				CurImg = Bitmap.FromStream (new MemoryStream (buf));  				if (NewImageRecieved != null)  					NewImageRecieved (this' new NewImageDataRecievedEventArgs (CurImg' new MemoryStream (buf)));  			}  			else  				er ("Unknown size");  		}  	}  	catch {  		Running = false;  		return;  		//TODO: figure out better way to dispose of bad sockets when we are not connected to the bot  	}  	finally {  		try {  			eyeSocket.Close ();  			if (istream != null)  				istream.Close ();  		}  		catch {  		}  	}  }  
Magic Number,System451.Communication.Dashboard.Net.Video,WPILibTcpVideoSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\Video\ImageSource.cs,GraveWorker,The following statement contains a magic number: while (shouldBeRunning) {  	NetworkStream istream = null;  	try {  		//attach limb  		eyeSocket = new TcpClient (new IPEndPoint (IPAddress.Any' Port));  		eyeSocket.ReceiveBufferSize = 2048576;  		//2mb  		eyeSocket.Connect (IP' Port);  		istream = eyeSocket.GetStream ();  		Running = true;  		int image_size = 0;  		byte[] buf;  		while (shouldBeRunning) {  			Thread.Sleep (5);  			//gather data in RecieveQ' don't overload  			//switch' but without the compare overhead' and with fall through  			//based off IL optimizations in LR's .net Reflector  			while (eyeSocket.Available < 4) {  				Thread.Sleep (1);  			}  			buf = new byte[4];  			istream.Read (buf' 0' 4);  			//correct header?  			//if any of the bytes are wrong  			if ((buf [0] != 1) || (buf [1] != 0) || (buf [2] != 0) || (buf [3] != 0)) {  				//find the header  				//this goes down the line until one of the conditions fails' then starts over  				while ((istream.ReadByte () != 1) || (istream.ReadByte () != 0) || (istream.ReadByte () != 0) || (istream.ReadByte () != 0)) {  				}  			}  			//Got correct header' wait for next bit  			while (eyeSocket.Available < 4) {  				Thread.Sleep (1);  			}  			//buf = new byte[4];//not strictly necesarry' we just had 4 byte header  			istream.Read (buf' 0' 4);  			image_size = IPAddress.NetworkToHostOrder (BitConverter.ToInt32 (buf' 0));  			// image size being less than zero wouldn't make sense' nor larger than buffer  			if (image_size > 0 && image_size <= 2048576) {  				buf = new byte[image_size];  				while (eyeSocket.Available < image_size) {  					Thread.Sleep (1);  				}  				istream.Read (buf' 0' image_size);  				image_size = 0;  				//Save Image  				CurImg = Bitmap.FromStream (new MemoryStream (buf));  				if (NewImageRecieved != null)  					NewImageRecieved (this' new NewImageDataRecievedEventArgs (CurImg' new MemoryStream (buf)));  			}  			else  				er ("Unknown size");  		}  	}  	catch {  		Running = false;  		return;  		//TODO: figure out better way to dispose of bad sockets when we are not connected to the bot  	}  	finally {  		try {  			eyeSocket.Close ();  			if (istream != null)  				istream.Close ();  		}  		catch {  		}  	}  }  
Magic Number,System451.Communication.Dashboard.Net.Video,WPILibTcpVideoSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\Video\ImageSource.cs,GraveWorker,The following statement contains a magic number: try {  	//attach limb  	eyeSocket = new TcpClient (new IPEndPoint (IPAddress.Any' Port));  	eyeSocket.ReceiveBufferSize = 2048576;  	//2mb  	eyeSocket.Connect (IP' Port);  	istream = eyeSocket.GetStream ();  	Running = true;  	int image_size = 0;  	byte[] buf;  	while (shouldBeRunning) {  		Thread.Sleep (5);  		//gather data in RecieveQ' don't overload  		//switch' but without the compare overhead' and with fall through  		//based off IL optimizations in LR's .net Reflector  		while (eyeSocket.Available < 4) {  			Thread.Sleep (1);  		}  		buf = new byte[4];  		istream.Read (buf' 0' 4);  		//correct header?  		//if any of the bytes are wrong  		if ((buf [0] != 1) || (buf [1] != 0) || (buf [2] != 0) || (buf [3] != 0)) {  			//find the header  			//this goes down the line until one of the conditions fails' then starts over  			while ((istream.ReadByte () != 1) || (istream.ReadByte () != 0) || (istream.ReadByte () != 0) || (istream.ReadByte () != 0)) {  			}  		}  		//Got correct header' wait for next bit  		while (eyeSocket.Available < 4) {  			Thread.Sleep (1);  		}  		//buf = new byte[4];//not strictly necesarry' we just had 4 byte header  		istream.Read (buf' 0' 4);  		image_size = IPAddress.NetworkToHostOrder (BitConverter.ToInt32 (buf' 0));  		// image size being less than zero wouldn't make sense' nor larger than buffer  		if (image_size > 0 && image_size <= 2048576) {  			buf = new byte[image_size];  			while (eyeSocket.Available < image_size) {  				Thread.Sleep (1);  			}  			istream.Read (buf' 0' image_size);  			image_size = 0;  			//Save Image  			CurImg = Bitmap.FromStream (new MemoryStream (buf));  			if (NewImageRecieved != null)  				NewImageRecieved (this' new NewImageDataRecievedEventArgs (CurImg' new MemoryStream (buf)));  		}  		else  			er ("Unknown size");  	}  }  catch {  	Running = false;  	return;  	//TODO: figure out better way to dispose of bad sockets when we are not connected to the bot  }  finally {  	try {  		eyeSocket.Close ();  		if (istream != null)  			istream.Close ();  	}  	catch {  	}  }  
Magic Number,System451.Communication.Dashboard.Net.Video,WPILibTcpVideoSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\Video\ImageSource.cs,GraveWorker,The following statement contains a magic number: try {  	//attach limb  	eyeSocket = new TcpClient (new IPEndPoint (IPAddress.Any' Port));  	eyeSocket.ReceiveBufferSize = 2048576;  	//2mb  	eyeSocket.Connect (IP' Port);  	istream = eyeSocket.GetStream ();  	Running = true;  	int image_size = 0;  	byte[] buf;  	while (shouldBeRunning) {  		Thread.Sleep (5);  		//gather data in RecieveQ' don't overload  		//switch' but without the compare overhead' and with fall through  		//based off IL optimizations in LR's .net Reflector  		while (eyeSocket.Available < 4) {  			Thread.Sleep (1);  		}  		buf = new byte[4];  		istream.Read (buf' 0' 4);  		//correct header?  		//if any of the bytes are wrong  		if ((buf [0] != 1) || (buf [1] != 0) || (buf [2] != 0) || (buf [3] != 0)) {  			//find the header  			//this goes down the line until one of the conditions fails' then starts over  			while ((istream.ReadByte () != 1) || (istream.ReadByte () != 0) || (istream.ReadByte () != 0) || (istream.ReadByte () != 0)) {  			}  		}  		//Got correct header' wait for next bit  		while (eyeSocket.Available < 4) {  			Thread.Sleep (1);  		}  		//buf = new byte[4];//not strictly necesarry' we just had 4 byte header  		istream.Read (buf' 0' 4);  		image_size = IPAddress.NetworkToHostOrder (BitConverter.ToInt32 (buf' 0));  		// image size being less than zero wouldn't make sense' nor larger than buffer  		if (image_size > 0 && image_size <= 2048576) {  			buf = new byte[image_size];  			while (eyeSocket.Available < image_size) {  				Thread.Sleep (1);  			}  			istream.Read (buf' 0' image_size);  			image_size = 0;  			//Save Image  			CurImg = Bitmap.FromStream (new MemoryStream (buf));  			if (NewImageRecieved != null)  				NewImageRecieved (this' new NewImageDataRecievedEventArgs (CurImg' new MemoryStream (buf)));  		}  		else  			er ("Unknown size");  	}  }  catch {  	Running = false;  	return;  	//TODO: figure out better way to dispose of bad sockets when we are not connected to the bot  }  finally {  	try {  		eyeSocket.Close ();  		if (istream != null)  			istream.Close ();  	}  	catch {  	}  }  
Magic Number,System451.Communication.Dashboard.Net.Video,WPILibTcpVideoSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\Video\ImageSource.cs,GraveWorker,The following statement contains a magic number: try {  	//attach limb  	eyeSocket = new TcpClient (new IPEndPoint (IPAddress.Any' Port));  	eyeSocket.ReceiveBufferSize = 2048576;  	//2mb  	eyeSocket.Connect (IP' Port);  	istream = eyeSocket.GetStream ();  	Running = true;  	int image_size = 0;  	byte[] buf;  	while (shouldBeRunning) {  		Thread.Sleep (5);  		//gather data in RecieveQ' don't overload  		//switch' but without the compare overhead' and with fall through  		//based off IL optimizations in LR's .net Reflector  		while (eyeSocket.Available < 4) {  			Thread.Sleep (1);  		}  		buf = new byte[4];  		istream.Read (buf' 0' 4);  		//correct header?  		//if any of the bytes are wrong  		if ((buf [0] != 1) || (buf [1] != 0) || (buf [2] != 0) || (buf [3] != 0)) {  			//find the header  			//this goes down the line until one of the conditions fails' then starts over  			while ((istream.ReadByte () != 1) || (istream.ReadByte () != 0) || (istream.ReadByte () != 0) || (istream.ReadByte () != 0)) {  			}  		}  		//Got correct header' wait for next bit  		while (eyeSocket.Available < 4) {  			Thread.Sleep (1);  		}  		//buf = new byte[4];//not strictly necesarry' we just had 4 byte header  		istream.Read (buf' 0' 4);  		image_size = IPAddress.NetworkToHostOrder (BitConverter.ToInt32 (buf' 0));  		// image size being less than zero wouldn't make sense' nor larger than buffer  		if (image_size > 0 && image_size <= 2048576) {  			buf = new byte[image_size];  			while (eyeSocket.Available < image_size) {  				Thread.Sleep (1);  			}  			istream.Read (buf' 0' image_size);  			image_size = 0;  			//Save Image  			CurImg = Bitmap.FromStream (new MemoryStream (buf));  			if (NewImageRecieved != null)  				NewImageRecieved (this' new NewImageDataRecievedEventArgs (CurImg' new MemoryStream (buf)));  		}  		else  			er ("Unknown size");  	}  }  catch {  	Running = false;  	return;  	//TODO: figure out better way to dispose of bad sockets when we are not connected to the bot  }  finally {  	try {  		eyeSocket.Close ();  		if (istream != null)  			istream.Close ();  	}  	catch {  	}  }  
Magic Number,System451.Communication.Dashboard.Net.Video,WPILibTcpVideoSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\Video\ImageSource.cs,GraveWorker,The following statement contains a magic number: try {  	//attach limb  	eyeSocket = new TcpClient (new IPEndPoint (IPAddress.Any' Port));  	eyeSocket.ReceiveBufferSize = 2048576;  	//2mb  	eyeSocket.Connect (IP' Port);  	istream = eyeSocket.GetStream ();  	Running = true;  	int image_size = 0;  	byte[] buf;  	while (shouldBeRunning) {  		Thread.Sleep (5);  		//gather data in RecieveQ' don't overload  		//switch' but without the compare overhead' and with fall through  		//based off IL optimizations in LR's .net Reflector  		while (eyeSocket.Available < 4) {  			Thread.Sleep (1);  		}  		buf = new byte[4];  		istream.Read (buf' 0' 4);  		//correct header?  		//if any of the bytes are wrong  		if ((buf [0] != 1) || (buf [1] != 0) || (buf [2] != 0) || (buf [3] != 0)) {  			//find the header  			//this goes down the line until one of the conditions fails' then starts over  			while ((istream.ReadByte () != 1) || (istream.ReadByte () != 0) || (istream.ReadByte () != 0) || (istream.ReadByte () != 0)) {  			}  		}  		//Got correct header' wait for next bit  		while (eyeSocket.Available < 4) {  			Thread.Sleep (1);  		}  		//buf = new byte[4];//not strictly necesarry' we just had 4 byte header  		istream.Read (buf' 0' 4);  		image_size = IPAddress.NetworkToHostOrder (BitConverter.ToInt32 (buf' 0));  		// image size being less than zero wouldn't make sense' nor larger than buffer  		if (image_size > 0 && image_size <= 2048576) {  			buf = new byte[image_size];  			while (eyeSocket.Available < image_size) {  				Thread.Sleep (1);  			}  			istream.Read (buf' 0' image_size);  			image_size = 0;  			//Save Image  			CurImg = Bitmap.FromStream (new MemoryStream (buf));  			if (NewImageRecieved != null)  				NewImageRecieved (this' new NewImageDataRecievedEventArgs (CurImg' new MemoryStream (buf)));  		}  		else  			er ("Unknown size");  	}  }  catch {  	Running = false;  	return;  	//TODO: figure out better way to dispose of bad sockets when we are not connected to the bot  }  finally {  	try {  		eyeSocket.Close ();  		if (istream != null)  			istream.Close ();  	}  	catch {  	}  }  
Magic Number,System451.Communication.Dashboard.Net.Video,WPILibTcpVideoSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\Video\ImageSource.cs,GraveWorker,The following statement contains a magic number: try {  	//attach limb  	eyeSocket = new TcpClient (new IPEndPoint (IPAddress.Any' Port));  	eyeSocket.ReceiveBufferSize = 2048576;  	//2mb  	eyeSocket.Connect (IP' Port);  	istream = eyeSocket.GetStream ();  	Running = true;  	int image_size = 0;  	byte[] buf;  	while (shouldBeRunning) {  		Thread.Sleep (5);  		//gather data in RecieveQ' don't overload  		//switch' but without the compare overhead' and with fall through  		//based off IL optimizations in LR's .net Reflector  		while (eyeSocket.Available < 4) {  			Thread.Sleep (1);  		}  		buf = new byte[4];  		istream.Read (buf' 0' 4);  		//correct header?  		//if any of the bytes are wrong  		if ((buf [0] != 1) || (buf [1] != 0) || (buf [2] != 0) || (buf [3] != 0)) {  			//find the header  			//this goes down the line until one of the conditions fails' then starts over  			while ((istream.ReadByte () != 1) || (istream.ReadByte () != 0) || (istream.ReadByte () != 0) || (istream.ReadByte () != 0)) {  			}  		}  		//Got correct header' wait for next bit  		while (eyeSocket.Available < 4) {  			Thread.Sleep (1);  		}  		//buf = new byte[4];//not strictly necesarry' we just had 4 byte header  		istream.Read (buf' 0' 4);  		image_size = IPAddress.NetworkToHostOrder (BitConverter.ToInt32 (buf' 0));  		// image size being less than zero wouldn't make sense' nor larger than buffer  		if (image_size > 0 && image_size <= 2048576) {  			buf = new byte[image_size];  			while (eyeSocket.Available < image_size) {  				Thread.Sleep (1);  			}  			istream.Read (buf' 0' image_size);  			image_size = 0;  			//Save Image  			CurImg = Bitmap.FromStream (new MemoryStream (buf));  			if (NewImageRecieved != null)  				NewImageRecieved (this' new NewImageDataRecievedEventArgs (CurImg' new MemoryStream (buf)));  		}  		else  			er ("Unknown size");  	}  }  catch {  	Running = false;  	return;  	//TODO: figure out better way to dispose of bad sockets when we are not connected to the bot  }  finally {  	try {  		eyeSocket.Close ();  		if (istream != null)  			istream.Close ();  	}  	catch {  	}  }  
Magic Number,System451.Communication.Dashboard.Net.Video,WPILibTcpVideoSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\Video\ImageSource.cs,GraveWorker,The following statement contains a magic number: try {  	//attach limb  	eyeSocket = new TcpClient (new IPEndPoint (IPAddress.Any' Port));  	eyeSocket.ReceiveBufferSize = 2048576;  	//2mb  	eyeSocket.Connect (IP' Port);  	istream = eyeSocket.GetStream ();  	Running = true;  	int image_size = 0;  	byte[] buf;  	while (shouldBeRunning) {  		Thread.Sleep (5);  		//gather data in RecieveQ' don't overload  		//switch' but without the compare overhead' and with fall through  		//based off IL optimizations in LR's .net Reflector  		while (eyeSocket.Available < 4) {  			Thread.Sleep (1);  		}  		buf = new byte[4];  		istream.Read (buf' 0' 4);  		//correct header?  		//if any of the bytes are wrong  		if ((buf [0] != 1) || (buf [1] != 0) || (buf [2] != 0) || (buf [3] != 0)) {  			//find the header  			//this goes down the line until one of the conditions fails' then starts over  			while ((istream.ReadByte () != 1) || (istream.ReadByte () != 0) || (istream.ReadByte () != 0) || (istream.ReadByte () != 0)) {  			}  		}  		//Got correct header' wait for next bit  		while (eyeSocket.Available < 4) {  			Thread.Sleep (1);  		}  		//buf = new byte[4];//not strictly necesarry' we just had 4 byte header  		istream.Read (buf' 0' 4);  		image_size = IPAddress.NetworkToHostOrder (BitConverter.ToInt32 (buf' 0));  		// image size being less than zero wouldn't make sense' nor larger than buffer  		if (image_size > 0 && image_size <= 2048576) {  			buf = new byte[image_size];  			while (eyeSocket.Available < image_size) {  				Thread.Sleep (1);  			}  			istream.Read (buf' 0' image_size);  			image_size = 0;  			//Save Image  			CurImg = Bitmap.FromStream (new MemoryStream (buf));  			if (NewImageRecieved != null)  				NewImageRecieved (this' new NewImageDataRecievedEventArgs (CurImg' new MemoryStream (buf)));  		}  		else  			er ("Unknown size");  	}  }  catch {  	Running = false;  	return;  	//TODO: figure out better way to dispose of bad sockets when we are not connected to the bot  }  finally {  	try {  		eyeSocket.Close ();  		if (istream != null)  			istream.Close ();  	}  	catch {  	}  }  
Magic Number,System451.Communication.Dashboard.Net.Video,WPILibTcpVideoSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\Video\ImageSource.cs,GraveWorker,The following statement contains a magic number: try {  	//attach limb  	eyeSocket = new TcpClient (new IPEndPoint (IPAddress.Any' Port));  	eyeSocket.ReceiveBufferSize = 2048576;  	//2mb  	eyeSocket.Connect (IP' Port);  	istream = eyeSocket.GetStream ();  	Running = true;  	int image_size = 0;  	byte[] buf;  	while (shouldBeRunning) {  		Thread.Sleep (5);  		//gather data in RecieveQ' don't overload  		//switch' but without the compare overhead' and with fall through  		//based off IL optimizations in LR's .net Reflector  		while (eyeSocket.Available < 4) {  			Thread.Sleep (1);  		}  		buf = new byte[4];  		istream.Read (buf' 0' 4);  		//correct header?  		//if any of the bytes are wrong  		if ((buf [0] != 1) || (buf [1] != 0) || (buf [2] != 0) || (buf [3] != 0)) {  			//find the header  			//this goes down the line until one of the conditions fails' then starts over  			while ((istream.ReadByte () != 1) || (istream.ReadByte () != 0) || (istream.ReadByte () != 0) || (istream.ReadByte () != 0)) {  			}  		}  		//Got correct header' wait for next bit  		while (eyeSocket.Available < 4) {  			Thread.Sleep (1);  		}  		//buf = new byte[4];//not strictly necesarry' we just had 4 byte header  		istream.Read (buf' 0' 4);  		image_size = IPAddress.NetworkToHostOrder (BitConverter.ToInt32 (buf' 0));  		// image size being less than zero wouldn't make sense' nor larger than buffer  		if (image_size > 0 && image_size <= 2048576) {  			buf = new byte[image_size];  			while (eyeSocket.Available < image_size) {  				Thread.Sleep (1);  			}  			istream.Read (buf' 0' image_size);  			image_size = 0;  			//Save Image  			CurImg = Bitmap.FromStream (new MemoryStream (buf));  			if (NewImageRecieved != null)  				NewImageRecieved (this' new NewImageDataRecievedEventArgs (CurImg' new MemoryStream (buf)));  		}  		else  			er ("Unknown size");  	}  }  catch {  	Running = false;  	return;  	//TODO: figure out better way to dispose of bad sockets when we are not connected to the bot  }  finally {  	try {  		eyeSocket.Close ();  		if (istream != null)  			istream.Close ();  	}  	catch {  	}  }  
Magic Number,System451.Communication.Dashboard.Net.Video,WPILibTcpVideoSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\Video\ImageSource.cs,GraveWorker,The following statement contains a magic number: try {  	//attach limb  	eyeSocket = new TcpClient (new IPEndPoint (IPAddress.Any' Port));  	eyeSocket.ReceiveBufferSize = 2048576;  	//2mb  	eyeSocket.Connect (IP' Port);  	istream = eyeSocket.GetStream ();  	Running = true;  	int image_size = 0;  	byte[] buf;  	while (shouldBeRunning) {  		Thread.Sleep (5);  		//gather data in RecieveQ' don't overload  		//switch' but without the compare overhead' and with fall through  		//based off IL optimizations in LR's .net Reflector  		while (eyeSocket.Available < 4) {  			Thread.Sleep (1);  		}  		buf = new byte[4];  		istream.Read (buf' 0' 4);  		//correct header?  		//if any of the bytes are wrong  		if ((buf [0] != 1) || (buf [1] != 0) || (buf [2] != 0) || (buf [3] != 0)) {  			//find the header  			//this goes down the line until one of the conditions fails' then starts over  			while ((istream.ReadByte () != 1) || (istream.ReadByte () != 0) || (istream.ReadByte () != 0) || (istream.ReadByte () != 0)) {  			}  		}  		//Got correct header' wait for next bit  		while (eyeSocket.Available < 4) {  			Thread.Sleep (1);  		}  		//buf = new byte[4];//not strictly necesarry' we just had 4 byte header  		istream.Read (buf' 0' 4);  		image_size = IPAddress.NetworkToHostOrder (BitConverter.ToInt32 (buf' 0));  		// image size being less than zero wouldn't make sense' nor larger than buffer  		if (image_size > 0 && image_size <= 2048576) {  			buf = new byte[image_size];  			while (eyeSocket.Available < image_size) {  				Thread.Sleep (1);  			}  			istream.Read (buf' 0' image_size);  			image_size = 0;  			//Save Image  			CurImg = Bitmap.FromStream (new MemoryStream (buf));  			if (NewImageRecieved != null)  				NewImageRecieved (this' new NewImageDataRecievedEventArgs (CurImg' new MemoryStream (buf)));  		}  		else  			er ("Unknown size");  	}  }  catch {  	Running = false;  	return;  	//TODO: figure out better way to dispose of bad sockets when we are not connected to the bot  }  finally {  	try {  		eyeSocket.Close ();  		if (istream != null)  			istream.Close ();  	}  	catch {  	}  }  
Magic Number,System451.Communication.Dashboard.Net.Video,WPILibTcpVideoSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\Video\ImageSource.cs,GraveWorker,The following statement contains a magic number: try {  	//attach limb  	eyeSocket = new TcpClient (new IPEndPoint (IPAddress.Any' Port));  	eyeSocket.ReceiveBufferSize = 2048576;  	//2mb  	eyeSocket.Connect (IP' Port);  	istream = eyeSocket.GetStream ();  	Running = true;  	int image_size = 0;  	byte[] buf;  	while (shouldBeRunning) {  		Thread.Sleep (5);  		//gather data in RecieveQ' don't overload  		//switch' but without the compare overhead' and with fall through  		//based off IL optimizations in LR's .net Reflector  		while (eyeSocket.Available < 4) {  			Thread.Sleep (1);  		}  		buf = new byte[4];  		istream.Read (buf' 0' 4);  		//correct header?  		//if any of the bytes are wrong  		if ((buf [0] != 1) || (buf [1] != 0) || (buf [2] != 0) || (buf [3] != 0)) {  			//find the header  			//this goes down the line until one of the conditions fails' then starts over  			while ((istream.ReadByte () != 1) || (istream.ReadByte () != 0) || (istream.ReadByte () != 0) || (istream.ReadByte () != 0)) {  			}  		}  		//Got correct header' wait for next bit  		while (eyeSocket.Available < 4) {  			Thread.Sleep (1);  		}  		//buf = new byte[4];//not strictly necesarry' we just had 4 byte header  		istream.Read (buf' 0' 4);  		image_size = IPAddress.NetworkToHostOrder (BitConverter.ToInt32 (buf' 0));  		// image size being less than zero wouldn't make sense' nor larger than buffer  		if (image_size > 0 && image_size <= 2048576) {  			buf = new byte[image_size];  			while (eyeSocket.Available < image_size) {  				Thread.Sleep (1);  			}  			istream.Read (buf' 0' image_size);  			image_size = 0;  			//Save Image  			CurImg = Bitmap.FromStream (new MemoryStream (buf));  			if (NewImageRecieved != null)  				NewImageRecieved (this' new NewImageDataRecievedEventArgs (CurImg' new MemoryStream (buf)));  		}  		else  			er ("Unknown size");  	}  }  catch {  	Running = false;  	return;  	//TODO: figure out better way to dispose of bad sockets when we are not connected to the bot  }  finally {  	try {  		eyeSocket.Close ();  		if (istream != null)  			istream.Close ();  	}  	catch {  	}  }  
Magic Number,System451.Communication.Dashboard.Net.Video,WPILibTcpVideoSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\Video\ImageSource.cs,GraveWorker,The following statement contains a magic number: try {  	//attach limb  	eyeSocket = new TcpClient (new IPEndPoint (IPAddress.Any' Port));  	eyeSocket.ReceiveBufferSize = 2048576;  	//2mb  	eyeSocket.Connect (IP' Port);  	istream = eyeSocket.GetStream ();  	Running = true;  	int image_size = 0;  	byte[] buf;  	while (shouldBeRunning) {  		Thread.Sleep (5);  		//gather data in RecieveQ' don't overload  		//switch' but without the compare overhead' and with fall through  		//based off IL optimizations in LR's .net Reflector  		while (eyeSocket.Available < 4) {  			Thread.Sleep (1);  		}  		buf = new byte[4];  		istream.Read (buf' 0' 4);  		//correct header?  		//if any of the bytes are wrong  		if ((buf [0] != 1) || (buf [1] != 0) || (buf [2] != 0) || (buf [3] != 0)) {  			//find the header  			//this goes down the line until one of the conditions fails' then starts over  			while ((istream.ReadByte () != 1) || (istream.ReadByte () != 0) || (istream.ReadByte () != 0) || (istream.ReadByte () != 0)) {  			}  		}  		//Got correct header' wait for next bit  		while (eyeSocket.Available < 4) {  			Thread.Sleep (1);  		}  		//buf = new byte[4];//not strictly necesarry' we just had 4 byte header  		istream.Read (buf' 0' 4);  		image_size = IPAddress.NetworkToHostOrder (BitConverter.ToInt32 (buf' 0));  		// image size being less than zero wouldn't make sense' nor larger than buffer  		if (image_size > 0 && image_size <= 2048576) {  			buf = new byte[image_size];  			while (eyeSocket.Available < image_size) {  				Thread.Sleep (1);  			}  			istream.Read (buf' 0' image_size);  			image_size = 0;  			//Save Image  			CurImg = Bitmap.FromStream (new MemoryStream (buf));  			if (NewImageRecieved != null)  				NewImageRecieved (this' new NewImageDataRecievedEventArgs (CurImg' new MemoryStream (buf)));  		}  		else  			er ("Unknown size");  	}  }  catch {  	Running = false;  	return;  	//TODO: figure out better way to dispose of bad sockets when we are not connected to the bot  }  finally {  	try {  		eyeSocket.Close ();  		if (istream != null)  			istream.Close ();  	}  	catch {  	}  }  
Magic Number,System451.Communication.Dashboard.Net.Video,WPILibTcpVideoSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\Video\ImageSource.cs,GraveWorker,The following statement contains a magic number: eyeSocket.ReceiveBufferSize = 2048576;  
Magic Number,System451.Communication.Dashboard.Net.Video,WPILibTcpVideoSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\Video\ImageSource.cs,GraveWorker,The following statement contains a magic number: while (shouldBeRunning) {  	Thread.Sleep (5);  	//gather data in RecieveQ' don't overload  	//switch' but without the compare overhead' and with fall through  	//based off IL optimizations in LR's .net Reflector  	while (eyeSocket.Available < 4) {  		Thread.Sleep (1);  	}  	buf = new byte[4];  	istream.Read (buf' 0' 4);  	//correct header?  	//if any of the bytes are wrong  	if ((buf [0] != 1) || (buf [1] != 0) || (buf [2] != 0) || (buf [3] != 0)) {  		//find the header  		//this goes down the line until one of the conditions fails' then starts over  		while ((istream.ReadByte () != 1) || (istream.ReadByte () != 0) || (istream.ReadByte () != 0) || (istream.ReadByte () != 0)) {  		}  	}  	//Got correct header' wait for next bit  	while (eyeSocket.Available < 4) {  		Thread.Sleep (1);  	}  	//buf = new byte[4];//not strictly necesarry' we just had 4 byte header  	istream.Read (buf' 0' 4);  	image_size = IPAddress.NetworkToHostOrder (BitConverter.ToInt32 (buf' 0));  	// image size being less than zero wouldn't make sense' nor larger than buffer  	if (image_size > 0 && image_size <= 2048576) {  		buf = new byte[image_size];  		while (eyeSocket.Available < image_size) {  			Thread.Sleep (1);  		}  		istream.Read (buf' 0' image_size);  		image_size = 0;  		//Save Image  		CurImg = Bitmap.FromStream (new MemoryStream (buf));  		if (NewImageRecieved != null)  			NewImageRecieved (this' new NewImageDataRecievedEventArgs (CurImg' new MemoryStream (buf)));  	}  	else  		er ("Unknown size");  }  
Magic Number,System451.Communication.Dashboard.Net.Video,WPILibTcpVideoSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\Video\ImageSource.cs,GraveWorker,The following statement contains a magic number: while (shouldBeRunning) {  	Thread.Sleep (5);  	//gather data in RecieveQ' don't overload  	//switch' but without the compare overhead' and with fall through  	//based off IL optimizations in LR's .net Reflector  	while (eyeSocket.Available < 4) {  		Thread.Sleep (1);  	}  	buf = new byte[4];  	istream.Read (buf' 0' 4);  	//correct header?  	//if any of the bytes are wrong  	if ((buf [0] != 1) || (buf [1] != 0) || (buf [2] != 0) || (buf [3] != 0)) {  		//find the header  		//this goes down the line until one of the conditions fails' then starts over  		while ((istream.ReadByte () != 1) || (istream.ReadByte () != 0) || (istream.ReadByte () != 0) || (istream.ReadByte () != 0)) {  		}  	}  	//Got correct header' wait for next bit  	while (eyeSocket.Available < 4) {  		Thread.Sleep (1);  	}  	//buf = new byte[4];//not strictly necesarry' we just had 4 byte header  	istream.Read (buf' 0' 4);  	image_size = IPAddress.NetworkToHostOrder (BitConverter.ToInt32 (buf' 0));  	// image size being less than zero wouldn't make sense' nor larger than buffer  	if (image_size > 0 && image_size <= 2048576) {  		buf = new byte[image_size];  		while (eyeSocket.Available < image_size) {  			Thread.Sleep (1);  		}  		istream.Read (buf' 0' image_size);  		image_size = 0;  		//Save Image  		CurImg = Bitmap.FromStream (new MemoryStream (buf));  		if (NewImageRecieved != null)  			NewImageRecieved (this' new NewImageDataRecievedEventArgs (CurImg' new MemoryStream (buf)));  	}  	else  		er ("Unknown size");  }  
Magic Number,System451.Communication.Dashboard.Net.Video,WPILibTcpVideoSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\Video\ImageSource.cs,GraveWorker,The following statement contains a magic number: while (shouldBeRunning) {  	Thread.Sleep (5);  	//gather data in RecieveQ' don't overload  	//switch' but without the compare overhead' and with fall through  	//based off IL optimizations in LR's .net Reflector  	while (eyeSocket.Available < 4) {  		Thread.Sleep (1);  	}  	buf = new byte[4];  	istream.Read (buf' 0' 4);  	//correct header?  	//if any of the bytes are wrong  	if ((buf [0] != 1) || (buf [1] != 0) || (buf [2] != 0) || (buf [3] != 0)) {  		//find the header  		//this goes down the line until one of the conditions fails' then starts over  		while ((istream.ReadByte () != 1) || (istream.ReadByte () != 0) || (istream.ReadByte () != 0) || (istream.ReadByte () != 0)) {  		}  	}  	//Got correct header' wait for next bit  	while (eyeSocket.Available < 4) {  		Thread.Sleep (1);  	}  	//buf = new byte[4];//not strictly necesarry' we just had 4 byte header  	istream.Read (buf' 0' 4);  	image_size = IPAddress.NetworkToHostOrder (BitConverter.ToInt32 (buf' 0));  	// image size being less than zero wouldn't make sense' nor larger than buffer  	if (image_size > 0 && image_size <= 2048576) {  		buf = new byte[image_size];  		while (eyeSocket.Available < image_size) {  			Thread.Sleep (1);  		}  		istream.Read (buf' 0' image_size);  		image_size = 0;  		//Save Image  		CurImg = Bitmap.FromStream (new MemoryStream (buf));  		if (NewImageRecieved != null)  			NewImageRecieved (this' new NewImageDataRecievedEventArgs (CurImg' new MemoryStream (buf)));  	}  	else  		er ("Unknown size");  }  
Magic Number,System451.Communication.Dashboard.Net.Video,WPILibTcpVideoSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\Video\ImageSource.cs,GraveWorker,The following statement contains a magic number: while (shouldBeRunning) {  	Thread.Sleep (5);  	//gather data in RecieveQ' don't overload  	//switch' but without the compare overhead' and with fall through  	//based off IL optimizations in LR's .net Reflector  	while (eyeSocket.Available < 4) {  		Thread.Sleep (1);  	}  	buf = new byte[4];  	istream.Read (buf' 0' 4);  	//correct header?  	//if any of the bytes are wrong  	if ((buf [0] != 1) || (buf [1] != 0) || (buf [2] != 0) || (buf [3] != 0)) {  		//find the header  		//this goes down the line until one of the conditions fails' then starts over  		while ((istream.ReadByte () != 1) || (istream.ReadByte () != 0) || (istream.ReadByte () != 0) || (istream.ReadByte () != 0)) {  		}  	}  	//Got correct header' wait for next bit  	while (eyeSocket.Available < 4) {  		Thread.Sleep (1);  	}  	//buf = new byte[4];//not strictly necesarry' we just had 4 byte header  	istream.Read (buf' 0' 4);  	image_size = IPAddress.NetworkToHostOrder (BitConverter.ToInt32 (buf' 0));  	// image size being less than zero wouldn't make sense' nor larger than buffer  	if (image_size > 0 && image_size <= 2048576) {  		buf = new byte[image_size];  		while (eyeSocket.Available < image_size) {  			Thread.Sleep (1);  		}  		istream.Read (buf' 0' image_size);  		image_size = 0;  		//Save Image  		CurImg = Bitmap.FromStream (new MemoryStream (buf));  		if (NewImageRecieved != null)  			NewImageRecieved (this' new NewImageDataRecievedEventArgs (CurImg' new MemoryStream (buf)));  	}  	else  		er ("Unknown size");  }  
Magic Number,System451.Communication.Dashboard.Net.Video,WPILibTcpVideoSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\Video\ImageSource.cs,GraveWorker,The following statement contains a magic number: while (shouldBeRunning) {  	Thread.Sleep (5);  	//gather data in RecieveQ' don't overload  	//switch' but without the compare overhead' and with fall through  	//based off IL optimizations in LR's .net Reflector  	while (eyeSocket.Available < 4) {  		Thread.Sleep (1);  	}  	buf = new byte[4];  	istream.Read (buf' 0' 4);  	//correct header?  	//if any of the bytes are wrong  	if ((buf [0] != 1) || (buf [1] != 0) || (buf [2] != 0) || (buf [3] != 0)) {  		//find the header  		//this goes down the line until one of the conditions fails' then starts over  		while ((istream.ReadByte () != 1) || (istream.ReadByte () != 0) || (istream.ReadByte () != 0) || (istream.ReadByte () != 0)) {  		}  	}  	//Got correct header' wait for next bit  	while (eyeSocket.Available < 4) {  		Thread.Sleep (1);  	}  	//buf = new byte[4];//not strictly necesarry' we just had 4 byte header  	istream.Read (buf' 0' 4);  	image_size = IPAddress.NetworkToHostOrder (BitConverter.ToInt32 (buf' 0));  	// image size being less than zero wouldn't make sense' nor larger than buffer  	if (image_size > 0 && image_size <= 2048576) {  		buf = new byte[image_size];  		while (eyeSocket.Available < image_size) {  			Thread.Sleep (1);  		}  		istream.Read (buf' 0' image_size);  		image_size = 0;  		//Save Image  		CurImg = Bitmap.FromStream (new MemoryStream (buf));  		if (NewImageRecieved != null)  			NewImageRecieved (this' new NewImageDataRecievedEventArgs (CurImg' new MemoryStream (buf)));  	}  	else  		er ("Unknown size");  }  
Magic Number,System451.Communication.Dashboard.Net.Video,WPILibTcpVideoSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\Video\ImageSource.cs,GraveWorker,The following statement contains a magic number: while (shouldBeRunning) {  	Thread.Sleep (5);  	//gather data in RecieveQ' don't overload  	//switch' but without the compare overhead' and with fall through  	//based off IL optimizations in LR's .net Reflector  	while (eyeSocket.Available < 4) {  		Thread.Sleep (1);  	}  	buf = new byte[4];  	istream.Read (buf' 0' 4);  	//correct header?  	//if any of the bytes are wrong  	if ((buf [0] != 1) || (buf [1] != 0) || (buf [2] != 0) || (buf [3] != 0)) {  		//find the header  		//this goes down the line until one of the conditions fails' then starts over  		while ((istream.ReadByte () != 1) || (istream.ReadByte () != 0) || (istream.ReadByte () != 0) || (istream.ReadByte () != 0)) {  		}  	}  	//Got correct header' wait for next bit  	while (eyeSocket.Available < 4) {  		Thread.Sleep (1);  	}  	//buf = new byte[4];//not strictly necesarry' we just had 4 byte header  	istream.Read (buf' 0' 4);  	image_size = IPAddress.NetworkToHostOrder (BitConverter.ToInt32 (buf' 0));  	// image size being less than zero wouldn't make sense' nor larger than buffer  	if (image_size > 0 && image_size <= 2048576) {  		buf = new byte[image_size];  		while (eyeSocket.Available < image_size) {  			Thread.Sleep (1);  		}  		istream.Read (buf' 0' image_size);  		image_size = 0;  		//Save Image  		CurImg = Bitmap.FromStream (new MemoryStream (buf));  		if (NewImageRecieved != null)  			NewImageRecieved (this' new NewImageDataRecievedEventArgs (CurImg' new MemoryStream (buf)));  	}  	else  		er ("Unknown size");  }  
Magic Number,System451.Communication.Dashboard.Net.Video,WPILibTcpVideoSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\Video\ImageSource.cs,GraveWorker,The following statement contains a magic number: while (shouldBeRunning) {  	Thread.Sleep (5);  	//gather data in RecieveQ' don't overload  	//switch' but without the compare overhead' and with fall through  	//based off IL optimizations in LR's .net Reflector  	while (eyeSocket.Available < 4) {  		Thread.Sleep (1);  	}  	buf = new byte[4];  	istream.Read (buf' 0' 4);  	//correct header?  	//if any of the bytes are wrong  	if ((buf [0] != 1) || (buf [1] != 0) || (buf [2] != 0) || (buf [3] != 0)) {  		//find the header  		//this goes down the line until one of the conditions fails' then starts over  		while ((istream.ReadByte () != 1) || (istream.ReadByte () != 0) || (istream.ReadByte () != 0) || (istream.ReadByte () != 0)) {  		}  	}  	//Got correct header' wait for next bit  	while (eyeSocket.Available < 4) {  		Thread.Sleep (1);  	}  	//buf = new byte[4];//not strictly necesarry' we just had 4 byte header  	istream.Read (buf' 0' 4);  	image_size = IPAddress.NetworkToHostOrder (BitConverter.ToInt32 (buf' 0));  	// image size being less than zero wouldn't make sense' nor larger than buffer  	if (image_size > 0 && image_size <= 2048576) {  		buf = new byte[image_size];  		while (eyeSocket.Available < image_size) {  			Thread.Sleep (1);  		}  		istream.Read (buf' 0' image_size);  		image_size = 0;  		//Save Image  		CurImg = Bitmap.FromStream (new MemoryStream (buf));  		if (NewImageRecieved != null)  			NewImageRecieved (this' new NewImageDataRecievedEventArgs (CurImg' new MemoryStream (buf)));  	}  	else  		er ("Unknown size");  }  
Magic Number,System451.Communication.Dashboard.Net.Video,WPILibTcpVideoSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\Video\ImageSource.cs,GraveWorker,The following statement contains a magic number: while (shouldBeRunning) {  	Thread.Sleep (5);  	//gather data in RecieveQ' don't overload  	//switch' but without the compare overhead' and with fall through  	//based off IL optimizations in LR's .net Reflector  	while (eyeSocket.Available < 4) {  		Thread.Sleep (1);  	}  	buf = new byte[4];  	istream.Read (buf' 0' 4);  	//correct header?  	//if any of the bytes are wrong  	if ((buf [0] != 1) || (buf [1] != 0) || (buf [2] != 0) || (buf [3] != 0)) {  		//find the header  		//this goes down the line until one of the conditions fails' then starts over  		while ((istream.ReadByte () != 1) || (istream.ReadByte () != 0) || (istream.ReadByte () != 0) || (istream.ReadByte () != 0)) {  		}  	}  	//Got correct header' wait for next bit  	while (eyeSocket.Available < 4) {  		Thread.Sleep (1);  	}  	//buf = new byte[4];//not strictly necesarry' we just had 4 byte header  	istream.Read (buf' 0' 4);  	image_size = IPAddress.NetworkToHostOrder (BitConverter.ToInt32 (buf' 0));  	// image size being less than zero wouldn't make sense' nor larger than buffer  	if (image_size > 0 && image_size <= 2048576) {  		buf = new byte[image_size];  		while (eyeSocket.Available < image_size) {  			Thread.Sleep (1);  		}  		istream.Read (buf' 0' image_size);  		image_size = 0;  		//Save Image  		CurImg = Bitmap.FromStream (new MemoryStream (buf));  		if (NewImageRecieved != null)  			NewImageRecieved (this' new NewImageDataRecievedEventArgs (CurImg' new MemoryStream (buf)));  	}  	else  		er ("Unknown size");  }  
Magic Number,System451.Communication.Dashboard.Net.Video,WPILibTcpVideoSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\Video\ImageSource.cs,GraveWorker,The following statement contains a magic number: while (shouldBeRunning) {  	Thread.Sleep (5);  	//gather data in RecieveQ' don't overload  	//switch' but without the compare overhead' and with fall through  	//based off IL optimizations in LR's .net Reflector  	while (eyeSocket.Available < 4) {  		Thread.Sleep (1);  	}  	buf = new byte[4];  	istream.Read (buf' 0' 4);  	//correct header?  	//if any of the bytes are wrong  	if ((buf [0] != 1) || (buf [1] != 0) || (buf [2] != 0) || (buf [3] != 0)) {  		//find the header  		//this goes down the line until one of the conditions fails' then starts over  		while ((istream.ReadByte () != 1) || (istream.ReadByte () != 0) || (istream.ReadByte () != 0) || (istream.ReadByte () != 0)) {  		}  	}  	//Got correct header' wait for next bit  	while (eyeSocket.Available < 4) {  		Thread.Sleep (1);  	}  	//buf = new byte[4];//not strictly necesarry' we just had 4 byte header  	istream.Read (buf' 0' 4);  	image_size = IPAddress.NetworkToHostOrder (BitConverter.ToInt32 (buf' 0));  	// image size being less than zero wouldn't make sense' nor larger than buffer  	if (image_size > 0 && image_size <= 2048576) {  		buf = new byte[image_size];  		while (eyeSocket.Available < image_size) {  			Thread.Sleep (1);  		}  		istream.Read (buf' 0' image_size);  		image_size = 0;  		//Save Image  		CurImg = Bitmap.FromStream (new MemoryStream (buf));  		if (NewImageRecieved != null)  			NewImageRecieved (this' new NewImageDataRecievedEventArgs (CurImg' new MemoryStream (buf)));  	}  	else  		er ("Unknown size");  }  
Magic Number,System451.Communication.Dashboard.Net.Video,WPILibTcpVideoSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\Video\ImageSource.cs,GraveWorker,The following statement contains a magic number: Thread.Sleep (5);  
Magic Number,System451.Communication.Dashboard.Net.Video,WPILibTcpVideoSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\Video\ImageSource.cs,GraveWorker,The following statement contains a magic number: while (eyeSocket.Available < 4) {  	Thread.Sleep (1);  }  
Magic Number,System451.Communication.Dashboard.Net.Video,WPILibTcpVideoSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\Video\ImageSource.cs,GraveWorker,The following statement contains a magic number: buf = new byte[4];  
Magic Number,System451.Communication.Dashboard.Net.Video,WPILibTcpVideoSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\Video\ImageSource.cs,GraveWorker,The following statement contains a magic number: istream.Read (buf' 0' 4);  
Magic Number,System451.Communication.Dashboard.Net.Video,WPILibTcpVideoSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\Video\ImageSource.cs,GraveWorker,The following statement contains a magic number: if ((buf [0] != 1) || (buf [1] != 0) || (buf [2] != 0) || (buf [3] != 0)) {  	//find the header  	//this goes down the line until one of the conditions fails' then starts over  	while ((istream.ReadByte () != 1) || (istream.ReadByte () != 0) || (istream.ReadByte () != 0) || (istream.ReadByte () != 0)) {  	}  }  
Magic Number,System451.Communication.Dashboard.Net.Video,WPILibTcpVideoSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\Video\ImageSource.cs,GraveWorker,The following statement contains a magic number: if ((buf [0] != 1) || (buf [1] != 0) || (buf [2] != 0) || (buf [3] != 0)) {  	//find the header  	//this goes down the line until one of the conditions fails' then starts over  	while ((istream.ReadByte () != 1) || (istream.ReadByte () != 0) || (istream.ReadByte () != 0) || (istream.ReadByte () != 0)) {  	}  }  
Magic Number,System451.Communication.Dashboard.Net.Video,WPILibTcpVideoSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\Video\ImageSource.cs,GraveWorker,The following statement contains a magic number: while (eyeSocket.Available < 4) {  	Thread.Sleep (1);  }  
Magic Number,System451.Communication.Dashboard.Net.Video,WPILibTcpVideoSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\Video\ImageSource.cs,GraveWorker,The following statement contains a magic number: istream.Read (buf' 0' 4);  
Magic Number,System451.Communication.Dashboard.Net.Video,WPILibTcpVideoSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\Video\ImageSource.cs,GraveWorker,The following statement contains a magic number: if (image_size > 0 && image_size <= 2048576) {  	buf = new byte[image_size];  	while (eyeSocket.Available < image_size) {  		Thread.Sleep (1);  	}  	istream.Read (buf' 0' image_size);  	image_size = 0;  	//Save Image  	CurImg = Bitmap.FromStream (new MemoryStream (buf));  	if (NewImageRecieved != null)  		NewImageRecieved (this' new NewImageDataRecievedEventArgs (CurImg' new MemoryStream (buf)));  }  else  	er ("Unknown size");  
Magic Number,System451.Communication.Dashboard.Net.Video,WebCam,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\Video\WebCam.cs,WebCam,The following statement contains a magic number: wcc.TimeToCapture_milliseconds = 30;  
Magic Number,System451.Communication.Dashboard.Net.Video,WebCam,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\Video\WebCam.cs,WebCam,The following statement contains a magic number: wcc.CaptureHeight = 240;  
Magic Number,System451.Communication.Dashboard.Net.Video,WebCam,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\Video\WebCam.cs,WebCam,The following statement contains a magic number: wcc.CaptureWidth = 320;  
Magic Number,System451.Communication.Dashboard.Net.Video,WebCamVideoSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\Video\WebCam.cs,WebCamVideoSource,The following statement contains a magic number: wcc.TimeToCapture_milliseconds = 20;  
Magic Number,System451.Communication.Dashboard.Net.Video,WebCamVideoSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\Video\WebCam.cs,WebCamVideoSource,The following statement contains a magic number: wcc.CaptureHeight = 240;  
Magic Number,System451.Communication.Dashboard.Net.Video,WebCamVideoSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\Video\WebCam.cs,WebCamVideoSource,The following statement contains a magic number: wcc.CaptureWidth = 320;  
Magic Number,System451.Communication.Dashboard.Net.Video,WebCamVideoSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\Video\WebCam.cs,WebCamVideoSource,The following statement contains a magic number: wcc.TimeToCapture_milliseconds = (int)((1f / fps) * 1000);  
Magic Number,System451.Communication.Dashboard.Net.Video,WebCamVideoSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\Video\WebCam.cs,Start,The following statement contains a magic number: if (wcc.TimeToCapture_milliseconds <= 0)  	FPS = 50;  
Magic Number,System451.Communication.Dashboard.Net.Video,WebCamVideoSource,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\Video\WebCam.cs,Start,The following statement contains a magic number: FPS = 50;  
Magic Number,Utils,VideoStreamSaver,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\VideoStreamSaver.cs,VideoStreamSaver,The following statement contains a magic number: FPS = 15;  
Magic Number,Utils,VideoStreamSaver,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\VideoStreamSaver.cs,aviSaverbg,The following statement contains a magic number: try {  	string filename = file.ToString ();  	pubicQueue.Clear ();  	imageQueue.Clear ();  	bool wassaving = false;  	while (true) {  		Thread.Sleep (100);  		while (pubicQueue.Count < 1 && saving == true) {  			Thread.Sleep (50);  		}  		while (pubicQueue.Count > 0) {  			lock (pubicQueue) {  				imageQueue.Enqueue (pubicQueue.Dequeue ());  			}  		}  		Thread.Sleep (50);  		if (saving == true) {  			if (srm == null)  				srm = new VideoEncoder (filename' FPS);  			Thread.Sleep (50);  			while (imageQueue.Count > 0) {  				srm.Add (imageQueue.Dequeue ());  			}  			wassaving = true;  		}  		else {  			if (wassaving)  				break;  			//Debug.WriteLine("Trimming with #" + imageQueue.Count + " objects to FPS of "+FPS);  			while (imageQueue.Count > (FPS * 2.0))//We can have two seconds of stuff  			 {  				imageQueue.Dequeue ();  			}  		}  		Thread.Sleep (75);  	}  	Thread.Sleep (2500);  	//Wait for a few extra frames' perhapes the ones now!  	capture = false;  	//close out  	while (pubicQueue.Count > 0) {  		lock (pubicQueue) {  			imageQueue.Enqueue (pubicQueue.Dequeue ());  		}  	}  	if (srm != null) {  		while (imageQueue.Count > 0) {  			srm.Add (imageQueue.Dequeue ());  		}  	}  }  finally {  	try {  		srm.Close ();  	}  	catch {  	}  }  
Magic Number,Utils,VideoStreamSaver,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\VideoStreamSaver.cs,aviSaverbg,The following statement contains a magic number: try {  	string filename = file.ToString ();  	pubicQueue.Clear ();  	imageQueue.Clear ();  	bool wassaving = false;  	while (true) {  		Thread.Sleep (100);  		while (pubicQueue.Count < 1 && saving == true) {  			Thread.Sleep (50);  		}  		while (pubicQueue.Count > 0) {  			lock (pubicQueue) {  				imageQueue.Enqueue (pubicQueue.Dequeue ());  			}  		}  		Thread.Sleep (50);  		if (saving == true) {  			if (srm == null)  				srm = new VideoEncoder (filename' FPS);  			Thread.Sleep (50);  			while (imageQueue.Count > 0) {  				srm.Add (imageQueue.Dequeue ());  			}  			wassaving = true;  		}  		else {  			if (wassaving)  				break;  			//Debug.WriteLine("Trimming with #" + imageQueue.Count + " objects to FPS of "+FPS);  			while (imageQueue.Count > (FPS * 2.0))//We can have two seconds of stuff  			 {  				imageQueue.Dequeue ();  			}  		}  		Thread.Sleep (75);  	}  	Thread.Sleep (2500);  	//Wait for a few extra frames' perhapes the ones now!  	capture = false;  	//close out  	while (pubicQueue.Count > 0) {  		lock (pubicQueue) {  			imageQueue.Enqueue (pubicQueue.Dequeue ());  		}  	}  	if (srm != null) {  		while (imageQueue.Count > 0) {  			srm.Add (imageQueue.Dequeue ());  		}  	}  }  finally {  	try {  		srm.Close ();  	}  	catch {  	}  }  
Magic Number,Utils,VideoStreamSaver,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\VideoStreamSaver.cs,aviSaverbg,The following statement contains a magic number: try {  	string filename = file.ToString ();  	pubicQueue.Clear ();  	imageQueue.Clear ();  	bool wassaving = false;  	while (true) {  		Thread.Sleep (100);  		while (pubicQueue.Count < 1 && saving == true) {  			Thread.Sleep (50);  		}  		while (pubicQueue.Count > 0) {  			lock (pubicQueue) {  				imageQueue.Enqueue (pubicQueue.Dequeue ());  			}  		}  		Thread.Sleep (50);  		if (saving == true) {  			if (srm == null)  				srm = new VideoEncoder (filename' FPS);  			Thread.Sleep (50);  			while (imageQueue.Count > 0) {  				srm.Add (imageQueue.Dequeue ());  			}  			wassaving = true;  		}  		else {  			if (wassaving)  				break;  			//Debug.WriteLine("Trimming with #" + imageQueue.Count + " objects to FPS of "+FPS);  			while (imageQueue.Count > (FPS * 2.0))//We can have two seconds of stuff  			 {  				imageQueue.Dequeue ();  			}  		}  		Thread.Sleep (75);  	}  	Thread.Sleep (2500);  	//Wait for a few extra frames' perhapes the ones now!  	capture = false;  	//close out  	while (pubicQueue.Count > 0) {  		lock (pubicQueue) {  			imageQueue.Enqueue (pubicQueue.Dequeue ());  		}  	}  	if (srm != null) {  		while (imageQueue.Count > 0) {  			srm.Add (imageQueue.Dequeue ());  		}  	}  }  finally {  	try {  		srm.Close ();  	}  	catch {  	}  }  
Magic Number,Utils,VideoStreamSaver,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\VideoStreamSaver.cs,aviSaverbg,The following statement contains a magic number: try {  	string filename = file.ToString ();  	pubicQueue.Clear ();  	imageQueue.Clear ();  	bool wassaving = false;  	while (true) {  		Thread.Sleep (100);  		while (pubicQueue.Count < 1 && saving == true) {  			Thread.Sleep (50);  		}  		while (pubicQueue.Count > 0) {  			lock (pubicQueue) {  				imageQueue.Enqueue (pubicQueue.Dequeue ());  			}  		}  		Thread.Sleep (50);  		if (saving == true) {  			if (srm == null)  				srm = new VideoEncoder (filename' FPS);  			Thread.Sleep (50);  			while (imageQueue.Count > 0) {  				srm.Add (imageQueue.Dequeue ());  			}  			wassaving = true;  		}  		else {  			if (wassaving)  				break;  			//Debug.WriteLine("Trimming with #" + imageQueue.Count + " objects to FPS of "+FPS);  			while (imageQueue.Count > (FPS * 2.0))//We can have two seconds of stuff  			 {  				imageQueue.Dequeue ();  			}  		}  		Thread.Sleep (75);  	}  	Thread.Sleep (2500);  	//Wait for a few extra frames' perhapes the ones now!  	capture = false;  	//close out  	while (pubicQueue.Count > 0) {  		lock (pubicQueue) {  			imageQueue.Enqueue (pubicQueue.Dequeue ());  		}  	}  	if (srm != null) {  		while (imageQueue.Count > 0) {  			srm.Add (imageQueue.Dequeue ());  		}  	}  }  finally {  	try {  		srm.Close ();  	}  	catch {  	}  }  
Magic Number,Utils,VideoStreamSaver,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\VideoStreamSaver.cs,aviSaverbg,The following statement contains a magic number: try {  	string filename = file.ToString ();  	pubicQueue.Clear ();  	imageQueue.Clear ();  	bool wassaving = false;  	while (true) {  		Thread.Sleep (100);  		while (pubicQueue.Count < 1 && saving == true) {  			Thread.Sleep (50);  		}  		while (pubicQueue.Count > 0) {  			lock (pubicQueue) {  				imageQueue.Enqueue (pubicQueue.Dequeue ());  			}  		}  		Thread.Sleep (50);  		if (saving == true) {  			if (srm == null)  				srm = new VideoEncoder (filename' FPS);  			Thread.Sleep (50);  			while (imageQueue.Count > 0) {  				srm.Add (imageQueue.Dequeue ());  			}  			wassaving = true;  		}  		else {  			if (wassaving)  				break;  			//Debug.WriteLine("Trimming with #" + imageQueue.Count + " objects to FPS of "+FPS);  			while (imageQueue.Count > (FPS * 2.0))//We can have two seconds of stuff  			 {  				imageQueue.Dequeue ();  			}  		}  		Thread.Sleep (75);  	}  	Thread.Sleep (2500);  	//Wait for a few extra frames' perhapes the ones now!  	capture = false;  	//close out  	while (pubicQueue.Count > 0) {  		lock (pubicQueue) {  			imageQueue.Enqueue (pubicQueue.Dequeue ());  		}  	}  	if (srm != null) {  		while (imageQueue.Count > 0) {  			srm.Add (imageQueue.Dequeue ());  		}  	}  }  finally {  	try {  		srm.Close ();  	}  	catch {  	}  }  
Magic Number,Utils,VideoStreamSaver,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\VideoStreamSaver.cs,aviSaverbg,The following statement contains a magic number: try {  	string filename = file.ToString ();  	pubicQueue.Clear ();  	imageQueue.Clear ();  	bool wassaving = false;  	while (true) {  		Thread.Sleep (100);  		while (pubicQueue.Count < 1 && saving == true) {  			Thread.Sleep (50);  		}  		while (pubicQueue.Count > 0) {  			lock (pubicQueue) {  				imageQueue.Enqueue (pubicQueue.Dequeue ());  			}  		}  		Thread.Sleep (50);  		if (saving == true) {  			if (srm == null)  				srm = new VideoEncoder (filename' FPS);  			Thread.Sleep (50);  			while (imageQueue.Count > 0) {  				srm.Add (imageQueue.Dequeue ());  			}  			wassaving = true;  		}  		else {  			if (wassaving)  				break;  			//Debug.WriteLine("Trimming with #" + imageQueue.Count + " objects to FPS of "+FPS);  			while (imageQueue.Count > (FPS * 2.0))//We can have two seconds of stuff  			 {  				imageQueue.Dequeue ();  			}  		}  		Thread.Sleep (75);  	}  	Thread.Sleep (2500);  	//Wait for a few extra frames' perhapes the ones now!  	capture = false;  	//close out  	while (pubicQueue.Count > 0) {  		lock (pubicQueue) {  			imageQueue.Enqueue (pubicQueue.Dequeue ());  		}  	}  	if (srm != null) {  		while (imageQueue.Count > 0) {  			srm.Add (imageQueue.Dequeue ());  		}  	}  }  finally {  	try {  		srm.Close ();  	}  	catch {  	}  }  
Magic Number,Utils,VideoStreamSaver,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\VideoStreamSaver.cs,aviSaverbg,The following statement contains a magic number: try {  	string filename = file.ToString ();  	pubicQueue.Clear ();  	imageQueue.Clear ();  	bool wassaving = false;  	while (true) {  		Thread.Sleep (100);  		while (pubicQueue.Count < 1 && saving == true) {  			Thread.Sleep (50);  		}  		while (pubicQueue.Count > 0) {  			lock (pubicQueue) {  				imageQueue.Enqueue (pubicQueue.Dequeue ());  			}  		}  		Thread.Sleep (50);  		if (saving == true) {  			if (srm == null)  				srm = new VideoEncoder (filename' FPS);  			Thread.Sleep (50);  			while (imageQueue.Count > 0) {  				srm.Add (imageQueue.Dequeue ());  			}  			wassaving = true;  		}  		else {  			if (wassaving)  				break;  			//Debug.WriteLine("Trimming with #" + imageQueue.Count + " objects to FPS of "+FPS);  			while (imageQueue.Count > (FPS * 2.0))//We can have two seconds of stuff  			 {  				imageQueue.Dequeue ();  			}  		}  		Thread.Sleep (75);  	}  	Thread.Sleep (2500);  	//Wait for a few extra frames' perhapes the ones now!  	capture = false;  	//close out  	while (pubicQueue.Count > 0) {  		lock (pubicQueue) {  			imageQueue.Enqueue (pubicQueue.Dequeue ());  		}  	}  	if (srm != null) {  		while (imageQueue.Count > 0) {  			srm.Add (imageQueue.Dequeue ());  		}  	}  }  finally {  	try {  		srm.Close ();  	}  	catch {  	}  }  
Magic Number,Utils,VideoStreamSaver,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\VideoStreamSaver.cs,aviSaverbg,The following statement contains a magic number: while (true) {  	Thread.Sleep (100);  	while (pubicQueue.Count < 1 && saving == true) {  		Thread.Sleep (50);  	}  	while (pubicQueue.Count > 0) {  		lock (pubicQueue) {  			imageQueue.Enqueue (pubicQueue.Dequeue ());  		}  	}  	Thread.Sleep (50);  	if (saving == true) {  		if (srm == null)  			srm = new VideoEncoder (filename' FPS);  		Thread.Sleep (50);  		while (imageQueue.Count > 0) {  			srm.Add (imageQueue.Dequeue ());  		}  		wassaving = true;  	}  	else {  		if (wassaving)  			break;  		//Debug.WriteLine("Trimming with #" + imageQueue.Count + " objects to FPS of "+FPS);  		while (imageQueue.Count > (FPS * 2.0))//We can have two seconds of stuff  		 {  			imageQueue.Dequeue ();  		}  	}  	Thread.Sleep (75);  }  
Magic Number,Utils,VideoStreamSaver,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\VideoStreamSaver.cs,aviSaverbg,The following statement contains a magic number: while (true) {  	Thread.Sleep (100);  	while (pubicQueue.Count < 1 && saving == true) {  		Thread.Sleep (50);  	}  	while (pubicQueue.Count > 0) {  		lock (pubicQueue) {  			imageQueue.Enqueue (pubicQueue.Dequeue ());  		}  	}  	Thread.Sleep (50);  	if (saving == true) {  		if (srm == null)  			srm = new VideoEncoder (filename' FPS);  		Thread.Sleep (50);  		while (imageQueue.Count > 0) {  			srm.Add (imageQueue.Dequeue ());  		}  		wassaving = true;  	}  	else {  		if (wassaving)  			break;  		//Debug.WriteLine("Trimming with #" + imageQueue.Count + " objects to FPS of "+FPS);  		while (imageQueue.Count > (FPS * 2.0))//We can have two seconds of stuff  		 {  			imageQueue.Dequeue ();  		}  	}  	Thread.Sleep (75);  }  
Magic Number,Utils,VideoStreamSaver,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\VideoStreamSaver.cs,aviSaverbg,The following statement contains a magic number: while (true) {  	Thread.Sleep (100);  	while (pubicQueue.Count < 1 && saving == true) {  		Thread.Sleep (50);  	}  	while (pubicQueue.Count > 0) {  		lock (pubicQueue) {  			imageQueue.Enqueue (pubicQueue.Dequeue ());  		}  	}  	Thread.Sleep (50);  	if (saving == true) {  		if (srm == null)  			srm = new VideoEncoder (filename' FPS);  		Thread.Sleep (50);  		while (imageQueue.Count > 0) {  			srm.Add (imageQueue.Dequeue ());  		}  		wassaving = true;  	}  	else {  		if (wassaving)  			break;  		//Debug.WriteLine("Trimming with #" + imageQueue.Count + " objects to FPS of "+FPS);  		while (imageQueue.Count > (FPS * 2.0))//We can have two seconds of stuff  		 {  			imageQueue.Dequeue ();  		}  	}  	Thread.Sleep (75);  }  
Magic Number,Utils,VideoStreamSaver,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\VideoStreamSaver.cs,aviSaverbg,The following statement contains a magic number: while (true) {  	Thread.Sleep (100);  	while (pubicQueue.Count < 1 && saving == true) {  		Thread.Sleep (50);  	}  	while (pubicQueue.Count > 0) {  		lock (pubicQueue) {  			imageQueue.Enqueue (pubicQueue.Dequeue ());  		}  	}  	Thread.Sleep (50);  	if (saving == true) {  		if (srm == null)  			srm = new VideoEncoder (filename' FPS);  		Thread.Sleep (50);  		while (imageQueue.Count > 0) {  			srm.Add (imageQueue.Dequeue ());  		}  		wassaving = true;  	}  	else {  		if (wassaving)  			break;  		//Debug.WriteLine("Trimming with #" + imageQueue.Count + " objects to FPS of "+FPS);  		while (imageQueue.Count > (FPS * 2.0))//We can have two seconds of stuff  		 {  			imageQueue.Dequeue ();  		}  	}  	Thread.Sleep (75);  }  
Magic Number,Utils,VideoStreamSaver,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\VideoStreamSaver.cs,aviSaverbg,The following statement contains a magic number: while (true) {  	Thread.Sleep (100);  	while (pubicQueue.Count < 1 && saving == true) {  		Thread.Sleep (50);  	}  	while (pubicQueue.Count > 0) {  		lock (pubicQueue) {  			imageQueue.Enqueue (pubicQueue.Dequeue ());  		}  	}  	Thread.Sleep (50);  	if (saving == true) {  		if (srm == null)  			srm = new VideoEncoder (filename' FPS);  		Thread.Sleep (50);  		while (imageQueue.Count > 0) {  			srm.Add (imageQueue.Dequeue ());  		}  		wassaving = true;  	}  	else {  		if (wassaving)  			break;  		//Debug.WriteLine("Trimming with #" + imageQueue.Count + " objects to FPS of "+FPS);  		while (imageQueue.Count > (FPS * 2.0))//We can have two seconds of stuff  		 {  			imageQueue.Dequeue ();  		}  	}  	Thread.Sleep (75);  }  
Magic Number,Utils,VideoStreamSaver,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\VideoStreamSaver.cs,aviSaverbg,The following statement contains a magic number: while (true) {  	Thread.Sleep (100);  	while (pubicQueue.Count < 1 && saving == true) {  		Thread.Sleep (50);  	}  	while (pubicQueue.Count > 0) {  		lock (pubicQueue) {  			imageQueue.Enqueue (pubicQueue.Dequeue ());  		}  	}  	Thread.Sleep (50);  	if (saving == true) {  		if (srm == null)  			srm = new VideoEncoder (filename' FPS);  		Thread.Sleep (50);  		while (imageQueue.Count > 0) {  			srm.Add (imageQueue.Dequeue ());  		}  		wassaving = true;  	}  	else {  		if (wassaving)  			break;  		//Debug.WriteLine("Trimming with #" + imageQueue.Count + " objects to FPS of "+FPS);  		while (imageQueue.Count > (FPS * 2.0))//We can have two seconds of stuff  		 {  			imageQueue.Dequeue ();  		}  	}  	Thread.Sleep (75);  }  
Magic Number,Utils,VideoStreamSaver,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\VideoStreamSaver.cs,aviSaverbg,The following statement contains a magic number: Thread.Sleep (100);  
Magic Number,Utils,VideoStreamSaver,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\VideoStreamSaver.cs,aviSaverbg,The following statement contains a magic number: while (pubicQueue.Count < 1 && saving == true) {  	Thread.Sleep (50);  }  
Magic Number,Utils,VideoStreamSaver,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\VideoStreamSaver.cs,aviSaverbg,The following statement contains a magic number: Thread.Sleep (50);  
Magic Number,Utils,VideoStreamSaver,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\VideoStreamSaver.cs,aviSaverbg,The following statement contains a magic number: Thread.Sleep (50);  
Magic Number,Utils,VideoStreamSaver,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\VideoStreamSaver.cs,aviSaverbg,The following statement contains a magic number: if (saving == true) {  	if (srm == null)  		srm = new VideoEncoder (filename' FPS);  	Thread.Sleep (50);  	while (imageQueue.Count > 0) {  		srm.Add (imageQueue.Dequeue ());  	}  	wassaving = true;  }  else {  	if (wassaving)  		break;  	//Debug.WriteLine("Trimming with #" + imageQueue.Count + " objects to FPS of "+FPS);  	while (imageQueue.Count > (FPS * 2.0))//We can have two seconds of stuff  	 {  		imageQueue.Dequeue ();  	}  }  
Magic Number,Utils,VideoStreamSaver,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\VideoStreamSaver.cs,aviSaverbg,The following statement contains a magic number: if (saving == true) {  	if (srm == null)  		srm = new VideoEncoder (filename' FPS);  	Thread.Sleep (50);  	while (imageQueue.Count > 0) {  		srm.Add (imageQueue.Dequeue ());  	}  	wassaving = true;  }  else {  	if (wassaving)  		break;  	//Debug.WriteLine("Trimming with #" + imageQueue.Count + " objects to FPS of "+FPS);  	while (imageQueue.Count > (FPS * 2.0))//We can have two seconds of stuff  	 {  		imageQueue.Dequeue ();  	}  }  
Magic Number,Utils,VideoStreamSaver,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\VideoStreamSaver.cs,aviSaverbg,The following statement contains a magic number: Thread.Sleep (50);  
Magic Number,Utils,VideoStreamSaver,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\VideoStreamSaver.cs,aviSaverbg,The following statement contains a magic number: while (imageQueue.Count > (FPS * 2.0))//We can have two seconds of stuff   {  	imageQueue.Dequeue ();  }  
Magic Number,Utils,VideoStreamSaver,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\VideoStreamSaver.cs,aviSaverbg,The following statement contains a magic number: Thread.Sleep (75);  
Magic Number,Utils,VideoStreamSaver,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\VideoStreamSaver.cs,aviSaverbg,The following statement contains a magic number: Thread.Sleep (2500);  
Magic Number,System451.Communication.Dashboard.Controls,AnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\AnalogMeter.cs,PointToAngle,The following statement contains a magic number: if (p.Y > 70)  	if (p.X > 50)  		return 180f;  	else  		return 0f;  
Magic Number,System451.Communication.Dashboard.Controls,AnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\AnalogMeter.cs,PointToAngle,The following statement contains a magic number: if (p.Y > 70)  	if (p.X > 50)  		return 180f;  	else  		return 0f;  
Magic Number,System451.Communication.Dashboard.Controls,AnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\AnalogMeter.cs,PointToAngle,The following statement contains a magic number: if (p.X > 50)  	return 180f;  else  	return 0f;  
Magic Number,System451.Communication.Dashboard.Controls,AnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\AnalogMeter.cs,AnalogMeter_Paint,The following statement contains a magic number: if (Math.Abs (Value) > 1) {  	if (Value == -999.99) {  	}  	else {  		Value = (Value < 0) ? 0 : 1;  	}  }  
Magic Number,System451.Communication.Dashboard.Controls,AnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\AnalogMeter.cs,AnalogMeter_Paint,The following statement contains a magic number: if (Value == -999.99) {  }  else {  	Value = (Value < 0) ? 0 : 1;  }  
Magic Number,System451.Communication.Dashboard.Controls,AnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\AnalogMeter.cs,AnalogMeter_Paint,The following statement contains a magic number: using (Brush cp = new SolidBrush (CircleColor)) {  	e.Graphics.FillPie (cp' new Rectangle (5' 25' 90' 90)' -180f' 180f);  }  
Magic Number,System451.Communication.Dashboard.Controls,AnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\AnalogMeter.cs,AnalogMeter_Paint,The following statement contains a magic number: using (Brush cp = new SolidBrush (CircleColor)) {  	e.Graphics.FillPie (cp' new Rectangle (5' 25' 90' 90)' -180f' 180f);  }  
Magic Number,System451.Communication.Dashboard.Controls,AnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\AnalogMeter.cs,AnalogMeter_Paint,The following statement contains a magic number: using (Brush cp = new SolidBrush (CircleColor)) {  	e.Graphics.FillPie (cp' new Rectangle (5' 25' 90' 90)' -180f' 180f);  }  
Magic Number,System451.Communication.Dashboard.Controls,AnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\AnalogMeter.cs,AnalogMeter_Paint,The following statement contains a magic number: using (Brush cp = new SolidBrush (CircleColor)) {  	e.Graphics.FillPie (cp' new Rectangle (5' 25' 90' 90)' -180f' 180f);  }  
Magic Number,System451.Communication.Dashboard.Controls,AnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\AnalogMeter.cs,AnalogMeter_Paint,The following statement contains a magic number: e.Graphics.FillPie (cp' new Rectangle (5' 25' 90' 90)' -180f' 180f);  
Magic Number,System451.Communication.Dashboard.Controls,AnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\AnalogMeter.cs,AnalogMeter_Paint,The following statement contains a magic number: e.Graphics.FillPie (cp' new Rectangle (5' 25' 90' 90)' -180f' 180f);  
Magic Number,System451.Communication.Dashboard.Controls,AnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\AnalogMeter.cs,AnalogMeter_Paint,The following statement contains a magic number: e.Graphics.FillPie (cp' new Rectangle (5' 25' 90' 90)' -180f' 180f);  
Magic Number,System451.Communication.Dashboard.Controls,AnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\AnalogMeter.cs,AnalogMeter_Paint,The following statement contains a magic number: e.Graphics.FillPie (cp' new Rectangle (5' 25' 90' 90)' -180f' 180f);  
Magic Number,System451.Communication.Dashboard.Controls,AnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\AnalogMeter.cs,AnalogMeter_Paint,The following statement contains a magic number: using (Pen mp = new Pen (GuidesColor' GuidesWidth)) {  	e.Graphics.DrawArc (mp' new Rectangle (5' 25' 90' 90)' -180f' 180f);  	e.Graphics.DrawLine (mp' new Point (5' 70)' new Point (95' 70));  	Matrix RotationTransform = new Matrix (1' 0' 0' 1' 0' 0);  	Matrix TranslationTransform = new Matrix (1' 0' 0' 1' 0' 0);  	PointF TheRotationPoint = new PointF (50f' 70f);  	RotationTransform.Scale ((float)this.Width / 100f' (float)this.Height / 75f);  	RotationTransform.RotateAt (-90' TheRotationPoint);  	e.Graphics.Transform = RotationTransform;  	e.Graphics.DrawLine (mp' 50' 30' 50' 40);  	for (float f = 0F; f < 180; f += 30) {  		RotationTransform.RotateAt (30' TheRotationPoint);  		e.Graphics.Transform = RotationTransform;  		e.Graphics.DrawLine (mp' 50' 30' 50' 40);  	}  }  
Magic Number,System451.Communication.Dashboard.Controls,AnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\AnalogMeter.cs,AnalogMeter_Paint,The following statement contains a magic number: using (Pen mp = new Pen (GuidesColor' GuidesWidth)) {  	e.Graphics.DrawArc (mp' new Rectangle (5' 25' 90' 90)' -180f' 180f);  	e.Graphics.DrawLine (mp' new Point (5' 70)' new Point (95' 70));  	Matrix RotationTransform = new Matrix (1' 0' 0' 1' 0' 0);  	Matrix TranslationTransform = new Matrix (1' 0' 0' 1' 0' 0);  	PointF TheRotationPoint = new PointF (50f' 70f);  	RotationTransform.Scale ((float)this.Width / 100f' (float)this.Height / 75f);  	RotationTransform.RotateAt (-90' TheRotationPoint);  	e.Graphics.Transform = RotationTransform;  	e.Graphics.DrawLine (mp' 50' 30' 50' 40);  	for (float f = 0F; f < 180; f += 30) {  		RotationTransform.RotateAt (30' TheRotationPoint);  		e.Graphics.Transform = RotationTransform;  		e.Graphics.DrawLine (mp' 50' 30' 50' 40);  	}  }  
Magic Number,System451.Communication.Dashboard.Controls,AnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\AnalogMeter.cs,AnalogMeter_Paint,The following statement contains a magic number: using (Pen mp = new Pen (GuidesColor' GuidesWidth)) {  	e.Graphics.DrawArc (mp' new Rectangle (5' 25' 90' 90)' -180f' 180f);  	e.Graphics.DrawLine (mp' new Point (5' 70)' new Point (95' 70));  	Matrix RotationTransform = new Matrix (1' 0' 0' 1' 0' 0);  	Matrix TranslationTransform = new Matrix (1' 0' 0' 1' 0' 0);  	PointF TheRotationPoint = new PointF (50f' 70f);  	RotationTransform.Scale ((float)this.Width / 100f' (float)this.Height / 75f);  	RotationTransform.RotateAt (-90' TheRotationPoint);  	e.Graphics.Transform = RotationTransform;  	e.Graphics.DrawLine (mp' 50' 30' 50' 40);  	for (float f = 0F; f < 180; f += 30) {  		RotationTransform.RotateAt (30' TheRotationPoint);  		e.Graphics.Transform = RotationTransform;  		e.Graphics.DrawLine (mp' 50' 30' 50' 40);  	}  }  
Magic Number,System451.Communication.Dashboard.Controls,AnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\AnalogMeter.cs,AnalogMeter_Paint,The following statement contains a magic number: using (Pen mp = new Pen (GuidesColor' GuidesWidth)) {  	e.Graphics.DrawArc (mp' new Rectangle (5' 25' 90' 90)' -180f' 180f);  	e.Graphics.DrawLine (mp' new Point (5' 70)' new Point (95' 70));  	Matrix RotationTransform = new Matrix (1' 0' 0' 1' 0' 0);  	Matrix TranslationTransform = new Matrix (1' 0' 0' 1' 0' 0);  	PointF TheRotationPoint = new PointF (50f' 70f);  	RotationTransform.Scale ((float)this.Width / 100f' (float)this.Height / 75f);  	RotationTransform.RotateAt (-90' TheRotationPoint);  	e.Graphics.Transform = RotationTransform;  	e.Graphics.DrawLine (mp' 50' 30' 50' 40);  	for (float f = 0F; f < 180; f += 30) {  		RotationTransform.RotateAt (30' TheRotationPoint);  		e.Graphics.Transform = RotationTransform;  		e.Graphics.DrawLine (mp' 50' 30' 50' 40);  	}  }  
Magic Number,System451.Communication.Dashboard.Controls,AnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\AnalogMeter.cs,AnalogMeter_Paint,The following statement contains a magic number: using (Pen mp = new Pen (GuidesColor' GuidesWidth)) {  	e.Graphics.DrawArc (mp' new Rectangle (5' 25' 90' 90)' -180f' 180f);  	e.Graphics.DrawLine (mp' new Point (5' 70)' new Point (95' 70));  	Matrix RotationTransform = new Matrix (1' 0' 0' 1' 0' 0);  	Matrix TranslationTransform = new Matrix (1' 0' 0' 1' 0' 0);  	PointF TheRotationPoint = new PointF (50f' 70f);  	RotationTransform.Scale ((float)this.Width / 100f' (float)this.Height / 75f);  	RotationTransform.RotateAt (-90' TheRotationPoint);  	e.Graphics.Transform = RotationTransform;  	e.Graphics.DrawLine (mp' 50' 30' 50' 40);  	for (float f = 0F; f < 180; f += 30) {  		RotationTransform.RotateAt (30' TheRotationPoint);  		e.Graphics.Transform = RotationTransform;  		e.Graphics.DrawLine (mp' 50' 30' 50' 40);  	}  }  
Magic Number,System451.Communication.Dashboard.Controls,AnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\AnalogMeter.cs,AnalogMeter_Paint,The following statement contains a magic number: using (Pen mp = new Pen (GuidesColor' GuidesWidth)) {  	e.Graphics.DrawArc (mp' new Rectangle (5' 25' 90' 90)' -180f' 180f);  	e.Graphics.DrawLine (mp' new Point (5' 70)' new Point (95' 70));  	Matrix RotationTransform = new Matrix (1' 0' 0' 1' 0' 0);  	Matrix TranslationTransform = new Matrix (1' 0' 0' 1' 0' 0);  	PointF TheRotationPoint = new PointF (50f' 70f);  	RotationTransform.Scale ((float)this.Width / 100f' (float)this.Height / 75f);  	RotationTransform.RotateAt (-90' TheRotationPoint);  	e.Graphics.Transform = RotationTransform;  	e.Graphics.DrawLine (mp' 50' 30' 50' 40);  	for (float f = 0F; f < 180; f += 30) {  		RotationTransform.RotateAt (30' TheRotationPoint);  		e.Graphics.Transform = RotationTransform;  		e.Graphics.DrawLine (mp' 50' 30' 50' 40);  	}  }  
Magic Number,System451.Communication.Dashboard.Controls,AnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\AnalogMeter.cs,AnalogMeter_Paint,The following statement contains a magic number: using (Pen mp = new Pen (GuidesColor' GuidesWidth)) {  	e.Graphics.DrawArc (mp' new Rectangle (5' 25' 90' 90)' -180f' 180f);  	e.Graphics.DrawLine (mp' new Point (5' 70)' new Point (95' 70));  	Matrix RotationTransform = new Matrix (1' 0' 0' 1' 0' 0);  	Matrix TranslationTransform = new Matrix (1' 0' 0' 1' 0' 0);  	PointF TheRotationPoint = new PointF (50f' 70f);  	RotationTransform.Scale ((float)this.Width / 100f' (float)this.Height / 75f);  	RotationTransform.RotateAt (-90' TheRotationPoint);  	e.Graphics.Transform = RotationTransform;  	e.Graphics.DrawLine (mp' 50' 30' 50' 40);  	for (float f = 0F; f < 180; f += 30) {  		RotationTransform.RotateAt (30' TheRotationPoint);  		e.Graphics.Transform = RotationTransform;  		e.Graphics.DrawLine (mp' 50' 30' 50' 40);  	}  }  
Magic Number,System451.Communication.Dashboard.Controls,AnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\AnalogMeter.cs,AnalogMeter_Paint,The following statement contains a magic number: using (Pen mp = new Pen (GuidesColor' GuidesWidth)) {  	e.Graphics.DrawArc (mp' new Rectangle (5' 25' 90' 90)' -180f' 180f);  	e.Graphics.DrawLine (mp' new Point (5' 70)' new Point (95' 70));  	Matrix RotationTransform = new Matrix (1' 0' 0' 1' 0' 0);  	Matrix TranslationTransform = new Matrix (1' 0' 0' 1' 0' 0);  	PointF TheRotationPoint = new PointF (50f' 70f);  	RotationTransform.Scale ((float)this.Width / 100f' (float)this.Height / 75f);  	RotationTransform.RotateAt (-90' TheRotationPoint);  	e.Graphics.Transform = RotationTransform;  	e.Graphics.DrawLine (mp' 50' 30' 50' 40);  	for (float f = 0F; f < 180; f += 30) {  		RotationTransform.RotateAt (30' TheRotationPoint);  		e.Graphics.Transform = RotationTransform;  		e.Graphics.DrawLine (mp' 50' 30' 50' 40);  	}  }  
Magic Number,System451.Communication.Dashboard.Controls,AnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\AnalogMeter.cs,AnalogMeter_Paint,The following statement contains a magic number: using (Pen mp = new Pen (GuidesColor' GuidesWidth)) {  	e.Graphics.DrawArc (mp' new Rectangle (5' 25' 90' 90)' -180f' 180f);  	e.Graphics.DrawLine (mp' new Point (5' 70)' new Point (95' 70));  	Matrix RotationTransform = new Matrix (1' 0' 0' 1' 0' 0);  	Matrix TranslationTransform = new Matrix (1' 0' 0' 1' 0' 0);  	PointF TheRotationPoint = new PointF (50f' 70f);  	RotationTransform.Scale ((float)this.Width / 100f' (float)this.Height / 75f);  	RotationTransform.RotateAt (-90' TheRotationPoint);  	e.Graphics.Transform = RotationTransform;  	e.Graphics.DrawLine (mp' 50' 30' 50' 40);  	for (float f = 0F; f < 180; f += 30) {  		RotationTransform.RotateAt (30' TheRotationPoint);  		e.Graphics.Transform = RotationTransform;  		e.Graphics.DrawLine (mp' 50' 30' 50' 40);  	}  }  
Magic Number,System451.Communication.Dashboard.Controls,AnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\AnalogMeter.cs,AnalogMeter_Paint,The following statement contains a magic number: using (Pen mp = new Pen (GuidesColor' GuidesWidth)) {  	e.Graphics.DrawArc (mp' new Rectangle (5' 25' 90' 90)' -180f' 180f);  	e.Graphics.DrawLine (mp' new Point (5' 70)' new Point (95' 70));  	Matrix RotationTransform = new Matrix (1' 0' 0' 1' 0' 0);  	Matrix TranslationTransform = new Matrix (1' 0' 0' 1' 0' 0);  	PointF TheRotationPoint = new PointF (50f' 70f);  	RotationTransform.Scale ((float)this.Width / 100f' (float)this.Height / 75f);  	RotationTransform.RotateAt (-90' TheRotationPoint);  	e.Graphics.Transform = RotationTransform;  	e.Graphics.DrawLine (mp' 50' 30' 50' 40);  	for (float f = 0F; f < 180; f += 30) {  		RotationTransform.RotateAt (30' TheRotationPoint);  		e.Graphics.Transform = RotationTransform;  		e.Graphics.DrawLine (mp' 50' 30' 50' 40);  	}  }  
Magic Number,System451.Communication.Dashboard.Controls,AnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\AnalogMeter.cs,AnalogMeter_Paint,The following statement contains a magic number: using (Pen mp = new Pen (GuidesColor' GuidesWidth)) {  	e.Graphics.DrawArc (mp' new Rectangle (5' 25' 90' 90)' -180f' 180f);  	e.Graphics.DrawLine (mp' new Point (5' 70)' new Point (95' 70));  	Matrix RotationTransform = new Matrix (1' 0' 0' 1' 0' 0);  	Matrix TranslationTransform = new Matrix (1' 0' 0' 1' 0' 0);  	PointF TheRotationPoint = new PointF (50f' 70f);  	RotationTransform.Scale ((float)this.Width / 100f' (float)this.Height / 75f);  	RotationTransform.RotateAt (-90' TheRotationPoint);  	e.Graphics.Transform = RotationTransform;  	e.Graphics.DrawLine (mp' 50' 30' 50' 40);  	for (float f = 0F; f < 180; f += 30) {  		RotationTransform.RotateAt (30' TheRotationPoint);  		e.Graphics.Transform = RotationTransform;  		e.Graphics.DrawLine (mp' 50' 30' 50' 40);  	}  }  
Magic Number,System451.Communication.Dashboard.Controls,AnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\AnalogMeter.cs,AnalogMeter_Paint,The following statement contains a magic number: using (Pen mp = new Pen (GuidesColor' GuidesWidth)) {  	e.Graphics.DrawArc (mp' new Rectangle (5' 25' 90' 90)' -180f' 180f);  	e.Graphics.DrawLine (mp' new Point (5' 70)' new Point (95' 70));  	Matrix RotationTransform = new Matrix (1' 0' 0' 1' 0' 0);  	Matrix TranslationTransform = new Matrix (1' 0' 0' 1' 0' 0);  	PointF TheRotationPoint = new PointF (50f' 70f);  	RotationTransform.Scale ((float)this.Width / 100f' (float)this.Height / 75f);  	RotationTransform.RotateAt (-90' TheRotationPoint);  	e.Graphics.Transform = RotationTransform;  	e.Graphics.DrawLine (mp' 50' 30' 50' 40);  	for (float f = 0F; f < 180; f += 30) {  		RotationTransform.RotateAt (30' TheRotationPoint);  		e.Graphics.Transform = RotationTransform;  		e.Graphics.DrawLine (mp' 50' 30' 50' 40);  	}  }  
Magic Number,System451.Communication.Dashboard.Controls,AnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\AnalogMeter.cs,AnalogMeter_Paint,The following statement contains a magic number: using (Pen mp = new Pen (GuidesColor' GuidesWidth)) {  	e.Graphics.DrawArc (mp' new Rectangle (5' 25' 90' 90)' -180f' 180f);  	e.Graphics.DrawLine (mp' new Point (5' 70)' new Point (95' 70));  	Matrix RotationTransform = new Matrix (1' 0' 0' 1' 0' 0);  	Matrix TranslationTransform = new Matrix (1' 0' 0' 1' 0' 0);  	PointF TheRotationPoint = new PointF (50f' 70f);  	RotationTransform.Scale ((float)this.Width / 100f' (float)this.Height / 75f);  	RotationTransform.RotateAt (-90' TheRotationPoint);  	e.Graphics.Transform = RotationTransform;  	e.Graphics.DrawLine (mp' 50' 30' 50' 40);  	for (float f = 0F; f < 180; f += 30) {  		RotationTransform.RotateAt (30' TheRotationPoint);  		e.Graphics.Transform = RotationTransform;  		e.Graphics.DrawLine (mp' 50' 30' 50' 40);  	}  }  
Magic Number,System451.Communication.Dashboard.Controls,AnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\AnalogMeter.cs,AnalogMeter_Paint,The following statement contains a magic number: using (Pen mp = new Pen (GuidesColor' GuidesWidth)) {  	e.Graphics.DrawArc (mp' new Rectangle (5' 25' 90' 90)' -180f' 180f);  	e.Graphics.DrawLine (mp' new Point (5' 70)' new Point (95' 70));  	Matrix RotationTransform = new Matrix (1' 0' 0' 1' 0' 0);  	Matrix TranslationTransform = new Matrix (1' 0' 0' 1' 0' 0);  	PointF TheRotationPoint = new PointF (50f' 70f);  	RotationTransform.Scale ((float)this.Width / 100f' (float)this.Height / 75f);  	RotationTransform.RotateAt (-90' TheRotationPoint);  	e.Graphics.Transform = RotationTransform;  	e.Graphics.DrawLine (mp' 50' 30' 50' 40);  	for (float f = 0F; f < 180; f += 30) {  		RotationTransform.RotateAt (30' TheRotationPoint);  		e.Graphics.Transform = RotationTransform;  		e.Graphics.DrawLine (mp' 50' 30' 50' 40);  	}  }  
Magic Number,System451.Communication.Dashboard.Controls,AnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\AnalogMeter.cs,AnalogMeter_Paint,The following statement contains a magic number: using (Pen mp = new Pen (GuidesColor' GuidesWidth)) {  	e.Graphics.DrawArc (mp' new Rectangle (5' 25' 90' 90)' -180f' 180f);  	e.Graphics.DrawLine (mp' new Point (5' 70)' new Point (95' 70));  	Matrix RotationTransform = new Matrix (1' 0' 0' 1' 0' 0);  	Matrix TranslationTransform = new Matrix (1' 0' 0' 1' 0' 0);  	PointF TheRotationPoint = new PointF (50f' 70f);  	RotationTransform.Scale ((float)this.Width / 100f' (float)this.Height / 75f);  	RotationTransform.RotateAt (-90' TheRotationPoint);  	e.Graphics.Transform = RotationTransform;  	e.Graphics.DrawLine (mp' 50' 30' 50' 40);  	for (float f = 0F; f < 180; f += 30) {  		RotationTransform.RotateAt (30' TheRotationPoint);  		e.Graphics.Transform = RotationTransform;  		e.Graphics.DrawLine (mp' 50' 30' 50' 40);  	}  }  
Magic Number,System451.Communication.Dashboard.Controls,AnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\AnalogMeter.cs,AnalogMeter_Paint,The following statement contains a magic number: using (Pen mp = new Pen (GuidesColor' GuidesWidth)) {  	e.Graphics.DrawArc (mp' new Rectangle (5' 25' 90' 90)' -180f' 180f);  	e.Graphics.DrawLine (mp' new Point (5' 70)' new Point (95' 70));  	Matrix RotationTransform = new Matrix (1' 0' 0' 1' 0' 0);  	Matrix TranslationTransform = new Matrix (1' 0' 0' 1' 0' 0);  	PointF TheRotationPoint = new PointF (50f' 70f);  	RotationTransform.Scale ((float)this.Width / 100f' (float)this.Height / 75f);  	RotationTransform.RotateAt (-90' TheRotationPoint);  	e.Graphics.Transform = RotationTransform;  	e.Graphics.DrawLine (mp' 50' 30' 50' 40);  	for (float f = 0F; f < 180; f += 30) {  		RotationTransform.RotateAt (30' TheRotationPoint);  		e.Graphics.Transform = RotationTransform;  		e.Graphics.DrawLine (mp' 50' 30' 50' 40);  	}  }  
Magic Number,System451.Communication.Dashboard.Controls,AnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\AnalogMeter.cs,AnalogMeter_Paint,The following statement contains a magic number: using (Pen mp = new Pen (GuidesColor' GuidesWidth)) {  	e.Graphics.DrawArc (mp' new Rectangle (5' 25' 90' 90)' -180f' 180f);  	e.Graphics.DrawLine (mp' new Point (5' 70)' new Point (95' 70));  	Matrix RotationTransform = new Matrix (1' 0' 0' 1' 0' 0);  	Matrix TranslationTransform = new Matrix (1' 0' 0' 1' 0' 0);  	PointF TheRotationPoint = new PointF (50f' 70f);  	RotationTransform.Scale ((float)this.Width / 100f' (float)this.Height / 75f);  	RotationTransform.RotateAt (-90' TheRotationPoint);  	e.Graphics.Transform = RotationTransform;  	e.Graphics.DrawLine (mp' 50' 30' 50' 40);  	for (float f = 0F; f < 180; f += 30) {  		RotationTransform.RotateAt (30' TheRotationPoint);  		e.Graphics.Transform = RotationTransform;  		e.Graphics.DrawLine (mp' 50' 30' 50' 40);  	}  }  
Magic Number,System451.Communication.Dashboard.Controls,AnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\AnalogMeter.cs,AnalogMeter_Paint,The following statement contains a magic number: using (Pen mp = new Pen (GuidesColor' GuidesWidth)) {  	e.Graphics.DrawArc (mp' new Rectangle (5' 25' 90' 90)' -180f' 180f);  	e.Graphics.DrawLine (mp' new Point (5' 70)' new Point (95' 70));  	Matrix RotationTransform = new Matrix (1' 0' 0' 1' 0' 0);  	Matrix TranslationTransform = new Matrix (1' 0' 0' 1' 0' 0);  	PointF TheRotationPoint = new PointF (50f' 70f);  	RotationTransform.Scale ((float)this.Width / 100f' (float)this.Height / 75f);  	RotationTransform.RotateAt (-90' TheRotationPoint);  	e.Graphics.Transform = RotationTransform;  	e.Graphics.DrawLine (mp' 50' 30' 50' 40);  	for (float f = 0F; f < 180; f += 30) {  		RotationTransform.RotateAt (30' TheRotationPoint);  		e.Graphics.Transform = RotationTransform;  		e.Graphics.DrawLine (mp' 50' 30' 50' 40);  	}  }  
Magic Number,System451.Communication.Dashboard.Controls,AnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\AnalogMeter.cs,AnalogMeter_Paint,The following statement contains a magic number: using (Pen mp = new Pen (GuidesColor' GuidesWidth)) {  	e.Graphics.DrawArc (mp' new Rectangle (5' 25' 90' 90)' -180f' 180f);  	e.Graphics.DrawLine (mp' new Point (5' 70)' new Point (95' 70));  	Matrix RotationTransform = new Matrix (1' 0' 0' 1' 0' 0);  	Matrix TranslationTransform = new Matrix (1' 0' 0' 1' 0' 0);  	PointF TheRotationPoint = new PointF (50f' 70f);  	RotationTransform.Scale ((float)this.Width / 100f' (float)this.Height / 75f);  	RotationTransform.RotateAt (-90' TheRotationPoint);  	e.Graphics.Transform = RotationTransform;  	e.Graphics.DrawLine (mp' 50' 30' 50' 40);  	for (float f = 0F; f < 180; f += 30) {  		RotationTransform.RotateAt (30' TheRotationPoint);  		e.Graphics.Transform = RotationTransform;  		e.Graphics.DrawLine (mp' 50' 30' 50' 40);  	}  }  
Magic Number,System451.Communication.Dashboard.Controls,AnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\AnalogMeter.cs,AnalogMeter_Paint,The following statement contains a magic number: using (Pen mp = new Pen (GuidesColor' GuidesWidth)) {  	e.Graphics.DrawArc (mp' new Rectangle (5' 25' 90' 90)' -180f' 180f);  	e.Graphics.DrawLine (mp' new Point (5' 70)' new Point (95' 70));  	Matrix RotationTransform = new Matrix (1' 0' 0' 1' 0' 0);  	Matrix TranslationTransform = new Matrix (1' 0' 0' 1' 0' 0);  	PointF TheRotationPoint = new PointF (50f' 70f);  	RotationTransform.Scale ((float)this.Width / 100f' (float)this.Height / 75f);  	RotationTransform.RotateAt (-90' TheRotationPoint);  	e.Graphics.Transform = RotationTransform;  	e.Graphics.DrawLine (mp' 50' 30' 50' 40);  	for (float f = 0F; f < 180; f += 30) {  		RotationTransform.RotateAt (30' TheRotationPoint);  		e.Graphics.Transform = RotationTransform;  		e.Graphics.DrawLine (mp' 50' 30' 50' 40);  	}  }  
Magic Number,System451.Communication.Dashboard.Controls,AnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\AnalogMeter.cs,AnalogMeter_Paint,The following statement contains a magic number: e.Graphics.DrawArc (mp' new Rectangle (5' 25' 90' 90)' -180f' 180f);  
Magic Number,System451.Communication.Dashboard.Controls,AnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\AnalogMeter.cs,AnalogMeter_Paint,The following statement contains a magic number: e.Graphics.DrawArc (mp' new Rectangle (5' 25' 90' 90)' -180f' 180f);  
Magic Number,System451.Communication.Dashboard.Controls,AnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\AnalogMeter.cs,AnalogMeter_Paint,The following statement contains a magic number: e.Graphics.DrawArc (mp' new Rectangle (5' 25' 90' 90)' -180f' 180f);  
Magic Number,System451.Communication.Dashboard.Controls,AnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\AnalogMeter.cs,AnalogMeter_Paint,The following statement contains a magic number: e.Graphics.DrawArc (mp' new Rectangle (5' 25' 90' 90)' -180f' 180f);  
Magic Number,System451.Communication.Dashboard.Controls,AnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\AnalogMeter.cs,AnalogMeter_Paint,The following statement contains a magic number: e.Graphics.DrawLine (mp' new Point (5' 70)' new Point (95' 70));  
Magic Number,System451.Communication.Dashboard.Controls,AnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\AnalogMeter.cs,AnalogMeter_Paint,The following statement contains a magic number: e.Graphics.DrawLine (mp' new Point (5' 70)' new Point (95' 70));  
Magic Number,System451.Communication.Dashboard.Controls,AnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\AnalogMeter.cs,AnalogMeter_Paint,The following statement contains a magic number: e.Graphics.DrawLine (mp' new Point (5' 70)' new Point (95' 70));  
Magic Number,System451.Communication.Dashboard.Controls,AnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\AnalogMeter.cs,AnalogMeter_Paint,The following statement contains a magic number: e.Graphics.DrawLine (mp' new Point (5' 70)' new Point (95' 70));  
Magic Number,System451.Communication.Dashboard.Controls,AnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\AnalogMeter.cs,AnalogMeter_Paint,The following statement contains a magic number: RotationTransform.RotateAt (-90' TheRotationPoint);  
Magic Number,System451.Communication.Dashboard.Controls,AnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\AnalogMeter.cs,AnalogMeter_Paint,The following statement contains a magic number: e.Graphics.DrawLine (mp' 50' 30' 50' 40);  
Magic Number,System451.Communication.Dashboard.Controls,AnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\AnalogMeter.cs,AnalogMeter_Paint,The following statement contains a magic number: e.Graphics.DrawLine (mp' 50' 30' 50' 40);  
Magic Number,System451.Communication.Dashboard.Controls,AnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\AnalogMeter.cs,AnalogMeter_Paint,The following statement contains a magic number: e.Graphics.DrawLine (mp' 50' 30' 50' 40);  
Magic Number,System451.Communication.Dashboard.Controls,AnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\AnalogMeter.cs,AnalogMeter_Paint,The following statement contains a magic number: e.Graphics.DrawLine (mp' 50' 30' 50' 40);  
Magic Number,System451.Communication.Dashboard.Controls,AnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\AnalogMeter.cs,AnalogMeter_Paint,The following statement contains a magic number: for (float f = 0F; f < 180; f += 30) {  	RotationTransform.RotateAt (30' TheRotationPoint);  	e.Graphics.Transform = RotationTransform;  	e.Graphics.DrawLine (mp' 50' 30' 50' 40);  }  
Magic Number,System451.Communication.Dashboard.Controls,AnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\AnalogMeter.cs,AnalogMeter_Paint,The following statement contains a magic number: for (float f = 0F; f < 180; f += 30) {  	RotationTransform.RotateAt (30' TheRotationPoint);  	e.Graphics.Transform = RotationTransform;  	e.Graphics.DrawLine (mp' 50' 30' 50' 40);  }  
Magic Number,System451.Communication.Dashboard.Controls,AnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\AnalogMeter.cs,AnalogMeter_Paint,The following statement contains a magic number: for (float f = 0F; f < 180; f += 30) {  	RotationTransform.RotateAt (30' TheRotationPoint);  	e.Graphics.Transform = RotationTransform;  	e.Graphics.DrawLine (mp' 50' 30' 50' 40);  }  
Magic Number,System451.Communication.Dashboard.Controls,AnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\AnalogMeter.cs,AnalogMeter_Paint,The following statement contains a magic number: for (float f = 0F; f < 180; f += 30) {  	RotationTransform.RotateAt (30' TheRotationPoint);  	e.Graphics.Transform = RotationTransform;  	e.Graphics.DrawLine (mp' 50' 30' 50' 40);  }  
Magic Number,System451.Communication.Dashboard.Controls,AnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\AnalogMeter.cs,AnalogMeter_Paint,The following statement contains a magic number: for (float f = 0F; f < 180; f += 30) {  	RotationTransform.RotateAt (30' TheRotationPoint);  	e.Graphics.Transform = RotationTransform;  	e.Graphics.DrawLine (mp' 50' 30' 50' 40);  }  
Magic Number,System451.Communication.Dashboard.Controls,AnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\AnalogMeter.cs,AnalogMeter_Paint,The following statement contains a magic number: for (float f = 0F; f < 180; f += 30) {  	RotationTransform.RotateAt (30' TheRotationPoint);  	e.Graphics.Transform = RotationTransform;  	e.Graphics.DrawLine (mp' 50' 30' 50' 40);  }  
Magic Number,System451.Communication.Dashboard.Controls,AnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\AnalogMeter.cs,AnalogMeter_Paint,The following statement contains a magic number: for (float f = 0F; f < 180; f += 30) {  	RotationTransform.RotateAt (30' TheRotationPoint);  	e.Graphics.Transform = RotationTransform;  	e.Graphics.DrawLine (mp' 50' 30' 50' 40);  }  
Magic Number,System451.Communication.Dashboard.Controls,AnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\AnalogMeter.cs,AnalogMeter_Paint,The following statement contains a magic number: f += 30
Magic Number,System451.Communication.Dashboard.Controls,AnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\AnalogMeter.cs,AnalogMeter_Paint,The following statement contains a magic number: RotationTransform.RotateAt (30' TheRotationPoint);  
Magic Number,System451.Communication.Dashboard.Controls,AnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\AnalogMeter.cs,AnalogMeter_Paint,The following statement contains a magic number: e.Graphics.DrawLine (mp' 50' 30' 50' 40);  
Magic Number,System451.Communication.Dashboard.Controls,AnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\AnalogMeter.cs,AnalogMeter_Paint,The following statement contains a magic number: e.Graphics.DrawLine (mp' 50' 30' 50' 40);  
Magic Number,System451.Communication.Dashboard.Controls,AnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\AnalogMeter.cs,AnalogMeter_Paint,The following statement contains a magic number: e.Graphics.DrawLine (mp' 50' 30' 50' 40);  
Magic Number,System451.Communication.Dashboard.Controls,AnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\AnalogMeter.cs,AnalogMeter_Paint,The following statement contains a magic number: e.Graphics.DrawLine (mp' 50' 30' 50' 40);  
Magic Number,System451.Communication.Dashboard.Controls,AnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\AnalogMeter.cs,AnalogMeter_Paint,The following statement contains a magic number: using (Pen ArrPen = new Pen (ArrowColor' ArrowWidth)) {  	ArrPen.EndCap = LineCap.ArrowAnchor;  	ArrPen.StartCap = System.Drawing.Drawing2D.LineCap.RoundAnchor;  	PointF tp = new Point ();  	double radians = (((Value - .5) * 2) * 90) * Math.PI / 180;  	tp.Y = (float)(70 - (Math.Cos (radians) * 50));  	tp.X = (float)(50 + (Math.Sin (radians) * 50));  	e.Graphics.DrawLine (ArrPen' new PointF (50' 70)' tp);  }  
Magic Number,System451.Communication.Dashboard.Controls,AnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\AnalogMeter.cs,AnalogMeter_Paint,The following statement contains a magic number: using (Pen ArrPen = new Pen (ArrowColor' ArrowWidth)) {  	ArrPen.EndCap = LineCap.ArrowAnchor;  	ArrPen.StartCap = System.Drawing.Drawing2D.LineCap.RoundAnchor;  	PointF tp = new Point ();  	double radians = (((Value - .5) * 2) * 90) * Math.PI / 180;  	tp.Y = (float)(70 - (Math.Cos (radians) * 50));  	tp.X = (float)(50 + (Math.Sin (radians) * 50));  	e.Graphics.DrawLine (ArrPen' new PointF (50' 70)' tp);  }  
Magic Number,System451.Communication.Dashboard.Controls,AnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\AnalogMeter.cs,AnalogMeter_Paint,The following statement contains a magic number: using (Pen ArrPen = new Pen (ArrowColor' ArrowWidth)) {  	ArrPen.EndCap = LineCap.ArrowAnchor;  	ArrPen.StartCap = System.Drawing.Drawing2D.LineCap.RoundAnchor;  	PointF tp = new Point ();  	double radians = (((Value - .5) * 2) * 90) * Math.PI / 180;  	tp.Y = (float)(70 - (Math.Cos (radians) * 50));  	tp.X = (float)(50 + (Math.Sin (radians) * 50));  	e.Graphics.DrawLine (ArrPen' new PointF (50' 70)' tp);  }  
Magic Number,System451.Communication.Dashboard.Controls,AnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\AnalogMeter.cs,AnalogMeter_Paint,The following statement contains a magic number: using (Pen ArrPen = new Pen (ArrowColor' ArrowWidth)) {  	ArrPen.EndCap = LineCap.ArrowAnchor;  	ArrPen.StartCap = System.Drawing.Drawing2D.LineCap.RoundAnchor;  	PointF tp = new Point ();  	double radians = (((Value - .5) * 2) * 90) * Math.PI / 180;  	tp.Y = (float)(70 - (Math.Cos (radians) * 50));  	tp.X = (float)(50 + (Math.Sin (radians) * 50));  	e.Graphics.DrawLine (ArrPen' new PointF (50' 70)' tp);  }  
Magic Number,System451.Communication.Dashboard.Controls,AnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\AnalogMeter.cs,AnalogMeter_Paint,The following statement contains a magic number: using (Pen ArrPen = new Pen (ArrowColor' ArrowWidth)) {  	ArrPen.EndCap = LineCap.ArrowAnchor;  	ArrPen.StartCap = System.Drawing.Drawing2D.LineCap.RoundAnchor;  	PointF tp = new Point ();  	double radians = (((Value - .5) * 2) * 90) * Math.PI / 180;  	tp.Y = (float)(70 - (Math.Cos (radians) * 50));  	tp.X = (float)(50 + (Math.Sin (radians) * 50));  	e.Graphics.DrawLine (ArrPen' new PointF (50' 70)' tp);  }  
Magic Number,System451.Communication.Dashboard.Controls,AnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\AnalogMeter.cs,AnalogMeter_Paint,The following statement contains a magic number: using (Pen ArrPen = new Pen (ArrowColor' ArrowWidth)) {  	ArrPen.EndCap = LineCap.ArrowAnchor;  	ArrPen.StartCap = System.Drawing.Drawing2D.LineCap.RoundAnchor;  	PointF tp = new Point ();  	double radians = (((Value - .5) * 2) * 90) * Math.PI / 180;  	tp.Y = (float)(70 - (Math.Cos (radians) * 50));  	tp.X = (float)(50 + (Math.Sin (radians) * 50));  	e.Graphics.DrawLine (ArrPen' new PointF (50' 70)' tp);  }  
Magic Number,System451.Communication.Dashboard.Controls,AnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\AnalogMeter.cs,AnalogMeter_Paint,The following statement contains a magic number: using (Pen ArrPen = new Pen (ArrowColor' ArrowWidth)) {  	ArrPen.EndCap = LineCap.ArrowAnchor;  	ArrPen.StartCap = System.Drawing.Drawing2D.LineCap.RoundAnchor;  	PointF tp = new Point ();  	double radians = (((Value - .5) * 2) * 90) * Math.PI / 180;  	tp.Y = (float)(70 - (Math.Cos (radians) * 50));  	tp.X = (float)(50 + (Math.Sin (radians) * 50));  	e.Graphics.DrawLine (ArrPen' new PointF (50' 70)' tp);  }  
Magic Number,System451.Communication.Dashboard.Controls,AnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\AnalogMeter.cs,AnalogMeter_Paint,The following statement contains a magic number: using (Pen ArrPen = new Pen (ArrowColor' ArrowWidth)) {  	ArrPen.EndCap = LineCap.ArrowAnchor;  	ArrPen.StartCap = System.Drawing.Drawing2D.LineCap.RoundAnchor;  	PointF tp = new Point ();  	double radians = (((Value - .5) * 2) * 90) * Math.PI / 180;  	tp.Y = (float)(70 - (Math.Cos (radians) * 50));  	tp.X = (float)(50 + (Math.Sin (radians) * 50));  	e.Graphics.DrawLine (ArrPen' new PointF (50' 70)' tp);  }  
Magic Number,System451.Communication.Dashboard.Controls,AnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\AnalogMeter.cs,AnalogMeter_Paint,The following statement contains a magic number: using (Pen ArrPen = new Pen (ArrowColor' ArrowWidth)) {  	ArrPen.EndCap = LineCap.ArrowAnchor;  	ArrPen.StartCap = System.Drawing.Drawing2D.LineCap.RoundAnchor;  	PointF tp = new Point ();  	double radians = (((Value - .5) * 2) * 90) * Math.PI / 180;  	tp.Y = (float)(70 - (Math.Cos (radians) * 50));  	tp.X = (float)(50 + (Math.Sin (radians) * 50));  	e.Graphics.DrawLine (ArrPen' new PointF (50' 70)' tp);  }  
Magic Number,System451.Communication.Dashboard.Controls,AnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\AnalogMeter.cs,AnalogMeter_Paint,The following statement contains a magic number: using (Pen ArrPen = new Pen (ArrowColor' ArrowWidth)) {  	ArrPen.EndCap = LineCap.ArrowAnchor;  	ArrPen.StartCap = System.Drawing.Drawing2D.LineCap.RoundAnchor;  	PointF tp = new Point ();  	double radians = (((Value - .5) * 2) * 90) * Math.PI / 180;  	tp.Y = (float)(70 - (Math.Cos (radians) * 50));  	tp.X = (float)(50 + (Math.Sin (radians) * 50));  	e.Graphics.DrawLine (ArrPen' new PointF (50' 70)' tp);  }  
Magic Number,System451.Communication.Dashboard.Controls,AnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\AnalogMeter.cs,AnalogMeter_Paint,The following statement contains a magic number: tp.Y = (float)(70 - (Math.Cos (radians) * 50));  
Magic Number,System451.Communication.Dashboard.Controls,AnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\AnalogMeter.cs,AnalogMeter_Paint,The following statement contains a magic number: tp.Y = (float)(70 - (Math.Cos (radians) * 50));  
Magic Number,System451.Communication.Dashboard.Controls,AnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\AnalogMeter.cs,AnalogMeter_Paint,The following statement contains a magic number: tp.X = (float)(50 + (Math.Sin (radians) * 50));  
Magic Number,System451.Communication.Dashboard.Controls,AnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\AnalogMeter.cs,AnalogMeter_Paint,The following statement contains a magic number: tp.X = (float)(50 + (Math.Sin (radians) * 50));  
Magic Number,System451.Communication.Dashboard.Controls,AnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\AnalogMeter.cs,AnalogMeter_Paint,The following statement contains a magic number: e.Graphics.DrawLine (ArrPen' new PointF (50' 70)' tp);  
Magic Number,System451.Communication.Dashboard.Controls,AnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\AnalogMeter.cs,AnalogMeter_Paint,The following statement contains a magic number: e.Graphics.DrawLine (ArrPen' new PointF (50' 70)' tp);  
Magic Number,System451.Communication.Dashboard.Controls,ValueMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\ValueMeter.cs,ValueMeter,The following statement contains a magic number: Max = 100;  
Magic Number,System451.Communication.Dashboard.Controls,ValueMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\ValueMeter.cs,OnPaint,The following statement contains a magic number: if (Orientation == Orientation.Vertical) {  	e.Graphics.TranslateTransform (.5f' (float)this.Height - .5f);  	e.Graphics.RotateTransform (-90);  	width = this.Height;  	height = this.Width;  }  
Magic Number,System451.Communication.Dashboard.Controls,ValueMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\ValueMeter.cs,OnPaint,The following statement contains a magic number: e.Graphics.RotateTransform (-90);  
Magic Number,System451.Communication.Dashboard.Controls,ValueMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\ValueMeter.cs,OnPaint,The following statement contains a magic number: if (Label) {  	using (Brush p = new SolidBrush (this.BorderColor)) {  		string v = this.Value.ToString ("0.00");  		if (!Decimal)  			v = this.Value.ToString ("0");  		SizeF x = e.Graphics.MeasureString (v' this.Font);  		x.Height = (this.Height - x.Height) / 2.0f;  		x.Width = (this.Width - x.Width) / 2.0f;  		if (Orientation == Orientation.Vertical) {  			e.Graphics.ResetTransform ();  			e.Graphics.DrawString (v' this.Font' p' x.ToPointF ());  			e.Graphics.TranslateTransform (.5f' (float)this.Height - .5f);  			e.Graphics.RotateTransform (-90);  		}  		else  			e.Graphics.DrawString (v' this.Font' p' x.ToPointF ());  	}  }  
Magic Number,System451.Communication.Dashboard.Controls,ValueMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\ValueMeter.cs,OnPaint,The following statement contains a magic number: using (Brush p = new SolidBrush (this.BorderColor)) {  	string v = this.Value.ToString ("0.00");  	if (!Decimal)  		v = this.Value.ToString ("0");  	SizeF x = e.Graphics.MeasureString (v' this.Font);  	x.Height = (this.Height - x.Height) / 2.0f;  	x.Width = (this.Width - x.Width) / 2.0f;  	if (Orientation == Orientation.Vertical) {  		e.Graphics.ResetTransform ();  		e.Graphics.DrawString (v' this.Font' p' x.ToPointF ());  		e.Graphics.TranslateTransform (.5f' (float)this.Height - .5f);  		e.Graphics.RotateTransform (-90);  	}  	else  		e.Graphics.DrawString (v' this.Font' p' x.ToPointF ());  }  
Magic Number,System451.Communication.Dashboard.Controls,ValueMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\ValueMeter.cs,OnPaint,The following statement contains a magic number: if (Orientation == Orientation.Vertical) {  	e.Graphics.ResetTransform ();  	e.Graphics.DrawString (v' this.Font' p' x.ToPointF ());  	e.Graphics.TranslateTransform (.5f' (float)this.Height - .5f);  	e.Graphics.RotateTransform (-90);  }  else  	e.Graphics.DrawString (v' this.Font' p' x.ToPointF ());  
Magic Number,System451.Communication.Dashboard.Controls,ValueMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\ValueMeter.cs,OnPaint,The following statement contains a magic number: e.Graphics.RotateTransform (-90);  
Magic Number,System451.Communication.Dashboard.Controls,DataGraph,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\DataGraph.cs,DataGraph_Paint,The following statement contains a magic number: using (Brush mhb = new HatchBrush (HatchStyle.Cross' ForeColor' BackColor))  	e.Graphics.FillRectangle (mhb' 0' 0' 200' 200);  
Magic Number,System451.Communication.Dashboard.Controls,DataGraph,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\DataGraph.cs,DataGraph_Paint,The following statement contains a magic number: using (Brush mhb = new HatchBrush (HatchStyle.Cross' ForeColor' BackColor))  	e.Graphics.FillRectangle (mhb' 0' 0' 200' 200);  
Magic Number,System451.Communication.Dashboard.Controls,DataGraph,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\DataGraph.cs,DataGraph_Paint,The following statement contains a magic number: e.Graphics.FillRectangle (mhb' 0' 0' 200' 200);  
Magic Number,System451.Communication.Dashboard.Controls,DataGraph,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\DataGraph.cs,DataGraph_Paint,The following statement contains a magic number: e.Graphics.FillRectangle (mhb' 0' 0' 200' 200);  
Magic Number,System451.Communication.Dashboard.Controls,DataGraph,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\DataGraph.cs,DataGraph_Paint,The following statement contains a magic number: if (vals.Length > 2)  	using (Pen pn = new Pen (LineColor)) {  		for (int i = 1; i < vals.Length; i++) {  			e.Graphics.DrawLine (pn' 200 - (i - 1)' 200 - (((vals [i - 1] - Min) / (Max - Min)) * 200)' 200 - (i)' 200 - (((vals [i] - Min) / (Max - Min)) * 200));  		}  		if (Arrow) {  			pn.EndCap = LineCap.ArrowAnchor;  			pn.Width = 2.5f;  			e.Graphics.DrawLine (pn' 199' 200 - (((vals [0] - Min) / (Max - Min)) * 200)' 200' 200 - (((vals [0] - Min) / (Max - Min)) * 200));  		}  	}  
Magic Number,System451.Communication.Dashboard.Controls,DataGraph,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\DataGraph.cs,DataGraph_Paint,The following statement contains a magic number: if (vals.Length > 2)  	using (Pen pn = new Pen (LineColor)) {  		for (int i = 1; i < vals.Length; i++) {  			e.Graphics.DrawLine (pn' 200 - (i - 1)' 200 - (((vals [i - 1] - Min) / (Max - Min)) * 200)' 200 - (i)' 200 - (((vals [i] - Min) / (Max - Min)) * 200));  		}  		if (Arrow) {  			pn.EndCap = LineCap.ArrowAnchor;  			pn.Width = 2.5f;  			e.Graphics.DrawLine (pn' 199' 200 - (((vals [0] - Min) / (Max - Min)) * 200)' 200' 200 - (((vals [0] - Min) / (Max - Min)) * 200));  		}  	}  
Magic Number,System451.Communication.Dashboard.Controls,DataGraph,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\DataGraph.cs,DataGraph_Paint,The following statement contains a magic number: if (vals.Length > 2)  	using (Pen pn = new Pen (LineColor)) {  		for (int i = 1; i < vals.Length; i++) {  			e.Graphics.DrawLine (pn' 200 - (i - 1)' 200 - (((vals [i - 1] - Min) / (Max - Min)) * 200)' 200 - (i)' 200 - (((vals [i] - Min) / (Max - Min)) * 200));  		}  		if (Arrow) {  			pn.EndCap = LineCap.ArrowAnchor;  			pn.Width = 2.5f;  			e.Graphics.DrawLine (pn' 199' 200 - (((vals [0] - Min) / (Max - Min)) * 200)' 200' 200 - (((vals [0] - Min) / (Max - Min)) * 200));  		}  	}  
Magic Number,System451.Communication.Dashboard.Controls,DataGraph,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\DataGraph.cs,DataGraph_Paint,The following statement contains a magic number: if (vals.Length > 2)  	using (Pen pn = new Pen (LineColor)) {  		for (int i = 1; i < vals.Length; i++) {  			e.Graphics.DrawLine (pn' 200 - (i - 1)' 200 - (((vals [i - 1] - Min) / (Max - Min)) * 200)' 200 - (i)' 200 - (((vals [i] - Min) / (Max - Min)) * 200));  		}  		if (Arrow) {  			pn.EndCap = LineCap.ArrowAnchor;  			pn.Width = 2.5f;  			e.Graphics.DrawLine (pn' 199' 200 - (((vals [0] - Min) / (Max - Min)) * 200)' 200' 200 - (((vals [0] - Min) / (Max - Min)) * 200));  		}  	}  
Magic Number,System451.Communication.Dashboard.Controls,DataGraph,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\DataGraph.cs,DataGraph_Paint,The following statement contains a magic number: if (vals.Length > 2)  	using (Pen pn = new Pen (LineColor)) {  		for (int i = 1; i < vals.Length; i++) {  			e.Graphics.DrawLine (pn' 200 - (i - 1)' 200 - (((vals [i - 1] - Min) / (Max - Min)) * 200)' 200 - (i)' 200 - (((vals [i] - Min) / (Max - Min)) * 200));  		}  		if (Arrow) {  			pn.EndCap = LineCap.ArrowAnchor;  			pn.Width = 2.5f;  			e.Graphics.DrawLine (pn' 199' 200 - (((vals [0] - Min) / (Max - Min)) * 200)' 200' 200 - (((vals [0] - Min) / (Max - Min)) * 200));  		}  	}  
Magic Number,System451.Communication.Dashboard.Controls,DataGraph,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\DataGraph.cs,DataGraph_Paint,The following statement contains a magic number: if (vals.Length > 2)  	using (Pen pn = new Pen (LineColor)) {  		for (int i = 1; i < vals.Length; i++) {  			e.Graphics.DrawLine (pn' 200 - (i - 1)' 200 - (((vals [i - 1] - Min) / (Max - Min)) * 200)' 200 - (i)' 200 - (((vals [i] - Min) / (Max - Min)) * 200));  		}  		if (Arrow) {  			pn.EndCap = LineCap.ArrowAnchor;  			pn.Width = 2.5f;  			e.Graphics.DrawLine (pn' 199' 200 - (((vals [0] - Min) / (Max - Min)) * 200)' 200' 200 - (((vals [0] - Min) / (Max - Min)) * 200));  		}  	}  
Magic Number,System451.Communication.Dashboard.Controls,DataGraph,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\DataGraph.cs,DataGraph_Paint,The following statement contains a magic number: if (vals.Length > 2)  	using (Pen pn = new Pen (LineColor)) {  		for (int i = 1; i < vals.Length; i++) {  			e.Graphics.DrawLine (pn' 200 - (i - 1)' 200 - (((vals [i - 1] - Min) / (Max - Min)) * 200)' 200 - (i)' 200 - (((vals [i] - Min) / (Max - Min)) * 200));  		}  		if (Arrow) {  			pn.EndCap = LineCap.ArrowAnchor;  			pn.Width = 2.5f;  			e.Graphics.DrawLine (pn' 199' 200 - (((vals [0] - Min) / (Max - Min)) * 200)' 200' 200 - (((vals [0] - Min) / (Max - Min)) * 200));  		}  	}  
Magic Number,System451.Communication.Dashboard.Controls,DataGraph,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\DataGraph.cs,DataGraph_Paint,The following statement contains a magic number: if (vals.Length > 2)  	using (Pen pn = new Pen (LineColor)) {  		for (int i = 1; i < vals.Length; i++) {  			e.Graphics.DrawLine (pn' 200 - (i - 1)' 200 - (((vals [i - 1] - Min) / (Max - Min)) * 200)' 200 - (i)' 200 - (((vals [i] - Min) / (Max - Min)) * 200));  		}  		if (Arrow) {  			pn.EndCap = LineCap.ArrowAnchor;  			pn.Width = 2.5f;  			e.Graphics.DrawLine (pn' 199' 200 - (((vals [0] - Min) / (Max - Min)) * 200)' 200' 200 - (((vals [0] - Min) / (Max - Min)) * 200));  		}  	}  
Magic Number,System451.Communication.Dashboard.Controls,DataGraph,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\DataGraph.cs,DataGraph_Paint,The following statement contains a magic number: if (vals.Length > 2)  	using (Pen pn = new Pen (LineColor)) {  		for (int i = 1; i < vals.Length; i++) {  			e.Graphics.DrawLine (pn' 200 - (i - 1)' 200 - (((vals [i - 1] - Min) / (Max - Min)) * 200)' 200 - (i)' 200 - (((vals [i] - Min) / (Max - Min)) * 200));  		}  		if (Arrow) {  			pn.EndCap = LineCap.ArrowAnchor;  			pn.Width = 2.5f;  			e.Graphics.DrawLine (pn' 199' 200 - (((vals [0] - Min) / (Max - Min)) * 200)' 200' 200 - (((vals [0] - Min) / (Max - Min)) * 200));  		}  	}  
Magic Number,System451.Communication.Dashboard.Controls,DataGraph,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\DataGraph.cs,DataGraph_Paint,The following statement contains a magic number: if (vals.Length > 2)  	using (Pen pn = new Pen (LineColor)) {  		for (int i = 1; i < vals.Length; i++) {  			e.Graphics.DrawLine (pn' 200 - (i - 1)' 200 - (((vals [i - 1] - Min) / (Max - Min)) * 200)' 200 - (i)' 200 - (((vals [i] - Min) / (Max - Min)) * 200));  		}  		if (Arrow) {  			pn.EndCap = LineCap.ArrowAnchor;  			pn.Width = 2.5f;  			e.Graphics.DrawLine (pn' 199' 200 - (((vals [0] - Min) / (Max - Min)) * 200)' 200' 200 - (((vals [0] - Min) / (Max - Min)) * 200));  		}  	}  
Magic Number,System451.Communication.Dashboard.Controls,DataGraph,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\DataGraph.cs,DataGraph_Paint,The following statement contains a magic number: if (vals.Length > 2)  	using (Pen pn = new Pen (LineColor)) {  		for (int i = 1; i < vals.Length; i++) {  			e.Graphics.DrawLine (pn' 200 - (i - 1)' 200 - (((vals [i - 1] - Min) / (Max - Min)) * 200)' 200 - (i)' 200 - (((vals [i] - Min) / (Max - Min)) * 200));  		}  		if (Arrow) {  			pn.EndCap = LineCap.ArrowAnchor;  			pn.Width = 2.5f;  			e.Graphics.DrawLine (pn' 199' 200 - (((vals [0] - Min) / (Max - Min)) * 200)' 200' 200 - (((vals [0] - Min) / (Max - Min)) * 200));  		}  	}  
Magic Number,System451.Communication.Dashboard.Controls,DataGraph,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\DataGraph.cs,DataGraph_Paint,The following statement contains a magic number: if (vals.Length > 2)  	using (Pen pn = new Pen (LineColor)) {  		for (int i = 1; i < vals.Length; i++) {  			e.Graphics.DrawLine (pn' 200 - (i - 1)' 200 - (((vals [i - 1] - Min) / (Max - Min)) * 200)' 200 - (i)' 200 - (((vals [i] - Min) / (Max - Min)) * 200));  		}  		if (Arrow) {  			pn.EndCap = LineCap.ArrowAnchor;  			pn.Width = 2.5f;  			e.Graphics.DrawLine (pn' 199' 200 - (((vals [0] - Min) / (Max - Min)) * 200)' 200' 200 - (((vals [0] - Min) / (Max - Min)) * 200));  		}  	}  
Magic Number,System451.Communication.Dashboard.Controls,DataGraph,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\DataGraph.cs,DataGraph_Paint,The following statement contains a magic number: if (vals.Length > 2)  	using (Pen pn = new Pen (LineColor)) {  		for (int i = 1; i < vals.Length; i++) {  			e.Graphics.DrawLine (pn' 200 - (i - 1)' 200 - (((vals [i - 1] - Min) / (Max - Min)) * 200)' 200 - (i)' 200 - (((vals [i] - Min) / (Max - Min)) * 200));  		}  		if (Arrow) {  			pn.EndCap = LineCap.ArrowAnchor;  			pn.Width = 2.5f;  			e.Graphics.DrawLine (pn' 199' 200 - (((vals [0] - Min) / (Max - Min)) * 200)' 200' 200 - (((vals [0] - Min) / (Max - Min)) * 200));  		}  	}  
Magic Number,System451.Communication.Dashboard.Controls,DataGraph,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\DataGraph.cs,DataGraph_Paint,The following statement contains a magic number: using (Pen pn = new Pen (LineColor)) {  	for (int i = 1; i < vals.Length; i++) {  		e.Graphics.DrawLine (pn' 200 - (i - 1)' 200 - (((vals [i - 1] - Min) / (Max - Min)) * 200)' 200 - (i)' 200 - (((vals [i] - Min) / (Max - Min)) * 200));  	}  	if (Arrow) {  		pn.EndCap = LineCap.ArrowAnchor;  		pn.Width = 2.5f;  		e.Graphics.DrawLine (pn' 199' 200 - (((vals [0] - Min) / (Max - Min)) * 200)' 200' 200 - (((vals [0] - Min) / (Max - Min)) * 200));  	}  }  
Magic Number,System451.Communication.Dashboard.Controls,DataGraph,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\DataGraph.cs,DataGraph_Paint,The following statement contains a magic number: using (Pen pn = new Pen (LineColor)) {  	for (int i = 1; i < vals.Length; i++) {  		e.Graphics.DrawLine (pn' 200 - (i - 1)' 200 - (((vals [i - 1] - Min) / (Max - Min)) * 200)' 200 - (i)' 200 - (((vals [i] - Min) / (Max - Min)) * 200));  	}  	if (Arrow) {  		pn.EndCap = LineCap.ArrowAnchor;  		pn.Width = 2.5f;  		e.Graphics.DrawLine (pn' 199' 200 - (((vals [0] - Min) / (Max - Min)) * 200)' 200' 200 - (((vals [0] - Min) / (Max - Min)) * 200));  	}  }  
Magic Number,System451.Communication.Dashboard.Controls,DataGraph,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\DataGraph.cs,DataGraph_Paint,The following statement contains a magic number: using (Pen pn = new Pen (LineColor)) {  	for (int i = 1; i < vals.Length; i++) {  		e.Graphics.DrawLine (pn' 200 - (i - 1)' 200 - (((vals [i - 1] - Min) / (Max - Min)) * 200)' 200 - (i)' 200 - (((vals [i] - Min) / (Max - Min)) * 200));  	}  	if (Arrow) {  		pn.EndCap = LineCap.ArrowAnchor;  		pn.Width = 2.5f;  		e.Graphics.DrawLine (pn' 199' 200 - (((vals [0] - Min) / (Max - Min)) * 200)' 200' 200 - (((vals [0] - Min) / (Max - Min)) * 200));  	}  }  
Magic Number,System451.Communication.Dashboard.Controls,DataGraph,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\DataGraph.cs,DataGraph_Paint,The following statement contains a magic number: using (Pen pn = new Pen (LineColor)) {  	for (int i = 1; i < vals.Length; i++) {  		e.Graphics.DrawLine (pn' 200 - (i - 1)' 200 - (((vals [i - 1] - Min) / (Max - Min)) * 200)' 200 - (i)' 200 - (((vals [i] - Min) / (Max - Min)) * 200));  	}  	if (Arrow) {  		pn.EndCap = LineCap.ArrowAnchor;  		pn.Width = 2.5f;  		e.Graphics.DrawLine (pn' 199' 200 - (((vals [0] - Min) / (Max - Min)) * 200)' 200' 200 - (((vals [0] - Min) / (Max - Min)) * 200));  	}  }  
Magic Number,System451.Communication.Dashboard.Controls,DataGraph,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\DataGraph.cs,DataGraph_Paint,The following statement contains a magic number: using (Pen pn = new Pen (LineColor)) {  	for (int i = 1; i < vals.Length; i++) {  		e.Graphics.DrawLine (pn' 200 - (i - 1)' 200 - (((vals [i - 1] - Min) / (Max - Min)) * 200)' 200 - (i)' 200 - (((vals [i] - Min) / (Max - Min)) * 200));  	}  	if (Arrow) {  		pn.EndCap = LineCap.ArrowAnchor;  		pn.Width = 2.5f;  		e.Graphics.DrawLine (pn' 199' 200 - (((vals [0] - Min) / (Max - Min)) * 200)' 200' 200 - (((vals [0] - Min) / (Max - Min)) * 200));  	}  }  
Magic Number,System451.Communication.Dashboard.Controls,DataGraph,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\DataGraph.cs,DataGraph_Paint,The following statement contains a magic number: using (Pen pn = new Pen (LineColor)) {  	for (int i = 1; i < vals.Length; i++) {  		e.Graphics.DrawLine (pn' 200 - (i - 1)' 200 - (((vals [i - 1] - Min) / (Max - Min)) * 200)' 200 - (i)' 200 - (((vals [i] - Min) / (Max - Min)) * 200));  	}  	if (Arrow) {  		pn.EndCap = LineCap.ArrowAnchor;  		pn.Width = 2.5f;  		e.Graphics.DrawLine (pn' 199' 200 - (((vals [0] - Min) / (Max - Min)) * 200)' 200' 200 - (((vals [0] - Min) / (Max - Min)) * 200));  	}  }  
Magic Number,System451.Communication.Dashboard.Controls,DataGraph,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\DataGraph.cs,DataGraph_Paint,The following statement contains a magic number: using (Pen pn = new Pen (LineColor)) {  	for (int i = 1; i < vals.Length; i++) {  		e.Graphics.DrawLine (pn' 200 - (i - 1)' 200 - (((vals [i - 1] - Min) / (Max - Min)) * 200)' 200 - (i)' 200 - (((vals [i] - Min) / (Max - Min)) * 200));  	}  	if (Arrow) {  		pn.EndCap = LineCap.ArrowAnchor;  		pn.Width = 2.5f;  		e.Graphics.DrawLine (pn' 199' 200 - (((vals [0] - Min) / (Max - Min)) * 200)' 200' 200 - (((vals [0] - Min) / (Max - Min)) * 200));  	}  }  
Magic Number,System451.Communication.Dashboard.Controls,DataGraph,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\DataGraph.cs,DataGraph_Paint,The following statement contains a magic number: using (Pen pn = new Pen (LineColor)) {  	for (int i = 1; i < vals.Length; i++) {  		e.Graphics.DrawLine (pn' 200 - (i - 1)' 200 - (((vals [i - 1] - Min) / (Max - Min)) * 200)' 200 - (i)' 200 - (((vals [i] - Min) / (Max - Min)) * 200));  	}  	if (Arrow) {  		pn.EndCap = LineCap.ArrowAnchor;  		pn.Width = 2.5f;  		e.Graphics.DrawLine (pn' 199' 200 - (((vals [0] - Min) / (Max - Min)) * 200)' 200' 200 - (((vals [0] - Min) / (Max - Min)) * 200));  	}  }  
Magic Number,System451.Communication.Dashboard.Controls,DataGraph,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\DataGraph.cs,DataGraph_Paint,The following statement contains a magic number: using (Pen pn = new Pen (LineColor)) {  	for (int i = 1; i < vals.Length; i++) {  		e.Graphics.DrawLine (pn' 200 - (i - 1)' 200 - (((vals [i - 1] - Min) / (Max - Min)) * 200)' 200 - (i)' 200 - (((vals [i] - Min) / (Max - Min)) * 200));  	}  	if (Arrow) {  		pn.EndCap = LineCap.ArrowAnchor;  		pn.Width = 2.5f;  		e.Graphics.DrawLine (pn' 199' 200 - (((vals [0] - Min) / (Max - Min)) * 200)' 200' 200 - (((vals [0] - Min) / (Max - Min)) * 200));  	}  }  
Magic Number,System451.Communication.Dashboard.Controls,DataGraph,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\DataGraph.cs,DataGraph_Paint,The following statement contains a magic number: using (Pen pn = new Pen (LineColor)) {  	for (int i = 1; i < vals.Length; i++) {  		e.Graphics.DrawLine (pn' 200 - (i - 1)' 200 - (((vals [i - 1] - Min) / (Max - Min)) * 200)' 200 - (i)' 200 - (((vals [i] - Min) / (Max - Min)) * 200));  	}  	if (Arrow) {  		pn.EndCap = LineCap.ArrowAnchor;  		pn.Width = 2.5f;  		e.Graphics.DrawLine (pn' 199' 200 - (((vals [0] - Min) / (Max - Min)) * 200)' 200' 200 - (((vals [0] - Min) / (Max - Min)) * 200));  	}  }  
Magic Number,System451.Communication.Dashboard.Controls,DataGraph,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\DataGraph.cs,DataGraph_Paint,The following statement contains a magic number: using (Pen pn = new Pen (LineColor)) {  	for (int i = 1; i < vals.Length; i++) {  		e.Graphics.DrawLine (pn' 200 - (i - 1)' 200 - (((vals [i - 1] - Min) / (Max - Min)) * 200)' 200 - (i)' 200 - (((vals [i] - Min) / (Max - Min)) * 200));  	}  	if (Arrow) {  		pn.EndCap = LineCap.ArrowAnchor;  		pn.Width = 2.5f;  		e.Graphics.DrawLine (pn' 199' 200 - (((vals [0] - Min) / (Max - Min)) * 200)' 200' 200 - (((vals [0] - Min) / (Max - Min)) * 200));  	}  }  
Magic Number,System451.Communication.Dashboard.Controls,DataGraph,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\DataGraph.cs,DataGraph_Paint,The following statement contains a magic number: using (Pen pn = new Pen (LineColor)) {  	for (int i = 1; i < vals.Length; i++) {  		e.Graphics.DrawLine (pn' 200 - (i - 1)' 200 - (((vals [i - 1] - Min) / (Max - Min)) * 200)' 200 - (i)' 200 - (((vals [i] - Min) / (Max - Min)) * 200));  	}  	if (Arrow) {  		pn.EndCap = LineCap.ArrowAnchor;  		pn.Width = 2.5f;  		e.Graphics.DrawLine (pn' 199' 200 - (((vals [0] - Min) / (Max - Min)) * 200)' 200' 200 - (((vals [0] - Min) / (Max - Min)) * 200));  	}  }  
Magic Number,System451.Communication.Dashboard.Controls,DataGraph,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\DataGraph.cs,DataGraph_Paint,The following statement contains a magic number: for (int i = 1; i < vals.Length; i++) {  	e.Graphics.DrawLine (pn' 200 - (i - 1)' 200 - (((vals [i - 1] - Min) / (Max - Min)) * 200)' 200 - (i)' 200 - (((vals [i] - Min) / (Max - Min)) * 200));  }  
Magic Number,System451.Communication.Dashboard.Controls,DataGraph,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\DataGraph.cs,DataGraph_Paint,The following statement contains a magic number: for (int i = 1; i < vals.Length; i++) {  	e.Graphics.DrawLine (pn' 200 - (i - 1)' 200 - (((vals [i - 1] - Min) / (Max - Min)) * 200)' 200 - (i)' 200 - (((vals [i] - Min) / (Max - Min)) * 200));  }  
Magic Number,System451.Communication.Dashboard.Controls,DataGraph,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\DataGraph.cs,DataGraph_Paint,The following statement contains a magic number: for (int i = 1; i < vals.Length; i++) {  	e.Graphics.DrawLine (pn' 200 - (i - 1)' 200 - (((vals [i - 1] - Min) / (Max - Min)) * 200)' 200 - (i)' 200 - (((vals [i] - Min) / (Max - Min)) * 200));  }  
Magic Number,System451.Communication.Dashboard.Controls,DataGraph,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\DataGraph.cs,DataGraph_Paint,The following statement contains a magic number: for (int i = 1; i < vals.Length; i++) {  	e.Graphics.DrawLine (pn' 200 - (i - 1)' 200 - (((vals [i - 1] - Min) / (Max - Min)) * 200)' 200 - (i)' 200 - (((vals [i] - Min) / (Max - Min)) * 200));  }  
Magic Number,System451.Communication.Dashboard.Controls,DataGraph,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\DataGraph.cs,DataGraph_Paint,The following statement contains a magic number: for (int i = 1; i < vals.Length; i++) {  	e.Graphics.DrawLine (pn' 200 - (i - 1)' 200 - (((vals [i - 1] - Min) / (Max - Min)) * 200)' 200 - (i)' 200 - (((vals [i] - Min) / (Max - Min)) * 200));  }  
Magic Number,System451.Communication.Dashboard.Controls,DataGraph,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\DataGraph.cs,DataGraph_Paint,The following statement contains a magic number: for (int i = 1; i < vals.Length; i++) {  	e.Graphics.DrawLine (pn' 200 - (i - 1)' 200 - (((vals [i - 1] - Min) / (Max - Min)) * 200)' 200 - (i)' 200 - (((vals [i] - Min) / (Max - Min)) * 200));  }  
Magic Number,System451.Communication.Dashboard.Controls,DataGraph,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\DataGraph.cs,DataGraph_Paint,The following statement contains a magic number: e.Graphics.DrawLine (pn' 200 - (i - 1)' 200 - (((vals [i - 1] - Min) / (Max - Min)) * 200)' 200 - (i)' 200 - (((vals [i] - Min) / (Max - Min)) * 200));  
Magic Number,System451.Communication.Dashboard.Controls,DataGraph,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\DataGraph.cs,DataGraph_Paint,The following statement contains a magic number: e.Graphics.DrawLine (pn' 200 - (i - 1)' 200 - (((vals [i - 1] - Min) / (Max - Min)) * 200)' 200 - (i)' 200 - (((vals [i] - Min) / (Max - Min)) * 200));  
Magic Number,System451.Communication.Dashboard.Controls,DataGraph,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\DataGraph.cs,DataGraph_Paint,The following statement contains a magic number: e.Graphics.DrawLine (pn' 200 - (i - 1)' 200 - (((vals [i - 1] - Min) / (Max - Min)) * 200)' 200 - (i)' 200 - (((vals [i] - Min) / (Max - Min)) * 200));  
Magic Number,System451.Communication.Dashboard.Controls,DataGraph,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\DataGraph.cs,DataGraph_Paint,The following statement contains a magic number: e.Graphics.DrawLine (pn' 200 - (i - 1)' 200 - (((vals [i - 1] - Min) / (Max - Min)) * 200)' 200 - (i)' 200 - (((vals [i] - Min) / (Max - Min)) * 200));  
Magic Number,System451.Communication.Dashboard.Controls,DataGraph,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\DataGraph.cs,DataGraph_Paint,The following statement contains a magic number: e.Graphics.DrawLine (pn' 200 - (i - 1)' 200 - (((vals [i - 1] - Min) / (Max - Min)) * 200)' 200 - (i)' 200 - (((vals [i] - Min) / (Max - Min)) * 200));  
Magic Number,System451.Communication.Dashboard.Controls,DataGraph,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\DataGraph.cs,DataGraph_Paint,The following statement contains a magic number: e.Graphics.DrawLine (pn' 200 - (i - 1)' 200 - (((vals [i - 1] - Min) / (Max - Min)) * 200)' 200 - (i)' 200 - (((vals [i] - Min) / (Max - Min)) * 200));  
Magic Number,System451.Communication.Dashboard.Controls,DataGraph,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\DataGraph.cs,DataGraph_Paint,The following statement contains a magic number: if (Arrow) {  	pn.EndCap = LineCap.ArrowAnchor;  	pn.Width = 2.5f;  	e.Graphics.DrawLine (pn' 199' 200 - (((vals [0] - Min) / (Max - Min)) * 200)' 200' 200 - (((vals [0] - Min) / (Max - Min)) * 200));  }  
Magic Number,System451.Communication.Dashboard.Controls,DataGraph,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\DataGraph.cs,DataGraph_Paint,The following statement contains a magic number: if (Arrow) {  	pn.EndCap = LineCap.ArrowAnchor;  	pn.Width = 2.5f;  	e.Graphics.DrawLine (pn' 199' 200 - (((vals [0] - Min) / (Max - Min)) * 200)' 200' 200 - (((vals [0] - Min) / (Max - Min)) * 200));  }  
Magic Number,System451.Communication.Dashboard.Controls,DataGraph,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\DataGraph.cs,DataGraph_Paint,The following statement contains a magic number: if (Arrow) {  	pn.EndCap = LineCap.ArrowAnchor;  	pn.Width = 2.5f;  	e.Graphics.DrawLine (pn' 199' 200 - (((vals [0] - Min) / (Max - Min)) * 200)' 200' 200 - (((vals [0] - Min) / (Max - Min)) * 200));  }  
Magic Number,System451.Communication.Dashboard.Controls,DataGraph,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\DataGraph.cs,DataGraph_Paint,The following statement contains a magic number: if (Arrow) {  	pn.EndCap = LineCap.ArrowAnchor;  	pn.Width = 2.5f;  	e.Graphics.DrawLine (pn' 199' 200 - (((vals [0] - Min) / (Max - Min)) * 200)' 200' 200 - (((vals [0] - Min) / (Max - Min)) * 200));  }  
Magic Number,System451.Communication.Dashboard.Controls,DataGraph,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\DataGraph.cs,DataGraph_Paint,The following statement contains a magic number: if (Arrow) {  	pn.EndCap = LineCap.ArrowAnchor;  	pn.Width = 2.5f;  	e.Graphics.DrawLine (pn' 199' 200 - (((vals [0] - Min) / (Max - Min)) * 200)' 200' 200 - (((vals [0] - Min) / (Max - Min)) * 200));  }  
Magic Number,System451.Communication.Dashboard.Controls,DataGraph,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\DataGraph.cs,DataGraph_Paint,The following statement contains a magic number: if (Arrow) {  	pn.EndCap = LineCap.ArrowAnchor;  	pn.Width = 2.5f;  	e.Graphics.DrawLine (pn' 199' 200 - (((vals [0] - Min) / (Max - Min)) * 200)' 200' 200 - (((vals [0] - Min) / (Max - Min)) * 200));  }  
Magic Number,System451.Communication.Dashboard.Controls,DataGraph,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\DataGraph.cs,DataGraph_Paint,The following statement contains a magic number: e.Graphics.DrawLine (pn' 199' 200 - (((vals [0] - Min) / (Max - Min)) * 200)' 200' 200 - (((vals [0] - Min) / (Max - Min)) * 200));  
Magic Number,System451.Communication.Dashboard.Controls,DataGraph,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\DataGraph.cs,DataGraph_Paint,The following statement contains a magic number: e.Graphics.DrawLine (pn' 199' 200 - (((vals [0] - Min) / (Max - Min)) * 200)' 200' 200 - (((vals [0] - Min) / (Max - Min)) * 200));  
Magic Number,System451.Communication.Dashboard.Controls,DataGraph,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\DataGraph.cs,DataGraph_Paint,The following statement contains a magic number: e.Graphics.DrawLine (pn' 199' 200 - (((vals [0] - Min) / (Max - Min)) * 200)' 200' 200 - (((vals [0] - Min) / (Max - Min)) * 200));  
Magic Number,System451.Communication.Dashboard.Controls,DataGraph,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\DataGraph.cs,DataGraph_Paint,The following statement contains a magic number: e.Graphics.DrawLine (pn' 199' 200 - (((vals [0] - Min) / (Max - Min)) * 200)' 200' 200 - (((vals [0] - Min) / (Max - Min)) * 200));  
Magic Number,System451.Communication.Dashboard.Controls,DataGraph,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\DataGraph.cs,DataGraph_Paint,The following statement contains a magic number: e.Graphics.DrawLine (pn' 199' 200 - (((vals [0] - Min) / (Max - Min)) * 200)' 200' 200 - (((vals [0] - Min) / (Max - Min)) * 200));  
Magic Number,System451.Communication.Dashboard.Controls,DataGraph,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\DataGraph.cs,DataGraph_Paint,The following statement contains a magic number: e.Graphics.DrawLine (pn' 199' 200 - (((vals [0] - Min) / (Max - Min)) * 200)' 200' 200 - (((vals [0] - Min) / (Max - Min)) * 200));  
Magic Number,System451.Communication.Dashboard.Controls,DirectionMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\DirectionMeter.cs,DirectionMeter,The following statement contains a magic number: rv = new RangeAndValue (0' 360' 0' true' true);  
Magic Number,System451.Communication.Dashboard.Controls,DirectionMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\DirectionMeter.cs,PointToAngle,The following statement contains a magic number: if (p.Y > 50)  	return r + 90;  
Magic Number,System451.Communication.Dashboard.Controls,DirectionMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\DirectionMeter.cs,PointToAngle,The following statement contains a magic number: if (p.Y > 50)  	return r + 90;  
Magic Number,System451.Communication.Dashboard.Controls,DirectionMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\DirectionMeter.cs,PointToAngle,The following statement contains a magic number: return r + 90;  
Magic Number,System451.Communication.Dashboard.Controls,DirectionMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\DirectionMeter.cs,DirectionMeter_Paint,The following statement contains a magic number: using (Pen roundPen = new Pen (CircleColor' CircleWidth)) {  	e.Graphics.DrawEllipse (roundPen' 5' 5' 90' 90);  }  
Magic Number,System451.Communication.Dashboard.Controls,DirectionMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\DirectionMeter.cs,DirectionMeter_Paint,The following statement contains a magic number: using (Pen roundPen = new Pen (CircleColor' CircleWidth)) {  	e.Graphics.DrawEllipse (roundPen' 5' 5' 90' 90);  }  
Magic Number,System451.Communication.Dashboard.Controls,DirectionMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\DirectionMeter.cs,DirectionMeter_Paint,The following statement contains a magic number: using (Pen roundPen = new Pen (CircleColor' CircleWidth)) {  	e.Graphics.DrawEllipse (roundPen' 5' 5' 90' 90);  }  
Magic Number,System451.Communication.Dashboard.Controls,DirectionMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\DirectionMeter.cs,DirectionMeter_Paint,The following statement contains a magic number: using (Pen roundPen = new Pen (CircleColor' CircleWidth)) {  	e.Graphics.DrawEllipse (roundPen' 5' 5' 90' 90);  }  
Magic Number,System451.Communication.Dashboard.Controls,DirectionMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\DirectionMeter.cs,DirectionMeter_Paint,The following statement contains a magic number: e.Graphics.DrawEllipse (roundPen' 5' 5' 90' 90);  
Magic Number,System451.Communication.Dashboard.Controls,DirectionMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\DirectionMeter.cs,DirectionMeter_Paint,The following statement contains a magic number: e.Graphics.DrawEllipse (roundPen' 5' 5' 90' 90);  
Magic Number,System451.Communication.Dashboard.Controls,DirectionMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\DirectionMeter.cs,DirectionMeter_Paint,The following statement contains a magic number: e.Graphics.DrawEllipse (roundPen' 5' 5' 90' 90);  
Magic Number,System451.Communication.Dashboard.Controls,DirectionMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\DirectionMeter.cs,DirectionMeter_Paint,The following statement contains a magic number: e.Graphics.DrawEllipse (roundPen' 5' 5' 90' 90);  
Magic Number,System451.Communication.Dashboard.Controls,DirectionMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\DirectionMeter.cs,DirectionMeter_Paint,The following statement contains a magic number: using (Pen ArrPen = new Pen (ArrowColor' ArrowWidth)) {  	ArrPen.EndCap = LineCap.ArrowAnchor;  	ArrPen.StartCap = System.Drawing.Drawing2D.LineCap.RoundAnchor;  	PointF tp = new Point ();  	//Its a circle' use trig  	double radians = value * Math.PI / 180;  	tp.Y = (float)(50f - (Math.Cos (radians) * 50f));  	tp.X = (float)(50f + (Math.Sin (radians) * 50f));  	e.Graphics.DrawLine (ArrPen' new PointF (50' 50)' tp);  }  
Magic Number,System451.Communication.Dashboard.Controls,DirectionMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\DirectionMeter.cs,DirectionMeter_Paint,The following statement contains a magic number: using (Pen ArrPen = new Pen (ArrowColor' ArrowWidth)) {  	ArrPen.EndCap = LineCap.ArrowAnchor;  	ArrPen.StartCap = System.Drawing.Drawing2D.LineCap.RoundAnchor;  	PointF tp = new Point ();  	//Its a circle' use trig  	double radians = value * Math.PI / 180;  	tp.Y = (float)(50f - (Math.Cos (radians) * 50f));  	tp.X = (float)(50f + (Math.Sin (radians) * 50f));  	e.Graphics.DrawLine (ArrPen' new PointF (50' 50)' tp);  }  
Magic Number,System451.Communication.Dashboard.Controls,DirectionMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\DirectionMeter.cs,DirectionMeter_Paint,The following statement contains a magic number: using (Pen ArrPen = new Pen (ArrowColor' ArrowWidth)) {  	ArrPen.EndCap = LineCap.ArrowAnchor;  	ArrPen.StartCap = System.Drawing.Drawing2D.LineCap.RoundAnchor;  	PointF tp = new Point ();  	//Its a circle' use trig  	double radians = value * Math.PI / 180;  	tp.Y = (float)(50f - (Math.Cos (radians) * 50f));  	tp.X = (float)(50f + (Math.Sin (radians) * 50f));  	e.Graphics.DrawLine (ArrPen' new PointF (50' 50)' tp);  }  
Magic Number,System451.Communication.Dashboard.Controls,DirectionMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\DirectionMeter.cs,DirectionMeter_Paint,The following statement contains a magic number: e.Graphics.DrawLine (ArrPen' new PointF (50' 50)' tp);  
Magic Number,System451.Communication.Dashboard.Controls,DirectionMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\DirectionMeter.cs,DirectionMeter_Paint,The following statement contains a magic number: e.Graphics.DrawLine (ArrPen' new PointF (50' 50)' tp);  
Magic Number,System451.Communication.Dashboard.Controls,OnOffControl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\OnOffControl.cs,OnOffControl_Paint,The following statement contains a magic number: if (Value) {  	e.Graphics.FillEllipse (Brushes.DarkGreen' 1' 1' 23' 23);  	e.Graphics.FillEllipse (Brushes.ForestGreen' 3' 3' 19' 19);  	e.Graphics.FillEllipse (Brushes.LawnGreen' 6' 6' 13' 13);  }  else {  	e.Graphics.FillEllipse (Brushes.DarkRed' 1' 1' 23' 23);  	e.Graphics.FillEllipse (Brushes.Crimson' 3' 3' 19' 19);  	e.Graphics.FillEllipse (Brushes.Red' 6' 6' 13' 13);  }  
Magic Number,System451.Communication.Dashboard.Controls,OnOffControl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\OnOffControl.cs,OnOffControl_Paint,The following statement contains a magic number: if (Value) {  	e.Graphics.FillEllipse (Brushes.DarkGreen' 1' 1' 23' 23);  	e.Graphics.FillEllipse (Brushes.ForestGreen' 3' 3' 19' 19);  	e.Graphics.FillEllipse (Brushes.LawnGreen' 6' 6' 13' 13);  }  else {  	e.Graphics.FillEllipse (Brushes.DarkRed' 1' 1' 23' 23);  	e.Graphics.FillEllipse (Brushes.Crimson' 3' 3' 19' 19);  	e.Graphics.FillEllipse (Brushes.Red' 6' 6' 13' 13);  }  
Magic Number,System451.Communication.Dashboard.Controls,OnOffControl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\OnOffControl.cs,OnOffControl_Paint,The following statement contains a magic number: if (Value) {  	e.Graphics.FillEllipse (Brushes.DarkGreen' 1' 1' 23' 23);  	e.Graphics.FillEllipse (Brushes.ForestGreen' 3' 3' 19' 19);  	e.Graphics.FillEllipse (Brushes.LawnGreen' 6' 6' 13' 13);  }  else {  	e.Graphics.FillEllipse (Brushes.DarkRed' 1' 1' 23' 23);  	e.Graphics.FillEllipse (Brushes.Crimson' 3' 3' 19' 19);  	e.Graphics.FillEllipse (Brushes.Red' 6' 6' 13' 13);  }  
Magic Number,System451.Communication.Dashboard.Controls,OnOffControl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\OnOffControl.cs,OnOffControl_Paint,The following statement contains a magic number: if (Value) {  	e.Graphics.FillEllipse (Brushes.DarkGreen' 1' 1' 23' 23);  	e.Graphics.FillEllipse (Brushes.ForestGreen' 3' 3' 19' 19);  	e.Graphics.FillEllipse (Brushes.LawnGreen' 6' 6' 13' 13);  }  else {  	e.Graphics.FillEllipse (Brushes.DarkRed' 1' 1' 23' 23);  	e.Graphics.FillEllipse (Brushes.Crimson' 3' 3' 19' 19);  	e.Graphics.FillEllipse (Brushes.Red' 6' 6' 13' 13);  }  
Magic Number,System451.Communication.Dashboard.Controls,OnOffControl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\OnOffControl.cs,OnOffControl_Paint,The following statement contains a magic number: if (Value) {  	e.Graphics.FillEllipse (Brushes.DarkGreen' 1' 1' 23' 23);  	e.Graphics.FillEllipse (Brushes.ForestGreen' 3' 3' 19' 19);  	e.Graphics.FillEllipse (Brushes.LawnGreen' 6' 6' 13' 13);  }  else {  	e.Graphics.FillEllipse (Brushes.DarkRed' 1' 1' 23' 23);  	e.Graphics.FillEllipse (Brushes.Crimson' 3' 3' 19' 19);  	e.Graphics.FillEllipse (Brushes.Red' 6' 6' 13' 13);  }  
Magic Number,System451.Communication.Dashboard.Controls,OnOffControl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\OnOffControl.cs,OnOffControl_Paint,The following statement contains a magic number: if (Value) {  	e.Graphics.FillEllipse (Brushes.DarkGreen' 1' 1' 23' 23);  	e.Graphics.FillEllipse (Brushes.ForestGreen' 3' 3' 19' 19);  	e.Graphics.FillEllipse (Brushes.LawnGreen' 6' 6' 13' 13);  }  else {  	e.Graphics.FillEllipse (Brushes.DarkRed' 1' 1' 23' 23);  	e.Graphics.FillEllipse (Brushes.Crimson' 3' 3' 19' 19);  	e.Graphics.FillEllipse (Brushes.Red' 6' 6' 13' 13);  }  
Magic Number,System451.Communication.Dashboard.Controls,OnOffControl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\OnOffControl.cs,OnOffControl_Paint,The following statement contains a magic number: if (Value) {  	e.Graphics.FillEllipse (Brushes.DarkGreen' 1' 1' 23' 23);  	e.Graphics.FillEllipse (Brushes.ForestGreen' 3' 3' 19' 19);  	e.Graphics.FillEllipse (Brushes.LawnGreen' 6' 6' 13' 13);  }  else {  	e.Graphics.FillEllipse (Brushes.DarkRed' 1' 1' 23' 23);  	e.Graphics.FillEllipse (Brushes.Crimson' 3' 3' 19' 19);  	e.Graphics.FillEllipse (Brushes.Red' 6' 6' 13' 13);  }  
Magic Number,System451.Communication.Dashboard.Controls,OnOffControl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\OnOffControl.cs,OnOffControl_Paint,The following statement contains a magic number: if (Value) {  	e.Graphics.FillEllipse (Brushes.DarkGreen' 1' 1' 23' 23);  	e.Graphics.FillEllipse (Brushes.ForestGreen' 3' 3' 19' 19);  	e.Graphics.FillEllipse (Brushes.LawnGreen' 6' 6' 13' 13);  }  else {  	e.Graphics.FillEllipse (Brushes.DarkRed' 1' 1' 23' 23);  	e.Graphics.FillEllipse (Brushes.Crimson' 3' 3' 19' 19);  	e.Graphics.FillEllipse (Brushes.Red' 6' 6' 13' 13);  }  
Magic Number,System451.Communication.Dashboard.Controls,OnOffControl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\OnOffControl.cs,OnOffControl_Paint,The following statement contains a magic number: if (Value) {  	e.Graphics.FillEllipse (Brushes.DarkGreen' 1' 1' 23' 23);  	e.Graphics.FillEllipse (Brushes.ForestGreen' 3' 3' 19' 19);  	e.Graphics.FillEllipse (Brushes.LawnGreen' 6' 6' 13' 13);  }  else {  	e.Graphics.FillEllipse (Brushes.DarkRed' 1' 1' 23' 23);  	e.Graphics.FillEllipse (Brushes.Crimson' 3' 3' 19' 19);  	e.Graphics.FillEllipse (Brushes.Red' 6' 6' 13' 13);  }  
Magic Number,System451.Communication.Dashboard.Controls,OnOffControl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\OnOffControl.cs,OnOffControl_Paint,The following statement contains a magic number: if (Value) {  	e.Graphics.FillEllipse (Brushes.DarkGreen' 1' 1' 23' 23);  	e.Graphics.FillEllipse (Brushes.ForestGreen' 3' 3' 19' 19);  	e.Graphics.FillEllipse (Brushes.LawnGreen' 6' 6' 13' 13);  }  else {  	e.Graphics.FillEllipse (Brushes.DarkRed' 1' 1' 23' 23);  	e.Graphics.FillEllipse (Brushes.Crimson' 3' 3' 19' 19);  	e.Graphics.FillEllipse (Brushes.Red' 6' 6' 13' 13);  }  
Magic Number,System451.Communication.Dashboard.Controls,OnOffControl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\OnOffControl.cs,OnOffControl_Paint,The following statement contains a magic number: if (Value) {  	e.Graphics.FillEllipse (Brushes.DarkGreen' 1' 1' 23' 23);  	e.Graphics.FillEllipse (Brushes.ForestGreen' 3' 3' 19' 19);  	e.Graphics.FillEllipse (Brushes.LawnGreen' 6' 6' 13' 13);  }  else {  	e.Graphics.FillEllipse (Brushes.DarkRed' 1' 1' 23' 23);  	e.Graphics.FillEllipse (Brushes.Crimson' 3' 3' 19' 19);  	e.Graphics.FillEllipse (Brushes.Red' 6' 6' 13' 13);  }  
Magic Number,System451.Communication.Dashboard.Controls,OnOffControl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\OnOffControl.cs,OnOffControl_Paint,The following statement contains a magic number: if (Value) {  	e.Graphics.FillEllipse (Brushes.DarkGreen' 1' 1' 23' 23);  	e.Graphics.FillEllipse (Brushes.ForestGreen' 3' 3' 19' 19);  	e.Graphics.FillEllipse (Brushes.LawnGreen' 6' 6' 13' 13);  }  else {  	e.Graphics.FillEllipse (Brushes.DarkRed' 1' 1' 23' 23);  	e.Graphics.FillEllipse (Brushes.Crimson' 3' 3' 19' 19);  	e.Graphics.FillEllipse (Brushes.Red' 6' 6' 13' 13);  }  
Magic Number,System451.Communication.Dashboard.Controls,OnOffControl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\OnOffControl.cs,OnOffControl_Paint,The following statement contains a magic number: if (Value) {  	e.Graphics.FillEllipse (Brushes.DarkGreen' 1' 1' 23' 23);  	e.Graphics.FillEllipse (Brushes.ForestGreen' 3' 3' 19' 19);  	e.Graphics.FillEllipse (Brushes.LawnGreen' 6' 6' 13' 13);  }  else {  	e.Graphics.FillEllipse (Brushes.DarkRed' 1' 1' 23' 23);  	e.Graphics.FillEllipse (Brushes.Crimson' 3' 3' 19' 19);  	e.Graphics.FillEllipse (Brushes.Red' 6' 6' 13' 13);  }  
Magic Number,System451.Communication.Dashboard.Controls,OnOffControl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\OnOffControl.cs,OnOffControl_Paint,The following statement contains a magic number: if (Value) {  	e.Graphics.FillEllipse (Brushes.DarkGreen' 1' 1' 23' 23);  	e.Graphics.FillEllipse (Brushes.ForestGreen' 3' 3' 19' 19);  	e.Graphics.FillEllipse (Brushes.LawnGreen' 6' 6' 13' 13);  }  else {  	e.Graphics.FillEllipse (Brushes.DarkRed' 1' 1' 23' 23);  	e.Graphics.FillEllipse (Brushes.Crimson' 3' 3' 19' 19);  	e.Graphics.FillEllipse (Brushes.Red' 6' 6' 13' 13);  }  
Magic Number,System451.Communication.Dashboard.Controls,OnOffControl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\OnOffControl.cs,OnOffControl_Paint,The following statement contains a magic number: if (Value) {  	e.Graphics.FillEllipse (Brushes.DarkGreen' 1' 1' 23' 23);  	e.Graphics.FillEllipse (Brushes.ForestGreen' 3' 3' 19' 19);  	e.Graphics.FillEllipse (Brushes.LawnGreen' 6' 6' 13' 13);  }  else {  	e.Graphics.FillEllipse (Brushes.DarkRed' 1' 1' 23' 23);  	e.Graphics.FillEllipse (Brushes.Crimson' 3' 3' 19' 19);  	e.Graphics.FillEllipse (Brushes.Red' 6' 6' 13' 13);  }  
Magic Number,System451.Communication.Dashboard.Controls,OnOffControl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\OnOffControl.cs,OnOffControl_Paint,The following statement contains a magic number: if (Value) {  	e.Graphics.FillEllipse (Brushes.DarkGreen' 1' 1' 23' 23);  	e.Graphics.FillEllipse (Brushes.ForestGreen' 3' 3' 19' 19);  	e.Graphics.FillEllipse (Brushes.LawnGreen' 6' 6' 13' 13);  }  else {  	e.Graphics.FillEllipse (Brushes.DarkRed' 1' 1' 23' 23);  	e.Graphics.FillEllipse (Brushes.Crimson' 3' 3' 19' 19);  	e.Graphics.FillEllipse (Brushes.Red' 6' 6' 13' 13);  }  
Magic Number,System451.Communication.Dashboard.Controls,OnOffControl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\OnOffControl.cs,OnOffControl_Paint,The following statement contains a magic number: if (Value) {  	e.Graphics.FillEllipse (Brushes.DarkGreen' 1' 1' 23' 23);  	e.Graphics.FillEllipse (Brushes.ForestGreen' 3' 3' 19' 19);  	e.Graphics.FillEllipse (Brushes.LawnGreen' 6' 6' 13' 13);  }  else {  	e.Graphics.FillEllipse (Brushes.DarkRed' 1' 1' 23' 23);  	e.Graphics.FillEllipse (Brushes.Crimson' 3' 3' 19' 19);  	e.Graphics.FillEllipse (Brushes.Red' 6' 6' 13' 13);  }  
Magic Number,System451.Communication.Dashboard.Controls,OnOffControl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\OnOffControl.cs,OnOffControl_Paint,The following statement contains a magic number: if (Value) {  	e.Graphics.FillEllipse (Brushes.DarkGreen' 1' 1' 23' 23);  	e.Graphics.FillEllipse (Brushes.ForestGreen' 3' 3' 19' 19);  	e.Graphics.FillEllipse (Brushes.LawnGreen' 6' 6' 13' 13);  }  else {  	e.Graphics.FillEllipse (Brushes.DarkRed' 1' 1' 23' 23);  	e.Graphics.FillEllipse (Brushes.Crimson' 3' 3' 19' 19);  	e.Graphics.FillEllipse (Brushes.Red' 6' 6' 13' 13);  }  
Magic Number,System451.Communication.Dashboard.Controls,OnOffControl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\OnOffControl.cs,OnOffControl_Paint,The following statement contains a magic number: if (Value) {  	e.Graphics.FillEllipse (Brushes.DarkGreen' 1' 1' 23' 23);  	e.Graphics.FillEllipse (Brushes.ForestGreen' 3' 3' 19' 19);  	e.Graphics.FillEllipse (Brushes.LawnGreen' 6' 6' 13' 13);  }  else {  	e.Graphics.FillEllipse (Brushes.DarkRed' 1' 1' 23' 23);  	e.Graphics.FillEllipse (Brushes.Crimson' 3' 3' 19' 19);  	e.Graphics.FillEllipse (Brushes.Red' 6' 6' 13' 13);  }  
Magic Number,System451.Communication.Dashboard.Controls,OnOffControl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\OnOffControl.cs,OnOffControl_Paint,The following statement contains a magic number: if (Value) {  	e.Graphics.FillEllipse (Brushes.DarkGreen' 1' 1' 23' 23);  	e.Graphics.FillEllipse (Brushes.ForestGreen' 3' 3' 19' 19);  	e.Graphics.FillEllipse (Brushes.LawnGreen' 6' 6' 13' 13);  }  else {  	e.Graphics.FillEllipse (Brushes.DarkRed' 1' 1' 23' 23);  	e.Graphics.FillEllipse (Brushes.Crimson' 3' 3' 19' 19);  	e.Graphics.FillEllipse (Brushes.Red' 6' 6' 13' 13);  }  
Magic Number,System451.Communication.Dashboard.Controls,OnOffControl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\OnOffControl.cs,OnOffControl_Paint,The following statement contains a magic number: e.Graphics.FillEllipse (Brushes.DarkGreen' 1' 1' 23' 23);  
Magic Number,System451.Communication.Dashboard.Controls,OnOffControl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\OnOffControl.cs,OnOffControl_Paint,The following statement contains a magic number: e.Graphics.FillEllipse (Brushes.DarkGreen' 1' 1' 23' 23);  
Magic Number,System451.Communication.Dashboard.Controls,OnOffControl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\OnOffControl.cs,OnOffControl_Paint,The following statement contains a magic number: e.Graphics.FillEllipse (Brushes.ForestGreen' 3' 3' 19' 19);  
Magic Number,System451.Communication.Dashboard.Controls,OnOffControl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\OnOffControl.cs,OnOffControl_Paint,The following statement contains a magic number: e.Graphics.FillEllipse (Brushes.ForestGreen' 3' 3' 19' 19);  
Magic Number,System451.Communication.Dashboard.Controls,OnOffControl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\OnOffControl.cs,OnOffControl_Paint,The following statement contains a magic number: e.Graphics.FillEllipse (Brushes.ForestGreen' 3' 3' 19' 19);  
Magic Number,System451.Communication.Dashboard.Controls,OnOffControl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\OnOffControl.cs,OnOffControl_Paint,The following statement contains a magic number: e.Graphics.FillEllipse (Brushes.ForestGreen' 3' 3' 19' 19);  
Magic Number,System451.Communication.Dashboard.Controls,OnOffControl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\OnOffControl.cs,OnOffControl_Paint,The following statement contains a magic number: e.Graphics.FillEllipse (Brushes.LawnGreen' 6' 6' 13' 13);  
Magic Number,System451.Communication.Dashboard.Controls,OnOffControl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\OnOffControl.cs,OnOffControl_Paint,The following statement contains a magic number: e.Graphics.FillEllipse (Brushes.LawnGreen' 6' 6' 13' 13);  
Magic Number,System451.Communication.Dashboard.Controls,OnOffControl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\OnOffControl.cs,OnOffControl_Paint,The following statement contains a magic number: e.Graphics.FillEllipse (Brushes.LawnGreen' 6' 6' 13' 13);  
Magic Number,System451.Communication.Dashboard.Controls,OnOffControl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\OnOffControl.cs,OnOffControl_Paint,The following statement contains a magic number: e.Graphics.FillEllipse (Brushes.LawnGreen' 6' 6' 13' 13);  
Magic Number,System451.Communication.Dashboard.Controls,OnOffControl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\OnOffControl.cs,OnOffControl_Paint,The following statement contains a magic number: e.Graphics.FillEllipse (Brushes.DarkRed' 1' 1' 23' 23);  
Magic Number,System451.Communication.Dashboard.Controls,OnOffControl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\OnOffControl.cs,OnOffControl_Paint,The following statement contains a magic number: e.Graphics.FillEllipse (Brushes.DarkRed' 1' 1' 23' 23);  
Magic Number,System451.Communication.Dashboard.Controls,OnOffControl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\OnOffControl.cs,OnOffControl_Paint,The following statement contains a magic number: e.Graphics.FillEllipse (Brushes.Crimson' 3' 3' 19' 19);  
Magic Number,System451.Communication.Dashboard.Controls,OnOffControl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\OnOffControl.cs,OnOffControl_Paint,The following statement contains a magic number: e.Graphics.FillEllipse (Brushes.Crimson' 3' 3' 19' 19);  
Magic Number,System451.Communication.Dashboard.Controls,OnOffControl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\OnOffControl.cs,OnOffControl_Paint,The following statement contains a magic number: e.Graphics.FillEllipse (Brushes.Crimson' 3' 3' 19' 19);  
Magic Number,System451.Communication.Dashboard.Controls,OnOffControl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\OnOffControl.cs,OnOffControl_Paint,The following statement contains a magic number: e.Graphics.FillEllipse (Brushes.Crimson' 3' 3' 19' 19);  
Magic Number,System451.Communication.Dashboard.Controls,OnOffControl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\OnOffControl.cs,OnOffControl_Paint,The following statement contains a magic number: e.Graphics.FillEllipse (Brushes.Red' 6' 6' 13' 13);  
Magic Number,System451.Communication.Dashboard.Controls,OnOffControl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\OnOffControl.cs,OnOffControl_Paint,The following statement contains a magic number: e.Graphics.FillEllipse (Brushes.Red' 6' 6' 13' 13);  
Magic Number,System451.Communication.Dashboard.Controls,OnOffControl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\OnOffControl.cs,OnOffControl_Paint,The following statement contains a magic number: e.Graphics.FillEllipse (Brushes.Red' 6' 6' 13' 13);  
Magic Number,System451.Communication.Dashboard.Controls,OnOffControl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\OnOffControl.cs,OnOffControl_Paint,The following statement contains a magic number: e.Graphics.FillEllipse (Brushes.Red' 6' 6' 13' 13);  
Magic Number,System451.Communication.Dashboard.Controls,SpikeControl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\OnOffControl.cs,SpikeControl_Paint,The following statement contains a magic number: if (Value == SpikePositions.Forward) {  	e.Graphics.FillRectangle (Brushes.DarkGreen' 1 - .5f' 1 - .5f' 23' 23);  	e.Graphics.FillRectangle (Brushes.ForestGreen' 3 - .5f' 3 - .5f' 19' 19);  	e.Graphics.FillRectangle (Brushes.LawnGreen' 6 - .5f' 6 - .5f' 13' 13);  }  else if (Value == SpikePositions.Reverse) {  	e.Graphics.FillRectangle (Brushes.DarkRed' 1 - .5f' 1 - .5f' 23' 23);  	e.Graphics.FillRectangle (Brushes.Crimson' 3 - .5f' 3 - .5f' 19' 19);  	e.Graphics.FillRectangle (Brushes.Red' 6 - .5f' 6 - .5f' 13' 13);  }  else {  	e.Graphics.FillRectangle (Brushes.Black' 1 - .5f' 1 - .5f' 23' 23);  }  
Magic Number,System451.Communication.Dashboard.Controls,SpikeControl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\OnOffControl.cs,SpikeControl_Paint,The following statement contains a magic number: if (Value == SpikePositions.Forward) {  	e.Graphics.FillRectangle (Brushes.DarkGreen' 1 - .5f' 1 - .5f' 23' 23);  	e.Graphics.FillRectangle (Brushes.ForestGreen' 3 - .5f' 3 - .5f' 19' 19);  	e.Graphics.FillRectangle (Brushes.LawnGreen' 6 - .5f' 6 - .5f' 13' 13);  }  else if (Value == SpikePositions.Reverse) {  	e.Graphics.FillRectangle (Brushes.DarkRed' 1 - .5f' 1 - .5f' 23' 23);  	e.Graphics.FillRectangle (Brushes.Crimson' 3 - .5f' 3 - .5f' 19' 19);  	e.Graphics.FillRectangle (Brushes.Red' 6 - .5f' 6 - .5f' 13' 13);  }  else {  	e.Graphics.FillRectangle (Brushes.Black' 1 - .5f' 1 - .5f' 23' 23);  }  
Magic Number,System451.Communication.Dashboard.Controls,SpikeControl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\OnOffControl.cs,SpikeControl_Paint,The following statement contains a magic number: if (Value == SpikePositions.Forward) {  	e.Graphics.FillRectangle (Brushes.DarkGreen' 1 - .5f' 1 - .5f' 23' 23);  	e.Graphics.FillRectangle (Brushes.ForestGreen' 3 - .5f' 3 - .5f' 19' 19);  	e.Graphics.FillRectangle (Brushes.LawnGreen' 6 - .5f' 6 - .5f' 13' 13);  }  else if (Value == SpikePositions.Reverse) {  	e.Graphics.FillRectangle (Brushes.DarkRed' 1 - .5f' 1 - .5f' 23' 23);  	e.Graphics.FillRectangle (Brushes.Crimson' 3 - .5f' 3 - .5f' 19' 19);  	e.Graphics.FillRectangle (Brushes.Red' 6 - .5f' 6 - .5f' 13' 13);  }  else {  	e.Graphics.FillRectangle (Brushes.Black' 1 - .5f' 1 - .5f' 23' 23);  }  
Magic Number,System451.Communication.Dashboard.Controls,SpikeControl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\OnOffControl.cs,SpikeControl_Paint,The following statement contains a magic number: if (Value == SpikePositions.Forward) {  	e.Graphics.FillRectangle (Brushes.DarkGreen' 1 - .5f' 1 - .5f' 23' 23);  	e.Graphics.FillRectangle (Brushes.ForestGreen' 3 - .5f' 3 - .5f' 19' 19);  	e.Graphics.FillRectangle (Brushes.LawnGreen' 6 - .5f' 6 - .5f' 13' 13);  }  else if (Value == SpikePositions.Reverse) {  	e.Graphics.FillRectangle (Brushes.DarkRed' 1 - .5f' 1 - .5f' 23' 23);  	e.Graphics.FillRectangle (Brushes.Crimson' 3 - .5f' 3 - .5f' 19' 19);  	e.Graphics.FillRectangle (Brushes.Red' 6 - .5f' 6 - .5f' 13' 13);  }  else {  	e.Graphics.FillRectangle (Brushes.Black' 1 - .5f' 1 - .5f' 23' 23);  }  
Magic Number,System451.Communication.Dashboard.Controls,SpikeControl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\OnOffControl.cs,SpikeControl_Paint,The following statement contains a magic number: if (Value == SpikePositions.Forward) {  	e.Graphics.FillRectangle (Brushes.DarkGreen' 1 - .5f' 1 - .5f' 23' 23);  	e.Graphics.FillRectangle (Brushes.ForestGreen' 3 - .5f' 3 - .5f' 19' 19);  	e.Graphics.FillRectangle (Brushes.LawnGreen' 6 - .5f' 6 - .5f' 13' 13);  }  else if (Value == SpikePositions.Reverse) {  	e.Graphics.FillRectangle (Brushes.DarkRed' 1 - .5f' 1 - .5f' 23' 23);  	e.Graphics.FillRectangle (Brushes.Crimson' 3 - .5f' 3 - .5f' 19' 19);  	e.Graphics.FillRectangle (Brushes.Red' 6 - .5f' 6 - .5f' 13' 13);  }  else {  	e.Graphics.FillRectangle (Brushes.Black' 1 - .5f' 1 - .5f' 23' 23);  }  
Magic Number,System451.Communication.Dashboard.Controls,SpikeControl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\OnOffControl.cs,SpikeControl_Paint,The following statement contains a magic number: if (Value == SpikePositions.Forward) {  	e.Graphics.FillRectangle (Brushes.DarkGreen' 1 - .5f' 1 - .5f' 23' 23);  	e.Graphics.FillRectangle (Brushes.ForestGreen' 3 - .5f' 3 - .5f' 19' 19);  	e.Graphics.FillRectangle (Brushes.LawnGreen' 6 - .5f' 6 - .5f' 13' 13);  }  else if (Value == SpikePositions.Reverse) {  	e.Graphics.FillRectangle (Brushes.DarkRed' 1 - .5f' 1 - .5f' 23' 23);  	e.Graphics.FillRectangle (Brushes.Crimson' 3 - .5f' 3 - .5f' 19' 19);  	e.Graphics.FillRectangle (Brushes.Red' 6 - .5f' 6 - .5f' 13' 13);  }  else {  	e.Graphics.FillRectangle (Brushes.Black' 1 - .5f' 1 - .5f' 23' 23);  }  
Magic Number,System451.Communication.Dashboard.Controls,SpikeControl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\OnOffControl.cs,SpikeControl_Paint,The following statement contains a magic number: if (Value == SpikePositions.Forward) {  	e.Graphics.FillRectangle (Brushes.DarkGreen' 1 - .5f' 1 - .5f' 23' 23);  	e.Graphics.FillRectangle (Brushes.ForestGreen' 3 - .5f' 3 - .5f' 19' 19);  	e.Graphics.FillRectangle (Brushes.LawnGreen' 6 - .5f' 6 - .5f' 13' 13);  }  else if (Value == SpikePositions.Reverse) {  	e.Graphics.FillRectangle (Brushes.DarkRed' 1 - .5f' 1 - .5f' 23' 23);  	e.Graphics.FillRectangle (Brushes.Crimson' 3 - .5f' 3 - .5f' 19' 19);  	e.Graphics.FillRectangle (Brushes.Red' 6 - .5f' 6 - .5f' 13' 13);  }  else {  	e.Graphics.FillRectangle (Brushes.Black' 1 - .5f' 1 - .5f' 23' 23);  }  
Magic Number,System451.Communication.Dashboard.Controls,SpikeControl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\OnOffControl.cs,SpikeControl_Paint,The following statement contains a magic number: if (Value == SpikePositions.Forward) {  	e.Graphics.FillRectangle (Brushes.DarkGreen' 1 - .5f' 1 - .5f' 23' 23);  	e.Graphics.FillRectangle (Brushes.ForestGreen' 3 - .5f' 3 - .5f' 19' 19);  	e.Graphics.FillRectangle (Brushes.LawnGreen' 6 - .5f' 6 - .5f' 13' 13);  }  else if (Value == SpikePositions.Reverse) {  	e.Graphics.FillRectangle (Brushes.DarkRed' 1 - .5f' 1 - .5f' 23' 23);  	e.Graphics.FillRectangle (Brushes.Crimson' 3 - .5f' 3 - .5f' 19' 19);  	e.Graphics.FillRectangle (Brushes.Red' 6 - .5f' 6 - .5f' 13' 13);  }  else {  	e.Graphics.FillRectangle (Brushes.Black' 1 - .5f' 1 - .5f' 23' 23);  }  
Magic Number,System451.Communication.Dashboard.Controls,SpikeControl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\OnOffControl.cs,SpikeControl_Paint,The following statement contains a magic number: if (Value == SpikePositions.Forward) {  	e.Graphics.FillRectangle (Brushes.DarkGreen' 1 - .5f' 1 - .5f' 23' 23);  	e.Graphics.FillRectangle (Brushes.ForestGreen' 3 - .5f' 3 - .5f' 19' 19);  	e.Graphics.FillRectangle (Brushes.LawnGreen' 6 - .5f' 6 - .5f' 13' 13);  }  else if (Value == SpikePositions.Reverse) {  	e.Graphics.FillRectangle (Brushes.DarkRed' 1 - .5f' 1 - .5f' 23' 23);  	e.Graphics.FillRectangle (Brushes.Crimson' 3 - .5f' 3 - .5f' 19' 19);  	e.Graphics.FillRectangle (Brushes.Red' 6 - .5f' 6 - .5f' 13' 13);  }  else {  	e.Graphics.FillRectangle (Brushes.Black' 1 - .5f' 1 - .5f' 23' 23);  }  
Magic Number,System451.Communication.Dashboard.Controls,SpikeControl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\OnOffControl.cs,SpikeControl_Paint,The following statement contains a magic number: if (Value == SpikePositions.Forward) {  	e.Graphics.FillRectangle (Brushes.DarkGreen' 1 - .5f' 1 - .5f' 23' 23);  	e.Graphics.FillRectangle (Brushes.ForestGreen' 3 - .5f' 3 - .5f' 19' 19);  	e.Graphics.FillRectangle (Brushes.LawnGreen' 6 - .5f' 6 - .5f' 13' 13);  }  else if (Value == SpikePositions.Reverse) {  	e.Graphics.FillRectangle (Brushes.DarkRed' 1 - .5f' 1 - .5f' 23' 23);  	e.Graphics.FillRectangle (Brushes.Crimson' 3 - .5f' 3 - .5f' 19' 19);  	e.Graphics.FillRectangle (Brushes.Red' 6 - .5f' 6 - .5f' 13' 13);  }  else {  	e.Graphics.FillRectangle (Brushes.Black' 1 - .5f' 1 - .5f' 23' 23);  }  
Magic Number,System451.Communication.Dashboard.Controls,SpikeControl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\OnOffControl.cs,SpikeControl_Paint,The following statement contains a magic number: if (Value == SpikePositions.Forward) {  	e.Graphics.FillRectangle (Brushes.DarkGreen' 1 - .5f' 1 - .5f' 23' 23);  	e.Graphics.FillRectangle (Brushes.ForestGreen' 3 - .5f' 3 - .5f' 19' 19);  	e.Graphics.FillRectangle (Brushes.LawnGreen' 6 - .5f' 6 - .5f' 13' 13);  }  else if (Value == SpikePositions.Reverse) {  	e.Graphics.FillRectangle (Brushes.DarkRed' 1 - .5f' 1 - .5f' 23' 23);  	e.Graphics.FillRectangle (Brushes.Crimson' 3 - .5f' 3 - .5f' 19' 19);  	e.Graphics.FillRectangle (Brushes.Red' 6 - .5f' 6 - .5f' 13' 13);  }  else {  	e.Graphics.FillRectangle (Brushes.Black' 1 - .5f' 1 - .5f' 23' 23);  }  
Magic Number,System451.Communication.Dashboard.Controls,SpikeControl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\OnOffControl.cs,SpikeControl_Paint,The following statement contains a magic number: if (Value == SpikePositions.Forward) {  	e.Graphics.FillRectangle (Brushes.DarkGreen' 1 - .5f' 1 - .5f' 23' 23);  	e.Graphics.FillRectangle (Brushes.ForestGreen' 3 - .5f' 3 - .5f' 19' 19);  	e.Graphics.FillRectangle (Brushes.LawnGreen' 6 - .5f' 6 - .5f' 13' 13);  }  else if (Value == SpikePositions.Reverse) {  	e.Graphics.FillRectangle (Brushes.DarkRed' 1 - .5f' 1 - .5f' 23' 23);  	e.Graphics.FillRectangle (Brushes.Crimson' 3 - .5f' 3 - .5f' 19' 19);  	e.Graphics.FillRectangle (Brushes.Red' 6 - .5f' 6 - .5f' 13' 13);  }  else {  	e.Graphics.FillRectangle (Brushes.Black' 1 - .5f' 1 - .5f' 23' 23);  }  
Magic Number,System451.Communication.Dashboard.Controls,SpikeControl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\OnOffControl.cs,SpikeControl_Paint,The following statement contains a magic number: if (Value == SpikePositions.Forward) {  	e.Graphics.FillRectangle (Brushes.DarkGreen' 1 - .5f' 1 - .5f' 23' 23);  	e.Graphics.FillRectangle (Brushes.ForestGreen' 3 - .5f' 3 - .5f' 19' 19);  	e.Graphics.FillRectangle (Brushes.LawnGreen' 6 - .5f' 6 - .5f' 13' 13);  }  else if (Value == SpikePositions.Reverse) {  	e.Graphics.FillRectangle (Brushes.DarkRed' 1 - .5f' 1 - .5f' 23' 23);  	e.Graphics.FillRectangle (Brushes.Crimson' 3 - .5f' 3 - .5f' 19' 19);  	e.Graphics.FillRectangle (Brushes.Red' 6 - .5f' 6 - .5f' 13' 13);  }  else {  	e.Graphics.FillRectangle (Brushes.Black' 1 - .5f' 1 - .5f' 23' 23);  }  
Magic Number,System451.Communication.Dashboard.Controls,SpikeControl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\OnOffControl.cs,SpikeControl_Paint,The following statement contains a magic number: if (Value == SpikePositions.Forward) {  	e.Graphics.FillRectangle (Brushes.DarkGreen' 1 - .5f' 1 - .5f' 23' 23);  	e.Graphics.FillRectangle (Brushes.ForestGreen' 3 - .5f' 3 - .5f' 19' 19);  	e.Graphics.FillRectangle (Brushes.LawnGreen' 6 - .5f' 6 - .5f' 13' 13);  }  else if (Value == SpikePositions.Reverse) {  	e.Graphics.FillRectangle (Brushes.DarkRed' 1 - .5f' 1 - .5f' 23' 23);  	e.Graphics.FillRectangle (Brushes.Crimson' 3 - .5f' 3 - .5f' 19' 19);  	e.Graphics.FillRectangle (Brushes.Red' 6 - .5f' 6 - .5f' 13' 13);  }  else {  	e.Graphics.FillRectangle (Brushes.Black' 1 - .5f' 1 - .5f' 23' 23);  }  
Magic Number,System451.Communication.Dashboard.Controls,SpikeControl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\OnOffControl.cs,SpikeControl_Paint,The following statement contains a magic number: if (Value == SpikePositions.Forward) {  	e.Graphics.FillRectangle (Brushes.DarkGreen' 1 - .5f' 1 - .5f' 23' 23);  	e.Graphics.FillRectangle (Brushes.ForestGreen' 3 - .5f' 3 - .5f' 19' 19);  	e.Graphics.FillRectangle (Brushes.LawnGreen' 6 - .5f' 6 - .5f' 13' 13);  }  else if (Value == SpikePositions.Reverse) {  	e.Graphics.FillRectangle (Brushes.DarkRed' 1 - .5f' 1 - .5f' 23' 23);  	e.Graphics.FillRectangle (Brushes.Crimson' 3 - .5f' 3 - .5f' 19' 19);  	e.Graphics.FillRectangle (Brushes.Red' 6 - .5f' 6 - .5f' 13' 13);  }  else {  	e.Graphics.FillRectangle (Brushes.Black' 1 - .5f' 1 - .5f' 23' 23);  }  
Magic Number,System451.Communication.Dashboard.Controls,SpikeControl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\OnOffControl.cs,SpikeControl_Paint,The following statement contains a magic number: if (Value == SpikePositions.Forward) {  	e.Graphics.FillRectangle (Brushes.DarkGreen' 1 - .5f' 1 - .5f' 23' 23);  	e.Graphics.FillRectangle (Brushes.ForestGreen' 3 - .5f' 3 - .5f' 19' 19);  	e.Graphics.FillRectangle (Brushes.LawnGreen' 6 - .5f' 6 - .5f' 13' 13);  }  else if (Value == SpikePositions.Reverse) {  	e.Graphics.FillRectangle (Brushes.DarkRed' 1 - .5f' 1 - .5f' 23' 23);  	e.Graphics.FillRectangle (Brushes.Crimson' 3 - .5f' 3 - .5f' 19' 19);  	e.Graphics.FillRectangle (Brushes.Red' 6 - .5f' 6 - .5f' 13' 13);  }  else {  	e.Graphics.FillRectangle (Brushes.Black' 1 - .5f' 1 - .5f' 23' 23);  }  
Magic Number,System451.Communication.Dashboard.Controls,SpikeControl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\OnOffControl.cs,SpikeControl_Paint,The following statement contains a magic number: if (Value == SpikePositions.Forward) {  	e.Graphics.FillRectangle (Brushes.DarkGreen' 1 - .5f' 1 - .5f' 23' 23);  	e.Graphics.FillRectangle (Brushes.ForestGreen' 3 - .5f' 3 - .5f' 19' 19);  	e.Graphics.FillRectangle (Brushes.LawnGreen' 6 - .5f' 6 - .5f' 13' 13);  }  else if (Value == SpikePositions.Reverse) {  	e.Graphics.FillRectangle (Brushes.DarkRed' 1 - .5f' 1 - .5f' 23' 23);  	e.Graphics.FillRectangle (Brushes.Crimson' 3 - .5f' 3 - .5f' 19' 19);  	e.Graphics.FillRectangle (Brushes.Red' 6 - .5f' 6 - .5f' 13' 13);  }  else {  	e.Graphics.FillRectangle (Brushes.Black' 1 - .5f' 1 - .5f' 23' 23);  }  
Magic Number,System451.Communication.Dashboard.Controls,SpikeControl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\OnOffControl.cs,SpikeControl_Paint,The following statement contains a magic number: if (Value == SpikePositions.Forward) {  	e.Graphics.FillRectangle (Brushes.DarkGreen' 1 - .5f' 1 - .5f' 23' 23);  	e.Graphics.FillRectangle (Brushes.ForestGreen' 3 - .5f' 3 - .5f' 19' 19);  	e.Graphics.FillRectangle (Brushes.LawnGreen' 6 - .5f' 6 - .5f' 13' 13);  }  else if (Value == SpikePositions.Reverse) {  	e.Graphics.FillRectangle (Brushes.DarkRed' 1 - .5f' 1 - .5f' 23' 23);  	e.Graphics.FillRectangle (Brushes.Crimson' 3 - .5f' 3 - .5f' 19' 19);  	e.Graphics.FillRectangle (Brushes.Red' 6 - .5f' 6 - .5f' 13' 13);  }  else {  	e.Graphics.FillRectangle (Brushes.Black' 1 - .5f' 1 - .5f' 23' 23);  }  
Magic Number,System451.Communication.Dashboard.Controls,SpikeControl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\OnOffControl.cs,SpikeControl_Paint,The following statement contains a magic number: if (Value == SpikePositions.Forward) {  	e.Graphics.FillRectangle (Brushes.DarkGreen' 1 - .5f' 1 - .5f' 23' 23);  	e.Graphics.FillRectangle (Brushes.ForestGreen' 3 - .5f' 3 - .5f' 19' 19);  	e.Graphics.FillRectangle (Brushes.LawnGreen' 6 - .5f' 6 - .5f' 13' 13);  }  else if (Value == SpikePositions.Reverse) {  	e.Graphics.FillRectangle (Brushes.DarkRed' 1 - .5f' 1 - .5f' 23' 23);  	e.Graphics.FillRectangle (Brushes.Crimson' 3 - .5f' 3 - .5f' 19' 19);  	e.Graphics.FillRectangle (Brushes.Red' 6 - .5f' 6 - .5f' 13' 13);  }  else {  	e.Graphics.FillRectangle (Brushes.Black' 1 - .5f' 1 - .5f' 23' 23);  }  
Magic Number,System451.Communication.Dashboard.Controls,SpikeControl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\OnOffControl.cs,SpikeControl_Paint,The following statement contains a magic number: if (Value == SpikePositions.Forward) {  	e.Graphics.FillRectangle (Brushes.DarkGreen' 1 - .5f' 1 - .5f' 23' 23);  	e.Graphics.FillRectangle (Brushes.ForestGreen' 3 - .5f' 3 - .5f' 19' 19);  	e.Graphics.FillRectangle (Brushes.LawnGreen' 6 - .5f' 6 - .5f' 13' 13);  }  else if (Value == SpikePositions.Reverse) {  	e.Graphics.FillRectangle (Brushes.DarkRed' 1 - .5f' 1 - .5f' 23' 23);  	e.Graphics.FillRectangle (Brushes.Crimson' 3 - .5f' 3 - .5f' 19' 19);  	e.Graphics.FillRectangle (Brushes.Red' 6 - .5f' 6 - .5f' 13' 13);  }  else {  	e.Graphics.FillRectangle (Brushes.Black' 1 - .5f' 1 - .5f' 23' 23);  }  
Magic Number,System451.Communication.Dashboard.Controls,SpikeControl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\OnOffControl.cs,SpikeControl_Paint,The following statement contains a magic number: if (Value == SpikePositions.Forward) {  	e.Graphics.FillRectangle (Brushes.DarkGreen' 1 - .5f' 1 - .5f' 23' 23);  	e.Graphics.FillRectangle (Brushes.ForestGreen' 3 - .5f' 3 - .5f' 19' 19);  	e.Graphics.FillRectangle (Brushes.LawnGreen' 6 - .5f' 6 - .5f' 13' 13);  }  else if (Value == SpikePositions.Reverse) {  	e.Graphics.FillRectangle (Brushes.DarkRed' 1 - .5f' 1 - .5f' 23' 23);  	e.Graphics.FillRectangle (Brushes.Crimson' 3 - .5f' 3 - .5f' 19' 19);  	e.Graphics.FillRectangle (Brushes.Red' 6 - .5f' 6 - .5f' 13' 13);  }  else {  	e.Graphics.FillRectangle (Brushes.Black' 1 - .5f' 1 - .5f' 23' 23);  }  
Magic Number,System451.Communication.Dashboard.Controls,SpikeControl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\OnOffControl.cs,SpikeControl_Paint,The following statement contains a magic number: if (Value == SpikePositions.Forward) {  	e.Graphics.FillRectangle (Brushes.DarkGreen' 1 - .5f' 1 - .5f' 23' 23);  	e.Graphics.FillRectangle (Brushes.ForestGreen' 3 - .5f' 3 - .5f' 19' 19);  	e.Graphics.FillRectangle (Brushes.LawnGreen' 6 - .5f' 6 - .5f' 13' 13);  }  else if (Value == SpikePositions.Reverse) {  	e.Graphics.FillRectangle (Brushes.DarkRed' 1 - .5f' 1 - .5f' 23' 23);  	e.Graphics.FillRectangle (Brushes.Crimson' 3 - .5f' 3 - .5f' 19' 19);  	e.Graphics.FillRectangle (Brushes.Red' 6 - .5f' 6 - .5f' 13' 13);  }  else {  	e.Graphics.FillRectangle (Brushes.Black' 1 - .5f' 1 - .5f' 23' 23);  }  
Magic Number,System451.Communication.Dashboard.Controls,SpikeControl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\OnOffControl.cs,SpikeControl_Paint,The following statement contains a magic number: e.Graphics.FillRectangle (Brushes.DarkGreen' 1 - .5f' 1 - .5f' 23' 23);  
Magic Number,System451.Communication.Dashboard.Controls,SpikeControl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\OnOffControl.cs,SpikeControl_Paint,The following statement contains a magic number: e.Graphics.FillRectangle (Brushes.DarkGreen' 1 - .5f' 1 - .5f' 23' 23);  
Magic Number,System451.Communication.Dashboard.Controls,SpikeControl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\OnOffControl.cs,SpikeControl_Paint,The following statement contains a magic number: e.Graphics.FillRectangle (Brushes.ForestGreen' 3 - .5f' 3 - .5f' 19' 19);  
Magic Number,System451.Communication.Dashboard.Controls,SpikeControl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\OnOffControl.cs,SpikeControl_Paint,The following statement contains a magic number: e.Graphics.FillRectangle (Brushes.ForestGreen' 3 - .5f' 3 - .5f' 19' 19);  
Magic Number,System451.Communication.Dashboard.Controls,SpikeControl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\OnOffControl.cs,SpikeControl_Paint,The following statement contains a magic number: e.Graphics.FillRectangle (Brushes.ForestGreen' 3 - .5f' 3 - .5f' 19' 19);  
Magic Number,System451.Communication.Dashboard.Controls,SpikeControl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\OnOffControl.cs,SpikeControl_Paint,The following statement contains a magic number: e.Graphics.FillRectangle (Brushes.ForestGreen' 3 - .5f' 3 - .5f' 19' 19);  
Magic Number,System451.Communication.Dashboard.Controls,SpikeControl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\OnOffControl.cs,SpikeControl_Paint,The following statement contains a magic number: e.Graphics.FillRectangle (Brushes.LawnGreen' 6 - .5f' 6 - .5f' 13' 13);  
Magic Number,System451.Communication.Dashboard.Controls,SpikeControl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\OnOffControl.cs,SpikeControl_Paint,The following statement contains a magic number: e.Graphics.FillRectangle (Brushes.LawnGreen' 6 - .5f' 6 - .5f' 13' 13);  
Magic Number,System451.Communication.Dashboard.Controls,SpikeControl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\OnOffControl.cs,SpikeControl_Paint,The following statement contains a magic number: e.Graphics.FillRectangle (Brushes.LawnGreen' 6 - .5f' 6 - .5f' 13' 13);  
Magic Number,System451.Communication.Dashboard.Controls,SpikeControl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\OnOffControl.cs,SpikeControl_Paint,The following statement contains a magic number: e.Graphics.FillRectangle (Brushes.LawnGreen' 6 - .5f' 6 - .5f' 13' 13);  
Magic Number,System451.Communication.Dashboard.Controls,SpikeControl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\OnOffControl.cs,SpikeControl_Paint,The following statement contains a magic number: if (Value == SpikePositions.Reverse) {  	e.Graphics.FillRectangle (Brushes.DarkRed' 1 - .5f' 1 - .5f' 23' 23);  	e.Graphics.FillRectangle (Brushes.Crimson' 3 - .5f' 3 - .5f' 19' 19);  	e.Graphics.FillRectangle (Brushes.Red' 6 - .5f' 6 - .5f' 13' 13);  }  else {  	e.Graphics.FillRectangle (Brushes.Black' 1 - .5f' 1 - .5f' 23' 23);  }  
Magic Number,System451.Communication.Dashboard.Controls,SpikeControl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\OnOffControl.cs,SpikeControl_Paint,The following statement contains a magic number: if (Value == SpikePositions.Reverse) {  	e.Graphics.FillRectangle (Brushes.DarkRed' 1 - .5f' 1 - .5f' 23' 23);  	e.Graphics.FillRectangle (Brushes.Crimson' 3 - .5f' 3 - .5f' 19' 19);  	e.Graphics.FillRectangle (Brushes.Red' 6 - .5f' 6 - .5f' 13' 13);  }  else {  	e.Graphics.FillRectangle (Brushes.Black' 1 - .5f' 1 - .5f' 23' 23);  }  
Magic Number,System451.Communication.Dashboard.Controls,SpikeControl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\OnOffControl.cs,SpikeControl_Paint,The following statement contains a magic number: if (Value == SpikePositions.Reverse) {  	e.Graphics.FillRectangle (Brushes.DarkRed' 1 - .5f' 1 - .5f' 23' 23);  	e.Graphics.FillRectangle (Brushes.Crimson' 3 - .5f' 3 - .5f' 19' 19);  	e.Graphics.FillRectangle (Brushes.Red' 6 - .5f' 6 - .5f' 13' 13);  }  else {  	e.Graphics.FillRectangle (Brushes.Black' 1 - .5f' 1 - .5f' 23' 23);  }  
Magic Number,System451.Communication.Dashboard.Controls,SpikeControl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\OnOffControl.cs,SpikeControl_Paint,The following statement contains a magic number: if (Value == SpikePositions.Reverse) {  	e.Graphics.FillRectangle (Brushes.DarkRed' 1 - .5f' 1 - .5f' 23' 23);  	e.Graphics.FillRectangle (Brushes.Crimson' 3 - .5f' 3 - .5f' 19' 19);  	e.Graphics.FillRectangle (Brushes.Red' 6 - .5f' 6 - .5f' 13' 13);  }  else {  	e.Graphics.FillRectangle (Brushes.Black' 1 - .5f' 1 - .5f' 23' 23);  }  
Magic Number,System451.Communication.Dashboard.Controls,SpikeControl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\OnOffControl.cs,SpikeControl_Paint,The following statement contains a magic number: if (Value == SpikePositions.Reverse) {  	e.Graphics.FillRectangle (Brushes.DarkRed' 1 - .5f' 1 - .5f' 23' 23);  	e.Graphics.FillRectangle (Brushes.Crimson' 3 - .5f' 3 - .5f' 19' 19);  	e.Graphics.FillRectangle (Brushes.Red' 6 - .5f' 6 - .5f' 13' 13);  }  else {  	e.Graphics.FillRectangle (Brushes.Black' 1 - .5f' 1 - .5f' 23' 23);  }  
Magic Number,System451.Communication.Dashboard.Controls,SpikeControl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\OnOffControl.cs,SpikeControl_Paint,The following statement contains a magic number: if (Value == SpikePositions.Reverse) {  	e.Graphics.FillRectangle (Brushes.DarkRed' 1 - .5f' 1 - .5f' 23' 23);  	e.Graphics.FillRectangle (Brushes.Crimson' 3 - .5f' 3 - .5f' 19' 19);  	e.Graphics.FillRectangle (Brushes.Red' 6 - .5f' 6 - .5f' 13' 13);  }  else {  	e.Graphics.FillRectangle (Brushes.Black' 1 - .5f' 1 - .5f' 23' 23);  }  
Magic Number,System451.Communication.Dashboard.Controls,SpikeControl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\OnOffControl.cs,SpikeControl_Paint,The following statement contains a magic number: if (Value == SpikePositions.Reverse) {  	e.Graphics.FillRectangle (Brushes.DarkRed' 1 - .5f' 1 - .5f' 23' 23);  	e.Graphics.FillRectangle (Brushes.Crimson' 3 - .5f' 3 - .5f' 19' 19);  	e.Graphics.FillRectangle (Brushes.Red' 6 - .5f' 6 - .5f' 13' 13);  }  else {  	e.Graphics.FillRectangle (Brushes.Black' 1 - .5f' 1 - .5f' 23' 23);  }  
Magic Number,System451.Communication.Dashboard.Controls,SpikeControl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\OnOffControl.cs,SpikeControl_Paint,The following statement contains a magic number: if (Value == SpikePositions.Reverse) {  	e.Graphics.FillRectangle (Brushes.DarkRed' 1 - .5f' 1 - .5f' 23' 23);  	e.Graphics.FillRectangle (Brushes.Crimson' 3 - .5f' 3 - .5f' 19' 19);  	e.Graphics.FillRectangle (Brushes.Red' 6 - .5f' 6 - .5f' 13' 13);  }  else {  	e.Graphics.FillRectangle (Brushes.Black' 1 - .5f' 1 - .5f' 23' 23);  }  
Magic Number,System451.Communication.Dashboard.Controls,SpikeControl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\OnOffControl.cs,SpikeControl_Paint,The following statement contains a magic number: if (Value == SpikePositions.Reverse) {  	e.Graphics.FillRectangle (Brushes.DarkRed' 1 - .5f' 1 - .5f' 23' 23);  	e.Graphics.FillRectangle (Brushes.Crimson' 3 - .5f' 3 - .5f' 19' 19);  	e.Graphics.FillRectangle (Brushes.Red' 6 - .5f' 6 - .5f' 13' 13);  }  else {  	e.Graphics.FillRectangle (Brushes.Black' 1 - .5f' 1 - .5f' 23' 23);  }  
Magic Number,System451.Communication.Dashboard.Controls,SpikeControl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\OnOffControl.cs,SpikeControl_Paint,The following statement contains a magic number: if (Value == SpikePositions.Reverse) {  	e.Graphics.FillRectangle (Brushes.DarkRed' 1 - .5f' 1 - .5f' 23' 23);  	e.Graphics.FillRectangle (Brushes.Crimson' 3 - .5f' 3 - .5f' 19' 19);  	e.Graphics.FillRectangle (Brushes.Red' 6 - .5f' 6 - .5f' 13' 13);  }  else {  	e.Graphics.FillRectangle (Brushes.Black' 1 - .5f' 1 - .5f' 23' 23);  }  
Magic Number,System451.Communication.Dashboard.Controls,SpikeControl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\OnOffControl.cs,SpikeControl_Paint,The following statement contains a magic number: if (Value == SpikePositions.Reverse) {  	e.Graphics.FillRectangle (Brushes.DarkRed' 1 - .5f' 1 - .5f' 23' 23);  	e.Graphics.FillRectangle (Brushes.Crimson' 3 - .5f' 3 - .5f' 19' 19);  	e.Graphics.FillRectangle (Brushes.Red' 6 - .5f' 6 - .5f' 13' 13);  }  else {  	e.Graphics.FillRectangle (Brushes.Black' 1 - .5f' 1 - .5f' 23' 23);  }  
Magic Number,System451.Communication.Dashboard.Controls,SpikeControl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\OnOffControl.cs,SpikeControl_Paint,The following statement contains a magic number: if (Value == SpikePositions.Reverse) {  	e.Graphics.FillRectangle (Brushes.DarkRed' 1 - .5f' 1 - .5f' 23' 23);  	e.Graphics.FillRectangle (Brushes.Crimson' 3 - .5f' 3 - .5f' 19' 19);  	e.Graphics.FillRectangle (Brushes.Red' 6 - .5f' 6 - .5f' 13' 13);  }  else {  	e.Graphics.FillRectangle (Brushes.Black' 1 - .5f' 1 - .5f' 23' 23);  }  
Magic Number,System451.Communication.Dashboard.Controls,SpikeControl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\OnOffControl.cs,SpikeControl_Paint,The following statement contains a magic number: e.Graphics.FillRectangle (Brushes.DarkRed' 1 - .5f' 1 - .5f' 23' 23);  
Magic Number,System451.Communication.Dashboard.Controls,SpikeControl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\OnOffControl.cs,SpikeControl_Paint,The following statement contains a magic number: e.Graphics.FillRectangle (Brushes.DarkRed' 1 - .5f' 1 - .5f' 23' 23);  
Magic Number,System451.Communication.Dashboard.Controls,SpikeControl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\OnOffControl.cs,SpikeControl_Paint,The following statement contains a magic number: e.Graphics.FillRectangle (Brushes.Crimson' 3 - .5f' 3 - .5f' 19' 19);  
Magic Number,System451.Communication.Dashboard.Controls,SpikeControl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\OnOffControl.cs,SpikeControl_Paint,The following statement contains a magic number: e.Graphics.FillRectangle (Brushes.Crimson' 3 - .5f' 3 - .5f' 19' 19);  
Magic Number,System451.Communication.Dashboard.Controls,SpikeControl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\OnOffControl.cs,SpikeControl_Paint,The following statement contains a magic number: e.Graphics.FillRectangle (Brushes.Crimson' 3 - .5f' 3 - .5f' 19' 19);  
Magic Number,System451.Communication.Dashboard.Controls,SpikeControl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\OnOffControl.cs,SpikeControl_Paint,The following statement contains a magic number: e.Graphics.FillRectangle (Brushes.Crimson' 3 - .5f' 3 - .5f' 19' 19);  
Magic Number,System451.Communication.Dashboard.Controls,SpikeControl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\OnOffControl.cs,SpikeControl_Paint,The following statement contains a magic number: e.Graphics.FillRectangle (Brushes.Red' 6 - .5f' 6 - .5f' 13' 13);  
Magic Number,System451.Communication.Dashboard.Controls,SpikeControl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\OnOffControl.cs,SpikeControl_Paint,The following statement contains a magic number: e.Graphics.FillRectangle (Brushes.Red' 6 - .5f' 6 - .5f' 13' 13);  
Magic Number,System451.Communication.Dashboard.Controls,SpikeControl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\OnOffControl.cs,SpikeControl_Paint,The following statement contains a magic number: e.Graphics.FillRectangle (Brushes.Red' 6 - .5f' 6 - .5f' 13' 13);  
Magic Number,System451.Communication.Dashboard.Controls,SpikeControl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\OnOffControl.cs,SpikeControl_Paint,The following statement contains a magic number: e.Graphics.FillRectangle (Brushes.Red' 6 - .5f' 6 - .5f' 13' 13);  
Magic Number,System451.Communication.Dashboard.Controls,SpikeControl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\OnOffControl.cs,SpikeControl_Paint,The following statement contains a magic number: e.Graphics.FillRectangle (Brushes.Black' 1 - .5f' 1 - .5f' 23' 23);  
Magic Number,System451.Communication.Dashboard.Controls,SpikeControl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\OnOffControl.cs,SpikeControl_Paint,The following statement contains a magic number: e.Graphics.FillRectangle (Brushes.Black' 1 - .5f' 1 - .5f' 23' 23);  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,RoundSpeedMeter_Paint,The following statement contains a magic number: gp.AddBezier (62.5f' 22f' 40.180261f' 22' 19.886554f' 30.646245f' 4.78125f' 44.78125f);  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,RoundSpeedMeter_Paint,The following statement contains a magic number: using (Brush bb = new SolidBrush (Color.FromArgb (128' 128' 0))) {  	e.Graphics.FillPath (bb' gp);  }  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,RoundSpeedMeter_Paint,The following statement contains a magic number: using (Brush bb = new SolidBrush (Color.FromArgb (128' 128' 0))) {  	e.Graphics.FillPath (bb' gp);  }  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,RoundSpeedMeter_Paint,The following statement contains a magic number: using (Brush flufbrush = new LinearGradientBrush (new Point (4' 0)' new Point (121' 0)' Color.Red' Color.Lime)) {  	e.Graphics.FillRegion (flufbrush' r);  }  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,RoundSpeedMeter_Paint,The following statement contains a magic number: using (Brush flufbrush = new LinearGradientBrush (new Point (4' 0)' new Point (121' 0)' Color.Red' Color.Lime)) {  	e.Graphics.FillRegion (flufbrush' r);  }  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,RoundSpeedMeter_Paint,The following statement contains a magic number: using (Pen p = new Pen (ForeColor)) {  	e.Graphics.DrawLine (p' new PointF ((float)Math.Cos ((startangle + sweepangle) * Math.PI / 180) * (85.5f) + 62.5f' (float)Math.Sin ((startangle + sweepangle) * Math.PI / 180) * (85.5f) + 107.5f)' new PointF ((float)Math.Cos ((startangle + sweepangle) * Math.PI / 180) * (60f) + 62.5f' //2.5'46.5  	(float)Math.Sin ((startangle + sweepangle) * Math.PI / 180) * (60f) + 106.5f));  	//24.5  }  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,RoundSpeedMeter_Paint,The following statement contains a magic number: using (Pen p = new Pen (ForeColor)) {  	e.Graphics.DrawLine (p' new PointF ((float)Math.Cos ((startangle + sweepangle) * Math.PI / 180) * (85.5f) + 62.5f' (float)Math.Sin ((startangle + sweepangle) * Math.PI / 180) * (85.5f) + 107.5f)' new PointF ((float)Math.Cos ((startangle + sweepangle) * Math.PI / 180) * (60f) + 62.5f' //2.5'46.5  	(float)Math.Sin ((startangle + sweepangle) * Math.PI / 180) * (60f) + 106.5f));  	//24.5  }  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,RoundSpeedMeter_Paint,The following statement contains a magic number: using (Pen p = new Pen (ForeColor)) {  	e.Graphics.DrawLine (p' new PointF ((float)Math.Cos ((startangle + sweepangle) * Math.PI / 180) * (85.5f) + 62.5f' (float)Math.Sin ((startangle + sweepangle) * Math.PI / 180) * (85.5f) + 107.5f)' new PointF ((float)Math.Cos ((startangle + sweepangle) * Math.PI / 180) * (60f) + 62.5f' //2.5'46.5  	(float)Math.Sin ((startangle + sweepangle) * Math.PI / 180) * (60f) + 106.5f));  	//24.5  }  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,RoundSpeedMeter_Paint,The following statement contains a magic number: using (Pen p = new Pen (ForeColor)) {  	e.Graphics.DrawLine (p' new PointF ((float)Math.Cos ((startangle + sweepangle) * Math.PI / 180) * (85.5f) + 62.5f' (float)Math.Sin ((startangle + sweepangle) * Math.PI / 180) * (85.5f) + 107.5f)' new PointF ((float)Math.Cos ((startangle + sweepangle) * Math.PI / 180) * (60f) + 62.5f' //2.5'46.5  	(float)Math.Sin ((startangle + sweepangle) * Math.PI / 180) * (60f) + 106.5f));  	//24.5  }  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,RoundSpeedMeter_Paint,The following statement contains a magic number: e.Graphics.DrawLine (p' new PointF ((float)Math.Cos ((startangle + sweepangle) * Math.PI / 180) * (85.5f) + 62.5f' (float)Math.Sin ((startangle + sweepangle) * Math.PI / 180) * (85.5f) + 107.5f)' new PointF ((float)Math.Cos ((startangle + sweepangle) * Math.PI / 180) * (60f) + 62.5f' //2.5'46.5  (float)Math.Sin ((startangle + sweepangle) * Math.PI / 180) * (60f) + 106.5f));  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,RoundSpeedMeter_Paint,The following statement contains a magic number: e.Graphics.DrawLine (p' new PointF ((float)Math.Cos ((startangle + sweepangle) * Math.PI / 180) * (85.5f) + 62.5f' (float)Math.Sin ((startangle + sweepangle) * Math.PI / 180) * (85.5f) + 107.5f)' new PointF ((float)Math.Cos ((startangle + sweepangle) * Math.PI / 180) * (60f) + 62.5f' //2.5'46.5  (float)Math.Sin ((startangle + sweepangle) * Math.PI / 180) * (60f) + 106.5f));  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,RoundSpeedMeter_Paint,The following statement contains a magic number: e.Graphics.DrawLine (p' new PointF ((float)Math.Cos ((startangle + sweepangle) * Math.PI / 180) * (85.5f) + 62.5f' (float)Math.Sin ((startangle + sweepangle) * Math.PI / 180) * (85.5f) + 107.5f)' new PointF ((float)Math.Cos ((startangle + sweepangle) * Math.PI / 180) * (60f) + 62.5f' //2.5'46.5  (float)Math.Sin ((startangle + sweepangle) * Math.PI / 180) * (60f) + 106.5f));  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,RoundSpeedMeter_Paint,The following statement contains a magic number: e.Graphics.DrawLine (p' new PointF ((float)Math.Cos ((startangle + sweepangle) * Math.PI / 180) * (85.5f) + 62.5f' (float)Math.Sin ((startangle + sweepangle) * Math.PI / 180) * (85.5f) + 107.5f)' new PointF ((float)Math.Cos ((startangle + sweepangle) * Math.PI / 180) * (60f) + 62.5f' //2.5'46.5  (float)Math.Sin ((startangle + sweepangle) * Math.PI / 180) * (60f) + 106.5f));  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,RoundSpeedMeter_Paint,The following statement contains a magic number: using (Brush b = new SolidBrush (ForeColor)) {  	e.Graphics.DrawString (this.Value.ToString ("0.00")' Font' b' (125f - e.Graphics.MeasureString (this.Value.ToString ("0.00")' Font).Width) / 2f' 73 - (e.Graphics.MeasureString (this.Value.ToString ("0.00")' Font).Height));  }  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,RoundSpeedMeter_Paint,The following statement contains a magic number: e.Graphics.DrawString (this.Value.ToString ("0.00")' Font' b' (125f - e.Graphics.MeasureString (this.Value.ToString ("0.00")' Font).Width) / 2f' 73 - (e.Graphics.MeasureString (this.Value.ToString ("0.00")' Font).Height));  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: pe.AddLine (new PointF ((x + width / 2)' (y + height / 2))' last);  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: pe.AddLine (new PointF ((x + width / 2)' (y + height / 2))' last);  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: while (sa < 0)  	sa += 360;  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: sa += 360;  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: while (sw < 0)  	sw += 360;  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: sw += 360;  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: if (sw == 180) {  	if (sweepangle < 0) {  		sw = -180;  	}  }  else if (sw > 180)  	sw = -sw;  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: if (sw == 180) {  	if (sweepangle < 0) {  		sw = -180;  	}  }  else if (sw > 180)  	sw = -sw;  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: if (sw == 180) {  	if (sweepangle < 0) {  		sw = -180;  	}  }  else if (sw > 180)  	sw = -sw;  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: if (sweepangle < 0) {  	sw = -180;  }  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: sw = -180;  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: if (sw > 180)  	sw = -sw;  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: switch ((int)(sa / 90)) {  case 0:  	//lower right VI  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  		last = new PointF ((x + width) + 1' (y + height) + 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  	}  	else {  		if ((sa / 90) != 0) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  		pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  		last = new PointF ((x + width) + 1' (y) - 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  	}  	break;  case 1:  	//Lower left III  	sw = (startangle + sweepangle - 90) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  		last = new PointF ((x) - 1' (y + height) + 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  	}  	else {  		if ((sa / 90) != 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  		pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  		last = new PointF ((x + width) + 1' (y + height) + 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  	}  	break;  case 2:  	//Upper left II  	sw = (startangle + sweepangle - 180) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  		last = new PointF ((x) - 1' (y) - 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  	}  	else {  		if ((sa / 90) != 2) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  		pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  		last = new PointF ((x) - 1' (y + height) + 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  	}  	break;  case 3:  	//Upper right  	sw = (startangle + sweepangle + 90) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((int)(sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  		last = new PointF ((x + width) + 1' (y) - 1);  		if (((int)(sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  	}  	else {  		if ((sa / 90) != 3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  		pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  		last = new PointF ((x) - 1' (y) - 1);  		if ((sw / 90) >= -3) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  	}  	break;  default:  	MessageBox.Show ("AH! Math Error (in RSM' GetPie)");  	throw new Exception ("Math Error");  }  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: switch ((int)(sa / 90)) {  case 0:  	//lower right VI  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  		last = new PointF ((x + width) + 1' (y + height) + 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  	}  	else {  		if ((sa / 90) != 0) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  		pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  		last = new PointF ((x + width) + 1' (y) - 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  	}  	break;  case 1:  	//Lower left III  	sw = (startangle + sweepangle - 90) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  		last = new PointF ((x) - 1' (y + height) + 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  	}  	else {  		if ((sa / 90) != 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  		pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  		last = new PointF ((x + width) + 1' (y + height) + 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  	}  	break;  case 2:  	//Upper left II  	sw = (startangle + sweepangle - 180) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  		last = new PointF ((x) - 1' (y) - 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  	}  	else {  		if ((sa / 90) != 2) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  		pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  		last = new PointF ((x) - 1' (y + height) + 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  	}  	break;  case 3:  	//Upper right  	sw = (startangle + sweepangle + 90) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((int)(sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  		last = new PointF ((x + width) + 1' (y) - 1);  		if (((int)(sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  	}  	else {  		if ((sa / 90) != 3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  		pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  		last = new PointF ((x) - 1' (y) - 1);  		if ((sw / 90) >= -3) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  	}  	break;  default:  	MessageBox.Show ("AH! Math Error (in RSM' GetPie)");  	throw new Exception ("Math Error");  }  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: switch ((int)(sa / 90)) {  case 0:  	//lower right VI  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  		last = new PointF ((x + width) + 1' (y + height) + 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  	}  	else {  		if ((sa / 90) != 0) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  		pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  		last = new PointF ((x + width) + 1' (y) - 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  	}  	break;  case 1:  	//Lower left III  	sw = (startangle + sweepangle - 90) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  		last = new PointF ((x) - 1' (y + height) + 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  	}  	else {  		if ((sa / 90) != 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  		pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  		last = new PointF ((x + width) + 1' (y + height) + 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  	}  	break;  case 2:  	//Upper left II  	sw = (startangle + sweepangle - 180) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  		last = new PointF ((x) - 1' (y) - 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  	}  	else {  		if ((sa / 90) != 2) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  		pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  		last = new PointF ((x) - 1' (y + height) + 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  	}  	break;  case 3:  	//Upper right  	sw = (startangle + sweepangle + 90) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((int)(sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  		last = new PointF ((x + width) + 1' (y) - 1);  		if (((int)(sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  	}  	else {  		if ((sa / 90) != 3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  		pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  		last = new PointF ((x) - 1' (y) - 1);  		if ((sw / 90) >= -3) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  	}  	break;  default:  	MessageBox.Show ("AH! Math Error (in RSM' GetPie)");  	throw new Exception ("Math Error");  }  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: switch ((int)(sa / 90)) {  case 0:  	//lower right VI  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  		last = new PointF ((x + width) + 1' (y + height) + 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  	}  	else {  		if ((sa / 90) != 0) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  		pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  		last = new PointF ((x + width) + 1' (y) - 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  	}  	break;  case 1:  	//Lower left III  	sw = (startangle + sweepangle - 90) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  		last = new PointF ((x) - 1' (y + height) + 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  	}  	else {  		if ((sa / 90) != 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  		pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  		last = new PointF ((x + width) + 1' (y + height) + 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  	}  	break;  case 2:  	//Upper left II  	sw = (startangle + sweepangle - 180) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  		last = new PointF ((x) - 1' (y) - 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  	}  	else {  		if ((sa / 90) != 2) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  		pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  		last = new PointF ((x) - 1' (y + height) + 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  	}  	break;  case 3:  	//Upper right  	sw = (startangle + sweepangle + 90) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((int)(sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  		last = new PointF ((x + width) + 1' (y) - 1);  		if (((int)(sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  	}  	else {  		if ((sa / 90) != 3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  		pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  		last = new PointF ((x) - 1' (y) - 1);  		if ((sw / 90) >= -3) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  	}  	break;  default:  	MessageBox.Show ("AH! Math Error (in RSM' GetPie)");  	throw new Exception ("Math Error");  }  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: switch ((int)(sa / 90)) {  case 0:  	//lower right VI  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  		last = new PointF ((x + width) + 1' (y + height) + 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  	}  	else {  		if ((sa / 90) != 0) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  		pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  		last = new PointF ((x + width) + 1' (y) - 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  	}  	break;  case 1:  	//Lower left III  	sw = (startangle + sweepangle - 90) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  		last = new PointF ((x) - 1' (y + height) + 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  	}  	else {  		if ((sa / 90) != 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  		pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  		last = new PointF ((x + width) + 1' (y + height) + 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  	}  	break;  case 2:  	//Upper left II  	sw = (startangle + sweepangle - 180) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  		last = new PointF ((x) - 1' (y) - 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  	}  	else {  		if ((sa / 90) != 2) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  		pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  		last = new PointF ((x) - 1' (y + height) + 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  	}  	break;  case 3:  	//Upper right  	sw = (startangle + sweepangle + 90) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((int)(sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  		last = new PointF ((x + width) + 1' (y) - 1);  		if (((int)(sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  	}  	else {  		if ((sa / 90) != 3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  		pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  		last = new PointF ((x) - 1' (y) - 1);  		if ((sw / 90) >= -3) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  	}  	break;  default:  	MessageBox.Show ("AH! Math Error (in RSM' GetPie)");  	throw new Exception ("Math Error");  }  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: switch ((int)(sa / 90)) {  case 0:  	//lower right VI  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  		last = new PointF ((x + width) + 1' (y + height) + 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  	}  	else {  		if ((sa / 90) != 0) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  		pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  		last = new PointF ((x + width) + 1' (y) - 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  	}  	break;  case 1:  	//Lower left III  	sw = (startangle + sweepangle - 90) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  		last = new PointF ((x) - 1' (y + height) + 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  	}  	else {  		if ((sa / 90) != 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  		pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  		last = new PointF ((x + width) + 1' (y + height) + 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  	}  	break;  case 2:  	//Upper left II  	sw = (startangle + sweepangle - 180) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  		last = new PointF ((x) - 1' (y) - 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  	}  	else {  		if ((sa / 90) != 2) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  		pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  		last = new PointF ((x) - 1' (y + height) + 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  	}  	break;  case 3:  	//Upper right  	sw = (startangle + sweepangle + 90) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((int)(sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  		last = new PointF ((x + width) + 1' (y) - 1);  		if (((int)(sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  	}  	else {  		if ((sa / 90) != 3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  		pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  		last = new PointF ((x) - 1' (y) - 1);  		if ((sw / 90) >= -3) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  	}  	break;  default:  	MessageBox.Show ("AH! Math Error (in RSM' GetPie)");  	throw new Exception ("Math Error");  }  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: switch ((int)(sa / 90)) {  case 0:  	//lower right VI  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  		last = new PointF ((x + width) + 1' (y + height) + 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  	}  	else {  		if ((sa / 90) != 0) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  		pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  		last = new PointF ((x + width) + 1' (y) - 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  	}  	break;  case 1:  	//Lower left III  	sw = (startangle + sweepangle - 90) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  		last = new PointF ((x) - 1' (y + height) + 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  	}  	else {  		if ((sa / 90) != 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  		pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  		last = new PointF ((x + width) + 1' (y + height) + 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  	}  	break;  case 2:  	//Upper left II  	sw = (startangle + sweepangle - 180) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  		last = new PointF ((x) - 1' (y) - 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  	}  	else {  		if ((sa / 90) != 2) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  		pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  		last = new PointF ((x) - 1' (y + height) + 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  	}  	break;  case 3:  	//Upper right  	sw = (startangle + sweepangle + 90) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((int)(sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  		last = new PointF ((x + width) + 1' (y) - 1);  		if (((int)(sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  	}  	else {  		if ((sa / 90) != 3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  		pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  		last = new PointF ((x) - 1' (y) - 1);  		if ((sw / 90) >= -3) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  	}  	break;  default:  	MessageBox.Show ("AH! Math Error (in RSM' GetPie)");  	throw new Exception ("Math Error");  }  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: switch ((int)(sa / 90)) {  case 0:  	//lower right VI  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  		last = new PointF ((x + width) + 1' (y + height) + 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  	}  	else {  		if ((sa / 90) != 0) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  		pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  		last = new PointF ((x + width) + 1' (y) - 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  	}  	break;  case 1:  	//Lower left III  	sw = (startangle + sweepangle - 90) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  		last = new PointF ((x) - 1' (y + height) + 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  	}  	else {  		if ((sa / 90) != 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  		pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  		last = new PointF ((x + width) + 1' (y + height) + 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  	}  	break;  case 2:  	//Upper left II  	sw = (startangle + sweepangle - 180) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  		last = new PointF ((x) - 1' (y) - 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  	}  	else {  		if ((sa / 90) != 2) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  		pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  		last = new PointF ((x) - 1' (y + height) + 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  	}  	break;  case 3:  	//Upper right  	sw = (startangle + sweepangle + 90) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((int)(sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  		last = new PointF ((x + width) + 1' (y) - 1);  		if (((int)(sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  	}  	else {  		if ((sa / 90) != 3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  		pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  		last = new PointF ((x) - 1' (y) - 1);  		if ((sw / 90) >= -3) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  	}  	break;  default:  	MessageBox.Show ("AH! Math Error (in RSM' GetPie)");  	throw new Exception ("Math Error");  }  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: switch ((int)(sa / 90)) {  case 0:  	//lower right VI  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  		last = new PointF ((x + width) + 1' (y + height) + 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  	}  	else {  		if ((sa / 90) != 0) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  		pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  		last = new PointF ((x + width) + 1' (y) - 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  	}  	break;  case 1:  	//Lower left III  	sw = (startangle + sweepangle - 90) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  		last = new PointF ((x) - 1' (y + height) + 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  	}  	else {  		if ((sa / 90) != 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  		pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  		last = new PointF ((x + width) + 1' (y + height) + 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  	}  	break;  case 2:  	//Upper left II  	sw = (startangle + sweepangle - 180) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  		last = new PointF ((x) - 1' (y) - 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  	}  	else {  		if ((sa / 90) != 2) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  		pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  		last = new PointF ((x) - 1' (y + height) + 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  	}  	break;  case 3:  	//Upper right  	sw = (startangle + sweepangle + 90) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((int)(sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  		last = new PointF ((x + width) + 1' (y) - 1);  		if (((int)(sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  	}  	else {  		if ((sa / 90) != 3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  		pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  		last = new PointF ((x) - 1' (y) - 1);  		if ((sw / 90) >= -3) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  	}  	break;  default:  	MessageBox.Show ("AH! Math Error (in RSM' GetPie)");  	throw new Exception ("Math Error");  }  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: switch ((int)(sa / 90)) {  case 0:  	//lower right VI  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  		last = new PointF ((x + width) + 1' (y + height) + 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  	}  	else {  		if ((sa / 90) != 0) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  		pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  		last = new PointF ((x + width) + 1' (y) - 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  	}  	break;  case 1:  	//Lower left III  	sw = (startangle + sweepangle - 90) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  		last = new PointF ((x) - 1' (y + height) + 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  	}  	else {  		if ((sa / 90) != 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  		pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  		last = new PointF ((x + width) + 1' (y + height) + 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  	}  	break;  case 2:  	//Upper left II  	sw = (startangle + sweepangle - 180) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  		last = new PointF ((x) - 1' (y) - 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  	}  	else {  		if ((sa / 90) != 2) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  		pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  		last = new PointF ((x) - 1' (y + height) + 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  	}  	break;  case 3:  	//Upper right  	sw = (startangle + sweepangle + 90) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((int)(sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  		last = new PointF ((x + width) + 1' (y) - 1);  		if (((int)(sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  	}  	else {  		if ((sa / 90) != 3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  		pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  		last = new PointF ((x) - 1' (y) - 1);  		if ((sw / 90) >= -3) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  	}  	break;  default:  	MessageBox.Show ("AH! Math Error (in RSM' GetPie)");  	throw new Exception ("Math Error");  }  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: switch ((int)(sa / 90)) {  case 0:  	//lower right VI  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  		last = new PointF ((x + width) + 1' (y + height) + 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  	}  	else {  		if ((sa / 90) != 0) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  		pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  		last = new PointF ((x + width) + 1' (y) - 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  	}  	break;  case 1:  	//Lower left III  	sw = (startangle + sweepangle - 90) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  		last = new PointF ((x) - 1' (y + height) + 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  	}  	else {  		if ((sa / 90) != 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  		pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  		last = new PointF ((x + width) + 1' (y + height) + 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  	}  	break;  case 2:  	//Upper left II  	sw = (startangle + sweepangle - 180) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  		last = new PointF ((x) - 1' (y) - 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  	}  	else {  		if ((sa / 90) != 2) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  		pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  		last = new PointF ((x) - 1' (y + height) + 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  	}  	break;  case 3:  	//Upper right  	sw = (startangle + sweepangle + 90) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((int)(sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  		last = new PointF ((x + width) + 1' (y) - 1);  		if (((int)(sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  	}  	else {  		if ((sa / 90) != 3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  		pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  		last = new PointF ((x) - 1' (y) - 1);  		if ((sw / 90) >= -3) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  	}  	break;  default:  	MessageBox.Show ("AH! Math Error (in RSM' GetPie)");  	throw new Exception ("Math Error");  }  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: switch ((int)(sa / 90)) {  case 0:  	//lower right VI  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  		last = new PointF ((x + width) + 1' (y + height) + 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  	}  	else {  		if ((sa / 90) != 0) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  		pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  		last = new PointF ((x + width) + 1' (y) - 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  	}  	break;  case 1:  	//Lower left III  	sw = (startangle + sweepangle - 90) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  		last = new PointF ((x) - 1' (y + height) + 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  	}  	else {  		if ((sa / 90) != 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  		pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  		last = new PointF ((x + width) + 1' (y + height) + 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  	}  	break;  case 2:  	//Upper left II  	sw = (startangle + sweepangle - 180) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  		last = new PointF ((x) - 1' (y) - 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  	}  	else {  		if ((sa / 90) != 2) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  		pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  		last = new PointF ((x) - 1' (y + height) + 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  	}  	break;  case 3:  	//Upper right  	sw = (startangle + sweepangle + 90) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((int)(sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  		last = new PointF ((x + width) + 1' (y) - 1);  		if (((int)(sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  	}  	else {  		if ((sa / 90) != 3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  		pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  		last = new PointF ((x) - 1' (y) - 1);  		if ((sw / 90) >= -3) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  	}  	break;  default:  	MessageBox.Show ("AH! Math Error (in RSM' GetPie)");  	throw new Exception ("Math Error");  }  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: switch ((int)(sa / 90)) {  case 0:  	//lower right VI  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  		last = new PointF ((x + width) + 1' (y + height) + 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  	}  	else {  		if ((sa / 90) != 0) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  		pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  		last = new PointF ((x + width) + 1' (y) - 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  	}  	break;  case 1:  	//Lower left III  	sw = (startangle + sweepangle - 90) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  		last = new PointF ((x) - 1' (y + height) + 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  	}  	else {  		if ((sa / 90) != 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  		pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  		last = new PointF ((x + width) + 1' (y + height) + 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  	}  	break;  case 2:  	//Upper left II  	sw = (startangle + sweepangle - 180) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  		last = new PointF ((x) - 1' (y) - 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  	}  	else {  		if ((sa / 90) != 2) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  		pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  		last = new PointF ((x) - 1' (y + height) + 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  	}  	break;  case 3:  	//Upper right  	sw = (startangle + sweepangle + 90) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((int)(sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  		last = new PointF ((x + width) + 1' (y) - 1);  		if (((int)(sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  	}  	else {  		if ((sa / 90) != 3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  		pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  		last = new PointF ((x) - 1' (y) - 1);  		if ((sw / 90) >= -3) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  	}  	break;  default:  	MessageBox.Show ("AH! Math Error (in RSM' GetPie)");  	throw new Exception ("Math Error");  }  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: switch ((int)(sa / 90)) {  case 0:  	//lower right VI  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  		last = new PointF ((x + width) + 1' (y + height) + 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  	}  	else {  		if ((sa / 90) != 0) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  		pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  		last = new PointF ((x + width) + 1' (y) - 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  	}  	break;  case 1:  	//Lower left III  	sw = (startangle + sweepangle - 90) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  		last = new PointF ((x) - 1' (y + height) + 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  	}  	else {  		if ((sa / 90) != 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  		pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  		last = new PointF ((x + width) + 1' (y + height) + 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  	}  	break;  case 2:  	//Upper left II  	sw = (startangle + sweepangle - 180) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  		last = new PointF ((x) - 1' (y) - 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  	}  	else {  		if ((sa / 90) != 2) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  		pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  		last = new PointF ((x) - 1' (y + height) + 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  	}  	break;  case 3:  	//Upper right  	sw = (startangle + sweepangle + 90) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((int)(sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  		last = new PointF ((x + width) + 1' (y) - 1);  		if (((int)(sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  	}  	else {  		if ((sa / 90) != 3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  		pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  		last = new PointF ((x) - 1' (y) - 1);  		if ((sw / 90) >= -3) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  	}  	break;  default:  	MessageBox.Show ("AH! Math Error (in RSM' GetPie)");  	throw new Exception ("Math Error");  }  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: switch ((int)(sa / 90)) {  case 0:  	//lower right VI  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  		last = new PointF ((x + width) + 1' (y + height) + 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  	}  	else {  		if ((sa / 90) != 0) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  		pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  		last = new PointF ((x + width) + 1' (y) - 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  	}  	break;  case 1:  	//Lower left III  	sw = (startangle + sweepangle - 90) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  		last = new PointF ((x) - 1' (y + height) + 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  	}  	else {  		if ((sa / 90) != 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  		pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  		last = new PointF ((x + width) + 1' (y + height) + 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  	}  	break;  case 2:  	//Upper left II  	sw = (startangle + sweepangle - 180) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  		last = new PointF ((x) - 1' (y) - 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  	}  	else {  		if ((sa / 90) != 2) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  		pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  		last = new PointF ((x) - 1' (y + height) + 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  	}  	break;  case 3:  	//Upper right  	sw = (startangle + sweepangle + 90) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((int)(sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  		last = new PointF ((x + width) + 1' (y) - 1);  		if (((int)(sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  	}  	else {  		if ((sa / 90) != 3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  		pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  		last = new PointF ((x) - 1' (y) - 1);  		if ((sw / 90) >= -3) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  	}  	break;  default:  	MessageBox.Show ("AH! Math Error (in RSM' GetPie)");  	throw new Exception ("Math Error");  }  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: switch ((int)(sa / 90)) {  case 0:  	//lower right VI  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  		last = new PointF ((x + width) + 1' (y + height) + 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  	}  	else {  		if ((sa / 90) != 0) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  		pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  		last = new PointF ((x + width) + 1' (y) - 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  	}  	break;  case 1:  	//Lower left III  	sw = (startangle + sweepangle - 90) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  		last = new PointF ((x) - 1' (y + height) + 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  	}  	else {  		if ((sa / 90) != 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  		pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  		last = new PointF ((x + width) + 1' (y + height) + 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  	}  	break;  case 2:  	//Upper left II  	sw = (startangle + sweepangle - 180) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  		last = new PointF ((x) - 1' (y) - 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  	}  	else {  		if ((sa / 90) != 2) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  		pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  		last = new PointF ((x) - 1' (y + height) + 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  	}  	break;  case 3:  	//Upper right  	sw = (startangle + sweepangle + 90) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((int)(sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  		last = new PointF ((x + width) + 1' (y) - 1);  		if (((int)(sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  	}  	else {  		if ((sa / 90) != 3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  		pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  		last = new PointF ((x) - 1' (y) - 1);  		if ((sw / 90) >= -3) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  	}  	break;  default:  	MessageBox.Show ("AH! Math Error (in RSM' GetPie)");  	throw new Exception ("Math Error");  }  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: switch ((int)(sa / 90)) {  case 0:  	//lower right VI  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  		last = new PointF ((x + width) + 1' (y + height) + 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  	}  	else {  		if ((sa / 90) != 0) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  		pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  		last = new PointF ((x + width) + 1' (y) - 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  	}  	break;  case 1:  	//Lower left III  	sw = (startangle + sweepangle - 90) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  		last = new PointF ((x) - 1' (y + height) + 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  	}  	else {  		if ((sa / 90) != 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  		pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  		last = new PointF ((x + width) + 1' (y + height) + 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  	}  	break;  case 2:  	//Upper left II  	sw = (startangle + sweepangle - 180) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  		last = new PointF ((x) - 1' (y) - 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  	}  	else {  		if ((sa / 90) != 2) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  		pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  		last = new PointF ((x) - 1' (y + height) + 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  	}  	break;  case 3:  	//Upper right  	sw = (startangle + sweepangle + 90) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((int)(sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  		last = new PointF ((x + width) + 1' (y) - 1);  		if (((int)(sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  	}  	else {  		if ((sa / 90) != 3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  		pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  		last = new PointF ((x) - 1' (y) - 1);  		if ((sw / 90) >= -3) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  	}  	break;  default:  	MessageBox.Show ("AH! Math Error (in RSM' GetPie)");  	throw new Exception ("Math Error");  }  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: switch ((int)(sa / 90)) {  case 0:  	//lower right VI  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  		last = new PointF ((x + width) + 1' (y + height) + 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  	}  	else {  		if ((sa / 90) != 0) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  		pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  		last = new PointF ((x + width) + 1' (y) - 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  	}  	break;  case 1:  	//Lower left III  	sw = (startangle + sweepangle - 90) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  		last = new PointF ((x) - 1' (y + height) + 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  	}  	else {  		if ((sa / 90) != 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  		pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  		last = new PointF ((x + width) + 1' (y + height) + 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  	}  	break;  case 2:  	//Upper left II  	sw = (startangle + sweepangle - 180) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  		last = new PointF ((x) - 1' (y) - 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  	}  	else {  		if ((sa / 90) != 2) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  		pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  		last = new PointF ((x) - 1' (y + height) + 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  	}  	break;  case 3:  	//Upper right  	sw = (startangle + sweepangle + 90) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((int)(sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  		last = new PointF ((x + width) + 1' (y) - 1);  		if (((int)(sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  	}  	else {  		if ((sa / 90) != 3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  		pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  		last = new PointF ((x) - 1' (y) - 1);  		if ((sw / 90) >= -3) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  	}  	break;  default:  	MessageBox.Show ("AH! Math Error (in RSM' GetPie)");  	throw new Exception ("Math Error");  }  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: switch ((int)(sa / 90)) {  case 0:  	//lower right VI  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  		last = new PointF ((x + width) + 1' (y + height) + 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  	}  	else {  		if ((sa / 90) != 0) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  		pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  		last = new PointF ((x + width) + 1' (y) - 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  	}  	break;  case 1:  	//Lower left III  	sw = (startangle + sweepangle - 90) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  		last = new PointF ((x) - 1' (y + height) + 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  	}  	else {  		if ((sa / 90) != 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  		pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  		last = new PointF ((x + width) + 1' (y + height) + 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  	}  	break;  case 2:  	//Upper left II  	sw = (startangle + sweepangle - 180) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  		last = new PointF ((x) - 1' (y) - 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  	}  	else {  		if ((sa / 90) != 2) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  		pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  		last = new PointF ((x) - 1' (y + height) + 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  	}  	break;  case 3:  	//Upper right  	sw = (startangle + sweepangle + 90) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((int)(sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  		last = new PointF ((x + width) + 1' (y) - 1);  		if (((int)(sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  	}  	else {  		if ((sa / 90) != 3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  		pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  		last = new PointF ((x) - 1' (y) - 1);  		if ((sw / 90) >= -3) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  	}  	break;  default:  	MessageBox.Show ("AH! Math Error (in RSM' GetPie)");  	throw new Exception ("Math Error");  }  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: switch ((int)(sa / 90)) {  case 0:  	//lower right VI  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  		last = new PointF ((x + width) + 1' (y + height) + 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  	}  	else {  		if ((sa / 90) != 0) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  		pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  		last = new PointF ((x + width) + 1' (y) - 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  	}  	break;  case 1:  	//Lower left III  	sw = (startangle + sweepangle - 90) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  		last = new PointF ((x) - 1' (y + height) + 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  	}  	else {  		if ((sa / 90) != 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  		pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  		last = new PointF ((x + width) + 1' (y + height) + 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  	}  	break;  case 2:  	//Upper left II  	sw = (startangle + sweepangle - 180) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  		last = new PointF ((x) - 1' (y) - 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  	}  	else {  		if ((sa / 90) != 2) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  		pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  		last = new PointF ((x) - 1' (y + height) + 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  	}  	break;  case 3:  	//Upper right  	sw = (startangle + sweepangle + 90) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((int)(sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  		last = new PointF ((x + width) + 1' (y) - 1);  		if (((int)(sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  	}  	else {  		if ((sa / 90) != 3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  		pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  		last = new PointF ((x) - 1' (y) - 1);  		if ((sw / 90) >= -3) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  	}  	break;  default:  	MessageBox.Show ("AH! Math Error (in RSM' GetPie)");  	throw new Exception ("Math Error");  }  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: switch ((int)(sa / 90)) {  case 0:  	//lower right VI  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  		last = new PointF ((x + width) + 1' (y + height) + 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  	}  	else {  		if ((sa / 90) != 0) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  		pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  		last = new PointF ((x + width) + 1' (y) - 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  	}  	break;  case 1:  	//Lower left III  	sw = (startangle + sweepangle - 90) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  		last = new PointF ((x) - 1' (y + height) + 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  	}  	else {  		if ((sa / 90) != 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  		pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  		last = new PointF ((x + width) + 1' (y + height) + 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  	}  	break;  case 2:  	//Upper left II  	sw = (startangle + sweepangle - 180) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  		last = new PointF ((x) - 1' (y) - 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  	}  	else {  		if ((sa / 90) != 2) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  		pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  		last = new PointF ((x) - 1' (y + height) + 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  	}  	break;  case 3:  	//Upper right  	sw = (startangle + sweepangle + 90) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((int)(sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  		last = new PointF ((x + width) + 1' (y) - 1);  		if (((int)(sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  	}  	else {  		if ((sa / 90) != 3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  		pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  		last = new PointF ((x) - 1' (y) - 1);  		if ((sw / 90) >= -3) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  	}  	break;  default:  	MessageBox.Show ("AH! Math Error (in RSM' GetPie)");  	throw new Exception ("Math Error");  }  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: switch ((int)(sa / 90)) {  case 0:  	//lower right VI  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  		last = new PointF ((x + width) + 1' (y + height) + 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  	}  	else {  		if ((sa / 90) != 0) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  		pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  		last = new PointF ((x + width) + 1' (y) - 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  	}  	break;  case 1:  	//Lower left III  	sw = (startangle + sweepangle - 90) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  		last = new PointF ((x) - 1' (y + height) + 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  	}  	else {  		if ((sa / 90) != 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  		pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  		last = new PointF ((x + width) + 1' (y + height) + 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  	}  	break;  case 2:  	//Upper left II  	sw = (startangle + sweepangle - 180) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  		last = new PointF ((x) - 1' (y) - 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  	}  	else {  		if ((sa / 90) != 2) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  		pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  		last = new PointF ((x) - 1' (y + height) + 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  	}  	break;  case 3:  	//Upper right  	sw = (startangle + sweepangle + 90) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((int)(sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  		last = new PointF ((x + width) + 1' (y) - 1);  		if (((int)(sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  	}  	else {  		if ((sa / 90) != 3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  		pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  		last = new PointF ((x) - 1' (y) - 1);  		if ((sw / 90) >= -3) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  	}  	break;  default:  	MessageBox.Show ("AH! Math Error (in RSM' GetPie)");  	throw new Exception ("Math Error");  }  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: switch ((int)(sa / 90)) {  case 0:  	//lower right VI  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  		last = new PointF ((x + width) + 1' (y + height) + 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  	}  	else {  		if ((sa / 90) != 0) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  		pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  		last = new PointF ((x + width) + 1' (y) - 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  	}  	break;  case 1:  	//Lower left III  	sw = (startangle + sweepangle - 90) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  		last = new PointF ((x) - 1' (y + height) + 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  	}  	else {  		if ((sa / 90) != 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  		pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  		last = new PointF ((x + width) + 1' (y + height) + 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  	}  	break;  case 2:  	//Upper left II  	sw = (startangle + sweepangle - 180) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  		last = new PointF ((x) - 1' (y) - 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  	}  	else {  		if ((sa / 90) != 2) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  		pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  		last = new PointF ((x) - 1' (y + height) + 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  	}  	break;  case 3:  	//Upper right  	sw = (startangle + sweepangle + 90) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((int)(sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  		last = new PointF ((x + width) + 1' (y) - 1);  		if (((int)(sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  	}  	else {  		if ((sa / 90) != 3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  		pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  		last = new PointF ((x) - 1' (y) - 1);  		if ((sw / 90) >= -3) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  	}  	break;  default:  	MessageBox.Show ("AH! Math Error (in RSM' GetPie)");  	throw new Exception ("Math Error");  }  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: switch ((int)(sa / 90)) {  case 0:  	//lower right VI  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  		last = new PointF ((x + width) + 1' (y + height) + 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  	}  	else {  		if ((sa / 90) != 0) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  		pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  		last = new PointF ((x + width) + 1' (y) - 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  	}  	break;  case 1:  	//Lower left III  	sw = (startangle + sweepangle - 90) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  		last = new PointF ((x) - 1' (y + height) + 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  	}  	else {  		if ((sa / 90) != 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  		pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  		last = new PointF ((x + width) + 1' (y + height) + 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  	}  	break;  case 2:  	//Upper left II  	sw = (startangle + sweepangle - 180) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  		last = new PointF ((x) - 1' (y) - 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  	}  	else {  		if ((sa / 90) != 2) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  		pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  		last = new PointF ((x) - 1' (y + height) + 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  	}  	break;  case 3:  	//Upper right  	sw = (startangle + sweepangle + 90) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((int)(sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  		last = new PointF ((x + width) + 1' (y) - 1);  		if (((int)(sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  	}  	else {  		if ((sa / 90) != 3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  		pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  		last = new PointF ((x) - 1' (y) - 1);  		if ((sw / 90) >= -3) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  	}  	break;  default:  	MessageBox.Show ("AH! Math Error (in RSM' GetPie)");  	throw new Exception ("Math Error");  }  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: switch ((int)(sa / 90)) {  case 0:  	//lower right VI  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  		last = new PointF ((x + width) + 1' (y + height) + 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  	}  	else {  		if ((sa / 90) != 0) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  		pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  		last = new PointF ((x + width) + 1' (y) - 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  	}  	break;  case 1:  	//Lower left III  	sw = (startangle + sweepangle - 90) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  		last = new PointF ((x) - 1' (y + height) + 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  	}  	else {  		if ((sa / 90) != 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  		pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  		last = new PointF ((x + width) + 1' (y + height) + 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  	}  	break;  case 2:  	//Upper left II  	sw = (startangle + sweepangle - 180) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  		last = new PointF ((x) - 1' (y) - 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  	}  	else {  		if ((sa / 90) != 2) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  		pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  		last = new PointF ((x) - 1' (y + height) + 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  	}  	break;  case 3:  	//Upper right  	sw = (startangle + sweepangle + 90) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((int)(sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  		last = new PointF ((x + width) + 1' (y) - 1);  		if (((int)(sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  	}  	else {  		if ((sa / 90) != 3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  		pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  		last = new PointF ((x) - 1' (y) - 1);  		if ((sw / 90) >= -3) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  	}  	break;  default:  	MessageBox.Show ("AH! Math Error (in RSM' GetPie)");  	throw new Exception ("Math Error");  }  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: switch ((int)(sa / 90)) {  case 0:  	//lower right VI  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  		last = new PointF ((x + width) + 1' (y + height) + 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  	}  	else {  		if ((sa / 90) != 0) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  		pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  		last = new PointF ((x + width) + 1' (y) - 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  	}  	break;  case 1:  	//Lower left III  	sw = (startangle + sweepangle - 90) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  		last = new PointF ((x) - 1' (y + height) + 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  	}  	else {  		if ((sa / 90) != 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  		pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  		last = new PointF ((x + width) + 1' (y + height) + 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  	}  	break;  case 2:  	//Upper left II  	sw = (startangle + sweepangle - 180) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  		last = new PointF ((x) - 1' (y) - 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  	}  	else {  		if ((sa / 90) != 2) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  		pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  		last = new PointF ((x) - 1' (y + height) + 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  	}  	break;  case 3:  	//Upper right  	sw = (startangle + sweepangle + 90) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((int)(sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  		last = new PointF ((x + width) + 1' (y) - 1);  		if (((int)(sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  	}  	else {  		if ((sa / 90) != 3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  		pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  		last = new PointF ((x) - 1' (y) - 1);  		if ((sw / 90) >= -3) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  	}  	break;  default:  	MessageBox.Show ("AH! Math Error (in RSM' GetPie)");  	throw new Exception ("Math Error");  }  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: switch ((int)(sa / 90)) {  case 0:  	//lower right VI  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  		last = new PointF ((x + width) + 1' (y + height) + 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  	}  	else {  		if ((sa / 90) != 0) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  		pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  		last = new PointF ((x + width) + 1' (y) - 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  	}  	break;  case 1:  	//Lower left III  	sw = (startangle + sweepangle - 90) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  		last = new PointF ((x) - 1' (y + height) + 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  	}  	else {  		if ((sa / 90) != 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  		pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  		last = new PointF ((x + width) + 1' (y + height) + 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  	}  	break;  case 2:  	//Upper left II  	sw = (startangle + sweepangle - 180) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  		last = new PointF ((x) - 1' (y) - 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  	}  	else {  		if ((sa / 90) != 2) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  		pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  		last = new PointF ((x) - 1' (y + height) + 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  	}  	break;  case 3:  	//Upper right  	sw = (startangle + sweepangle + 90) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((int)(sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  		last = new PointF ((x + width) + 1' (y) - 1);  		if (((int)(sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  	}  	else {  		if ((sa / 90) != 3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  		pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  		last = new PointF ((x) - 1' (y) - 1);  		if ((sw / 90) >= -3) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  	}  	break;  default:  	MessageBox.Show ("AH! Math Error (in RSM' GetPie)");  	throw new Exception ("Math Error");  }  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: switch ((int)(sa / 90)) {  case 0:  	//lower right VI  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  		last = new PointF ((x + width) + 1' (y + height) + 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  	}  	else {  		if ((sa / 90) != 0) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  		pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  		last = new PointF ((x + width) + 1' (y) - 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  	}  	break;  case 1:  	//Lower left III  	sw = (startangle + sweepangle - 90) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  		last = new PointF ((x) - 1' (y + height) + 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  	}  	else {  		if ((sa / 90) != 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  		pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  		last = new PointF ((x + width) + 1' (y + height) + 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  	}  	break;  case 2:  	//Upper left II  	sw = (startangle + sweepangle - 180) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  		last = new PointF ((x) - 1' (y) - 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  	}  	else {  		if ((sa / 90) != 2) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  		pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  		last = new PointF ((x) - 1' (y + height) + 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  	}  	break;  case 3:  	//Upper right  	sw = (startangle + sweepangle + 90) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((int)(sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  		last = new PointF ((x + width) + 1' (y) - 1);  		if (((int)(sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  	}  	else {  		if ((sa / 90) != 3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  		pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  		last = new PointF ((x) - 1' (y) - 1);  		if ((sw / 90) >= -3) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  	}  	break;  default:  	MessageBox.Show ("AH! Math Error (in RSM' GetPie)");  	throw new Exception ("Math Error");  }  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: switch ((int)(sa / 90)) {  case 0:  	//lower right VI  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  		last = new PointF ((x + width) + 1' (y + height) + 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  	}  	else {  		if ((sa / 90) != 0) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  		pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  		last = new PointF ((x + width) + 1' (y) - 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  	}  	break;  case 1:  	//Lower left III  	sw = (startangle + sweepangle - 90) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  		last = new PointF ((x) - 1' (y + height) + 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  	}  	else {  		if ((sa / 90) != 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  		pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  		last = new PointF ((x + width) + 1' (y + height) + 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  	}  	break;  case 2:  	//Upper left II  	sw = (startangle + sweepangle - 180) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  		last = new PointF ((x) - 1' (y) - 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  	}  	else {  		if ((sa / 90) != 2) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  		pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  		last = new PointF ((x) - 1' (y + height) + 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  	}  	break;  case 3:  	//Upper right  	sw = (startangle + sweepangle + 90) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((int)(sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  		last = new PointF ((x + width) + 1' (y) - 1);  		if (((int)(sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  	}  	else {  		if ((sa / 90) != 3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  		pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  		last = new PointF ((x) - 1' (y) - 1);  		if ((sw / 90) >= -3) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  	}  	break;  default:  	MessageBox.Show ("AH! Math Error (in RSM' GetPie)");  	throw new Exception ("Math Error");  }  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: switch ((int)(sa / 90)) {  case 0:  	//lower right VI  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  		last = new PointF ((x + width) + 1' (y + height) + 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  	}  	else {  		if ((sa / 90) != 0) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  		pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  		last = new PointF ((x + width) + 1' (y) - 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  	}  	break;  case 1:  	//Lower left III  	sw = (startangle + sweepangle - 90) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  		last = new PointF ((x) - 1' (y + height) + 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  	}  	else {  		if ((sa / 90) != 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  		pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  		last = new PointF ((x + width) + 1' (y + height) + 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  	}  	break;  case 2:  	//Upper left II  	sw = (startangle + sweepangle - 180) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  		last = new PointF ((x) - 1' (y) - 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  	}  	else {  		if ((sa / 90) != 2) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  		pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  		last = new PointF ((x) - 1' (y + height) + 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  	}  	break;  case 3:  	//Upper right  	sw = (startangle + sweepangle + 90) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((int)(sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  		last = new PointF ((x + width) + 1' (y) - 1);  		if (((int)(sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  	}  	else {  		if ((sa / 90) != 3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  		pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  		last = new PointF ((x) - 1' (y) - 1);  		if ((sw / 90) >= -3) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  	}  	break;  default:  	MessageBox.Show ("AH! Math Error (in RSM' GetPie)");  	throw new Exception ("Math Error");  }  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: switch ((int)(sa / 90)) {  case 0:  	//lower right VI  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  		last = new PointF ((x + width) + 1' (y + height) + 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  	}  	else {  		if ((sa / 90) != 0) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  		pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  		last = new PointF ((x + width) + 1' (y) - 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  	}  	break;  case 1:  	//Lower left III  	sw = (startangle + sweepangle - 90) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  		last = new PointF ((x) - 1' (y + height) + 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  	}  	else {  		if ((sa / 90) != 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  		pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  		last = new PointF ((x + width) + 1' (y + height) + 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  	}  	break;  case 2:  	//Upper left II  	sw = (startangle + sweepangle - 180) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  		last = new PointF ((x) - 1' (y) - 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  	}  	else {  		if ((sa / 90) != 2) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  		pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  		last = new PointF ((x) - 1' (y + height) + 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  	}  	break;  case 3:  	//Upper right  	sw = (startangle + sweepangle + 90) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((int)(sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  		last = new PointF ((x + width) + 1' (y) - 1);  		if (((int)(sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  	}  	else {  		if ((sa / 90) != 3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  		pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  		last = new PointF ((x) - 1' (y) - 1);  		if ((sw / 90) >= -3) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  	}  	break;  default:  	MessageBox.Show ("AH! Math Error (in RSM' GetPie)");  	throw new Exception ("Math Error");  }  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: switch ((int)(sa / 90)) {  case 0:  	//lower right VI  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  		last = new PointF ((x + width) + 1' (y + height) + 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  	}  	else {  		if ((sa / 90) != 0) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  		pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  		last = new PointF ((x + width) + 1' (y) - 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  	}  	break;  case 1:  	//Lower left III  	sw = (startangle + sweepangle - 90) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  		last = new PointF ((x) - 1' (y + height) + 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  	}  	else {  		if ((sa / 90) != 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  		pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  		last = new PointF ((x + width) + 1' (y + height) + 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  	}  	break;  case 2:  	//Upper left II  	sw = (startangle + sweepangle - 180) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  		last = new PointF ((x) - 1' (y) - 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  	}  	else {  		if ((sa / 90) != 2) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  		pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  		last = new PointF ((x) - 1' (y + height) + 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  	}  	break;  case 3:  	//Upper right  	sw = (startangle + sweepangle + 90) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((int)(sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  		last = new PointF ((x + width) + 1' (y) - 1);  		if (((int)(sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  	}  	else {  		if ((sa / 90) != 3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  		pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  		last = new PointF ((x) - 1' (y) - 1);  		if ((sw / 90) >= -3) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  	}  	break;  default:  	MessageBox.Show ("AH! Math Error (in RSM' GetPie)");  	throw new Exception ("Math Error");  }  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: switch ((int)(sa / 90)) {  case 0:  	//lower right VI  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  		last = new PointF ((x + width) + 1' (y + height) + 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  	}  	else {  		if ((sa / 90) != 0) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  		pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  		last = new PointF ((x + width) + 1' (y) - 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  	}  	break;  case 1:  	//Lower left III  	sw = (startangle + sweepangle - 90) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  		last = new PointF ((x) - 1' (y + height) + 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  	}  	else {  		if ((sa / 90) != 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  		pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  		last = new PointF ((x + width) + 1' (y + height) + 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  	}  	break;  case 2:  	//Upper left II  	sw = (startangle + sweepangle - 180) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  		last = new PointF ((x) - 1' (y) - 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  	}  	else {  		if ((sa / 90) != 2) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  		pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  		last = new PointF ((x) - 1' (y + height) + 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  	}  	break;  case 3:  	//Upper right  	sw = (startangle + sweepangle + 90) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((int)(sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  		last = new PointF ((x + width) + 1' (y) - 1);  		if (((int)(sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  	}  	else {  		if ((sa / 90) != 3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  		pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  		last = new PointF ((x) - 1' (y) - 1);  		if ((sw / 90) >= -3) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  	}  	break;  default:  	MessageBox.Show ("AH! Math Error (in RSM' GetPie)");  	throw new Exception ("Math Error");  }  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: switch ((int)(sa / 90)) {  case 0:  	//lower right VI  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  		last = new PointF ((x + width) + 1' (y + height) + 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  	}  	else {  		if ((sa / 90) != 0) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  		pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  		last = new PointF ((x + width) + 1' (y) - 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  	}  	break;  case 1:  	//Lower left III  	sw = (startangle + sweepangle - 90) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  		last = new PointF ((x) - 1' (y + height) + 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  	}  	else {  		if ((sa / 90) != 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  		pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  		last = new PointF ((x + width) + 1' (y + height) + 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  	}  	break;  case 2:  	//Upper left II  	sw = (startangle + sweepangle - 180) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  		last = new PointF ((x) - 1' (y) - 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  	}  	else {  		if ((sa / 90) != 2) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  		pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  		last = new PointF ((x) - 1' (y + height) + 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  	}  	break;  case 3:  	//Upper right  	sw = (startangle + sweepangle + 90) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((int)(sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  		last = new PointF ((x + width) + 1' (y) - 1);  		if (((int)(sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  	}  	else {  		if ((sa / 90) != 3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  		pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  		last = new PointF ((x) - 1' (y) - 1);  		if ((sw / 90) >= -3) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  	}  	break;  default:  	MessageBox.Show ("AH! Math Error (in RSM' GetPie)");  	throw new Exception ("Math Error");  }  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: switch ((int)(sa / 90)) {  case 0:  	//lower right VI  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  		last = new PointF ((x + width) + 1' (y + height) + 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  	}  	else {  		if ((sa / 90) != 0) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  		pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  		last = new PointF ((x + width) + 1' (y) - 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  	}  	break;  case 1:  	//Lower left III  	sw = (startangle + sweepangle - 90) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  		last = new PointF ((x) - 1' (y + height) + 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  	}  	else {  		if ((sa / 90) != 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  		pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  		last = new PointF ((x + width) + 1' (y + height) + 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  	}  	break;  case 2:  	//Upper left II  	sw = (startangle + sweepangle - 180) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  		last = new PointF ((x) - 1' (y) - 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  	}  	else {  		if ((sa / 90) != 2) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  		pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  		last = new PointF ((x) - 1' (y + height) + 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  	}  	break;  case 3:  	//Upper right  	sw = (startangle + sweepangle + 90) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((int)(sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  		last = new PointF ((x + width) + 1' (y) - 1);  		if (((int)(sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  	}  	else {  		if ((sa / 90) != 3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  		pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  		last = new PointF ((x) - 1' (y) - 1);  		if ((sw / 90) >= -3) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  	}  	break;  default:  	MessageBox.Show ("AH! Math Error (in RSM' GetPie)");  	throw new Exception ("Math Error");  }  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: switch ((int)(sa / 90)) {  case 0:  	//lower right VI  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  		last = new PointF ((x + width) + 1' (y + height) + 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  	}  	else {  		if ((sa / 90) != 0) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  		pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  		last = new PointF ((x + width) + 1' (y) - 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  	}  	break;  case 1:  	//Lower left III  	sw = (startangle + sweepangle - 90) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  		last = new PointF ((x) - 1' (y + height) + 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  	}  	else {  		if ((sa / 90) != 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  		pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  		last = new PointF ((x + width) + 1' (y + height) + 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  	}  	break;  case 2:  	//Upper left II  	sw = (startangle + sweepangle - 180) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  		last = new PointF ((x) - 1' (y) - 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  	}  	else {  		if ((sa / 90) != 2) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  		pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  		last = new PointF ((x) - 1' (y + height) + 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  	}  	break;  case 3:  	//Upper right  	sw = (startangle + sweepangle + 90) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((int)(sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  		last = new PointF ((x + width) + 1' (y) - 1);  		if (((int)(sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  	}  	else {  		if ((sa / 90) != 3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  		pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  		last = new PointF ((x) - 1' (y) - 1);  		if ((sw / 90) >= -3) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  	}  	break;  default:  	MessageBox.Show ("AH! Math Error (in RSM' GetPie)");  	throw new Exception ("Math Error");  }  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: switch ((int)(sa / 90)) {  case 0:  	//lower right VI  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  		last = new PointF ((x + width) + 1' (y + height) + 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  	}  	else {  		if ((sa / 90) != 0) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  		pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  		last = new PointF ((x + width) + 1' (y) - 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  	}  	break;  case 1:  	//Lower left III  	sw = (startangle + sweepangle - 90) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  		last = new PointF ((x) - 1' (y + height) + 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  	}  	else {  		if ((sa / 90) != 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  		pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  		last = new PointF ((x + width) + 1' (y + height) + 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  	}  	break;  case 2:  	//Upper left II  	sw = (startangle + sweepangle - 180) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  		last = new PointF ((x) - 1' (y) - 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  	}  	else {  		if ((sa / 90) != 2) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  		pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  		last = new PointF ((x) - 1' (y + height) + 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  	}  	break;  case 3:  	//Upper right  	sw = (startangle + sweepangle + 90) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((int)(sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  		last = new PointF ((x + width) + 1' (y) - 1);  		if (((int)(sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  	}  	else {  		if ((sa / 90) != 3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  		pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  		last = new PointF ((x) - 1' (y) - 1);  		if ((sw / 90) >= -3) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  	}  	break;  default:  	MessageBox.Show ("AH! Math Error (in RSM' GetPie)");  	throw new Exception ("Math Error");  }  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: switch ((int)(sa / 90)) {  case 0:  	//lower right VI  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  		last = new PointF ((x + width) + 1' (y + height) + 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  	}  	else {  		if ((sa / 90) != 0) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  		pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  		last = new PointF ((x + width) + 1' (y) - 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  	}  	break;  case 1:  	//Lower left III  	sw = (startangle + sweepangle - 90) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  		last = new PointF ((x) - 1' (y + height) + 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  	}  	else {  		if ((sa / 90) != 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  		pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  		last = new PointF ((x + width) + 1' (y + height) + 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  	}  	break;  case 2:  	//Upper left II  	sw = (startangle + sweepangle - 180) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  		last = new PointF ((x) - 1' (y) - 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  	}  	else {  		if ((sa / 90) != 2) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  		pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  		last = new PointF ((x) - 1' (y + height) + 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  	}  	break;  case 3:  	//Upper right  	sw = (startangle + sweepangle + 90) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((int)(sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  		last = new PointF ((x + width) + 1' (y) - 1);  		if (((int)(sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  	}  	else {  		if ((sa / 90) != 3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  		pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  		last = new PointF ((x) - 1' (y) - 1);  		if ((sw / 90) >= -3) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  	}  	break;  default:  	MessageBox.Show ("AH! Math Error (in RSM' GetPie)");  	throw new Exception ("Math Error");  }  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: switch ((int)(sa / 90)) {  case 0:  	//lower right VI  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  		last = new PointF ((x + width) + 1' (y + height) + 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  	}  	else {  		if ((sa / 90) != 0) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  		pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  		last = new PointF ((x + width) + 1' (y) - 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  	}  	break;  case 1:  	//Lower left III  	sw = (startangle + sweepangle - 90) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  		last = new PointF ((x) - 1' (y + height) + 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  	}  	else {  		if ((sa / 90) != 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  		pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  		last = new PointF ((x + width) + 1' (y + height) + 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  	}  	break;  case 2:  	//Upper left II  	sw = (startangle + sweepangle - 180) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  		last = new PointF ((x) - 1' (y) - 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  	}  	else {  		if ((sa / 90) != 2) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  		pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  		last = new PointF ((x) - 1' (y + height) + 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  	}  	break;  case 3:  	//Upper right  	sw = (startangle + sweepangle + 90) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((int)(sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  		last = new PointF ((x + width) + 1' (y) - 1);  		if (((int)(sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  	}  	else {  		if ((sa / 90) != 3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  		pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  		last = new PointF ((x) - 1' (y) - 1);  		if ((sw / 90) >= -3) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  	}  	break;  default:  	MessageBox.Show ("AH! Math Error (in RSM' GetPie)");  	throw new Exception ("Math Error");  }  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: switch ((int)(sa / 90)) {  case 0:  	//lower right VI  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  		last = new PointF ((x + width) + 1' (y + height) + 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  	}  	else {  		if ((sa / 90) != 0) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  		pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  		last = new PointF ((x + width) + 1' (y) - 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  	}  	break;  case 1:  	//Lower left III  	sw = (startangle + sweepangle - 90) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  		last = new PointF ((x) - 1' (y + height) + 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  	}  	else {  		if ((sa / 90) != 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  		pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  		last = new PointF ((x + width) + 1' (y + height) + 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  	}  	break;  case 2:  	//Upper left II  	sw = (startangle + sweepangle - 180) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  		last = new PointF ((x) - 1' (y) - 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  	}  	else {  		if ((sa / 90) != 2) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  		pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  		last = new PointF ((x) - 1' (y + height) + 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  	}  	break;  case 3:  	//Upper right  	sw = (startangle + sweepangle + 90) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((int)(sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  		last = new PointF ((x + width) + 1' (y) - 1);  		if (((int)(sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  	}  	else {  		if ((sa / 90) != 3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  		pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  		last = new PointF ((x) - 1' (y) - 1);  		if ((sw / 90) >= -3) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  	}  	break;  default:  	MessageBox.Show ("AH! Math Error (in RSM' GetPie)");  	throw new Exception ("Math Error");  }  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: switch ((int)(sa / 90)) {  case 0:  	//lower right VI  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  		last = new PointF ((x + width) + 1' (y + height) + 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  	}  	else {  		if ((sa / 90) != 0) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  		pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  		last = new PointF ((x + width) + 1' (y) - 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  	}  	break;  case 1:  	//Lower left III  	sw = (startangle + sweepangle - 90) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  		last = new PointF ((x) - 1' (y + height) + 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  	}  	else {  		if ((sa / 90) != 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  		pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  		last = new PointF ((x + width) + 1' (y + height) + 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  	}  	break;  case 2:  	//Upper left II  	sw = (startangle + sweepangle - 180) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  		last = new PointF ((x) - 1' (y) - 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  	}  	else {  		if ((sa / 90) != 2) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  		pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  		last = new PointF ((x) - 1' (y + height) + 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  	}  	break;  case 3:  	//Upper right  	sw = (startangle + sweepangle + 90) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((int)(sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  		last = new PointF ((x + width) + 1' (y) - 1);  		if (((int)(sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  	}  	else {  		if ((sa / 90) != 3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  		pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  		last = new PointF ((x) - 1' (y) - 1);  		if ((sw / 90) >= -3) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  	}  	break;  default:  	MessageBox.Show ("AH! Math Error (in RSM' GetPie)");  	throw new Exception ("Math Error");  }  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: switch ((int)(sa / 90)) {  case 0:  	//lower right VI  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  		last = new PointF ((x + width) + 1' (y + height) + 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  	}  	else {  		if ((sa / 90) != 0) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  		pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  		last = new PointF ((x + width) + 1' (y) - 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  	}  	break;  case 1:  	//Lower left III  	sw = (startangle + sweepangle - 90) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  		last = new PointF ((x) - 1' (y + height) + 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  	}  	else {  		if ((sa / 90) != 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  		pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  		last = new PointF ((x + width) + 1' (y + height) + 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  	}  	break;  case 2:  	//Upper left II  	sw = (startangle + sweepangle - 180) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  		last = new PointF ((x) - 1' (y) - 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  	}  	else {  		if ((sa / 90) != 2) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  		pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  		last = new PointF ((x) - 1' (y + height) + 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  	}  	break;  case 3:  	//Upper right  	sw = (startangle + sweepangle + 90) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((int)(sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  		last = new PointF ((x + width) + 1' (y) - 1);  		if (((int)(sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  	}  	else {  		if ((sa / 90) != 3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  		pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  		last = new PointF ((x) - 1' (y) - 1);  		if ((sw / 90) >= -3) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  	}  	break;  default:  	MessageBox.Show ("AH! Math Error (in RSM' GetPie)");  	throw new Exception ("Math Error");  }  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: switch ((int)(sa / 90)) {  case 0:  	//lower right VI  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  		last = new PointF ((x + width) + 1' (y + height) + 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  	}  	else {  		if ((sa / 90) != 0) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  		pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  		last = new PointF ((x + width) + 1' (y) - 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  	}  	break;  case 1:  	//Lower left III  	sw = (startangle + sweepangle - 90) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  		last = new PointF ((x) - 1' (y + height) + 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  	}  	else {  		if ((sa / 90) != 1) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  		pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  		last = new PointF ((x + width) + 1' (y + height) + 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  	}  	break;  case 2:  	//Upper left II  	sw = (startangle + sweepangle - 180) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  		last = new PointF ((x) - 1' (y) - 1);  		if (((sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  	}  	else {  		if ((sa / 90) != 2) {  			pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  			last = new PointF ((x) - 1' (y) - 1);  		}  		pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  		last = new PointF ((x) - 1' (y + height) + 1);  		if (((sw / 90)) >= -3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  	}  	break;  case 3:  	//Upper right  	sw = (startangle + sweepangle + 90) % 360;  	while (sw < 0)  		sw += 360;  	if (sw == 180) {  		if (sweepangle < 0) {  			sw = -180;  		}  	}  	else if (sw > 180)  		sw = -sw;  	if (((int)(sw / 90)) >= 0) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  		last = new PointF ((x + width) + 1' (y) - 1);  		if (((int)(sw / 90)) >= 1) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  			last = new PointF ((x + width) + 1' (y + height) + 1);  		}  	}  	else {  		if ((sa / 90) != 3) {  			pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  			last = new PointF ((x + width) + 1' (y) - 1);  		}  		pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  		last = new PointF ((x) - 1' (y) - 1);  		if ((sw / 90) >= -3) {  			pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  			last = new PointF ((x) - 1' (y + height) + 1);  		}  	}  	break;  default:  	MessageBox.Show ("AH! Math Error (in RSM' GetPie)");  	throw new Exception ("Math Error");  }  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: if (((sw / 90)) >= 0) {  	pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  	last = new PointF ((x + width) + 1' (y + height) + 1);  	if (((sw / 90)) >= 1) {  		pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  		last = new PointF ((x) - 1' (y + height) + 1);  	}  }  else {  	if ((sa / 90) != 0) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  		last = new PointF ((x + width) + 1' (y + height) + 1);  	}  	pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  	last = new PointF ((x + width) + 1' (y) - 1);  	if (((sw / 90)) >= -3) {  		pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  		last = new PointF ((x) - 1' (y) - 1);  	}  }  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: if (((sw / 90)) >= 0) {  	pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  	last = new PointF ((x + width) + 1' (y + height) + 1);  	if (((sw / 90)) >= 1) {  		pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  		last = new PointF ((x) - 1' (y + height) + 1);  	}  }  else {  	if ((sa / 90) != 0) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  		last = new PointF ((x + width) + 1' (y + height) + 1);  	}  	pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  	last = new PointF ((x + width) + 1' (y) - 1);  	if (((sw / 90)) >= -3) {  		pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  		last = new PointF ((x) - 1' (y) - 1);  	}  }  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: if (((sw / 90)) >= 0) {  	pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  	last = new PointF ((x + width) + 1' (y + height) + 1);  	if (((sw / 90)) >= 1) {  		pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  		last = new PointF ((x) - 1' (y + height) + 1);  	}  }  else {  	if ((sa / 90) != 0) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  		last = new PointF ((x + width) + 1' (y + height) + 1);  	}  	pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  	last = new PointF ((x + width) + 1' (y) - 1);  	if (((sw / 90)) >= -3) {  		pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  		last = new PointF ((x) - 1' (y) - 1);  	}  }  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: if (((sw / 90)) >= 0) {  	pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  	last = new PointF ((x + width) + 1' (y + height) + 1);  	if (((sw / 90)) >= 1) {  		pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  		last = new PointF ((x) - 1' (y + height) + 1);  	}  }  else {  	if ((sa / 90) != 0) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  		last = new PointF ((x + width) + 1' (y + height) + 1);  	}  	pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  	last = new PointF ((x + width) + 1' (y) - 1);  	if (((sw / 90)) >= -3) {  		pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  		last = new PointF ((x) - 1' (y) - 1);  	}  }  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: if (((sw / 90)) >= 0) {  	pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  	last = new PointF ((x + width) + 1' (y + height) + 1);  	if (((sw / 90)) >= 1) {  		pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  		last = new PointF ((x) - 1' (y + height) + 1);  	}  }  else {  	if ((sa / 90) != 0) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  		last = new PointF ((x + width) + 1' (y + height) + 1);  	}  	pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  	last = new PointF ((x + width) + 1' (y) - 1);  	if (((sw / 90)) >= -3) {  		pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  		last = new PointF ((x) - 1' (y) - 1);  	}  }  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: if (((sw / 90)) >= 1) {  	pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  	last = new PointF ((x) - 1' (y + height) + 1);  }  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: if ((sa / 90) != 0) {  	pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  	last = new PointF ((x + width) + 1' (y + height) + 1);  }  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: if (((sw / 90)) >= -3) {  	pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  	last = new PointF ((x) - 1' (y) - 1);  }  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: if (((sw / 90)) >= -3) {  	pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  	last = new PointF ((x) - 1' (y) - 1);  }  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: sw = (startangle + sweepangle - 90) % 360;  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: sw = (startangle + sweepangle - 90) % 360;  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: while (sw < 0)  	sw += 360;  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: sw += 360;  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: if (sw == 180) {  	if (sweepangle < 0) {  		sw = -180;  	}  }  else if (sw > 180)  	sw = -sw;  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: if (sw == 180) {  	if (sweepangle < 0) {  		sw = -180;  	}  }  else if (sw > 180)  	sw = -sw;  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: if (sw == 180) {  	if (sweepangle < 0) {  		sw = -180;  	}  }  else if (sw > 180)  	sw = -sw;  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: if (sweepangle < 0) {  	sw = -180;  }  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: sw = -180;  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: if (sw > 180)  	sw = -sw;  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: if (((sw / 90)) >= 0) {  	pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  	last = new PointF ((x) - 1' (y + height) + 1);  	if (((sw / 90)) >= 1) {  		pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  		last = new PointF ((x) - 1' (y) - 1);  	}  }  else {  	if ((sa / 90) != 1) {  		pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  		last = new PointF ((x) - 1' (y + height) + 1);  	}  	pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  	last = new PointF ((x + width) + 1' (y + height) + 1);  	if (((sw / 90)) >= -3) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  		last = new PointF ((x + width) + 1' (y) - 1);  	}  }  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: if (((sw / 90)) >= 0) {  	pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  	last = new PointF ((x) - 1' (y + height) + 1);  	if (((sw / 90)) >= 1) {  		pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  		last = new PointF ((x) - 1' (y) - 1);  	}  }  else {  	if ((sa / 90) != 1) {  		pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  		last = new PointF ((x) - 1' (y + height) + 1);  	}  	pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  	last = new PointF ((x + width) + 1' (y + height) + 1);  	if (((sw / 90)) >= -3) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  		last = new PointF ((x + width) + 1' (y) - 1);  	}  }  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: if (((sw / 90)) >= 0) {  	pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  	last = new PointF ((x) - 1' (y + height) + 1);  	if (((sw / 90)) >= 1) {  		pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  		last = new PointF ((x) - 1' (y) - 1);  	}  }  else {  	if ((sa / 90) != 1) {  		pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  		last = new PointF ((x) - 1' (y + height) + 1);  	}  	pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  	last = new PointF ((x + width) + 1' (y + height) + 1);  	if (((sw / 90)) >= -3) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  		last = new PointF ((x + width) + 1' (y) - 1);  	}  }  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: if (((sw / 90)) >= 0) {  	pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  	last = new PointF ((x) - 1' (y + height) + 1);  	if (((sw / 90)) >= 1) {  		pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  		last = new PointF ((x) - 1' (y) - 1);  	}  }  else {  	if ((sa / 90) != 1) {  		pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  		last = new PointF ((x) - 1' (y + height) + 1);  	}  	pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  	last = new PointF ((x + width) + 1' (y + height) + 1);  	if (((sw / 90)) >= -3) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  		last = new PointF ((x + width) + 1' (y) - 1);  	}  }  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: if (((sw / 90)) >= 0) {  	pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  	last = new PointF ((x) - 1' (y + height) + 1);  	if (((sw / 90)) >= 1) {  		pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  		last = new PointF ((x) - 1' (y) - 1);  	}  }  else {  	if ((sa / 90) != 1) {  		pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  		last = new PointF ((x) - 1' (y + height) + 1);  	}  	pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  	last = new PointF ((x + width) + 1' (y + height) + 1);  	if (((sw / 90)) >= -3) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  		last = new PointF ((x + width) + 1' (y) - 1);  	}  }  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: if (((sw / 90)) >= 1) {  	pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  	last = new PointF ((x) - 1' (y) - 1);  }  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: if ((sa / 90) != 1) {  	pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  	last = new PointF ((x) - 1' (y + height) + 1);  }  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: if (((sw / 90)) >= -3) {  	pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  	last = new PointF ((x + width) + 1' (y) - 1);  }  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: if (((sw / 90)) >= -3) {  	pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  	last = new PointF ((x + width) + 1' (y) - 1);  }  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: sw = (startangle + sweepangle - 180) % 360;  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: sw = (startangle + sweepangle - 180) % 360;  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: while (sw < 0)  	sw += 360;  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: sw += 360;  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: if (sw == 180) {  	if (sweepangle < 0) {  		sw = -180;  	}  }  else if (sw > 180)  	sw = -sw;  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: if (sw == 180) {  	if (sweepangle < 0) {  		sw = -180;  	}  }  else if (sw > 180)  	sw = -sw;  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: if (sw == 180) {  	if (sweepangle < 0) {  		sw = -180;  	}  }  else if (sw > 180)  	sw = -sw;  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: if (sweepangle < 0) {  	sw = -180;  }  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: sw = -180;  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: if (sw > 180)  	sw = -sw;  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: if (((sw / 90)) >= 0) {  	pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  	last = new PointF ((x) - 1' (y) - 1);  	if (((sw / 90)) >= 1) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  		last = new PointF ((x + width) + 1' (y) - 1);  	}  }  else {  	if ((sa / 90) != 2) {  		pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  		last = new PointF ((x) - 1' (y) - 1);  	}  	pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  	last = new PointF ((x) - 1' (y + height) + 1);  	if (((sw / 90)) >= -3) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  		last = new PointF ((x + width) + 1' (y + height) + 1);  	}  }  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: if (((sw / 90)) >= 0) {  	pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  	last = new PointF ((x) - 1' (y) - 1);  	if (((sw / 90)) >= 1) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  		last = new PointF ((x + width) + 1' (y) - 1);  	}  }  else {  	if ((sa / 90) != 2) {  		pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  		last = new PointF ((x) - 1' (y) - 1);  	}  	pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  	last = new PointF ((x) - 1' (y + height) + 1);  	if (((sw / 90)) >= -3) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  		last = new PointF ((x + width) + 1' (y + height) + 1);  	}  }  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: if (((sw / 90)) >= 0) {  	pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  	last = new PointF ((x) - 1' (y) - 1);  	if (((sw / 90)) >= 1) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  		last = new PointF ((x + width) + 1' (y) - 1);  	}  }  else {  	if ((sa / 90) != 2) {  		pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  		last = new PointF ((x) - 1' (y) - 1);  	}  	pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  	last = new PointF ((x) - 1' (y + height) + 1);  	if (((sw / 90)) >= -3) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  		last = new PointF ((x + width) + 1' (y + height) + 1);  	}  }  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: if (((sw / 90)) >= 0) {  	pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  	last = new PointF ((x) - 1' (y) - 1);  	if (((sw / 90)) >= 1) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  		last = new PointF ((x + width) + 1' (y) - 1);  	}  }  else {  	if ((sa / 90) != 2) {  		pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  		last = new PointF ((x) - 1' (y) - 1);  	}  	pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  	last = new PointF ((x) - 1' (y + height) + 1);  	if (((sw / 90)) >= -3) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  		last = new PointF ((x + width) + 1' (y + height) + 1);  	}  }  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: if (((sw / 90)) >= 0) {  	pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  	last = new PointF ((x) - 1' (y) - 1);  	if (((sw / 90)) >= 1) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  		last = new PointF ((x + width) + 1' (y) - 1);  	}  }  else {  	if ((sa / 90) != 2) {  		pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  		last = new PointF ((x) - 1' (y) - 1);  	}  	pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  	last = new PointF ((x) - 1' (y + height) + 1);  	if (((sw / 90)) >= -3) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  		last = new PointF ((x + width) + 1' (y + height) + 1);  	}  }  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: if (((sw / 90)) >= 0) {  	pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  	last = new PointF ((x) - 1' (y) - 1);  	if (((sw / 90)) >= 1) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  		last = new PointF ((x + width) + 1' (y) - 1);  	}  }  else {  	if ((sa / 90) != 2) {  		pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  		last = new PointF ((x) - 1' (y) - 1);  	}  	pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  	last = new PointF ((x) - 1' (y + height) + 1);  	if (((sw / 90)) >= -3) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  		last = new PointF ((x + width) + 1' (y + height) + 1);  	}  }  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: if (((sw / 90)) >= 1) {  	pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  	last = new PointF ((x + width) + 1' (y) - 1);  }  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: if ((sa / 90) != 2) {  	pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  	last = new PointF ((x) - 1' (y) - 1);  }  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: if ((sa / 90) != 2) {  	pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  	last = new PointF ((x) - 1' (y) - 1);  }  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: if (((sw / 90)) >= -3) {  	pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  	last = new PointF ((x + width) + 1' (y + height) + 1);  }  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: if (((sw / 90)) >= -3) {  	pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  	last = new PointF ((x + width) + 1' (y + height) + 1);  }  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: sw = (startangle + sweepangle + 90) % 360;  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: sw = (startangle + sweepangle + 90) % 360;  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: while (sw < 0)  	sw += 360;  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: sw += 360;  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: if (sw == 180) {  	if (sweepangle < 0) {  		sw = -180;  	}  }  else if (sw > 180)  	sw = -sw;  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: if (sw == 180) {  	if (sweepangle < 0) {  		sw = -180;  	}  }  else if (sw > 180)  	sw = -sw;  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: if (sw == 180) {  	if (sweepangle < 0) {  		sw = -180;  	}  }  else if (sw > 180)  	sw = -sw;  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: if (sweepangle < 0) {  	sw = -180;  }  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: sw = -180;  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: if (sw > 180)  	sw = -sw;  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: if (((int)(sw / 90)) >= 0) {  	pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  	last = new PointF ((x + width) + 1' (y) - 1);  	if (((int)(sw / 90)) >= 1) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  		last = new PointF ((x + width) + 1' (y + height) + 1);  	}  }  else {  	if ((sa / 90) != 3) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  		last = new PointF ((x + width) + 1' (y) - 1);  	}  	pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  	last = new PointF ((x) - 1' (y) - 1);  	if ((sw / 90) >= -3) {  		pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  		last = new PointF ((x) - 1' (y + height) + 1);  	}  }  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: if (((int)(sw / 90)) >= 0) {  	pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  	last = new PointF ((x + width) + 1' (y) - 1);  	if (((int)(sw / 90)) >= 1) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  		last = new PointF ((x + width) + 1' (y + height) + 1);  	}  }  else {  	if ((sa / 90) != 3) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  		last = new PointF ((x + width) + 1' (y) - 1);  	}  	pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  	last = new PointF ((x) - 1' (y) - 1);  	if ((sw / 90) >= -3) {  		pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  		last = new PointF ((x) - 1' (y + height) + 1);  	}  }  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: if (((int)(sw / 90)) >= 0) {  	pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  	last = new PointF ((x + width) + 1' (y) - 1);  	if (((int)(sw / 90)) >= 1) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  		last = new PointF ((x + width) + 1' (y + height) + 1);  	}  }  else {  	if ((sa / 90) != 3) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  		last = new PointF ((x + width) + 1' (y) - 1);  	}  	pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  	last = new PointF ((x) - 1' (y) - 1);  	if ((sw / 90) >= -3) {  		pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  		last = new PointF ((x) - 1' (y + height) + 1);  	}  }  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: if (((int)(sw / 90)) >= 0) {  	pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  	last = new PointF ((x + width) + 1' (y) - 1);  	if (((int)(sw / 90)) >= 1) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  		last = new PointF ((x + width) + 1' (y + height) + 1);  	}  }  else {  	if ((sa / 90) != 3) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  		last = new PointF ((x + width) + 1' (y) - 1);  	}  	pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  	last = new PointF ((x) - 1' (y) - 1);  	if ((sw / 90) >= -3) {  		pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  		last = new PointF ((x) - 1' (y + height) + 1);  	}  }  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: if (((int)(sw / 90)) >= 0) {  	pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  	last = new PointF ((x + width) + 1' (y) - 1);  	if (((int)(sw / 90)) >= 1) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  		last = new PointF ((x + width) + 1' (y + height) + 1);  	}  }  else {  	if ((sa / 90) != 3) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  		last = new PointF ((x + width) + 1' (y) - 1);  	}  	pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  	last = new PointF ((x) - 1' (y) - 1);  	if ((sw / 90) >= -3) {  		pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  		last = new PointF ((x) - 1' (y + height) + 1);  	}  }  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: if (((int)(sw / 90)) >= 0) {  	pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  	last = new PointF ((x + width) + 1' (y) - 1);  	if (((int)(sw / 90)) >= 1) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  		last = new PointF ((x + width) + 1' (y + height) + 1);  	}  }  else {  	if ((sa / 90) != 3) {  		pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  		last = new PointF ((x + width) + 1' (y) - 1);  	}  	pe.AddLine (last' new PointF ((x) - 1' (y) - 1));  	last = new PointF ((x) - 1' (y) - 1);  	if ((sw / 90) >= -3) {  		pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  		last = new PointF ((x) - 1' (y + height) + 1);  	}  }  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: if (((int)(sw / 90)) >= 1) {  	pe.AddLine (last' new PointF ((x + width) + 1' (y + height) + 1));  	last = new PointF ((x + width) + 1' (y + height) + 1);  }  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: if ((sa / 90) != 3) {  	pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  	last = new PointF ((x + width) + 1' (y) - 1);  }  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: if ((sa / 90) != 3) {  	pe.AddLine (last' new PointF ((x + width) + 1' (y) - 1));  	last = new PointF ((x + width) + 1' (y) - 1);  }  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: if ((sw / 90) >= -3) {  	pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  	last = new PointF ((x) - 1' (y + height) + 1);  }  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: if ((sw / 90) >= -3) {  	pe.AddLine (last' new PointF ((x) - 1' (y + height) + 1));  	last = new PointF ((x) - 1' (y + height) + 1);  }  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: last = new PointF ((float)Math.Cos ((startangle + sweepangle) * Math.PI / 180) * (width / 2) + x + (width / 2)' (float)Math.Sin ((startangle + sweepangle) * Math.PI / 180) * (height / 2) + y + (height / 2));  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: last = new PointF ((float)Math.Cos ((startangle + sweepangle) * Math.PI / 180) * (width / 2) + x + (width / 2)' (float)Math.Sin ((startangle + sweepangle) * Math.PI / 180) * (height / 2) + y + (height / 2));  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: last = new PointF ((float)Math.Cos ((startangle + sweepangle) * Math.PI / 180) * (width / 2) + x + (width / 2)' (float)Math.Sin ((startangle + sweepangle) * Math.PI / 180) * (height / 2) + y + (height / 2));  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: last = new PointF ((float)Math.Cos ((startangle + sweepangle) * Math.PI / 180) * (width / 2) + x + (width / 2)' (float)Math.Sin ((startangle + sweepangle) * Math.PI / 180) * (height / 2) + y + (height / 2));  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: last = new PointF ((float)Math.Cos ((startangle + sweepangle) * Math.PI / 180) * (width / 2) + x + (width / 2)' (float)Math.Sin ((startangle + sweepangle) * Math.PI / 180) * (height / 2) + y + (height / 2));  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: last = new PointF ((float)Math.Cos ((startangle + sweepangle) * Math.PI / 180) * (width / 2) + x + (width / 2)' (float)Math.Sin ((startangle + sweepangle) * Math.PI / 180) * (height / 2) + y + (height / 2));  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: pe.AddLine (last' new PointF ((x + width / 2)' (y + height / 2)));  
Magic Number,System451.Communication.Dashboard.Controls,RoundSpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\SpeedMeter.cs,GetPie,The following statement contains a magic number: pe.AddLine (last' new PointF ((x + width / 2)' (y + height / 2)));  
Magic Number,System451.Communication.Dashboard.Controls,StatusLabel,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\StatusLabel.cs,StatusLabel,The following statement contains a magic number: if (this.DesignMode || LicenseManager.UsageMode == LicenseUsageMode.Designtime) {  	this.LocationChanged += new EventHandler (StatusLabel_LocationChanged);  	this.Width = 100;  	this.Height = 100;  	this.Resize += new EventHandler (StatusLabel_Resize);  	base.AutoSize = false;  	t = new Timer ();  	t.Interval = 100;  	t.Tick += new EventHandler (t_Tick);  }  else  	base.AutoSize = true;  
Magic Number,System451.Communication.Dashboard.Controls,StatusLabel,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\StatusLabel.cs,StatusLabel,The following statement contains a magic number: if (this.DesignMode || LicenseManager.UsageMode == LicenseUsageMode.Designtime) {  	this.LocationChanged += new EventHandler (StatusLabel_LocationChanged);  	this.Width = 100;  	this.Height = 100;  	this.Resize += new EventHandler (StatusLabel_Resize);  	base.AutoSize = false;  	t = new Timer ();  	t.Interval = 100;  	t.Tick += new EventHandler (t_Tick);  }  else  	base.AutoSize = true;  
Magic Number,System451.Communication.Dashboard.Controls,StatusLabel,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\StatusLabel.cs,StatusLabel,The following statement contains a magic number: if (this.DesignMode || LicenseManager.UsageMode == LicenseUsageMode.Designtime) {  	this.LocationChanged += new EventHandler (StatusLabel_LocationChanged);  	this.Width = 100;  	this.Height = 100;  	this.Resize += new EventHandler (StatusLabel_Resize);  	base.AutoSize = false;  	t = new Timer ();  	t.Interval = 100;  	t.Tick += new EventHandler (t_Tick);  }  else  	base.AutoSize = true;  
Magic Number,System451.Communication.Dashboard.Controls,StatusLabel,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\StatusLabel.cs,StatusLabel,The following statement contains a magic number: this.Width = 100;  
Magic Number,System451.Communication.Dashboard.Controls,StatusLabel,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\StatusLabel.cs,StatusLabel,The following statement contains a magic number: this.Height = 100;  
Magic Number,System451.Communication.Dashboard.Controls,StatusLabel,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\StatusLabel.cs,StatusLabel,The following statement contains a magic number: t.Interval = 100;  
Magic Number,System451.Communication.Dashboard.Controls,TacoMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\TacoMeter.cs,TacoMeter_Paint,The following statement contains a magic number: if (Math.Abs (Value) > 1) {  	if (Value == -999.99) {  	}  	else {  		Value = (Value < -1) ? -1 : 1;  	}  }  
Magic Number,System451.Communication.Dashboard.Controls,TacoMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\TacoMeter.cs,TacoMeter_Paint,The following statement contains a magic number: if (Value == -999.99) {  }  else {  	Value = (Value < -1) ? -1 : 1;  }  
Magic Number,System451.Communication.Dashboard.Controls,TacoMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\TacoMeter.cs,TacoMeter_Paint,The following statement contains a magic number: using (TextureBrush fullTaco = new TextureBrush (Resources.TacoFull_small21))  	e.Graphics.FillPie (fullTaco' 0f' 0f' 400f' 434f' -180f' (Value * 90f) + 90);  
Magic Number,System451.Communication.Dashboard.Controls,TacoMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\TacoMeter.cs,TacoMeter_Paint,The following statement contains a magic number: e.Graphics.FillPie (fullTaco' 0f' 0f' 400f' 434f' -180f' (Value * 90f) + 90);  
Magic Number,System451.Communication.Dashboard.Controls,CameraView,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\CameraView.Designer.cs,InitializeComponent,The following statement contains a magic number: this.timer1.Interval = 5000;  
Magic Number,System451.Communication.Dashboard.Controls,CameraView,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\CameraView.Designer.cs,InitializeComponent,The following statement contains a magic number: this.checkBox1.Location = new System.Drawing.Point (0' 467);  
Magic Number,System451.Communication.Dashboard.Controls,CameraView,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\CameraView.Designer.cs,InitializeComponent,The following statement contains a magic number: this.checkBox1.Size = new System.Drawing.Size (15' 14);  
Magic Number,System451.Communication.Dashboard.Controls,CameraView,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\CameraView.Designer.cs,InitializeComponent,The following statement contains a magic number: this.checkBox1.Size = new System.Drawing.Size (15' 14);  
Magic Number,System451.Communication.Dashboard.Controls,CameraView,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\CameraView.Designer.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size (640' 480);  
Magic Number,System451.Communication.Dashboard.Controls,CameraView,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\CameraView.Designer.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size (640' 480);  
Magic Number,System451.Communication.Dashboard.Controls,VarValue,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\VarValue.cs,UpdateControl,The following statement contains a magic number: foreach (string item in vars) {  	if (item.StartsWith ("dbg-"))  		UpdateControl (item.Substring (4));  }  
Magic Number,System451.Communication.Dashboard.Controls,VarValue,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\VarValue.cs,UpdateControl,The following statement contains a magic number: if (item.StartsWith ("dbg-"))  	UpdateControl (item.Substring (4));  
Magic Number,System451.Communication.Dashboard.Controls,VarValue,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\VarValue.cs,UpdateControl,The following statement contains a magic number: UpdateControl (item.Substring (4));  
Magic Number,System451.Communication.Dashboard.Controls,VirtualdAnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\VirtualdAnalogMeter.cs,CreateBackground,The following statement contains a magic number: if (stretch)  	meterLocation = new Rectangle (framePadding.Left' framePadding.Top' Width - framePadding.Horizontal' Height - framePadding.Vertical);  else  	meterLocation = new Rectangle (framePadding.Left' framePadding.Top' Width - framePadding.Horizontal' internalPadding.Vertical + Width / 2 - framePadding.Top);  
Magic Number,System451.Communication.Dashboard.Controls,VirtualdAnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\VirtualdAnalogMeter.cs,CreateBackground,The following statement contains a magic number: meterLocation = new Rectangle (framePadding.Left' framePadding.Top' Width - framePadding.Horizontal' internalPadding.Vertical + Width / 2 - framePadding.Top);  
Magic Number,System451.Communication.Dashboard.Controls,VirtualdAnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\VirtualdAnalogMeter.cs,CreateBackground,The following statement contains a magic number: r1x = (float)(meterLocation.Width - internalPadding.Horizontal) / 2;  
Magic Number,System451.Communication.Dashboard.Controls,VirtualdAnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\VirtualdAnalogMeter.cs,CreateBackground,The following statement contains a magic number: if (tickLargeFrequency > 0) {  	using (Pen p = new Pen (ForeColor' tickLargeWidth)) {  		r2x = r1x - tickLargeSize;  		r2y = r1y - tickLargeSize;  		float r3x = r2x - Font.Height;  		float r3y = r2y - Font.Height;  		for (i = minValue; i <= maxValue; i += tickLargeFrequency) {  			PointF[] pts = GetLine (i' r1x' r1y' r2x' r2y);  			g.DrawLine (p' pts [0]' pts [1]);  			SizeF sz = g.MeasureString (i.ToString ()' Font);  			pts = GetLine (i' r1x' r1y' r3x' r3y);  			g.DrawString (i.ToString ()' Font' p.Brush' pts [1].X - sz.Width / 2' pts [1].Y - sz.Height / 2);  		}  	}  }  
Magic Number,System451.Communication.Dashboard.Controls,VirtualdAnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\VirtualdAnalogMeter.cs,CreateBackground,The following statement contains a magic number: if (tickLargeFrequency > 0) {  	using (Pen p = new Pen (ForeColor' tickLargeWidth)) {  		r2x = r1x - tickLargeSize;  		r2y = r1y - tickLargeSize;  		float r3x = r2x - Font.Height;  		float r3y = r2y - Font.Height;  		for (i = minValue; i <= maxValue; i += tickLargeFrequency) {  			PointF[] pts = GetLine (i' r1x' r1y' r2x' r2y);  			g.DrawLine (p' pts [0]' pts [1]);  			SizeF sz = g.MeasureString (i.ToString ()' Font);  			pts = GetLine (i' r1x' r1y' r3x' r3y);  			g.DrawString (i.ToString ()' Font' p.Brush' pts [1].X - sz.Width / 2' pts [1].Y - sz.Height / 2);  		}  	}  }  
Magic Number,System451.Communication.Dashboard.Controls,VirtualdAnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\VirtualdAnalogMeter.cs,CreateBackground,The following statement contains a magic number: using (Pen p = new Pen (ForeColor' tickLargeWidth)) {  	r2x = r1x - tickLargeSize;  	r2y = r1y - tickLargeSize;  	float r3x = r2x - Font.Height;  	float r3y = r2y - Font.Height;  	for (i = minValue; i <= maxValue; i += tickLargeFrequency) {  		PointF[] pts = GetLine (i' r1x' r1y' r2x' r2y);  		g.DrawLine (p' pts [0]' pts [1]);  		SizeF sz = g.MeasureString (i.ToString ()' Font);  		pts = GetLine (i' r1x' r1y' r3x' r3y);  		g.DrawString (i.ToString ()' Font' p.Brush' pts [1].X - sz.Width / 2' pts [1].Y - sz.Height / 2);  	}  }  
Magic Number,System451.Communication.Dashboard.Controls,VirtualdAnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\VirtualdAnalogMeter.cs,CreateBackground,The following statement contains a magic number: using (Pen p = new Pen (ForeColor' tickLargeWidth)) {  	r2x = r1x - tickLargeSize;  	r2y = r1y - tickLargeSize;  	float r3x = r2x - Font.Height;  	float r3y = r2y - Font.Height;  	for (i = minValue; i <= maxValue; i += tickLargeFrequency) {  		PointF[] pts = GetLine (i' r1x' r1y' r2x' r2y);  		g.DrawLine (p' pts [0]' pts [1]);  		SizeF sz = g.MeasureString (i.ToString ()' Font);  		pts = GetLine (i' r1x' r1y' r3x' r3y);  		g.DrawString (i.ToString ()' Font' p.Brush' pts [1].X - sz.Width / 2' pts [1].Y - sz.Height / 2);  	}  }  
Magic Number,System451.Communication.Dashboard.Controls,VirtualdAnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\VirtualdAnalogMeter.cs,CreateBackground,The following statement contains a magic number: for (i = minValue; i <= maxValue; i += tickLargeFrequency) {  	PointF[] pts = GetLine (i' r1x' r1y' r2x' r2y);  	g.DrawLine (p' pts [0]' pts [1]);  	SizeF sz = g.MeasureString (i.ToString ()' Font);  	pts = GetLine (i' r1x' r1y' r3x' r3y);  	g.DrawString (i.ToString ()' Font' p.Brush' pts [1].X - sz.Width / 2' pts [1].Y - sz.Height / 2);  }  
Magic Number,System451.Communication.Dashboard.Controls,VirtualdAnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\VirtualdAnalogMeter.cs,CreateBackground,The following statement contains a magic number: for (i = minValue; i <= maxValue; i += tickLargeFrequency) {  	PointF[] pts = GetLine (i' r1x' r1y' r2x' r2y);  	g.DrawLine (p' pts [0]' pts [1]);  	SizeF sz = g.MeasureString (i.ToString ()' Font);  	pts = GetLine (i' r1x' r1y' r3x' r3y);  	g.DrawString (i.ToString ()' Font' p.Brush' pts [1].X - sz.Width / 2' pts [1].Y - sz.Height / 2);  }  
Magic Number,System451.Communication.Dashboard.Controls,VirtualdAnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\VirtualdAnalogMeter.cs,CreateBackground,The following statement contains a magic number: g.DrawString (i.ToString ()' Font' p.Brush' pts [1].X - sz.Width / 2' pts [1].Y - sz.Height / 2);  
Magic Number,System451.Communication.Dashboard.Controls,VirtualdAnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\VirtualdAnalogMeter.cs,CreateBackground,The following statement contains a magic number: g.DrawString (i.ToString ()' Font' p.Brush' pts [1].X - sz.Width / 2' pts [1].Y - sz.Height / 2);  
Magic Number,System451.Communication.Dashboard.Controls,VirtualdAnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\VirtualdAnalogMeter.cs,CreateBackground,The following statement contains a magic number: if (Text != "") {  	using (Brush b = new SolidBrush (ForeColor)) {  		SizeF sz = g.MeasureString (Text' Font);  		g.DrawString (Text' Font' b' framePadding.Left + (meterLocation.Width / 2) - sz.Width / 2' framePadding.Top + (meterLocation.Height * 3) / 4 - sz.Height / 2);  	}  }  
Magic Number,System451.Communication.Dashboard.Controls,VirtualdAnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\VirtualdAnalogMeter.cs,CreateBackground,The following statement contains a magic number: if (Text != "") {  	using (Brush b = new SolidBrush (ForeColor)) {  		SizeF sz = g.MeasureString (Text' Font);  		g.DrawString (Text' Font' b' framePadding.Left + (meterLocation.Width / 2) - sz.Width / 2' framePadding.Top + (meterLocation.Height * 3) / 4 - sz.Height / 2);  	}  }  
Magic Number,System451.Communication.Dashboard.Controls,VirtualdAnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\VirtualdAnalogMeter.cs,CreateBackground,The following statement contains a magic number: if (Text != "") {  	using (Brush b = new SolidBrush (ForeColor)) {  		SizeF sz = g.MeasureString (Text' Font);  		g.DrawString (Text' Font' b' framePadding.Left + (meterLocation.Width / 2) - sz.Width / 2' framePadding.Top + (meterLocation.Height * 3) / 4 - sz.Height / 2);  	}  }  
Magic Number,System451.Communication.Dashboard.Controls,VirtualdAnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\VirtualdAnalogMeter.cs,CreateBackground,The following statement contains a magic number: if (Text != "") {  	using (Brush b = new SolidBrush (ForeColor)) {  		SizeF sz = g.MeasureString (Text' Font);  		g.DrawString (Text' Font' b' framePadding.Left + (meterLocation.Width / 2) - sz.Width / 2' framePadding.Top + (meterLocation.Height * 3) / 4 - sz.Height / 2);  	}  }  
Magic Number,System451.Communication.Dashboard.Controls,VirtualdAnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\VirtualdAnalogMeter.cs,CreateBackground,The following statement contains a magic number: if (Text != "") {  	using (Brush b = new SolidBrush (ForeColor)) {  		SizeF sz = g.MeasureString (Text' Font);  		g.DrawString (Text' Font' b' framePadding.Left + (meterLocation.Width / 2) - sz.Width / 2' framePadding.Top + (meterLocation.Height * 3) / 4 - sz.Height / 2);  	}  }  
Magic Number,System451.Communication.Dashboard.Controls,VirtualdAnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\VirtualdAnalogMeter.cs,CreateBackground,The following statement contains a magic number: using (Brush b = new SolidBrush (ForeColor)) {  	SizeF sz = g.MeasureString (Text' Font);  	g.DrawString (Text' Font' b' framePadding.Left + (meterLocation.Width / 2) - sz.Width / 2' framePadding.Top + (meterLocation.Height * 3) / 4 - sz.Height / 2);  }  
Magic Number,System451.Communication.Dashboard.Controls,VirtualdAnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\VirtualdAnalogMeter.cs,CreateBackground,The following statement contains a magic number: using (Brush b = new SolidBrush (ForeColor)) {  	SizeF sz = g.MeasureString (Text' Font);  	g.DrawString (Text' Font' b' framePadding.Left + (meterLocation.Width / 2) - sz.Width / 2' framePadding.Top + (meterLocation.Height * 3) / 4 - sz.Height / 2);  }  
Magic Number,System451.Communication.Dashboard.Controls,VirtualdAnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\VirtualdAnalogMeter.cs,CreateBackground,The following statement contains a magic number: using (Brush b = new SolidBrush (ForeColor)) {  	SizeF sz = g.MeasureString (Text' Font);  	g.DrawString (Text' Font' b' framePadding.Left + (meterLocation.Width / 2) - sz.Width / 2' framePadding.Top + (meterLocation.Height * 3) / 4 - sz.Height / 2);  }  
Magic Number,System451.Communication.Dashboard.Controls,VirtualdAnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\VirtualdAnalogMeter.cs,CreateBackground,The following statement contains a magic number: using (Brush b = new SolidBrush (ForeColor)) {  	SizeF sz = g.MeasureString (Text' Font);  	g.DrawString (Text' Font' b' framePadding.Left + (meterLocation.Width / 2) - sz.Width / 2' framePadding.Top + (meterLocation.Height * 3) / 4 - sz.Height / 2);  }  
Magic Number,System451.Communication.Dashboard.Controls,VirtualdAnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\VirtualdAnalogMeter.cs,CreateBackground,The following statement contains a magic number: using (Brush b = new SolidBrush (ForeColor)) {  	SizeF sz = g.MeasureString (Text' Font);  	g.DrawString (Text' Font' b' framePadding.Left + (meterLocation.Width / 2) - sz.Width / 2' framePadding.Top + (meterLocation.Height * 3) / 4 - sz.Height / 2);  }  
Magic Number,System451.Communication.Dashboard.Controls,VirtualdAnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\VirtualdAnalogMeter.cs,CreateBackground,The following statement contains a magic number: g.DrawString (Text' Font' b' framePadding.Left + (meterLocation.Width / 2) - sz.Width / 2' framePadding.Top + (meterLocation.Height * 3) / 4 - sz.Height / 2);  
Magic Number,System451.Communication.Dashboard.Controls,VirtualdAnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\VirtualdAnalogMeter.cs,CreateBackground,The following statement contains a magic number: g.DrawString (Text' Font' b' framePadding.Left + (meterLocation.Width / 2) - sz.Width / 2' framePadding.Top + (meterLocation.Height * 3) / 4 - sz.Height / 2);  
Magic Number,System451.Communication.Dashboard.Controls,VirtualdAnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\VirtualdAnalogMeter.cs,CreateBackground,The following statement contains a magic number: g.DrawString (Text' Font' b' framePadding.Left + (meterLocation.Width / 2) - sz.Width / 2' framePadding.Top + (meterLocation.Height * 3) / 4 - sz.Height / 2);  
Magic Number,System451.Communication.Dashboard.Controls,VirtualdAnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\VirtualdAnalogMeter.cs,CreateBackground,The following statement contains a magic number: g.DrawString (Text' Font' b' framePadding.Left + (meterLocation.Width / 2) - sz.Width / 2' framePadding.Top + (meterLocation.Height * 3) / 4 - sz.Height / 2);  
Magic Number,System451.Communication.Dashboard.Controls,VirtualdAnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\VirtualdAnalogMeter.cs,CreateBackground,The following statement contains a magic number: g.DrawString (Text' Font' b' framePadding.Left + (meterLocation.Width / 2) - sz.Width / 2' framePadding.Top + (meterLocation.Height * 3) / 4 - sz.Height / 2);  
Magic Number,System451.Communication.Dashboard.Controls,ZomBeye,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\ZomBeye.cs,vlcBox_EndReached,The following statement contains a magic number: setTimeout (delegate {  	Next ();  }' 2);  
Magic Number,Design,AnalogMeterDesigner,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\AnalogMeter.cs,WndProc,The following statement contains a magic number: switch (m.Msg) {  case WM_LButtonDown:  	if (GetValueRec ().IsVisible (new Point (m.LParam.ToInt32 ()))) {  		dragin = true;  		lpoint = m.LParam.ToInt32 ();  		Point tp = new Point (lpoint);  		tp.Offset (-3' -3);  		europeanswallow = new Rectangle (tp' new Size (6' 6));  		ltime = DateTime.Now.Ticks;  		Cursor.Current = Cursors.Hand;  		cans = true;  	}  	break;  case WM_MouseMove:  	if (dragin) {  		Point p = new Point (m.LParam.ToInt32 ());  		if (cans) {  			if (europeanswallow.Contains (p)) {  				double f = DateTime.Now.Subtract (new DateTime (ltime)).TotalSeconds;  				if (f >= 1.5)  					cans = false;  				else if (f >= 0.5) {  					dragin = false;  					Cursor.Current = Cursors.SizeAll;  					break;  				}  			}  			else  				cans = false;  		}  		float v = (float)(((AnalogMeter.PointToAngle (p)) / 180f) * (1023));  		vm.Value = Math.Max (0' Math.Min (1023' v));  		Cursor.Current = Cursors.Hand;  		return;  	}  	else if (GetValueRec ().IsVisible (new Point (m.LParam.ToInt32 ()))) {  		inadorn = true;  		Cursor.Current = Cursors.Hand;  	}  	else  		inadorn = false;  	break;  case WM_LButtonUp:  	if (dragin)  		dragin = false;  	break;  }  
Magic Number,Design,AnalogMeterDesigner,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\AnalogMeter.cs,WndProc,The following statement contains a magic number: switch (m.Msg) {  case WM_LButtonDown:  	if (GetValueRec ().IsVisible (new Point (m.LParam.ToInt32 ()))) {  		dragin = true;  		lpoint = m.LParam.ToInt32 ();  		Point tp = new Point (lpoint);  		tp.Offset (-3' -3);  		europeanswallow = new Rectangle (tp' new Size (6' 6));  		ltime = DateTime.Now.Ticks;  		Cursor.Current = Cursors.Hand;  		cans = true;  	}  	break;  case WM_MouseMove:  	if (dragin) {  		Point p = new Point (m.LParam.ToInt32 ());  		if (cans) {  			if (europeanswallow.Contains (p)) {  				double f = DateTime.Now.Subtract (new DateTime (ltime)).TotalSeconds;  				if (f >= 1.5)  					cans = false;  				else if (f >= 0.5) {  					dragin = false;  					Cursor.Current = Cursors.SizeAll;  					break;  				}  			}  			else  				cans = false;  		}  		float v = (float)(((AnalogMeter.PointToAngle (p)) / 180f) * (1023));  		vm.Value = Math.Max (0' Math.Min (1023' v));  		Cursor.Current = Cursors.Hand;  		return;  	}  	else if (GetValueRec ().IsVisible (new Point (m.LParam.ToInt32 ()))) {  		inadorn = true;  		Cursor.Current = Cursors.Hand;  	}  	else  		inadorn = false;  	break;  case WM_LButtonUp:  	if (dragin)  		dragin = false;  	break;  }  
Magic Number,Design,AnalogMeterDesigner,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\AnalogMeter.cs,WndProc,The following statement contains a magic number: switch (m.Msg) {  case WM_LButtonDown:  	if (GetValueRec ().IsVisible (new Point (m.LParam.ToInt32 ()))) {  		dragin = true;  		lpoint = m.LParam.ToInt32 ();  		Point tp = new Point (lpoint);  		tp.Offset (-3' -3);  		europeanswallow = new Rectangle (tp' new Size (6' 6));  		ltime = DateTime.Now.Ticks;  		Cursor.Current = Cursors.Hand;  		cans = true;  	}  	break;  case WM_MouseMove:  	if (dragin) {  		Point p = new Point (m.LParam.ToInt32 ());  		if (cans) {  			if (europeanswallow.Contains (p)) {  				double f = DateTime.Now.Subtract (new DateTime (ltime)).TotalSeconds;  				if (f >= 1.5)  					cans = false;  				else if (f >= 0.5) {  					dragin = false;  					Cursor.Current = Cursors.SizeAll;  					break;  				}  			}  			else  				cans = false;  		}  		float v = (float)(((AnalogMeter.PointToAngle (p)) / 180f) * (1023));  		vm.Value = Math.Max (0' Math.Min (1023' v));  		Cursor.Current = Cursors.Hand;  		return;  	}  	else if (GetValueRec ().IsVisible (new Point (m.LParam.ToInt32 ()))) {  		inadorn = true;  		Cursor.Current = Cursors.Hand;  	}  	else  		inadorn = false;  	break;  case WM_LButtonUp:  	if (dragin)  		dragin = false;  	break;  }  
Magic Number,Design,AnalogMeterDesigner,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\AnalogMeter.cs,WndProc,The following statement contains a magic number: switch (m.Msg) {  case WM_LButtonDown:  	if (GetValueRec ().IsVisible (new Point (m.LParam.ToInt32 ()))) {  		dragin = true;  		lpoint = m.LParam.ToInt32 ();  		Point tp = new Point (lpoint);  		tp.Offset (-3' -3);  		europeanswallow = new Rectangle (tp' new Size (6' 6));  		ltime = DateTime.Now.Ticks;  		Cursor.Current = Cursors.Hand;  		cans = true;  	}  	break;  case WM_MouseMove:  	if (dragin) {  		Point p = new Point (m.LParam.ToInt32 ());  		if (cans) {  			if (europeanswallow.Contains (p)) {  				double f = DateTime.Now.Subtract (new DateTime (ltime)).TotalSeconds;  				if (f >= 1.5)  					cans = false;  				else if (f >= 0.5) {  					dragin = false;  					Cursor.Current = Cursors.SizeAll;  					break;  				}  			}  			else  				cans = false;  		}  		float v = (float)(((AnalogMeter.PointToAngle (p)) / 180f) * (1023));  		vm.Value = Math.Max (0' Math.Min (1023' v));  		Cursor.Current = Cursors.Hand;  		return;  	}  	else if (GetValueRec ().IsVisible (new Point (m.LParam.ToInt32 ()))) {  		inadorn = true;  		Cursor.Current = Cursors.Hand;  	}  	else  		inadorn = false;  	break;  case WM_LButtonUp:  	if (dragin)  		dragin = false;  	break;  }  
Magic Number,Design,AnalogMeterDesigner,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\AnalogMeter.cs,WndProc,The following statement contains a magic number: switch (m.Msg) {  case WM_LButtonDown:  	if (GetValueRec ().IsVisible (new Point (m.LParam.ToInt32 ()))) {  		dragin = true;  		lpoint = m.LParam.ToInt32 ();  		Point tp = new Point (lpoint);  		tp.Offset (-3' -3);  		europeanswallow = new Rectangle (tp' new Size (6' 6));  		ltime = DateTime.Now.Ticks;  		Cursor.Current = Cursors.Hand;  		cans = true;  	}  	break;  case WM_MouseMove:  	if (dragin) {  		Point p = new Point (m.LParam.ToInt32 ());  		if (cans) {  			if (europeanswallow.Contains (p)) {  				double f = DateTime.Now.Subtract (new DateTime (ltime)).TotalSeconds;  				if (f >= 1.5)  					cans = false;  				else if (f >= 0.5) {  					dragin = false;  					Cursor.Current = Cursors.SizeAll;  					break;  				}  			}  			else  				cans = false;  		}  		float v = (float)(((AnalogMeter.PointToAngle (p)) / 180f) * (1023));  		vm.Value = Math.Max (0' Math.Min (1023' v));  		Cursor.Current = Cursors.Hand;  		return;  	}  	else if (GetValueRec ().IsVisible (new Point (m.LParam.ToInt32 ()))) {  		inadorn = true;  		Cursor.Current = Cursors.Hand;  	}  	else  		inadorn = false;  	break;  case WM_LButtonUp:  	if (dragin)  		dragin = false;  	break;  }  
Magic Number,Design,AnalogMeterDesigner,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\AnalogMeter.cs,WndProc,The following statement contains a magic number: switch (m.Msg) {  case WM_LButtonDown:  	if (GetValueRec ().IsVisible (new Point (m.LParam.ToInt32 ()))) {  		dragin = true;  		lpoint = m.LParam.ToInt32 ();  		Point tp = new Point (lpoint);  		tp.Offset (-3' -3);  		europeanswallow = new Rectangle (tp' new Size (6' 6));  		ltime = DateTime.Now.Ticks;  		Cursor.Current = Cursors.Hand;  		cans = true;  	}  	break;  case WM_MouseMove:  	if (dragin) {  		Point p = new Point (m.LParam.ToInt32 ());  		if (cans) {  			if (europeanswallow.Contains (p)) {  				double f = DateTime.Now.Subtract (new DateTime (ltime)).TotalSeconds;  				if (f >= 1.5)  					cans = false;  				else if (f >= 0.5) {  					dragin = false;  					Cursor.Current = Cursors.SizeAll;  					break;  				}  			}  			else  				cans = false;  		}  		float v = (float)(((AnalogMeter.PointToAngle (p)) / 180f) * (1023));  		vm.Value = Math.Max (0' Math.Min (1023' v));  		Cursor.Current = Cursors.Hand;  		return;  	}  	else if (GetValueRec ().IsVisible (new Point (m.LParam.ToInt32 ()))) {  		inadorn = true;  		Cursor.Current = Cursors.Hand;  	}  	else  		inadorn = false;  	break;  case WM_LButtonUp:  	if (dragin)  		dragin = false;  	break;  }  
Magic Number,Design,AnalogMeterDesigner,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\AnalogMeter.cs,WndProc,The following statement contains a magic number: switch (m.Msg) {  case WM_LButtonDown:  	if (GetValueRec ().IsVisible (new Point (m.LParam.ToInt32 ()))) {  		dragin = true;  		lpoint = m.LParam.ToInt32 ();  		Point tp = new Point (lpoint);  		tp.Offset (-3' -3);  		europeanswallow = new Rectangle (tp' new Size (6' 6));  		ltime = DateTime.Now.Ticks;  		Cursor.Current = Cursors.Hand;  		cans = true;  	}  	break;  case WM_MouseMove:  	if (dragin) {  		Point p = new Point (m.LParam.ToInt32 ());  		if (cans) {  			if (europeanswallow.Contains (p)) {  				double f = DateTime.Now.Subtract (new DateTime (ltime)).TotalSeconds;  				if (f >= 1.5)  					cans = false;  				else if (f >= 0.5) {  					dragin = false;  					Cursor.Current = Cursors.SizeAll;  					break;  				}  			}  			else  				cans = false;  		}  		float v = (float)(((AnalogMeter.PointToAngle (p)) / 180f) * (1023));  		vm.Value = Math.Max (0' Math.Min (1023' v));  		Cursor.Current = Cursors.Hand;  		return;  	}  	else if (GetValueRec ().IsVisible (new Point (m.LParam.ToInt32 ()))) {  		inadorn = true;  		Cursor.Current = Cursors.Hand;  	}  	else  		inadorn = false;  	break;  case WM_LButtonUp:  	if (dragin)  		dragin = false;  	break;  }  
Magic Number,Design,AnalogMeterDesigner,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\AnalogMeter.cs,WndProc,The following statement contains a magic number: switch (m.Msg) {  case WM_LButtonDown:  	if (GetValueRec ().IsVisible (new Point (m.LParam.ToInt32 ()))) {  		dragin = true;  		lpoint = m.LParam.ToInt32 ();  		Point tp = new Point (lpoint);  		tp.Offset (-3' -3);  		europeanswallow = new Rectangle (tp' new Size (6' 6));  		ltime = DateTime.Now.Ticks;  		Cursor.Current = Cursors.Hand;  		cans = true;  	}  	break;  case WM_MouseMove:  	if (dragin) {  		Point p = new Point (m.LParam.ToInt32 ());  		if (cans) {  			if (europeanswallow.Contains (p)) {  				double f = DateTime.Now.Subtract (new DateTime (ltime)).TotalSeconds;  				if (f >= 1.5)  					cans = false;  				else if (f >= 0.5) {  					dragin = false;  					Cursor.Current = Cursors.SizeAll;  					break;  				}  			}  			else  				cans = false;  		}  		float v = (float)(((AnalogMeter.PointToAngle (p)) / 180f) * (1023));  		vm.Value = Math.Max (0' Math.Min (1023' v));  		Cursor.Current = Cursors.Hand;  		return;  	}  	else if (GetValueRec ().IsVisible (new Point (m.LParam.ToInt32 ()))) {  		inadorn = true;  		Cursor.Current = Cursors.Hand;  	}  	else  		inadorn = false;  	break;  case WM_LButtonUp:  	if (dragin)  		dragin = false;  	break;  }  
Magic Number,Design,AnalogMeterDesigner,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\AnalogMeter.cs,WndProc,The following statement contains a magic number: if (GetValueRec ().IsVisible (new Point (m.LParam.ToInt32 ()))) {  	dragin = true;  	lpoint = m.LParam.ToInt32 ();  	Point tp = new Point (lpoint);  	tp.Offset (-3' -3);  	europeanswallow = new Rectangle (tp' new Size (6' 6));  	ltime = DateTime.Now.Ticks;  	Cursor.Current = Cursors.Hand;  	cans = true;  }  
Magic Number,Design,AnalogMeterDesigner,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\AnalogMeter.cs,WndProc,The following statement contains a magic number: if (GetValueRec ().IsVisible (new Point (m.LParam.ToInt32 ()))) {  	dragin = true;  	lpoint = m.LParam.ToInt32 ();  	Point tp = new Point (lpoint);  	tp.Offset (-3' -3);  	europeanswallow = new Rectangle (tp' new Size (6' 6));  	ltime = DateTime.Now.Ticks;  	Cursor.Current = Cursors.Hand;  	cans = true;  }  
Magic Number,Design,AnalogMeterDesigner,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\AnalogMeter.cs,WndProc,The following statement contains a magic number: if (GetValueRec ().IsVisible (new Point (m.LParam.ToInt32 ()))) {  	dragin = true;  	lpoint = m.LParam.ToInt32 ();  	Point tp = new Point (lpoint);  	tp.Offset (-3' -3);  	europeanswallow = new Rectangle (tp' new Size (6' 6));  	ltime = DateTime.Now.Ticks;  	Cursor.Current = Cursors.Hand;  	cans = true;  }  
Magic Number,Design,AnalogMeterDesigner,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\AnalogMeter.cs,WndProc,The following statement contains a magic number: if (GetValueRec ().IsVisible (new Point (m.LParam.ToInt32 ()))) {  	dragin = true;  	lpoint = m.LParam.ToInt32 ();  	Point tp = new Point (lpoint);  	tp.Offset (-3' -3);  	europeanswallow = new Rectangle (tp' new Size (6' 6));  	ltime = DateTime.Now.Ticks;  	Cursor.Current = Cursors.Hand;  	cans = true;  }  
Magic Number,Design,AnalogMeterDesigner,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\AnalogMeter.cs,WndProc,The following statement contains a magic number: tp.Offset (-3' -3);  
Magic Number,Design,AnalogMeterDesigner,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\AnalogMeter.cs,WndProc,The following statement contains a magic number: tp.Offset (-3' -3);  
Magic Number,Design,AnalogMeterDesigner,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\AnalogMeter.cs,WndProc,The following statement contains a magic number: europeanswallow = new Rectangle (tp' new Size (6' 6));  
Magic Number,Design,AnalogMeterDesigner,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\AnalogMeter.cs,WndProc,The following statement contains a magic number: europeanswallow = new Rectangle (tp' new Size (6' 6));  
Magic Number,Design,AnalogMeterDesigner,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\AnalogMeter.cs,WndProc,The following statement contains a magic number: if (dragin) {  	Point p = new Point (m.LParam.ToInt32 ());  	if (cans) {  		if (europeanswallow.Contains (p)) {  			double f = DateTime.Now.Subtract (new DateTime (ltime)).TotalSeconds;  			if (f >= 1.5)  				cans = false;  			else if (f >= 0.5) {  				dragin = false;  				Cursor.Current = Cursors.SizeAll;  				break;  			}  		}  		else  			cans = false;  	}  	float v = (float)(((AnalogMeter.PointToAngle (p)) / 180f) * (1023));  	vm.Value = Math.Max (0' Math.Min (1023' v));  	Cursor.Current = Cursors.Hand;  	return;  }  else if (GetValueRec ().IsVisible (new Point (m.LParam.ToInt32 ()))) {  	inadorn = true;  	Cursor.Current = Cursors.Hand;  }  else  	inadorn = false;  
Magic Number,Design,AnalogMeterDesigner,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\AnalogMeter.cs,WndProc,The following statement contains a magic number: if (dragin) {  	Point p = new Point (m.LParam.ToInt32 ());  	if (cans) {  		if (europeanswallow.Contains (p)) {  			double f = DateTime.Now.Subtract (new DateTime (ltime)).TotalSeconds;  			if (f >= 1.5)  				cans = false;  			else if (f >= 0.5) {  				dragin = false;  				Cursor.Current = Cursors.SizeAll;  				break;  			}  		}  		else  			cans = false;  	}  	float v = (float)(((AnalogMeter.PointToAngle (p)) / 180f) * (1023));  	vm.Value = Math.Max (0' Math.Min (1023' v));  	Cursor.Current = Cursors.Hand;  	return;  }  else if (GetValueRec ().IsVisible (new Point (m.LParam.ToInt32 ()))) {  	inadorn = true;  	Cursor.Current = Cursors.Hand;  }  else  	inadorn = false;  
Magic Number,Design,AnalogMeterDesigner,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\AnalogMeter.cs,WndProc,The following statement contains a magic number: if (dragin) {  	Point p = new Point (m.LParam.ToInt32 ());  	if (cans) {  		if (europeanswallow.Contains (p)) {  			double f = DateTime.Now.Subtract (new DateTime (ltime)).TotalSeconds;  			if (f >= 1.5)  				cans = false;  			else if (f >= 0.5) {  				dragin = false;  				Cursor.Current = Cursors.SizeAll;  				break;  			}  		}  		else  			cans = false;  	}  	float v = (float)(((AnalogMeter.PointToAngle (p)) / 180f) * (1023));  	vm.Value = Math.Max (0' Math.Min (1023' v));  	Cursor.Current = Cursors.Hand;  	return;  }  else if (GetValueRec ().IsVisible (new Point (m.LParam.ToInt32 ()))) {  	inadorn = true;  	Cursor.Current = Cursors.Hand;  }  else  	inadorn = false;  
Magic Number,Design,AnalogMeterDesigner,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\AnalogMeter.cs,WndProc,The following statement contains a magic number: if (dragin) {  	Point p = new Point (m.LParam.ToInt32 ());  	if (cans) {  		if (europeanswallow.Contains (p)) {  			double f = DateTime.Now.Subtract (new DateTime (ltime)).TotalSeconds;  			if (f >= 1.5)  				cans = false;  			else if (f >= 0.5) {  				dragin = false;  				Cursor.Current = Cursors.SizeAll;  				break;  			}  		}  		else  			cans = false;  	}  	float v = (float)(((AnalogMeter.PointToAngle (p)) / 180f) * (1023));  	vm.Value = Math.Max (0' Math.Min (1023' v));  	Cursor.Current = Cursors.Hand;  	return;  }  else if (GetValueRec ().IsVisible (new Point (m.LParam.ToInt32 ()))) {  	inadorn = true;  	Cursor.Current = Cursors.Hand;  }  else  	inadorn = false;  
Magic Number,Design,AnalogMeterDesigner,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\AnalogMeter.cs,WndProc,The following statement contains a magic number: if (cans) {  	if (europeanswallow.Contains (p)) {  		double f = DateTime.Now.Subtract (new DateTime (ltime)).TotalSeconds;  		if (f >= 1.5)  			cans = false;  		else if (f >= 0.5) {  			dragin = false;  			Cursor.Current = Cursors.SizeAll;  			break;  		}  	}  	else  		cans = false;  }  
Magic Number,Design,AnalogMeterDesigner,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\AnalogMeter.cs,WndProc,The following statement contains a magic number: if (cans) {  	if (europeanswallow.Contains (p)) {  		double f = DateTime.Now.Subtract (new DateTime (ltime)).TotalSeconds;  		if (f >= 1.5)  			cans = false;  		else if (f >= 0.5) {  			dragin = false;  			Cursor.Current = Cursors.SizeAll;  			break;  		}  	}  	else  		cans = false;  }  
Magic Number,Design,AnalogMeterDesigner,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\AnalogMeter.cs,WndProc,The following statement contains a magic number: if (europeanswallow.Contains (p)) {  	double f = DateTime.Now.Subtract (new DateTime (ltime)).TotalSeconds;  	if (f >= 1.5)  		cans = false;  	else if (f >= 0.5) {  		dragin = false;  		Cursor.Current = Cursors.SizeAll;  		break;  	}  }  else  	cans = false;  
Magic Number,Design,AnalogMeterDesigner,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\AnalogMeter.cs,WndProc,The following statement contains a magic number: if (europeanswallow.Contains (p)) {  	double f = DateTime.Now.Subtract (new DateTime (ltime)).TotalSeconds;  	if (f >= 1.5)  		cans = false;  	else if (f >= 0.5) {  		dragin = false;  		Cursor.Current = Cursors.SizeAll;  		break;  	}  }  else  	cans = false;  
Magic Number,Design,AnalogMeterDesigner,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\AnalogMeter.cs,WndProc,The following statement contains a magic number: if (f >= 1.5)  	cans = false;  else if (f >= 0.5) {  	dragin = false;  	Cursor.Current = Cursors.SizeAll;  	break;  }  
Magic Number,Design,AnalogMeterDesigner,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\AnalogMeter.cs,WndProc,The following statement contains a magic number: if (f >= 1.5)  	cans = false;  else if (f >= 0.5) {  	dragin = false;  	Cursor.Current = Cursors.SizeAll;  	break;  }  
Magic Number,Design,AnalogMeterDesigner,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\AnalogMeter.cs,WndProc,The following statement contains a magic number: if (f >= 0.5) {  	dragin = false;  	Cursor.Current = Cursors.SizeAll;  	break;  }  
Magic Number,Design,AnalogMeterDesigner,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\AnalogMeter.cs,WndProc,The following statement contains a magic number: vm.Value = Math.Max (0' Math.Min (1023' v));  
Magic Number,Design,ValueMeterDesigner,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\ValueMeter.cs,GetValueRec,The following statement contains a magic number: if (vm.UseBar == false)  	barv = (2) / (height);  
Magic Number,Design,ValueMeterDesigner,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\ValueMeter.cs,GetValueRec,The following statement contains a magic number: barv = (2) / (height);  
Magic Number,Design,ValueMeterDesigner,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\ValueMeter.cs,GetValueRec,The following statement contains a magic number: if (vm.Orientation == Orientation.Vertical) {  	r.Location = new Point (0' (int)(height - (value * height) - (barv * height / 2)));  	r.Width = (int)width;  	r.Height = (int)(barv * height);  }  else {  	value = 1 - value;  	r.Location = new Point ((int)(height - (value * height) - (barv * height / 2))' 0);  	r.Width = (int)(barv * height);  	r.Height = (int)width;  }  
Magic Number,Design,ValueMeterDesigner,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\ValueMeter.cs,GetValueRec,The following statement contains a magic number: if (vm.Orientation == Orientation.Vertical) {  	r.Location = new Point (0' (int)(height - (value * height) - (barv * height / 2)));  	r.Width = (int)width;  	r.Height = (int)(barv * height);  }  else {  	value = 1 - value;  	r.Location = new Point ((int)(height - (value * height) - (barv * height / 2))' 0);  	r.Width = (int)(barv * height);  	r.Height = (int)width;  }  
Magic Number,Design,ValueMeterDesigner,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\ValueMeter.cs,GetValueRec,The following statement contains a magic number: r.Location = new Point (0' (int)(height - (value * height) - (barv * height / 2)));  
Magic Number,Design,ValueMeterDesigner,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\ValueMeter.cs,GetValueRec,The following statement contains a magic number: r.Location = new Point ((int)(height - (value * height) - (barv * height / 2))' 0);  
Magic Number,Design,DirectionMeterDesigner,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\DirectionMeter.cs,GetValueRec,The following statement contains a magic number: gp.AddEllipse ((float)((.05 - vm.CircleWidth / 200f) * vm.Width)' (float)((.05 - vm.CircleWidth / 200f) * vm.Height)' (float)(.90 + vm.CircleWidth / 100f) * vm.Width' (float)(.90 + vm.CircleWidth / 100f) * vm.Height);  
Magic Number,Design,DirectionMeterDesigner,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\DirectionMeter.cs,GetValueRec,The following statement contains a magic number: gp.AddEllipse ((float)((.05 - vm.CircleWidth / 200f) * vm.Width)' (float)((.05 - vm.CircleWidth / 200f) * vm.Height)' (float)(.90 + vm.CircleWidth / 100f) * vm.Width' (float)(.90 + vm.CircleWidth / 100f) * vm.Height);  
Magic Number,Design,DirectionMeterDesigner,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\DirectionMeter.cs,GetValueRec,The following statement contains a magic number: gp.AddEllipse ((float)((.05 - vm.CircleWidth / 200f) * vm.Width)' (float)((.05 - vm.CircleWidth / 200f) * vm.Height)' (float)(.90 + vm.CircleWidth / 100f) * vm.Width' (float)(.90 + vm.CircleWidth / 100f) * vm.Height);  
Magic Number,Design,DirectionMeterDesigner,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\DirectionMeter.cs,GetValueRec,The following statement contains a magic number: gp.AddEllipse ((float)((.05 - vm.CircleWidth / 200f) * vm.Width)' (float)((.05 - vm.CircleWidth / 200f) * vm.Height)' (float)(.90 + vm.CircleWidth / 100f) * vm.Width' (float)(.90 + vm.CircleWidth / 100f) * vm.Height);  
Magic Number,Design,DirectionMeterDesigner,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\DirectionMeter.cs,GetValueRec,The following statement contains a magic number: gp.AddEllipse ((float)((.05 + vm.CircleWidth / 200f) * vm.Width)' (float)((.05 + vm.CircleWidth / 200f) * vm.Height)' (float)(.90 - vm.CircleWidth / 100f) * vm.Width' (float)(.90 - vm.CircleWidth / 100f) * vm.Height);  
Magic Number,Design,DirectionMeterDesigner,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\DirectionMeter.cs,GetValueRec,The following statement contains a magic number: gp.AddEllipse ((float)((.05 + vm.CircleWidth / 200f) * vm.Width)' (float)((.05 + vm.CircleWidth / 200f) * vm.Height)' (float)(.90 - vm.CircleWidth / 100f) * vm.Width' (float)(.90 - vm.CircleWidth / 100f) * vm.Height);  
Magic Number,Design,DirectionMeterDesigner,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\DirectionMeter.cs,GetValueRec,The following statement contains a magic number: gp.AddEllipse ((float)((.05 + vm.CircleWidth / 200f) * vm.Width)' (float)((.05 + vm.CircleWidth / 200f) * vm.Height)' (float)(.90 - vm.CircleWidth / 100f) * vm.Width' (float)(.90 - vm.CircleWidth / 100f) * vm.Height);  
Magic Number,Design,DirectionMeterDesigner,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\DirectionMeter.cs,GetValueRec,The following statement contains a magic number: gp.AddEllipse ((float)((.05 + vm.CircleWidth / 200f) * vm.Width)' (float)((.05 + vm.CircleWidth / 200f) * vm.Height)' (float)(.90 - vm.CircleWidth / 100f) * vm.Width' (float)(.90 - vm.CircleWidth / 100f) * vm.Height);  
Magic Number,Design,DirectionMeterDesigner,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\DirectionMeter.cs,WndProc,The following statement contains a magic number: switch (m.Msg) {  case WM_LButtonDown:  	if (GetValueRec ().IsVisible (new Point (m.LParam.ToInt32 ()))) {  		dragin = true;  		Cursor.Current = Cursors.Hand;  	}  	break;  case WM_MouseMove:  	if (dragin) {  		Point p = new Point (m.LParam.ToInt32 ());  		vm.Value = (float)(DirectionMeter.PointToAngle (p) / 180 * (vm.Max - vm.Min) + vm.Min);  		Cursor.Current = Cursors.Hand;  		return;  	}  	else if (GetValueRec ().IsVisible (new Point (m.LParam.ToInt32 ()))) {  		inadorn = true;  		Cursor.Current = Cursors.Hand;  	}  	else  		inadorn = false;  	break;  case WM_LButtonUp:  	if (dragin)  		dragin = false;  	break;  }  
Magic Number,Design,DirectionMeterDesigner,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\DirectionMeter.cs,WndProc,The following statement contains a magic number: if (dragin) {  	Point p = new Point (m.LParam.ToInt32 ());  	vm.Value = (float)(DirectionMeter.PointToAngle (p) / 180 * (vm.Max - vm.Min) + vm.Min);  	Cursor.Current = Cursors.Hand;  	return;  }  else if (GetValueRec ().IsVisible (new Point (m.LParam.ToInt32 ()))) {  	inadorn = true;  	Cursor.Current = Cursors.Hand;  }  else  	inadorn = false;  
Magic Number,Design,DirectionMeterDesigner,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\DirectionMeter.cs,WndProc,The following statement contains a magic number: vm.Value = (float)(DirectionMeter.PointToAngle (p) / 180 * (vm.Max - vm.Min) + vm.Min);  
Magic Number,Design,DirectionMeterDesigner,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\DirectionMeter.cs,Resetdeg,The following statement contains a magic number: vm.Max = 360;  
Magic Number,Design,DirectionMeterDesigner,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\DirectionMeter.cs,Resetpi,The following statement contains a magic number: vm.Max = (float)(2 * Math.PI);  
Magic Number,Design,OnOffControlDesigner,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\OnOffControl.cs,GetValueRec,The following statement contains a magic number: gp.AddEllipse ((float)((.04) * vm.Width)' (float)((.04) * vm.Height)' (float)(.92) * vm.Width' (float)(.92) * vm.Height);  
Magic Number,Design,OnOffControlDesigner,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\OnOffControl.cs,GetValueRec,The following statement contains a magic number: gp.AddEllipse ((float)((.04) * vm.Width)' (float)((.04) * vm.Height)' (float)(.92) * vm.Width' (float)(.92) * vm.Height);  
Magic Number,Design,OnOffControlDesigner,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\OnOffControl.cs,GetValueRec,The following statement contains a magic number: gp.AddEllipse ((float)((.04) * vm.Width)' (float)((.04) * vm.Height)' (float)(.92) * vm.Width' (float)(.92) * vm.Height);  
Magic Number,Design,OnOffControlDesigner,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\OnOffControl.cs,GetValueRec,The following statement contains a magic number: gp.AddEllipse ((float)((.04) * vm.Width)' (float)((.04) * vm.Height)' (float)(.92) * vm.Width' (float)(.92) * vm.Height);  
Magic Number,System451.Communication.Dashboard.Libs.WebCam_Capture,WebCamCapture,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\WebCam_Capture\WebCamCapture.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size (342' 252);  
Magic Number,System451.Communication.Dashboard.Libs.WebCam_Capture,WebCamCapture,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\WebCam_Capture\WebCamCapture.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size (342' 252);  
Magic Number,System451.Communication.Dashboard.Libs,Crc32,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\Crc32.cs,InitializeTable,The following statement contains a magic number: for (int i = 0; i < 256; i++) {  	UInt32 entry = (UInt32)i;  	for (int j = 0; j < 8; j++)  		if ((entry & 1) == 1)  			entry = (entry >> 1) ^ polynomial;  		else  			entry = entry >> 1;  	createTable [i] = entry;  }  
Magic Number,System451.Communication.Dashboard.Libs,Crc32,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\Crc32.cs,InitializeTable,The following statement contains a magic number: for (int i = 0; i < 256; i++) {  	UInt32 entry = (UInt32)i;  	for (int j = 0; j < 8; j++)  		if ((entry & 1) == 1)  			entry = (entry >> 1) ^ polynomial;  		else  			entry = entry >> 1;  	createTable [i] = entry;  }  
Magic Number,System451.Communication.Dashboard.Libs,Crc32,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\Crc32.cs,InitializeTable,The following statement contains a magic number: for (int j = 0; j < 8; j++)  	if ((entry & 1) == 1)  		entry = (entry >> 1) ^ polynomial;  	else  		entry = entry >> 1;  
Magic Number,System451.Communication.Dashboard.Libs,Crc32,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\Crc32.cs,CalculateHash,The following statement contains a magic number: for (int i = start; i < size; i++)  	unchecked {  		crc = (crc >> 8) ^ table [buffer [i] ^ crc & 0xff];  	}  
Magic Number,System451.Communication.Dashboard.Libs,Crc32,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\Crc32.cs,CalculateHash,The following statement contains a magic number: unchecked {  	crc = (crc >> 8) ^ table [buffer [i] ^ crc & 0xff];  }  
Magic Number,System451.Communication.Dashboard.Libs,Crc32,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\Crc32.cs,CalculateHash,The following statement contains a magic number: crc = (crc >> 8) ^ table [buffer [i] ^ crc & 0xff];  
Magic Number,System451.Communication.Dashboard.Libs,Crc32,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\Crc32.cs,UInt32ToBigEndianBytes,The following statement contains a magic number: return new byte[] {  	(byte)((x >> 24) & 0xff)'  	(byte)((x >> 16) & 0xff)'  	(byte)((x >> 8) & 0xff)'  	(byte)(x & 0xff)  };  
Magic Number,System451.Communication.Dashboard.Libs,Crc32,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\Crc32.cs,UInt32ToBigEndianBytes,The following statement contains a magic number: return new byte[] {  	(byte)((x >> 24) & 0xff)'  	(byte)((x >> 16) & 0xff)'  	(byte)((x >> 8) & 0xff)'  	(byte)(x & 0xff)  };  
Magic Number,System451.Communication.Dashboard.Libs,Crc32,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\Crc32.cs,UInt32ToBigEndianBytes,The following statement contains a magic number: return new byte[] {  	(byte)((x >> 24) & 0xff)'  	(byte)((x >> 16) & 0xff)'  	(byte)((x >> 8) & 0xff)'  	(byte)(x & 0xff)  };  
Magic Number,Controls,CameraView,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\CameraView.cs,CameraView,The following statement contains a magic number: view = new Bitmap (10' 10);  
Magic Number,Controls,CameraView,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\CameraView.cs,CameraView,The following statement contains a magic number: view = new Bitmap (10' 10);  
Magic Number,Controls,CameraView,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\CameraView.cs,GetDefaultSrc,The following statement contains a magic number: switch (DefaultVideoSource) {  case DefaultVideoSource.WPILibTcpStream:  	if (TeamNumber != 0)  		return new WPILibTcpVideoSource (TeamNumber);  	else  		return null;  case DefaultVideoSource.Webcam:  	return new WebCamVideoSource (50' this.Width' this.Height);  case DefaultVideoSource.Manual:  default:  	return null;  }  
Magic Number,Controls,CameraView,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\CameraView.cs,GetDefaultSrc,The following statement contains a magic number: return new WebCamVideoSource (50' this.Width' this.Height);  
Magic Number,Net.Video,VideoEncoder,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\VideoStreamSaver.cs,Add,The following statement contains a magic number: jbe.QualityLevel = 100;  
Magic Number,System451.Communication.Dashboard.WPF.Controls,AnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\AnalogMeter.cs,AnalogMeter,The following statement contains a magic number: this.Width = 100;  
Magic Number,System451.Communication.Dashboard.WPF.Controls,AnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\AnalogMeter.cs,AnalogMeter,The following statement contains a magic number: this.Height = 50;  
Magic Number,System451.Communication.Dashboard.WPF.Controls,AnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\AnalogMeter.cs,Convert,The following statement contains a magic number: return Math.Max (-90' Math.Min (((Math.Max (ths.Min' Math.Min ((double)value [1]' ths.Max)) - ths.Min) / (ths.Max - ths.Min) * 180) - 90' 90));  
Magic Number,System451.Communication.Dashboard.WPF.Controls,AnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\AnalogMeter.cs,Convert,The following statement contains a magic number: return Math.Max (-90' Math.Min (((Math.Max (ths.Min' Math.Min ((double)value [1]' ths.Max)) - ths.Min) / (ths.Max - ths.Min) * 180) - 90' 90));  
Magic Number,System451.Communication.Dashboard.WPF.Controls,AnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\AnalogMeter.cs,Convert,The following statement contains a magic number: return Math.Max (-90' Math.Min (((Math.Max (ths.Min' Math.Min ((double)value [1]' ths.Max)) - ths.Min) / (ths.Max - ths.Min) * 180) - 90' 90));  
Magic Number,System451.Communication.Dashboard.WPF.Controls,AnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\AnalogMeter.cs,Convert,The following statement contains a magic number: return Math.Max (-90' Math.Min (((Math.Max (ths.Min' Math.Min ((double)value [1]' ths.Max)) - ths.Min) / (ths.Max - ths.Min) * 180) - 90' 90));  
Magic Number,System451.Communication.Dashboard.WPF.Controls,AnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\AnalogMeter.cs,SetRangeToAnalog,The following statement contains a magic number: Max = 1024;  
Magic Number,System451.Communication.Dashboard.WPF.Controls,AnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\AnalogMeter.cs,SetRangeToAnalogV,The following statement contains a magic number: Max = 5;  
Magic Number,System451.Communication.Dashboard.WPF.Controls,AnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\AnalogMeter.cs,SetRangeToDegrees,The following statement contains a magic number: Min = -90;  
Magic Number,System451.Communication.Dashboard.WPF.Controls,AnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\AnalogMeter.cs,SetRangeToDegrees,The following statement contains a magic number: Max = 90;  
Magic Number,System451.Communication.Dashboard.WPF.Controls,AnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\AnalogMeter.cs,ValueMeter_MouseMove,The following statement contains a magic number: if (draggin) {  	DoubleValue = Math.Max (this.Min' Math.Min (this.Max' PointToAngle (e.GetPosition (this)) / 180 * (this.Max - this.Min) + this.Min));  	if (DataUpdated != null)  		DataUpdated (this' new ZomBDataControlUpdatedEventArgs (ControlName' DoubleValue.ToString ()));  }  
Magic Number,System451.Communication.Dashboard.WPF.Controls,AnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\AnalogMeter.cs,ValueMeter_MouseMove,The following statement contains a magic number: DoubleValue = Math.Max (this.Min' Math.Min (this.Max' PointToAngle (e.GetPosition (this)) / 180 * (this.Max - this.Min) + this.Min));  
Magic Number,System451.Communication.Dashboard.WPF.Controls,AnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\AnalogMeter.cs,PointToAngle,The following statement contains a magic number: if (p.Y > (this.ActualHeight * .87)) {  	if (p.X > (this.ActualWidth / 2))  		return 180;  	return 0;  }  
Magic Number,System451.Communication.Dashboard.WPF.Controls,AnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\AnalogMeter.cs,PointToAngle,The following statement contains a magic number: if (p.Y > (this.ActualHeight * .87)) {  	if (p.X > (this.ActualWidth / 2))  		return 180;  	return 0;  }  
Magic Number,System451.Communication.Dashboard.WPF.Controls,AnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\AnalogMeter.cs,PointToAngle,The following statement contains a magic number: if (p.Y > (this.ActualHeight * .87)) {  	if (p.X > (this.ActualWidth / 2))  		return 180;  	return 0;  }  
Magic Number,System451.Communication.Dashboard.WPF.Controls,AnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\AnalogMeter.cs,PointToAngle,The following statement contains a magic number: if (p.X > (this.ActualWidth / 2))  	return 180;  
Magic Number,System451.Communication.Dashboard.WPF.Controls,AnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\AnalogMeter.cs,PointToAngle,The following statement contains a magic number: if (p.X > (this.ActualWidth / 2))  	return 180;  
Magic Number,System451.Communication.Dashboard.WPF.Controls,AnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\AnalogMeter.cs,PointToAngle,The following statement contains a magic number: return 180;  
Magic Number,System451.Communication.Dashboard.WPF.Controls,AnalogMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\AnalogMeter.cs,PointToAngle,The following statement contains a magic number: return r + 90;  
Magic Number,System451.Communication.Dashboard.WPF.Controls,AlertControl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\AlertControl.cs,AlertControl,The following statement contains a magic number: this.Width = 50;  
Magic Number,System451.Communication.Dashboard.WPF.Controls,AlertControl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\AlertControl.cs,AlertControl,The following statement contains a magic number: this.Height = 50;  
Magic Number,System451.Communication.Dashboard.WPF.Controls,CameraView,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\CameraView.cs,CameraView,The following statement contains a magic number: this.Width = 320;  
Magic Number,System451.Communication.Dashboard.WPF.Controls,CameraView,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\CameraView.cs,CameraView,The following statement contains a magic number: this.Height = 240;  
Magic Number,System451.Communication.Dashboard.WPF.Controls,CameraView,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\CameraView.cs,CameraView,The following statement contains a magic number: mi.FontSize = 20;  
Magic Number,System451.Communication.Dashboard.WPF.Controls,CameraView,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\CameraView.cs,CameraView,The following statement contains a magic number: smi.FontSize = 20;  
Magic Number,System451.Communication.Dashboard.WPF.Controls,CameraView,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\CameraView.cs,CameraView,The following statement contains a magic number: vss = new VideoStreamSaver (this' BTZomBFingerFactory.DefaultSaveLocation + "\\Capture" + (DateTime.Now.Ticks.ToString ("x")) + ((long)Math.Round (rand.NextTSDouble () * 999)).ToString ("x") + ".webm");  
Magic Number,System451.Communication.Dashboard.WPF.Controls,CameraView,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\CameraView.cs,StopSave,The following statement contains a magic number: if (started) {  	vss.EndSave ();  	smi.Visibility = Visibility.Collapsed;  	mi.Visibility = Visibility.Visible;  	started = false;  	vss = new VideoStreamSaver (this' BTZomBFingerFactory.DefaultSaveLocation + "\\Capture" + (DateTime.Now.Ticks.ToString ("x")) + ((long)Math.Round (rand.NextTSDouble () * 999)).ToString ("x") + ".webm");  	vss.FPS = (float)RecordingFPS;  }  
Magic Number,System451.Communication.Dashboard.WPF.Controls,CameraView,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\CameraView.cs,StopSave,The following statement contains a magic number: vss = new VideoStreamSaver (this' BTZomBFingerFactory.DefaultSaveLocation + "\\Capture" + (DateTime.Now.Ticks.ToString ("x")) + ((long)Math.Round (rand.NextTSDouble () * 999)).ToString ("x") + ".webm");  
Magic Number,System451.Communication.Dashboard.WPF.Controls,CameraView,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\CameraView.cs,TeamUpdated,The following statement contains a magic number: try {  	var iparea = VideoSourceArgs.Contains ('?') ? VideoSourceArgs.Substring (0' VideoSourceArgs.IndexOf ('?')) : VideoSourceArgs;  	var fps = VideoSourceArgs.Contains ('?') ? int.Parse (VideoSourceArgs.Substring (VideoSourceArgs.IndexOf ('?') + 1)) : 15;  	videoSource = ((VideoSource == DefaultVideoSource.WPILibTcpStream) ? (IDashboardVideoDataSource)new WPILibTcpVideoSource (TeamNumber) : ((VideoSource == DefaultVideoSource.Webcam) ? (IDashboardVideoDataSource)new WebCamVideoSource () : ((VideoSource == DefaultVideoSource.MJPEGStream) ? (IDashboardVideoDataSource)new MJPEGVideoSource (IPAddress.Parse (iparea)' fps) : null)));  	videoSource.NewImageRecieved += new NewImageDataRecievedEventHandler (videoSource_NewImageRecieved);  	videoSource.Start ();  }  catch {  }  
Magic Number,System451.Communication.Dashboard.WPF.Controls,CameraView,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\CameraView.cs,videoSource_NewImageRecieved,The following statement contains a magic number: try {  	Dispatcher.Invoke (new JFunction (incoming =>  {  		PART_img.Source = incoming;  		if (this.dataUpdatedEvent != null) {  			laststream = e.NewDataStream;  			dataUpdatedEvent (this' new EventArgs ());  		}  		if (fpslabel != null && ShowFPS)  			fpslabel.Content = Math.Round (FPS ()' 2);  		else  			FPS ();  	})' JpegBitmapDecoder.Create (e.NewDataStream' BitmapCreateOptions.None' BitmapCacheOption.None).Frames [0]);  }  catch (System.Exception x) {  	System.Windows.Forms.MessageBox.Show (x.ToString ());  }  
Magic Number,System451.Communication.Dashboard.WPF.Controls,CameraView,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\CameraView.cs,videoSource_NewImageRecieved,The following statement contains a magic number: Dispatcher.Invoke (new JFunction (incoming =>  {  	PART_img.Source = incoming;  	if (this.dataUpdatedEvent != null) {  		laststream = e.NewDataStream;  		dataUpdatedEvent (this' new EventArgs ());  	}  	if (fpslabel != null && ShowFPS)  		fpslabel.Content = Math.Round (FPS ()' 2);  	else  		FPS ();  })' JpegBitmapDecoder.Create (e.NewDataStream' BitmapCreateOptions.None' BitmapCacheOption.None).Frames [0]);  
Magic Number,System451.Communication.Dashboard.WPF.Controls,CameraView,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\CameraView.cs,videoSource_NewImageRecieved,The following statement contains a magic number: if (fpslabel != null && ShowFPS)  	fpslabel.Content = Math.Round (FPS ()' 2);  else  	FPS ();  
Magic Number,System451.Communication.Dashboard.WPF.Controls,CameraView,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\CameraView.cs,videoSource_NewImageRecieved,The following statement contains a magic number: fpslabel.Content = Math.Round (FPS ()' 2);  
Magic Number,System451.Communication.Dashboard.WPF.Controls,CameraView,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\CameraView.cs,FPS,The following statement contains a magic number: if (System.Environment.TickCount - lastTick >= 1000) {  	lastFrameRate = frameRate * 1000.0 / (double)(System.Environment.TickCount - lastTick);  	frameRate = 0;  	lastTick = System.Environment.TickCount;  }  
Magic Number,System451.Communication.Dashboard.WPF.Controls,CameraView,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\CameraView.cs,FPS,The following statement contains a magic number: if (System.Environment.TickCount - lastTick >= 1000) {  	lastFrameRate = frameRate * 1000.0 / (double)(System.Environment.TickCount - lastTick);  	frameRate = 0;  	lastTick = System.Environment.TickCount;  }  
Magic Number,System451.Communication.Dashboard.WPF.Controls,CameraView,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\CameraView.cs,FPS,The following statement contains a magic number: lastFrameRate = frameRate * 1000.0 / (double)(System.Environment.TickCount - lastTick);  
Magic Number,System451.Communication.Dashboard.WPF.Controls,ZomBGLControlGroup,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Composite\ZomBGLControlGroup.cs,AddTriggerHandler,The following statement contains a magic number: item.Triggered += delegate {  	string[] trigs = item.TriggerListeners.Split ();  	foreach (var trig in trigs) {  		string[] nv = trig.Split (':');  		if (nv.Length == 2)  			CallTrigger (nv [0]' nv [1]);  	}  };  
Magic Number,System451.Communication.Dashboard.WPF.Controls,ZomBGLControlGroup,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Composite\ZomBGLControlGroup.cs,AddTriggerHandler,The following statement contains a magic number: foreach (var trig in trigs) {  	string[] nv = trig.Split (':');  	if (nv.Length == 2)  		CallTrigger (nv [0]' nv [1]);  }  
Magic Number,System451.Communication.Dashboard.WPF.Controls,ZomBGLControlGroup,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Composite\ZomBGLControlGroup.cs,AddTriggerHandler,The following statement contains a magic number: if (nv.Length == 2)  	CallTrigger (nv [0]' nv [1]);  
Magic Number,System451.Communication.Dashboard.WPF.Controls,ZImage,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Image.cs,ZImage,The following statement contains a magic number: this.Width = 100;  
Magic Number,System451.Communication.Dashboard.WPF.Controls,ZImage,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Image.cs,ZImage,The following statement contains a magic number: this.Height = 100;  
Magic Number,System451.Communication.Dashboard.WPF.Controls,NetForward,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\NetForward.cs,NetForward,The following statement contains a magic number: this.Width = 20;  
Magic Number,System451.Communication.Dashboard.WPF.Controls,NetForward,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\NetForward.cs,NetForward,The following statement contains a magic number: this.Height = 20;  
Magic Number,System451.Communication.Dashboard.WPF.Controls,FlowPropertyGrid,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\FlowPropertyGrid.cs,MeasureOverride,The following statement contains a magic number: for (int i = 0; i < Children.Count; i++) {  	child = Children [i];  	child.Measure (InfiniteSize);  	if (i % 2 == 0)//left side  	 {  		maxl = Math.Max (maxl' child.DesiredSize.Width);  	}  	else {  		maxr = Math.Max (maxr' child.DesiredSize.Width);  	}  	maxh = Math.Max (maxh' child.DesiredSize.Height);  }  
Magic Number,System451.Communication.Dashboard.WPF.Controls,FlowPropertyGrid,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\FlowPropertyGrid.cs,MeasureOverride,The following statement contains a magic number: if (i % 2 == 0)//left side   {  	maxl = Math.Max (maxl' child.DesiredSize.Width);  }  else {  	maxr = Math.Max (maxr' child.DesiredSize.Width);  }  
Magic Number,System451.Communication.Dashboard.WPF.Controls,FlowPropertyGrid,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\FlowPropertyGrid.cs,MeasureOverride,The following statement contains a magic number: if (Orientation == Orientation.Horizontal) {  	double numrows = Math.Ceiling (Children.Count / 2.0);  	numrows = ((numrows * recmaxh) > availableSize.Height) ? Math.Floor (availableSize.Height / recmaxh) : numrows;  	double numcols = Math.Ceiling (Math.Ceiling (Children.Count / 2.0) / numrows);  	return new Size ((numcols * (recmaxr + recmaxl)) + ((numcols * CollumnPadding) - CollumnPadding)' numrows * recmaxh);  }  
Magic Number,System451.Communication.Dashboard.WPF.Controls,FlowPropertyGrid,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\FlowPropertyGrid.cs,MeasureOverride,The following statement contains a magic number: if (Orientation == Orientation.Horizontal) {  	double numrows = Math.Ceiling (Children.Count / 2.0);  	numrows = ((numrows * recmaxh) > availableSize.Height) ? Math.Floor (availableSize.Height / recmaxh) : numrows;  	double numcols = Math.Ceiling (Math.Ceiling (Children.Count / 2.0) / numrows);  	return new Size ((numcols * (recmaxr + recmaxl)) + ((numcols * CollumnPadding) - CollumnPadding)' numrows * recmaxh);  }  
Magic Number,System451.Communication.Dashboard.WPF.Controls,FlowPropertyGrid,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\FlowPropertyGrid.cs,MeasureOverride,The following statement contains a magic number: return new Size (maxl + maxr' maxh * Math.Ceiling (Children.Count / 2.0));  
Magic Number,System451.Communication.Dashboard.WPF.Controls,FlowPropertyGrid,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\FlowPropertyGrid.cs,ArrangeOverride,The following statement contains a magic number: if (Orientation == Orientation.Horizontal) {  	//must use columnmunmunmunmnunmmnunmununnnmnmunnms  	//must learn to spell above word  	numrows = ((numrows * recmaxh) > finalSize.Height) ? Math.Floor (finalSize.Height / recmaxh) : numrows;  	finalHeight = recmaxh;  	numcols = Math.Ceiling (Math.Ceiling (Children.Count / 2.0) / numrows);  	finalWidthl = recmaxl;  	finalWidthr = recmaxr;  }  
Magic Number,System451.Communication.Dashboard.WPF.Controls,FlowPropertyGrid,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\FlowPropertyGrid.cs,ArrangeOverride,The following statement contains a magic number: numcols = Math.Ceiling (Math.Ceiling (Children.Count / 2.0) / numrows);  
Magic Number,System451.Communication.Dashboard.WPF.Controls,FlowPropertyGrid,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\FlowPropertyGrid.cs,ArrangeOverride,The following statement contains a magic number: for (int i = 0; i < Children.Count; i++) {  	child = Children [i];  	if (i % (numrows * 2) == 0)//start new row  	 {  		x += finalWidthl + finalWidthr + CollumnPadding;  		y = 0;  	}  	if (i % 2 == 0)//left side  	 {  		child.Arrange (new Rect (x' y' finalWidthl' finalHeight));  	}  	else {  		child.Arrange (new Rect (x + finalWidthl' y' finalWidthr' finalHeight));  		y += finalHeight;  	}  }  
Magic Number,System451.Communication.Dashboard.WPF.Controls,FlowPropertyGrid,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\FlowPropertyGrid.cs,ArrangeOverride,The following statement contains a magic number: for (int i = 0; i < Children.Count; i++) {  	child = Children [i];  	if (i % (numrows * 2) == 0)//start new row  	 {  		x += finalWidthl + finalWidthr + CollumnPadding;  		y = 0;  	}  	if (i % 2 == 0)//left side  	 {  		child.Arrange (new Rect (x' y' finalWidthl' finalHeight));  	}  	else {  		child.Arrange (new Rect (x + finalWidthl' y' finalWidthr' finalHeight));  		y += finalHeight;  	}  }  
Magic Number,System451.Communication.Dashboard.WPF.Controls,FlowPropertyGrid,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\FlowPropertyGrid.cs,ArrangeOverride,The following statement contains a magic number: if (i % (numrows * 2) == 0)//start new row   {  	x += finalWidthl + finalWidthr + CollumnPadding;  	y = 0;  }  
Magic Number,System451.Communication.Dashboard.WPF.Controls,FlowPropertyGrid,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\FlowPropertyGrid.cs,ArrangeOverride,The following statement contains a magic number: if (i % 2 == 0)//left side   {  	child.Arrange (new Rect (x' y' finalWidthl' finalHeight));  }  else {  	child.Arrange (new Rect (x + finalWidthl' y' finalWidthr' finalHeight));  	y += finalHeight;  }  
Magic Number,System451.Communication.Dashboard.WPF.Controls,StatusTextBox,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\StatusTextBox.cs,StatusTextBox,The following statement contains a magic number: this.Width = 50;  
Magic Number,System451.Communication.Dashboard.WPF.Controls,StatusTextBox,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\StatusTextBox.cs,StatusTextBox,The following statement contains a magic number: this.Height = 25;  
Magic Number,System451.Communication.Dashboard.WPF.Controls,ValueMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\ValueMeter.cs,ValueMeter,The following statement contains a magic number: this.Width = 50;  
Magic Number,System451.Communication.Dashboard.WPF.Controls,ValueMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\ValueMeter.cs,ValueMeter,The following statement contains a magic number: this.Height = 100;  
Magic Number,System451.Communication.Dashboard.WPF.Controls,ValueMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\ValueMeter.cs,ValueMeter,The following statement contains a magic number: BarWidth = 5.0;  
Magic Number,System451.Communication.Dashboard.WPF.Controls,ValueMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\ValueMeter.cs,SetRangeToBattery,The following statement contains a magic number: Min = 7.0;  
Magic Number,System451.Communication.Dashboard.WPF.Controls,ValueMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\ValueMeter.cs,SetRangeToBattery,The following statement contains a magic number: Max = 14.5;  
Magic Number,System451.Communication.Dashboard.WPF.Controls,ValueMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\ValueMeter.cs,SetRangeToBattery,The following statement contains a magic number: HighThreshold = 13.25;  
Magic Number,System451.Communication.Dashboard.WPF.Controls,ValueMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\ValueMeter.cs,SetRangeToBattery,The following statement contains a magic number: LowThreshold = 9.5;  
Magic Number,System451.Communication.Dashboard.WPF.Controls,ValueMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\ValueMeter.cs,SetRangeToBattery,The following statement contains a magic number: DoubleValue = 12.0;  
Magic Number,System451.Communication.Dashboard.WPF.Controls,ValueMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\ValueMeter.cs,SetRangeToNormalized,The following statement contains a magic number: BarWidth = 5;  
Magic Number,System451.Communication.Dashboard.WPF.Controls,ValueMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\ValueMeter.cs,Convert,The following statement contains a magic number: if (parameter != null && parameter.ToString () == "Mov")  	return 1 - Math.Min (Math.Max ((((double)value [1] - ths.Min) / (ths.Max - ths.Min))' 0)' 1) - (ths.BarWidth / 100);  
Magic Number,System451.Communication.Dashboard.WPF.Controls,ValueMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\ValueMeter.cs,Convert,The following statement contains a magic number: return 1 - Math.Min (Math.Max ((((double)value [1] - ths.Min) / (ths.Max - ths.Min))' 0)' 1) - (ths.BarWidth / 100);  
Magic Number,System451.Communication.Dashboard.WPF.Controls,DataGraph,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\DataGraph.cs,DataGraph,The following statement contains a magic number: this.Width = 200;  
Magic Number,System451.Communication.Dashboard.WPF.Controls,DataGraph,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\DataGraph.cs,DataGraph,The following statement contains a magic number: this.Height = 100;  
Magic Number,System451.Communication.Dashboard.WPF.Controls,DataGraph,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\DataGraph.cs,DataGraph,The following statement contains a magic number: for (int i = 0; i < 300; i++)  	vals.Enqueue (0);  
Magic Number,System451.Communication.Dashboard.WPF.Controls,DataGraph,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\DataGraph.cs,Regenerate,The following statement contains a magic number: if (AutoSize) {  	double max' min;  	max = min = vals.Peek ();  	foreach (var y in vals) {  		if (y > max)  			max = y;  		else if (y < min)  			min = y;  	}  	if (max == min) {  		++max;  		--min;  	}  	else {  		var dist = (max - min) * (5 / 4);  		var oldmax = max;  		max = dist + min;  		min = oldmax - dist;  	}  	Max = max;  	Min = min;  }  
Magic Number,System451.Communication.Dashboard.WPF.Controls,DataGraph,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\DataGraph.cs,Regenerate,The following statement contains a magic number: if (AutoSize) {  	double max' min;  	max = min = vals.Peek ();  	foreach (var y in vals) {  		if (y > max)  			max = y;  		else if (y < min)  			min = y;  	}  	if (max == min) {  		++max;  		--min;  	}  	else {  		var dist = (max - min) * (5 / 4);  		var oldmax = max;  		max = dist + min;  		min = oldmax - dist;  	}  	Max = max;  	Min = min;  }  
Magic Number,System451.Communication.Dashboard.WPF.Controls,DataGraph,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\DataGraph.cs,Regenerate,The following statement contains a magic number: if (max == min) {  	++max;  	--min;  }  else {  	var dist = (max - min) * (5 / 4);  	var oldmax = max;  	max = dist + min;  	min = oldmax - dist;  }  
Magic Number,System451.Communication.Dashboard.WPF.Controls,DataGraph,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\DataGraph.cs,Regenerate,The following statement contains a magic number: if (max == min) {  	++max;  	--min;  }  else {  	var dist = (max - min) * (5 / 4);  	var oldmax = max;  	max = dist + min;  	min = oldmax - dist;  }  
Magic Number,System451.Communication.Dashboard.WPF.Controls,DataGraph,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\DataGraph.cs,Regenerate,The following statement contains a magic number: foreach (var y in vals) {  	if (x == 0) {  		pf.StartPoint = new Point (++x / 2.0' Neutralize (y));  	}  	else {  		pf.Segments.Add (new LineSegment (new Point (++x / 2.0' Neutralize (y))' true));  	}  }  
Magic Number,System451.Communication.Dashboard.WPF.Controls,DataGraph,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\DataGraph.cs,Regenerate,The following statement contains a magic number: foreach (var y in vals) {  	if (x == 0) {  		pf.StartPoint = new Point (++x / 2.0' Neutralize (y));  	}  	else {  		pf.Segments.Add (new LineSegment (new Point (++x / 2.0' Neutralize (y))' true));  	}  }  
Magic Number,System451.Communication.Dashboard.WPF.Controls,DataGraph,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\DataGraph.cs,Regenerate,The following statement contains a magic number: if (x == 0) {  	pf.StartPoint = new Point (++x / 2.0' Neutralize (y));  }  else {  	pf.Segments.Add (new LineSegment (new Point (++x / 2.0' Neutralize (y))' true));  }  
Magic Number,System451.Communication.Dashboard.WPF.Controls,DataGraph,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\DataGraph.cs,Regenerate,The following statement contains a magic number: if (x == 0) {  	pf.StartPoint = new Point (++x / 2.0' Neutralize (y));  }  else {  	pf.Segments.Add (new LineSegment (new Point (++x / 2.0' Neutralize (y))' true));  }  
Magic Number,System451.Communication.Dashboard.WPF.Controls,DataGraph,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\DataGraph.cs,Regenerate,The following statement contains a magic number: pf.StartPoint = new Point (++x / 2.0' Neutralize (y));  
Magic Number,System451.Communication.Dashboard.WPF.Controls,DataGraph,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\DataGraph.cs,Regenerate,The following statement contains a magic number: pf.Segments.Add (new LineSegment (new Point (++x / 2.0' Neutralize (y))' true));  
Magic Number,System451.Communication.Dashboard.WPF.Controls,DataGraph,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\DataGraph.cs,Neutralize,The following statement contains a magic number: return 20 - (((y - Min) / (Max - Min)) * 20.0);  
Magic Number,System451.Communication.Dashboard.WPF.Controls,DataGraph,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\DataGraph.cs,Neutralize,The following statement contains a magic number: return 20 - (((y - Min) / (Max - Min)) * 20.0);  
Magic Number,System451.Communication.Dashboard.WPF.Controls,DataGraph,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\DataGraph.cs,Convert,The following statement contains a magic number: return (1 / ((double)value / 50.0));  
Magic Number,System451.Communication.Dashboard.WPF.Controls,DataGraph,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\DataGraph.cs,SetRangeToAnalog,The following statement contains a magic number: Max = 1024;  
Magic Number,System451.Communication.Dashboard.WPF.Controls,DataGraph,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\DataGraph.cs,SetRangeToAnalogV,The following statement contains a magic number: Max = 5;  
Magic Number,System451.Communication.Dashboard.WPF.Controls,DataGraph,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\DataGraph.cs,SetRangeToDegrees,The following statement contains a magic number: Max = 360;  
Magic Number,System451.Communication.Dashboard.WPF.Controls,DataGraph,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\DataGraph.cs,SetRangeToRadians,The following statement contains a magic number: Max = 2 * Math.PI;  
Magic Number,System451.Communication.Dashboard.WPF.Controls,DataGraph,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\DataGraph.cs,SetRangeToBattery,The following statement contains a magic number: Min = 7.0;  
Magic Number,System451.Communication.Dashboard.WPF.Controls,DataGraph,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\DataGraph.cs,SetRangeToBattery,The following statement contains a magic number: Max = 14.5;  
Magic Number,System451.Communication.Dashboard.WPF.Controls,TacoMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\TacoMeter.cs,TacoMeter,The following statement contains a magic number: this.Width = 300;  
Magic Number,System451.Communication.Dashboard.WPF.Controls,TacoMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\TacoMeter.cs,TacoMeter,The following statement contains a magic number: this.Height = 150;  
Magic Number,System451.Communication.Dashboard.WPF.Controls,TacoMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\TacoMeter.cs,Convert,The following statement contains a magic number: v = (v - 0.5) * 180.0;  
Magic Number,System451.Communication.Dashboard.WPF.Controls,TacoMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\TacoMeter.cs,Convert,The following statement contains a magic number: v = (v - 0.5) * 180.0;  
Magic Number,System451.Communication.Dashboard.WPF.Controls,TacoMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\TacoMeter.cs,Convert,The following statement contains a magic number: if (parameter.ToString () == "2") {  	if (v < -25)  		return v - 91;  	return v - 150;  }  
Magic Number,System451.Communication.Dashboard.WPF.Controls,TacoMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\TacoMeter.cs,Convert,The following statement contains a magic number: if (parameter.ToString () == "2") {  	if (v < -25)  		return v - 91;  	return v - 150;  }  
Magic Number,System451.Communication.Dashboard.WPF.Controls,TacoMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\TacoMeter.cs,Convert,The following statement contains a magic number: if (parameter.ToString () == "2") {  	if (v < -25)  		return v - 91;  	return v - 150;  }  
Magic Number,System451.Communication.Dashboard.WPF.Controls,TacoMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\TacoMeter.cs,Convert,The following statement contains a magic number: if (v < -25)  	return v - 91;  
Magic Number,System451.Communication.Dashboard.WPF.Controls,TacoMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\TacoMeter.cs,Convert,The following statement contains a magic number: if (v < -25)  	return v - 91;  
Magic Number,System451.Communication.Dashboard.WPF.Controls,TacoMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\TacoMeter.cs,Convert,The following statement contains a magic number: return v - 91;  
Magic Number,System451.Communication.Dashboard.WPF.Controls,TacoMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\TacoMeter.cs,Convert,The following statement contains a magic number: return v - 150;  
Magic Number,System451.Communication.Dashboard.WPF.Controls,TacoMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\TacoMeter.cs,Convert,The following statement contains a magic number: return v - 90;  
Magic Number,System451.Communication.Dashboard.WPF.Controls,TacoMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\TacoMeter.cs,SetRangeToAnalog,The following statement contains a magic number: Max = 1024;  
Magic Number,System451.Communication.Dashboard.WPF.Controls,TacoMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\TacoMeter.cs,SetRangeToDegrees,The following statement contains a magic number: Min = -90;  
Magic Number,System451.Communication.Dashboard.WPF.Controls,TacoMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\TacoMeter.cs,SetRangeToDegrees,The following statement contains a magic number: Max = 90;  
Magic Number,System451.Communication.Dashboard.WPF.Controls,TacoMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\TacoMeter.cs,ValueMeter_MouseMove,The following statement contains a magic number: if (draggin) {  	DoubleValue = Math.Max (this.Min' Math.Min (this.Max' PointToAngle (e.GetPosition (this)) / 180 * (this.Max - this.Min) + this.Min));  	if (DataUpdated != null)  		DataUpdated (this' new ZomBDataControlUpdatedEventArgs (ControlName' DoubleValue.ToString ()));  }  
Magic Number,System451.Communication.Dashboard.WPF.Controls,TacoMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\TacoMeter.cs,ValueMeter_MouseMove,The following statement contains a magic number: DoubleValue = Math.Max (this.Min' Math.Min (this.Max' PointToAngle (e.GetPosition (this)) / 180 * (this.Max - this.Min) + this.Min));  
Magic Number,System451.Communication.Dashboard.WPF.Controls,TacoMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\TacoMeter.cs,PointToAngle,The following statement contains a magic number: if (p.Y > (this.ActualHeight)) {  	if (p.X > (this.ActualWidth / 2))  		return 180;  	return 0;  }  
Magic Number,System451.Communication.Dashboard.WPF.Controls,TacoMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\TacoMeter.cs,PointToAngle,The following statement contains a magic number: if (p.Y > (this.ActualHeight)) {  	if (p.X > (this.ActualWidth / 2))  		return 180;  	return 0;  }  
Magic Number,System451.Communication.Dashboard.WPF.Controls,TacoMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\TacoMeter.cs,PointToAngle,The following statement contains a magic number: if (p.X > (this.ActualWidth / 2))  	return 180;  
Magic Number,System451.Communication.Dashboard.WPF.Controls,TacoMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\TacoMeter.cs,PointToAngle,The following statement contains a magic number: if (p.X > (this.ActualWidth / 2))  	return 180;  
Magic Number,System451.Communication.Dashboard.WPF.Controls,TacoMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\TacoMeter.cs,PointToAngle,The following statement contains a magic number: return 180;  
Magic Number,System451.Communication.Dashboard.WPF.Controls,TacoMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\TacoMeter.cs,PointToAngle,The following statement contains a magic number: return r + 90;  
Magic Number,System451.Communication.Dashboard.WPF.Controls,DebugGrid,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\DebugGrid.cs,DebugGrid,The following statement contains a magic number: this.Height = 100;  
Magic Number,System451.Communication.Dashboard.WPF.Controls,DebugGrid,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\DebugGrid.cs,DebugGrid,The following statement contains a magic number: this.Width = 125;  
Magic Number,System451.Communication.Dashboard.WPF.Controls,SpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\SpeedMeter.cs,SpeedMeter,The following statement contains a magic number: this.Width = 100;  
Magic Number,System451.Communication.Dashboard.WPF.Controls,SpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\SpeedMeter.cs,SpeedMeter,The following statement contains a magic number: this.Height = 50;  
Magic Number,System451.Communication.Dashboard.WPF.Controls,SpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\SpeedMeter.cs,SetRangeToAnalog,The following statement contains a magic number: Max = 1024;  
Magic Number,System451.Communication.Dashboard.WPF.Controls,SpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\SpeedMeter.cs,SetRangeToAnalogV,The following statement contains a magic number: Max = 5;  
Magic Number,System451.Communication.Dashboard.WPF.Controls,SpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\SpeedMeter.cs,Convert,The following statement contains a magic number: if (parameter.ToString () == "l") {  	if (r <= 0) {  		return -90.0;  	}  	else {  		return r / 2.5;  	}  }  else if (parameter.ToString () == "l2") {  	if (r <= 0) {  		return -90.0;  	}  	else {  		return r / 6;  	}  }  else if (parameter.ToString () == "r") {  	if (r >= 0) {  		return 90.0;  	}  	else {  		return r / 2.5;  	}  }  else if (parameter.ToString () == "r2") {  	if (r >= 0) {  		return 90.0;  	}  	else {  		return r / 6.0;  	}  }  else if (parameter.ToString () == "sh") {  	if (r > 0) {  		return -50.0;  	}  	else {  		return 0.0;  	}  }  else  	return r;  
Magic Number,System451.Communication.Dashboard.WPF.Controls,SpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\SpeedMeter.cs,Convert,The following statement contains a magic number: if (parameter.ToString () == "l") {  	if (r <= 0) {  		return -90.0;  	}  	else {  		return r / 2.5;  	}  }  else if (parameter.ToString () == "l2") {  	if (r <= 0) {  		return -90.0;  	}  	else {  		return r / 6;  	}  }  else if (parameter.ToString () == "r") {  	if (r >= 0) {  		return 90.0;  	}  	else {  		return r / 2.5;  	}  }  else if (parameter.ToString () == "r2") {  	if (r >= 0) {  		return 90.0;  	}  	else {  		return r / 6.0;  	}  }  else if (parameter.ToString () == "sh") {  	if (r > 0) {  		return -50.0;  	}  	else {  		return 0.0;  	}  }  else  	return r;  
Magic Number,System451.Communication.Dashboard.WPF.Controls,SpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\SpeedMeter.cs,Convert,The following statement contains a magic number: if (parameter.ToString () == "l") {  	if (r <= 0) {  		return -90.0;  	}  	else {  		return r / 2.5;  	}  }  else if (parameter.ToString () == "l2") {  	if (r <= 0) {  		return -90.0;  	}  	else {  		return r / 6;  	}  }  else if (parameter.ToString () == "r") {  	if (r >= 0) {  		return 90.0;  	}  	else {  		return r / 2.5;  	}  }  else if (parameter.ToString () == "r2") {  	if (r >= 0) {  		return 90.0;  	}  	else {  		return r / 6.0;  	}  }  else if (parameter.ToString () == "sh") {  	if (r > 0) {  		return -50.0;  	}  	else {  		return 0.0;  	}  }  else  	return r;  
Magic Number,System451.Communication.Dashboard.WPF.Controls,SpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\SpeedMeter.cs,Convert,The following statement contains a magic number: if (parameter.ToString () == "l") {  	if (r <= 0) {  		return -90.0;  	}  	else {  		return r / 2.5;  	}  }  else if (parameter.ToString () == "l2") {  	if (r <= 0) {  		return -90.0;  	}  	else {  		return r / 6;  	}  }  else if (parameter.ToString () == "r") {  	if (r >= 0) {  		return 90.0;  	}  	else {  		return r / 2.5;  	}  }  else if (parameter.ToString () == "r2") {  	if (r >= 0) {  		return 90.0;  	}  	else {  		return r / 6.0;  	}  }  else if (parameter.ToString () == "sh") {  	if (r > 0) {  		return -50.0;  	}  	else {  		return 0.0;  	}  }  else  	return r;  
Magic Number,System451.Communication.Dashboard.WPF.Controls,SpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\SpeedMeter.cs,Convert,The following statement contains a magic number: if (parameter.ToString () == "l") {  	if (r <= 0) {  		return -90.0;  	}  	else {  		return r / 2.5;  	}  }  else if (parameter.ToString () == "l2") {  	if (r <= 0) {  		return -90.0;  	}  	else {  		return r / 6;  	}  }  else if (parameter.ToString () == "r") {  	if (r >= 0) {  		return 90.0;  	}  	else {  		return r / 2.5;  	}  }  else if (parameter.ToString () == "r2") {  	if (r >= 0) {  		return 90.0;  	}  	else {  		return r / 6.0;  	}  }  else if (parameter.ToString () == "sh") {  	if (r > 0) {  		return -50.0;  	}  	else {  		return 0.0;  	}  }  else  	return r;  
Magic Number,System451.Communication.Dashboard.WPF.Controls,SpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\SpeedMeter.cs,Convert,The following statement contains a magic number: if (parameter.ToString () == "l") {  	if (r <= 0) {  		return -90.0;  	}  	else {  		return r / 2.5;  	}  }  else if (parameter.ToString () == "l2") {  	if (r <= 0) {  		return -90.0;  	}  	else {  		return r / 6;  	}  }  else if (parameter.ToString () == "r") {  	if (r >= 0) {  		return 90.0;  	}  	else {  		return r / 2.5;  	}  }  else if (parameter.ToString () == "r2") {  	if (r >= 0) {  		return 90.0;  	}  	else {  		return r / 6.0;  	}  }  else if (parameter.ToString () == "sh") {  	if (r > 0) {  		return -50.0;  	}  	else {  		return 0.0;  	}  }  else  	return r;  
Magic Number,System451.Communication.Dashboard.WPF.Controls,SpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\SpeedMeter.cs,Convert,The following statement contains a magic number: if (parameter.ToString () == "l") {  	if (r <= 0) {  		return -90.0;  	}  	else {  		return r / 2.5;  	}  }  else if (parameter.ToString () == "l2") {  	if (r <= 0) {  		return -90.0;  	}  	else {  		return r / 6;  	}  }  else if (parameter.ToString () == "r") {  	if (r >= 0) {  		return 90.0;  	}  	else {  		return r / 2.5;  	}  }  else if (parameter.ToString () == "r2") {  	if (r >= 0) {  		return 90.0;  	}  	else {  		return r / 6.0;  	}  }  else if (parameter.ToString () == "sh") {  	if (r > 0) {  		return -50.0;  	}  	else {  		return 0.0;  	}  }  else  	return r;  
Magic Number,System451.Communication.Dashboard.WPF.Controls,SpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\SpeedMeter.cs,Convert,The following statement contains a magic number: if (parameter.ToString () == "l") {  	if (r <= 0) {  		return -90.0;  	}  	else {  		return r / 2.5;  	}  }  else if (parameter.ToString () == "l2") {  	if (r <= 0) {  		return -90.0;  	}  	else {  		return r / 6;  	}  }  else if (parameter.ToString () == "r") {  	if (r >= 0) {  		return 90.0;  	}  	else {  		return r / 2.5;  	}  }  else if (parameter.ToString () == "r2") {  	if (r >= 0) {  		return 90.0;  	}  	else {  		return r / 6.0;  	}  }  else if (parameter.ToString () == "sh") {  	if (r > 0) {  		return -50.0;  	}  	else {  		return 0.0;  	}  }  else  	return r;  
Magic Number,System451.Communication.Dashboard.WPF.Controls,SpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\SpeedMeter.cs,Convert,The following statement contains a magic number: if (parameter.ToString () == "l") {  	if (r <= 0) {  		return -90.0;  	}  	else {  		return r / 2.5;  	}  }  else if (parameter.ToString () == "l2") {  	if (r <= 0) {  		return -90.0;  	}  	else {  		return r / 6;  	}  }  else if (parameter.ToString () == "r") {  	if (r >= 0) {  		return 90.0;  	}  	else {  		return r / 2.5;  	}  }  else if (parameter.ToString () == "r2") {  	if (r >= 0) {  		return 90.0;  	}  	else {  		return r / 6.0;  	}  }  else if (parameter.ToString () == "sh") {  	if (r > 0) {  		return -50.0;  	}  	else {  		return 0.0;  	}  }  else  	return r;  
Magic Number,System451.Communication.Dashboard.WPF.Controls,SpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\SpeedMeter.cs,Convert,The following statement contains a magic number: if (r <= 0) {  	return -90.0;  }  else {  	return r / 2.5;  }  
Magic Number,System451.Communication.Dashboard.WPF.Controls,SpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\SpeedMeter.cs,Convert,The following statement contains a magic number: if (r <= 0) {  	return -90.0;  }  else {  	return r / 2.5;  }  
Magic Number,System451.Communication.Dashboard.WPF.Controls,SpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\SpeedMeter.cs,Convert,The following statement contains a magic number: return -90.0;  
Magic Number,System451.Communication.Dashboard.WPF.Controls,SpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\SpeedMeter.cs,Convert,The following statement contains a magic number: return r / 2.5;  
Magic Number,System451.Communication.Dashboard.WPF.Controls,SpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\SpeedMeter.cs,Convert,The following statement contains a magic number: if (parameter.ToString () == "l2") {  	if (r <= 0) {  		return -90.0;  	}  	else {  		return r / 6;  	}  }  else if (parameter.ToString () == "r") {  	if (r >= 0) {  		return 90.0;  	}  	else {  		return r / 2.5;  	}  }  else if (parameter.ToString () == "r2") {  	if (r >= 0) {  		return 90.0;  	}  	else {  		return r / 6.0;  	}  }  else if (parameter.ToString () == "sh") {  	if (r > 0) {  		return -50.0;  	}  	else {  		return 0.0;  	}  }  else  	return r;  
Magic Number,System451.Communication.Dashboard.WPF.Controls,SpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\SpeedMeter.cs,Convert,The following statement contains a magic number: if (parameter.ToString () == "l2") {  	if (r <= 0) {  		return -90.0;  	}  	else {  		return r / 6;  	}  }  else if (parameter.ToString () == "r") {  	if (r >= 0) {  		return 90.0;  	}  	else {  		return r / 2.5;  	}  }  else if (parameter.ToString () == "r2") {  	if (r >= 0) {  		return 90.0;  	}  	else {  		return r / 6.0;  	}  }  else if (parameter.ToString () == "sh") {  	if (r > 0) {  		return -50.0;  	}  	else {  		return 0.0;  	}  }  else  	return r;  
Magic Number,System451.Communication.Dashboard.WPF.Controls,SpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\SpeedMeter.cs,Convert,The following statement contains a magic number: if (parameter.ToString () == "l2") {  	if (r <= 0) {  		return -90.0;  	}  	else {  		return r / 6;  	}  }  else if (parameter.ToString () == "r") {  	if (r >= 0) {  		return 90.0;  	}  	else {  		return r / 2.5;  	}  }  else if (parameter.ToString () == "r2") {  	if (r >= 0) {  		return 90.0;  	}  	else {  		return r / 6.0;  	}  }  else if (parameter.ToString () == "sh") {  	if (r > 0) {  		return -50.0;  	}  	else {  		return 0.0;  	}  }  else  	return r;  
Magic Number,System451.Communication.Dashboard.WPF.Controls,SpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\SpeedMeter.cs,Convert,The following statement contains a magic number: if (parameter.ToString () == "l2") {  	if (r <= 0) {  		return -90.0;  	}  	else {  		return r / 6;  	}  }  else if (parameter.ToString () == "r") {  	if (r >= 0) {  		return 90.0;  	}  	else {  		return r / 2.5;  	}  }  else if (parameter.ToString () == "r2") {  	if (r >= 0) {  		return 90.0;  	}  	else {  		return r / 6.0;  	}  }  else if (parameter.ToString () == "sh") {  	if (r > 0) {  		return -50.0;  	}  	else {  		return 0.0;  	}  }  else  	return r;  
Magic Number,System451.Communication.Dashboard.WPF.Controls,SpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\SpeedMeter.cs,Convert,The following statement contains a magic number: if (parameter.ToString () == "l2") {  	if (r <= 0) {  		return -90.0;  	}  	else {  		return r / 6;  	}  }  else if (parameter.ToString () == "r") {  	if (r >= 0) {  		return 90.0;  	}  	else {  		return r / 2.5;  	}  }  else if (parameter.ToString () == "r2") {  	if (r >= 0) {  		return 90.0;  	}  	else {  		return r / 6.0;  	}  }  else if (parameter.ToString () == "sh") {  	if (r > 0) {  		return -50.0;  	}  	else {  		return 0.0;  	}  }  else  	return r;  
Magic Number,System451.Communication.Dashboard.WPF.Controls,SpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\SpeedMeter.cs,Convert,The following statement contains a magic number: if (parameter.ToString () == "l2") {  	if (r <= 0) {  		return -90.0;  	}  	else {  		return r / 6;  	}  }  else if (parameter.ToString () == "r") {  	if (r >= 0) {  		return 90.0;  	}  	else {  		return r / 2.5;  	}  }  else if (parameter.ToString () == "r2") {  	if (r >= 0) {  		return 90.0;  	}  	else {  		return r / 6.0;  	}  }  else if (parameter.ToString () == "sh") {  	if (r > 0) {  		return -50.0;  	}  	else {  		return 0.0;  	}  }  else  	return r;  
Magic Number,System451.Communication.Dashboard.WPF.Controls,SpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\SpeedMeter.cs,Convert,The following statement contains a magic number: if (parameter.ToString () == "l2") {  	if (r <= 0) {  		return -90.0;  	}  	else {  		return r / 6;  	}  }  else if (parameter.ToString () == "r") {  	if (r >= 0) {  		return 90.0;  	}  	else {  		return r / 2.5;  	}  }  else if (parameter.ToString () == "r2") {  	if (r >= 0) {  		return 90.0;  	}  	else {  		return r / 6.0;  	}  }  else if (parameter.ToString () == "sh") {  	if (r > 0) {  		return -50.0;  	}  	else {  		return 0.0;  	}  }  else  	return r;  
Magic Number,System451.Communication.Dashboard.WPF.Controls,SpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\SpeedMeter.cs,Convert,The following statement contains a magic number: if (r <= 0) {  	return -90.0;  }  else {  	return r / 6;  }  
Magic Number,System451.Communication.Dashboard.WPF.Controls,SpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\SpeedMeter.cs,Convert,The following statement contains a magic number: if (r <= 0) {  	return -90.0;  }  else {  	return r / 6;  }  
Magic Number,System451.Communication.Dashboard.WPF.Controls,SpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\SpeedMeter.cs,Convert,The following statement contains a magic number: return -90.0;  
Magic Number,System451.Communication.Dashboard.WPF.Controls,SpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\SpeedMeter.cs,Convert,The following statement contains a magic number: return r / 6;  
Magic Number,System451.Communication.Dashboard.WPF.Controls,SpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\SpeedMeter.cs,Convert,The following statement contains a magic number: if (parameter.ToString () == "r") {  	if (r >= 0) {  		return 90.0;  	}  	else {  		return r / 2.5;  	}  }  else if (parameter.ToString () == "r2") {  	if (r >= 0) {  		return 90.0;  	}  	else {  		return r / 6.0;  	}  }  else if (parameter.ToString () == "sh") {  	if (r > 0) {  		return -50.0;  	}  	else {  		return 0.0;  	}  }  else  	return r;  
Magic Number,System451.Communication.Dashboard.WPF.Controls,SpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\SpeedMeter.cs,Convert,The following statement contains a magic number: if (parameter.ToString () == "r") {  	if (r >= 0) {  		return 90.0;  	}  	else {  		return r / 2.5;  	}  }  else if (parameter.ToString () == "r2") {  	if (r >= 0) {  		return 90.0;  	}  	else {  		return r / 6.0;  	}  }  else if (parameter.ToString () == "sh") {  	if (r > 0) {  		return -50.0;  	}  	else {  		return 0.0;  	}  }  else  	return r;  
Magic Number,System451.Communication.Dashboard.WPF.Controls,SpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\SpeedMeter.cs,Convert,The following statement contains a magic number: if (parameter.ToString () == "r") {  	if (r >= 0) {  		return 90.0;  	}  	else {  		return r / 2.5;  	}  }  else if (parameter.ToString () == "r2") {  	if (r >= 0) {  		return 90.0;  	}  	else {  		return r / 6.0;  	}  }  else if (parameter.ToString () == "sh") {  	if (r > 0) {  		return -50.0;  	}  	else {  		return 0.0;  	}  }  else  	return r;  
Magic Number,System451.Communication.Dashboard.WPF.Controls,SpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\SpeedMeter.cs,Convert,The following statement contains a magic number: if (parameter.ToString () == "r") {  	if (r >= 0) {  		return 90.0;  	}  	else {  		return r / 2.5;  	}  }  else if (parameter.ToString () == "r2") {  	if (r >= 0) {  		return 90.0;  	}  	else {  		return r / 6.0;  	}  }  else if (parameter.ToString () == "sh") {  	if (r > 0) {  		return -50.0;  	}  	else {  		return 0.0;  	}  }  else  	return r;  
Magic Number,System451.Communication.Dashboard.WPF.Controls,SpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\SpeedMeter.cs,Convert,The following statement contains a magic number: if (parameter.ToString () == "r") {  	if (r >= 0) {  		return 90.0;  	}  	else {  		return r / 2.5;  	}  }  else if (parameter.ToString () == "r2") {  	if (r >= 0) {  		return 90.0;  	}  	else {  		return r / 6.0;  	}  }  else if (parameter.ToString () == "sh") {  	if (r > 0) {  		return -50.0;  	}  	else {  		return 0.0;  	}  }  else  	return r;  
Magic Number,System451.Communication.Dashboard.WPF.Controls,SpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\SpeedMeter.cs,Convert,The following statement contains a magic number: if (r >= 0) {  	return 90.0;  }  else {  	return r / 2.5;  }  
Magic Number,System451.Communication.Dashboard.WPF.Controls,SpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\SpeedMeter.cs,Convert,The following statement contains a magic number: if (r >= 0) {  	return 90.0;  }  else {  	return r / 2.5;  }  
Magic Number,System451.Communication.Dashboard.WPF.Controls,SpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\SpeedMeter.cs,Convert,The following statement contains a magic number: return 90.0;  
Magic Number,System451.Communication.Dashboard.WPF.Controls,SpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\SpeedMeter.cs,Convert,The following statement contains a magic number: return r / 2.5;  
Magic Number,System451.Communication.Dashboard.WPF.Controls,SpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\SpeedMeter.cs,Convert,The following statement contains a magic number: if (parameter.ToString () == "r2") {  	if (r >= 0) {  		return 90.0;  	}  	else {  		return r / 6.0;  	}  }  else if (parameter.ToString () == "sh") {  	if (r > 0) {  		return -50.0;  	}  	else {  		return 0.0;  	}  }  else  	return r;  
Magic Number,System451.Communication.Dashboard.WPF.Controls,SpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\SpeedMeter.cs,Convert,The following statement contains a magic number: if (parameter.ToString () == "r2") {  	if (r >= 0) {  		return 90.0;  	}  	else {  		return r / 6.0;  	}  }  else if (parameter.ToString () == "sh") {  	if (r > 0) {  		return -50.0;  	}  	else {  		return 0.0;  	}  }  else  	return r;  
Magic Number,System451.Communication.Dashboard.WPF.Controls,SpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\SpeedMeter.cs,Convert,The following statement contains a magic number: if (parameter.ToString () == "r2") {  	if (r >= 0) {  		return 90.0;  	}  	else {  		return r / 6.0;  	}  }  else if (parameter.ToString () == "sh") {  	if (r > 0) {  		return -50.0;  	}  	else {  		return 0.0;  	}  }  else  	return r;  
Magic Number,System451.Communication.Dashboard.WPF.Controls,SpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\SpeedMeter.cs,Convert,The following statement contains a magic number: if (r >= 0) {  	return 90.0;  }  else {  	return r / 6.0;  }  
Magic Number,System451.Communication.Dashboard.WPF.Controls,SpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\SpeedMeter.cs,Convert,The following statement contains a magic number: if (r >= 0) {  	return 90.0;  }  else {  	return r / 6.0;  }  
Magic Number,System451.Communication.Dashboard.WPF.Controls,SpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\SpeedMeter.cs,Convert,The following statement contains a magic number: return 90.0;  
Magic Number,System451.Communication.Dashboard.WPF.Controls,SpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\SpeedMeter.cs,Convert,The following statement contains a magic number: return r / 6.0;  
Magic Number,System451.Communication.Dashboard.WPF.Controls,SpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\SpeedMeter.cs,Convert,The following statement contains a magic number: if (parameter.ToString () == "sh") {  	if (r > 0) {  		return -50.0;  	}  	else {  		return 0.0;  	}  }  else  	return r;  
Magic Number,System451.Communication.Dashboard.WPF.Controls,SpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\SpeedMeter.cs,Convert,The following statement contains a magic number: if (r > 0) {  	return -50.0;  }  else {  	return 0.0;  }  
Magic Number,System451.Communication.Dashboard.WPF.Controls,SpeedMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\SpeedMeter.cs,Convert,The following statement contains a magic number: return -50.0;  
Magic Number,System451.Communication.Dashboard.WPF.Controls,SpikeControl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\SpikeControl.cs,SpikeControl,The following statement contains a magic number: this.Width = 50;  
Magic Number,System451.Communication.Dashboard.WPF.Controls,SpikeControl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\SpikeControl.cs,SpikeControl,The following statement contains a magic number: this.Height = 50;  
Magic Number,System451.Communication.Dashboard.WPF.Controls,OnOffControl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\OnOffControl.cs,OnOffControl,The following statement contains a magic number: this.Width = 50;  
Magic Number,System451.Communication.Dashboard.WPF.Controls,OnOffControl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\OnOffControl.cs,OnOffControl,The following statement contains a magic number: this.Height = 50;  
Magic Number,System451.Communication.Dashboard.WPF.Controls,DirectionMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\DirectionMeter.cs,DirectionMeter,The following statement contains a magic number: this.Width = 100;  
Magic Number,System451.Communication.Dashboard.WPF.Controls,DirectionMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\DirectionMeter.cs,DirectionMeter,The following statement contains a magic number: this.Height = 100;  
Magic Number,System451.Communication.Dashboard.WPF.Controls,DirectionMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\DirectionMeter.cs,Convert,The following statement contains a magic number: return ((((double)value [1] - ths.Min) / (ths.Max - ths.Min)) * 360.0);  
Magic Number,System451.Communication.Dashboard.WPF.Controls,DirectionMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\DirectionMeter.cs,SetRangeToDegrees,The following statement contains a magic number: Max = 360;  
Magic Number,System451.Communication.Dashboard.WPF.Controls,DirectionMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\DirectionMeter.cs,SetRangeToRadians,The following statement contains a magic number: Min = Math.PI / -2.0;  
Magic Number,System451.Communication.Dashboard.WPF.Controls,DirectionMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\DirectionMeter.cs,SetRangeToRadians,The following statement contains a magic number: Max = 3 * Math.PI / 2.0;  
Magic Number,System451.Communication.Dashboard.WPF.Controls,DirectionMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\DirectionMeter.cs,SetRangeToRadians,The following statement contains a magic number: Max = 3 * Math.PI / 2.0;  
Magic Number,System451.Communication.Dashboard.WPF.Controls,DirectionMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\DirectionMeter.cs,SetRangeToNormalized,The following statement contains a magic number: Max = 4;  
Magic Number,System451.Communication.Dashboard.WPF.Controls,DirectionMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\DirectionMeter.cs,ValueMeter_MouseMove,The following statement contains a magic number: if (draggin) {  	DoubleValue = PointToAngle (e.GetPosition (this)) / 180 * (this.Max - this.Min) + this.Min;  	if (DataUpdated != null)  		DataUpdated (this' new ZomBDataControlUpdatedEventArgs (ControlName' DoubleValue.ToString ()));  }  
Magic Number,System451.Communication.Dashboard.WPF.Controls,DirectionMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\DirectionMeter.cs,ValueMeter_MouseMove,The following statement contains a magic number: DoubleValue = PointToAngle (e.GetPosition (this)) / 180 * (this.Max - this.Min) + this.Min;  
Magic Number,System451.Communication.Dashboard.WPF.Controls,DirectionMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\DirectionMeter.cs,PointToAngle,The following statement contains a magic number: if (p.Y > (this.ActualHeight / 2))  	return r + 90;  
Magic Number,System451.Communication.Dashboard.WPF.Controls,DirectionMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\DirectionMeter.cs,PointToAngle,The following statement contains a magic number: if (p.Y > (this.ActualHeight / 2))  	return r + 90;  
Magic Number,System451.Communication.Dashboard.WPF.Controls,DirectionMeter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\DirectionMeter.cs,PointToAngle,The following statement contains a magic number: return r + 90;  
Magic Number,System451.Communication.Dashboard.WPF.Controls,DashboardDataCanvas,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\DashboardDataCanvas.cs,AddTriggerHandler,The following statement contains a magic number: item.Triggered += delegate {  	string[] trigs = item.TriggerListeners.Split ();  	foreach (var trig in trigs) {  		string[] nv = trig.Split (':');  		if (nv.Length == 2)  			CallTrigger (nv [0]' nv [1]);  	}  };  
Magic Number,System451.Communication.Dashboard.WPF.Controls,DashboardDataCanvas,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\DashboardDataCanvas.cs,AddTriggerHandler,The following statement contains a magic number: foreach (var trig in trigs) {  	string[] nv = trig.Split (':');  	if (nv.Length == 2)  		CallTrigger (nv [0]' nv [1]);  }  
Magic Number,System451.Communication.Dashboard.WPF.Controls,DashboardDataCanvas,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\DashboardDataCanvas.cs,AddTriggerHandler,The following statement contains a magic number: if (nv.Length == 2)  	CallTrigger (nv [0]' nv [1]);  
Magic Number,System451.Communication.Dashboard.WPF.Controls,AutoPoint,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Design\AutoPoint.cs,AutoPoint,The following statement contains a magic number: this.Width = 16;  
Magic Number,System451.Communication.Dashboard.WPF.Controls,AutoPoint,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Design\AutoPoint.cs,AutoPoint,The following statement contains a magic number: this.Height = 17;  
Magic Number,System451.Communication.Dashboard.WPF.Controls,ViZBindingParser,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Design\ViZBindingParser.cs,Convert,The following statement contains a magic number: try {  	switch (parameter.ToString () [0]) {  	case 's':  		return value.ToString ();  	case 'n':  		return targetType.GetMethod ("Parse"' new Type[] {  			typeof(string)  		}).Invoke (null' new object[] {  			value.ToString ()  		});  	case 'C': {  		var tc = targetType.GetCustomAttributes (typeof(TypeConverterAttribute)' true);  		if (tc.Length > 0) {  			string tcname = (tc [0] as TypeConverterAttribute).ConverterTypeName;  			TypeConverter tcv = Type.GetType (tcname).GetConstructor (Type.EmptyTypes).Invoke (null) as TypeConverter;  			try {  				return tcv.ConvertFrom (null' culture' value);  			}  			catch {  				return value;  			}  		}  		return value;  	}  	case 'p': {  		switch (parameter.ToString () [1]) {  		case 'n': {  			//Format: {Fromstart:fromend}-{tostart:toend}  			//ex: {-1.0:1.0}-{0:360}  			var rx = new Regex ("\\{([\\-\\.0-9]*)\\:([\\-\\.0-9]*)\\}\\-\\{([\\-\\.0-9]*)\\:([\\-\\.0-9]*)\\}");  			var res = rx.Match (parameter.ToString ().Substring (2));  			var fs = res.Groups [1].Value;  			var fe = res.Groups [2].Value;  			var ts = res.Groups [3].Value;  			var te = res.Groups [4].Value;  			try {  				var fsd = double.Parse (fs);  				var fed = double.Parse (fe);  				var tsd = double.Parse (ts);  				var ted = double.Parse (te);  				//massive converter' fun  				double end = (((((double)value) - fsd) / (fed - fsd)) * (ted - tsd)) + tsd;  				//return' using its own parse  				if (targetType == typeof(double))  					return end;  				try {  					return targetType.GetMethod ("Parse"' new Type[] {  						typeof(string)  					}).Invoke (null' new object[] {  						end.ToString ()  					});  				}  				catch {  				}  				try {  					return targetType.GetMethod ("Parse"' new Type[] {  						typeof(string)  					}).Invoke (null' new object[] {  						Math.Round (end).ToString ()  					});  				}  				catch {  				}  				return end;  				//hope for the best  			}  			catch {  			}  			break;  		}  		default:  			break;  		}  		break;  	}  	default:  		break;  	}  }  catch {  }  
Magic Number,System451.Communication.Dashboard.WPF.Controls,ViZBindingParser,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Design\ViZBindingParser.cs,Convert,The following statement contains a magic number: try {  	switch (parameter.ToString () [0]) {  	case 's':  		return value.ToString ();  	case 'n':  		return targetType.GetMethod ("Parse"' new Type[] {  			typeof(string)  		}).Invoke (null' new object[] {  			value.ToString ()  		});  	case 'C': {  		var tc = targetType.GetCustomAttributes (typeof(TypeConverterAttribute)' true);  		if (tc.Length > 0) {  			string tcname = (tc [0] as TypeConverterAttribute).ConverterTypeName;  			TypeConverter tcv = Type.GetType (tcname).GetConstructor (Type.EmptyTypes).Invoke (null) as TypeConverter;  			try {  				return tcv.ConvertFrom (null' culture' value);  			}  			catch {  				return value;  			}  		}  		return value;  	}  	case 'p': {  		switch (parameter.ToString () [1]) {  		case 'n': {  			//Format: {Fromstart:fromend}-{tostart:toend}  			//ex: {-1.0:1.0}-{0:360}  			var rx = new Regex ("\\{([\\-\\.0-9]*)\\:([\\-\\.0-9]*)\\}\\-\\{([\\-\\.0-9]*)\\:([\\-\\.0-9]*)\\}");  			var res = rx.Match (parameter.ToString ().Substring (2));  			var fs = res.Groups [1].Value;  			var fe = res.Groups [2].Value;  			var ts = res.Groups [3].Value;  			var te = res.Groups [4].Value;  			try {  				var fsd = double.Parse (fs);  				var fed = double.Parse (fe);  				var tsd = double.Parse (ts);  				var ted = double.Parse (te);  				//massive converter' fun  				double end = (((((double)value) - fsd) / (fed - fsd)) * (ted - tsd)) + tsd;  				//return' using its own parse  				if (targetType == typeof(double))  					return end;  				try {  					return targetType.GetMethod ("Parse"' new Type[] {  						typeof(string)  					}).Invoke (null' new object[] {  						end.ToString ()  					});  				}  				catch {  				}  				try {  					return targetType.GetMethod ("Parse"' new Type[] {  						typeof(string)  					}).Invoke (null' new object[] {  						Math.Round (end).ToString ()  					});  				}  				catch {  				}  				return end;  				//hope for the best  			}  			catch {  			}  			break;  		}  		default:  			break;  		}  		break;  	}  	default:  		break;  	}  }  catch {  }  
Magic Number,System451.Communication.Dashboard.WPF.Controls,ViZBindingParser,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Design\ViZBindingParser.cs,Convert,The following statement contains a magic number: try {  	switch (parameter.ToString () [0]) {  	case 's':  		return value.ToString ();  	case 'n':  		return targetType.GetMethod ("Parse"' new Type[] {  			typeof(string)  		}).Invoke (null' new object[] {  			value.ToString ()  		});  	case 'C': {  		var tc = targetType.GetCustomAttributes (typeof(TypeConverterAttribute)' true);  		if (tc.Length > 0) {  			string tcname = (tc [0] as TypeConverterAttribute).ConverterTypeName;  			TypeConverter tcv = Type.GetType (tcname).GetConstructor (Type.EmptyTypes).Invoke (null) as TypeConverter;  			try {  				return tcv.ConvertFrom (null' culture' value);  			}  			catch {  				return value;  			}  		}  		return value;  	}  	case 'p': {  		switch (parameter.ToString () [1]) {  		case 'n': {  			//Format: {Fromstart:fromend}-{tostart:toend}  			//ex: {-1.0:1.0}-{0:360}  			var rx = new Regex ("\\{([\\-\\.0-9]*)\\:([\\-\\.0-9]*)\\}\\-\\{([\\-\\.0-9]*)\\:([\\-\\.0-9]*)\\}");  			var res = rx.Match (parameter.ToString ().Substring (2));  			var fs = res.Groups [1].Value;  			var fe = res.Groups [2].Value;  			var ts = res.Groups [3].Value;  			var te = res.Groups [4].Value;  			try {  				var fsd = double.Parse (fs);  				var fed = double.Parse (fe);  				var tsd = double.Parse (ts);  				var ted = double.Parse (te);  				//massive converter' fun  				double end = (((((double)value) - fsd) / (fed - fsd)) * (ted - tsd)) + tsd;  				//return' using its own parse  				if (targetType == typeof(double))  					return end;  				try {  					return targetType.GetMethod ("Parse"' new Type[] {  						typeof(string)  					}).Invoke (null' new object[] {  						end.ToString ()  					});  				}  				catch {  				}  				try {  					return targetType.GetMethod ("Parse"' new Type[] {  						typeof(string)  					}).Invoke (null' new object[] {  						Math.Round (end).ToString ()  					});  				}  				catch {  				}  				return end;  				//hope for the best  			}  			catch {  			}  			break;  		}  		default:  			break;  		}  		break;  	}  	default:  		break;  	}  }  catch {  }  
Magic Number,System451.Communication.Dashboard.WPF.Controls,ViZBindingParser,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Design\ViZBindingParser.cs,Convert,The following statement contains a magic number: try {  	switch (parameter.ToString () [0]) {  	case 's':  		return value.ToString ();  	case 'n':  		return targetType.GetMethod ("Parse"' new Type[] {  			typeof(string)  		}).Invoke (null' new object[] {  			value.ToString ()  		});  	case 'C': {  		var tc = targetType.GetCustomAttributes (typeof(TypeConverterAttribute)' true);  		if (tc.Length > 0) {  			string tcname = (tc [0] as TypeConverterAttribute).ConverterTypeName;  			TypeConverter tcv = Type.GetType (tcname).GetConstructor (Type.EmptyTypes).Invoke (null) as TypeConverter;  			try {  				return tcv.ConvertFrom (null' culture' value);  			}  			catch {  				return value;  			}  		}  		return value;  	}  	case 'p': {  		switch (parameter.ToString () [1]) {  		case 'n': {  			//Format: {Fromstart:fromend}-{tostart:toend}  			//ex: {-1.0:1.0}-{0:360}  			var rx = new Regex ("\\{([\\-\\.0-9]*)\\:([\\-\\.0-9]*)\\}\\-\\{([\\-\\.0-9]*)\\:([\\-\\.0-9]*)\\}");  			var res = rx.Match (parameter.ToString ().Substring (2));  			var fs = res.Groups [1].Value;  			var fe = res.Groups [2].Value;  			var ts = res.Groups [3].Value;  			var te = res.Groups [4].Value;  			try {  				var fsd = double.Parse (fs);  				var fed = double.Parse (fe);  				var tsd = double.Parse (ts);  				var ted = double.Parse (te);  				//massive converter' fun  				double end = (((((double)value) - fsd) / (fed - fsd)) * (ted - tsd)) + tsd;  				//return' using its own parse  				if (targetType == typeof(double))  					return end;  				try {  					return targetType.GetMethod ("Parse"' new Type[] {  						typeof(string)  					}).Invoke (null' new object[] {  						end.ToString ()  					});  				}  				catch {  				}  				try {  					return targetType.GetMethod ("Parse"' new Type[] {  						typeof(string)  					}).Invoke (null' new object[] {  						Math.Round (end).ToString ()  					});  				}  				catch {  				}  				return end;  				//hope for the best  			}  			catch {  			}  			break;  		}  		default:  			break;  		}  		break;  	}  	default:  		break;  	}  }  catch {  }  
Magic Number,System451.Communication.Dashboard.WPF.Controls,ViZBindingParser,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Design\ViZBindingParser.cs,Convert,The following statement contains a magic number: switch (parameter.ToString () [0]) {  case 's':  	return value.ToString ();  case 'n':  	return targetType.GetMethod ("Parse"' new Type[] {  		typeof(string)  	}).Invoke (null' new object[] {  		value.ToString ()  	});  case 'C': {  	var tc = targetType.GetCustomAttributes (typeof(TypeConverterAttribute)' true);  	if (tc.Length > 0) {  		string tcname = (tc [0] as TypeConverterAttribute).ConverterTypeName;  		TypeConverter tcv = Type.GetType (tcname).GetConstructor (Type.EmptyTypes).Invoke (null) as TypeConverter;  		try {  			return tcv.ConvertFrom (null' culture' value);  		}  		catch {  			return value;  		}  	}  	return value;  }  case 'p': {  	switch (parameter.ToString () [1]) {  	case 'n': {  		//Format: {Fromstart:fromend}-{tostart:toend}  		//ex: {-1.0:1.0}-{0:360}  		var rx = new Regex ("\\{([\\-\\.0-9]*)\\:([\\-\\.0-9]*)\\}\\-\\{([\\-\\.0-9]*)\\:([\\-\\.0-9]*)\\}");  		var res = rx.Match (parameter.ToString ().Substring (2));  		var fs = res.Groups [1].Value;  		var fe = res.Groups [2].Value;  		var ts = res.Groups [3].Value;  		var te = res.Groups [4].Value;  		try {  			var fsd = double.Parse (fs);  			var fed = double.Parse (fe);  			var tsd = double.Parse (ts);  			var ted = double.Parse (te);  			//massive converter' fun  			double end = (((((double)value) - fsd) / (fed - fsd)) * (ted - tsd)) + tsd;  			//return' using its own parse  			if (targetType == typeof(double))  				return end;  			try {  				return targetType.GetMethod ("Parse"' new Type[] {  					typeof(string)  				}).Invoke (null' new object[] {  					end.ToString ()  				});  			}  			catch {  			}  			try {  				return targetType.GetMethod ("Parse"' new Type[] {  					typeof(string)  				}).Invoke (null' new object[] {  					Math.Round (end).ToString ()  				});  			}  			catch {  			}  			return end;  			//hope for the best  		}  		catch {  		}  		break;  	}  	default:  		break;  	}  	break;  }  default:  	break;  }  
Magic Number,System451.Communication.Dashboard.WPF.Controls,ViZBindingParser,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Design\ViZBindingParser.cs,Convert,The following statement contains a magic number: switch (parameter.ToString () [0]) {  case 's':  	return value.ToString ();  case 'n':  	return targetType.GetMethod ("Parse"' new Type[] {  		typeof(string)  	}).Invoke (null' new object[] {  		value.ToString ()  	});  case 'C': {  	var tc = targetType.GetCustomAttributes (typeof(TypeConverterAttribute)' true);  	if (tc.Length > 0) {  		string tcname = (tc [0] as TypeConverterAttribute).ConverterTypeName;  		TypeConverter tcv = Type.GetType (tcname).GetConstructor (Type.EmptyTypes).Invoke (null) as TypeConverter;  		try {  			return tcv.ConvertFrom (null' culture' value);  		}  		catch {  			return value;  		}  	}  	return value;  }  case 'p': {  	switch (parameter.ToString () [1]) {  	case 'n': {  		//Format: {Fromstart:fromend}-{tostart:toend}  		//ex: {-1.0:1.0}-{0:360}  		var rx = new Regex ("\\{([\\-\\.0-9]*)\\:([\\-\\.0-9]*)\\}\\-\\{([\\-\\.0-9]*)\\:([\\-\\.0-9]*)\\}");  		var res = rx.Match (parameter.ToString ().Substring (2));  		var fs = res.Groups [1].Value;  		var fe = res.Groups [2].Value;  		var ts = res.Groups [3].Value;  		var te = res.Groups [4].Value;  		try {  			var fsd = double.Parse (fs);  			var fed = double.Parse (fe);  			var tsd = double.Parse (ts);  			var ted = double.Parse (te);  			//massive converter' fun  			double end = (((((double)value) - fsd) / (fed - fsd)) * (ted - tsd)) + tsd;  			//return' using its own parse  			if (targetType == typeof(double))  				return end;  			try {  				return targetType.GetMethod ("Parse"' new Type[] {  					typeof(string)  				}).Invoke (null' new object[] {  					end.ToString ()  				});  			}  			catch {  			}  			try {  				return targetType.GetMethod ("Parse"' new Type[] {  					typeof(string)  				}).Invoke (null' new object[] {  					Math.Round (end).ToString ()  				});  			}  			catch {  			}  			return end;  			//hope for the best  		}  		catch {  		}  		break;  	}  	default:  		break;  	}  	break;  }  default:  	break;  }  
Magic Number,System451.Communication.Dashboard.WPF.Controls,ViZBindingParser,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Design\ViZBindingParser.cs,Convert,The following statement contains a magic number: switch (parameter.ToString () [0]) {  case 's':  	return value.ToString ();  case 'n':  	return targetType.GetMethod ("Parse"' new Type[] {  		typeof(string)  	}).Invoke (null' new object[] {  		value.ToString ()  	});  case 'C': {  	var tc = targetType.GetCustomAttributes (typeof(TypeConverterAttribute)' true);  	if (tc.Length > 0) {  		string tcname = (tc [0] as TypeConverterAttribute).ConverterTypeName;  		TypeConverter tcv = Type.GetType (tcname).GetConstructor (Type.EmptyTypes).Invoke (null) as TypeConverter;  		try {  			return tcv.ConvertFrom (null' culture' value);  		}  		catch {  			return value;  		}  	}  	return value;  }  case 'p': {  	switch (parameter.ToString () [1]) {  	case 'n': {  		//Format: {Fromstart:fromend}-{tostart:toend}  		//ex: {-1.0:1.0}-{0:360}  		var rx = new Regex ("\\{([\\-\\.0-9]*)\\:([\\-\\.0-9]*)\\}\\-\\{([\\-\\.0-9]*)\\:([\\-\\.0-9]*)\\}");  		var res = rx.Match (parameter.ToString ().Substring (2));  		var fs = res.Groups [1].Value;  		var fe = res.Groups [2].Value;  		var ts = res.Groups [3].Value;  		var te = res.Groups [4].Value;  		try {  			var fsd = double.Parse (fs);  			var fed = double.Parse (fe);  			var tsd = double.Parse (ts);  			var ted = double.Parse (te);  			//massive converter' fun  			double end = (((((double)value) - fsd) / (fed - fsd)) * (ted - tsd)) + tsd;  			//return' using its own parse  			if (targetType == typeof(double))  				return end;  			try {  				return targetType.GetMethod ("Parse"' new Type[] {  					typeof(string)  				}).Invoke (null' new object[] {  					end.ToString ()  				});  			}  			catch {  			}  			try {  				return targetType.GetMethod ("Parse"' new Type[] {  					typeof(string)  				}).Invoke (null' new object[] {  					Math.Round (end).ToString ()  				});  			}  			catch {  			}  			return end;  			//hope for the best  		}  		catch {  		}  		break;  	}  	default:  		break;  	}  	break;  }  default:  	break;  }  
Magic Number,System451.Communication.Dashboard.WPF.Controls,ViZBindingParser,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Design\ViZBindingParser.cs,Convert,The following statement contains a magic number: switch (parameter.ToString () [0]) {  case 's':  	return value.ToString ();  case 'n':  	return targetType.GetMethod ("Parse"' new Type[] {  		typeof(string)  	}).Invoke (null' new object[] {  		value.ToString ()  	});  case 'C': {  	var tc = targetType.GetCustomAttributes (typeof(TypeConverterAttribute)' true);  	if (tc.Length > 0) {  		string tcname = (tc [0] as TypeConverterAttribute).ConverterTypeName;  		TypeConverter tcv = Type.GetType (tcname).GetConstructor (Type.EmptyTypes).Invoke (null) as TypeConverter;  		try {  			return tcv.ConvertFrom (null' culture' value);  		}  		catch {  			return value;  		}  	}  	return value;  }  case 'p': {  	switch (parameter.ToString () [1]) {  	case 'n': {  		//Format: {Fromstart:fromend}-{tostart:toend}  		//ex: {-1.0:1.0}-{0:360}  		var rx = new Regex ("\\{([\\-\\.0-9]*)\\:([\\-\\.0-9]*)\\}\\-\\{([\\-\\.0-9]*)\\:([\\-\\.0-9]*)\\}");  		var res = rx.Match (parameter.ToString ().Substring (2));  		var fs = res.Groups [1].Value;  		var fe = res.Groups [2].Value;  		var ts = res.Groups [3].Value;  		var te = res.Groups [4].Value;  		try {  			var fsd = double.Parse (fs);  			var fed = double.Parse (fe);  			var tsd = double.Parse (ts);  			var ted = double.Parse (te);  			//massive converter' fun  			double end = (((((double)value) - fsd) / (fed - fsd)) * (ted - tsd)) + tsd;  			//return' using its own parse  			if (targetType == typeof(double))  				return end;  			try {  				return targetType.GetMethod ("Parse"' new Type[] {  					typeof(string)  				}).Invoke (null' new object[] {  					end.ToString ()  				});  			}  			catch {  			}  			try {  				return targetType.GetMethod ("Parse"' new Type[] {  					typeof(string)  				}).Invoke (null' new object[] {  					Math.Round (end).ToString ()  				});  			}  			catch {  			}  			return end;  			//hope for the best  		}  		catch {  		}  		break;  	}  	default:  		break;  	}  	break;  }  default:  	break;  }  
Magic Number,System451.Communication.Dashboard.WPF.Controls,ViZBindingParser,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Design\ViZBindingParser.cs,Convert,The following statement contains a magic number: switch (parameter.ToString () [1]) {  case 'n': {  	//Format: {Fromstart:fromend}-{tostart:toend}  	//ex: {-1.0:1.0}-{0:360}  	var rx = new Regex ("\\{([\\-\\.0-9]*)\\:([\\-\\.0-9]*)\\}\\-\\{([\\-\\.0-9]*)\\:([\\-\\.0-9]*)\\}");  	var res = rx.Match (parameter.ToString ().Substring (2));  	var fs = res.Groups [1].Value;  	var fe = res.Groups [2].Value;  	var ts = res.Groups [3].Value;  	var te = res.Groups [4].Value;  	try {  		var fsd = double.Parse (fs);  		var fed = double.Parse (fe);  		var tsd = double.Parse (ts);  		var ted = double.Parse (te);  		//massive converter' fun  		double end = (((((double)value) - fsd) / (fed - fsd)) * (ted - tsd)) + tsd;  		//return' using its own parse  		if (targetType == typeof(double))  			return end;  		try {  			return targetType.GetMethod ("Parse"' new Type[] {  				typeof(string)  			}).Invoke (null' new object[] {  				end.ToString ()  			});  		}  		catch {  		}  		try {  			return targetType.GetMethod ("Parse"' new Type[] {  				typeof(string)  			}).Invoke (null' new object[] {  				Math.Round (end).ToString ()  			});  		}  		catch {  		}  		return end;  		//hope for the best  	}  	catch {  	}  	break;  }  default:  	break;  }  
Magic Number,System451.Communication.Dashboard.WPF.Controls,ViZBindingParser,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Design\ViZBindingParser.cs,Convert,The following statement contains a magic number: switch (parameter.ToString () [1]) {  case 'n': {  	//Format: {Fromstart:fromend}-{tostart:toend}  	//ex: {-1.0:1.0}-{0:360}  	var rx = new Regex ("\\{([\\-\\.0-9]*)\\:([\\-\\.0-9]*)\\}\\-\\{([\\-\\.0-9]*)\\:([\\-\\.0-9]*)\\}");  	var res = rx.Match (parameter.ToString ().Substring (2));  	var fs = res.Groups [1].Value;  	var fe = res.Groups [2].Value;  	var ts = res.Groups [3].Value;  	var te = res.Groups [4].Value;  	try {  		var fsd = double.Parse (fs);  		var fed = double.Parse (fe);  		var tsd = double.Parse (ts);  		var ted = double.Parse (te);  		//massive converter' fun  		double end = (((((double)value) - fsd) / (fed - fsd)) * (ted - tsd)) + tsd;  		//return' using its own parse  		if (targetType == typeof(double))  			return end;  		try {  			return targetType.GetMethod ("Parse"' new Type[] {  				typeof(string)  			}).Invoke (null' new object[] {  				end.ToString ()  			});  		}  		catch {  		}  		try {  			return targetType.GetMethod ("Parse"' new Type[] {  				typeof(string)  			}).Invoke (null' new object[] {  				Math.Round (end).ToString ()  			});  		}  		catch {  		}  		return end;  		//hope for the best  	}  	catch {  	}  	break;  }  default:  	break;  }  
Magic Number,System451.Communication.Dashboard.WPF.Controls,ViZBindingParser,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Design\ViZBindingParser.cs,Convert,The following statement contains a magic number: switch (parameter.ToString () [1]) {  case 'n': {  	//Format: {Fromstart:fromend}-{tostart:toend}  	//ex: {-1.0:1.0}-{0:360}  	var rx = new Regex ("\\{([\\-\\.0-9]*)\\:([\\-\\.0-9]*)\\}\\-\\{([\\-\\.0-9]*)\\:([\\-\\.0-9]*)\\}");  	var res = rx.Match (parameter.ToString ().Substring (2));  	var fs = res.Groups [1].Value;  	var fe = res.Groups [2].Value;  	var ts = res.Groups [3].Value;  	var te = res.Groups [4].Value;  	try {  		var fsd = double.Parse (fs);  		var fed = double.Parse (fe);  		var tsd = double.Parse (ts);  		var ted = double.Parse (te);  		//massive converter' fun  		double end = (((((double)value) - fsd) / (fed - fsd)) * (ted - tsd)) + tsd;  		//return' using its own parse  		if (targetType == typeof(double))  			return end;  		try {  			return targetType.GetMethod ("Parse"' new Type[] {  				typeof(string)  			}).Invoke (null' new object[] {  				end.ToString ()  			});  		}  		catch {  		}  		try {  			return targetType.GetMethod ("Parse"' new Type[] {  				typeof(string)  			}).Invoke (null' new object[] {  				Math.Round (end).ToString ()  			});  		}  		catch {  		}  		return end;  		//hope for the best  	}  	catch {  	}  	break;  }  default:  	break;  }  
Magic Number,System451.Communication.Dashboard.WPF.Controls,ViZBindingParser,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Design\ViZBindingParser.cs,Convert,The following statement contains a magic number: switch (parameter.ToString () [1]) {  case 'n': {  	//Format: {Fromstart:fromend}-{tostart:toend}  	//ex: {-1.0:1.0}-{0:360}  	var rx = new Regex ("\\{([\\-\\.0-9]*)\\:([\\-\\.0-9]*)\\}\\-\\{([\\-\\.0-9]*)\\:([\\-\\.0-9]*)\\}");  	var res = rx.Match (parameter.ToString ().Substring (2));  	var fs = res.Groups [1].Value;  	var fe = res.Groups [2].Value;  	var ts = res.Groups [3].Value;  	var te = res.Groups [4].Value;  	try {  		var fsd = double.Parse (fs);  		var fed = double.Parse (fe);  		var tsd = double.Parse (ts);  		var ted = double.Parse (te);  		//massive converter' fun  		double end = (((((double)value) - fsd) / (fed - fsd)) * (ted - tsd)) + tsd;  		//return' using its own parse  		if (targetType == typeof(double))  			return end;  		try {  			return targetType.GetMethod ("Parse"' new Type[] {  				typeof(string)  			}).Invoke (null' new object[] {  				end.ToString ()  			});  		}  		catch {  		}  		try {  			return targetType.GetMethod ("Parse"' new Type[] {  				typeof(string)  			}).Invoke (null' new object[] {  				Math.Round (end).ToString ()  			});  		}  		catch {  		}  		return end;  		//hope for the best  	}  	catch {  	}  	break;  }  default:  	break;  }  
Magic Number,System451.Communication.Dashboard.WPF.Controls.Designer.PrimitiveControls,GraphScale,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\PrimitiveControls\GraphScale.cs,OnRender,The following statement contains a magic number: while (++li < 1000) {  	//reduce  	var nextstep = Reduce (step);  	var nextgoodmax = (Math.Floor (MaxY / nextstep)) * nextstep;  	var nextgoodmin = (Math.Ceiling (MinY / nextstep)) * nextstep;  	if (((nextgoodmax - nextgoodmin) / nextstep) > numofmarkers)  		break;  	step = nextstep;  	goodmax = nextgoodmax;  	goodmin = nextgoodmin;  }  
Magic Number,System451.Communication.Dashboard.WPF.Controls.Designer.PrimitiveControls,GraphScale,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\PrimitiveControls\GraphScale.cs,OnRender,The following statement contains a magic number: drawingContext.DrawLine (linepen' new Point (-2' 0)' new Point (-2' this.ActualHeight));  
Magic Number,System451.Communication.Dashboard.WPF.Controls.Designer.PrimitiveControls,GraphScale,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\PrimitiveControls\GraphScale.cs,OnRender,The following statement contains a magic number: drawingContext.DrawLine (linepen' new Point (-2' 0)' new Point (-2' this.ActualHeight));  
Magic Number,System451.Communication.Dashboard.WPF.Controls.Designer.PrimitiveControls,GraphScale,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\PrimitiveControls\GraphScale.cs,OnRender,The following statement contains a magic number: if (vdist > 1)  	fmstring = "0";  else if (vdist > 0.1)  	fmstring = "0.0";  else if (vdist > 0.01)  	fmstring = "0.00";  
Magic Number,System451.Communication.Dashboard.WPF.Controls.Designer.PrimitiveControls,GraphScale,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\PrimitiveControls\GraphScale.cs,OnRender,The following statement contains a magic number: if (vdist > 1)  	fmstring = "0";  else if (vdist > 0.1)  	fmstring = "0.0";  else if (vdist > 0.01)  	fmstring = "0.00";  
Magic Number,System451.Communication.Dashboard.WPF.Controls.Designer.PrimitiveControls,GraphScale,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\PrimitiveControls\GraphScale.cs,OnRender,The following statement contains a magic number: if (vdist > 0.1)  	fmstring = "0.0";  else if (vdist > 0.01)  	fmstring = "0.00";  
Magic Number,System451.Communication.Dashboard.WPF.Controls.Designer.PrimitiveControls,GraphScale,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\PrimitiveControls\GraphScale.cs,OnRender,The following statement contains a magic number: if (vdist > 0.1)  	fmstring = "0.0";  else if (vdist > 0.01)  	fmstring = "0.00";  
Magic Number,System451.Communication.Dashboard.WPF.Controls.Designer.PrimitiveControls,GraphScale,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\PrimitiveControls\GraphScale.cs,OnRender,The following statement contains a magic number: if (vdist > 0.01)  	fmstring = "0.00";  
Magic Number,System451.Communication.Dashboard.WPF.Controls.Designer.PrimitiveControls,GraphScale,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\PrimitiveControls\GraphScale.cs,OnRender,The following statement contains a magic number: for (int i = 0; i < numofmarkers + 1; i++) {  	var realy = Math.Round (goodmax - vdist * (i)' 3);  	var virty = ((goodmax - realy) * (this.ActualHeight * (goodmax - goodmin) / (MaxY - MinY))) / (goodmax - goodmin) + ((MaxY - goodmax) * this.ActualHeight / (MaxY - MinY));  	var localtext = new FormattedText (realy.ToString (fmstring)' CultureInfo.CurrentUICulture' System.Windows.FlowDirection.LeftToRight' tface' emz' Foreground);  	drawingContext.DrawText (localtext' new Point (-localtext.Width - 5' virty - (localtext.Height / 2.0)));  	drawingContext.DrawLine (linepen' new Point (-2' virty)' new Point (-4' virty));  }  
Magic Number,System451.Communication.Dashboard.WPF.Controls.Designer.PrimitiveControls,GraphScale,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\PrimitiveControls\GraphScale.cs,OnRender,The following statement contains a magic number: for (int i = 0; i < numofmarkers + 1; i++) {  	var realy = Math.Round (goodmax - vdist * (i)' 3);  	var virty = ((goodmax - realy) * (this.ActualHeight * (goodmax - goodmin) / (MaxY - MinY))) / (goodmax - goodmin) + ((MaxY - goodmax) * this.ActualHeight / (MaxY - MinY));  	var localtext = new FormattedText (realy.ToString (fmstring)' CultureInfo.CurrentUICulture' System.Windows.FlowDirection.LeftToRight' tface' emz' Foreground);  	drawingContext.DrawText (localtext' new Point (-localtext.Width - 5' virty - (localtext.Height / 2.0)));  	drawingContext.DrawLine (linepen' new Point (-2' virty)' new Point (-4' virty));  }  
Magic Number,System451.Communication.Dashboard.WPF.Controls.Designer.PrimitiveControls,GraphScale,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\PrimitiveControls\GraphScale.cs,OnRender,The following statement contains a magic number: for (int i = 0; i < numofmarkers + 1; i++) {  	var realy = Math.Round (goodmax - vdist * (i)' 3);  	var virty = ((goodmax - realy) * (this.ActualHeight * (goodmax - goodmin) / (MaxY - MinY))) / (goodmax - goodmin) + ((MaxY - goodmax) * this.ActualHeight / (MaxY - MinY));  	var localtext = new FormattedText (realy.ToString (fmstring)' CultureInfo.CurrentUICulture' System.Windows.FlowDirection.LeftToRight' tface' emz' Foreground);  	drawingContext.DrawText (localtext' new Point (-localtext.Width - 5' virty - (localtext.Height / 2.0)));  	drawingContext.DrawLine (linepen' new Point (-2' virty)' new Point (-4' virty));  }  
Magic Number,System451.Communication.Dashboard.WPF.Controls.Designer.PrimitiveControls,GraphScale,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\PrimitiveControls\GraphScale.cs,OnRender,The following statement contains a magic number: for (int i = 0; i < numofmarkers + 1; i++) {  	var realy = Math.Round (goodmax - vdist * (i)' 3);  	var virty = ((goodmax - realy) * (this.ActualHeight * (goodmax - goodmin) / (MaxY - MinY))) / (goodmax - goodmin) + ((MaxY - goodmax) * this.ActualHeight / (MaxY - MinY));  	var localtext = new FormattedText (realy.ToString (fmstring)' CultureInfo.CurrentUICulture' System.Windows.FlowDirection.LeftToRight' tface' emz' Foreground);  	drawingContext.DrawText (localtext' new Point (-localtext.Width - 5' virty - (localtext.Height / 2.0)));  	drawingContext.DrawLine (linepen' new Point (-2' virty)' new Point (-4' virty));  }  
Magic Number,System451.Communication.Dashboard.WPF.Controls.Designer.PrimitiveControls,GraphScale,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\PrimitiveControls\GraphScale.cs,OnRender,The following statement contains a magic number: for (int i = 0; i < numofmarkers + 1; i++) {  	var realy = Math.Round (goodmax - vdist * (i)' 3);  	var virty = ((goodmax - realy) * (this.ActualHeight * (goodmax - goodmin) / (MaxY - MinY))) / (goodmax - goodmin) + ((MaxY - goodmax) * this.ActualHeight / (MaxY - MinY));  	var localtext = new FormattedText (realy.ToString (fmstring)' CultureInfo.CurrentUICulture' System.Windows.FlowDirection.LeftToRight' tface' emz' Foreground);  	drawingContext.DrawText (localtext' new Point (-localtext.Width - 5' virty - (localtext.Height / 2.0)));  	drawingContext.DrawLine (linepen' new Point (-2' virty)' new Point (-4' virty));  }  
Magic Number,System451.Communication.Dashboard.WPF.Controls.Designer.PrimitiveControls,GraphScale,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\PrimitiveControls\GraphScale.cs,OnRender,The following statement contains a magic number: drawingContext.DrawText (localtext' new Point (-localtext.Width - 5' virty - (localtext.Height / 2.0)));  
Magic Number,System451.Communication.Dashboard.WPF.Controls.Designer.PrimitiveControls,GraphScale,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\PrimitiveControls\GraphScale.cs,OnRender,The following statement contains a magic number: drawingContext.DrawText (localtext' new Point (-localtext.Width - 5' virty - (localtext.Height / 2.0)));  
Magic Number,System451.Communication.Dashboard.WPF.Controls.Designer.PrimitiveControls,GraphScale,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\PrimitiveControls\GraphScale.cs,OnRender,The following statement contains a magic number: drawingContext.DrawLine (linepen' new Point (-2' virty)' new Point (-4' virty));  
Magic Number,System451.Communication.Dashboard.WPF.Controls.Designer.PrimitiveControls,GraphScale,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\PrimitiveControls\GraphScale.cs,OnRender,The following statement contains a magic number: drawingContext.DrawLine (linepen' new Point (-2' virty)' new Point (-4' virty));  
Magic Number,System451.Communication.Dashboard.WPF.Controls.Designer.PrimitiveControls,GraphScale,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\PrimitiveControls\GraphScale.cs,OnRender,The following statement contains a magic number: drawingContext.DrawLine (linepen' new Point (0' ActualHeight + 2.0)' new Point (ActualWidth' ActualHeight + 2.0));  
Magic Number,System451.Communication.Dashboard.WPF.Controls.Designer.PrimitiveControls,GraphScale,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\PrimitiveControls\GraphScale.cs,OnRender,The following statement contains a magic number: drawingContext.DrawLine (linepen' new Point (0' ActualHeight + 2.0)' new Point (ActualWidth' ActualHeight + 2.0));  
Magic Number,System451.Communication.Dashboard.WPF.Controls.Designer.PrimitiveControls,GraphScale,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\PrimitiveControls\GraphScale.cs,OnRender,The following statement contains a magic number: drawingContext.DrawLine (linepen' new Point (0' ActualHeight + 2)' new Point (0' ActualHeight + 4));  
Magic Number,System451.Communication.Dashboard.WPF.Controls.Designer.PrimitiveControls,GraphScale,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\PrimitiveControls\GraphScale.cs,OnRender,The following statement contains a magic number: drawingContext.DrawLine (linepen' new Point (0' ActualHeight + 2)' new Point (0' ActualHeight + 4));  
Magic Number,System451.Communication.Dashboard.WPF.Controls.Designer.PrimitiveControls,GraphScale,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\PrimitiveControls\GraphScale.cs,OnRender,The following statement contains a magic number: drawingContext.DrawLine (linepen' new Point (ActualWidth' ActualHeight + 2)' new Point (ActualWidth' ActualHeight + 4));  
Magic Number,System451.Communication.Dashboard.WPF.Controls.Designer.PrimitiveControls,GraphScale,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\PrimitiveControls\GraphScale.cs,OnRender,The following statement contains a magic number: drawingContext.DrawLine (linepen' new Point (ActualWidth' ActualHeight + 2)' new Point (ActualWidth' ActualHeight + 4));  
Magic Number,System451.Communication.Dashboard.WPF.Controls.Designer.PrimitiveControls,GraphScale,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\PrimitiveControls\GraphScale.cs,OnRender,The following statement contains a magic number: drawingContext.DrawText (TextX' new Point (TextX.Width / -2' ActualHeight + 5));  
Magic Number,System451.Communication.Dashboard.WPF.Controls.Designer.PrimitiveControls,GraphScale,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\PrimitiveControls\GraphScale.cs,OnRender,The following statement contains a magic number: drawingContext.DrawText (TextX' new Point (TextX.Width / -2' ActualHeight + 5));  
Magic Number,System451.Communication.Dashboard.WPF.Controls.Designer.PrimitiveControls,GraphScale,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\PrimitiveControls\GraphScale.cs,OnRender,The following statement contains a magic number: drawingContext.DrawText (TextX' new Point (ActualWidth + TextX.Width / -2' ActualHeight + 5));  
Magic Number,System451.Communication.Dashboard.WPF.Controls.Designer.PrimitiveControls,GraphScale,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\PrimitiveControls\GraphScale.cs,OnRender,The following statement contains a magic number: drawingContext.DrawText (TextX' new Point (ActualWidth + TextX.Width / -2' ActualHeight + 5));  
Magic Number,System451.Communication.Dashboard.WPF.Controls.Designer.PrimitiveControls,GraphScale,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\PrimitiveControls\GraphScale.cs,OnRender,The following statement contains a magic number: for (int i = 1; i < Math.Floor (ActualWidth / 80.0); i++) {  	var realx = Math.Round (MinX + ((i * 80.0 * (MaxX - MinX) / ActualWidth)) * ActualWidth / (Math.Floor (ActualWidth / 80.0) * 80.0));  	var virtx = (((realx - MinX) * (Math.Floor (ActualWidth / 80.0) * 80.0)) / ActualWidth) * ActualWidth / (MaxX - MinX) * ActualWidth / (Math.Floor (ActualWidth / 80.0) * 80.0);  	drawingContext.DrawLine (linepen' new Point (virtx' ActualHeight + 2)' new Point (virtx' ActualHeight + 4));  	TextX = new FormattedText (realx.ToString ()' CultureInfo.CurrentUICulture' System.Windows.FlowDirection.LeftToRight' tface' emz' Foreground);  	drawingContext.DrawText (TextX' new Point (virtx - TextX.Width / 2' ActualHeight + 5));  }  
Magic Number,System451.Communication.Dashboard.WPF.Controls.Designer.PrimitiveControls,GraphScale,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\PrimitiveControls\GraphScale.cs,OnRender,The following statement contains a magic number: for (int i = 1; i < Math.Floor (ActualWidth / 80.0); i++) {  	var realx = Math.Round (MinX + ((i * 80.0 * (MaxX - MinX) / ActualWidth)) * ActualWidth / (Math.Floor (ActualWidth / 80.0) * 80.0));  	var virtx = (((realx - MinX) * (Math.Floor (ActualWidth / 80.0) * 80.0)) / ActualWidth) * ActualWidth / (MaxX - MinX) * ActualWidth / (Math.Floor (ActualWidth / 80.0) * 80.0);  	drawingContext.DrawLine (linepen' new Point (virtx' ActualHeight + 2)' new Point (virtx' ActualHeight + 4));  	TextX = new FormattedText (realx.ToString ()' CultureInfo.CurrentUICulture' System.Windows.FlowDirection.LeftToRight' tface' emz' Foreground);  	drawingContext.DrawText (TextX' new Point (virtx - TextX.Width / 2' ActualHeight + 5));  }  
Magic Number,System451.Communication.Dashboard.WPF.Controls.Designer.PrimitiveControls,GraphScale,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\PrimitiveControls\GraphScale.cs,OnRender,The following statement contains a magic number: for (int i = 1; i < Math.Floor (ActualWidth / 80.0); i++) {  	var realx = Math.Round (MinX + ((i * 80.0 * (MaxX - MinX) / ActualWidth)) * ActualWidth / (Math.Floor (ActualWidth / 80.0) * 80.0));  	var virtx = (((realx - MinX) * (Math.Floor (ActualWidth / 80.0) * 80.0)) / ActualWidth) * ActualWidth / (MaxX - MinX) * ActualWidth / (Math.Floor (ActualWidth / 80.0) * 80.0);  	drawingContext.DrawLine (linepen' new Point (virtx' ActualHeight + 2)' new Point (virtx' ActualHeight + 4));  	TextX = new FormattedText (realx.ToString ()' CultureInfo.CurrentUICulture' System.Windows.FlowDirection.LeftToRight' tface' emz' Foreground);  	drawingContext.DrawText (TextX' new Point (virtx - TextX.Width / 2' ActualHeight + 5));  }  
Magic Number,System451.Communication.Dashboard.WPF.Controls.Designer.PrimitiveControls,GraphScale,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\PrimitiveControls\GraphScale.cs,OnRender,The following statement contains a magic number: for (int i = 1; i < Math.Floor (ActualWidth / 80.0); i++) {  	var realx = Math.Round (MinX + ((i * 80.0 * (MaxX - MinX) / ActualWidth)) * ActualWidth / (Math.Floor (ActualWidth / 80.0) * 80.0));  	var virtx = (((realx - MinX) * (Math.Floor (ActualWidth / 80.0) * 80.0)) / ActualWidth) * ActualWidth / (MaxX - MinX) * ActualWidth / (Math.Floor (ActualWidth / 80.0) * 80.0);  	drawingContext.DrawLine (linepen' new Point (virtx' ActualHeight + 2)' new Point (virtx' ActualHeight + 4));  	TextX = new FormattedText (realx.ToString ()' CultureInfo.CurrentUICulture' System.Windows.FlowDirection.LeftToRight' tface' emz' Foreground);  	drawingContext.DrawText (TextX' new Point (virtx - TextX.Width / 2' ActualHeight + 5));  }  
Magic Number,System451.Communication.Dashboard.WPF.Controls.Designer.PrimitiveControls,GraphScale,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\PrimitiveControls\GraphScale.cs,OnRender,The following statement contains a magic number: for (int i = 1; i < Math.Floor (ActualWidth / 80.0); i++) {  	var realx = Math.Round (MinX + ((i * 80.0 * (MaxX - MinX) / ActualWidth)) * ActualWidth / (Math.Floor (ActualWidth / 80.0) * 80.0));  	var virtx = (((realx - MinX) * (Math.Floor (ActualWidth / 80.0) * 80.0)) / ActualWidth) * ActualWidth / (MaxX - MinX) * ActualWidth / (Math.Floor (ActualWidth / 80.0) * 80.0);  	drawingContext.DrawLine (linepen' new Point (virtx' ActualHeight + 2)' new Point (virtx' ActualHeight + 4));  	TextX = new FormattedText (realx.ToString ()' CultureInfo.CurrentUICulture' System.Windows.FlowDirection.LeftToRight' tface' emz' Foreground);  	drawingContext.DrawText (TextX' new Point (virtx - TextX.Width / 2' ActualHeight + 5));  }  
Magic Number,System451.Communication.Dashboard.WPF.Controls.Designer.PrimitiveControls,GraphScale,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\PrimitiveControls\GraphScale.cs,OnRender,The following statement contains a magic number: for (int i = 1; i < Math.Floor (ActualWidth / 80.0); i++) {  	var realx = Math.Round (MinX + ((i * 80.0 * (MaxX - MinX) / ActualWidth)) * ActualWidth / (Math.Floor (ActualWidth / 80.0) * 80.0));  	var virtx = (((realx - MinX) * (Math.Floor (ActualWidth / 80.0) * 80.0)) / ActualWidth) * ActualWidth / (MaxX - MinX) * ActualWidth / (Math.Floor (ActualWidth / 80.0) * 80.0);  	drawingContext.DrawLine (linepen' new Point (virtx' ActualHeight + 2)' new Point (virtx' ActualHeight + 4));  	TextX = new FormattedText (realx.ToString ()' CultureInfo.CurrentUICulture' System.Windows.FlowDirection.LeftToRight' tface' emz' Foreground);  	drawingContext.DrawText (TextX' new Point (virtx - TextX.Width / 2' ActualHeight + 5));  }  
Magic Number,System451.Communication.Dashboard.WPF.Controls.Designer.PrimitiveControls,GraphScale,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\PrimitiveControls\GraphScale.cs,OnRender,The following statement contains a magic number: for (int i = 1; i < Math.Floor (ActualWidth / 80.0); i++) {  	var realx = Math.Round (MinX + ((i * 80.0 * (MaxX - MinX) / ActualWidth)) * ActualWidth / (Math.Floor (ActualWidth / 80.0) * 80.0));  	var virtx = (((realx - MinX) * (Math.Floor (ActualWidth / 80.0) * 80.0)) / ActualWidth) * ActualWidth / (MaxX - MinX) * ActualWidth / (Math.Floor (ActualWidth / 80.0) * 80.0);  	drawingContext.DrawLine (linepen' new Point (virtx' ActualHeight + 2)' new Point (virtx' ActualHeight + 4));  	TextX = new FormattedText (realx.ToString ()' CultureInfo.CurrentUICulture' System.Windows.FlowDirection.LeftToRight' tface' emz' Foreground);  	drawingContext.DrawText (TextX' new Point (virtx - TextX.Width / 2' ActualHeight + 5));  }  
Magic Number,System451.Communication.Dashboard.WPF.Controls.Designer.PrimitiveControls,GraphScale,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\PrimitiveControls\GraphScale.cs,OnRender,The following statement contains a magic number: for (int i = 1; i < Math.Floor (ActualWidth / 80.0); i++) {  	var realx = Math.Round (MinX + ((i * 80.0 * (MaxX - MinX) / ActualWidth)) * ActualWidth / (Math.Floor (ActualWidth / 80.0) * 80.0));  	var virtx = (((realx - MinX) * (Math.Floor (ActualWidth / 80.0) * 80.0)) / ActualWidth) * ActualWidth / (MaxX - MinX) * ActualWidth / (Math.Floor (ActualWidth / 80.0) * 80.0);  	drawingContext.DrawLine (linepen' new Point (virtx' ActualHeight + 2)' new Point (virtx' ActualHeight + 4));  	TextX = new FormattedText (realx.ToString ()' CultureInfo.CurrentUICulture' System.Windows.FlowDirection.LeftToRight' tface' emz' Foreground);  	drawingContext.DrawText (TextX' new Point (virtx - TextX.Width / 2' ActualHeight + 5));  }  
Magic Number,System451.Communication.Dashboard.WPF.Controls.Designer.PrimitiveControls,GraphScale,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\PrimitiveControls\GraphScale.cs,OnRender,The following statement contains a magic number: for (int i = 1; i < Math.Floor (ActualWidth / 80.0); i++) {  	var realx = Math.Round (MinX + ((i * 80.0 * (MaxX - MinX) / ActualWidth)) * ActualWidth / (Math.Floor (ActualWidth / 80.0) * 80.0));  	var virtx = (((realx - MinX) * (Math.Floor (ActualWidth / 80.0) * 80.0)) / ActualWidth) * ActualWidth / (MaxX - MinX) * ActualWidth / (Math.Floor (ActualWidth / 80.0) * 80.0);  	drawingContext.DrawLine (linepen' new Point (virtx' ActualHeight + 2)' new Point (virtx' ActualHeight + 4));  	TextX = new FormattedText (realx.ToString ()' CultureInfo.CurrentUICulture' System.Windows.FlowDirection.LeftToRight' tface' emz' Foreground);  	drawingContext.DrawText (TextX' new Point (virtx - TextX.Width / 2' ActualHeight + 5));  }  
Magic Number,System451.Communication.Dashboard.WPF.Controls.Designer.PrimitiveControls,GraphScale,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\PrimitiveControls\GraphScale.cs,OnRender,The following statement contains a magic number: for (int i = 1; i < Math.Floor (ActualWidth / 80.0); i++) {  	var realx = Math.Round (MinX + ((i * 80.0 * (MaxX - MinX) / ActualWidth)) * ActualWidth / (Math.Floor (ActualWidth / 80.0) * 80.0));  	var virtx = (((realx - MinX) * (Math.Floor (ActualWidth / 80.0) * 80.0)) / ActualWidth) * ActualWidth / (MaxX - MinX) * ActualWidth / (Math.Floor (ActualWidth / 80.0) * 80.0);  	drawingContext.DrawLine (linepen' new Point (virtx' ActualHeight + 2)' new Point (virtx' ActualHeight + 4));  	TextX = new FormattedText (realx.ToString ()' CultureInfo.CurrentUICulture' System.Windows.FlowDirection.LeftToRight' tface' emz' Foreground);  	drawingContext.DrawText (TextX' new Point (virtx - TextX.Width / 2' ActualHeight + 5));  }  
Magic Number,System451.Communication.Dashboard.WPF.Controls.Designer.PrimitiveControls,GraphScale,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\PrimitiveControls\GraphScale.cs,OnRender,The following statement contains a magic number: for (int i = 1; i < Math.Floor (ActualWidth / 80.0); i++) {  	var realx = Math.Round (MinX + ((i * 80.0 * (MaxX - MinX) / ActualWidth)) * ActualWidth / (Math.Floor (ActualWidth / 80.0) * 80.0));  	var virtx = (((realx - MinX) * (Math.Floor (ActualWidth / 80.0) * 80.0)) / ActualWidth) * ActualWidth / (MaxX - MinX) * ActualWidth / (Math.Floor (ActualWidth / 80.0) * 80.0);  	drawingContext.DrawLine (linepen' new Point (virtx' ActualHeight + 2)' new Point (virtx' ActualHeight + 4));  	TextX = new FormattedText (realx.ToString ()' CultureInfo.CurrentUICulture' System.Windows.FlowDirection.LeftToRight' tface' emz' Foreground);  	drawingContext.DrawText (TextX' new Point (virtx - TextX.Width / 2' ActualHeight + 5));  }  
Magic Number,System451.Communication.Dashboard.WPF.Controls.Designer.PrimitiveControls,GraphScale,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\PrimitiveControls\GraphScale.cs,OnRender,The following statement contains a magic number: for (int i = 1; i < Math.Floor (ActualWidth / 80.0); i++) {  	var realx = Math.Round (MinX + ((i * 80.0 * (MaxX - MinX) / ActualWidth)) * ActualWidth / (Math.Floor (ActualWidth / 80.0) * 80.0));  	var virtx = (((realx - MinX) * (Math.Floor (ActualWidth / 80.0) * 80.0)) / ActualWidth) * ActualWidth / (MaxX - MinX) * ActualWidth / (Math.Floor (ActualWidth / 80.0) * 80.0);  	drawingContext.DrawLine (linepen' new Point (virtx' ActualHeight + 2)' new Point (virtx' ActualHeight + 4));  	TextX = new FormattedText (realx.ToString ()' CultureInfo.CurrentUICulture' System.Windows.FlowDirection.LeftToRight' tface' emz' Foreground);  	drawingContext.DrawText (TextX' new Point (virtx - TextX.Width / 2' ActualHeight + 5));  }  
Magic Number,System451.Communication.Dashboard.WPF.Controls.Designer.PrimitiveControls,GraphScale,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\PrimitiveControls\GraphScale.cs,OnRender,The following statement contains a magic number: drawingContext.DrawLine (linepen' new Point (virtx' ActualHeight + 2)' new Point (virtx' ActualHeight + 4));  
Magic Number,System451.Communication.Dashboard.WPF.Controls.Designer.PrimitiveControls,GraphScale,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\PrimitiveControls\GraphScale.cs,OnRender,The following statement contains a magic number: drawingContext.DrawLine (linepen' new Point (virtx' ActualHeight + 2)' new Point (virtx' ActualHeight + 4));  
Magic Number,System451.Communication.Dashboard.WPF.Controls.Designer.PrimitiveControls,GraphScale,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\PrimitiveControls\GraphScale.cs,OnRender,The following statement contains a magic number: drawingContext.DrawText (TextX' new Point (virtx - TextX.Width / 2' ActualHeight + 5));  
Magic Number,System451.Communication.Dashboard.WPF.Controls.Designer.PrimitiveControls,GraphScale,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\PrimitiveControls\GraphScale.cs,OnRender,The following statement contains a magic number: drawingContext.DrawText (TextX' new Point (virtx - TextX.Width / 2' ActualHeight + 5));  
Magic Number,System451.Communication.Dashboard.WPF.Controls.Designer.PrimitiveControls,GraphScale,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\PrimitiveControls\GraphScale.cs,Reduce,The following statement contains a magic number: if (medusa % 5 == 0) {  	return step * (2.0 / medusa);  }  else if (medusa % 2 == 0) {  	return step * (1.0 / medusa * 2);  }  else if (medusa % 1 == 0) {  	return step * (5.0 / (medusa * 10.0));  }  else {  	//return 4;  	//wait' what?  	throw new ArgumentOutOfRangeException ();  }  
Magic Number,System451.Communication.Dashboard.WPF.Controls.Designer.PrimitiveControls,GraphScale,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\PrimitiveControls\GraphScale.cs,Reduce,The following statement contains a magic number: if (medusa % 5 == 0) {  	return step * (2.0 / medusa);  }  else if (medusa % 2 == 0) {  	return step * (1.0 / medusa * 2);  }  else if (medusa % 1 == 0) {  	return step * (5.0 / (medusa * 10.0));  }  else {  	//return 4;  	//wait' what?  	throw new ArgumentOutOfRangeException ();  }  
Magic Number,System451.Communication.Dashboard.WPF.Controls.Designer.PrimitiveControls,GraphScale,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\PrimitiveControls\GraphScale.cs,Reduce,The following statement contains a magic number: if (medusa % 5 == 0) {  	return step * (2.0 / medusa);  }  else if (medusa % 2 == 0) {  	return step * (1.0 / medusa * 2);  }  else if (medusa % 1 == 0) {  	return step * (5.0 / (medusa * 10.0));  }  else {  	//return 4;  	//wait' what?  	throw new ArgumentOutOfRangeException ();  }  
Magic Number,System451.Communication.Dashboard.WPF.Controls.Designer.PrimitiveControls,GraphScale,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\PrimitiveControls\GraphScale.cs,Reduce,The following statement contains a magic number: if (medusa % 5 == 0) {  	return step * (2.0 / medusa);  }  else if (medusa % 2 == 0) {  	return step * (1.0 / medusa * 2);  }  else if (medusa % 1 == 0) {  	return step * (5.0 / (medusa * 10.0));  }  else {  	//return 4;  	//wait' what?  	throw new ArgumentOutOfRangeException ();  }  
Magic Number,System451.Communication.Dashboard.WPF.Controls.Designer.PrimitiveControls,GraphScale,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\PrimitiveControls\GraphScale.cs,Reduce,The following statement contains a magic number: if (medusa % 5 == 0) {  	return step * (2.0 / medusa);  }  else if (medusa % 2 == 0) {  	return step * (1.0 / medusa * 2);  }  else if (medusa % 1 == 0) {  	return step * (5.0 / (medusa * 10.0));  }  else {  	//return 4;  	//wait' what?  	throw new ArgumentOutOfRangeException ();  }  
Magic Number,System451.Communication.Dashboard.WPF.Controls.Designer.PrimitiveControls,GraphScale,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\PrimitiveControls\GraphScale.cs,Reduce,The following statement contains a magic number: if (medusa % 5 == 0) {  	return step * (2.0 / medusa);  }  else if (medusa % 2 == 0) {  	return step * (1.0 / medusa * 2);  }  else if (medusa % 1 == 0) {  	return step * (5.0 / (medusa * 10.0));  }  else {  	//return 4;  	//wait' what?  	throw new ArgumentOutOfRangeException ();  }  
Magic Number,System451.Communication.Dashboard.WPF.Controls.Designer.PrimitiveControls,GraphScale,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\PrimitiveControls\GraphScale.cs,Reduce,The following statement contains a magic number: return step * (2.0 / medusa);  
Magic Number,System451.Communication.Dashboard.WPF.Controls.Designer.PrimitiveControls,GraphScale,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\PrimitiveControls\GraphScale.cs,Reduce,The following statement contains a magic number: if (medusa % 2 == 0) {  	return step * (1.0 / medusa * 2);  }  else if (medusa % 1 == 0) {  	return step * (5.0 / (medusa * 10.0));  }  else {  	//return 4;  	//wait' what?  	throw new ArgumentOutOfRangeException ();  }  
Magic Number,System451.Communication.Dashboard.WPF.Controls.Designer.PrimitiveControls,GraphScale,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\PrimitiveControls\GraphScale.cs,Reduce,The following statement contains a magic number: if (medusa % 2 == 0) {  	return step * (1.0 / medusa * 2);  }  else if (medusa % 1 == 0) {  	return step * (5.0 / (medusa * 10.0));  }  else {  	//return 4;  	//wait' what?  	throw new ArgumentOutOfRangeException ();  }  
Magic Number,System451.Communication.Dashboard.WPF.Controls.Designer.PrimitiveControls,GraphScale,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\PrimitiveControls\GraphScale.cs,Reduce,The following statement contains a magic number: if (medusa % 2 == 0) {  	return step * (1.0 / medusa * 2);  }  else if (medusa % 1 == 0) {  	return step * (5.0 / (medusa * 10.0));  }  else {  	//return 4;  	//wait' what?  	throw new ArgumentOutOfRangeException ();  }  
Magic Number,System451.Communication.Dashboard.WPF.Controls.Designer.PrimitiveControls,GraphScale,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\PrimitiveControls\GraphScale.cs,Reduce,The following statement contains a magic number: if (medusa % 2 == 0) {  	return step * (1.0 / medusa * 2);  }  else if (medusa % 1 == 0) {  	return step * (5.0 / (medusa * 10.0));  }  else {  	//return 4;  	//wait' what?  	throw new ArgumentOutOfRangeException ();  }  
Magic Number,System451.Communication.Dashboard.WPF.Controls.Designer.PrimitiveControls,GraphScale,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\PrimitiveControls\GraphScale.cs,Reduce,The following statement contains a magic number: return step * (1.0 / medusa * 2);  
Magic Number,System451.Communication.Dashboard.WPF.Controls.Designer.PrimitiveControls,GraphScale,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\PrimitiveControls\GraphScale.cs,Reduce,The following statement contains a magic number: if (medusa % 1 == 0) {  	return step * (5.0 / (medusa * 10.0));  }  else {  	//return 4;  	//wait' what?  	throw new ArgumentOutOfRangeException ();  }  
Magic Number,System451.Communication.Dashboard.WPF.Controls.Designer.PrimitiveControls,GraphScale,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\PrimitiveControls\GraphScale.cs,Reduce,The following statement contains a magic number: if (medusa % 1 == 0) {  	return step * (5.0 / (medusa * 10.0));  }  else {  	//return 4;  	//wait' what?  	throw new ArgumentOutOfRangeException ();  }  
Magic Number,System451.Communication.Dashboard.WPF.Controls.Designer.PrimitiveControls,GraphScale,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\PrimitiveControls\GraphScale.cs,Reduce,The following statement contains a magic number: return step * (5.0 / (medusa * 10.0));  
Magic Number,System451.Communication.Dashboard.WPF.Controls.Designer.PrimitiveControls,GraphScale,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\PrimitiveControls\GraphScale.cs,Reduce,The following statement contains a magic number: return step * (5.0 / (medusa * 10.0));  
Magic Number,System451.Communication.Dashboard.WPF.Controls.Designer.PrimitiveControls,GraphScale,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\PrimitiveControls\GraphScale.cs,GetFloatParts,The following statement contains a magic number: exponent = (int)((bits >> 52) & 0x7ffL);  
Magic Number,System451.Communication.Dashboard.WPF.Controls.Designer.PrimitiveControls,GraphScale,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\PrimitiveControls\GraphScale.cs,GetFloatParts,The following statement contains a magic number: if (exponent == 0) {  	exponent++;  }  // Normal numbers; leave exponent as it is but add extra  // bit to the front of the mantissa  else {  	mantissa = mantissa | (1L << 52);  }  
Magic Number,System451.Communication.Dashboard.WPF.Controls.Designer.PrimitiveControls,GraphScale,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\PrimitiveControls\GraphScale.cs,GetFloatParts,The following statement contains a magic number: mantissa = mantissa | (1L << 52);  
Magic Number,System451.Communication.Dashboard.WPF.Controls.Designer.PrimitiveControls,GraphScale,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\PrimitiveControls\GraphScale.cs,GetFloatParts,The following statement contains a magic number: exponent -= 1075;  
Magic Number,System451.Communication.Dashboard.WPF.Controls.Designer.PrimitiveControls,GraphScale,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\PrimitiveControls\GraphScale.cs,GetFloatParts,The following statement contains a magic number: if ((value % 1) != 0)//if decimal   {  	exponent = 2 - Math.Abs (value % 1).ToString ().Length;  	mantissa = (long)Math.Abs (value * Math.Pow (10' Math.Abs (value % 1).ToString ().Length - 2));  }  
Magic Number,System451.Communication.Dashboard.WPF.Controls.Designer.PrimitiveControls,GraphScale,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\PrimitiveControls\GraphScale.cs,GetFloatParts,The following statement contains a magic number: if ((value % 1) != 0)//if decimal   {  	exponent = 2 - Math.Abs (value % 1).ToString ().Length;  	mantissa = (long)Math.Abs (value * Math.Pow (10' Math.Abs (value % 1).ToString ().Length - 2));  }  
Magic Number,System451.Communication.Dashboard.WPF.Controls.Designer.PrimitiveControls,GraphScale,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\PrimitiveControls\GraphScale.cs,GetFloatParts,The following statement contains a magic number: if ((value % 1) != 0)//if decimal   {  	exponent = 2 - Math.Abs (value % 1).ToString ().Length;  	mantissa = (long)Math.Abs (value * Math.Pow (10' Math.Abs (value % 1).ToString ().Length - 2));  }  
Magic Number,System451.Communication.Dashboard.WPF.Controls.Designer.PrimitiveControls,GraphScale,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\PrimitiveControls\GraphScale.cs,GetFloatParts,The following statement contains a magic number: exponent = 2 - Math.Abs (value % 1).ToString ().Length;  
Magic Number,System451.Communication.Dashboard.WPF.Controls.Designer.PrimitiveControls,GraphScale,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\PrimitiveControls\GraphScale.cs,GetFloatParts,The following statement contains a magic number: mantissa = (long)Math.Abs (value * Math.Pow (10' Math.Abs (value % 1).ToString ().Length - 2));  
Magic Number,System451.Communication.Dashboard.WPF.Controls.Designer.PrimitiveControls,GraphScale,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\PrimitiveControls\GraphScale.cs,GetFloatParts,The following statement contains a magic number: mantissa = (long)Math.Abs (value * Math.Pow (10' Math.Abs (value % 1).ToString ().Length - 2));  
Magic Number,System451.Communication.Dashboard.WPF.Controls.Designers,TriggerListenersDesigner,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\TriggerListenersDesigner.cs,GetProperyField,The following statement contains a magic number: pan.Width = 110;  
Magic Number,System451.Communication.Dashboard.WPF.Controls.Designer,TriggerListenersDesignerWindow,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\TriggerListenersDesignerWindow.xaml.cs,UpdateTLs,The following statement contains a magic number: foreach (var trig in trigs) {  	string[] nv = trig.Split (':');  	if (nv.Length == 2)  		AddTrigger (nv [0]' nv [1]);  }  
Magic Number,System451.Communication.Dashboard.WPF.Controls.Designer,TriggerListenersDesignerWindow,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\TriggerListenersDesignerWindow.xaml.cs,UpdateTLs,The following statement contains a magic number: if (nv.Length == 2)  	AddTrigger (nv [0]' nv [1]);  
Magic Number,System451.Communication.Dashboard.WPF.Controls.Designer,TriggerListenersDesignerWindow,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\TriggerListenersDesignerWindow.xaml.cs,AddTrigger,The following statement contains a magic number: sp.Margin = new Thickness (8' 8' 8' 0);  
Magic Number,System451.Communication.Dashboard.WPF.Controls.Designer,TriggerListenersDesignerWindow,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\TriggerListenersDesignerWindow.xaml.cs,AddTrigger,The following statement contains a magic number: sp.Margin = new Thickness (8' 8' 8' 0);  
Magic Number,System451.Communication.Dashboard.WPF.Controls.Designer,TriggerListenersDesignerWindow,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\TriggerListenersDesignerWindow.xaml.cs,AddTrigger,The following statement contains a magic number: sp.Margin = new Thickness (8' 8' 8' 0);  
Magic Number,System451.Communication.Dashboard.WPF.Controls.Designer,TriggerListenersDesignerWindow,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\TriggerListenersDesignerWindow.xaml.cs,AddTrigger,The following statement contains a magic number: sp.ColumnDefinitions [2].Width = new GridLength (1' GridUnitType.Auto);  
Magic Number,System451.Communication.Dashboard.WPF.Controls.Designer,TriggerListenersDesignerWindow,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\TriggerListenersDesignerWindow.xaml.cs,AddTrigger,The following statement contains a magic number: mcb.Margin = new Thickness (8' 0' 8' 0);  
Magic Number,System451.Communication.Dashboard.WPF.Controls.Designer,TriggerListenersDesignerWindow,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\TriggerListenersDesignerWindow.xaml.cs,AddTrigger,The following statement contains a magic number: mcb.Margin = new Thickness (8' 0' 8' 0);  
Magic Number,System451.Communication.Dashboard.WPF.Controls.Designer,TriggerListenersDesignerWindow,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\TriggerListenersDesignerWindow.xaml.cs,AddTrigger,The following statement contains a magic number: Grid.SetColumn (btn' 2);  
Magic Number,System451.Communication.Dashboard.WPF.Controls.Designer,ZomBUrlCollectionDesignerWindow,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\ZomBUrlCollectionDesignerWindow.xaml.cs,ListItems_SelectionChanged,The following statement contains a magic number: try {  	haltevents = true;  	string nbtxt = nameBox.Text = ListItems.SelectedItem as string;  	nbtxt = nbtxt.Substring (7);  	//zomb://  	nbtxt = nbtxt.Substring (nbtxt.IndexOf ("/"));  	KnownTypes.UnselectAll ();  	foreach (var item in KnownTypes.ItemsSource) {  		var kvpair = (KeyValuePair<TypedDataSourceAttributeComparer' DataSourceAttribute>)item;  		if (nbtxt == ("/" + kvpair.Value.SourceName) || nbtxt.StartsWith ("/" + kvpair.Value.SourceName + "?") || nbtxt.StartsWith ("/" + kvpair.Value.SourceName + "/")) {  			KnownTypes.SelectedItem = item;  			break;  		}  	}  	haltevents = false;  }  catch {  	nameBox.Text = "";  	haltevents = false;  }  
Magic Number,System451.Communication.Dashboard.WPF.Controls.Designer,ZomBUrlCollectionDesignerWindow,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\ZomBUrlCollectionDesignerWindow.xaml.cs,ListItems_SelectionChanged,The following statement contains a magic number: nbtxt = nbtxt.Substring (7);  
Magic Number,System451.Communication.Dashboard.WPF.Controls.Designer,ZomBUrlCollectionDesignerWindow,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\ZomBUrlCollectionDesignerWindow.xaml.cs,GeneralCustardBtn_Checked,The following statement contains a magic number: try {  	haltevents = true;  	string nbtxt = nameBox.Text;  	if (string.IsNullOrEmpty (nbtxt))  		return;  	nbtxt = nbtxt.Substring (7);  	//zomb://  	string nbtxtstart = "zomb://" + nbtxt.Substring (0' nbtxt.IndexOf ("/") + 1);  	nbtxt = nbtxt.Substring (nbtxt.IndexOf ("/") + 1);  	var newtxt = ((KeyValuePair<TypedDataSourceAttributeComparer' DataSourceAttribute>)KnownTypes.SelectedItem).Value.SourceName;  	if (nbtxt.Contains ('/')) {  		nbtxt = newtxt + nbtxt.Substring (nbtxt.IndexOf ("/"));  	}  	else if (nbtxt.Contains ('?')) {  		nbtxt = newtxt + nbtxt.Substring (nbtxt.IndexOf ("?"));  	}  	else {  		nbtxt = newtxt;  	}  	nameBox.Text = nbtxtstart + nbtxt;  	haltevents = false;  	nameBox_TextChanged (sender' null);  }  catch {  	haltevents = false;  }  
Magic Number,System451.Communication.Dashboard.WPF.Controls.Designer,ZomBUrlCollectionDesignerWindow,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\ZomBUrlCollectionDesignerWindow.xaml.cs,GeneralCustardBtn_Checked,The following statement contains a magic number: nbtxt = nbtxt.Substring (7);  
Magic Number,System451.Communication.Dashboard.WPF.Controls.Designer,ZomBUrlCollectionDesignerWindow,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\ZomBUrlCollectionDesignerWindow.xaml.cs,nameBox_KeyDown,The following statement contains a magic number: try {  	haltevents = true;  	string nbtxt = nameBox.Text;  	nbtxt = nbtxt.Substring (7);  	//zomb://  	nbtxt = nbtxt.Substring (nbtxt.IndexOf ("/"));  	KnownTypes.UnselectAll ();  	foreach (var item in KnownTypes.ItemsSource) {  		var kvpair = (KeyValuePair<TypedDataSourceAttributeComparer' DataSourceAttribute>)item;  		if (nbtxt == ("/" + kvpair.Value.SourceName) || nbtxt.StartsWith ("/" + kvpair.Value.SourceName + "?") || nbtxt.StartsWith ("/" + kvpair.Value.SourceName + "/")) {  			KnownTypes.SelectedItem = item;  			break;  		}  	}  	haltevents = false;  }  catch {  	haltevents = false;  }  
Magic Number,System451.Communication.Dashboard.WPF.Controls.Designer,ZomBUrlCollectionDesignerWindow,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\ZomBUrlCollectionDesignerWindow.xaml.cs,nameBox_KeyDown,The following statement contains a magic number: nbtxt = nbtxt.Substring (7);  
Magic Number,System451.Communication.Dashboard.WPF.Controls.Designer,ZomBUrlCollectionDesigner,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\ZomBUrlDesigner.cs,GetProperyField,The following statement contains a magic number: pan.Width = 110;  
Magic Number,System451.Communication.Dashboard.WPF.Controls.Designer,BrushDesignerWindow,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\BrushDesignerWindow.xaml.cs,BrushDesignerWindow,The following statement contains a magic number: GGridTrans.CenterX = 0.5;  
Magic Number,System451.Communication.Dashboard.WPF.Controls.Designer,BrushDesignerWindow,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\BrushDesignerWindow.xaml.cs,BrushDesignerWindow,The following statement contains a magic number: GGridTrans.CenterY = 0.5;  
Magic Number,System451.Communication.Dashboard.WPF.Controls.Designer,BrushDesignerWindow,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\BrushDesignerWindow.xaml.cs,AddStop,The following statement contains a magic number: if (indx >= gs.Count - 1)  	indx = gs.Count - 2;  
Magic Number,System451.Communication.Dashboard.WPF.Controls.Designer,BrushDesignerWindow,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\BrushDesignerWindow.xaml.cs,AddStop,The following statement contains a magic number: indx = gs.Count - 2;  
Magic Number,System451.Communication.Dashboard.WPF.Controls.Designer,BrushDesignerWindow,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\BrushDesignerWindow.xaml.cs,AddStop,The following statement contains a magic number: if (indx >= cs.Count - 1)  	indx = cs.Count - 2;  
Magic Number,System451.Communication.Dashboard.WPF.Controls.Designer,BrushDesignerWindow,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\BrushDesignerWindow.xaml.cs,AddStop,The following statement contains a magic number: indx = cs.Count - 2;  
Magic Number,System451.Communication.Dashboard.WPF.Controls.Designer,BrushDesignerWindow,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\BrushDesignerWindow.xaml.cs,ColorMidpoint,The following statement contains a magic number: return Color.FromArgb ((byte)((c1.A + c2.A) / 2)' (byte)((c1.R + c2.R) / 2)' (byte)((c1.G + c2.G) / 2)' (byte)((c1.B + c2.B) / 2));  
Magic Number,System451.Communication.Dashboard.WPF.Controls.Designer,BrushDesignerWindow,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\BrushDesignerWindow.xaml.cs,ColorMidpoint,The following statement contains a magic number: return Color.FromArgb ((byte)((c1.A + c2.A) / 2)' (byte)((c1.R + c2.R) / 2)' (byte)((c1.G + c2.G) / 2)' (byte)((c1.B + c2.B) / 2));  
Magic Number,System451.Communication.Dashboard.WPF.Controls.Designer,BrushDesignerWindow,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\BrushDesignerWindow.xaml.cs,ColorMidpoint,The following statement contains a magic number: return Color.FromArgb ((byte)((c1.A + c2.A) / 2)' (byte)((c1.R + c2.R) / 2)' (byte)((c1.G + c2.G) / 2)' (byte)((c1.B + c2.B) / 2));  
Magic Number,System451.Communication.Dashboard.WPF.Controls.Designer,BrushDesignerWindow,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\BrushDesignerWindow.xaml.cs,ColorMidpoint,The following statement contains a magic number: return Color.FromArgb ((byte)((c1.A + c2.A) / 2)' (byte)((c1.R + c2.R) / 2)' (byte)((c1.G + c2.G) / 2)' (byte)((c1.B + c2.B) / 2));  
Magic Number,System451.Communication.Dashboard.WPF.Controls.Designer,BrushDesignerWindow,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\BrushDesignerWindow.xaml.cs,GetNewStopMarker,The following statement contains a magic number: Canvas.SetLeft (sm' -7);  
Magic Number,System451.Communication.Dashboard.WPF.Controls.Designer,BrushDesignerWindow,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\BrushDesignerWindow.xaml.cs,GetNewStopMarker,The following statement contains a magic number: Canvas.SetTop (sm' -10);  
Magic Number,System451.Communication.Dashboard.WPF.Controls.Designer,BrushDesignerWindow,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\BrushDesignerWindow.xaml.cs,DeleteStop,The following statement contains a magic number: if ((b as LinearGradientBrush).GradientStops.Count <= 2)  	return;  
Magic Number,System451.Communication.Dashboard.WPF.Controls.Designer,BrushDesignerWindow,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\BrushDesignerWindow.xaml.cs,Vertical_Checked,The following statement contains a magic number: GGridTrans.Angle = -90;  
Magic Number,System451.Communication.Dashboard.WPF.Controls.Designer,StopMarkerPositionConverter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\BrushDesignerWindow.xaml.cs,Convert,The following statement contains a magic number: return ((double)value) + 14;  
Magic Number,System451.Communication.Dashboard.WPF.Controls.Designer,StopMarkerPositionConverter,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\BrushDesignerWindow.xaml.cs,ConvertBack,The following statement contains a magic number: return ((double)value) - 14;  
Magic Number,System451.Communication.Dashboard.WPF.Controls.Designer,CameraDesignerWindow,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\CameraDesignerWindow.xaml.cs,add_Click,The following statement contains a magic number: (zcc.Last () as CameraTarget).Border = new Pen (Brushes.Lime' (1.0 / ((Object.Width + Object.Height) / 2.0)));  
Magic Number,System451.Communication.Dashboard.WPF.Controls.Designer,CameraDesignerWindow,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\CameraDesignerWindow.xaml.cs,add_Click,The following statement contains a magic number: (zcc.Last () as CameraTarget).Fill = new SolidColorBrush (Color.FromArgb (127' 0' 255' 0));  
Magic Number,System451.Communication.Dashboard.WPF.Controls.Designer,CameraDesignerWindow,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\CameraDesignerWindow.xaml.cs,add_Click,The following statement contains a magic number: (zcc.Last () as CameraTarget).Fill = new SolidColorBrush (Color.FromArgb (127' 0' 255' 0));  
Magic Number,System451.Communication.Dashboard.WPF.Controls.Designer,CameraDesignerWindow,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\CameraDesignerWindow.xaml.cs,ListItems_SelectionChanged,The following statement contains a magic number: try {  	haltevents = true;  	nameBox.Text = (ListItems.SelectedItem as CameraTarget).ControlName;  	fillsp.Children.Clear ();  	fillsp.Children.Add (DesignUtils.GetDesignerField (ListItems.SelectedItem' typeof(CameraTarget).GetProperty ("Fill")));  	pensp.Children.Clear ();  	pensp.Children.Add (DesignUtils.GetDesignerField ((ListItems.SelectedItem as CameraTarget).Border' typeof(Pen).GetProperty ("Brush")));  	WidthBox.Text = ((ListItems.SelectedItem as CameraTarget).Border.Thickness * ((Object.Width + Object.Height) / 2.0)).ToString ();  	haltevents = false;  }  catch {  	nameBox.Text = "";  	haltevents = false;  }  
Magic Number,System451.Communication.Dashboard.WPF.Controls.Designer,CameraDesignerWindow,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\CameraDesignerWindow.xaml.cs,ListItems_SelectionChanged,The following statement contains a magic number: WidthBox.Text = ((ListItems.SelectedItem as CameraTarget).Border.Thickness * ((Object.Width + Object.Height) / 2.0)).ToString ();  
Magic Number,System451.Communication.Dashboard.WPF.Controls.Designer,CameraDesignerWindow,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\CameraDesignerWindow.xaml.cs,WidthBox_TextChanged,The following statement contains a magic number: if (ListItems.SelectedItem != null) {  	try {  		(zcc [zcc.IndexOf (ListItems.SelectedItem as CameraTarget)] as CameraTarget).Border.Thickness = (double.Parse (WidthBox.Text) / ((Object.Width + Object.Height) / 2.0));  	}  	catch {  	}  }  
Magic Number,System451.Communication.Dashboard.WPF.Controls.Designer,CameraDesignerWindow,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\CameraDesignerWindow.xaml.cs,WidthBox_TextChanged,The following statement contains a magic number: try {  	(zcc [zcc.IndexOf (ListItems.SelectedItem as CameraTarget)] as CameraTarget).Border.Thickness = (double.Parse (WidthBox.Text) / ((Object.Width + Object.Height) / 2.0));  }  catch {  }  
Magic Number,System451.Communication.Dashboard.WPF.Controls.Designer,CameraDesignerWindow,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\CameraDesignerWindow.xaml.cs,WidthBox_TextChanged,The following statement contains a magic number: (zcc [zcc.IndexOf (ListItems.SelectedItem as CameraTarget)] as CameraTarget).Border.Thickness = (double.Parse (WidthBox.Text) / ((Object.Width + Object.Height) / 2.0));  
Magic Number,System451.Communication.Dashboard.WPF.Controls.Designer,ColorControlColorSeperator,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\ColorControlColorSeperator.cs,Convert,The following statement contains a magic number: return new SolidColorBrush (Color.FromArgb (System.Convert.ToByte (value [3])' System.Convert.ToByte (value [0])' System.Convert.ToByte (value [1])' System.Convert.ToByte (value [2])));  
Magic Number,System451.Communication.Dashboard.WPF.Controls.Designer,ColorControlColorSeperator,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\Controls\Designer\ColorControlColorSeperator.cs,Convert,The following statement contains a magic number: return new SolidColorBrush (Color.FromArgb (System.Convert.ToByte (value [3])' System.Convert.ToByte (value [0])' System.Convert.ToByte (value [1])' System.Convert.ToByte (value [2])));  
Missing Default,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,ParseValue,The following switch statement is missing a default case: switch (LookAhead (json' index)) {  case JSON.TOKEN_STRING:  	return ParseString (json' ref index' ref success);  case JSON.TOKEN_NUMBER:  	return ParseNumber (json' ref index' ref success);  case JSON.TOKEN_CURLY_OPEN:  	return ParseObject (json' ref index' ref success);  case JSON.TOKEN_SQUARED_OPEN:  	return ParseArray (json' ref index' ref success);  case JSON.TOKEN_TRUE:  	NextToken (json' ref index);  	return true;  case JSON.TOKEN_FALSE:  	NextToken (json' ref index);  	return false;  case JSON.TOKEN_NULL:  	NextToken (json' ref index);  	return null;  case JSON.TOKEN_NONE:  	break;  }  
Missing Default,System451.Communication.Dashboard.Utils,JSON,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\ext\JSON.cs,NextToken,The following switch statement is missing a default case: switch (c) {  case '{':  	return JSON.TOKEN_CURLY_OPEN;  case '}':  	return JSON.TOKEN_CURLY_CLOSE;  case '[':  	return JSON.TOKEN_SQUARED_OPEN;  case ']':  	return JSON.TOKEN_SQUARED_CLOSE;  case ''':  	return JSON.TOKEN_COMMA;  case '"':  	return JSON.TOKEN_STRING;  case '0':  case '1':  case '2':  case '3':  case '4':  case '5':  case '6':  case '7':  case '8':  case '9':  case '-':  	return JSON.TOKEN_NUMBER;  case ':':  	return JSON.TOKEN_COLON;  }  
Missing Default,System451.Communication.Dashboard.Net,ZomBUrl,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\NetAndDataProcessing\DashboardData\IDashboardDataSource.cs,FindSourceType,The following switch statement is missing a default case: switch (SourceName) {  case "DBPkt":  case "DBPacket":  	return typeof(DashboardPacketDataSource);  case "TCP":  	return typeof(TCPDataSource);  case "TCP2":  	return typeof(TCPDataSender);  case "DataSave":  	return typeof(DataSaver);  case "File":  	return typeof(DataPlayerSource);  case "Smart":  	return typeof(SmartDataSource);  case "SmartNG":  	return typeof(NetTableSource);  case "NetTable":  	return typeof(NetTableSource);  case "Serial":  	return typeof(SerialDataSource);  }  
Missing Default,Design,AnalogMeterDesigner,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\AnalogMeter.cs,WndProc,The following switch statement is missing a default case: switch (m.Msg) {  case WM_LButtonDown:  	if (GetValueRec ().IsVisible (new Point (m.LParam.ToInt32 ()))) {  		dragin = true;  		lpoint = m.LParam.ToInt32 ();  		Point tp = new Point (lpoint);  		tp.Offset (-3' -3);  		europeanswallow = new Rectangle (tp' new Size (6' 6));  		ltime = DateTime.Now.Ticks;  		Cursor.Current = Cursors.Hand;  		cans = true;  	}  	break;  case WM_MouseMove:  	if (dragin) {  		Point p = new Point (m.LParam.ToInt32 ());  		if (cans) {  			if (europeanswallow.Contains (p)) {  				double f = DateTime.Now.Subtract (new DateTime (ltime)).TotalSeconds;  				if (f >= 1.5)  					cans = false;  				else if (f >= 0.5) {  					dragin = false;  					Cursor.Current = Cursors.SizeAll;  					break;  				}  			}  			else  				cans = false;  		}  		float v = (float)(((AnalogMeter.PointToAngle (p)) / 180f) * (1023));  		vm.Value = Math.Max (0' Math.Min (1023' v));  		Cursor.Current = Cursors.Hand;  		return;  	}  	else if (GetValueRec ().IsVisible (new Point (m.LParam.ToInt32 ()))) {  		inadorn = true;  		Cursor.Current = Cursors.Hand;  	}  	else  		inadorn = false;  	break;  case WM_LButtonUp:  	if (dragin)  		dragin = false;  	break;  }  
Missing Default,Design,ValueMeterDesigner,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\ValueMeter.cs,WndProc,The following switch statement is missing a default case: switch (m.Msg) {  case WM_LButtonDown:  	if (GetValueRec ().Contains (new Point (m.LParam.ToInt32 ()))) {  		dragin = true;  		Cursor.Current = Cursors.Hand;  	}  	break;  case WM_MouseMove:  	if (dragin) {  		Point p = new Point (m.LParam.ToInt32 ());  		float value = 1 - ((vm.Value - vm.Min) / (vm.Max - vm.Min));  		float height = vm.Height;  		float nval = 1 - p.Y / height;  		if (vm.Orientation == Orientation.Horizontal) {  			height = vm.Width;  			nval = p.X / height;  		}  		nval = Math.Max (0' Math.Min (1' nval));  		if (value != nval)  			vm.Value = (nval * (vm.Max - vm.Min)) + vm.Min;  		Cursor.Current = Cursors.Hand;  		return;  	}  	else if (GetValueRec ().Contains (new Point (m.LParam.ToInt32 ()))) {  		inadorn = true;  		Cursor.Current = Cursors.Hand;  	}  	else  		inadorn = false;  	break;  case WM_LButtonUp:  	if (dragin)  		dragin = false;  	break;  }  
Missing Default,Design,DirectionMeterDesigner,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\DirectionMeter.cs,WndProc,The following switch statement is missing a default case: switch (m.Msg) {  case WM_LButtonDown:  	if (GetValueRec ().IsVisible (new Point (m.LParam.ToInt32 ()))) {  		dragin = true;  		Cursor.Current = Cursors.Hand;  	}  	break;  case WM_MouseMove:  	if (dragin) {  		Point p = new Point (m.LParam.ToInt32 ());  		vm.Value = (float)(DirectionMeter.PointToAngle (p) / 180 * (vm.Max - vm.Min) + vm.Min);  		Cursor.Current = Cursors.Hand;  		return;  	}  	else if (GetValueRec ().IsVisible (new Point (m.LParam.ToInt32 ()))) {  		inadorn = true;  		Cursor.Current = Cursors.Hand;  	}  	else  		inadorn = false;  	break;  case WM_LButtonUp:  	if (dragin)  		dragin = false;  	break;  }  
Missing Default,Design,OnOffControlDesigner,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\OnOffControl.cs,WndProc,The following switch statement is missing a default case: switch (m.Msg) {  case WM_LButtonDown:  	if (GetValueRec ().IsVisible (new Point (m.LParam.ToInt32 ()))) {  		dragin = true;  		Cursor.Current = Cursors.Hand;  		point = m.LParam.ToInt32 ();  	}  	break;  case WM_MouseMove:  	if (dragin) {  		Cursor.Current = Cursors.Hand;  		if (point == m.LParam.ToInt32 ())  			return;  	}  	else if (GetValueRec ().IsVisible (new Point (m.LParam.ToInt32 ()))) {  		inadorn = true;  		Cursor.Current = Cursors.Hand;  	}  	else  		inadorn = false;  	break;  case WM_LButtonUp:  	if (dragin) {  		dragin = false;  		if (point == m.LParam.ToInt32 ())  			vm.Value = !vm.Value;  	}  	break;  }  
Missing Default,Design,AlertControlDesigner,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\Controls\OnOffControl.cs,WndProc,The following switch statement is missing a default case: switch (m.Msg) {  case WM_LButtonDown:  	dragin = true;  	Cursor.Current = Cursors.Hand;  	point = m.LParam.ToInt32 ();  	break;  case WM_MouseMove:  	if (dragin) {  		Cursor.Current = Cursors.Hand;  		if (point == m.LParam.ToInt32 ())  			return;  	}  	else {  		inadorn = true;  		Cursor.Current = Cursors.Hand;  	}  	break;  case WM_LButtonUp:  	if (dragin) {  		dragin = false;  		if (point == m.LParam.ToInt32 ())  			vm.Value = !vm.Value;  	}  	break;  }  
Missing Default,System451.Communication.Dashboard.WPF.Controls,DashboardDataHubWindow,C:\repos\byteit101_ZomB-Dashboard-System\ZomBdll\WPF\DashboardDataHubWindow.cs,WndProc,The following switch statement is missing a default case: switch (wParam.ToInt32 ()) {  case AlwaysOnTopMenuID:  	var self = hwndLookup [hwnd];  	self.Topmost = !self.Topmost;  	CheckMenuItem (self.sysptr' AlwaysOnTopMenuID' self.Topmost ? MF_CHECKED : MF_UNCHECKED);  	handled = true;  	break;  }  
