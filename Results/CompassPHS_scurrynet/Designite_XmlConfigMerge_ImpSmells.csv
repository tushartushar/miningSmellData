Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Tools.XmlConfigMerge,ConfigFileManager,C:\repos\CompassPHS_scurrynet\src\XmlConfigMerge\ConfigFileManager.cs,ConfigFileManager,Cyclomatic complexity of the method is 8
Complex Method,Tools.XmlConfigMerge,ConfigFileManager,C:\repos\CompassPHS_scurrynet\src\XmlConfigMerge\ConfigFileManager.cs,ReplaceXPathValues,Cyclomatic complexity of the method is 26
Complex Method,Tools.XmlConfigMerge,ConfigFileManager,C:\repos\CompassPHS_scurrynet\src\XmlConfigMerge\ConfigFileManager.cs,UpdateExistingElementsAndAttribsRecurse,Cyclomatic complexity of the method is 17
Complex Method,Tools.XmlConfigMerge,ConfigFileManager,C:\repos\CompassPHS_scurrynet\src\XmlConfigMerge\ConfigFileManager.cs,SelectSingleNodeMatchingNamespaceURI,Cyclomatic complexity of the method is 8
Long Identifier,Tools.XmlConfigMerge,ConfigFileManager,C:\repos\CompassPHS_scurrynet\src\XmlConfigMerge\ConfigFileManager.cs,ConfigFileManager,The length of the parameter makeMergeFromConfigPathTheSavePath is 34.
Long Statement,Tools.XmlConfigMerge,ConfigFileManager,C:\repos\CompassPHS_scurrynet\src\XmlConfigMerge\ConfigFileManager.cs,ReplaceXPathValues,The length of the statement  "			throw new ApplicationException ("'" + xPath + "' does not match any nodes' and may not be auto-created since it is not of form '" + regex.ToString () + "'"); " is 157.
Long Statement,Tools.XmlConfigMerge,ConfigFileManager,C:\repos\CompassPHS_scurrynet\src\XmlConfigMerge\ConfigFileManager.cs,ReplaceXPathValues,The length of the statement  "					throw new ApplicationException ("> 1 regex replace group not supported (" + match.Groups.Count + ") for regex expr: '" + regexPattern.ToString () + "'"); " is 153.
Long Statement,Tools.XmlConfigMerge,ConfigFileManager,C:\repos\CompassPHS_scurrynet\src\XmlConfigMerge\ConfigFileManager.cs,ReplaceXPathValues,The length of the statement  "					ret.Add (((XmlAttribute)node).OwnerElement.Name + "[@key='" + keyAttrib.InnerText + "']/@" + node.Name + " set to '" + replText + "'"); " is 135.
Long Statement,Tools.XmlConfigMerge,ConfigFileManager,C:\repos\CompassPHS_scurrynet\src\XmlConfigMerge\ConfigFileManager.cs,UpdateExistingElementsAndAttribsRecurse,The length of the statement  "				throw new ApplicationException ("node.ParentNode.Name != toParentNode.Name: " + node.ParentNode.Name + " !=" + toParentNode.Name); " is 130.
Long Statement,Tools.XmlConfigMerge,ConfigFileManager,C:\repos\CompassPHS_scurrynet\src\XmlConfigMerge\ConfigFileManager.cs,SelectSingleNodeMatchingNamespaceURI,The length of the statement  "		if (subNode.Attributes [keyAttrib.Name] != null && subNode.Attributes [keyAttrib.Name].InnerText == keyAttrib.InnerText) { " is 122.
Magic Number,Tools.XmlConfigMerge,ConfigFileManager,C:\repos\CompassPHS_scurrynet\src\XmlConfigMerge\ConfigFileManager.cs,ReplaceXPathValues,The following statement contains a magic number: foreach (XmlNode node in nodes) {  	string replText = null;  	if (regexPattern != null) {  		Match match = regexPattern.Match (node.InnerText);  		if (match.Success) {  			//Determine if group match applies  			switch (match.Groups.Count) {  			case 1:  				replText = regexPattern.Replace (node.InnerText' replaceWith);  				break;  			case 2:  				replText = string.Empty;  				if (match.Groups [2 - 1].Index > 0) {  					replText += node.InnerText.Substring (0' match.Groups [2 - 1].Index);  				}  				replText += replaceWith;  				int firstPostGroupPos = match.Groups [2 - 1].Index + match.Groups [2 - 1].Length;  				if (node.InnerText.Length > firstPostGroupPos) {  					replText += node.InnerText.Substring (firstPostGroupPos);  				}  				break;  			default:  				throw new ApplicationException ("> 1 regex replace group not supported (" + match.Groups.Count + ") for regex expr: '" + regexPattern.ToString () + "'");  			}  		}  	}  	else {  		replText = replaceWith;  	}  	if (replText != null) {  		replacedOneOrMore = true;  		node.InnerText = replText;  		if (node is XmlAttribute) {  			XmlAttribute keyAttrib = ((XmlAttribute)node).OwnerElement.Attributes ["key"];  			if (keyAttrib == null) {  				ret.Add (((XmlAttribute)node).OwnerElement.Name + "/@" + node.Name + " set to '" + replText + "'");  			}  			else {  				ret.Add (((XmlAttribute)node).OwnerElement.Name + "[@key='" + keyAttrib.InnerText + "']/@" + node.Name + " set to '" + replText + "'");  			}  		}  		else {  			ret.Add (node.Name + " set to '" + replText);  		}  	}  }  
Magic Number,Tools.XmlConfigMerge,ConfigFileManager,C:\repos\CompassPHS_scurrynet\src\XmlConfigMerge\ConfigFileManager.cs,ReplaceXPathValues,The following statement contains a magic number: foreach (XmlNode node in nodes) {  	string replText = null;  	if (regexPattern != null) {  		Match match = regexPattern.Match (node.InnerText);  		if (match.Success) {  			//Determine if group match applies  			switch (match.Groups.Count) {  			case 1:  				replText = regexPattern.Replace (node.InnerText' replaceWith);  				break;  			case 2:  				replText = string.Empty;  				if (match.Groups [2 - 1].Index > 0) {  					replText += node.InnerText.Substring (0' match.Groups [2 - 1].Index);  				}  				replText += replaceWith;  				int firstPostGroupPos = match.Groups [2 - 1].Index + match.Groups [2 - 1].Length;  				if (node.InnerText.Length > firstPostGroupPos) {  					replText += node.InnerText.Substring (firstPostGroupPos);  				}  				break;  			default:  				throw new ApplicationException ("> 1 regex replace group not supported (" + match.Groups.Count + ") for regex expr: '" + regexPattern.ToString () + "'");  			}  		}  	}  	else {  		replText = replaceWith;  	}  	if (replText != null) {  		replacedOneOrMore = true;  		node.InnerText = replText;  		if (node is XmlAttribute) {  			XmlAttribute keyAttrib = ((XmlAttribute)node).OwnerElement.Attributes ["key"];  			if (keyAttrib == null) {  				ret.Add (((XmlAttribute)node).OwnerElement.Name + "/@" + node.Name + " set to '" + replText + "'");  			}  			else {  				ret.Add (((XmlAttribute)node).OwnerElement.Name + "[@key='" + keyAttrib.InnerText + "']/@" + node.Name + " set to '" + replText + "'");  			}  		}  		else {  			ret.Add (node.Name + " set to '" + replText);  		}  	}  }  
Magic Number,Tools.XmlConfigMerge,ConfigFileManager,C:\repos\CompassPHS_scurrynet\src\XmlConfigMerge\ConfigFileManager.cs,ReplaceXPathValues,The following statement contains a magic number: foreach (XmlNode node in nodes) {  	string replText = null;  	if (regexPattern != null) {  		Match match = regexPattern.Match (node.InnerText);  		if (match.Success) {  			//Determine if group match applies  			switch (match.Groups.Count) {  			case 1:  				replText = regexPattern.Replace (node.InnerText' replaceWith);  				break;  			case 2:  				replText = string.Empty;  				if (match.Groups [2 - 1].Index > 0) {  					replText += node.InnerText.Substring (0' match.Groups [2 - 1].Index);  				}  				replText += replaceWith;  				int firstPostGroupPos = match.Groups [2 - 1].Index + match.Groups [2 - 1].Length;  				if (node.InnerText.Length > firstPostGroupPos) {  					replText += node.InnerText.Substring (firstPostGroupPos);  				}  				break;  			default:  				throw new ApplicationException ("> 1 regex replace group not supported (" + match.Groups.Count + ") for regex expr: '" + regexPattern.ToString () + "'");  			}  		}  	}  	else {  		replText = replaceWith;  	}  	if (replText != null) {  		replacedOneOrMore = true;  		node.InnerText = replText;  		if (node is XmlAttribute) {  			XmlAttribute keyAttrib = ((XmlAttribute)node).OwnerElement.Attributes ["key"];  			if (keyAttrib == null) {  				ret.Add (((XmlAttribute)node).OwnerElement.Name + "/@" + node.Name + " set to '" + replText + "'");  			}  			else {  				ret.Add (((XmlAttribute)node).OwnerElement.Name + "[@key='" + keyAttrib.InnerText + "']/@" + node.Name + " set to '" + replText + "'");  			}  		}  		else {  			ret.Add (node.Name + " set to '" + replText);  		}  	}  }  
Magic Number,Tools.XmlConfigMerge,ConfigFileManager,C:\repos\CompassPHS_scurrynet\src\XmlConfigMerge\ConfigFileManager.cs,ReplaceXPathValues,The following statement contains a magic number: foreach (XmlNode node in nodes) {  	string replText = null;  	if (regexPattern != null) {  		Match match = regexPattern.Match (node.InnerText);  		if (match.Success) {  			//Determine if group match applies  			switch (match.Groups.Count) {  			case 1:  				replText = regexPattern.Replace (node.InnerText' replaceWith);  				break;  			case 2:  				replText = string.Empty;  				if (match.Groups [2 - 1].Index > 0) {  					replText += node.InnerText.Substring (0' match.Groups [2 - 1].Index);  				}  				replText += replaceWith;  				int firstPostGroupPos = match.Groups [2 - 1].Index + match.Groups [2 - 1].Length;  				if (node.InnerText.Length > firstPostGroupPos) {  					replText += node.InnerText.Substring (firstPostGroupPos);  				}  				break;  			default:  				throw new ApplicationException ("> 1 regex replace group not supported (" + match.Groups.Count + ") for regex expr: '" + regexPattern.ToString () + "'");  			}  		}  	}  	else {  		replText = replaceWith;  	}  	if (replText != null) {  		replacedOneOrMore = true;  		node.InnerText = replText;  		if (node is XmlAttribute) {  			XmlAttribute keyAttrib = ((XmlAttribute)node).OwnerElement.Attributes ["key"];  			if (keyAttrib == null) {  				ret.Add (((XmlAttribute)node).OwnerElement.Name + "/@" + node.Name + " set to '" + replText + "'");  			}  			else {  				ret.Add (((XmlAttribute)node).OwnerElement.Name + "[@key='" + keyAttrib.InnerText + "']/@" + node.Name + " set to '" + replText + "'");  			}  		}  		else {  			ret.Add (node.Name + " set to '" + replText);  		}  	}  }  
Magic Number,Tools.XmlConfigMerge,ConfigFileManager,C:\repos\CompassPHS_scurrynet\src\XmlConfigMerge\ConfigFileManager.cs,ReplaceXPathValues,The following statement contains a magic number: foreach (XmlNode node in nodes) {  	string replText = null;  	if (regexPattern != null) {  		Match match = regexPattern.Match (node.InnerText);  		if (match.Success) {  			//Determine if group match applies  			switch (match.Groups.Count) {  			case 1:  				replText = regexPattern.Replace (node.InnerText' replaceWith);  				break;  			case 2:  				replText = string.Empty;  				if (match.Groups [2 - 1].Index > 0) {  					replText += node.InnerText.Substring (0' match.Groups [2 - 1].Index);  				}  				replText += replaceWith;  				int firstPostGroupPos = match.Groups [2 - 1].Index + match.Groups [2 - 1].Length;  				if (node.InnerText.Length > firstPostGroupPos) {  					replText += node.InnerText.Substring (firstPostGroupPos);  				}  				break;  			default:  				throw new ApplicationException ("> 1 regex replace group not supported (" + match.Groups.Count + ") for regex expr: '" + regexPattern.ToString () + "'");  			}  		}  	}  	else {  		replText = replaceWith;  	}  	if (replText != null) {  		replacedOneOrMore = true;  		node.InnerText = replText;  		if (node is XmlAttribute) {  			XmlAttribute keyAttrib = ((XmlAttribute)node).OwnerElement.Attributes ["key"];  			if (keyAttrib == null) {  				ret.Add (((XmlAttribute)node).OwnerElement.Name + "/@" + node.Name + " set to '" + replText + "'");  			}  			else {  				ret.Add (((XmlAttribute)node).OwnerElement.Name + "[@key='" + keyAttrib.InnerText + "']/@" + node.Name + " set to '" + replText + "'");  			}  		}  		else {  			ret.Add (node.Name + " set to '" + replText);  		}  	}  }  
Magic Number,Tools.XmlConfigMerge,ConfigFileManager,C:\repos\CompassPHS_scurrynet\src\XmlConfigMerge\ConfigFileManager.cs,ReplaceXPathValues,The following statement contains a magic number: if (regexPattern != null) {  	Match match = regexPattern.Match (node.InnerText);  	if (match.Success) {  		//Determine if group match applies  		switch (match.Groups.Count) {  		case 1:  			replText = regexPattern.Replace (node.InnerText' replaceWith);  			break;  		case 2:  			replText = string.Empty;  			if (match.Groups [2 - 1].Index > 0) {  				replText += node.InnerText.Substring (0' match.Groups [2 - 1].Index);  			}  			replText += replaceWith;  			int firstPostGroupPos = match.Groups [2 - 1].Index + match.Groups [2 - 1].Length;  			if (node.InnerText.Length > firstPostGroupPos) {  				replText += node.InnerText.Substring (firstPostGroupPos);  			}  			break;  		default:  			throw new ApplicationException ("> 1 regex replace group not supported (" + match.Groups.Count + ") for regex expr: '" + regexPattern.ToString () + "'");  		}  	}  }  else {  	replText = replaceWith;  }  
Magic Number,Tools.XmlConfigMerge,ConfigFileManager,C:\repos\CompassPHS_scurrynet\src\XmlConfigMerge\ConfigFileManager.cs,ReplaceXPathValues,The following statement contains a magic number: if (regexPattern != null) {  	Match match = regexPattern.Match (node.InnerText);  	if (match.Success) {  		//Determine if group match applies  		switch (match.Groups.Count) {  		case 1:  			replText = regexPattern.Replace (node.InnerText' replaceWith);  			break;  		case 2:  			replText = string.Empty;  			if (match.Groups [2 - 1].Index > 0) {  				replText += node.InnerText.Substring (0' match.Groups [2 - 1].Index);  			}  			replText += replaceWith;  			int firstPostGroupPos = match.Groups [2 - 1].Index + match.Groups [2 - 1].Length;  			if (node.InnerText.Length > firstPostGroupPos) {  				replText += node.InnerText.Substring (firstPostGroupPos);  			}  			break;  		default:  			throw new ApplicationException ("> 1 regex replace group not supported (" + match.Groups.Count + ") for regex expr: '" + regexPattern.ToString () + "'");  		}  	}  }  else {  	replText = replaceWith;  }  
Magic Number,Tools.XmlConfigMerge,ConfigFileManager,C:\repos\CompassPHS_scurrynet\src\XmlConfigMerge\ConfigFileManager.cs,ReplaceXPathValues,The following statement contains a magic number: if (regexPattern != null) {  	Match match = regexPattern.Match (node.InnerText);  	if (match.Success) {  		//Determine if group match applies  		switch (match.Groups.Count) {  		case 1:  			replText = regexPattern.Replace (node.InnerText' replaceWith);  			break;  		case 2:  			replText = string.Empty;  			if (match.Groups [2 - 1].Index > 0) {  				replText += node.InnerText.Substring (0' match.Groups [2 - 1].Index);  			}  			replText += replaceWith;  			int firstPostGroupPos = match.Groups [2 - 1].Index + match.Groups [2 - 1].Length;  			if (node.InnerText.Length > firstPostGroupPos) {  				replText += node.InnerText.Substring (firstPostGroupPos);  			}  			break;  		default:  			throw new ApplicationException ("> 1 regex replace group not supported (" + match.Groups.Count + ") for regex expr: '" + regexPattern.ToString () + "'");  		}  	}  }  else {  	replText = replaceWith;  }  
Magic Number,Tools.XmlConfigMerge,ConfigFileManager,C:\repos\CompassPHS_scurrynet\src\XmlConfigMerge\ConfigFileManager.cs,ReplaceXPathValues,The following statement contains a magic number: if (regexPattern != null) {  	Match match = regexPattern.Match (node.InnerText);  	if (match.Success) {  		//Determine if group match applies  		switch (match.Groups.Count) {  		case 1:  			replText = regexPattern.Replace (node.InnerText' replaceWith);  			break;  		case 2:  			replText = string.Empty;  			if (match.Groups [2 - 1].Index > 0) {  				replText += node.InnerText.Substring (0' match.Groups [2 - 1].Index);  			}  			replText += replaceWith;  			int firstPostGroupPos = match.Groups [2 - 1].Index + match.Groups [2 - 1].Length;  			if (node.InnerText.Length > firstPostGroupPos) {  				replText += node.InnerText.Substring (firstPostGroupPos);  			}  			break;  		default:  			throw new ApplicationException ("> 1 regex replace group not supported (" + match.Groups.Count + ") for regex expr: '" + regexPattern.ToString () + "'");  		}  	}  }  else {  	replText = replaceWith;  }  
Magic Number,Tools.XmlConfigMerge,ConfigFileManager,C:\repos\CompassPHS_scurrynet\src\XmlConfigMerge\ConfigFileManager.cs,ReplaceXPathValues,The following statement contains a magic number: if (regexPattern != null) {  	Match match = regexPattern.Match (node.InnerText);  	if (match.Success) {  		//Determine if group match applies  		switch (match.Groups.Count) {  		case 1:  			replText = regexPattern.Replace (node.InnerText' replaceWith);  			break;  		case 2:  			replText = string.Empty;  			if (match.Groups [2 - 1].Index > 0) {  				replText += node.InnerText.Substring (0' match.Groups [2 - 1].Index);  			}  			replText += replaceWith;  			int firstPostGroupPos = match.Groups [2 - 1].Index + match.Groups [2 - 1].Length;  			if (node.InnerText.Length > firstPostGroupPos) {  				replText += node.InnerText.Substring (firstPostGroupPos);  			}  			break;  		default:  			throw new ApplicationException ("> 1 regex replace group not supported (" + match.Groups.Count + ") for regex expr: '" + regexPattern.ToString () + "'");  		}  	}  }  else {  	replText = replaceWith;  }  
Magic Number,Tools.XmlConfigMerge,ConfigFileManager,C:\repos\CompassPHS_scurrynet\src\XmlConfigMerge\ConfigFileManager.cs,ReplaceXPathValues,The following statement contains a magic number: if (match.Success) {  	//Determine if group match applies  	switch (match.Groups.Count) {  	case 1:  		replText = regexPattern.Replace (node.InnerText' replaceWith);  		break;  	case 2:  		replText = string.Empty;  		if (match.Groups [2 - 1].Index > 0) {  			replText += node.InnerText.Substring (0' match.Groups [2 - 1].Index);  		}  		replText += replaceWith;  		int firstPostGroupPos = match.Groups [2 - 1].Index + match.Groups [2 - 1].Length;  		if (node.InnerText.Length > firstPostGroupPos) {  			replText += node.InnerText.Substring (firstPostGroupPos);  		}  		break;  	default:  		throw new ApplicationException ("> 1 regex replace group not supported (" + match.Groups.Count + ") for regex expr: '" + regexPattern.ToString () + "'");  	}  }  
Magic Number,Tools.XmlConfigMerge,ConfigFileManager,C:\repos\CompassPHS_scurrynet\src\XmlConfigMerge\ConfigFileManager.cs,ReplaceXPathValues,The following statement contains a magic number: if (match.Success) {  	//Determine if group match applies  	switch (match.Groups.Count) {  	case 1:  		replText = regexPattern.Replace (node.InnerText' replaceWith);  		break;  	case 2:  		replText = string.Empty;  		if (match.Groups [2 - 1].Index > 0) {  			replText += node.InnerText.Substring (0' match.Groups [2 - 1].Index);  		}  		replText += replaceWith;  		int firstPostGroupPos = match.Groups [2 - 1].Index + match.Groups [2 - 1].Length;  		if (node.InnerText.Length > firstPostGroupPos) {  			replText += node.InnerText.Substring (firstPostGroupPos);  		}  		break;  	default:  		throw new ApplicationException ("> 1 regex replace group not supported (" + match.Groups.Count + ") for regex expr: '" + regexPattern.ToString () + "'");  	}  }  
Magic Number,Tools.XmlConfigMerge,ConfigFileManager,C:\repos\CompassPHS_scurrynet\src\XmlConfigMerge\ConfigFileManager.cs,ReplaceXPathValues,The following statement contains a magic number: if (match.Success) {  	//Determine if group match applies  	switch (match.Groups.Count) {  	case 1:  		replText = regexPattern.Replace (node.InnerText' replaceWith);  		break;  	case 2:  		replText = string.Empty;  		if (match.Groups [2 - 1].Index > 0) {  			replText += node.InnerText.Substring (0' match.Groups [2 - 1].Index);  		}  		replText += replaceWith;  		int firstPostGroupPos = match.Groups [2 - 1].Index + match.Groups [2 - 1].Length;  		if (node.InnerText.Length > firstPostGroupPos) {  			replText += node.InnerText.Substring (firstPostGroupPos);  		}  		break;  	default:  		throw new ApplicationException ("> 1 regex replace group not supported (" + match.Groups.Count + ") for regex expr: '" + regexPattern.ToString () + "'");  	}  }  
Magic Number,Tools.XmlConfigMerge,ConfigFileManager,C:\repos\CompassPHS_scurrynet\src\XmlConfigMerge\ConfigFileManager.cs,ReplaceXPathValues,The following statement contains a magic number: if (match.Success) {  	//Determine if group match applies  	switch (match.Groups.Count) {  	case 1:  		replText = regexPattern.Replace (node.InnerText' replaceWith);  		break;  	case 2:  		replText = string.Empty;  		if (match.Groups [2 - 1].Index > 0) {  			replText += node.InnerText.Substring (0' match.Groups [2 - 1].Index);  		}  		replText += replaceWith;  		int firstPostGroupPos = match.Groups [2 - 1].Index + match.Groups [2 - 1].Length;  		if (node.InnerText.Length > firstPostGroupPos) {  			replText += node.InnerText.Substring (firstPostGroupPos);  		}  		break;  	default:  		throw new ApplicationException ("> 1 regex replace group not supported (" + match.Groups.Count + ") for regex expr: '" + regexPattern.ToString () + "'");  	}  }  
Magic Number,Tools.XmlConfigMerge,ConfigFileManager,C:\repos\CompassPHS_scurrynet\src\XmlConfigMerge\ConfigFileManager.cs,ReplaceXPathValues,The following statement contains a magic number: if (match.Success) {  	//Determine if group match applies  	switch (match.Groups.Count) {  	case 1:  		replText = regexPattern.Replace (node.InnerText' replaceWith);  		break;  	case 2:  		replText = string.Empty;  		if (match.Groups [2 - 1].Index > 0) {  			replText += node.InnerText.Substring (0' match.Groups [2 - 1].Index);  		}  		replText += replaceWith;  		int firstPostGroupPos = match.Groups [2 - 1].Index + match.Groups [2 - 1].Length;  		if (node.InnerText.Length > firstPostGroupPos) {  			replText += node.InnerText.Substring (firstPostGroupPos);  		}  		break;  	default:  		throw new ApplicationException ("> 1 regex replace group not supported (" + match.Groups.Count + ") for regex expr: '" + regexPattern.ToString () + "'");  	}  }  
Magic Number,Tools.XmlConfigMerge,ConfigFileManager,C:\repos\CompassPHS_scurrynet\src\XmlConfigMerge\ConfigFileManager.cs,ReplaceXPathValues,The following statement contains a magic number: switch (match.Groups.Count) {  case 1:  	replText = regexPattern.Replace (node.InnerText' replaceWith);  	break;  case 2:  	replText = string.Empty;  	if (match.Groups [2 - 1].Index > 0) {  		replText += node.InnerText.Substring (0' match.Groups [2 - 1].Index);  	}  	replText += replaceWith;  	int firstPostGroupPos = match.Groups [2 - 1].Index + match.Groups [2 - 1].Length;  	if (node.InnerText.Length > firstPostGroupPos) {  		replText += node.InnerText.Substring (firstPostGroupPos);  	}  	break;  default:  	throw new ApplicationException ("> 1 regex replace group not supported (" + match.Groups.Count + ") for regex expr: '" + regexPattern.ToString () + "'");  }  
Magic Number,Tools.XmlConfigMerge,ConfigFileManager,C:\repos\CompassPHS_scurrynet\src\XmlConfigMerge\ConfigFileManager.cs,ReplaceXPathValues,The following statement contains a magic number: switch (match.Groups.Count) {  case 1:  	replText = regexPattern.Replace (node.InnerText' replaceWith);  	break;  case 2:  	replText = string.Empty;  	if (match.Groups [2 - 1].Index > 0) {  		replText += node.InnerText.Substring (0' match.Groups [2 - 1].Index);  	}  	replText += replaceWith;  	int firstPostGroupPos = match.Groups [2 - 1].Index + match.Groups [2 - 1].Length;  	if (node.InnerText.Length > firstPostGroupPos) {  		replText += node.InnerText.Substring (firstPostGroupPos);  	}  	break;  default:  	throw new ApplicationException ("> 1 regex replace group not supported (" + match.Groups.Count + ") for regex expr: '" + regexPattern.ToString () + "'");  }  
Magic Number,Tools.XmlConfigMerge,ConfigFileManager,C:\repos\CompassPHS_scurrynet\src\XmlConfigMerge\ConfigFileManager.cs,ReplaceXPathValues,The following statement contains a magic number: switch (match.Groups.Count) {  case 1:  	replText = regexPattern.Replace (node.InnerText' replaceWith);  	break;  case 2:  	replText = string.Empty;  	if (match.Groups [2 - 1].Index > 0) {  		replText += node.InnerText.Substring (0' match.Groups [2 - 1].Index);  	}  	replText += replaceWith;  	int firstPostGroupPos = match.Groups [2 - 1].Index + match.Groups [2 - 1].Length;  	if (node.InnerText.Length > firstPostGroupPos) {  		replText += node.InnerText.Substring (firstPostGroupPos);  	}  	break;  default:  	throw new ApplicationException ("> 1 regex replace group not supported (" + match.Groups.Count + ") for regex expr: '" + regexPattern.ToString () + "'");  }  
Magic Number,Tools.XmlConfigMerge,ConfigFileManager,C:\repos\CompassPHS_scurrynet\src\XmlConfigMerge\ConfigFileManager.cs,ReplaceXPathValues,The following statement contains a magic number: switch (match.Groups.Count) {  case 1:  	replText = regexPattern.Replace (node.InnerText' replaceWith);  	break;  case 2:  	replText = string.Empty;  	if (match.Groups [2 - 1].Index > 0) {  		replText += node.InnerText.Substring (0' match.Groups [2 - 1].Index);  	}  	replText += replaceWith;  	int firstPostGroupPos = match.Groups [2 - 1].Index + match.Groups [2 - 1].Length;  	if (node.InnerText.Length > firstPostGroupPos) {  		replText += node.InnerText.Substring (firstPostGroupPos);  	}  	break;  default:  	throw new ApplicationException ("> 1 regex replace group not supported (" + match.Groups.Count + ") for regex expr: '" + regexPattern.ToString () + "'");  }  
Magic Number,Tools.XmlConfigMerge,ConfigFileManager,C:\repos\CompassPHS_scurrynet\src\XmlConfigMerge\ConfigFileManager.cs,ReplaceXPathValues,The following statement contains a magic number: switch (match.Groups.Count) {  case 1:  	replText = regexPattern.Replace (node.InnerText' replaceWith);  	break;  case 2:  	replText = string.Empty;  	if (match.Groups [2 - 1].Index > 0) {  		replText += node.InnerText.Substring (0' match.Groups [2 - 1].Index);  	}  	replText += replaceWith;  	int firstPostGroupPos = match.Groups [2 - 1].Index + match.Groups [2 - 1].Length;  	if (node.InnerText.Length > firstPostGroupPos) {  		replText += node.InnerText.Substring (firstPostGroupPos);  	}  	break;  default:  	throw new ApplicationException ("> 1 regex replace group not supported (" + match.Groups.Count + ") for regex expr: '" + regexPattern.ToString () + "'");  }  
Magic Number,Tools.XmlConfigMerge,ConfigFileManager,C:\repos\CompassPHS_scurrynet\src\XmlConfigMerge\ConfigFileManager.cs,ReplaceXPathValues,The following statement contains a magic number: if (match.Groups [2 - 1].Index > 0) {  	replText += node.InnerText.Substring (0' match.Groups [2 - 1].Index);  }  
Magic Number,Tools.XmlConfigMerge,ConfigFileManager,C:\repos\CompassPHS_scurrynet\src\XmlConfigMerge\ConfigFileManager.cs,ReplaceXPathValues,The following statement contains a magic number: if (match.Groups [2 - 1].Index > 0) {  	replText += node.InnerText.Substring (0' match.Groups [2 - 1].Index);  }  
Magic Number,Tools.XmlConfigMerge,ConfigFileManager,C:\repos\CompassPHS_scurrynet\src\XmlConfigMerge\ConfigFileManager.cs,ReplaceXPathValues,The following statement contains a magic number: replText += node.InnerText.Substring (0' match.Groups [2 - 1].Index);  
