Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Scurry.Executor.Job.Base,Job,C:\repos\CompassPHS_scurrynet\src\Scurry.Executor.Job.Base\Job.cs,Start,Cyclomatic complexity of the method is 13
Magic Number,Scurry.Executor.Job.Base,Job,C:\repos\CompassPHS_scurrynet\src\Scurry.Executor.Job.Base\Job.cs,Start,The following statement contains a magic number: try {  	var factory = new ConnectionFactory () {  		HostName = Queue.Host  	};  	using (var connection = factory.CreateConnection ()) {  		using (var channel = connection.CreateModel ()) {  			channel.QueueDeclare (Queue.Name' true' false' false' null);  			channel.BasicQos (0' 1' false);  			var consumer = new QueueingBasicConsumer (channel);  			channel.BasicConsume (Queue.Name' false' consumer);  			while (!IsCancelled) {  				BasicDeliverEventArgs ea = null;  				consumer.Queue.Dequeue (10000' out ea);  				if (ea == null)  					continue;  				// Short circuit null processing  				var body = ea.Body;  				var message = Encoding.UTF8.GetString (body);  				try {  					if (string.IsNullOrWhiteSpace (message)) {  						throw new ArgumentException ("Message on queue is null or whitespace");  					}  					dynamic context;  					if (message.StartsWith ("{")) {  						try {  							context = JsonConvert.DeserializeObject<dynamic> (message);  						}  						catch (Exception ex) {  							throw new ArgumentException ("Message was invalid JSON"' ex);  						}  					}  					else {  						context = message;  					}  					// Only method subclasses MUST implement  					Execute (context);  					// Should we be moving this to the global space outside the inner try/catch?  					channel.BasicAck (ea.DeliveryTag' false);  				}  				catch (ArgumentException aex) {  					Log.Error (string.Format ("Invalid message for job {0}"' Name)' aex);  					// Ack the invalid message' we won't ever process it correctly  					channel.BasicAck (ea.DeliveryTag' false);  				}  				catch (Exception ex) {  					Log.Error (string.Format ("Error executing job {0}"' Name)' ex);  				}  			}  		}  		Log.Info (string.Format ("Job {0} has been shutdown"' Name));  	}  }  catch (Exception ex) {  	Log.Error (string.Format ("Error occurred while listening for job {0}"' Name)' ex);  }  
Magic Number,Scurry.Executor.Job.Base,Job,C:\repos\CompassPHS_scurrynet\src\Scurry.Executor.Job.Base\Job.cs,Start,The following statement contains a magic number: using (var connection = factory.CreateConnection ()) {  	using (var channel = connection.CreateModel ()) {  		channel.QueueDeclare (Queue.Name' true' false' false' null);  		channel.BasicQos (0' 1' false);  		var consumer = new QueueingBasicConsumer (channel);  		channel.BasicConsume (Queue.Name' false' consumer);  		while (!IsCancelled) {  			BasicDeliverEventArgs ea = null;  			consumer.Queue.Dequeue (10000' out ea);  			if (ea == null)  				continue;  			// Short circuit null processing  			var body = ea.Body;  			var message = Encoding.UTF8.GetString (body);  			try {  				if (string.IsNullOrWhiteSpace (message)) {  					throw new ArgumentException ("Message on queue is null or whitespace");  				}  				dynamic context;  				if (message.StartsWith ("{")) {  					try {  						context = JsonConvert.DeserializeObject<dynamic> (message);  					}  					catch (Exception ex) {  						throw new ArgumentException ("Message was invalid JSON"' ex);  					}  				}  				else {  					context = message;  				}  				// Only method subclasses MUST implement  				Execute (context);  				// Should we be moving this to the global space outside the inner try/catch?  				channel.BasicAck (ea.DeliveryTag' false);  			}  			catch (ArgumentException aex) {  				Log.Error (string.Format ("Invalid message for job {0}"' Name)' aex);  				// Ack the invalid message' we won't ever process it correctly  				channel.BasicAck (ea.DeliveryTag' false);  			}  			catch (Exception ex) {  				Log.Error (string.Format ("Error executing job {0}"' Name)' ex);  			}  		}  	}  	Log.Info (string.Format ("Job {0} has been shutdown"' Name));  }  
Magic Number,Scurry.Executor.Job.Base,Job,C:\repos\CompassPHS_scurrynet\src\Scurry.Executor.Job.Base\Job.cs,Start,The following statement contains a magic number: using (var channel = connection.CreateModel ()) {  	channel.QueueDeclare (Queue.Name' true' false' false' null);  	channel.BasicQos (0' 1' false);  	var consumer = new QueueingBasicConsumer (channel);  	channel.BasicConsume (Queue.Name' false' consumer);  	while (!IsCancelled) {  		BasicDeliverEventArgs ea = null;  		consumer.Queue.Dequeue (10000' out ea);  		if (ea == null)  			continue;  		// Short circuit null processing  		var body = ea.Body;  		var message = Encoding.UTF8.GetString (body);  		try {  			if (string.IsNullOrWhiteSpace (message)) {  				throw new ArgumentException ("Message on queue is null or whitespace");  			}  			dynamic context;  			if (message.StartsWith ("{")) {  				try {  					context = JsonConvert.DeserializeObject<dynamic> (message);  				}  				catch (Exception ex) {  					throw new ArgumentException ("Message was invalid JSON"' ex);  				}  			}  			else {  				context = message;  			}  			// Only method subclasses MUST implement  			Execute (context);  			// Should we be moving this to the global space outside the inner try/catch?  			channel.BasicAck (ea.DeliveryTag' false);  		}  		catch (ArgumentException aex) {  			Log.Error (string.Format ("Invalid message for job {0}"' Name)' aex);  			// Ack the invalid message' we won't ever process it correctly  			channel.BasicAck (ea.DeliveryTag' false);  		}  		catch (Exception ex) {  			Log.Error (string.Format ("Error executing job {0}"' Name)' ex);  		}  	}  }  
Magic Number,Scurry.Executor.Job.Base,Job,C:\repos\CompassPHS_scurrynet\src\Scurry.Executor.Job.Base\Job.cs,Start,The following statement contains a magic number: while (!IsCancelled) {  	BasicDeliverEventArgs ea = null;  	consumer.Queue.Dequeue (10000' out ea);  	if (ea == null)  		continue;  	// Short circuit null processing  	var body = ea.Body;  	var message = Encoding.UTF8.GetString (body);  	try {  		if (string.IsNullOrWhiteSpace (message)) {  			throw new ArgumentException ("Message on queue is null or whitespace");  		}  		dynamic context;  		if (message.StartsWith ("{")) {  			try {  				context = JsonConvert.DeserializeObject<dynamic> (message);  			}  			catch (Exception ex) {  				throw new ArgumentException ("Message was invalid JSON"' ex);  			}  		}  		else {  			context = message;  		}  		// Only method subclasses MUST implement  		Execute (context);  		// Should we be moving this to the global space outside the inner try/catch?  		channel.BasicAck (ea.DeliveryTag' false);  	}  	catch (ArgumentException aex) {  		Log.Error (string.Format ("Invalid message for job {0}"' Name)' aex);  		// Ack the invalid message' we won't ever process it correctly  		channel.BasicAck (ea.DeliveryTag' false);  	}  	catch (Exception ex) {  		Log.Error (string.Format ("Error executing job {0}"' Name)' ex);  	}  }  
Magic Number,Scurry.Executor.Job.Base,Job,C:\repos\CompassPHS_scurrynet\src\Scurry.Executor.Job.Base\Job.cs,Start,The following statement contains a magic number: consumer.Queue.Dequeue (10000' out ea);  
