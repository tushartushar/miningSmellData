Implementation smell,Namespace,Class,File,Method,Description
Long Method,NServiceBus.Serializers.XML.Test,DictionaryTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\DictionaryTests.cs,Should_deserialize_dictionaries,The method has 106 lines of code.
Long Method,NServiceBus.Serializers.XML.Test,SerializerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\SerializerTests.cs,TestInterfaces,The method has 132 lines of code.
Complex Method,NServiceBus.Core.Tests,ArgumentExceptionTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\ArgumentExceptionTests.cs,WriteAllPublicMembersWithNoArgumentChecking,Cyclomatic complexity of the method is 21
Complex Method,NServiceBus.Core.Tests,VerificationVisitor,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\DocumentationTests.cs,AddIfEmpty,Cyclomatic complexity of the method is 16
Complex Method,NServiceBus.Core.Tests,VerificationVisitor,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\DocumentationTests.cs,SetMember,Cyclomatic complexity of the method is 8
Complex Method,NServiceBus.Core.Tests.AssemblyScanner,DynamicAssembly,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\AssemblyScanner\AssemblyScannerTests.cs,DynamicAssembly,Cyclomatic complexity of the method is 9
Long Parameter List,NServiceBus.Core.Tests.AssemblyScanner,DynamicAssembly,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\AssemblyScanner\AssemblyScannerTests.cs,DynamicAssembly,The method has 7 parameters. Parameters: nameWithoutExtension' references' version' fakeIdentity' content' referenceTheCore' executable
Long Parameter List,NServiceBus.Core.Tests.Routing,UnicastSendRouterTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Routing\Routers\UnicastSendRouterTests.cs,CreateRouter,The method has 5 parameters. Parameters: instanceSpecificQueue' isSendOnly' routingTable' instances' policy
Long Parameter List,NServiceBus.Unicast.Tests,MessageOperationsTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Unicast\MessageOperationsTests.cs,CreateMessageOperations,The method has 5 parameters. Parameters: publishPipeline' sendPipeline' replyPipeline' subscribePipeline' subscribeContext
Long Identifier,NServiceBus.Core.Tests.Timeout.TimeoutManager,ExpiredTimeoutsPollerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\DelayedDelivery\TimeoutManager\ExpiredTimeoutsPollerTests.cs,,The length of the parameter HalfOfDefaultInMemoryPersisterSleep is 35.
Long Identifier,NServiceBus.Core.Tests.Pipeline,RegisterStepTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Pipeline\RegisterStepTests.cs,Replace_WhenReplacementProvidedFactory_ShouldBuildReplacementFromFactory,The length of the parameter replacementBehaviorFactoryCalled is 32.
Long Identifier,NServiceBus.Core.Tests.Routing,RoutingSettingsTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Routing\RoutingSettingsTests.cs,,The length of the parameter expectedExceptionMessageForWrongEndpointName is 44.
Long Identifier,NServiceBus.Core.Tests.Routing.MessageDrivenSubscriptions,RoutingSettingsTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Routing\MessageDrivenSubscriptions\MessageDrivenSubscriptionsConfigExtensionsTests.cs,WhenPassingEndpointNameForPublisher_UsingAssembly_ShouldAddAllEventsToPublishers,The length of the parameter publishersForEventWithNamespace is 31.
Long Identifier,NServiceBus.Core.Tests.Routing.MessageDrivenSubscriptions,RoutingSettingsTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Routing\MessageDrivenSubscriptions\MessageDrivenSubscriptionsConfigExtensionsTests.cs,WhenPassingEndpointNameForPublisher_UsingAssemblyAndNamespace_ShouldAddEventsWithNamespaceToPublishers,The length of the parameter publishersForEventWithNamespace is 31.
Long Identifier,NServiceBus.Core.Tests.Routing.MessageDrivenSubscriptions,RoutingSettingsTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Routing\MessageDrivenSubscriptions\MessageDrivenSubscriptionsConfigExtensionsTests.cs,,The length of the parameter expectedExceptionMessageForWrongEndpointName is 44.
Long Identifier,NServiceBus.Core.Tests.Sagas.TypeBasedSagas,MyNonGenericSaga,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Sagas\SagaMetadataCreationTests.cs,ConfigureHowToFindSaga,The length of the parameter sagaMessageFindingConfiguration is 31.
Long Statement,NServiceBus.Core.Tests.API,APIApprovals,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\API\APIApprovals.cs,ApproveNServiceBus,The length of the statement  "            var publicApi = ApiGenerator.GeneratePublicApi(typeof(Endpoint).Assembly' excludeAttributes: new[] { "Particular.Licensing.ReleaseDateAttribute" }); " is 148.
Long Statement,NServiceBus.Core.Tests,When_using_a_greedy_convention_that_overlaps_with_NServiceBus,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\ConventionsTests.cs,IsMessageType_should_return_true_for_matching_type,The length of the statement  "                conventions.DefineMessageTypeConvention(t => t.Assembly == typeof(Conventions).Assembly || t == typeof(MyConventionMessage)); " is 125.
Long Statement,NServiceBus.Core.Tests,DateTimeExtensionsTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\DateTimeExtensionsTests.cs,When_converting_string_should_be_accurate_to_microseconds,The length of the statement  "            var date = DateTime.ParseExact(dateString' "yyyy-MM-dd HH:mm:ss:ffffff Z"' CultureInfo.InvariantCulture' DateTimeStyles.AdjustToUniversal); " is 139.
Long Statement,NServiceBus.Core.Tests,DocumentationTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\DocumentationTests.cs,EnsureNoDocumentationIsEmpty,The length of the statement  "                throw new Exception($"Some members have empty documentation or have a sentence that does not end with a period:{Environment.NewLine}{errors}"); " is 143.
Long Statement,NServiceBus.Core.Tests,VerificationVisitor,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\DocumentationTests.cs,AddIfEmpty,The length of the statement  "                if (declaringType != null && declaringType.FullName.Contains("JetBrains") || declaringType.FullName.Contains("FastExpressionCompiler")) " is 135.
Long Statement,NServiceBus.Core.Tests,EndpointConfigurationTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\EndpointConfigurationTests.cs,When_creating_configuration_with_empty_endpoint_name_should_throw,The length of the statement  "            Assert.That(exception.Message' Does.Contain("Endpoint name must not be empty").And.Contain("Parameter name: endpointName")); " is 124.
Long Statement,NServiceBus.Core.Tests,EndpointConfigurationTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\EndpointConfigurationTests.cs,When_creating_configuration_with_invalid_character_in_endpoint_name_should_throw,The length of the statement  "            Assert.That(exception.Message' Does.Contain("Endpoint name must not contain an '@' character.").And.Contain("Parameter name: endpointName")); " is 141.
Long Statement,NServiceBus.Core.Tests,ExceptionTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\ExceptionTests.cs,VerifyExceptionConventions,The length of the statement  "                var constructor = exceptionType.GetConstructor(BindingFlags.NonPublic | BindingFlags.CreateInstance | BindingFlags.Instance' null' new[] " is 136.
Long Statement,NServiceBus.Core.Tests,ExceptionTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\ExceptionTests.cs,VerifyExceptionConventions,The length of the statement  "                Assert.IsNotNull(constructor' string.Format("Exception '{0}' should implement 'protected {0}(SerializationInfo info' StreamingContext context){{}}'"' exceptionType.Name)); " is 171.
Long Statement,NServiceBus.Core.Tests,ExceptionTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\ExceptionTests.cs,VerifyExceptionConventions,The length of the statement  "                    Assert.IsTrue(getObjectDataMethod.DeclaringType.Name != "Exception"' $"Exception '{exceptionType.Name}' has properties and as such should override 'GetObjectData'"); " is 165.
Long Statement,NServiceBus.Core.Tests,StandardsTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\StandardsTests.cs,VerifyFeatureNaming,The length of the statement  "                Assert.AreEqual("NServiceBus.Features"' featureType.Namespace' "Features should be in the NServiceBus.Features namespace. " + featureType.FullName); " is 148.
Long Statement,NServiceBus.Core.Tests,StandardsTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\StandardsTests.cs,VerifyFeatureNaming,The length of the statement  "                Assert.IsFalse(featureType.Name.EndsWith("Feature")' "Features should not be suffixed with 'Feature'. " + featureType.FullName); " is 128.
Long Statement,NServiceBus.Core.Tests,StandardsTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\StandardsTests.cs,VerifyFeatureNaming,The length of the statement  "                    var constructorInfo = featureType.GetConstructor(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public' null' new Type[] " is 135.
Long Statement,NServiceBus.Core.Tests,StandardsTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\StandardsTests.cs,NonPublicShouldHaveSimpleNamespace,The length of the statement  "                Assert.IsEmpty(types' $"Non public types should have 'NServiceBus' namespace{Environment.NewLine}{string.Join(Environment.NewLine' types.Select(x => x.FullName))}"); " is 165.
Long Statement,NServiceBus.Core.Tests,StandardsTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\StandardsTests.cs,VerifyBehaviorNaming,The length of the statement  "                Assert.AreEqual("NServiceBus"' featureType.Namespace' "Behaviors should be in the NServiceBus namespace since it reduces the 'wall of text' problem when looking at pipeline stack traces. " + featureType.FullName); " is 213.
Long Statement,NServiceBus.Core.Tests,StandardsTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\StandardsTests.cs,VerifyBehaviorNaming,The length of the statement  "                Assert.IsTrue(featureType.Name.EndsWith("Terminator") || featureType.Name.EndsWith("Behavior") || featureType.Name.EndsWith("Connector")' "Behaviors should be suffixed with 'Behavior' or 'Connector'. " + featureType.FullName); " is 226.
Long Statement,NServiceBus.Core.Tests,StandardsTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\StandardsTests.cs,GetBehaviors,The length of the statement  "                .Where(type => type.GetInterfaces().Any(face => face.Name == typeof(IBehavior).Name) && !type.IsAbstract && !type.IsGenericType); " is 129.
Long Statement,NServiceBus.Core.Tests,StructConventionsTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\StructConventionsTests.cs,ApproveStructsWhichDontFollowStructGuidelines,The length of the statement  "            approvalBuilder.AppendLine(@"-------------------------------------------------- REMEMBER -------------------------------------------------- " is 139.
Long Statement,NServiceBus.Core.Tests,StructConventionsTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\StructConventionsTests.cs,ApproveStructsWhichDontFollowStructGuidelines,The length of the statement  "CONSIDER defining a struct instead of a class if instances of the type are small and commonly short-lived or are commonly embedded in other objects. " is 148.
Long Statement,NServiceBus.Core.Tests,StructConventionsTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\StructConventionsTests.cs,ApproveStructsWhichDontFollowStructGuidelines,The length of the statement  "                if (!type.IsValueType || type.IsEnum || type.IsSpecialName || type.Namespace == null || !type.Namespace.StartsWith("NServiceBus") || type.FullName.Contains("__")) " is 162.
Long Statement,NServiceBus.Core.Tests,StructConventionsTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\StructConventionsTests.cs,InspectWhetherStructContainsReferenceTypes,The length of the statement  "            var mutabilityRules = new List<string> { "   - The following fields are reference types' which are potentially mutable:" }; " is 123.
Long Statement,NServiceBus.Core.Tests,StructConventionsTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\StructConventionsTests.cs,InspectWhetherStructContainsWritableProperties,The length of the statement  "            var mutabilityRules = new List<string> { "   - The following properties can be written to' so the type is not immutable:" }; " is 124.
Long Statement,NServiceBus.Core.Tests.AssemblyScanner,AssemblyScannerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\AssemblyScanner\AssemblyScannerTests.cs,Should_not_include_child_type_if_only_handler_for_base_exists,The length of the statement  "            //Note this this is not the expected behavior. The assert will be changed to Assert.True and the test renamed as part of https://github.com/Particular/NServiceBus/issues/4634 " is 174.
Long Statement,NServiceBus.Core.Tests.AssemblyScanner,When_configuring_assembly_scanning,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\AssemblyScanner\When_configuring_assembly_scanning.cs,Should_provide_reflection_backdoor_via_endpoint_config,The length of the statement  "            // * docs - https://github.com/Particular/docs.particular.net/blob/master/Snippets/Core/Core_7/Headers/Writers/EndpointConfigurationExtensions.cs " is 145.
Long Statement,NServiceBus.Core.Tests.AssemblyScanner,When_configuring_assembly_scanning,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\AssemblyScanner\When_configuring_assembly_scanning.cs,Should_provide_reflection_backdoor_via_endpoint_config,The length of the statement  "            // * metrics tests - https://github.com/Particular/NServiceBus.Metrics.PerformanceCounters/blob/master/src/NServiceBus.Metrics.PerformanceCounters.Tests/EndpointConfigurationExtensions.cs " is 187.
Long Statement,NServiceBus.Core.Tests.AssemblyScanner,When_configuring_assembly_scanning,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\AssemblyScanner\When_configuring_assembly_scanning.cs,Should_provide_reflection_backdoor_via_endpoint_config,The length of the statement  "            Assert.NotNull(typeof(EndpointConfiguration).GetMethod("TypesToScanInternal"' BindingFlags.NonPublic | BindingFlags.Instance)); " is 127.
Long Statement,NServiceBus.Core.Tests.AssemblyScanner,When_directory_with_no_reference_dlls_is_scanned,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\AssemblyScanner\When_directory_with_no_reference_dlls_is_scanned.cs,assemblies_without_nsb_reference_are_skipped,The length of the statement  "            var assemblyToScan = Assembly.LoadFrom(Path.Combine(TestContext.CurrentContext.TestDirectory' "TestDlls"' "dotNet.dll")); " is 121.
Long Statement,NServiceBus.Core.Tests.AssemblyScanner,When_scanning_directory_with_nested_directories,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\AssemblyScanner\When_scanning_directory_with_nested_directories.cs,Should_not_scan_nested_directories_by_default,The length of the statement  "            Assert.False(foundTypeFromDerivedAssembly' "Was expected not to scan nested assemblies' but 'Derived.dll' was scanned."); " is 121.
Long Statement,NServiceBus.Core.Tests.AssemblyScanner,When_scanning_directory_with_nested_directories,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\AssemblyScanner\When_scanning_directory_with_nested_directories.cs,Should_scan_nested_directories_if_requested,The length of the statement  "            Assert.True(foundTypeFromDerivedAssembly' "Was expected to scan nested assemblies' but 'Derived.dll' was not scanned."); " is 120.
Long Statement,NServiceBus.Core.Tests.Causation,AttachCausationHeadersBehaviorTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Causation\AttachCausationHeadersBehaviorTests.cs,When_user_defined_conversation_id_would_overwrite_incoming_conversation_id_should_throw,The length of the statement  "            Assert.AreEqual($"Cannot set the {Headers.ConversationId} header to '{userDefinedConversationId}' as it cannot override the incoming header value ('{incomingConversationId}')."' exception.Message); " is 197.
Long Statement,NServiceBus.Core.Tests.Config,When_using_initialization_with_non_default_ctor,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Config\When_using_initialization.cs,Should_throw_meaningful_exception,The length of the statement  "            var expected = $"Unable to create the type '{nameof(FeatureWithInitialization)}'. Types implementing '{nameof(INeedInitialization)}' must have a public parameterless (default) constructor."; " is 190.
Long Statement,NServiceBus.Core.Tests.DataBus,When_applying_the_databus_message_mutator_to_incoming_messages,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\DataBus\When_applying_the_databus_message_mutator_to_incoming_messages.cs,Incoming_databus_properties_should_be_hydrated,The length of the statement  "            var message = new LogicalMessage(new MessageMetadata(typeof(MessageWithDataBusProperty))' new MessageWithDataBusProperty " is 120.
Long Statement,NServiceBus.Core.Tests.DataBus,When_applying_the_databus_message_mutator_to_null_properties,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\DataBus\When_applying_the_databus_message_mutator_to_null_properties.cs,Should_not_blow_up,The length of the statement  "            context.Message = new OutgoingLogicalMessage(typeof(MessageWithNullDataBusProperty)' new MessageWithNullDataBusProperty()); " is 123.
Long Statement,NServiceBus.Core.Tests.Timeout,RouteDeferredMessageToTimeoutManagerBehaviorTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\DelayedDelivery\RouteDeferredMessageToTimeoutManagerBehaviorTests.cs,Supports_only_unicast_routing,The length of the statement  "            Assert.That(async () => await behavior.Invoke(context' ctx => TaskEx.CompletedTask)' Throws.InstanceOf<Exception>().And.Message.Contains("Delayed delivery using the Timeout Manager is only supported for messages with unicast routing")); " is 236.
Long Statement,NServiceBus.Core.Tests.Timeout,RouteDeferredMessageToTimeoutManagerBehaviorTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\DelayedDelivery\RouteDeferredMessageToTimeoutManagerBehaviorTests.cs,Cannot_be_combined_with_time_to_be_received,The length of the statement  "            var context = CreateContext(new UnicastRoutingStrategy("target")' new DelayDeliveryWith(delay)' new DiscardIfNotReceivedBefore(TimeSpan.FromSeconds(30))); " is 154.
Long Statement,NServiceBus.Core.Tests.Timeout,RouteDeferredMessageToTimeoutManagerBehaviorTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\DelayedDelivery\RouteDeferredMessageToTimeoutManagerBehaviorTests.cs,Cannot_be_combined_with_time_to_be_received,The length of the statement  "            Assert.That(async () => await behavior.Invoke(context' ctx => TaskEx.CompletedTask)' Throws.InstanceOf<Exception>().And.Message.Contains("Postponed delivery of messages with TimeToBeReceived set is not supported. Remove the TimeToBeReceived attribute to postpone messages of type 'TestMessage'.")); " is 298.
Long Statement,NServiceBus.Core.Tests.Timeout,FakeMessageDispatcher,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Timeout\FakeMessageDispatcher.cs,Dispatch,The length of the statement  "            MessagesSent += outgoingMessages.MulticastTransportOperations.Count + outgoingMessages.UnicastTransportOperations.Count; " is 120.
Long Statement,NServiceBus.Core.Tests.Timeout.TimeoutManager,DispatchTimeoutBehaviorTest,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\DelayedDelivery\TimeoutManager\DispatchTimeoutBehaviorTest.cs,Invoke_when_message_dispatched_should_remove_timeout_from_timeout_storage,The length of the statement  "            var behavior = new DispatchTimeoutBehavior(messageDispatcher' timeoutPersister' TransportTransactionMode.TransactionScope); " is 123.
Long Statement,NServiceBus.Core.Tests.Timeout.TimeoutManager,DispatchTimeoutBehaviorTest,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\DelayedDelivery\TimeoutManager\DispatchTimeoutBehaviorTest.cs,Invoke_when_timeout_not_in_storage_should_process_successfully,The length of the statement  "            var behavior = new DispatchTimeoutBehavior(messageDispatcher' timeoutPersister' TransportTransactionMode.TransactionScope); " is 123.
Long Statement,NServiceBus.Core.Tests.Timeout.TimeoutManager,DispatchTimeoutBehaviorTest,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\DelayedDelivery\TimeoutManager\DispatchTimeoutBehaviorTest.cs,Invoke_when_dispatching_message_fails_should_keep_timeout_in_storage,The length of the statement  "            var behavior = new DispatchTimeoutBehavior(messageDispatcher' timeoutPersister' TransportTransactionMode.TransactionScope); " is 123.
Long Statement,NServiceBus.Core.Tests.Timeout.TimeoutManager,DispatchTimeoutBehaviorTest,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\DelayedDelivery\TimeoutManager\DispatchTimeoutBehaviorTest.cs,Invoke_when_removing_timeout_fails_should_throw_exception,The length of the statement  "            var behavior = new DispatchTimeoutBehavior(messageDispatcher' timeoutPersister' TransportTransactionMode.TransactionScope); " is 123.
Long Statement,NServiceBus.Core.Tests.Timeout.TimeoutManager,DispatchTimeoutBehaviorTest,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\DelayedDelivery\TimeoutManager\DispatchTimeoutBehaviorTest.cs,Invoke_when_removing_timeout_fails_should_throw_exception,The length of the statement  "            Assert.That(async () => await behavior.Invoke(CreateContext(Guid.NewGuid().ToString()))' Throws.InstanceOf<Exception>()); " is 121.
Long Statement,NServiceBus.Core.Tests.Timeout.TimeoutManager,DispatchTimeoutBehaviorTest,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\DelayedDelivery\TimeoutManager\DispatchTimeoutBehaviorTest.cs,Invoke_when_using_dtc_should_enlist_dispatch_in_transaction,The length of the statement  "            var behavior = new DispatchTimeoutBehavior(messageDispatcher' timeoutPersister' TransportTransactionMode.TransactionScope); " is 123.
Long Statement,NServiceBus.Core.Tests.Timeout.TimeoutManager,DispatchTimeoutBehaviorTest,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\DelayedDelivery\TimeoutManager\DispatchTimeoutBehaviorTest.cs,Invoke_should_pass_transport_transaction_from_message_context,The length of the statement  "            var behavior = new DispatchTimeoutBehavior(messageDispatcher' timeoutPersister' TransportTransactionMode.TransactionScope); " is 123.
Long Statement,NServiceBus.Core.Tests.Timeout.TimeoutManager,DispatchTimeoutBehaviorTest,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\DelayedDelivery\TimeoutManager\DispatchTimeoutBehaviorTest.cs,Invoke_should_pass_transport_transaction_from_message_context,The length of the statement  "            Assert.AreSame(context.TransportTransaction' messageDispatcher.TransportTransactionUsed' "Wrong transport transaction passed to the dispatcher"); " is 145.
Long Statement,NServiceBus.Core.Tests.Timeout.TimeoutManager,DispatchTimeoutBehaviorTest,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\DelayedDelivery\TimeoutManager\DispatchTimeoutBehaviorTest.cs,CreateContext,The length of the statement  "            return new MessageContext(messageId' headers' new byte[0]' new TransportTransaction()' new CancellationTokenSource()' new ContextBag()); " is 136.
Long Statement,NServiceBus.Testing.Tests.Fakes,TestableContextChecker,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Fakes\TestableContextChecker.cs,ShouldProvideTestableImplementationForAllBehaviorContexts,The length of the statement  "                if (!testingAssembly.DefinedTypes.Any(t => t.Name == testableImplementationName && behaviorContextInterface.IsAssignableFrom(t))) " is 129.
Long Statement,NServiceBus.Testing.Tests.Fakes,TestableContextChecker,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Fakes\TestableContextChecker.cs,ShouldProvideTestableImplementationForAllBehaviorContexts,The length of the statement  "                    Assert.Fail($"Found no testable implementation for {behaviorContextInterface.FullName}. Expecting an implementation named {testableImplementationName}."); " is 154.
Long Statement,NServiceBus.Core.Tests.Licensing,LicenseManagerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Licensing\LicenseManagerTests.cs,WhenSubscriptionLicenseExpired,The length of the statement  "            Assert.AreEqual("Platform license expired. To continue using the Particular Service Platform' please extend your license by visiting http://go.particular.net/license-expired"' logger.Logs[0].message); " is 200.
Long Statement,NServiceBus.Core.Tests.Licensing,LicenseManagerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Licensing\LicenseManagerTests.cs,WhenUpgradeProtectionExpiredForThisRelease,The length of the statement  "            Assert.AreEqual("Upgrade protection expired. In order for us to continue to provide you with support and new versions of the Particular Service Platform' please extend your upgrade protection by visiting http://go.particular.net/upgrade-protection-expired"' logger.Logs[0].message); " is 282.
Long Statement,NServiceBus.Core.Tests.Licensing,LicenseManagerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Licensing\LicenseManagerTests.cs,WhenTrialLicenseExpired,The length of the statement  "            Assert.AreEqual("Trial license expired. To continue using the Particular Service Platform' please extend your trial or purchase a license by visiting http://go.particular.net/trial-expired"' logger.Logs[0].message); " is 215.
Long Statement,NServiceBus.Core.Tests.Licensing,LicenseManagerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Licensing\LicenseManagerTests.cs,WhenUpgradeProtectionExpiredForFutureVersions,The length of the statement  "            Assert.AreEqual("Upgrade protection expired. In order for us to continue to provide you with support and new versions of the Particular Service Platform' please extend your upgrade protection by visiting http://go.particular.net/upgrade-protection-expired"' logger.Logs[0].message); " is 282.
Long Statement,NServiceBus.Core.Tests.Logging,DefaultFactoryTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Logging\DefaultFactoryTests.cs,When_directory_is_bad_should_throw,The length of the statement  "            var nonExistingDirectoryException = Assert.Throws<DirectoryNotFoundException>(() => defaultFactory.Directory("baddir")); " is 120.
Long Statement,NServiceBus.Core.Tests.Logging,RollingLoggerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Logging\RollingLoggerTests.cs,When_file_already_exists_that_file_is_written_to,The length of the statement  "                Assert.AreEqual($"Foo{Environment.NewLine}Bar{Environment.NewLine}"' NonLockingFileReader.ReadAllTextWithoutLocking(files2.First())); " is 133.
Long Statement,NServiceBus.Core.Tests.Logging,RollingLoggerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Logging\RollingLoggerTests.cs,When_multiple_lines_are_written_lines_appears_in_file,The length of the statement  "                Assert.AreEqual($"Foo{Environment.NewLine}Bar{Environment.NewLine}"' NonLockingFileReader.ReadAllTextWithoutLocking(singleFile)); " is 129.
Long Statement,NServiceBus.Core.Tests.Logging,RollingLoggerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Logging\RollingLoggerTests.cs,When_new_write_causes_overlap_of_file_size_line_is_written_to_current_file,The length of the statement  "                Assert.AreEqual($"Foo{Environment.NewLine}Some long text{Environment.NewLine}"' NonLockingFileReader.ReadAllTextWithoutLocking(singleFile)); " is 140.
Long Statement,MessageMapperTests,MessageMapperTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\MessageMapper\MessageMapperTests.cs,Should_fail_for_interface_message_with_illegal_interface_property,The length of the statement  "            var ex = Assert.Throws<Exception>(() => mapper.Initialize(new[] { typeof(InterfaceMessageWithIllegalInterfaceProperty) })); " is 123.
Long Statement,MessageMapperTests,MessageMapperTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\MessageMapper\MessageMapperTests.cs,Should_fail_for_interface_message_with_illegal_interface_property,The length of the statement  "            StringAssert.Contains($"Cannot generate a concrete implementation for '{typeof(IIllegalProperty).FullName}' because it contains methods. Ensure that all interfaces used as messages do not contain methods."' ex.Message); " is 219.
Long Statement,MessageMapperTests,MessageMapperTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\MessageMapper\MessageMapperTests.cs,Should_fail_for_non_public_interface_message,The length of the statement  "            StringAssert.Contains($"Cannot generate a concrete implementation for '{typeof(IPrivateInterfaceMessage).FullName}' because it is not public. Ensure that all interfaces used as messages are public."' ex.Message); " is 212.
Long Statement,MessageMapperTests,When_mapping_interfaces,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\MessageMapper\When_mapping_interfaces.cs,Attributes_on_properties_should_be_mapped,The length of the statement  "            Assert.IsTrue(PropertyContainsAttribute("SomeProperty"'typeof(SomeAttribute)'mapper.CreateInstance(typeof(InterfaceWithPropertiesAndAttributes)))); " is 147.
Long Statement,MessageMapperTests,When_mapping_interfaces,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\MessageMapper\When_mapping_interfaces.cs,Attributes_on_properties_should_be_mapped,The length of the statement  "            Assert.IsFalse(PropertyContainsAttribute("SomeOtherProperty"' typeof(SomeAttribute)' mapper.CreateInstance(typeof(InterfaceWithPropertiesAndAttributes)))); " is 155.
Long Statement,MessageMapperTests,When_mapping_interfaces,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\MessageMapper\When_mapping_interfaces.cs,Accept_Attributes_with_no_default_ctor_as_long_as_the_parameter_in_constructor_has_the_same_name_as_the_property,The length of the statement  "            var attributes = instance.GetType().GetProperty("SomeProperty").GetCustomAttributes(typeof(CustomAttributeWithNoDefaultConstructor)'true); " is 138.
Long Statement,MessageMapperTests,When_mapping_interfaces,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\MessageMapper\When_mapping_interfaces.cs,Accept_Attributes_with_no_default_ctor_while_ctor_parameters_are_different_than_properties_of_custom_attribute,The length of the statement  "            var instance = mapper.CreateInstance(typeof(InterfaceWithCustomAttributeThatHasNoDefaultConstructorAndNoMatchingParameters)); " is 125.
Long Statement,MessageMapperTests,When_mapping_interfaces,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\MessageMapper\When_mapping_interfaces.cs,Accept_Attributes_with_no_default_ctor_while_ctor_parameters_are_different_than_properties_of_custom_attribute,The length of the statement  "            var attributes = instance.GetType().GetProperty("SomeProperty").GetCustomAttributes(typeof(CustomAttributeWithNoDefaultConstructorAndNoMatchingParameters)' true); " is 162.
Long Statement,MessageMapperTests,When_mapping_interfaces,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\MessageMapper\When_mapping_interfaces.cs,Generated_type_should_preserve_namespace_to_make_it_easier_for_users_to_define_custom_conventions,The length of the statement  "            Assert.AreEqual(typeof(InterfaceToGenerate).Namespace' mapper.CreateInstance(typeof(InterfaceToGenerate)).GetType().Namespace); " is 127.
Long Statement,MessageMapperTests,When_mapping_interfaces,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\MessageMapper\When_mapping_interfaces.cs,Accept_attributes_with_value_attribute,The length of the statement  "            var attributes = instance.GetType().GetProperty("EventId").GetCustomAttributes(typeof(CustomAttributeWithValueProperties)' true); " is 129.
Long Statement,NServiceBus.Core.Tests.MessageMutators.MutateInstanceMessage,MutateIncomingMessageBehaviorTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\MessageMutators\MutateInstanceMessage\MutateIncomingMessageBehaviorTests.cs,Should_throw_friendly_exception_when_IMutateIncomingMessages_MutateIncoming_returns_null,The length of the statement  "            Assert.That(async () => await behavior.Invoke(context' ctx => TaskEx.CompletedTask)' Throws.Exception.With.Message.EqualTo("Return a Task or mark the method as async.")); " is 170.
Long Statement,NServiceBus.Core.Tests.MessageMutators.MutateInstanceMessage,MutateOutgoingMessageBehaviorTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\MessageMutators\MutateInstanceMessage\MutateOutgoingMessageBehaviorTests.cs,Should_throw_friendly_exception_when_IMutateOutgoingMessages_MutateOutgoing_returns_null,The length of the statement  "            Assert.That(async () => await behavior.Invoke(context' ctx => TaskEx.CompletedTask)' Throws.Exception.With.Message.EqualTo("Return a Task or mark the method as async.")); " is 170.
Long Statement,NServiceBus.Core.Tests.MessageMutators.MutateTransportMessage,MutateIncomingTransportMessageBehaviorTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\MessageMutators\MutateTransportMessage\MutateIncomingTransportMessageBehaviorTests.cs,Should_invoke_all_explicit_mutators,The length of the statement  "            var behavior = new MutateIncomingTransportMessageBehavior(new HashSet<IMutateIncomingTransportMessages> { mutator' otherMutator }); " is 131.
Long Statement,NServiceBus.Core.Tests.MessageMutators.MutateTransportMessage,MutateIncomingTransportMessageBehaviorTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\MessageMutators\MutateTransportMessage\MutateIncomingTransportMessageBehaviorTests.cs,Should_invoke_both_explicit_and_container_provided_mutators,The length of the statement  "            var behavior = new MutateIncomingTransportMessageBehavior(new HashSet<IMutateIncomingTransportMessages> { explicitMutator }); " is 125.
Long Statement,NServiceBus.Core.Tests.MessageMutators.MutateTransportMessage,MutateIncomingTransportMessageBehaviorTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\MessageMutators\MutateTransportMessage\MutateIncomingTransportMessageBehaviorTests.cs,Should_throw_friendly_exception_when_IMutateIncomingTransportMessages_MutateIncoming_returns_null,The length of the statement  "            Assert.That(async () => await behavior.Invoke(context' ctx => TaskEx.CompletedTask)' Throws.Exception.With.Message.EqualTo("Return a Task or mark the method as async.")); " is 170.
Long Statement,NServiceBus.Core.Tests.MessageMutators.MutateTransportMessage,MutateOutgoingTransportMessageBehaviorTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\MessageMutators\MutateTransportMessage\MutateOutgoingTransportMessageBehaviorTests.cs,Should_invoke_all_explicit_mutators,The length of the statement  "            var behavior = new MutateOutgoingTransportMessageBehavior(new HashSet<IMutateOutgoingTransportMessages> { mutator' otherMutator }); " is 131.
Long Statement,NServiceBus.Core.Tests.MessageMutators.MutateTransportMessage,MutateOutgoingTransportMessageBehaviorTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\MessageMutators\MutateTransportMessage\MutateOutgoingTransportMessageBehaviorTests.cs,Should_invoke_both_explicit_and_container_provided_mutators,The length of the statement  "            var behavior = new MutateOutgoingTransportMessageBehavior(new HashSet<IMutateOutgoingTransportMessages> { explicitMutator }); " is 125.
Long Statement,NServiceBus.Core.Tests.MessageMutators.MutateTransportMessage,MutateOutgoingTransportMessageBehaviorTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\MessageMutators\MutateTransportMessage\MutateOutgoingTransportMessageBehaviorTests.cs,Should_throw_friendly_exception_when_IMutateOutgoingTransportMessages_MutateOutgoing_returns_null,The length of the statement  "            physicalContext.Builder.Register<IMutateOutgoingTransportMessages>(() => new MutateOutgoingTransportMessagesReturnsNull()); " is 123.
Long Statement,NServiceBus.Core.Tests.MessageMutators.MutateTransportMessage,MutateOutgoingTransportMessageBehaviorTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\MessageMutators\MutateTransportMessage\MutateOutgoingTransportMessageBehaviorTests.cs,Should_throw_friendly_exception_when_IMutateOutgoingTransportMessages_MutateOutgoing_returns_null,The length of the statement  "            Assert.That(async () => await behavior.Invoke(physicalContext' ctx => TaskEx.CompletedTask)' Throws.Exception.With.Message.EqualTo("Return a Task or mark the method as async.")); " is 178.
Long Statement,NServiceBus.Core.Tests.MessageMutators,MutatorRegistrationExtensionsTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\MessageMutators\MutatorRegistrationExtensionsTests.cs,Should_throw_ArgumentException_when_registering_non_mutator_type,The length of the statement  "                "The given instance is not a valid message mutator. Implement one of the following mutator interfaces: NServiceBus.MessageMutator.IMutateIncomingMessages' NServiceBus.MessageMutator.IMutateIncomingTransportMessages' NServiceBus.MessageMutator.IMutateOutgoingMessages or NServiceBus.MessageMutator.IMutateOutgoingTransportMessages"' " is 331.
Long Statement,NServiceBus.Core.Tests.Performance.TimeToBeReceived,TimeToBeReceivedAttributeTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Performance\TimeToBeReceived\TimeToBeReceivedAttributeTests.cs,Should_throw_when_discard_before_received_not_supported_when_initialized,The length of the statement  "            }' TimeToBeReceivedMappings.DefaultConvention' doesTransportSupportDiscardIfNotReceivedBefore: false)' Throws.Exception.Message.StartWith("Messages with TimeToBeReceived found but the selected transport does not support this type of restriction")); " is 248.
Long Statement,NServiceBus.Core.Tests.Performance.TimeToBeReceived,TimeToBeReceivedAttributeTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Performance\TimeToBeReceived\TimeToBeReceivedAttributeTests.cs,Should_throw_when_discard_before_received_not_supported_when_tryget,The length of the statement  "            }' Throws.Exception.Message.StartWith("Messages with TimeToBeReceived found but the selected transport does not support this type of restriction")); " is 148.
Long Statement,NServiceBus.SagaPersisters.InMemory.Tests,When_completing_a_saga_with_the_InMemory_persister,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Persistence\InMemory\When_completing_a_saga_with_the_InMemory_persister.cs,Should_delete_the_saga,The length of the statement  "            var sagaData = await persister.Get<TestSagaData>(saga.Id' new InMemorySynchronizedStorageSession()' intentionallySharedContext ); " is 129.
Long Statement,NServiceBus.SagaPersisters.InMemory.Tests,When_completing_a_saga_with_the_InMemory_persister,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Persistence\InMemory\When_completing_a_saga_with_the_InMemory_persister.cs,Should_delete_the_saga,The length of the statement  "            var completedSaga = await persister.Get<TestSagaData>(saga.Id' new InMemorySynchronizedStorageSession()' new ContextBag()); " is 123.
Long Statement,NServiceBus.SagaPersisters.InMemory.Tests,When_completing_a_saga_with_unique_property_with_InMemory_persister,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Persistence\InMemory\When_completing_a_saga_with_unique_property_with_InMemory_persister.cs,Should_delete_the_saga,The length of the statement  "            await persister.Save(saga'SagaMetadataHelper.GetMetadata<SagaWithUniqueProperty>(saga)' insertSession' new ContextBag()); " is 121.
Long Statement,NServiceBus.SagaPersisters.InMemory.Tests,When_completing_a_saga_with_unique_property_with_InMemory_persister,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Persistence\InMemory\When_completing_a_saga_with_unique_property_with_InMemory_persister.cs,Should_delete_the_saga,The length of the statement  "            var sagaData = await persister.Get<SagaWithUniquePropertyData>(saga.Id' new InMemorySynchronizedStorageSession()' intentionallySharedContext ); " is 143.
Long Statement,NServiceBus.SagaPersisters.InMemory.Tests,When_completing_a_saga_with_unique_property_with_InMemory_persister,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Persistence\InMemory\When_completing_a_saga_with_unique_property_with_InMemory_persister.cs,Should_delete_the_saga,The length of the statement  "            var completedSagaData = await persister.Get<SagaWithUniquePropertyData>(saga.Id' new InMemorySynchronizedStorageSession()' new ContextBag()); " is 141.
Long Statement,NServiceBus.SagaPersisters.InMemory.Tests,When_multiple_workers_retrieve_same_saga,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Persistence\InMemory\When_multiple_workers_retrieve_same_saga.cs,Persister_returns_different_instance_of_saga_data,The length of the statement  "            var returnedSaga1 = await persister.Get<TestSagaData>(saga.Id' new InMemorySynchronizedStorageSession()' new ContextBag()); " is 123.
Long Statement,NServiceBus.SagaPersisters.InMemory.Tests,When_multiple_workers_retrieve_same_saga,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Persistence\InMemory\When_multiple_workers_retrieve_same_saga.cs,Persister_returns_different_instance_of_saga_data,The length of the statement  "            var returnedSaga2 = await persister.Get<TestSagaData>("Id"' saga.Id' new InMemorySynchronizedStorageSession()' new ContextBag()); " is 129.
Long Statement,NServiceBus.SagaPersisters.InMemory.Tests,When_multiple_workers_retrieve_same_saga,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Persistence\InMemory\When_multiple_workers_retrieve_same_saga.cs,Save_fails_when_data_changes_between_read_and_update,The length of the statement  "            var returnedSaga1 = await Task.Run(() => persister.Get<TestSagaData>(saga.Id' new InMemorySynchronizedStorageSession()' winningContext)); " is 137.
Long Statement,NServiceBus.SagaPersisters.InMemory.Tests,When_multiple_workers_retrieve_same_saga,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Persistence\InMemory\When_multiple_workers_retrieve_same_saga.cs,Save_fails_when_data_changes_between_read_and_update,The length of the statement  "            var returnedSaga2 = await persister.Get<TestSagaData>("SomeId"' sagaId.ToString()' new InMemorySynchronizedStorageSession()' losingContext); " is 140.
Long Statement,NServiceBus.SagaPersisters.InMemory.Tests,When_multiple_workers_retrieve_same_saga,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Persistence\InMemory\When_multiple_workers_retrieve_same_saga.cs,Save_fails_when_data_changes_between_read_and_update,The length of the statement  "            Assert.That(async () => await losingSaveSession.CompleteAsync()' Throws.InstanceOf<Exception>().And.Message.StartsWith($"InMemorySagaPersister concurrency violation: saga entity Id[{saga.Id}] already saved.")); " is 210.
Long Statement,NServiceBus.SagaPersisters.InMemory.Tests,When_multiple_workers_retrieve_same_saga,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Persistence\InMemory\When_multiple_workers_retrieve_same_saga.cs,Save_fails_when_data_changes_between_read_and_update_on_same_thread,The length of the statement  "            var staleRecord = await persister.Get<TestSagaData>("SomeId"' sagaId.ToString()' new InMemorySynchronizedStorageSession()' losingContext); " is 138.
Long Statement,NServiceBus.SagaPersisters.InMemory.Tests,When_multiple_workers_retrieve_same_saga,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Persistence\InMemory\When_multiple_workers_retrieve_same_saga.cs,Save_fails_when_data_changes_between_read_and_update_on_same_thread,The length of the statement  "            Assert.That(async () => await losingSaveSession.CompleteAsync()' Throws.InstanceOf<Exception>().And.Message.StartsWith($"InMemorySagaPersister concurrency violation: saga entity Id[{saga.Id}] already saved.")); " is 210.
Long Statement,NServiceBus.SagaPersisters.InMemory.Tests,When_multiple_workers_retrieve_same_saga,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Persistence\InMemory\When_multiple_workers_retrieve_same_saga.cs,Save_fails_when_writing_same_data_twice,The length of the statement  "            var returnedSaga1 = await persister.Get<TestSagaData>(saga.Id' new InMemorySynchronizedStorageSession()' retrievingContext); " is 124.
Long Statement,NServiceBus.SagaPersisters.InMemory.Tests,When_multiple_workers_retrieve_same_saga,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Persistence\InMemory\When_multiple_workers_retrieve_same_saga.cs,Save_fails_when_writing_same_data_twice,The length of the statement  "            Assert.That(async () => await losingSaveSession.CompleteAsync()' Throws.InstanceOf<Exception>().And.Message.StartsWith($"InMemorySagaPersister concurrency violation: saga entity Id[{saga.Id}] already saved.")); " is 210.
Long Statement,NServiceBus.SagaPersisters.InMemory.Tests,When_multiple_workers_retrieve_same_saga,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Persistence\InMemory\When_multiple_workers_retrieve_same_saga.cs,Save_process_is_repeatable,The length of the statement  "            var returnedSaga1 = await Task.Run(() => persister.Get<TestSagaData>(saga.Id' new InMemorySynchronizedStorageSession()' winningSessionContext)); " is 144.
Long Statement,NServiceBus.SagaPersisters.InMemory.Tests,When_multiple_workers_retrieve_same_saga,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Persistence\InMemory\When_multiple_workers_retrieve_same_saga.cs,Save_process_is_repeatable,The length of the statement  "            var returnedSaga2 = await persister.Get<TestSagaData>("SomeId"' sagaId.ToString()' new InMemorySynchronizedStorageSession()' losingSessionContext); " is 147.
Long Statement,NServiceBus.SagaPersisters.InMemory.Tests,When_multiple_workers_retrieve_same_saga,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Persistence\InMemory\When_multiple_workers_retrieve_same_saga.cs,Save_process_is_repeatable,The length of the statement  "            Assert.That(async () => await losingSaveSession.CompleteAsync()' Throws.InstanceOf<Exception>().And.Message.StartsWith($"InMemorySagaPersister concurrency violation: saga entity Id[{saga.Id}] already saved.")); " is 210.
Long Statement,NServiceBus.SagaPersisters.InMemory.Tests,When_multiple_workers_retrieve_same_saga,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Persistence\InMemory\When_multiple_workers_retrieve_same_saga.cs,Save_process_is_repeatable,The length of the statement  "            var returnedSaga3 = await Task.Run(() => persister.Get<TestSagaData>("SomeId"' sagaId.ToString()' new InMemorySynchronizedStorageSession()' losingSessionContext)); " is 163.
Long Statement,NServiceBus.SagaPersisters.InMemory.Tests,When_multiple_workers_retrieve_same_saga,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Persistence\InMemory\When_multiple_workers_retrieve_same_saga.cs,Save_process_is_repeatable,The length of the statement  "            var returnedSaga4 = await persister.Get<TestSagaData>(saga.Id' new InMemorySynchronizedStorageSession()' winningSessionContext); " is 128.
Long Statement,NServiceBus.SagaPersisters.InMemory.Tests,When_multiple_workers_retrieve_same_saga,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Persistence\InMemory\When_multiple_workers_retrieve_same_saga.cs,Save_process_is_repeatable,The length of the statement  "            Assert.That(async () => await losingSaveSession.CompleteAsync()' Throws.InstanceOf<Exception>().And.Message.StartsWith($"InMemorySagaPersister concurrency violation: saga entity Id[{saga.Id}] already saved.")); " is 210.
Long Statement,NServiceBus.SagaPersisters.InMemory.Tests,When_persisting_a_saga_with_InMemory_and_an_escalated_DTC_transaction,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Persistence\InMemory\When_persisting_a_saga_with_InMemory_and_an_escalated_DTC_transaction.cs,Save_fails_when_data_changes_between_concurrent_instances,The length of the statement  "                    Transaction.Current.EnlistDurable(EnlistmentWhichEnforcesDtcEscalation.Id' new EnlistmentWhichEnforcesDtcEscalation()' EnlistmentOptions.None); " is 143.
Long Statement,NServiceBus.SagaPersisters.InMemory.Tests,When_persisting_a_saga_with_the_same_unique_property_as_another_saga,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Persistence\InMemory\When_persisting_a_saga_with_the_same_unique_property_as_another_saga.cs,It_should_enforce_uniqueness,The length of the statement  "            await persister.Save(saga1' SagaMetadataHelper.GetMetadata<SagaWithUniqueProperty>(saga1)' winningSession' new ContextBag()); " is 125.
Long Statement,NServiceBus.SagaPersisters.InMemory.Tests,When_persisting_a_saga_with_the_same_unique_property_as_another_saga,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Persistence\InMemory\When_persisting_a_saga_with_the_same_unique_property_as_another_saga.cs,It_should_enforce_uniqueness,The length of the statement  "            await persister.Save(saga2' SagaMetadataHelper.GetMetadata<SagaWithUniqueProperty>(saga1)' losingSession' new ContextBag()); " is 124.
Long Statement,NServiceBus.SagaPersisters.InMemory.Tests,When_persisting_different_sagas_with_unique_properties,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Persistence\InMemory\When_persisting_different_sagas_with_unique_properties.cs,It_should_persist_successfully,The length of the statement  "            await persister.Save(saga1' SagaMetadataHelper.GetMetadata<SagaWithUniqueProperty>(saga1)' transaction' new ContextBag()); " is 122.
Long Statement,NServiceBus.SagaPersisters.InMemory.Tests,When_persisting_different_sagas_with_unique_properties,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Persistence\InMemory\When_persisting_different_sagas_with_unique_properties.cs,It_should_persist_successfully,The length of the statement  "            await persister.Save(saga2' SagaMetadataHelper.GetMetadata<AnotherSagaTwoUniqueProperty>(saga2)' transaction' new ContextBag()); " is 128.
Long Statement,NServiceBus.SagaPersisters.InMemory.Tests,When_saga_not_found_return_default,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Persistence\InMemory\When_saga_not_found_return_default.cs,Should_return_default_when_using_finding_saga_with_property,The length of the statement  "            var simpleSageEntity = await persister.Get<SimpleSagaEntity>("propertyNotFound"' "someValue"' new InMemorySynchronizedStorageSession()' new ContextBag()); " is 154.
Long Statement,NServiceBus.SagaPersisters.InMemory.Tests,When_saga_not_found_return_default,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Persistence\InMemory\When_saga_not_found_return_default.cs,Should_return_default_when_using_finding_saga_with_id,The length of the statement  "            var simpleSageEntity = await persister.Get<SimpleSagaEntity>(Guid.Empty' new InMemorySynchronizedStorageSession()' new ContextBag()); " is 133.
Long Statement,NServiceBus.SagaPersisters.InMemory.Tests,When_saga_not_found_return_default,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Persistence\InMemory\When_saga_not_found_return_default.cs,Should_return_default_when_using_finding_saga_with_id_of_another_type,The length of the statement  "            await persister.Save(simpleSagaEntity' SagaMetadataHelper.GetMetadata<SimpleSagaEntitySaga>(simpleSagaEntity)' session' new ContextBag()); " is 138.
Long Statement,NServiceBus.SagaPersisters.InMemory.Tests,When_saga_not_found_return_default,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Persistence\InMemory\When_saga_not_found_return_default.cs,Should_return_default_when_using_finding_saga_with_id_of_another_type,The length of the statement  "            var anotherSagaEntity = await persister.Get<AnotherSimpleSagaEntity>(id' new InMemorySynchronizedStorageSession()'  new ContextBag()); " is 134.
Long Statement,NServiceBus.SagaPersisters.InMemory.Tests,When_updating_a_saga_with_the_same_unique_property_value,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Persistence\InMemory\When_updating_a_saga_with_the_same_unique_property_value.cs,It_should_persist_successfully,The length of the statement  "            await persister.Save(saga1' SagaMetadataHelper.GetMetadata<SagaWithUniqueProperty>(saga1)' insertSession' new ContextBag()); " is 124.
Long Statement,NServiceBus.SagaPersisters.InMemory.Tests,When_updating_a_saga_with_the_same_unique_property_value,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Persistence\InMemory\When_updating_a_saga_with_the_same_unique_property_value.cs,It_should_persist_successfully,The length of the statement  "            saga1 = await persister.Get<SagaWithUniquePropertyData>(saga1.Id' new InMemorySynchronizedStorageSession()' updatingContext); " is 125.
Long Statement,NServiceBus.Persistence.InMemory.Tests,InMemorySubscriptionStorageTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Persistence\InMemory\InMemorySubscriptionStorageTests.cs,Should_ignore_message_version_on_subscriptions,The length of the statement  "            await storage.Subscribe(new Subscriber("subscriberA@server1"' "subscriberA")' new MessageType("SomeMessage"' "1.0.0")' new ContextBag()); " is 137.
Long Statement,NServiceBus.Core.Tests.Persistence.InMemory,When_updating_a_saga_with_no_defined_unique_property,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Persistence\InMemory\When_updating_a_saga_with_no_defined_unique_property.cs,It_should_successfully_update_the_saga,The length of the statement  "            var result = await persister.Get<SagaWithoutUniquePropertyData>(sagaData.Id' new InMemorySynchronizedStorageSession()' new ContextBag()); " is 137.
Long Statement,NServiceBus.Core.Tests.Persistence,When_configuring_storage_type_not_supported_by_persistence,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Persistence\PersistenceExtensionsTests.cs,Should_throw_exception,The length of the statement  "            var ex = Assert.Throws<Exception>(() => new PersistenceExtensions(typeof(PartialPersistence)' new SettingsHolder()' typeof(StorageType.Timeouts))); " is 147.
Long Statement,NServiceBus.Core.Tests.Persistence,When_configuring_storage_type_supported_by_persistence,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Persistence\PersistenceExtensionsTests.cs,Should_not_throw_exception,The length of the statement  "            Assert.DoesNotThrow(() => new PersistenceExtensions(typeof(PartialPersistence)' new SettingsHolder()' typeof(StorageType.Subscriptions))); " is 138.
Long Statement,NServiceBus.Core.Tests.Persistence,When_persistence_has_been_configured,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Persistence\PersistenceStartupTests.cs,Should_prevent_using_different_persistence_for_sagas_and_outbox_for_both_features_enabled,The length of the statement  "            }' "Sagas and Outbox need to use the same type of persistence. Saga is configured to use FakeSagaPersistence. Outbox is configured to use FakeOutboxPersistence"); " is 162.
Long Statement,NServiceBus.Core.Tests.Persistence,When_persistence_has_been_configured,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Persistence\PersistenceStartupTests.cs,Should_not_prevent_using_different_persistence_for_sagas_and_outbox_if_only_one_of_the_features_is_enabled,The length of the statement  "            Assert.DoesNotThrow(() => startup.Run(config.Settings)' "Should not throw for a single single feature enabled out of the two."); " is 128.
Long Statement,NServiceBus.Core.Tests.Persistence,When_storage_overrides_are_provided,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Persistence\PersistenceStorageMergerTests.cs,Should_replace_default_storages_by_overrides,The length of the statement  "                new List<Type> { typeof(StorageType.GatewayDeduplication)' typeof(StorageType.Outbox)' typeof(StorageType.Timeouts) })); " is 120.
Long Statement,NServiceBus.Core.Tests.Pipeline,BehaviorTypeCheckerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Pipeline\BehaviorTypeCheckerTests.cs,Should_throw_for_behavior_using_IIncomingContext,The length of the statement  "            Assert.Throws<ArgumentException>(() => BehaviorTypeChecker.ThrowIfInvalid(typeof(BehaviorUsingIncomingContext)' Description)); " is 126.
Long Statement,NServiceBus.Core.Tests.Pipeline,BehaviorTypeCheckerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Pipeline\BehaviorTypeCheckerTests.cs,Should_throw_for_behavior_using_IOutgoingContext,The length of the statement  "            Assert.Throws<ArgumentException>(() => BehaviorTypeChecker.ThrowIfInvalid(typeof(BehaviorUsingOutgoingContext)' Description)); " is 126.
Long Statement,NServiceBus.Core.Tests.Pipeline,BehaviorTypeCheckerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Pipeline\BehaviorTypeCheckerTests.cs,Should_throw_for_behavior_using_IBehaviorContext,The length of the statement  "            Assert.Throws<ArgumentException>(() => BehaviorTypeChecker.ThrowIfInvalid(typeof(BehaviorUsingBehaviorContext)' Description)); " is 126.
Long Statement,NServiceBus.Core.Tests.Pipeline,HandlerTransactionScopeWrapperBehaviorTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Pipeline\HandlerTransactionScopeWrapperBehaviorTests.cs,ShouldBlowUpIfExistingScopeExists,The length of the statement  "            }' Throws.InstanceOf<Exception>().And.Message.Contains("Ambient transaction detected. The transaction scope unit of work is not supported when there already is a scope present.")); " is 180.
Long Statement,NServiceBus.Core.Tests.Pipeline,HandlerTransactionScopeWrapperBehaviorTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Pipeline\HandlerTransactionScopeWrapperBehaviorTests.cs,ShouldWrapInnerBehaviorsIfNoAmbientExists,The length of the statement  "            var behavior = new TransactionScopeUnitOfWorkBehavior(new TransactionOptions { IsolationLevel = IsolationLevel.ReadCommitted }); " is 128.
Long Statement,NServiceBus.Core.Tests.Pipeline,PipelineModelBuilderTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Pipeline\PipelineModelBuilderTests.cs,ShouldDetectConflictingStepRegistrations,The length of the statement  "            Assert.AreEqual("Step registration with id 'Root1' is already registered for 'NServiceBus.Core.Tests.Pipeline.PipelineModelBuilderTests+RootBehavior'."' ex.Message); " is 165.
Long Statement,NServiceBus.Core.Tests.Pipeline,PipelineModelBuilderTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Pipeline\PipelineModelBuilderTests.cs,ShouldOnlyAllowReplacementOfExistingRegistrations,The length of the statement  "            Assert.AreEqual("You can only replace an existing step registration' 'DoesNotExist' registration does not exist."' ex.Message); " is 127.
Long Statement,NServiceBus.Core.Tests.Pipeline,PipelineModelBuilderTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Pipeline\PipelineModelBuilderTests.cs,ShouldOnlyAllowRemovalOfExistingRegistrations,The length of the statement  "            Assert.AreEqual("You cannot remove step registration with id 'DoesNotExist'' registration does not exist."' ex.Message); " is 120.
Long Statement,NServiceBus.Core.Tests.Pipeline,PipelineModelBuilderTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Pipeline\PipelineModelBuilderTests.cs,ShouldOnlyAllowRemovalWhenNoOtherDependsOnItsBeforeRegistration,The length of the statement  "            var someBehaviorRegistration = RegisterStep.Create("SomeBehaviorOfParentContext"' typeof(SomeBehaviorOfParentContext)' "desc"); " is 127.
Long Statement,NServiceBus.Core.Tests.Pipeline,PipelineModelBuilderTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Pipeline\PipelineModelBuilderTests.cs,ShouldOnlyAllowRemovalWhenNoOtherDependsOnItsBeforeRegistration,The length of the statement  "            var anotherBehaviorRegistration = RegisterStep.Create("AnotherBehaviorOfParentContext"' typeof(AnotherBehaviorOfParentContext)' "desc"); " is 136.
Long Statement,NServiceBus.Core.Tests.Pipeline,PipelineModelBuilderTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Pipeline\PipelineModelBuilderTests.cs,ShouldOnlyAllowRemovalWhenNoOtherDependsOnItsBeforeRegistration,The length of the statement  "            Assert.AreEqual("You cannot remove step registration with id 'SomeBehaviorOfParentContext'' registration with id 'AnotherBehaviorOfParentContext' depends on it."' ex.Message); " is 175.
Long Statement,NServiceBus.Core.Tests.Pipeline,PipelineModelBuilderTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Pipeline\PipelineModelBuilderTests.cs,ShouldOnlyAllowRemovalWhenNoOtherDependsOnItsAfterRegistration,The length of the statement  "            var someBehaviorRegistration = RegisterStep.Create("SomeBehaviorOfParentContext"' typeof(SomeBehaviorOfParentContext)' "desc"); " is 127.
Long Statement,NServiceBus.Core.Tests.Pipeline,PipelineModelBuilderTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Pipeline\PipelineModelBuilderTests.cs,ShouldOnlyAllowRemovalWhenNoOtherDependsOnItsAfterRegistration,The length of the statement  "            var anotherBehaviorRegistration = RegisterStep.Create("AnotherBehaviorOfParentContext"' typeof(AnotherBehaviorOfParentContext)' "desc"); " is 136.
Long Statement,NServiceBus.Core.Tests.Pipeline,PipelineModelBuilderTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Pipeline\PipelineModelBuilderTests.cs,ShouldOnlyAllowRemovalWhenNoOtherDependsOnItsAfterRegistration,The length of the statement  "            Assert.AreEqual("You cannot remove step registration with id 'SomeBehaviorOfParentContext'' registration with id 'AnotherBehaviorOfParentContext' depends on it."' ex.Message); " is 175.
Long Statement,NServiceBus.Core.Tests.Pipeline,PipelineModelBuilderTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Pipeline\PipelineModelBuilderTests.cs,ShouldDetectMissingBehaviorForRootContext,The length of the statement  "            Assert.AreEqual("Can't find any behaviors/connectors for the root context (NServiceBus.Core.Tests.Pipeline.PipelineModelBuilderTests+IParentContext)"' ex.Message); " is 163.
Long Statement,NServiceBus.Core.Tests.Pipeline,PipelineModelBuilderTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Pipeline\PipelineModelBuilderTests.cs,ShouldDetectConflictingStageConnectors,The length of the statement  "                RegisterStep.Create("ParentContextToChildContextNotInheritedFromParentContextConnector"' typeof(ParentContextToChildContextNotInheritedFromParentContextConnector)' "desc") " is 171.
Long Statement,NServiceBus.Core.Tests.Pipeline,PipelineModelBuilderTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Pipeline\PipelineModelBuilderTests.cs,ShouldDetectConflictingStageConnectors,The length of the statement  "            Assert.AreEqual("Multiple stage connectors found for stage 'NServiceBus.Core.Tests.Pipeline.PipelineModelBuilderTests+IParentContext'. Remove one of: 'NServiceBus.Core.Tests.Pipeline.PipelineModelBuilderTests+ParentContextToChildContextConnector'' 'NServiceBus.Core.Tests.Pipeline.PipelineModelBuilderTests+ParentContextToChildContextNotInheritedFromParentContextConnector'"' ex.Message); " is 388.
Long Statement,NServiceBus.Core.Tests.Pipeline,PipelineModelBuilderTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Pipeline\PipelineModelBuilderTests.cs,ShouldDetectNonExistingInsertAfterRegistrations,The length of the statement  "            var someBehaviorRegistration = RegisterStep.Create("SomeBehaviorOfParentContext"' typeof(SomeBehaviorOfParentContext)' "desc"); " is 127.
Long Statement,NServiceBus.Core.Tests.Pipeline,PipelineModelBuilderTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Pipeline\PipelineModelBuilderTests.cs,ShouldDetectNonExistingInsertAfterRegistrations,The length of the statement  "            var anotherBehaviorRegistration = RegisterStep.Create("AnotherBehaviorOfParentContext"' typeof(AnotherBehaviorOfParentContext)' "desc"); " is 136.
Long Statement,NServiceBus.Core.Tests.Pipeline,PipelineModelBuilderTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Pipeline\PipelineModelBuilderTests.cs,ShouldDetectNonExistingInsertAfterRegistrations,The length of the statement  "            Assert.AreEqual("Registration 'DoesNotExist' specified in the insertafter of the 'AnotherBehaviorOfParentContext' step does not exist. Current StepIds: 'SomeBehaviorOfParentContext'' 'AnotherBehaviorOfParentContext'"' ex.Message); " is 230.
Long Statement,NServiceBus.Core.Tests.Pipeline,PipelineModelBuilderTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Pipeline\PipelineModelBuilderTests.cs,ShouldDetectNonExistingInsertBeforeRegistrations,The length of the statement  "            var someBehaviorRegistration = RegisterStep.Create("SomeBehaviorOfParentContext"' typeof(SomeBehaviorOfParentContext)' "desc"); " is 127.
Long Statement,NServiceBus.Core.Tests.Pipeline,PipelineModelBuilderTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Pipeline\PipelineModelBuilderTests.cs,ShouldDetectNonExistingInsertBeforeRegistrations,The length of the statement  "            var anotherBehaviorRegistration = RegisterStep.Create("AnotherBehaviorOfParentContext"' typeof(AnotherBehaviorOfParentContext)' "desc"); " is 136.
Long Statement,NServiceBus.Core.Tests.Pipeline,PipelineModelBuilderTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Pipeline\PipelineModelBuilderTests.cs,ShouldDetectNonExistingInsertBeforeRegistrations,The length of the statement  "            Assert.AreEqual("Registration 'DoesNotExist' specified in the insertbefore of the 'AnotherBehaviorOfParentContext' step does not exist. Current StepIds: 'SomeBehaviorOfParentContext'' 'AnotherBehaviorOfParentContext'"' ex.Message); " is 231.
Long Statement,NServiceBus.Core.Tests.Pipeline,PipelineModelBuilderTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Pipeline\PipelineModelBuilderTests.cs,ShouldDetectRegistrationsWithContextsReachableFromTheRootContext,The length of the statement  "                RegisterStep.Create("ParentContextToChildContextNotInheritedFromParentContextConnector"' typeof(ParentContextToChildContextNotInheritedFromParentContextConnector)' "desc")' " is 172.
Long Statement,NServiceBus.Core.Tests.Pipeline,RegisterStepTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Pipeline\RegisterStepTests.cs,Replace_WhenReplacementProvidedFactory_ShouldBuildReplacementFromFactory,The length of the statement  "            var registerStep = RegisterStep.Create("pipelineStep"' typeof(BehaviorA)' "description"' b => { throw new Exception(); }); " is 122.
Long Statement,NServiceBus.Core.Tests.Pipeline.Incoming,InvokeHandlerTerminatorTest,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Pipeline\Incoming\InvokeHandlerTerminatorTest.cs,Should_throw_friendly_exception_if_handler_returns_null,The length of the statement  "            Assert.That(async () => await terminator.Invoke(behaviorContext' _ => TaskEx.CompletedTask)' Throws.Exception.With.Message.EqualTo("Return a Task or mark the method as async.")); " is 178.
Long Statement,NServiceBus.Core.Tests.Pipeline.Incoming,InvokeHandlerTerminatorTest,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Pipeline\Incoming\InvokeHandlerTerminatorTest.cs,AssociateSagaWithMessage,The length of the statement  "            var sagaInstance = new ActiveSagaInstance(saga' SagaMetadata.Create(typeof(FakeSaga)' new List<Type>()' new Conventions())' () => DateTime.UtcNow); " is 147.
Long Statement,NServiceBus.Core.Tests.Pipeline.Outgoing,AttachSenderRelatedInfoOnMessageTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Pipeline\Outgoing\AttachSenderRelatedInfoOnMessageTests.cs,InvokeBehavior,The length of the statement  "                .Invoke(new TestableRoutingContext {Message = message' RoutingStrategies = new List<UnicastRoutingStrategy> { new UnicastRoutingStrategy("_") }}' _ => TaskEx.CompletedTask); " is 173.
Long Statement,NServiceBus.Core.Tests.Pipeline.Outgoing,OutgoingLogicalMessageContextTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Pipeline\Outgoing\OutgoingLogicalMessageContextTests.cs,Updating_the_message_proxy_instance_with_a_new_property_value_should_retain_the_original_interface_type,The length of the statement  "            var context = new OutgoingLogicalMessageContext("message1234"' new Dictionary<string' string>()' new OutgoingLogicalMessage(typeof(IMyMessage)' message)' null' null); " is 166.
Long Statement,NServiceBus.Core.Tests.Pipeline.Outgoing,OutgoingLogicalMessageContextTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Pipeline\Outgoing\OutgoingLogicalMessageContextTests.cs,Updating_the_message_to_a_new_type_should_update_the_MessageType,The length of the statement  "            var context = new OutgoingLogicalMessageContext("message1234"' new Dictionary<string' string>()' new OutgoingLogicalMessage(typeof(IMyMessage)' message)' null' null); " is 166.
Long Statement,NServiceBus.Core.Tests.Pipeline.Outgoing,OutgoingPublishContextTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Pipeline\Outgoing\OutgoingPublishContextTests.cs,ShouldShallowCloneContext,The length of the statement  "            var testee = new OutgoingPublishContext(message' "message-id"' options.OutgoingHeaders' options.Context' new FakeRootContext()); " is 128.
Long Statement,NServiceBus.Core.Tests.Pipeline.Outgoing,OutgoingReplyContextTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Pipeline\Outgoing\OutgoingReplyContextTests.cs,ShouldShallowCloneContext,The length of the statement  "            var testee = new OutgoingReplyContext(message' "message-id"' options.OutgoingHeaders' options.Context' new FakeRootContext()); " is 126.
Long Statement,NServiceBus.Core.Tests.Pipeline.Outgoing,OutgoingSendContextTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Pipeline\Outgoing\OutgoingSendContextTests.cs,ShouldShallowCloneContext,The length of the statement  "            var testee = new OutgoingSendContext(message' "message-id"' options.OutgoingHeaders' options.Context' new FakeRootContext()); " is 125.
Long Statement,NServiceBus.Core.Tests.Recoverability,DefaultRecoverabilityPolicyTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Recoverability\DefaultRecoverabilityPolicyTests.cs,When_failure_is_assignable_to_custom_exception_should_move_to_error,The length of the statement  "            var policy = CreatePolicy(maxImmediateRetries: 3' maxDelayedRetries: 3' unrecoverableExceptions: new HashSet<Type> { typeof(MyBaseCustomException) }); " is 150.
Long Statement,NServiceBus.Core.Tests.Recoverability,DefaultRecoverabilityPolicyTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Recoverability\DefaultRecoverabilityPolicyTests.cs,When_max_immediate_retries_have_not_been_reached_should_return_immediate_retry,The length of the statement  "            Assert.IsInstanceOf<ImmediateRetry>(recoverabilityAction' "Should have one immediate retry left. It is second delivery attempt and we configured immediate reties to 2."); " is 170.
Long Statement,NServiceBus.Core.Tests.Recoverability,DefaultRecoverabilityPolicyTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Recoverability\DefaultRecoverabilityPolicyTests.cs,When_max_immediate_retries_exceeded_should_return_delayed_retry,The length of the statement  "            Assert.IsInstanceOf<DelayedRetry>(recoverabilityAction' "When max number of immediate retries exceeded should return DelayedRetry."); " is 133.
Long Statement,NServiceBus.Core.Tests.Recoverability,DefaultRecoverabilityPolicyTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Recoverability\DefaultRecoverabilityPolicyTests.cs,When_max_immediate_retries_exceeded_but_delayed_retry_disabled_return_move_to_error,The length of the statement  "            Assert.IsInstanceOf<MoveToError>(recoverabilityAction' "When max number of immediate retries exceeded and delayed retry disabled should return MoveToErrors."); " is 159.
Long Statement,NServiceBus.Core.Tests.Recoverability,DefaultRecoverabilityPolicyTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Recoverability\DefaultRecoverabilityPolicyTests.cs,When_immediate_retries_turned_off_and_delayed_retry_policy_returns_delay_should_return_delayed_retry,The length of the statement  "            Assert.IsInstanceOf<DelayedRetry>(recoverabilityAction' "When immediate retries turned off and delayed retries left' recoverability policy should return DelayedRetry"); " is 168.
Long Statement,NServiceBus.Core.Tests.Recoverability,DefaultRecoverabilityPolicyTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Recoverability\DefaultRecoverabilityPolicyTests.cs,When_immediate_retries_turned_off_and_delayed_retries_turned_off_should_return_move_to_errors,The length of the statement  "            Assert.IsInstanceOf<MoveToError>(recoverabilityAction' "When Immediate Retries turned off and Delayed Retry turned off should return MoveToErrors"); " is 148.
Long Statement,NServiceBus.Core.Tests.Recoverability,DefaultRecoverabilityPolicyTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Recoverability\DefaultRecoverabilityPolicyTests.cs,When_immediate_retries_turned_off_and_delayed_retry_policy_returns_no_delay_should_return_move_to_errors,The length of the statement  "            Assert.IsInstanceOf<MoveToError>(recoverabilityAction' "When Immediate Retries turned off and Delayed Retries policy returns no delay should return MoveToErrors"); " is 163.
Long Statement,NServiceBus.Core.Tests.Recoverability,DefaultRecoverabilityPolicyTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Recoverability\DefaultRecoverabilityPolicyTests.cs,When_immediate_retries_turned_off_and_delayed_retry_not_available_should_return_move_to_errors,The length of the statement  "            Assert.IsInstanceOf<MoveToError>(recoverabilityAction' "When immediate retries turned off and delayed retries disabled should return MoveToErrors"); " is 148.
Long Statement,NServiceBus.Core.Tests.Recoverability,DefaultRecoverabilityPolicyTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Recoverability\DefaultRecoverabilityPolicyTests.cs,When_delayed_retry_counter_header_exists_recoverability_policy_should_use_it,The length of the statement  "            Assert.IsInstanceOf<MoveToError>(recoverabilityAction' "When Delayed Retries cunter in headers reaches max delayed retries' policy should return MoveToErrors"); " is 160.
Long Statement,NServiceBus.Core.Tests.Recoverability,DefaultRecoverabilityPolicyTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Recoverability\DefaultRecoverabilityPolicyTests.cs,CreateErrorContext,The length of the statement  "            } : headers ?? new Dictionary<string' string>()' "message-id"' new byte[0]' new TransportTransaction()' numberOfDeliveryAttempts); " is 130.
Long Statement,NServiceBus.Core.Tests.Recoverability,DefaultRecoverabilityPolicyTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Recoverability\DefaultRecoverabilityPolicyTests.cs,CreatePolicy,The length of the statement  "            var config = new RecoverabilityConfig(new ImmediateConfig(maxImmediateRetries)' new DelayedConfig(maxDelayedRetries' delayedRetryDelay.GetValueOrDefault(TimeSpan.FromSeconds(2)))' failedConfig); " is 194.
Long Statement,NServiceBus.Core.Tests.Recoverability,DelayedRetryExecutorTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Recoverability\DelayedRetryExecutorTests.cs,When_no_native_delayed_delivery_should_route_message_to_timeout_manager,The length of the statement  "            Assert.That(DateTimeExtensions.ToUtcDateTime(transportOperation.Message.Headers[TimeoutManagerHeaders.Expire])' Is.GreaterThan(DateTime.UtcNow).And.LessThanOrEqualTo(DateTime.UtcNow + delay)); " is 192.
Long Statement,NServiceBus.Core.Tests.Recoverability,DelayedRetryExecutorTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Recoverability\DelayedRetryExecutorTests.cs,Should_update_retry_headers_when_present,The length of the statement  "            var originalHeadersTimestamp = DateTimeExtensions.ToWireFormattedString(new DateTime(2012' 12' 12' 0' 0' 0' DateTimeKind.Utc)); " is 127.
Long Statement,NServiceBus.Core.Tests.Recoverability,ErrorContextTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Recoverability\ErrorContextTests.cs,Can_pass_additional_information_via_context_bag,The length of the statement  "            var context = new ErrorContext(new Exception()' new Dictionary<string' string>()' "ID"' new byte[0]' new TransportTransaction()' 0' contextBag); " is 144.
Long Statement,NServiceBus.Core.Tests.Recoverability,MoveToErrorsExecutorTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Recoverability\MoveToErrorsExecutorTests.cs,MoveToErrorQueue_should_preserve_incoming_message_headers,The length of the statement  "            await moveToErrorsExecutor.MoveToErrorQueue(ErrorQueueAddress' incomingMessage' new Exception()' new TransportTransaction()); " is 125.
Long Statement,NServiceBus.Core.Tests.Recoverability,MoveToErrorsExecutorTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Recoverability\MoveToErrorsExecutorTests.cs,MoveToErrorQueue_should_dispatch_original_message_body,The length of the statement  "            await moveToErrorsExecutor.MoveToErrorQueue(ErrorQueueAddress' incomingMessage' new Exception()' new TransportTransaction()); " is 125.
Long Statement,NServiceBus.Core.Tests.Recoverability,MoveToErrorsExecutorTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Recoverability\MoveToErrorsExecutorTests.cs,MoveToErrorQueue_should_remove_known_retry_headers,The length of the statement  "            await moveToErrorsExecutor.MoveToErrorQueue(ErrorQueueAddress' incomingMessage' new Exception()' new TransportTransaction()); " is 125.
Long Statement,NServiceBus.Core.Tests.Recoverability,MoveToErrorsExecutorTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Recoverability\MoveToErrorsExecutorTests.cs,MoveToErrorQueue_should_add_static_fault_info_to_headers,The length of the statement  "            await moveToErrorsExecutor.MoveToErrorQueue(ErrorQueueAddress' incomingMessage' new Exception()' new TransportTransaction()); " is 125.
Long Statement,NServiceBus.Core.Tests.Recoverability,MoveToErrorsExecutorTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Recoverability\MoveToErrorsExecutorTests.cs,MoveToErrorQueue_should_add_static_fault_info_to_headers,The length of the statement  "            Assert.That(outgoingMessageHeaders' Contains.Item(new KeyValuePair<string' string>("staticFaultMetadataKey"' "staticFaultMetadataValue"))); " is 139.
Long Statement,NServiceBus.Core.Tests.Recoverability,MoveToErrorsExecutorTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Recoverability\MoveToErrorsExecutorTests.cs,MoveToErrorQueue_should_apply_header_customizations_before_dispatch,The length of the statement  "            moveToErrorsExecutor = new MoveToErrorsExecutor(dispatcher' staticFaultMetadata' headers => { passedInHeaders = headers; }); " is 124.
Long Statement,NServiceBus.Core.Tests.Recoverability,RecoverabilityExecutorTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Recoverability\RecoverabilityExecutorTests.cs,CreateErrorContext,The length of the statement  "            return new ErrorContext(raisedException ?? new Exception(exceptionMessage)' new Dictionary<string' string>()' messageId' new byte[0]' new TransportTransaction()' numberOfDeliveryAttempts); " is 188.
Long Statement,NServiceBus.Core.Tests.Recoverability,RecoverabilityExecutorTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Recoverability\RecoverabilityExecutorTests.cs,CreateExecutor,The length of the statement  "                new RecoverabilityConfig(new ImmediateConfig(0)' new DelayedConfig(0' TimeSpan.Zero)' new FailedConfig(ErrorQueueAddress' new HashSet<Type>()))' " is 144.
Long Statement,NServiceBus.Core.Tests.Reliability.Outbox,TransportReceiveToPhysicalMessageConnectorTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Reliability\Outbox\TransportReceiveToPhysicalMessageConnectorTests.cs,Should_honor_stored_delivery_constraints,The length of the statement  "            Assert.True(fakeBatchPipeline.TransportOperations.First().DeliveryConstraints.TryGet(out DelayDeliveryWith delayDeliveryWith)); " is 127.
Long Statement,NServiceBus.Core.Tests.Reliability.Outbox,TransportReceiveToPhysicalMessageConnectorTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Reliability\Outbox\TransportReceiveToPhysicalMessageConnectorTests.cs,Should_honor_stored_delivery_constraints,The length of the statement  "            Assert.True(fakeBatchPipeline.TransportOperations.First().DeliveryConstraints.TryGet(out DoNotDeliverBefore doNotDeliverBefore)); " is 129.
Long Statement,NServiceBus.Core.Tests.Reliability.Outbox,TransportReceiveToPhysicalMessageConnectorTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Reliability\Outbox\TransportReceiveToPhysicalMessageConnectorTests.cs,Should_honor_stored_delivery_constraints,The length of the statement  "            Assert.True(fakeBatchPipeline.TransportOperations.First().DeliveryConstraints.TryGet(out DiscardIfNotReceivedBefore discard)); " is 126.
Long Statement,NServiceBus.Core.Tests.Routing,AssemblyRouteSourceTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Routing\AssemblyRouteSourceTests.cs,It_returns_only_message_types,The length of the statement  "            var source = new AssemblyRouteSource(Assembly.GetExecutingAssembly()' UnicastRoute.CreateFromEndpointName("Destination")); " is 122.
Long Statement,NServiceBus.Core.Tests.Routing,AssemblyRouteSourceTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Routing\AssemblyRouteSourceTests.cs,It_throws_if_specified_assembly_contains_no_message_types,The length of the statement  "            Assert.That(() => source.GenerateRoutes(new Conventions()).ToArray()' Throws.Exception.Message.Contains("Cannot configure routing for assembly")); " is 146.
Long Statement,NServiceBus.Core.Tests.Routing,DetermineRouteForReplyBehaviorTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Routing\DetermineRouteForReplyBehaviorTests.cs,Should_throw_if_incoming_message_has_no_reply_to_address,The length of the statement  "            Assert.That(async () => await behavior.Invoke(context' _ => TaskEx.CompletedTask)' Throws.InstanceOf<Exception>().And.Message.Contains(typeof(MyReply).FullName)); " is 162.
Long Statement,NServiceBus.Core.Tests.Routing,MessageDrivenSubscribeTerminatorTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Routing\MessageDrivenSubscribeTerminatorTests.cs,SetUp,The length of the statement  "            publishers.AddOrReplacePublishers("A"' new List<PublisherTableEntry> {new PublisherTableEntry(typeof(object)' PublisherAddress.CreateFromPhysicalAddresses("publisher1"))}); " is 172.
Long Statement,NServiceBus.Core.Tests.Routing,AssemblyPublisherSourceTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Routing\MessageDrivenSubscriptions\AssemblyPublisherSourceTests.cs,It_returns_only_event_types,The length of the statement  "            var source = new AssemblyPublisherSource(Assembly.GetExecutingAssembly()' PublisherAddress.CreateFromEndpointName("Destination")); " is 130.
Long Statement,NServiceBus.Core.Tests.Routing,AssemblyPublisherSourceTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Routing\MessageDrivenSubscriptions\AssemblyPublisherSourceTests.cs,It_throws_if_specified_assembly_contains_no_message_types,The length of the statement  "            var source = new AssemblyPublisherSource(typeof(string).Assembly' PublisherAddress.CreateFromEndpointName("Destination")); " is 122.
Long Statement,NServiceBus.Core.Tests.Routing,AssemblyPublisherSourceTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Routing\MessageDrivenSubscriptions\AssemblyPublisherSourceTests.cs,It_throws_if_specified_assembly_contains_no_message_types,The length of the statement  "            Assert.That(() => source.GenerateWithBestPracticeEnforcement(new Conventions()).ToArray()' Throws.Exception.Message.Contains("Cannot configure publisher for assembly")); " is 169.
Long Statement,NServiceBus.Core.Tests.Routing,AssemblyPublisherSourceTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Routing\MessageDrivenSubscriptions\AssemblyPublisherSourceTests.cs,Without_best_practice_enforcement_it_throws_if_specified_assembly_contains_only_commands,The length of the statement  "            var source = new AssemblyPublisherSource(typeof(string).Assembly' PublisherAddress.CreateFromEndpointName("Destination")); " is 122.
Long Statement,NServiceBus.Core.Tests.Routing,AssemblyPublisherSourceTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Routing\MessageDrivenSubscriptions\AssemblyPublisherSourceTests.cs,Without_best_practice_enforcement_it_throws_if_specified_assembly_contains_only_commands,The length of the statement  "            Assert.That(() => source.GenerateWithoutBestPracticeEnforcement(conventionBuilder.Conventions).ToArray()' Throws.Exception.Message.Contains("Cannot configure publisher for assembly")); " is 184.
Long Statement,NServiceBus.Core.Tests.Routing,NamespacePublisherSourceTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Routing\MessageDrivenSubscriptions\NamespacePublisherSourceTests.cs,It_returns_only_event_types,The length of the statement  "            var source = new NamespacePublisherSource(Assembly.GetExecutingAssembly()' "NServiceBus.Core.Tests.Routing.NamespacePublisherSourceTest"' PublisherAddress.CreateFromEndpointName("Destination")); " is 194.
Long Statement,NServiceBus.Core.Tests.Routing,NamespacePublisherSourceTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Routing\MessageDrivenSubscriptions\NamespacePublisherSourceTests.cs,It_returns_only_types_from_specified_namespace,The length of the statement  "            var source = new NamespacePublisherSource(Assembly.GetExecutingAssembly()' "NServiceBus.Core.Tests.Routing.NamespacePublisherSourceTest"' PublisherAddress.CreateFromEndpointName("Destination")); " is 194.
Long Statement,NServiceBus.Core.Tests.Routing,NamespacePublisherSourceTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Routing\MessageDrivenSubscriptions\NamespacePublisherSourceTests.cs,It_matches_namespace_in_case_insensitive_way,The length of the statement  "            var source = new NamespacePublisherSource(Assembly.GetExecutingAssembly()' "NServiceBus.Core.Tests.Routing.NAMESPACEpublisherSOURCEtest"' PublisherAddress.CreateFromEndpointName("Destination")); " is 194.
Long Statement,NServiceBus.Core.Tests.Routing,NamespacePublisherSourceTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Routing\MessageDrivenSubscriptions\NamespacePublisherSourceTests.cs,It_throws_if_specified_namespace_contains_no_message_types,The length of the statement  "            var source = new NamespacePublisherSource(Assembly.GetExecutingAssembly()' "NServiceBus.Core.Tests.Routing.NamespacePublisherSourceTest.NoMessages"' PublisherAddress.CreateFromEndpointName("Destination")); " is 205.
Long Statement,NServiceBus.Core.Tests.Routing,NamespacePublisherSourceTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Routing\MessageDrivenSubscriptions\NamespacePublisherSourceTests.cs,It_throws_if_specified_namespace_contains_no_message_types,The length of the statement  "            Assert.That(() => source.GenerateWithBestPracticeEnforcement(new Conventions()).ToArray()' Throws.Exception.Message.Contains("Cannot configure publisher for namespace")); " is 170.
Long Statement,NServiceBus.Core.Tests.Routing,NamespacePublisherSourceTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Routing\MessageDrivenSubscriptions\NamespacePublisherSourceTests.cs,Without_best_practice_enforcement_it_throws_if_specified_assembly_contains_only_commands,The length of the statement  "            var source = new NamespacePublisherSource(Assembly.GetExecutingAssembly()' "NServiceBus.Core.Tests.Routing.NamespacePublisherSourceTest.Commands"' PublisherAddress.CreateFromEndpointName("Destination")); " is 203.
Long Statement,NServiceBus.Core.Tests.Routing,NamespacePublisherSourceTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Routing\MessageDrivenSubscriptions\NamespacePublisherSourceTests.cs,Without_best_practice_enforcement_it_throws_if_specified_assembly_contains_only_commands,The length of the statement  "            Assert.That(() => source.GenerateWithoutBestPracticeEnforcement(new Conventions()).ToArray()' Throws.Exception.Message.Contains("Cannot configure publisher for namespace")); " is 173.
Long Statement,NServiceBus.Core.Tests.Routing,TypePublisherSourceTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Routing\MessageDrivenSubscriptions\TypePublisherSourceTests.cs,It_throws_if_specified_type_is_not_a_message,The length of the statement  "            Assert.That(() => source.GenerateWithBestPracticeEnforcement(new Conventions()).ToArray()' Throws.Exception.Message.Contains("it is not considered a message")); " is 160.
Long Statement,NServiceBus.Core.Tests.Routing,TypePublisherSourceTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Routing\MessageDrivenSubscriptions\TypePublisherSourceTests.cs,It_throws_if_specified_type_is_not_an_event,The length of the statement  "            Assert.That(() => source.GenerateWithBestPracticeEnforcement(new Conventions()).ToArray()' Throws.Exception.Message.Contains("it is not considered an event")); " is 159.
Long Statement,NServiceBus.Core.Tests.Routing,TypePublisherSourceTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Routing\MessageDrivenSubscriptions\TypePublisherSourceTests.cs,Without_best_practice_enforcement_it_throws_if_specified_type_is_not_a_message,The length of the statement  "            Assert.That(() => source.GenerateWithoutBestPracticeEnforcement(new Conventions()).ToArray()' Throws.Exception.Message.Contains("it is not considered a message")); " is 163.
Long Statement,NServiceBus.Core.Tests.Routing,TypePublisherSourceTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Routing\MessageDrivenSubscriptions\TypePublisherSourceTests.cs,Without_best_practice_enforcement_it_throws_if_specified_type_is_a_command,The length of the statement  "            Assert.That(() => source.GenerateWithoutBestPracticeEnforcement(new Conventions()).ToArray()' Throws.Exception.Message.Contains("because it is a command")); " is 156.
Long Statement,NServiceBus.Core.Tests.Routing,MessageDrivenUnsubscribeTerminatorTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Routing\MessageDrivenUnsubscribeTerminatorTests.cs,SetUp,The length of the statement  "            publishers.AddOrReplacePublishers("A"' new List<PublisherTableEntry> {new PublisherTableEntry(typeof(object)' PublisherAddress.CreateFromPhysicalAddresses("publisher1"))}); " is 172.
Long Statement,NServiceBus.Core.Tests.Routing,MessageDrivenUnsubscribeTerminatorTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Routing\MessageDrivenUnsubscribeTerminatorTests.cs,Should_Throw_when_max_retries_reached,The length of the statement  "            Assert.That(async () => await terminator.Invoke(context' c => TaskEx.CompletedTask)' Throws.InstanceOf<QueueNotFoundException>()); " is 130.
Long Statement,NServiceBus.Core.Tests.Routing,NamespaceRouteSourceTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Routing\NamespaceRouteSourceTests.cs,It_returns_only_message_types,The length of the statement  "            var source = new NamespaceRouteSource(Assembly.GetExecutingAssembly()' "NServiceBus.Core.Tests.Routing.NamespaceRouteSourceTest"' UnicastRoute.CreateFromEndpointName("Destination")); " is 182.
Long Statement,NServiceBus.Core.Tests.Routing,NamespaceRouteSourceTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Routing\NamespaceRouteSourceTests.cs,It_returns_only_types_from_specified_namespace,The length of the statement  "            var source = new NamespaceRouteSource(Assembly.GetExecutingAssembly()' "NServiceBus.Core.Tests.Routing.NamespaceRouteSourceTest"' UnicastRoute.CreateFromEndpointName("Destination")); " is 182.
Long Statement,NServiceBus.Core.Tests.Routing,NamespaceRouteSourceTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Routing\NamespaceRouteSourceTests.cs,It_matches_namespace_in_case_insensitive_way,The length of the statement  "            var source = new NamespaceRouteSource(Assembly.GetExecutingAssembly()' "NServiceBus.Core.Tests.Routing.NAMESPACErouteSOURCEtest"' UnicastRoute.CreateFromEndpointName("Destination")); " is 182.
Long Statement,NServiceBus.Core.Tests.Routing,NamespaceRouteSourceTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Routing\NamespaceRouteSourceTests.cs,It_throws_if_specified_namespace_contains_no_message_types,The length of the statement  "            var source = new NamespaceRouteSource(Assembly.GetExecutingAssembly()' "NServiceBus.Core.Tests.Routing.NamespaceRouteSourceTest.NoMessages"' UnicastRoute.CreateFromEndpointName("Destination")); " is 193.
Long Statement,NServiceBus.Core.Tests.Routing,NamespaceRouteSourceTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Routing\NamespaceRouteSourceTests.cs,It_throws_if_specified_namespace_contains_no_message_types,The length of the statement  "            Assert.That(() => source.GenerateRoutes(new Conventions()).ToArray()' Throws.Exception.Message.Contains("Cannot configure routing for namespace")); " is 147.
Long Statement,NServiceBus.Core.Tests.Routing,UnicastSendRouterTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Routing\Routers\UnicastSendRouterTests.cs,Should_throw_if_requested_to_route_to_local_instance_and_instance_has_no_specific_queue,The length of the statement  "            Assert.AreEqual(exception.Message' "Cannot route to a specific instance because an endpoint instance discriminator was not configured for the destination endpoint. It can be specified via EndpointConfiguration.MakeInstanceUniquelyAddressable(string discriminator)."); " is 267.
Long Statement,NServiceBus.Core.Tests.Routing,UnicastSendRouterTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Routing\Routers\UnicastSendRouterTests.cs,When_routing_to_specific_instance_should_throw_when_route_for_given_type_points_to_physical_address,The length of the statement  "            StringAssert.Contains("Routing to a specific instance is only allowed if route is defined for a logical endpoint' not for an address or instance."' exception.Message); " is 167.
Long Statement,NServiceBus.Core.Tests.Routing,RoutingPolicyTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Routing\RoutingPolicyTests.cs,InvokeDistributionStrategy,The length of the statement  "            return policy.GetDistributionStrategy(endpointName' DistributionStrategyScope.Send).SelectDestination(new DistributionContext(instanceAddress' null' null' null' null' null)); " is 174.
Long Statement,NServiceBus.Core.Tests.Routing,RoutingSettingsTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Routing\RoutingSettingsTests.cs,WhenPassingTransportAddressForSenderInsteadOfEndpointName_ShouldThrowException,The length of the statement  "            var exception = Assert.Throws<ArgumentException>(() => routingSettings.RouteToEndpoint(typeof(MessageWithoutNamespace)' "EndpointName@MyHost")); " is 144.
Long Statement,NServiceBus.Core.Tests.Routing,RoutingSettingsTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Routing\RoutingSettingsTests.cs,WhenPassingTransportAddressForSenderInsteadOfEndpointName_UsingAssembly_ShouldThrowException,The length of the statement  "            var exception = Assert.Throws<ArgumentException>(() => routingSettings.RouteToEndpoint(Assembly.GetExecutingAssembly()' "EndpointName@MyHost")); " is 144.
Long Statement,NServiceBus.Core.Tests.Routing,RoutingSettingsTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Routing\RoutingSettingsTests.cs,WhenPassingTransportAddressForSenderInsteadOfEndpointName_UsingAssemblyAndNamespace_ShouldThrowException,The length of the statement  "            var exception = Assert.Throws<ArgumentException>(() => routingSettings.RouteToEndpoint(Assembly.GetExecutingAssembly()' nameof(MessageNamespaceA)' "EndpointName@MyHost")); " is 171.
Long Statement,NServiceBus.Core.Tests.Routing,RoutingToDispatchConnectorTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Routing\RoutingToDispatchConnectorTests.cs,Should_preserve_headers_generated_by_custom_routing_strategy,The length of the statement  "            await behavior.Invoke(new TestableRoutingContext { RoutingStrategies = new List<RoutingStrategy> { new CustomRoutingStrategy() } }' context => " is 142.
Long Statement,NServiceBus.Core.Tests.Routing,RoutingToDispatchConnectorTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Routing\RoutingToDispatchConnectorTests.cs,CreateContext,The length of the statement  "            var context = new OutgoingSendContext(new OutgoingLogicalMessage(message.GetType()' message)' options.UserDefinedMessageId ?? Guid.NewGuid().ToString()' options.OutgoingHeaders' options.Context' new FakeRootContext()); " is 218.
Long Statement,NServiceBus.Core.Tests.Routing,TypeRouteSourceTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Routing\TypeRouteSourceTests.cs,It_throws_if_specified_type_is_not_a_message,The length of the statement  "            Assert.That(() => source.GenerateRoutes(new Conventions()).ToArray()' Throws.Exception.Message.Contains("it is not considered a message")); " is 139.
Long Statement,NServiceBus.Core.Tests.Routing,UnicastPublisherRouterTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Routing\UnicastPublisherRouterTests.cs,When_multiple_subscribers_for_logical_endpoints_should_route_event_to_a_single_instance_of_each_logical_endpoint,The length of the statement  "            var routes = (await router.Route(typeof(Event)' new DistributionPolicy()' new TestableOutgoingPublishContext())).ToArray(); " is 123.
Long Statement,NServiceBus.Core.Tests.Routing.MessageDrivenSubscriptions,RoutingSettingsTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Routing\MessageDrivenSubscriptions\MessageDrivenSubscriptionsConfigExtensionsTests.cs,WhenPassingTransportAddressForPublisherInsteadOfEndpointName_ShouldThrowException,The length of the statement  "            var exception = Assert.Throws<ArgumentException>(() => routingSettings.RegisterPublisher(typeof(Event)' "EndpointName@MyHost")); " is 128.
Long Statement,NServiceBus.Core.Tests.Routing.MessageDrivenSubscriptions,RoutingSettingsTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Routing\MessageDrivenSubscriptions\MessageDrivenSubscriptionsConfigExtensionsTests.cs,WhenPassingTransportAddressForPublisherInsteadOfEndpointName_UsingAssembly_ShouldThrowException,The length of the statement  "            var exception = Assert.Throws<ArgumentException>(() => routingSettings.RegisterPublisher(Assembly.GetExecutingAssembly()' "EndpointName@MyHost")); " is 146.
Long Statement,NServiceBus.Core.Tests.Routing.MessageDrivenSubscriptions,RoutingSettingsTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Routing\MessageDrivenSubscriptions\MessageDrivenSubscriptionsConfigExtensionsTests.cs,WhenPassingTransportAddressForPublisherInsteadOfEndpointName_UsingAssemblyAndNamespace_ShouldThrowException,The length of the statement  "            var exception = Assert.Throws<ArgumentException>(() => routingSettings.RegisterPublisher(Assembly.GetExecutingAssembly()' nameof(EventNamespace)' "EndpointName@MyHost")); " is 170.
Long Statement,NServiceBus.Core.Tests.Routing.MessageDrivenSubscriptions,PublishersTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Routing\MessageDrivenSubscriptions\PublishersTests.cs,When_same_publisher_is_registered_multiple_times_should_remove_duplicates,The length of the statement  "            var pub3 = PublisherAddress.CreateFromEndpointInstances(new EndpointInstance("Instance1")' new EndpointInstance("Instance2")); " is 126.
Long Statement,NServiceBus.Core.Tests.Routing.MessageDrivenSubscriptions,PublishersTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Routing\MessageDrivenSubscriptions\PublishersTests.cs,When_same_publisher_is_registered_multiple_times_should_remove_duplicates,The length of the statement  "            var pub4 = PublisherAddress.CreateFromEndpointInstances(new EndpointInstance("Instance1")' new EndpointInstance("Instance2")); " is 126.
Long Statement,NServiceBus.Core.Tests.Sagas,CustomFinderAdapterTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Sagas\CustomFinderAdapterTests.cs,Throws_friendly_exception_when_IFindSagas_FindBy_returns_null,The length of the statement  "            Assert.That(async () => await customerFinderAdapter.Find(builder' finderDefinition' new InMemorySynchronizedStorageSession()' new ContextBag()' new StartSagaMessage())' " is 168.
Long Statement,NServiceBus.Core.Tests.Sagas,InvokeSagaNotFoundBehaviorTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Sagas\InvokeSagaNotFoundBehaviorTests.cs,Throw_friendly_exception_when_any_IHandleSagaNotFound_Handler_returns_null,The length of the statement  "            incomingContext.Builder.Register<IHandleSagaNotFound>(new HandleSagaNotFoundReturnsNull1()' new HandleSagaNotFoundValid()); " is 123.
Long Statement,NServiceBus.Core.Tests.Sagas,InvokeSagaNotFoundBehaviorTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Sagas\InvokeSagaNotFoundBehaviorTests.cs,Throw_friendly_exception_when_any_IHandleSagaNotFound_Handler_returns_null,The length of the statement  "            Assert.That(async () => await behavior.Invoke(incomingContext' SetSagaNotFound)' Throws.Exception.With.Message.EqualTo("Return a Task or mark the method as async.")); " is 166.
Long Statement,NServiceBus.Core.Tests.Sagas.TypeBasedSagas,SagaMetadataCreationTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Sagas\SagaMetadataCreationTests.cs,When_finder_for_non_message,The length of the statement  "            var exception = Assert.Throws<Exception>(() => { SagaMetadata.Create(typeof(SagaWithNonMessageFinder)' availableTypes' new Conventions()); }); " is 142.
Long Statement,NServiceBus.Core.Tests.Sagas.TypeBasedSagas,SagaMetadataCreationTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Sagas\SagaMetadataCreationTests.cs,When_finder_for_non_message,The length of the statement  "            Assert.AreEqual("A custom IFindSagas must target a valid message type as defined by the message conventions. Change 'NServiceBus.Core.Tests.Sagas.TypeBasedSagas.SagaMetadataCreationTests+SagaWithNonMessageFinder+StartSagaMessage' to a valid message type or add it to the message conventions. Finder name 'NServiceBus.Core.Tests.Sagas.TypeBasedSagas.SagaMetadataCreationTests+SagaWithNonMessageFinder+Finder'."' exception.Message); " is 430.
Long Statement,NServiceBus.Core.Tests.Sagas.TypeBasedSagas,SagaMetadataCreationTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Sagas\SagaMetadataCreationTests.cs,When_message_only_has_custom_finder,The length of the statement  "            Assert.AreEqual(typeof(CustomFinderAdapter<SagaWithFinderOnly.SagaData' SagaWithFinderOnly.StartSagaMessage>)' metadata.Finders.First().Type); " is 142.
Long Statement,NServiceBus.Core.Tests.Sagas.TypeBasedSagas,SagaMetadataCreationTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Sagas\SagaMetadataCreationTests.cs,When_a_finder_and_a_mapping_exists_for_same_property,The length of the statement  "            var exception = Assert.Throws<Exception>(() => { SagaMetadata.Create(typeof(SagaWithMappingAndFinder)' availableTypes' new Conventions()); }); " is 142.
Long Statement,NServiceBus.Core.Tests.Sagas.TypeBasedSagas,SagaMetadataCreationTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Sagas\SagaMetadataCreationTests.cs,When_a_finder_and_a_mapping_exists_for_same_property,The length of the statement  "            Assert.AreEqual("A custom IFindSagas and an existing mapping where found for message 'NServiceBus.Core.Tests.Sagas.TypeBasedSagas.SagaMetadataCreationTests+SagaWithMappingAndFinder+StartSagaMessage'. Either remove the message mapping or remove the finder. Finder name 'NServiceBus.Core.Tests.Sagas.TypeBasedSagas.SagaMetadataCreationTests+SagaWithMappingAndFinder+Finder'."' exception.Message); " is 394.
Long Statement,NServiceBus.Core.Tests.Sagas.TypeBasedSagas,SagaMetadataCreationTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Sagas\SagaMetadataCreationTests.cs,ValidateThatMappingOnSagaIdHasTypeGuidForMessageProps,The length of the statement  "            var ex = Assert.Throws<InvalidOperationException>(() => SagaMetadata.Create(typeof(SagaWithIdMappedToNonGuidMessageProperty))); " is 127.
Long Statement,NServiceBus.Core.Tests.Sagas.TypeBasedSagas,SagaMetadataCreationTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Sagas\SagaMetadataCreationTests.cs,ValidateThatMappingOnSagaIdFromStringToGuidForMessagePropsThrowsException,The length of the statement  "            var ex = Assert.Throws<InvalidOperationException>(() => SagaMetadata.Create(typeof(SagaWithIdMappedToStringMessageProperty))); " is 126.
Long Statement,NServiceBus.Core.Tests.Sagas.TypeBasedSagas,SagaMetadataCreationTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Sagas\SagaMetadataCreationTests.cs,ValidateThatMappingOnNonSagaIdGuidPropertyFromStringToGuidForMessagePropsThrowsException,The length of the statement  "            var ex = Assert.Throws<InvalidOperationException>(() => SagaMetadata.Create(typeof(SagaWithNonIdPropertyMappedToStringMessageProperty))); " is 137.
Long Statement,NServiceBus.Core.Tests.Sagas.TypeBasedSagas,SagaMetadataCreationTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Sagas\SagaMetadataCreationTests.cs,ValidateThatMappingOnSagaIdHasTypeGuidForMessageFields,The length of the statement  "            var ex = Assert.Throws<InvalidOperationException>(() => SagaMetadata.Create(typeof(SagaWithIdMappedToNonGuidMessageField))); " is 124.
Long Statement,NServiceBus.Core.Tests.Sagas.TypeBasedSagas,SagaMetadataCreationTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Sagas\SagaMetadataCreationTests.cs,ValidateThatSagaPropertyIsNotAField,The length of the statement  "            var ex = Assert.Throws<InvalidOperationException>(() => SagaMetadata.Create(typeof(SagaWithSagaDataMemberAsFieldInsteadOfProperty))); " is 133.
Long Statement,NServiceBus.Core.Tests.Sagas.TypeBasedSagas,SagaMetadataCreationTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Sagas\SagaMetadataCreationTests.cs,ValidateThrowsWhenSagaMapsMessageItDoesntHandle,The length of the statement  "            Assert.That(ex.Message.Contains("does not handle that message") && ex.Message.Contains("in the ConfigureHowToFindSaga method")); " is 128.
Long Statement,NServiceBus.Core.Tests.Sagas.TypeBasedSagas,SagaMetadataCreationTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Sagas\SagaMetadataCreationTests.cs,ValidateThrowsWhenSagaCustomFinderMapsMessageItDoesntHandle,The length of the statement  "            var ex = Assert.Throws<Exception>(() => SagaMetadata.Create(typeof(SagaWithCustomFinderForMessageItDoesntHandle)' availableTypes' new Conventions())); " is 150.
Long Statement,NServiceBus.Core.Tests.Sagas.TypeBasedSagas,SagaModelTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Sagas\SagaModelTests.cs,ValidateAssumptionsAboutSagaMappings,The length of the statement  "            Assert.AreEqual(1' metadata.AssociatedMessages.Count(am => am.MessageTypeName == typeof(Message1).FullName && am.IsAllowedToStartSaga)); " is 136.
Long Statement,NServiceBus.Core.Tests.Sagas.TypeBasedSagas,SagaModelTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Sagas\SagaModelTests.cs,ValidateAssumptionsAboutSagaMappings,The length of the statement  "            Assert.AreEqual(1' metadata.AssociatedMessages.Count(am => am.MessageTypeName == typeof(Message2).FullName && !am.IsAllowedToStartSaga)); " is 137.
Long Statement,NServiceBus.Core.Tests.Sagas.TypeBasedSagas,When_saga_has_multiple_correlated_properties,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Sagas\When_saga_has_multiple_correlated_properties.cs,Should_throw,The length of the statement  "            var exception = Assert.Throws<Exception>(() => SagaMetadata.Create(typeof(SagaWithMultipleCorrelatedProperties)' new List<Type>()' new Conventions())); " is 151.
Long Statement,NServiceBus.Core.Tests.Sagas.TypeBasedSagas,When_saga_has_no_start_message,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Sagas\When_saga_has_no_start_message.cs,Should_throw,The length of the statement  "            var ex = Assert.Throws<Exception>(() => SagaMetadata.Create(typeof(SagaWithNoStartMessage)' new List<Type>()' new Conventions())); " is 130.
Long Statement,NServiceBus.Core.Tests.Sagas.TypeBasedSagas,When_saga_is_correlated_on_a_unsupported_property_type,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Sagas\When_saga_is_correlated_on_a_unsupported_property_type.cs,Should_throw,The length of the statement  "            var ex = Assert.Throws<Exception>(() => SagaMetadata.Create(typeof(SagaWithNoStartMessage)' new List<Type>()' new Conventions())); " is 130.
Long Statement,NServiceBus.Scheduling.Tests,ScheduledTaskHandlingBehaviorTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Scheduler\ScheduledTaskHandlingBehaviorTests.cs,When_triggering_a_scheduled_task_should_reschedule_at_configured_interval,The length of the statement  "            var deferredMessage = logicalContext.SentMessages.First(message => message.Options.GetDeliveryDelay().HasValue).Message<ScheduledTask>(); " is 137.
Long Statement,NServiceBus.Core.Tests.Serializers,MessageDeserializerResolverTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\MessageDeserializerResolverTests.cs,MultipleDeserializersWithSameContentTypeShouldThrowException,The length of the statement  "            })' Throws.Exception.TypeOf<Exception>().And.Message.Contains($"Multiple deserializers are registered for content-type '{deserializer1.ContentType}'. Remove ambiguous deserializers.")); " is 185.
Long Statement,NServiceBus.Serializers.XML.Test,SerializerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\SerializerTests.cs,Should_infer_message_type_from_root_node_if_type_is_known,The length of the statement  "                writer.WriteLine("<NServiceBus.Serializers.XML.Test.MessageWithDouble><Double>23.4</Double></NServiceBus.Serializers.XML.Test.MessageWithDouble>"); " is 147.
Long Statement,NServiceBus.Serializers.XML.Test,SerializerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\SerializerTests.cs,Should_be_able_to_serialize_single_message_without_wrapping_xml_raw_data,The length of the statement  "                .AssertResultingXml(d => d.DocumentElement.ChildNodes[0].FirstChild.Name != "Document"' "Property name should not be available"); " is 129.
Long Statement,NServiceBus.Serializers.XML.Test,SerializerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\SerializerTests.cs,Should_be_able_to_serialize_single_message_without_wrapping_xml_raw_data,The length of the statement  "                .AssertResultingXml(d => d.DocumentElement.ChildNodes[0].FirstChild.Name != "Document"' "Property name should not be available"); " is 129.
Long Statement,NServiceBus.Serializers.XML.Test,SerializerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\SerializerTests.cs,Should_be_able_to_serialize_single_message_with_default_namespaces,The length of the statement  "            var expected = @"<EmptyMessage xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"" xmlns=""http://tempuri.net/NServiceBus.Serializers.XML.Test""></EmptyMessage>"; " is 213.
Long Statement,NServiceBus.Serializers.XML.Test,SerializerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\SerializerTests.cs,Should_be_able_to_serialize_single_message_with_specified_namespaces,The length of the statement  "            var expected = @"<EmptyMessage xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"" xmlns=""http://super.com/NServiceBus.Serializers.XML.Test""></EmptyMessage>"; " is 211.
Long Statement,NServiceBus.Serializers.XML.Test,SerializerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\SerializerTests.cs,Should_be_able_to_serialize_single_message_with_specified_namespace_with_trailing_forward_slashes,The length of the statement  "            var expected = @"<EmptyMessage xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"" xmlns=""http://super.com/NServiceBus.Serializers.XML.Test""></EmptyMessage>"; " is 211.
Long Statement,NServiceBus.Serializers.XML.Test,SerializerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\SerializerTests.cs,SerializeClosedGenericListsInAlternateNamespaceMultipleIEnumerableImplementations,The length of the statement  "            var serializer = SerializerFactory.Create<MessageWithClosedListInAlternateNamespaceMultipleIEnumerableImplementations>(); " is 121.
Long Statement,NServiceBus.Serializers.XML.Test,SerializerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\SerializerTests.cs,NestedObjectWithNullPropertiesShouldBeSerialized,The length of the statement  "            var result = ExecuteSerializer.ForMessage<MessageWithNestedObject>(m => { m.NestedObject = new MessageWithNullProperty(); }); " is 125.
Long Statement,NServiceBus.Serializers.XML.Test,SerializerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\SerializerTests.cs,System_classes_with_non_default_constructors_should_be_supported,The length of the statement  "            Assert.AreEqual(message.BodyEncoding.EncoderFallback.MaxCharCount' result.MailMessage.BodyEncoding.EncoderFallback.MaxCharCount); " is 129.
Long Statement,NServiceBus.Serializers.XML.Test,SerializerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\SerializerTests.cs,When_Using_Property_WithXContainerAssignable_should_preserve_xml,The length of the statement  "            const string XmlElement = "<SomeClass xmlns=\"http://nservicebus.com\"><SomeProperty value=\"Bar\" ></SomeProperty></SomeClass>"; " is 129.
Long Statement,NServiceBus.Serializers.XML.Test,SerializerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\SerializerTests.cs,Should_be_able_to_deserialize_many_messages_of_same_type,The length of the statement  "<Messages xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"" xmlns=""http://tempuri.net/NServiceBus.Serializers.XML.Test""> " is 175.
Long Statement,NServiceBus.Serializers.XML.Test,SerializingArrayTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\SerializingArrayTests.cs,CanDeserializeXmlWithWhitespace,The length of the statement  "<Messages xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"" xmlns=""http://tempuri.net/NServiceBus.Serializers.XML.Test""> " is 175.
Long Statement,NServiceBus.Serializers.XML.Test,SerializingArrayTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\SerializingArrayTests.cs,CanSerializeNullableArrayWithNullString,The length of the statement  "<MessageWithNullableArray xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"" xmlns=""http://tempuri.net/NServiceBus.Serializers.XML.Test""> " is 191.
Long Statement,NServiceBus.Serializers.XML.Test,SerializingArrayTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\SerializingArrayTests.cs,CanDeserializeNullableArrayWithValueSetToNullString,The length of the statement  "<MessageWithNullableArray xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"" xmlns=""http://tempuri.net/NServiceBus.Serializers.XML.Test""> " is 191.
Long Statement,NServiceBus.Serializers.XML.Test,SerializingArrayTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\SerializingArrayTests.cs,CanDeserializeNullableArrayWithValueSetToNullString,The length of the statement  "                var msgArray = SerializerFactory.Create<MessageWithNullableArray>().Deserialize(stream' new[] { typeof(MessageWithNullableArray) }); " is 132.
Long Statement,NServiceBus.Serializers.XML.Test,SerializingArrayTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\SerializingArrayTests.cs,CanDeserializeNullableArrayWithFirstEntryXsiNilAttributeSetToTrue,The length of the statement  "<MessageWithNullableArray xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"" xmlns=""http://tempuri.net/NServiceBus.Serializers.XML.Test""> " is 191.
Long Statement,NServiceBus.Serializers.XML.Test,SerializingArrayTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\SerializingArrayTests.cs,CanDeserializeNullableArrayWithFirstEntryXsiNilAttributeSetToTrue,The length of the statement  "                var msgArray = SerializerFactory.Create<MessageWithNullableArray>().Deserialize(stream' new[] { typeof(MessageWithNullableArray) }); " is 132.
Long Statement,NServiceBus.Serializers.XML.Test,SerializingArrayTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\SerializingArrayTests.cs,CanDeserializeNullableArrayWithXsiNilAttributeSetToTrue,The length of the statement  "<MessageWithNullableArray xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"" xmlns=""http://tempuri.net/NServiceBus.Serializers.XML.Test""> " is 191.
Long Statement,NServiceBus.Serializers.XML.Test,SerializingArrayTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\SerializingArrayTests.cs,CanDeserializeNullableArrayWithXsiNilAttributeSetToTrue,The length of the statement  "                var msgArray = SerializerFactory.Create<MessageWithNullableArray>().Deserialize(stream' new[] { typeof(MessageWithNullableArray) }); " is 132.
Long Statement,NServiceBus.Serializers.XML.Test,SerializingArrayTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\SerializingArrayTests.cs,CanDeserializeNullableArrayWithNoElementsToEmptyList,The length of the statement  "<MessageWithNullableArray xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"" xmlns=""http://tempuri.net/NServiceBus.Serializers.XML.Test""> " is 191.
Long Statement,NServiceBus.Serializers.XML.Test,SerializingArrayTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\SerializingArrayTests.cs,CanDeserializeNullableArrayWithNoElementsToEmptyList,The length of the statement  "                var msgArray = SerializerFactory.Create<MessageWithNullableArray>().Deserialize(stream' new[] { typeof(MessageWithNullableArray) }); " is 132.
Long Statement,NServiceBus.Serializers.XML.Test,SerializingArrayTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\SerializingArrayTests.cs,CanDeserializeNullableArrayWithValueSetToEmptyString,The length of the statement  "<MessageWithNullableArray xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"" xmlns=""http://tempuri.net/NServiceBus.Serializers.XML.Test""> " is 191.
Long Statement,NServiceBus.Serializers.XML.Test,SerializingArrayTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\SerializingArrayTests.cs,CanDeserializeNullableArrayWithValueSetToEmptyString,The length of the statement  "                var msgArray = SerializerFactory.Create<MessageWithNullableArray>().Deserialize(stream' new[] { typeof(MessageWithNullableArray) }); " is 132.
Long Statement,NServiceBus.Serializers.XML.Test,SerializingNullableTypesTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\SerializingNullableTypesTests.cs,NullableTypesSerializeToXsiNilWhenNull,The length of the statement  "<MessageWithNullable xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"" xmlns=""http://tempuri.net/NServiceBus.Serializers.XML.Test""> " is 186.
Long Statement,NServiceBus.Serializers.XML.Test,SerializingNullableTypesTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\SerializingNullableTypesTests.cs,NullableTypeSerializeToValueWhenNotNull,The length of the statement  "<MessageWithNullable xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"" xmlns=""http://tempuri.net/NServiceBus.Serializers.XML.Test""> " is 186.
Long Statement,NServiceBus.Serializers.XML.Test,SerializingNullableTypesTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\SerializingNullableTypesTests.cs,CanDeserializeNilMessage,The length of the statement  "<MessageWithNullable xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"" xmlns=""http://tempuri.net/NServiceBus.Serializers.XML.Test""> " is 186.
Long Statement,NServiceBus.Serializers.XML.Test,SerializingNullableTypesTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\SerializingNullableTypesTests.cs,CanDeserializeNilMessage,The length of the statement  "                var msgArray = SerializerFactory.Create<MessageWithNullable>().Deserialize(stream' new[] { typeof(MessageWithNullable) }); " is 122.
Long Statement,NServiceBus.Serializers.XML.Test,SerializingNullableTypesTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\SerializingNullableTypesTests.cs,CanDeserializeOriginalNullValueMessage,The length of the statement  "<MessageWithNullable xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"" xmlns=""http://tempuri.net/NServiceBus.Serializers.XML.Test""> " is 186.
Long Statement,NServiceBus.Serializers.XML.Test,SerializingNullableTypesTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\SerializingNullableTypesTests.cs,CanDeserializeOriginalNullValueMessage,The length of the statement  "                var msgArray = SerializerFactory.Create<MessageWithNullable>().Deserialize(stream' new[] { typeof(MessageWithNullable) }); " is 122.
Long Statement,NServiceBus.Core.Tests.Serializers.XML,Using_Infer_Type_With_Mixed_Namespace,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\Using_Infer_Type_With_Mixed_Namespace.cs,Execute,The length of the statement  "                var serializer = SerializerFactory.Create(typeof(IMyBusMessage)' typeof(Namespace1.FirstMessage)' typeof(Namespace2.FirstMessage)); " is 131.
Long Statement,NServiceBus.Core.Tests.Transports,TransportOperationsTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Transports\TransportOperationsTests.cs,Should_split_multicast_and_unicast_messages,The length of the statement  "            var unicastOperation = new TransportOperation(CreateUniqueMessage()' new UnicastAddressTag("destination")' DispatchConsistency.Isolated); " is 137.
Long Statement,NServiceBus.Core.Tests.Transports,TransportOperationsTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Transports\TransportOperationsTests.cs,Should_split_multicast_and_unicast_messages,The length of the statement  "            var multicastOperation = new TransportOperation(CreateUniqueMessage()' new MulticastAddressTag(typeof(object))' DispatchConsistency.Default); " is 141.
Long Statement,NServiceBus.Core.Tests.Transports,TransportReceiverTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Transports\TransportReceiverTests.cs,SetUp,The length of the statement  "            receiver = new TransportReceiver("FakeReceiver"' pump' new PushSettings("queue"' "queue"' true' TransportTransactionMode.SendsAtomicWithReceive)' new PushRuntimeSettings()' null' null' null); " is 191.
Long Statement,NServiceBus.Core.Tests.Transports.Learning,LearningTransportDispatcherTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Transports\Learning\LearningTransportDispatcherTests.cs,Should_throw_for_size_above_threshold,The length of the statement  "            await dispatcher.Dispatch(new TransportOperations(new TransportOperation(messageAtThreshold' new UnicastAddressTag("my-destination")))' new TransportTransaction()' new ContextBag()); " is 182.
Long Statement,NServiceBus.Core.Tests.Transports.Learning,LearningTransportDispatcherTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Transports\Learning\LearningTransportDispatcherTests.cs,Should_throw_for_size_above_threshold,The length of the statement  "            var ex = Assert.ThrowsAsync<Exception>(async () => await dispatcher.Dispatch(new TransportOperations(new TransportOperation(messageAboveThreshold' new UnicastAddressTag("my-destination")))' new TransportTransaction()' new ContextBag())); " is 237.
Long Statement,NServiceBus.Unicast.Tests,LoadHandlersBehaviorTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Unicast\LoadHandlersBehaviorTests.cs,Should_throw_when_there_are_no_registered_message_handlers,The length of the statement  "            var behavior = new LoadHandlersConnector(new MessageHandlerRegistry()' new InMemorySynchronizedStorage()' new InMemoryTransactionalSynchronizedStorageAdapter()); " is 161.
Long Statement,NServiceBus.Unicast.Tests,When_replying,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Unicast\MessagingBestPracticesTests.cs,Should_throw_for_command,The length of the statement  "                Assert.AreEqual($"Best practice violation for message type '{typeof(MyCommand).FullName}'. Reply is not supported for commands or events. Commands should be sent to their logical owner. Events should be published."' invalidOperationException.Message); " is 251.
Long Statement,NServiceBus.Unicast.Tests,When_replying,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Unicast\MessagingBestPracticesTests.cs,Should_throw_for_event,The length of the statement  "                Assert.AreEqual($"Best practice violation for message type '{typeof(MyEvent).FullName}'. Reply is not supported for commands or events. Commands should be sent to their logical owner. Events should be published."' invalidOperationException.Message); " is 249.
Long Statement,NServiceBus.Unicast.Tests,When_pubsub,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Unicast\MessagingBestPracticesTests.cs,Should_throw_for_command,The length of the statement  "                Assert.AreEqual($"Best practice violation for message type '{typeof(MyCommand).FullName}'. Pub/sub is not supported for commands' so they should be be sent to their logical owner instead."' invalidOperationException.Message); " is 225.
Long Statement,NServiceBus.Unicast.Tests,UnitOfWorkBehaviorTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\UnitOfWork\UnitOfWorkBehaviorTests.cs,Should_append_end_exception_to_rethrow,The length of the statement  "            Assert.That(async () => await InvokeBehavior(builder)' Throws.InvalidOperationException.And.SameAs(unitOfWork.ExceptionThrownFromEnd)); " is 135.
Long Statement,NServiceBus.Unicast.Tests,UnitOfWorkBehaviorTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\UnitOfWork\UnitOfWorkBehaviorTests.cs,Should_pass_exception_to_cleanup,The length of the statement  "            Assert.That(async () => await InvokeBehavior(builder)' Throws.InstanceOf<InvalidOperationException>().And.SameAs(throwingUoW.ExceptionThrownFromEnd)); " is 150.
Long Statement,NServiceBus.Core.Utils.Reflection,ExtensionMethodsTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Utils\Reflection\ExtensionMethodsTests.cs,SerializationFriendlyNameTests,The length of the statement  "            Assert.AreEqual("DictionaryOfStringAndTupleOfInt32"' typeof(Dictionary<string' Tuple<int>>).SerializationFriendlyName()); " is 121.
Long Statement,NServiceBus.Core.Utils.Reflection,ExtensionMethodsTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Utils\Reflection\ExtensionMethodsTests.cs,SerializationFriendlyNameTests,The length of the statement  "            Assert.AreEqual("NServiceBus.KeyValuePairOfStringAndTupleOfInt32"' typeof(KeyValuePair<string' Tuple<int>>).SerializationFriendlyName()); " is 137.
Long Statement,NServiceBus.Core.Utils.Reflection,ExtensionMethodsTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Utils\Reflection\ExtensionMethodsTests.cs,Should_return_return_different_results_for_different_types,The length of the statement  "            // This test verifies whether the added cache doesn't break the execution if called successively for two different types " is 120.
Long Statement,NServiceBus.Core.Utils.Reflection,When_is_a_nested_property,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Utils\Reflection\ReflectTests.cs,Should_throw_when_dots_not_allowed,The length of the statement  "                var argumentException = Assert.Throws<ArgumentException>(() => Reflect<Target1>.GetProperty(target => target.Property1.Property2' true)); " is 137.
Long Statement,NServiceBus.Core.Utils.Reflection,When_is_a_nested_property,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Utils\Reflection\ReflectTests.cs,Should_throw_when_dots_not_allowed,The length of the statement  "                StringAssert.StartsWith("Argument passed contains more than a single dot which is not allowed: target => target.Property1.Property2"' argumentException.Message); " is 161.
Complex Conditional,NServiceBus.Core.Tests,ArgumentExceptionTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\ArgumentExceptionTests.cs,WriteAllPublicMembersWithNoArgumentChecking,The conditional expression  "method.Parameters.All(x => x.IsOut || x.IsReturnValue || x.HasDefault || x.ParameterType.IsValueType)"  is complex.
Complex Conditional,NServiceBus.Core.Tests,StructConventionsTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\StructConventionsTests.cs,ApproveStructsWhichDontFollowStructGuidelines,The conditional expression  "!type.IsValueType || type.IsEnum || type.IsSpecialName || type.Namespace == null || !type.Namespace.StartsWith("NServiceBus") || type.FullName.Contains("__")"  is complex.
Empty Catch Block,NServiceBus.Core.Tests.Timeout.TimeoutManager,ExpiredTimeoutsPollerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\DelayedDelivery\TimeoutManager\ExpiredTimeoutsPollerTests.cs,Poll_with_same_start_slice_from_last_failed_dispatch,The method has an empty catch block.
Magic Number,NServiceBus.Core.Tests,DateTimeExtensionsTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\DateTimeExtensionsTests.cs,When_roundtripping_constructed_date_should_be_equal,The following statement contains a magic number: var date = new DateTime(2016' 8' 29' 16' 37' 25' 75' DateTimeKind.Utc);
Magic Number,NServiceBus.Core.Tests,DateTimeExtensionsTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\DateTimeExtensionsTests.cs,When_roundtripping_constructed_date_should_be_equal,The following statement contains a magic number: var date = new DateTime(2016' 8' 29' 16' 37' 25' 75' DateTimeKind.Utc);
Magic Number,NServiceBus.Core.Tests,DateTimeExtensionsTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\DateTimeExtensionsTests.cs,When_roundtripping_constructed_date_should_be_equal,The following statement contains a magic number: var date = new DateTime(2016' 8' 29' 16' 37' 25' 75' DateTimeKind.Utc);
Magic Number,NServiceBus.Core.Tests,DateTimeExtensionsTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\DateTimeExtensionsTests.cs,When_roundtripping_constructed_date_should_be_equal,The following statement contains a magic number: var date = new DateTime(2016' 8' 29' 16' 37' 25' 75' DateTimeKind.Utc);
Magic Number,NServiceBus.Core.Tests,DateTimeExtensionsTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\DateTimeExtensionsTests.cs,When_roundtripping_constructed_date_should_be_equal,The following statement contains a magic number: var date = new DateTime(2016' 8' 29' 16' 37' 25' 75' DateTimeKind.Utc);
Magic Number,NServiceBus.Core.Tests,DateTimeExtensionsTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\DateTimeExtensionsTests.cs,When_roundtripping_constructed_date_should_be_equal,The following statement contains a magic number: var date = new DateTime(2016' 8' 29' 16' 37' 25' 75' DateTimeKind.Utc);
Magic Number,NServiceBus.Core.Tests,DateTimeExtensionsTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\DateTimeExtensionsTests.cs,When_roundtripping_constructed_date_should_be_equal,The following statement contains a magic number: var date = new DateTime(2016' 8' 29' 16' 37' 25' 75' DateTimeKind.Utc);
Magic Number,NServiceBus.Core.Tests.AssemblyScanner,AssemblyScannerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\AssemblyScanner\AssemblyScannerTests.cs,Assemblies_with_direct_reference_are_included,The following statement contains a magic number: Assert.AreEqual(2' result.Assemblies.Count);
Magic Number,NServiceBus.Core.Tests.AssemblyScanner,AssemblyScannerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\AssemblyScanner\AssemblyScannerTests.cs,Assemblies_with_no_reference_are_excluded,The following statement contains a magic number: Assert.AreEqual(2' result.Assemblies.Count);
Magic Number,NServiceBus.Core.Tests.AssemblyScanner,AssemblyScannerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\AssemblyScanner\AssemblyScannerTests.cs,Assemblies_which_reference_older_nsb_version_are_included,The following statement contains a magic number: var busAssemblyV2 = new DynamicAssembly("Fake.NServiceBus.Core"' version: new Version(2' 0' 0)' fakeIdentity: true);
Magic Number,NServiceBus.Core.Tests.AssemblyScanner,AssemblyScannerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\AssemblyScanner\AssemblyScannerTests.cs,Assemblies_which_reference_older_nsb_version_are_included,The following statement contains a magic number: Assert.AreEqual(3' result.Assemblies.Count);
Magic Number,NServiceBus.Core.Tests.AssemblyScanner,AssemblyScannerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\AssemblyScanner\AssemblyScannerTests.cs,Assemblies_with_transitive_references_are_included,The following statement contains a magic number: Assert.AreEqual(5' result.Assemblies.Count);
Magic Number,NServiceBus.Core.Tests.Audit,AuditConfigReaderTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Audit\AuditConfigReaderTests.cs,ShouldReturnConfiguredExpiration,The following statement contains a magic number: var configuredExpiration = TimeSpan.FromSeconds(10);
Magic Number,NServiceBus.Core.Tests.DataBus.FileShare,AcceptanceTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\DataBus\FileShare\AcceptanceTests.cs,Should_handle_be_able_to_read_stored_values_concurrently,The following statement contains a magic number: Parallel.For(0' 10' async i =>              {                  using (var stream = await dataBus.Get(key))                  using (var streamReader = new StreamReader(stream))                  {                      Assert.AreEqual(await streamReader.ReadToEndAsync()' content);                  }              });
Magic Number,NServiceBus.Core.Tests.Timeout,DelayedDeliveryOptionExtensionsTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\DelayedDelivery\DelayedDeliveryOptionExtensionsTests.cs,GetDeliveryDelayShouldReturnTheConfiguredDelayTimeSpan,The following statement contains a magic number: var delay = TimeSpan.FromMinutes(42);
Magic Number,NServiceBus.Core.Tests.Timeout,DelayedDeliveryOptionExtensionsTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\DelayedDelivery\DelayedDeliveryOptionExtensionsTests.cs,GetDeliveryDateShouldReturnTheConfiguredDeliveryDate,The following statement contains a magic number: DateTimeOffset deliveryDate = new DateTime(2012' 12' 12' 12' 12' 12);
Magic Number,NServiceBus.Core.Tests.Timeout,DelayedDeliveryOptionExtensionsTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\DelayedDelivery\DelayedDeliveryOptionExtensionsTests.cs,GetDeliveryDateShouldReturnTheConfiguredDeliveryDate,The following statement contains a magic number: DateTimeOffset deliveryDate = new DateTime(2012' 12' 12' 12' 12' 12);
Magic Number,NServiceBus.Core.Tests.Timeout,DelayedDeliveryOptionExtensionsTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\DelayedDelivery\DelayedDeliveryOptionExtensionsTests.cs,GetDeliveryDateShouldReturnTheConfiguredDeliveryDate,The following statement contains a magic number: DateTimeOffset deliveryDate = new DateTime(2012' 12' 12' 12' 12' 12);
Magic Number,NServiceBus.Core.Tests.Timeout,DelayedDeliveryOptionExtensionsTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\DelayedDelivery\DelayedDeliveryOptionExtensionsTests.cs,GetDeliveryDateShouldReturnTheConfiguredDeliveryDate,The following statement contains a magic number: DateTimeOffset deliveryDate = new DateTime(2012' 12' 12' 12' 12' 12);
Magic Number,NServiceBus.Core.Tests.Timeout,DelayedDeliveryOptionExtensionsTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\DelayedDelivery\DelayedDeliveryOptionExtensionsTests.cs,GetDeliveryDateShouldReturnTheConfiguredDeliveryDate,The following statement contains a magic number: DateTimeOffset deliveryDate = new DateTime(2012' 12' 12' 12' 12' 12);
Magic Number,NServiceBus.Core.Tests.Timeout,DelayedDeliveryOptionExtensionsTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\DelayedDelivery\DelayedDeliveryOptionExtensionsTests.cs,GetDeliveryDateShouldReturnTheConfiguredDeliveryDate,The following statement contains a magic number: DateTimeOffset deliveryDate = new DateTime(2012' 12' 12' 12' 12' 12);
Magic Number,NServiceBus.Core.Tests.Timeout,RouteDeferredMessageToTimeoutManagerBehaviorTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\DelayedDelivery\RouteDeferredMessageToTimeoutManagerBehaviorTests.cs,Cannot_be_combined_with_time_to_be_received,The following statement contains a magic number: var context = CreateContext(new UnicastRoutingStrategy("target")' new DelayDeliveryWith(delay)' new DiscardIfNotReceivedBefore(TimeSpan.FromSeconds(30)));
Magic Number,NServiceBus.Core.Tests.Timeout,InMemoryTimeoutPersisterTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Timeout\InMemoryTimeoutPersisterTests.cs,When_empty_NextTimeToRunQuery_is_1_minute,The following statement contains a magic number: Assert.That(result.NextTimeToQuery' Is.EqualTo(now.AddMinutes(1)).Within(100).Milliseconds);
Magic Number,NServiceBus.Core.Tests.Timeout,InMemoryTimeoutPersisterTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Timeout\InMemoryTimeoutPersisterTests.cs,When_multiple_NextTimeToRunQuery_is_min_date,The following statement contains a magic number: await persister.Add(new TimeoutData                            {                                Time = DateTime.UtcNow.AddDays(2)                            }' new ContextBag());
Magic Number,NServiceBus.Core.Tests.Timeout,InMemoryTimeoutPersisterTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Timeout\InMemoryTimeoutPersisterTests.cs,When_multiple_future_are_returned,The following statement contains a magic number: await persister.Add(new TimeoutData                            {                                Time = DateTime.UtcNow.AddDays(-2)                            }' new ContextBag());
Magic Number,NServiceBus.Core.Tests.Timeout,InMemoryTimeoutPersisterTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Timeout\InMemoryTimeoutPersisterTests.cs,When_multiple_future_are_returned,The following statement contains a magic number: await persister.Add(new TimeoutData                            {                                Time = DateTime.UtcNow.AddDays(-4)                            }' new ContextBag());
Magic Number,NServiceBus.Core.Tests.Timeout,InMemoryTimeoutPersisterTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Timeout\InMemoryTimeoutPersisterTests.cs,When_multiple_future_are_returned,The following statement contains a magic number: var result = await persister.GetNextChunk(DateTime.UtcNow.AddDays(-3));
Magic Number,NServiceBus.Core.Tests.Timeout,InMemoryTimeoutPersisterTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Timeout\InMemoryTimeoutPersisterTests.cs,When_multiple_future_are_returned,The following statement contains a magic number: Assert.AreEqual(2' result.DueTimeouts.Count());
Magic Number,NServiceBus.Core.Tests.Timeout,InMemoryTimeoutPersisterTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Timeout\InMemoryTimeoutPersisterTests.cs,When_all_in_past_NextTimeToRunQuery_is_1_minute,The following statement contains a magic number: await persister.Add(new TimeoutData                            {                                Time = DateTime.UtcNow.AddDays(-3)                            }' new ContextBag());
Magic Number,NServiceBus.Core.Tests.Timeout,InMemoryTimeoutPersisterTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Timeout\InMemoryTimeoutPersisterTests.cs,When_all_in_past_NextTimeToRunQuery_is_1_minute,The following statement contains a magic number: await persister.Add(new TimeoutData                            {                                Time = DateTime.UtcNow.AddDays(-2)                            }' new ContextBag());
Magic Number,NServiceBus.Core.Tests.Timeout,InMemoryTimeoutPersisterTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Timeout\InMemoryTimeoutPersisterTests.cs,When_all_in_past_NextTimeToRunQuery_is_1_minute,The following statement contains a magic number: Assert.That(result.NextTimeToQuery' Is.EqualTo(now.AddMinutes(1)).Within(100).Milliseconds);
Magic Number,NServiceBus.Core.Tests.Timeout,When_fetching_timeouts_from_storage_with_inMemory,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Timeout\When_fetching_timeouts_from_storage.cs,Should_only_return_timeouts_for_time_slice,The following statement contains a magic number: const int numberOfTimeoutsToAdd = 10;
Magic Number,NServiceBus.Core.Tests.Timeout,When_fetching_timeouts_from_storage_with_inMemory,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Timeout\When_fetching_timeouts_from_storage.cs,Should_set_the_next_run,The following statement contains a magic number: const int numberOfTimeoutsToAdd = 50;
Magic Number,NServiceBus.Core.Tests.Timeout,When_fetching_timeouts_from_storage_with_inMemory,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Timeout\When_fetching_timeouts_from_storage.cs,Should_set_the_next_run,The following statement contains a magic number: Assert.True(totalMilliseconds < 200);
Magic Number,NServiceBus.Core.Tests.Timeout,When_fetching_timeouts_from_storage_with_inMemory,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Timeout\When_fetching_timeouts_from_storage.cs,GetNextChunk,The following statement contains a magic number: return persister.GetNextChunk(DateTime.UtcNow.AddYears(-3));
Magic Number,NServiceBus.Core.Tests.Timeout.TimeoutManager,ExpiredTimeoutsPollerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\DelayedDelivery\TimeoutManager\ExpiredTimeoutsPollerTests.cs,Returns_to_normal_poll_cycle_after_dispatching_a_non_pushed_timeout,The following statement contains a magic number: var timeout2 = timeout1.Add(TimeSpan.FromMilliseconds(HalfOfDefaultInMemoryPersisterSleep.Milliseconds/2));
Magic Number,NServiceBus.Core.Tests.Timeout.TimeoutManager,ExpiredTimeoutsPollerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\DelayedDelivery\TimeoutManager\ExpiredTimeoutsPollerTests.cs,Returns_to_normal_poll_cycle_after_dispatching_a_non_pushed_timeout,The following statement contains a magic number: Assert.AreEqual(2' dispatcher.DispatchedMessages.Count);
Magic Number,NServiceBus.Core.Tests.Timeout.TimeoutManager,ExpiredTimeoutsPollerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\DelayedDelivery\TimeoutManager\ExpiredTimeoutsPollerTests.cs,Poll_with_same_start_slice_from_last_failed_dispatch,The following statement contains a magic number: RegisterNewTimeout(currentTime.Subtract(TimeSpan.FromMinutes(5)));
Magic Number,NServiceBus.Core.Tests.Features,FeatureDefaultsTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Features\FeatureDefaultsTests.cs,Should_enable_features_in_defaults,The following statement contains a magic number: Assert.IsInstanceOf<Activate3>(defaultsOrder[2]' "Upstream dependencies should be activated first");
Magic Number,NServiceBus.Core.Tests.Features,FeatureDefaultsTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Features\FeatureDefaultsTests.cs,Should_activate_all_upstream_dependencies_first,The following statement contains a magic number: Assert.IsInstanceOf<MyFeature3>(defaultsOrder[2]' "Upstream dependencies should be activated first");
Magic Number,NServiceBus.Core.Tests.Features,FeatureDefaultsTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Features\FeatureDefaultsTests.cs,Should_activate_all_upstream_dependencies_when_chain_deep,The following statement contains a magic number: Assert.IsInstanceOf<Level3>(defaultsOrder[2]' "Upstream dependencies should be activated first");
Magic Number,NServiceBus.Core.Tests.Features,FeatureDependencyTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Features\FeatureDependencyTests.cs,Should_activate_all_upstream_dependencies_first,The following statement contains a magic number: Assert.IsInstanceOf<MyFeature3>(order[2]' "Upstream dependencies should be activated first");
Magic Number,NServiceBus.Core.Tests.Features,FeatureDependencyTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Features\FeatureDependencyTests.cs,Should_activate_all_upstream_dependencies_when_chain_deep,The following statement contains a magic number: Assert.IsInstanceOf<Level3>(order[2]' "Upstream dependencies should be activated first");
Magic Number,NServiceBus.Core.Tests.Handlers,MessageHandlerRegistryTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Handlers\MessageHandlerRegistryTests.cs,ShouldIndicateWhetherAHandlerIsATimeoutHandler,The following statement contains a magic number: Assert.AreEqual(2' handlers.Count);
Magic Number,NServiceBus.Core.Tests.Licensing,LicenseManagerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Licensing\LicenseManagerTests.cs,WhenTrialLicenseAboutToExpire,The following statement contains a magic number: var today = new DateTime(2012' 12' 12);
Magic Number,NServiceBus.Core.Tests.Licensing,LicenseManagerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Licensing\LicenseManagerTests.cs,WhenTrialLicenseAboutToExpire,The following statement contains a magic number: var today = new DateTime(2012' 12' 12);
Magic Number,NServiceBus.Core.Tests.Licensing,LicenseManagerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Licensing\LicenseManagerTests.cs,WhenTrialLicenseAboutToExpire,The following statement contains a magic number: var today = new DateTime(2012' 12' 12);
Magic Number,NServiceBus.Core.Tests.Licensing,LicenseManagerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Licensing\LicenseManagerTests.cs,WhenSubscriptionAboutToExpire,The following statement contains a magic number: var today = new DateTime(2012' 12' 12);
Magic Number,NServiceBus.Core.Tests.Licensing,LicenseManagerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Licensing\LicenseManagerTests.cs,WhenSubscriptionAboutToExpire,The following statement contains a magic number: var today = new DateTime(2012' 12' 12);
Magic Number,NServiceBus.Core.Tests.Licensing,LicenseManagerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Licensing\LicenseManagerTests.cs,WhenSubscriptionAboutToExpire,The following statement contains a magic number: var today = new DateTime(2012' 12' 12);
Magic Number,NServiceBus.Core.Tests.Licensing,LicenseManagerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Licensing\LicenseManagerTests.cs,WhenUpgradeProtectionAboutToExpire,The following statement contains a magic number: var today = new DateTime(2012' 12' 12);
Magic Number,NServiceBus.Core.Tests.Licensing,LicenseManagerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Licensing\LicenseManagerTests.cs,WhenUpgradeProtectionAboutToExpire,The following statement contains a magic number: var today = new DateTime(2012' 12' 12);
Magic Number,NServiceBus.Core.Tests.Licensing,LicenseManagerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Licensing\LicenseManagerTests.cs,WhenUpgradeProtectionAboutToExpire,The following statement contains a magic number: var today = new DateTime(2012' 12' 12);
Magic Number,NServiceBus.Core.Tests.Licensing,LicenseManagerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Licensing\LicenseManagerTests.cs,WhenUpgradeProtectionExpiredForFutureVersions,The following statement contains a magic number: var today = new DateTime(2012' 12' 12);
Magic Number,NServiceBus.Core.Tests.Licensing,LicenseManagerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Licensing\LicenseManagerTests.cs,WhenUpgradeProtectionExpiredForFutureVersions,The following statement contains a magic number: var today = new DateTime(2012' 12' 12);
Magic Number,NServiceBus.Core.Tests.Licensing,LicenseManagerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Licensing\LicenseManagerTests.cs,WhenUpgradeProtectionExpiredForFutureVersions,The following statement contains a magic number: var today = new DateTime(2012' 12' 12);
Magic Number,NServiceBus.Core.Tests.Licensing,LicenseManagerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Licensing\LicenseManagerTests.cs,WhenUpgradeProtectionExpiredForFutureVersions,The following statement contains a magic number: var license = new License              {                  utcDateTimeProvider = () => today'                  releaseDateProvider = () => today.AddDays(-20)'                  UpgradeProtectionExpiration = today.AddDays(-10)              };
Magic Number,NServiceBus.Core.Tests.Licensing,LicenseManagerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Licensing\LicenseManagerTests.cs,WhenUpgradeProtectionExpiredForFutureVersions,The following statement contains a magic number: var license = new License              {                  utcDateTimeProvider = () => today'                  releaseDateProvider = () => today.AddDays(-20)'                  UpgradeProtectionExpiration = today.AddDays(-10)              };
Magic Number,NServiceBus.Core.Tests.Logging,RollingLoggerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Logging\RollingLoggerTests.cs,When_file_already_exists_that_file_is_written_to,The following statement contains a magic number: var dateTime = new DateTime(2010' 10' 1);
Magic Number,NServiceBus.Core.Tests.Logging,RollingLoggerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Logging\RollingLoggerTests.cs,When_file_already_exists_that_file_is_written_to,The following statement contains a magic number: var dateTime = new DateTime(2010' 10' 1);
Magic Number,NServiceBus.Core.Tests.Logging,RollingLoggerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Logging\RollingLoggerTests.cs,When_file_is_deleted_underneath_continues_to_write_afterwards,The following statement contains a magic number: var logger = new RollingLogger(tempPath.TempDirectory)                  {                      GetDate = () => new DateTime(2010' 10' 1)                  };
Magic Number,NServiceBus.Core.Tests.Logging,RollingLoggerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Logging\RollingLoggerTests.cs,When_file_is_deleted_underneath_continues_to_write_afterwards,The following statement contains a magic number: var logger = new RollingLogger(tempPath.TempDirectory)                  {                      GetDate = () => new DateTime(2010' 10' 1)                  };
Magic Number,NServiceBus.Core.Tests.Logging,RollingLoggerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Logging\RollingLoggerTests.cs,When_file_is_locked_exception_is_swallowed,The following statement contains a magic number: var logger = new RollingLogger(tempPath.TempDirectory)                  {                      GetDate = () => new DateTime(2010' 10' 1)                  };
Magic Number,NServiceBus.Core.Tests.Logging,RollingLoggerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Logging\RollingLoggerTests.cs,When_file_is_locked_exception_is_swallowed,The following statement contains a magic number: var logger = new RollingLogger(tempPath.TempDirectory)                  {                      GetDate = () => new DateTime(2010' 10' 1)                  };
Magic Number,NServiceBus.Core.Tests.Logging,RollingLoggerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Logging\RollingLoggerTests.cs,When_file_is_deleted_underneath_immediately_before_write,The following statement contains a magic number: var logger = new RollingLoggerThatDeletesBeforeWrite(tempPath.TempDirectory)                  {                      GetDate = () => new DateTime(2010' 10' 1)                  };
Magic Number,NServiceBus.Core.Tests.Logging,RollingLoggerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Logging\RollingLoggerTests.cs,When_file_is_deleted_underneath_immediately_before_write,The following statement contains a magic number: var logger = new RollingLoggerThatDeletesBeforeWrite(tempPath.TempDirectory)                  {                      GetDate = () => new DateTime(2010' 10' 1)                  };
Magic Number,NServiceBus.Core.Tests.Logging,RollingLoggerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Logging\RollingLoggerTests.cs,When_file_already_exists_and_is_too_large_a_new_sequence_file_is_written,The following statement contains a magic number: var dateTime = new DateTime(2010' 10' 1);
Magic Number,NServiceBus.Core.Tests.Logging,RollingLoggerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Logging\RollingLoggerTests.cs,When_file_already_exists_and_is_too_large_a_new_sequence_file_is_written,The following statement contains a magic number: var dateTime = new DateTime(2010' 10' 1);
Magic Number,NServiceBus.Core.Tests.Logging,RollingLoggerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Logging\RollingLoggerTests.cs,When_file_already_exists_and_is_too_large_a_new_sequence_file_is_written,The following statement contains a magic number: var logger1 = new RollingLogger(tempPath.TempDirectory' maxFileSize: 10)                  {                      GetDate = () => dateTime                  };
Magic Number,NServiceBus.Core.Tests.Logging,RollingLoggerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Logging\RollingLoggerTests.cs,When_file_already_exists_and_is_too_large_a_new_sequence_file_is_written,The following statement contains a magic number: var logger2 = new RollingLogger(tempPath.TempDirectory' maxFileSize: 10)                  {                      GetDate = () => dateTime                  };
Magic Number,NServiceBus.Core.Tests.Logging,RollingLoggerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Logging\RollingLoggerTests.cs,When_file_already_exists_and_is_too_large_a_new_sequence_file_is_written,The following statement contains a magic number: Assert.AreEqual(2' files.Count);
Magic Number,NServiceBus.Core.Tests.Logging,RollingLoggerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Logging\RollingLoggerTests.cs,When_file_already_exists_with_wrong_date_a_file_is_written,The following statement contains a magic number: var logger1 = new RollingLogger(tempPath.TempDirectory)                  {                      GetDate = () => new DateTime(2010' 10' 1)                  };
Magic Number,NServiceBus.Core.Tests.Logging,RollingLoggerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Logging\RollingLoggerTests.cs,When_file_already_exists_with_wrong_date_a_file_is_written,The following statement contains a magic number: var logger1 = new RollingLogger(tempPath.TempDirectory)                  {                      GetDate = () => new DateTime(2010' 10' 1)                  };
Magic Number,NServiceBus.Core.Tests.Logging,RollingLoggerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Logging\RollingLoggerTests.cs,When_file_already_exists_with_wrong_date_a_file_is_written,The following statement contains a magic number: var logger2 = new RollingLogger(tempPath.TempDirectory' maxFileSize: 10)                  {                      GetDate = () => new DateTime(2010' 10' 2)                  };
Magic Number,NServiceBus.Core.Tests.Logging,RollingLoggerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Logging\RollingLoggerTests.cs,When_file_already_exists_with_wrong_date_a_file_is_written,The following statement contains a magic number: var logger2 = new RollingLogger(tempPath.TempDirectory' maxFileSize: 10)                  {                      GetDate = () => new DateTime(2010' 10' 2)                  };
Magic Number,NServiceBus.Core.Tests.Logging,RollingLoggerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Logging\RollingLoggerTests.cs,When_file_already_exists_with_wrong_date_a_file_is_written,The following statement contains a magic number: var logger2 = new RollingLogger(tempPath.TempDirectory' maxFileSize: 10)                  {                      GetDate = () => new DateTime(2010' 10' 2)                  };
Magic Number,NServiceBus.Core.Tests.Logging,RollingLoggerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Logging\RollingLoggerTests.cs,When_file_already_exists_with_wrong_date_a_file_is_written,The following statement contains a magic number: var logger2 = new RollingLogger(tempPath.TempDirectory' maxFileSize: 10)                  {                      GetDate = () => new DateTime(2010' 10' 2)                  };
Magic Number,NServiceBus.Core.Tests.Logging,RollingLoggerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Logging\RollingLoggerTests.cs,When_file_already_exists_with_wrong_date_a_file_is_written,The following statement contains a magic number: Assert.AreEqual(2' files.Count);
Magic Number,NServiceBus.Core.Tests.Logging,RollingLoggerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Logging\RollingLoggerTests.cs,When_max_file_size_is_exceeded_sequence_number_is_added,The following statement contains a magic number: var logger = new RollingLogger(tempPath.TempDirectory' maxFileSize: 10)                  {                      GetDate = () => new DateTime(2010' 10' 1)                  };
Magic Number,NServiceBus.Core.Tests.Logging,RollingLoggerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Logging\RollingLoggerTests.cs,When_max_file_size_is_exceeded_sequence_number_is_added,The following statement contains a magic number: var logger = new RollingLogger(tempPath.TempDirectory' maxFileSize: 10)                  {                      GetDate = () => new DateTime(2010' 10' 1)                  };
Magic Number,NServiceBus.Core.Tests.Logging,RollingLoggerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Logging\RollingLoggerTests.cs,When_max_file_size_is_exceeded_sequence_number_is_added,The following statement contains a magic number: var logger = new RollingLogger(tempPath.TempDirectory' maxFileSize: 10)                  {                      GetDate = () => new DateTime(2010' 10' 1)                  };
Magic Number,NServiceBus.Core.Tests.Logging,RollingLoggerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Logging\RollingLoggerTests.cs,When_max_file_size_is_exceeded_sequence_number_is_added,The following statement contains a magic number: Assert.AreEqual(2' files.Count);
Magic Number,NServiceBus.Core.Tests.Logging,RollingLoggerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Logging\RollingLoggerTests.cs,When_many_sequence_files_are_written_the_max_is_not_exceeded,The following statement contains a magic number: var logger = new RollingLogger(tempPath.TempDirectory' maxFileSize: 10)                  {                      GetDate = () => new DateTime(2010' 10' 1)                  };
Magic Number,NServiceBus.Core.Tests.Logging,RollingLoggerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Logging\RollingLoggerTests.cs,When_many_sequence_files_are_written_the_max_is_not_exceeded,The following statement contains a magic number: var logger = new RollingLogger(tempPath.TempDirectory' maxFileSize: 10)                  {                      GetDate = () => new DateTime(2010' 10' 1)                  };
Magic Number,NServiceBus.Core.Tests.Logging,RollingLoggerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Logging\RollingLoggerTests.cs,When_many_sequence_files_are_written_the_max_is_not_exceeded,The following statement contains a magic number: var logger = new RollingLogger(tempPath.TempDirectory' maxFileSize: 10)                  {                      GetDate = () => new DateTime(2010' 10' 1)                  };
Magic Number,NServiceBus.Core.Tests.Logging,RollingLoggerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Logging\RollingLoggerTests.cs,When_many_sequence_files_are_written_the_max_is_not_exceeded,The following statement contains a magic number: Assert.LessOrEqual(tempPath.GetFiles().Count' 11);
Magic Number,NServiceBus.Core.Tests.Logging,RollingLoggerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Logging\RollingLoggerTests.cs,When_many_sequence_files_are_written_the_max_is_not_exceeded,The following statement contains a magic number: i < 100
Magic Number,NServiceBus.Core.Tests.Logging,RollingLoggerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Logging\RollingLoggerTests.cs,When_new_write_causes_overlap_of_file_size_line_is_written_to_current_file,The following statement contains a magic number: var logger = new RollingLogger(tempPath.TempDirectory' maxFileSize: 10);
Magic Number,NServiceBus.Core.Tests.Logging,RollingLoggerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Logging\RollingLoggerTests.cs,When_date_changes_new_file_is_written,The following statement contains a magic number: var logger = new RollingLogger(tempPath.TempDirectory)                  {                      GetDate = () => new DateTime(2010' 10' 1)                  };
Magic Number,NServiceBus.Core.Tests.Logging,RollingLoggerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Logging\RollingLoggerTests.cs,When_date_changes_new_file_is_written,The following statement contains a magic number: var logger = new RollingLogger(tempPath.TempDirectory)                  {                      GetDate = () => new DateTime(2010' 10' 1)                  };
Magic Number,NServiceBus.Core.Tests.Logging,RollingLoggerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Logging\RollingLoggerTests.cs,When_date_changes_new_file_is_written,The following statement contains a magic number: logger.GetDate = () => new DateTime(2010' 10' 2);
Magic Number,NServiceBus.Core.Tests.Logging,RollingLoggerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Logging\RollingLoggerTests.cs,When_date_changes_new_file_is_written,The following statement contains a magic number: logger.GetDate = () => new DateTime(2010' 10' 2);
Magic Number,NServiceBus.Core.Tests.Logging,RollingLoggerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Logging\RollingLoggerTests.cs,When_date_changes_new_file_is_written,The following statement contains a magic number: logger.GetDate = () => new DateTime(2010' 10' 2);
Magic Number,NServiceBus.Core.Tests.Logging,RollingLoggerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Logging\RollingLoggerTests.cs,When_date_changes_new_file_is_written,The following statement contains a magic number: Assert.AreEqual(2' files.Count);
Magic Number,NServiceBus.Core.Tests.Logging,RollingLoggerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Logging\RollingLoggerTests.cs,When_getting_todays_log_file_sequence_number_is_used_in_sorting,The following statement contains a magic number: var today = new DateTime(2010' 10' 2);
Magic Number,NServiceBus.Core.Tests.Logging,RollingLoggerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Logging\RollingLoggerTests.cs,When_getting_todays_log_file_sequence_number_is_used_in_sorting,The following statement contains a magic number: var today = new DateTime(2010' 10' 2);
Magic Number,NServiceBus.Core.Tests.Logging,RollingLoggerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Logging\RollingLoggerTests.cs,When_getting_todays_log_file_sequence_number_is_used_in_sorting,The following statement contains a magic number: var today = new DateTime(2010' 10' 2);
Magic Number,NServiceBus.Core.Tests.Logging,RollingLoggerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Logging\RollingLoggerTests.cs,When_getting_todays_log_file_sequence_number_is_used_in_sorting,The following statement contains a magic number: var logFiles = new List<RollingLogger.LogFile>              {                  new RollingLogger.LogFile                  {                      SequenceNumber = 0'                      DatePart = today                  }'                  new RollingLogger.LogFile                  {                      SequenceNumber = 2'                      DatePart = today                  }'              };
Magic Number,NServiceBus.Core.Tests.Logging,RollingLoggerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Logging\RollingLoggerTests.cs,When_getting_todays_log_file_sequence_number_is_used_in_sorting,The following statement contains a magic number: Assert.AreEqual(2' logFile.SequenceNumber);
Magic Number,NServiceBus.Core.Tests.Logging,RollingLoggerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Logging\RollingLoggerTests.cs,When_getting_todays_log_file_only_today_is_respected,The following statement contains a magic number: var today = new DateTime(2010' 10' 2);
Magic Number,NServiceBus.Core.Tests.Logging,RollingLoggerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Logging\RollingLoggerTests.cs,When_getting_todays_log_file_only_today_is_respected,The following statement contains a magic number: var today = new DateTime(2010' 10' 2);
Magic Number,NServiceBus.Core.Tests.Logging,RollingLoggerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Logging\RollingLoggerTests.cs,When_getting_todays_log_file_only_today_is_respected,The following statement contains a magic number: var today = new DateTime(2010' 10' 2);
Magic Number,NServiceBus.Core.Tests.Logging,RollingLoggerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Logging\RollingLoggerTests.cs,When_getting_todays_log_file_only_today_is_respected,The following statement contains a magic number: var yesterday = new DateTime(2010' 10' 1);
Magic Number,NServiceBus.Core.Tests.Logging,RollingLoggerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Logging\RollingLoggerTests.cs,When_getting_todays_log_file_only_today_is_respected,The following statement contains a magic number: var yesterday = new DateTime(2010' 10' 1);
Magic Number,NServiceBus.Core.Tests.Logging,RollingLoggerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Logging\RollingLoggerTests.cs,When_getting_todays_log_file_only_today_is_respected,The following statement contains a magic number: var tomorrow = new DateTime(2010' 10' 3);
Magic Number,NServiceBus.Core.Tests.Logging,RollingLoggerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Logging\RollingLoggerTests.cs,When_getting_todays_log_file_only_today_is_respected,The following statement contains a magic number: var tomorrow = new DateTime(2010' 10' 3);
Magic Number,NServiceBus.Core.Tests.Logging,RollingLoggerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Logging\RollingLoggerTests.cs,When_getting_todays_log_file_only_today_is_respected,The following statement contains a magic number: var tomorrow = new DateTime(2010' 10' 3);
Magic Number,NServiceBus.Core.Tests.Logging,RollingLoggerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Logging\RollingLoggerTests.cs,When_getting_todays_log_file_only_today_is_respected,The following statement contains a magic number: var logFiles = new List<RollingLogger.LogFile>              {                  new RollingLogger.LogFile                  {                      SequenceNumber = 2'                      DatePart = tomorrow                  }'                  new RollingLogger.LogFile                  {                      SequenceNumber = 2'                      DatePart = yesterday                  }'                  new RollingLogger.LogFile                  {                      SequenceNumber = 0'                      DatePart = today                  }'                  new RollingLogger.LogFile                  {                      SequenceNumber = 2'                      DatePart = tomorrow                  }'                  new RollingLogger.LogFile                  {                      SequenceNumber = 2'                      DatePart = yesterday                  }'              };
Magic Number,NServiceBus.Core.Tests.Logging,RollingLoggerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Logging\RollingLoggerTests.cs,When_getting_todays_log_file_only_today_is_respected,The following statement contains a magic number: var logFiles = new List<RollingLogger.LogFile>              {                  new RollingLogger.LogFile                  {                      SequenceNumber = 2'                      DatePart = tomorrow                  }'                  new RollingLogger.LogFile                  {                      SequenceNumber = 2'                      DatePart = yesterday                  }'                  new RollingLogger.LogFile                  {                      SequenceNumber = 0'                      DatePart = today                  }'                  new RollingLogger.LogFile                  {                      SequenceNumber = 2'                      DatePart = tomorrow                  }'                  new RollingLogger.LogFile                  {                      SequenceNumber = 2'                      DatePart = yesterday                  }'              };
Magic Number,NServiceBus.Core.Tests.Logging,RollingLoggerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Logging\RollingLoggerTests.cs,When_getting_todays_log_file_only_today_is_respected,The following statement contains a magic number: var logFiles = new List<RollingLogger.LogFile>              {                  new RollingLogger.LogFile                  {                      SequenceNumber = 2'                      DatePart = tomorrow                  }'                  new RollingLogger.LogFile                  {                      SequenceNumber = 2'                      DatePart = yesterday                  }'                  new RollingLogger.LogFile                  {                      SequenceNumber = 0'                      DatePart = today                  }'                  new RollingLogger.LogFile                  {                      SequenceNumber = 2'                      DatePart = tomorrow                  }'                  new RollingLogger.LogFile                  {                      SequenceNumber = 2'                      DatePart = yesterday                  }'              };
Magic Number,NServiceBus.Core.Tests.Logging,RollingLoggerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Logging\RollingLoggerTests.cs,When_getting_todays_log_file_only_today_is_respected,The following statement contains a magic number: var logFiles = new List<RollingLogger.LogFile>              {                  new RollingLogger.LogFile                  {                      SequenceNumber = 2'                      DatePart = tomorrow                  }'                  new RollingLogger.LogFile                  {                      SequenceNumber = 2'                      DatePart = yesterday                  }'                  new RollingLogger.LogFile                  {                      SequenceNumber = 0'                      DatePart = today                  }'                  new RollingLogger.LogFile                  {                      SequenceNumber = 2'                      DatePart = tomorrow                  }'                  new RollingLogger.LogFile                  {                      SequenceNumber = 2'                      DatePart = yesterday                  }'              };
Magic Number,NServiceBus.Core.Tests.Logging,RollingLoggerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Logging\RollingLoggerTests.cs,When_many_files_written_over_size_old_files_are_deleted,The following statement contains a magic number: var logger = new RollingLogger(tempPath.TempDirectory' numberOfArchiveFilesToKeep: 2' maxFileSize: 5)                  {                      GetDate = () => new DateTime(2010' 10' 1)                  };
Magic Number,NServiceBus.Core.Tests.Logging,RollingLoggerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Logging\RollingLoggerTests.cs,When_many_files_written_over_size_old_files_are_deleted,The following statement contains a magic number: var logger = new RollingLogger(tempPath.TempDirectory' numberOfArchiveFilesToKeep: 2' maxFileSize: 5)                  {                      GetDate = () => new DateTime(2010' 10' 1)                  };
Magic Number,NServiceBus.Core.Tests.Logging,RollingLoggerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Logging\RollingLoggerTests.cs,When_many_files_written_over_size_old_files_are_deleted,The following statement contains a magic number: var logger = new RollingLogger(tempPath.TempDirectory' numberOfArchiveFilesToKeep: 2' maxFileSize: 5)                  {                      GetDate = () => new DateTime(2010' 10' 1)                  };
Magic Number,NServiceBus.Core.Tests.Logging,RollingLoggerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Logging\RollingLoggerTests.cs,When_many_files_written_over_size_old_files_are_deleted,The following statement contains a magic number: var logger = new RollingLogger(tempPath.TempDirectory' numberOfArchiveFilesToKeep: 2' maxFileSize: 5)                  {                      GetDate = () => new DateTime(2010' 10' 1)                  };
Magic Number,NServiceBus.Core.Tests.Logging,RollingLoggerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Logging\RollingLoggerTests.cs,When_many_files_written_over_size_old_files_are_deleted,The following statement contains a magic number: Assert.AreEqual(3' files.Count' "Should be numberOfArchiveFilesToKeep + 1 (the current file) ");
Magic Number,NServiceBus.Core.Tests.Logging,RollingLoggerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Logging\RollingLoggerTests.cs,When_many_files_written_over_size_old_files_are_deleted,The following statement contains a magic number: var third = files[2];
Magic Number,NServiceBus.Core.Tests.Logging,RollingLoggerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Logging\RollingLoggerTests.cs,When_many_files_written_over_dates_old_files_are_deleted,The following statement contains a magic number: var logger = new RollingLogger(tempPath.TempDirectory' numberOfArchiveFilesToKeep: 2)                  {                      GetDate = () => new DateTime(2010' 10' 1)                  };
Magic Number,NServiceBus.Core.Tests.Logging,RollingLoggerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Logging\RollingLoggerTests.cs,When_many_files_written_over_dates_old_files_are_deleted,The following statement contains a magic number: var logger = new RollingLogger(tempPath.TempDirectory' numberOfArchiveFilesToKeep: 2)                  {                      GetDate = () => new DateTime(2010' 10' 1)                  };
Magic Number,NServiceBus.Core.Tests.Logging,RollingLoggerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Logging\RollingLoggerTests.cs,When_many_files_written_over_dates_old_files_are_deleted,The following statement contains a magic number: var logger = new RollingLogger(tempPath.TempDirectory' numberOfArchiveFilesToKeep: 2)                  {                      GetDate = () => new DateTime(2010' 10' 1)                  };
Magic Number,NServiceBus.Core.Tests.Logging,RollingLoggerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Logging\RollingLoggerTests.cs,When_many_files_written_over_dates_old_files_are_deleted,The following statement contains a magic number: logger.GetDate = () => new DateTime(2010' 10' 2);
Magic Number,NServiceBus.Core.Tests.Logging,RollingLoggerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Logging\RollingLoggerTests.cs,When_many_files_written_over_dates_old_files_are_deleted,The following statement contains a magic number: logger.GetDate = () => new DateTime(2010' 10' 2);
Magic Number,NServiceBus.Core.Tests.Logging,RollingLoggerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Logging\RollingLoggerTests.cs,When_many_files_written_over_dates_old_files_are_deleted,The following statement contains a magic number: logger.GetDate = () => new DateTime(2010' 10' 2);
Magic Number,NServiceBus.Core.Tests.Logging,RollingLoggerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Logging\RollingLoggerTests.cs,When_many_files_written_over_dates_old_files_are_deleted,The following statement contains a magic number: logger.GetDate = () => new DateTime(2010' 10' 3);
Magic Number,NServiceBus.Core.Tests.Logging,RollingLoggerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Logging\RollingLoggerTests.cs,When_many_files_written_over_dates_old_files_are_deleted,The following statement contains a magic number: logger.GetDate = () => new DateTime(2010' 10' 3);
Magic Number,NServiceBus.Core.Tests.Logging,RollingLoggerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Logging\RollingLoggerTests.cs,When_many_files_written_over_dates_old_files_are_deleted,The following statement contains a magic number: logger.GetDate = () => new DateTime(2010' 10' 3);
Magic Number,NServiceBus.Core.Tests.Logging,RollingLoggerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Logging\RollingLoggerTests.cs,When_many_files_written_over_dates_old_files_are_deleted,The following statement contains a magic number: logger.GetDate = () => new DateTime(2010' 10' 4);
Magic Number,NServiceBus.Core.Tests.Logging,RollingLoggerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Logging\RollingLoggerTests.cs,When_many_files_written_over_dates_old_files_are_deleted,The following statement contains a magic number: logger.GetDate = () => new DateTime(2010' 10' 4);
Magic Number,NServiceBus.Core.Tests.Logging,RollingLoggerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Logging\RollingLoggerTests.cs,When_many_files_written_over_dates_old_files_are_deleted,The following statement contains a magic number: logger.GetDate = () => new DateTime(2010' 10' 4);
Magic Number,NServiceBus.Core.Tests.Logging,RollingLoggerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Logging\RollingLoggerTests.cs,When_many_files_written_over_dates_old_files_are_deleted,The following statement contains a magic number: logger.GetDate = () => new DateTime(2010' 10' 5);
Magic Number,NServiceBus.Core.Tests.Logging,RollingLoggerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Logging\RollingLoggerTests.cs,When_many_files_written_over_dates_old_files_are_deleted,The following statement contains a magic number: logger.GetDate = () => new DateTime(2010' 10' 5);
Magic Number,NServiceBus.Core.Tests.Logging,RollingLoggerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Logging\RollingLoggerTests.cs,When_many_files_written_over_dates_old_files_are_deleted,The following statement contains a magic number: logger.GetDate = () => new DateTime(2010' 10' 5);
Magic Number,NServiceBus.Core.Tests.Logging,RollingLoggerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Logging\RollingLoggerTests.cs,When_many_files_written_over_dates_old_files_are_deleted,The following statement contains a magic number: Assert.AreEqual(3' files.Count' "Should be numberOfArchiveFilesToKeep + 1 (the current file) ");
Magic Number,NServiceBus.Core.Tests.Logging,RollingLoggerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Logging\RollingLoggerTests.cs,When_many_files_written_over_dates_old_files_are_deleted,The following statement contains a magic number: var third = files[2];
Magic Number,NServiceBus.Core.Tests.Logging,RollingLoggerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Logging\RollingLoggerTests.cs,When_line_is_write_file_has_correct_name,The following statement contains a magic number: var logger = new RollingLogger(tempPath.TempDirectory)                  {                      GetDate = () => new DateTime(2010' 10' 1)                  };
Magic Number,NServiceBus.Core.Tests.Logging,RollingLoggerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Logging\RollingLoggerTests.cs,When_line_is_write_file_has_correct_name,The following statement contains a magic number: var logger = new RollingLogger(tempPath.TempDirectory)                  {                      GetDate = () => new DateTime(2010' 10' 1)                  };
Magic Number,MessageMapperTests,MessageMapperTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\MessageMapper\MessageMapperTests.cs,Initialize_ShouldBeThreadsafe,The following statement contains a magic number: Parallel.For(0' 10' i =>              {                  mapper.Initialize(new[]                  {                      typeof(SampleMessageClass)'                      typeof(ISampleMessageInterface)'                      typeof(ClassImplementingIEnumerable<>)                  });              });
Magic Number,MessageMapperTests,MessageMapperTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\MessageMapper\MessageMapperTests.cs,CreateInstance_WhenMessageInitialized_ShouldBeThreadsafe,The following statement contains a magic number: Parallel.For(0' 10' i =>              {                  mapper.CreateInstance<SampleMessageClass>();                  mapper.CreateInstance<ISampleMessageInterface>();                  mapper.CreateInstance<ClassImplementingIEnumerable<string>>();              });
Magic Number,MessageMapperTests,MessageMapperTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\MessageMapper\MessageMapperTests.cs,CreateInstance_WhenMessageNotInitialized_ShouldBeThreadsafe,The following statement contains a magic number: Parallel.For(0' 10' i =>              {                  mapper.CreateInstance<SampleMessageClass>();                  mapper.CreateInstance<ISampleMessageInterface>();                  mapper.CreateInstance<ClassImplementingIEnumerable<string>>();              });
Magic Number,MessageMapperTests,MessageMapperTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\MessageMapper\MessageMapperTests.cs,ShouldAllowMultipleMapperInstancesPerAppDomain,The following statement contains a magic number: Parallel.For(0' 10' i =>              {                  var mapper = new MessageMapper();                  mapper.CreateInstance<SampleMessageClass>();                  mapper.CreateInstance<ISampleMessageInterface>();                  mapper.CreateInstance<ClassImplementingIEnumerable<string>>();              });
Magic Number,MessageMapperTests,When_mapping_interfaces,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\MessageMapper\When_mapping_interfaces.cs,Accept_attributes_with_value_attribute,The following statement contains a magic number: Assert.AreEqual(attr.MyAge' 21);
Magic Number,NServiceBus.Core.Tests.Performance.TimeToBeReceived,TimeToBeReceivedAttributeTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Performance\TimeToBeReceived\TimeToBeReceivedAttributeTests.cs,Should_use_TimeToBeReceived_from_bottom_of_tree_when_initialized,The following statement contains a magic number: Assert.AreEqual(TimeSpan.FromSeconds(2)' timeToBeReceived);
Magic Number,NServiceBus.Core.Tests.Performance.TimeToBeReceived,TimeToBeReceivedAttributeTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Performance\TimeToBeReceived\TimeToBeReceivedAttributeTests.cs,Should_use_TimeToBeReceived_from_bottom_of_tree_when_tryget,The following statement contains a magic number: Assert.AreEqual(TimeSpan.FromSeconds(2)' timeToBeReceived);
Magic Number,NServiceBus.Persistence.InMemory.Tests,InMemoryGatewayDeduplicationTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Persistence\InMemory\InMemoryGatewayDeduplicationTests.cs,Should_return_true_on_first_unique_test,The following statement contains a magic number: var storage = new InMemoryGatewayDeduplication(2);
Magic Number,NServiceBus.Persistence.InMemory.Tests,InMemoryGatewayDeduplicationTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Persistence\InMemory\InMemoryGatewayDeduplicationTests.cs,Should_return_false_on_second_test,The following statement contains a magic number: var storage = new InMemoryGatewayDeduplication(2);
Magic Number,NServiceBus.Persistence.InMemory.Tests,InMemoryGatewayDeduplicationTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Persistence\InMemory\InMemoryGatewayDeduplicationTests.cs,Should_return_true_if_LRU_reaches_limit,The following statement contains a magic number: var storage = new InMemoryGatewayDeduplication(2);
Magic Number,NServiceBus.Persistence.InMemory.Tests,InMemoryGatewayDeduplicationTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Persistence\InMemory\InMemoryGatewayDeduplicationTests.cs,Should_have_configured_maxsize,The following statement contains a magic number: persistenceSettings.GatewayDeduplicationCacheSize(42);
Magic Number,NServiceBus.Persistence.InMemory.Tests,InMemoryGatewayDeduplicationTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Persistence\InMemory\InMemoryGatewayDeduplicationTests.cs,Should_have_configured_maxsize,The following statement contains a magic number: Assert.AreEqual(42' implementation.maxSize);
Magic Number,NServiceBus.Core.Tests.Persistence.InMemory,When_persisting_a_saga_with_complex_types,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Persistence\InMemory\When_persisting_a_saga_with_complex_types.cs,It_should_get_deep_copy,The following statement contains a magic number: var sagaData = new SagaWithComplexType              {                  Id = Guid.NewGuid()'                  Ints = new List<int> { 1' 2 }              };
Magic Number,NServiceBus.Core.Tests.Persistence,When_storage_overrides_are_provided,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Persistence\PersistenceStorageMergerTests.cs,Should_replace_default_storages_by_overrides,The following statement contains a magic number: Assert.That(resultedEnabledPersistences[2].SelectedStorages' Is.EquivalentTo(                  new List<Type> { typeof(StorageType.GatewayDeduplication)' typeof(StorageType.Outbox)' typeof(StorageType.Timeouts) }));
Magic Number,NServiceBus.Core.Tests.Pipeline,BehaviorRegistrationsCoordinatorTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Pipeline\BehaviorRegistrationsCoordinatorTests.cs,Registrations_Count,The following statement contains a magic number: Assert.AreEqual(2' model.Count);
Magic Number,NServiceBus.Core.Tests.Pipeline,BehaviorRegistrationsCoordinatorTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Pipeline\BehaviorRegistrationsCoordinatorTests.cs,Registrations_Order,The following statement contains a magic number: Assert.AreEqual("3"' model[2].StepId);
Magic Number,NServiceBus.Core.Tests.Pipeline,BehaviorRegistrationsCoordinatorTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Pipeline\BehaviorRegistrationsCoordinatorTests.cs,Registrations_Order_with_befores_and_afters,The following statement contains a magic number: Assert.AreEqual("2"' model[2].StepId);
Magic Number,NServiceBus.Core.Tests.Pipeline,BehaviorRegistrationsCoordinatorTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Pipeline\BehaviorRegistrationsCoordinatorTests.cs,Registrations_Order_with_befores_and_afters,The following statement contains a magic number: Assert.AreEqual("2.5"' model[3].StepId);
Magic Number,NServiceBus.Core.Tests.Pipeline,BehaviorRegistrationsCoordinatorTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Pipeline\BehaviorRegistrationsCoordinatorTests.cs,Registrations_Order_with_befores_and_afters,The following statement contains a magic number: Assert.AreEqual("3"' model[4].StepId);
Magic Number,NServiceBus.Core.Tests.Pipeline,BehaviorRegistrationsCoordinatorTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Pipeline\BehaviorRegistrationsCoordinatorTests.cs,Registrations_Order_with_befores_and_afters,The following statement contains a magic number: Assert.AreEqual("3.5"' model[5].StepId);
Magic Number,NServiceBus.Core.Tests.Pipeline,BehaviorRegistrationsCoordinatorTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Pipeline\BehaviorRegistrationsCoordinatorTests.cs,Registrations_Order_with_befores_only,The following statement contains a magic number: Assert.AreEqual("2"' model[2].StepId);
Magic Number,NServiceBus.Core.Tests.Pipeline,BehaviorRegistrationsCoordinatorTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Pipeline\BehaviorRegistrationsCoordinatorTests.cs,Registrations_Order_with_befores_only,The following statement contains a magic number: Assert.AreEqual("2.5"' model[3].StepId);
Magic Number,NServiceBus.Core.Tests.Pipeline,BehaviorRegistrationsCoordinatorTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Pipeline\BehaviorRegistrationsCoordinatorTests.cs,Registrations_Order_with_befores_only,The following statement contains a magic number: Assert.AreEqual("3"' model[4].StepId);
Magic Number,NServiceBus.Core.Tests.Pipeline,BehaviorRegistrationsCoordinatorTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Pipeline\BehaviorRegistrationsCoordinatorTests.cs,Registrations_Order_with_multi_afters,The following statement contains a magic number: Assert.AreEqual("2"' model[2].StepId);
Magic Number,NServiceBus.Core.Tests.Pipeline,BehaviorRegistrationsCoordinatorTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Pipeline\BehaviorRegistrationsCoordinatorTests.cs,Registrations_Order_with_multi_afters,The following statement contains a magic number: Assert.AreEqual("2.5"' model[3].StepId);
Magic Number,NServiceBus.Core.Tests.Pipeline,BehaviorRegistrationsCoordinatorTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Pipeline\BehaviorRegistrationsCoordinatorTests.cs,Registrations_Order_with_multi_afters,The following statement contains a magic number: Assert.AreEqual("3"' model[4].StepId);
Magic Number,NServiceBus.Core.Tests.Pipeline,BehaviorRegistrationsCoordinatorTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Pipeline\BehaviorRegistrationsCoordinatorTests.cs,Registrations_Order_with_multi_afters,The following statement contains a magic number: Assert.AreEqual("3.5"' model[5].StepId);
Magic Number,NServiceBus.Core.Tests.Pipeline,BehaviorRegistrationsCoordinatorTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Pipeline\BehaviorRegistrationsCoordinatorTests.cs,Registrations_Order_with_afters_only,The following statement contains a magic number: Assert.AreEqual("1.5"' model[2].StepId);
Magic Number,NServiceBus.Core.Tests.Pipeline,BehaviorRegistrationsCoordinatorTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Pipeline\BehaviorRegistrationsCoordinatorTests.cs,Registrations_Order_with_afters_only,The following statement contains a magic number: Assert.AreEqual("1.6"' model[3].StepId);
Magic Number,NServiceBus.Core.Tests.Pipeline,BehaviorRegistrationsCoordinatorTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Pipeline\BehaviorRegistrationsCoordinatorTests.cs,Registrations_Order_with_afters_only,The following statement contains a magic number: Assert.AreEqual("2"' model[4].StepId);
Magic Number,NServiceBus.Core.Tests.Pipeline,BehaviorRegistrationsCoordinatorTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Pipeline\BehaviorRegistrationsCoordinatorTests.cs,Registrations_Order_with_afters_only,The following statement contains a magic number: Assert.AreEqual("3"' model[5].StepId);
Magic Number,NServiceBus.Core.Tests.Pipeline,HeaderOptionExtensionsTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Pipeline\HeaderOptionExtensionsTests.cs,GetHeaders_Should_Return_Configured_Headers,The following statement contains a magic number: Assert.AreEqual(2' result.Count);
Magic Number,NServiceBus.Core.Tests.Pipeline,PipelineModelBuilderTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Pipeline\PipelineModelBuilderTests.cs,ShouldDetectRegistrationsWithContextsReachableFromTheRootContext,The following statement contains a magic number: Assert.AreEqual(3' model.Count);
Magic Number,NServiceBus.Core.Tests.Pipeline,PipelineModelBuilderTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Pipeline\PipelineModelBuilderTests.cs,ShouldDetectRegistrationsWithContextsNotReachableFromTheRootContext,The following statement contains a magic number: Assert.AreEqual(2' model.Count);
Magic Number,NServiceBus.Core.Tests.Pipeline,PipelineModelBuilderTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Pipeline\PipelineModelBuilderTests.cs,ShouldHandleTheTerminator,The following statement contains a magic number: Assert.AreEqual(3' model.Count);
Magic Number,NServiceBus.Core.Tests.Pipeline,PipelineTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Pipeline\PipelineTests.cs,ShouldNotCacheContext,The following statement contains a magic number: context.Extensions.Set(ExtendableExtensions.RunSpecificKey' 2);
Magic Number,NServiceBus.Core.Tests.Pipeline,PipelineTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Pipeline\PipelineTests.cs,ShouldCacheExecutionFunc,The following statement contains a magic number: i < 100
Magic Number,NServiceBus.Core.Tests.Pipeline,PipelineTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Pipeline\PipelineTests.cs,ShouldCacheExecutionFunc,The following statement contains a magic number: Assert.That(average' Is.LessThan(firstRunTicks / 5));
Magic Number,NServiceBus.Core.Tests.Pipeline,LambdaExpressionPrettyPrint,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Pipeline\PipelineTests.cs,PrettyPrint,The following statement contains a magic number: sb.AppendLine($"{new string(' '' i * 4)}{expression[i].ToString().TrimStart()}'");
Magic Number,NServiceBus.Core.Tests.Recoverability,DefaultRecoverabilityPolicyTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Recoverability\DefaultRecoverabilityPolicyTests.cs,When_failure_is_assignable_to_custom_exception_should_move_to_error,The following statement contains a magic number: var policy = CreatePolicy(maxImmediateRetries: 3' maxDelayedRetries: 3' unrecoverableExceptions: new HashSet<Type> { typeof(MyBaseCustomException) });
Magic Number,NServiceBus.Core.Tests.Recoverability,DefaultRecoverabilityPolicyTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Recoverability\DefaultRecoverabilityPolicyTests.cs,When_failure_is_assignable_to_custom_exception_should_move_to_error,The following statement contains a magic number: var policy = CreatePolicy(maxImmediateRetries: 3' maxDelayedRetries: 3' unrecoverableExceptions: new HashSet<Type> { typeof(MyBaseCustomException) });
Magic Number,NServiceBus.Core.Tests.Recoverability,DefaultRecoverabilityPolicyTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Recoverability\DefaultRecoverabilityPolicyTests.cs,When_max_immediate_retries_have_not_been_reached_should_return_immediate_retry,The following statement contains a magic number: var policy = CreatePolicy(maxImmediateRetries: 3);
Magic Number,NServiceBus.Core.Tests.Recoverability,DefaultRecoverabilityPolicyTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Recoverability\DefaultRecoverabilityPolicyTests.cs,When_max_immediate_retries_have_not_been_reached_should_return_immediate_retry,The following statement contains a magic number: var errorContext = CreateErrorContext(numberOfDeliveryAttempts: 2);
Magic Number,NServiceBus.Core.Tests.Recoverability,DefaultRecoverabilityPolicyTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Recoverability\DefaultRecoverabilityPolicyTests.cs,When_max_immediate_retries_exceeded_should_return_delayed_retry,The following statement contains a magic number: var policy = CreatePolicy(2);
Magic Number,NServiceBus.Core.Tests.Recoverability,DefaultRecoverabilityPolicyTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Recoverability\DefaultRecoverabilityPolicyTests.cs,When_max_immediate_retries_exceeded_should_return_delayed_retry,The following statement contains a magic number: var errorContext = CreateErrorContext(numberOfDeliveryAttempts: 3);
Magic Number,NServiceBus.Core.Tests.Recoverability,DefaultRecoverabilityPolicyTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Recoverability\DefaultRecoverabilityPolicyTests.cs,When_max_immediate_retries_exceeded_but_delayed_retry_disabled_return_move_to_error,The following statement contains a magic number: var errorContext = CreateErrorContext(numberOfDeliveryAttempts: 3);
Magic Number,NServiceBus.Core.Tests.Recoverability,DefaultRecoverabilityPolicyTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Recoverability\DefaultRecoverabilityPolicyTests.cs,When_immediate_retries_turned_off_and_delayed_retry_policy_returns_delay_should_return_delayed_retry,The following statement contains a magic number: var deliveryDelay = TimeSpan.FromSeconds(10);
Magic Number,NServiceBus.Core.Tests.Recoverability,DefaultRecoverabilityPolicyTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Recoverability\DefaultRecoverabilityPolicyTests.cs,ShouldRetryTheSpecifiedTimesWithIncreasedDelay,The following statement contains a magic number: var baseDelay = TimeSpan.FromSeconds(10);
Magic Number,NServiceBus.Core.Tests.Recoverability,DefaultRecoverabilityPolicyTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Recoverability\DefaultRecoverabilityPolicyTests.cs,ShouldRetryTheSpecifiedTimesWithIncreasedDelay,The following statement contains a magic number: var policy = CreatePolicy(maxImmediateRetries: 0' maxDelayedRetries: 2' delayedRetryDelay: baseDelay);
Magic Number,NServiceBus.Core.Tests.Recoverability,DefaultRecoverabilityPolicyTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Recoverability\DefaultRecoverabilityPolicyTests.cs,ShouldRetryTheSpecifiedTimesWithIncreasedDelay,The following statement contains a magic number: errorContext = CreateErrorContext(retryNumber: 2);
Magic Number,NServiceBus.Core.Tests.Recoverability,DefaultRecoverabilityPolicyTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Recoverability\DefaultRecoverabilityPolicyTests.cs,ShouldRetryTheSpecifiedTimesWithIncreasedDelay,The following statement contains a magic number: Assert.AreEqual(TimeSpan.FromSeconds(20)' result2.Delay);
Magic Number,NServiceBus.Core.Tests.Recoverability,DefaultRecoverabilityPolicyTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Recoverability\DefaultRecoverabilityPolicyTests.cs,ShouldCapTheRetryMaxTimeTo24Hours,The following statement contains a magic number: var baseDelay = TimeSpan.FromSeconds(10);
Magic Number,NServiceBus.Core.Tests.Recoverability,DefaultRecoverabilityPolicyTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Recoverability\DefaultRecoverabilityPolicyTests.cs,ShouldCapTheRetryMaxTimeTo24Hours,The following statement contains a magic number: var policy = CreatePolicy(maxImmediateRetries: 0' maxDelayedRetries: 2' delayedRetryDelay: baseDelay);
Magic Number,NServiceBus.Core.Tests.Recoverability,DefaultRecoverabilityPolicyTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Recoverability\DefaultRecoverabilityPolicyTests.cs,ShouldCapTheRetryMaxTimeTo24Hours,The following statement contains a magic number: var moreThanADayAgo = now.AddHours(-24).AddTicks(-1);
Magic Number,NServiceBus.Core.Tests.Recoverability,DefaultRecoverabilityPolicyTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Recoverability\DefaultRecoverabilityPolicyTests.cs,CreatePolicy,The following statement contains a magic number: var config = new RecoverabilityConfig(new ImmediateConfig(maxImmediateRetries)' new DelayedConfig(maxDelayedRetries' delayedRetryDelay.GetValueOrDefault(TimeSpan.FromSeconds(2)))' failedConfig);
Magic Number,NServiceBus.Core.Tests.Recoverability,DelayedRetryExecutorTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Recoverability\DelayedRetryExecutorTests.cs,When_native_delayed_delivery_should_add_delivery_constraint,The following statement contains a magic number: var delay = TimeSpan.FromSeconds(42);
Magic Number,NServiceBus.Core.Tests.Recoverability,DelayedRetryExecutorTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Recoverability\DelayedRetryExecutorTests.cs,When_no_native_delayed_delivery_should_route_message_to_timeout_manager,The following statement contains a magic number: var delay = TimeSpan.FromSeconds(42);
Magic Number,NServiceBus.Core.Tests.Recoverability,DelayedRetryExecutorTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Recoverability\DelayedRetryExecutorTests.cs,Should_update_retry_headers_when_present,The following statement contains a magic number: var originalHeadersTimestamp = DateTimeExtensions.ToWireFormattedString(new DateTime(2012' 12' 12' 0' 0' 0' DateTimeKind.Utc));
Magic Number,NServiceBus.Core.Tests.Recoverability,DelayedRetryExecutorTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Recoverability\DelayedRetryExecutorTests.cs,Should_update_retry_headers_when_present,The following statement contains a magic number: var originalHeadersTimestamp = DateTimeExtensions.ToWireFormattedString(new DateTime(2012' 12' 12' 0' 0' 0' DateTimeKind.Utc));
Magic Number,NServiceBus.Core.Tests.Recoverability,DelayedRetryExecutorTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Recoverability\DelayedRetryExecutorTests.cs,Should_update_retry_headers_when_present,The following statement contains a magic number: var originalHeadersTimestamp = DateTimeExtensions.ToWireFormattedString(new DateTime(2012' 12' 12' 0' 0' 0' DateTimeKind.Utc));
Magic Number,NServiceBus.Core.Tests.Recoverability,RecoverabilityExecutorTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Recoverability\RecoverabilityExecutorTests.cs,When_notification_turned_off_no_notification_should_be_raised,The following statement contains a magic number: var policy = RetryPolicy.Return(                  actions: new RecoverabilityAction[]                  {                      RecoverabilityAction.ImmediateRetry()'                      RecoverabilityAction.DelayedRetry(TimeSpan.FromSeconds(10))'                      RecoverabilityAction.MoveToError("errorQueue")                  });
Magic Number,NServiceBus.Core.Tests.Recoverability,RecoverabilityExecutorTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Recoverability\RecoverabilityExecutorTests.cs,When_failure_is_handled_with_delayed_retries_notification_should_be_raised,The following statement contains a magic number: var recoverabilityExecutor = CreateExecutor(RetryPolicy.AlwaysDelay(TimeSpan.FromSeconds(10)));
Magic Number,NServiceBus.Core.Tests.Recoverability,RecoverabilitySettingsExtensionsTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Recoverability\RecoverabilitySettingsExtensionsTests.cs,When_unrecoverable_exception_present_should_add_exception_type,The following statement contains a magic number: Assert.That(result' Has.Count.EqualTo(2));
Magic Number,NServiceBus.Core.Tests.Reliability.Outbox,TransportReceiveToPhysicalMessageConnectorTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Reliability\Outbox\TransportReceiveToPhysicalMessageConnectorTests.cs,Should_honor_stored_delivery_constraints,The following statement contains a magic number: options["DelayDeliveryFor"] = TimeSpan.FromSeconds(10).ToString();
Magic Number,NServiceBus.Core.Tests.Reliability.Outbox,TransportReceiveToPhysicalMessageConnectorTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Reliability\Outbox\TransportReceiveToPhysicalMessageConnectorTests.cs,Should_honor_stored_delivery_constraints,The following statement contains a magic number: Assert.AreEqual(TimeSpan.FromSeconds(10)' delayDeliveryWith.Delay);
Magic Number,NServiceBus.Core.Tests.Routing,EndpointInstancesTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Routing\EndpointInstancesTests.cs,Should_return_instances_configured_by_static_route,The following statement contains a magic number: Assert.AreEqual(2' salesInstances.Count());
Magic Number,NServiceBus.Core.Tests.Routing,MessageDrivenSubscribeTerminatorTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Routing\MessageDrivenSubscribeTerminatorTests.cs,Should_Dispatch_according_to_max_retries_when_dispatch_fails,The following statement contains a magic number: state.MaxRetries = 10;
Magic Number,NServiceBus.Core.Tests.Routing,MessageDrivenSubscribeTerminatorTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Routing\MessageDrivenSubscribeTerminatorTests.cs,Should_Dispatch_according_to_max_retries_when_dispatch_fails,The following statement contains a magic number: dispatcher.FailDispatch(10);
Magic Number,NServiceBus.Core.Tests.Routing,MessageDrivenSubscribeTerminatorTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Routing\MessageDrivenSubscribeTerminatorTests.cs,Should_Dispatch_according_to_max_retries_when_dispatch_fails,The following statement contains a magic number: Assert.AreEqual(10' dispatcher.FailedNumberOfTimes);
Magic Number,NServiceBus.Core.Tests.Routing,MessageDrivenSubscribeTerminatorTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Routing\MessageDrivenSubscribeTerminatorTests.cs,Should_Throw_when_max_retries_reached,The following statement contains a magic number: state.MaxRetries = 10;
Magic Number,NServiceBus.Core.Tests.Routing,MessageDrivenSubscribeTerminatorTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Routing\MessageDrivenSubscribeTerminatorTests.cs,Should_Throw_when_max_retries_reached,The following statement contains a magic number: dispatcher.FailDispatch(11);
Magic Number,NServiceBus.Core.Tests.Routing,MessageDrivenSubscribeTerminatorTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Routing\MessageDrivenSubscribeTerminatorTests.cs,Should_Throw_when_max_retries_reached,The following statement contains a magic number: Assert.AreEqual(11' dispatcher.FailedNumberOfTimes);
Magic Number,NServiceBus.Core.Tests.Routing,MessageDrivenUnsubscribeTerminatorTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Routing\MessageDrivenUnsubscribeTerminatorTests.cs,Should_Dispatch_according_to_max_retries_when_dispatch_fails,The following statement contains a magic number: state.MaxRetries = 10;
Magic Number,NServiceBus.Core.Tests.Routing,MessageDrivenUnsubscribeTerminatorTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Routing\MessageDrivenUnsubscribeTerminatorTests.cs,Should_Dispatch_according_to_max_retries_when_dispatch_fails,The following statement contains a magic number: dispatcher.FailDispatch(10);
Magic Number,NServiceBus.Core.Tests.Routing,MessageDrivenUnsubscribeTerminatorTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Routing\MessageDrivenUnsubscribeTerminatorTests.cs,Should_Dispatch_according_to_max_retries_when_dispatch_fails,The following statement contains a magic number: Assert.AreEqual(10' dispatcher.FailedNumberOfTimes);
Magic Number,NServiceBus.Core.Tests.Routing,MessageDrivenUnsubscribeTerminatorTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Routing\MessageDrivenUnsubscribeTerminatorTests.cs,Should_Throw_when_max_retries_reached,The following statement contains a magic number: state.MaxRetries = 10;
Magic Number,NServiceBus.Core.Tests.Routing,MessageDrivenUnsubscribeTerminatorTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Routing\MessageDrivenUnsubscribeTerminatorTests.cs,Should_Throw_when_max_retries_reached,The following statement contains a magic number: dispatcher.FailDispatch(11);
Magic Number,NServiceBus.Core.Tests.Routing,MessageDrivenUnsubscribeTerminatorTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Routing\MessageDrivenUnsubscribeTerminatorTests.cs,Should_Throw_when_max_retries_reached,The following statement contains a magic number: Assert.AreEqual(11' dispatcher.FailedNumberOfTimes);
Magic Number,NServiceBus.Core.Tests.Routing,RoutingPolicyTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Routing\RoutingPolicyTests.cs,ShouldScopeDistributionToEndpointName,The following statement contains a magic number: Assert.That(result.Count' Is.EqualTo(4));
Magic Number,NServiceBus.Core.Tests.Routing,SingleInstanceRoundRobinDistributionStrategyTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Routing\SingleInstanceRoundRobinDistributionStrategyTests.cs,ShouldRoundRobinOverAllProvidedInstances,The following statement contains a magic number: Assert.That(result.Count' Is.EqualTo(3));
Magic Number,NServiceBus.Core.Tests.Routing,SingleInstanceRoundRobinDistributionStrategyTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Routing\SingleInstanceRoundRobinDistributionStrategyTests.cs,ShouldRoundRobinOverAllProvidedInstances,The following statement contains a magic number: Assert.That(result' Has.Exactly(1).EqualTo(instances[2]));
Magic Number,NServiceBus.Core.Tests.Routing,SingleInstanceRoundRobinDistributionStrategyTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Routing\SingleInstanceRoundRobinDistributionStrategyTests.cs,WhenNewInstancesAdded_ShouldIncludeAllInstancesInDistribution,The following statement contains a magic number: Assert.That(result.Count' Is.EqualTo(3));
Magic Number,NServiceBus.Core.Tests.Routing,SingleInstanceRoundRobinDistributionStrategyTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Routing\SingleInstanceRoundRobinDistributionStrategyTests.cs,WhenNewInstancesAdded_ShouldIncludeAllInstancesInDistribution,The following statement contains a magic number: Assert.That(result' Has.Exactly(1).EqualTo(instances[2]));
Magic Number,NServiceBus.Core.Tests.Routing,SingleInstanceRoundRobinDistributionStrategyTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Routing\SingleInstanceRoundRobinDistributionStrategyTests.cs,WhenInstancesRemoved_ShouldOnlyDistributeAcrossRemainingInstances,The following statement contains a magic number: instances = instances.Take(2).ToArray();
Magic Number,NServiceBus.Core.Tests.Routing,SingleInstanceRoundRobinDistributionStrategyTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Routing\SingleInstanceRoundRobinDistributionStrategyTests.cs,WhenInstancesRemoved_ShouldOnlyDistributeAcrossRemainingInstances,The following statement contains a magic number: Assert.That(result.Count' Is.EqualTo(3));
Magic Number,NServiceBus.Core.Tests.Routing,SingleInstanceRoundRobinDistributionStrategyTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Routing\SingleInstanceRoundRobinDistributionStrategyTests.cs,WhenInstancesRemoved_ShouldOnlyDistributeAcrossRemainingInstances,The following statement contains a magic number: Assert.That(result' Has.Exactly(2).EqualTo(instances[0]));
Magic Number,NServiceBus.Core.Tests.Routing,UnicastPublisherRouterTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Routing\UnicastPublisherRouterTests.cs,When_subscriber_does_not_define_logical_endpoint_should_send_event_to_each_address,The following statement contains a magic number: Assert.AreEqual(2' destinations.Count);
Magic Number,NServiceBus.Core.Tests.Routing,UnicastPublisherRouterTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Routing\UnicastPublisherRouterTests.cs,When_multiple_subscribers_for_logical_endpoints_should_route_event_to_a_single_instance_of_each_logical_endpoint,The following statement contains a magic number: Assert.AreEqual(2' destinations.Count);
Magic Number,NServiceBus.Core.Tests.Routing.MessageDrivenSubscriptions,PublishersTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Routing\MessageDrivenSubscriptions\PublishersTests.cs,When_same_publisher_is_registered_multiple_times_should_remove_duplicates,The following statement contains a magic number: Assert.AreEqual(3' pubs.Length);
Magic Number,NServiceBus.Core.Tests.Sagas.TypeBasedSagas,SagaMetadataCreationTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Sagas\SagaMetadataCreationTests.cs,DetectMessagesStartingTheSaga,The following statement contains a magic number: Assert.AreEqual(4' messages.Count);
Magic Number,NServiceBus.Core.Tests.Sagas.TypeBasedSagas,SagaModelTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Sagas\SagaModelTests.cs,ValidateAssumptionsAboutSagaMappings,The following statement contains a magic number: Assert.AreEqual(2' metadata.AssociatedMessages.Count);
Magic Number,NServiceBus.Core.Tests.Sagas.TypeBasedSagas,SagaModelTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Sagas\SagaModelTests.cs,ValidateAssumptionsAboutSagaMappings,The following statement contains a magic number: Assert.AreEqual(2' metadata.Finders.Count);
Magic Number,NServiceBus.Scheduling.Tests,DefaultSchedulerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Scheduler\DefaultSchedulerTests.cs,When_starting_a_task_defer_should_be_called,The following statement contains a magic number: var task = new TaskDefinition              {                  Every = TimeSpan.FromSeconds(5)'                  Task = c => TaskEx.CompletedTask              };
Magic Number,NServiceBus.Scheduling.Tests,DefaultSchedulerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Scheduler\DefaultSchedulerTests.cs,When_starting_a_task_the_lambda_should_be_executed,The following statement contains a magic number: var task = new TaskDefinition              {                  Every = TimeSpan.FromSeconds(5)'                  Task = c =>                  {                      i++;                      return TaskEx.CompletedTask;                  }              };
Magic Number,NServiceBus.Scheduling.Tests,DefaultSchedulerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Scheduler\DefaultSchedulerTests.cs,When_starting_a_task_the_lambda_should_be_executed,The following statement contains a magic number: Assert.That(i == 2);
Magic Number,NServiceBus.Scheduling.Tests,ScheduledTaskHandlingBehaviorTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Scheduler\ScheduledTaskHandlingBehaviorTests.cs,SetUp,The following statement contains a magic number: var task = new TaskDefinition              {                  Every = TimeSpan.FromSeconds(5)'                  Task = c => TaskEx.CompletedTask              };
Magic Number,NServiceBus.Scheduling.Tests,ScheduledTaskHandlingBehaviorTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Scheduler\ScheduledTaskHandlingBehaviorTests.cs,When_triggering_a_scheduled_task_should_reschedule_at_configured_interval,The following statement contains a magic number: logicalContext.Message = new LogicalMessage(new MessageMetadata(typeof(ScheduledTask))' new ScheduledTask              {                  Every = TimeSpan.FromSeconds(5)'                  TaskId = taskId              });
Magic Number,NServiceBus.Scheduling.Tests,ScheduleTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Scheduler\ScheduleTests.cs,When_scheduling_an_action_with_a_name_the_task_should_get_that_name,The following statement contains a magic number: await session.ScheduleEvery(TimeSpan.FromMinutes(5)' ACTION_NAME' c =>              {                  wasCalled = true;                  return TaskEx.CompletedTask;              });
Magic Number,NServiceBus.Scheduling.Tests,ScheduleTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Scheduler\ScheduleTests.cs,When_scheduling_an_action_without_a_name_the_task_should_get_the_DeclaringType_as_name,The following statement contains a magic number: await session.ScheduleEvery(TimeSpan.FromMinutes(5)' c =>              {                  wasCalled = true;                  return TaskEx.CompletedTask;              });
Magic Number,NServiceBus.Core.Tests.Serializers,SimpleJsonTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\SimpleJsonTests.cs,TestIntStringDictionary,The following statement contains a magic number: var input = new Dictionary<int' string>()              {                  {1' "hello"}'                  {2' "world"}              };
Magic Number,NServiceBus.Core.Tests.Serializers,SimpleJsonTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\SimpleJsonTests.cs,TestIntStringDictionary,The following statement contains a magic number: Assert.AreEqual(2' result.Count);
Magic Number,NServiceBus.Core.Tests.Serializers,SimpleJsonTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\SimpleJsonTests.cs,TestIntStringDictionary,The following statement contains a magic number: Assert.AreEqual("world"' result[2]);
Magic Number,NServiceBus.Core.Tests.Serializers,SimpleJsonTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\SimpleJsonTests.cs,TestIntStringDictionaryToIDictionary,The following statement contains a magic number: var input = new Dictionary<int' string>()              {                  {1' "hello"}'                  {2' "world"}              };
Magic Number,NServiceBus.Core.Tests.Serializers,SimpleJsonTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\SimpleJsonTests.cs,TestIntStringDictionaryToIDictionary,The following statement contains a magic number: Assert.AreEqual(2' result.Count);
Magic Number,NServiceBus.Core.Tests.Serializers,SimpleJsonTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\SimpleJsonTests.cs,TestIntStringDictionaryToIDictionary,The following statement contains a magic number: Assert.AreEqual("world"' result[2]);
Magic Number,NServiceBus.Core.Tests.Serializers,SimpleJsonTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\SimpleJsonTests.cs,TestCustomDictionaryToIDictionary,The following statement contains a magic number: var input = new CustomDictionary              {                  { 2' 4 }'                  { 3' 9 }              };
Magic Number,NServiceBus.Core.Tests.Serializers,SimpleJsonTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\SimpleJsonTests.cs,TestCustomDictionaryToIDictionary,The following statement contains a magic number: var input = new CustomDictionary              {                  { 2' 4 }'                  { 3' 9 }              };
Magic Number,NServiceBus.Core.Tests.Serializers,SimpleJsonTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\SimpleJsonTests.cs,TestCustomDictionaryToIDictionary,The following statement contains a magic number: var input = new CustomDictionary              {                  { 2' 4 }'                  { 3' 9 }              };
Magic Number,NServiceBus.Core.Tests.Serializers,SimpleJsonTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\SimpleJsonTests.cs,TestCustomDictionaryToIDictionary,The following statement contains a magic number: var input = new CustomDictionary              {                  { 2' 4 }'                  { 3' 9 }              };
Magic Number,NServiceBus.Core.Tests.Serializers,SimpleJsonTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\SimpleJsonTests.cs,TestCustomDictionaryToIDictionary,The following statement contains a magic number: Assert.AreEqual(2' result.Count);
Magic Number,NServiceBus.Core.Tests.Serializers,SimpleJsonTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\SimpleJsonTests.cs,TestCustomDictionaryToIDictionary,The following statement contains a magic number: Assert.AreEqual(4' result[2]);
Magic Number,NServiceBus.Core.Tests.Serializers,SimpleJsonTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\SimpleJsonTests.cs,TestCustomDictionaryToIDictionary,The following statement contains a magic number: Assert.AreEqual(4' result[2]);
Magic Number,NServiceBus.Core.Tests.Serializers,SimpleJsonTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\SimpleJsonTests.cs,TestCustomDictionaryToIDictionary,The following statement contains a magic number: Assert.AreEqual(9' result[3]);
Magic Number,NServiceBus.Core.Tests.Serializers,SimpleJsonTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\SimpleJsonTests.cs,TestCustomDictionaryToIDictionary,The following statement contains a magic number: Assert.AreEqual(9' result[3]);
Magic Number,NServiceBus.Core.Tests.Serializers,SimpleJsonTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\SimpleJsonTests.cs,TestStringStringDictionary,The following statement contains a magic number: Assert.AreEqual(2' result.Count);
Magic Number,NServiceBus.Core.Tests.Serializers,SimpleJsonTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\SimpleJsonTests.cs,TestStringObjectDictionary,The following statement contains a magic number: var input = new Dictionary<string' SamplePoco>()              {                  {"obj1"' new SamplePoco { Guid = Guid.NewGuid()' Int = 21' String = "abc"}}'                  {"obj2"' new SamplePoco { Guid = Guid.NewGuid()' Int = 42' String = "xyz"}}              };
Magic Number,NServiceBus.Core.Tests.Serializers,SimpleJsonTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\SimpleJsonTests.cs,TestStringObjectDictionary,The following statement contains a magic number: var input = new Dictionary<string' SamplePoco>()              {                  {"obj1"' new SamplePoco { Guid = Guid.NewGuid()' Int = 21' String = "abc"}}'                  {"obj2"' new SamplePoco { Guid = Guid.NewGuid()' Int = 42' String = "xyz"}}              };
Magic Number,NServiceBus.Core.Tests.Serializers,SimpleJsonTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\SimpleJsonTests.cs,TestStringObjectDictionary,The following statement contains a magic number: Assert.AreEqual(2' result.Count);
Magic Number,NServiceBus.Core.Tests.Serializers,SimpleJsonTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\SimpleJsonTests.cs,TestDateTimeDictionaryKeys,The following statement contains a magic number: var date1 = new DateTime(2018' 1' 1);
Magic Number,NServiceBus.Core.Tests.Serializers,SimpleJsonTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\SimpleJsonTests.cs,TestDateTimeDictionaryKeys,The following statement contains a magic number: var date2 = new DateTime(2017' 1' 1);
Magic Number,NServiceBus.Core.Tests.Serializers,SimpleJsonTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\SimpleJsonTests.cs,TestDateTimeDictionaryKeys,The following statement contains a magic number: var input = new Dictionary<DateTime' int>              {                  {date1' 1}'                  {date2' 2}              };
Magic Number,NServiceBus.Core.Tests.Serializers,SimpleJsonTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\SimpleJsonTests.cs,TestDateTimeDictionaryKeys,The following statement contains a magic number: Assert.AreEqual(2' result.Count);
Magic Number,NServiceBus.Core.Tests.Serializers,SimpleJsonTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\SimpleJsonTests.cs,TestDateTimeDictionaryKeys,The following statement contains a magic number: Assert.AreEqual(2' result[date2]);
Magic Number,NServiceBus.Core.Tests.Serializers,SimpleJsonTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\SimpleJsonTests.cs,TestDateTimeOffsetDictionaryKeys,The following statement contains a magic number: var date1 = new DateTimeOffset(new DateTime(2018' 1' 1)' TimeSpan.FromHours(4));
Magic Number,NServiceBus.Core.Tests.Serializers,SimpleJsonTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\SimpleJsonTests.cs,TestDateTimeOffsetDictionaryKeys,The following statement contains a magic number: var date1 = new DateTimeOffset(new DateTime(2018' 1' 1)' TimeSpan.FromHours(4));
Magic Number,NServiceBus.Core.Tests.Serializers,SimpleJsonTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\SimpleJsonTests.cs,TestDateTimeOffsetDictionaryKeys,The following statement contains a magic number: var date2 = new DateTimeOffset(new DateTime(2017' 1' 1)' TimeSpan.FromHours(-2));
Magic Number,NServiceBus.Core.Tests.Serializers,SimpleJsonTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\SimpleJsonTests.cs,TestDateTimeOffsetDictionaryKeys,The following statement contains a magic number: var date2 = new DateTimeOffset(new DateTime(2017' 1' 1)' TimeSpan.FromHours(-2));
Magic Number,NServiceBus.Core.Tests.Serializers,SimpleJsonTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\SimpleJsonTests.cs,TestDateTimeOffsetDictionaryKeys,The following statement contains a magic number: var input = new Dictionary<DateTimeOffset' int>              {                  {date1' 1}'                  {date2' 2}              };
Magic Number,NServiceBus.Core.Tests.Serializers,SimpleJsonTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\SimpleJsonTests.cs,TestDateTimeOffsetDictionaryKeys,The following statement contains a magic number: Assert.AreEqual(2' result.Count);
Magic Number,NServiceBus.Core.Tests.Serializers,SimpleJsonTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\SimpleJsonTests.cs,TestDateTimeOffsetDictionaryKeys,The following statement contains a magic number: Assert.AreEqual(2' result[date2]);
Magic Number,NServiceBus.Core.Tests.Serializers,SimpleJsonTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\SimpleJsonTests.cs,TestGuidDictionaryKeys,The following statement contains a magic number: var input = new Dictionary<Guid' int>              {                  {guid1' 1}'                  {guid2' 2}              };
Magic Number,NServiceBus.Core.Tests.Serializers,SimpleJsonTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\SimpleJsonTests.cs,TestGuidDictionaryKeys,The following statement contains a magic number: Assert.AreEqual(2' result.Count);
Magic Number,NServiceBus.Core.Tests.Serializers,SimpleJsonTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\SimpleJsonTests.cs,TestGuidDictionaryKeys,The following statement contains a magic number: Assert.AreEqual(2' result[guid2]);
Magic Number,NServiceBus.Core.Tests.Serializers,SimpleJsonTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\SimpleJsonTests.cs,TestEnumDictionaryKeys,The following statement contains a magic number: var input = new Dictionary<SampleEnum' int>              {                  {enum1' 1}'                  {enum2' 2}              };
Magic Number,NServiceBus.Core.Tests.Serializers,SimpleJsonTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\SimpleJsonTests.cs,TestEnumDictionaryKeys,The following statement contains a magic number: Assert.AreEqual(2' result.Count);
Magic Number,NServiceBus.Core.Tests.Serializers,SimpleJsonTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\SimpleJsonTests.cs,TestEnumDictionaryKeys,The following statement contains a magic number: Assert.AreEqual(2' result[enum2]);
Magic Number,NServiceBus.Core.Tests.Serializers,SimpleJsonTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\SimpleJsonTests.cs,TestPocoClass,The following statement contains a magic number: var input = new SamplePoco              {                  Guid = Guid.NewGuid()'                  Int = 21'                  String = "abc"              };
Magic Number,NServiceBus.Core.Tests.Serializers,SimpleJsonTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\SimpleJsonTests.cs,TestReadOnlyCollection,The following statement contains a magic number: var input = new ReadOnlyDictionary<string' int>(new Dictionary<string' int>              {                  {"hello"' 11}'                  {"world"' 22}              });
Magic Number,NServiceBus.Core.Tests.Serializers,SimpleJsonTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\SimpleJsonTests.cs,TestReadOnlyCollection,The following statement contains a magic number: var input = new ReadOnlyDictionary<string' int>(new Dictionary<string' int>              {                  {"hello"' 11}'                  {"world"' 22}              });
Magic Number,NServiceBus.Core.Tests.Serializers,SimpleJsonTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\SimpleJsonTests.cs,TestReadOnlyCollection,The following statement contains a magic number: Assert.AreEqual(11' result["hello"]);
Magic Number,NServiceBus.Core.Tests.Serializers,SimpleJsonTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\SimpleJsonTests.cs,TestReadOnlyCollection,The following statement contains a magic number: Assert.AreEqual(22' result["world"]);
Magic Number,NServiceBus.Core.Tests.Serializers,SimpleJsonTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\SimpleJsonTests.cs,TestDateTime,The following statement contains a magic number: var input = new DateTime(2010' 10' 10' 10' 10' 10' dateTimeKind);
Magic Number,NServiceBus.Core.Tests.Serializers,SimpleJsonTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\SimpleJsonTests.cs,TestDateTime,The following statement contains a magic number: var input = new DateTime(2010' 10' 10' 10' 10' 10' dateTimeKind);
Magic Number,NServiceBus.Core.Tests.Serializers,SimpleJsonTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\SimpleJsonTests.cs,TestDateTime,The following statement contains a magic number: var input = new DateTime(2010' 10' 10' 10' 10' 10' dateTimeKind);
Magic Number,NServiceBus.Core.Tests.Serializers,SimpleJsonTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\SimpleJsonTests.cs,TestDateTime,The following statement contains a magic number: var input = new DateTime(2010' 10' 10' 10' 10' 10' dateTimeKind);
Magic Number,NServiceBus.Core.Tests.Serializers,SimpleJsonTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\SimpleJsonTests.cs,TestDateTime,The following statement contains a magic number: var input = new DateTime(2010' 10' 10' 10' 10' 10' dateTimeKind);
Magic Number,NServiceBus.Core.Tests.Serializers,SimpleJsonTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\SimpleJsonTests.cs,TestDateTime,The following statement contains a magic number: var input = new DateTime(2010' 10' 10' 10' 10' 10' dateTimeKind);
Magic Number,NServiceBus.Core.Tests.Serializers,SimpleJsonTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\SimpleJsonTests.cs,TestDateTimeOffset,The following statement contains a magic number: var input = new DateTimeOffset(2010' 10' 10' 10' 10' 10' TimeSpan.FromHours(10));
Magic Number,NServiceBus.Core.Tests.Serializers,SimpleJsonTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\SimpleJsonTests.cs,TestDateTimeOffset,The following statement contains a magic number: var input = new DateTimeOffset(2010' 10' 10' 10' 10' 10' TimeSpan.FromHours(10));
Magic Number,NServiceBus.Core.Tests.Serializers,SimpleJsonTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\SimpleJsonTests.cs,TestDateTimeOffset,The following statement contains a magic number: var input = new DateTimeOffset(2010' 10' 10' 10' 10' 10' TimeSpan.FromHours(10));
Magic Number,NServiceBus.Core.Tests.Serializers,SimpleJsonTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\SimpleJsonTests.cs,TestDateTimeOffset,The following statement contains a magic number: var input = new DateTimeOffset(2010' 10' 10' 10' 10' 10' TimeSpan.FromHours(10));
Magic Number,NServiceBus.Core.Tests.Serializers,SimpleJsonTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\SimpleJsonTests.cs,TestDateTimeOffset,The following statement contains a magic number: var input = new DateTimeOffset(2010' 10' 10' 10' 10' 10' TimeSpan.FromHours(10));
Magic Number,NServiceBus.Core.Tests.Serializers,SimpleJsonTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\SimpleJsonTests.cs,TestDateTimeOffset,The following statement contains a magic number: var input = new DateTimeOffset(2010' 10' 10' 10' 10' 10' TimeSpan.FromHours(10));
Magic Number,NServiceBus.Core.Tests.Serializers,SimpleJsonTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\SimpleJsonTests.cs,TestDateTimeOffset,The following statement contains a magic number: var input = new DateTimeOffset(2010' 10' 10' 10' 10' 10' TimeSpan.FromHours(10));
Magic Number,NServiceBus.Core.Tests.Serializers,SimpleJsonTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\SimpleJsonTests.cs,TestHashSet,The following statement contains a magic number: Assert.AreEqual(2' result.Count);
Magic Number,NServiceBus.Core.Tests.Serializers,SimpleJsonTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\SimpleJsonTests.cs,TestCustomDictionary,The following statement contains a magic number: var input = new CustomDictionary              {                  { 2' 4 }'                  { 3' 9 }              };
Magic Number,NServiceBus.Core.Tests.Serializers,SimpleJsonTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\SimpleJsonTests.cs,TestCustomDictionary,The following statement contains a magic number: var input = new CustomDictionary              {                  { 2' 4 }'                  { 3' 9 }              };
Magic Number,NServiceBus.Core.Tests.Serializers,SimpleJsonTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\SimpleJsonTests.cs,TestCustomDictionary,The following statement contains a magic number: var input = new CustomDictionary              {                  { 2' 4 }'                  { 3' 9 }              };
Magic Number,NServiceBus.Core.Tests.Serializers,SimpleJsonTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\SimpleJsonTests.cs,TestCustomDictionary,The following statement contains a magic number: var input = new CustomDictionary              {                  { 2' 4 }'                  { 3' 9 }              };
Magic Number,NServiceBus.Core.Tests.Serializers,SimpleJsonTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\SimpleJsonTests.cs,TestCustomDictionary,The following statement contains a magic number: Assert.AreEqual(2' result.Count);
Magic Number,NServiceBus.Core.Tests.Serializers,SimpleJsonTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\SimpleJsonTests.cs,TestCustomDictionary,The following statement contains a magic number: Assert.AreEqual(4' result[2]);
Magic Number,NServiceBus.Core.Tests.Serializers,SimpleJsonTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\SimpleJsonTests.cs,TestCustomDictionary,The following statement contains a magic number: Assert.AreEqual(4' result[2]);
Magic Number,NServiceBus.Core.Tests.Serializers,SimpleJsonTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\SimpleJsonTests.cs,TestCustomDictionary,The following statement contains a magic number: Assert.AreEqual(9' result[3]);
Magic Number,NServiceBus.Core.Tests.Serializers,SimpleJsonTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\SimpleJsonTests.cs,TestCustomDictionary,The following statement contains a magic number: Assert.AreEqual(9' result[3]);
Magic Number,NServiceBus.Core.Tests.Serializers,SimpleJsonTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\SimpleJsonTests.cs,TestKVPEnumerable,The following statement contains a magic number: Assert.AreEqual(2' result.Count());
Magic Number,NServiceBus.Serializers.XML.Test,ConcurrencySerializerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\ConcurrencySerializerTests.cs,Should_deserialize_in_parallel,The following statement contains a magic number: Parallel.For(1' 1000' i =>                                        {                                            RequestDataMessage result;                                            using (var stream = new MemoryStream())                                            {                                                serializer.Serialize(expected' stream);                                                stream.Position = 0;                                                  var msgArray = serializer.Deserialize(stream);                                                result = (RequestDataMessage) msgArray[0];                                            }                                              Assert.AreEqual(expected.DataId' result.DataId);                                            Assert.AreEqual(expected.String' result.String);                                      });
Magic Number,NServiceBus.Serializers.XML.Test,DictionaryTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\DictionaryTests.cs,Should_deserialize_dictionaries,The following statement contains a magic number: var expected = new MessageWithDictionaries                                 {                                     Bools = new Dictionary<bool' bool>                                                 {                                                     {true' true}'                                                     {false' false}                                                 }'                                     Chars = new Dictionary<char' char>                                                 {                                                     //{char.MinValue' char.MaxValue}' // doesn't work because we use UTF8                                                     {'a'' 'b'}'                                                     {'c'' 'd'}'                                                     {'e'' 'f'}                                                 }'                                     Bytes = new Dictionary<byte' byte>                                                 {                                                     {byte.MinValue' byte.MaxValue}'                                                     {11' 1}'                                                     {1' 0}                                                 }'                                     Ints = new Dictionary<int' int>                                                {                                                    {int.MinValue' int.MaxValue}'                                                    {1' 2}'                                                    {3' 4}'                                                    {5' 6}                                                }'                                     Decimals = new Dictionary<decimal' decimal>                                                    {                                                        {decimal.MinValue' decimal.MaxValue}'                                                        {.2m' 4m}'                                                        {.5m' .4234m}                                                    }'                                     Doubles = new Dictionary<double' double>                                                   {                                                       {double.MinValue' double.MaxValue}'                                                       {.223d' 234d}'                                                       {.513d' .4212334d}                                                   }'                                     Floats = new Dictionary<float' float>                                                  {                                                      {float.MinValue' float.MaxValue}'                                                      {.223f' 234f}'                                                      {.513f' .4212334f}                                                  }'                                     Enums = new Dictionary<DateTimeStyles' DateTimeKind>                                                 {                                                     {DateTimeStyles.AdjustToUniversal' DateTimeKind.Local}'                                                     {DateTimeStyles.AllowLeadingWhite' DateTimeKind.Unspecified}'                                                   }'                                     Longs = new Dictionary<long' long>                                                 {                                                     {long.MaxValue' long.MinValue}'                                                     {34234' 234324}'                                                     {45345345' 34534534565}                                                 }'                                     SBytes = new Dictionary<sbyte' sbyte>                                                  {                                                      {sbyte.MaxValue' sbyte.MaxValue}'                                                      {56' 13}                                                  }'                                     Shorts = new Dictionary<short' short>                                                  {                                                      {short.MinValue' short.MaxValue}'                                                      {5231' 6123}                                                  }'                                     Strings = new Dictionary<string' string>                                                   {                                                       {"Key1"' "Value1"}'                                                       {"Key2"' "Value2"}'                                                       {"Key3"' "Value3"}'                                                   }'                                     UInts = new Dictionary<uint' uint>                                                 {                                                     {uint.MinValue' 23}'                                                     {uint.MaxValue' 34324}                                                 }'                                     ULongs = new Dictionary<ulong' ulong>                                                  {                                                      {ulong.MinValue' ulong.MaxValue}'                                                      {34324234' 3243243245}                                                  }'                                     UShorts = new Dictionary<ushort' ushort>                                                   {                                                       {ushort.MinValue' ushort.MaxValue}'                                                       {42324' 32}                                                   }                                   };
Magic Number,NServiceBus.Serializers.XML.Test,DictionaryTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\DictionaryTests.cs,Should_deserialize_dictionaries,The following statement contains a magic number: var expected = new MessageWithDictionaries                                 {                                     Bools = new Dictionary<bool' bool>                                                 {                                                     {true' true}'                                                     {false' false}                                                 }'                                     Chars = new Dictionary<char' char>                                                 {                                                     //{char.MinValue' char.MaxValue}' // doesn't work because we use UTF8                                                     {'a'' 'b'}'                                                     {'c'' 'd'}'                                                     {'e'' 'f'}                                                 }'                                     Bytes = new Dictionary<byte' byte>                                                 {                                                     {byte.MinValue' byte.MaxValue}'                                                     {11' 1}'                                                     {1' 0}                                                 }'                                     Ints = new Dictionary<int' int>                                                {                                                    {int.MinValue' int.MaxValue}'                                                    {1' 2}'                                                    {3' 4}'                                                    {5' 6}                                                }'                                     Decimals = new Dictionary<decimal' decimal>                                                    {                                                        {decimal.MinValue' decimal.MaxValue}'                                                        {.2m' 4m}'                                                        {.5m' .4234m}                                                    }'                                     Doubles = new Dictionary<double' double>                                                   {                                                       {double.MinValue' double.MaxValue}'                                                       {.223d' 234d}'                                                       {.513d' .4212334d}                                                   }'                                     Floats = new Dictionary<float' float>                                                  {                                                      {float.MinValue' float.MaxValue}'                                                      {.223f' 234f}'                                                      {.513f' .4212334f}                                                  }'                                     Enums = new Dictionary<DateTimeStyles' DateTimeKind>                                                 {                                                     {DateTimeStyles.AdjustToUniversal' DateTimeKind.Local}'                                                     {DateTimeStyles.AllowLeadingWhite' DateTimeKind.Unspecified}'                                                   }'                                     Longs = new Dictionary<long' long>                                                 {                                                     {long.MaxValue' long.MinValue}'                                                     {34234' 234324}'                                                     {45345345' 34534534565}                                                 }'                                     SBytes = new Dictionary<sbyte' sbyte>                                                  {                                                      {sbyte.MaxValue' sbyte.MaxValue}'                                                      {56' 13}                                                  }'                                     Shorts = new Dictionary<short' short>                                                  {                                                      {short.MinValue' short.MaxValue}'                                                      {5231' 6123}                                                  }'                                     Strings = new Dictionary<string' string>                                                   {                                                       {"Key1"' "Value1"}'                                                       {"Key2"' "Value2"}'                                                       {"Key3"' "Value3"}'                                                   }'                                     UInts = new Dictionary<uint' uint>                                                 {                                                     {uint.MinValue' 23}'                                                     {uint.MaxValue' 34324}                                                 }'                                     ULongs = new Dictionary<ulong' ulong>                                                  {                                                      {ulong.MinValue' ulong.MaxValue}'                                                      {34324234' 3243243245}                                                  }'                                     UShorts = new Dictionary<ushort' ushort>                                                   {                                                       {ushort.MinValue' ushort.MaxValue}'                                                       {42324' 32}                                                   }                                   };
Magic Number,NServiceBus.Serializers.XML.Test,DictionaryTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\DictionaryTests.cs,Should_deserialize_dictionaries,The following statement contains a magic number: var expected = new MessageWithDictionaries                                 {                                     Bools = new Dictionary<bool' bool>                                                 {                                                     {true' true}'                                                     {false' false}                                                 }'                                     Chars = new Dictionary<char' char>                                                 {                                                     //{char.MinValue' char.MaxValue}' // doesn't work because we use UTF8                                                     {'a'' 'b'}'                                                     {'c'' 'd'}'                                                     {'e'' 'f'}                                                 }'                                     Bytes = new Dictionary<byte' byte>                                                 {                                                     {byte.MinValue' byte.MaxValue}'                                                     {11' 1}'                                                     {1' 0}                                                 }'                                     Ints = new Dictionary<int' int>                                                {                                                    {int.MinValue' int.MaxValue}'                                                    {1' 2}'                                                    {3' 4}'                                                    {5' 6}                                                }'                                     Decimals = new Dictionary<decimal' decimal>                                                    {                                                        {decimal.MinValue' decimal.MaxValue}'                                                        {.2m' 4m}'                                                        {.5m' .4234m}                                                    }'                                     Doubles = new Dictionary<double' double>                                                   {                                                       {double.MinValue' double.MaxValue}'                                                       {.223d' 234d}'                                                       {.513d' .4212334d}                                                   }'                                     Floats = new Dictionary<float' float>                                                  {                                                      {float.MinValue' float.MaxValue}'                                                      {.223f' 234f}'                                                      {.513f' .4212334f}                                                  }'                                     Enums = new Dictionary<DateTimeStyles' DateTimeKind>                                                 {                                                     {DateTimeStyles.AdjustToUniversal' DateTimeKind.Local}'                                                     {DateTimeStyles.AllowLeadingWhite' DateTimeKind.Unspecified}'                                                   }'                                     Longs = new Dictionary<long' long>                                                 {                                                     {long.MaxValue' long.MinValue}'                                                     {34234' 234324}'                                                     {45345345' 34534534565}                                                 }'                                     SBytes = new Dictionary<sbyte' sbyte>                                                  {                                                      {sbyte.MaxValue' sbyte.MaxValue}'                                                      {56' 13}                                                  }'                                     Shorts = new Dictionary<short' short>                                                  {                                                      {short.MinValue' short.MaxValue}'                                                      {5231' 6123}                                                  }'                                     Strings = new Dictionary<string' string>                                                   {                                                       {"Key1"' "Value1"}'                                                       {"Key2"' "Value2"}'                                                       {"Key3"' "Value3"}'                                                   }'                                     UInts = new Dictionary<uint' uint>                                                 {                                                     {uint.MinValue' 23}'                                                     {uint.MaxValue' 34324}                                                 }'                                     ULongs = new Dictionary<ulong' ulong>                                                  {                                                      {ulong.MinValue' ulong.MaxValue}'                                                      {34324234' 3243243245}                                                  }'                                     UShorts = new Dictionary<ushort' ushort>                                                   {                                                       {ushort.MinValue' ushort.MaxValue}'                                                       {42324' 32}                                                   }                                   };
Magic Number,NServiceBus.Serializers.XML.Test,DictionaryTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\DictionaryTests.cs,Should_deserialize_dictionaries,The following statement contains a magic number: var expected = new MessageWithDictionaries                                 {                                     Bools = new Dictionary<bool' bool>                                                 {                                                     {true' true}'                                                     {false' false}                                                 }'                                     Chars = new Dictionary<char' char>                                                 {                                                     //{char.MinValue' char.MaxValue}' // doesn't work because we use UTF8                                                     {'a'' 'b'}'                                                     {'c'' 'd'}'                                                     {'e'' 'f'}                                                 }'                                     Bytes = new Dictionary<byte' byte>                                                 {                                                     {byte.MinValue' byte.MaxValue}'                                                     {11' 1}'                                                     {1' 0}                                                 }'                                     Ints = new Dictionary<int' int>                                                {                                                    {int.MinValue' int.MaxValue}'                                                    {1' 2}'                                                    {3' 4}'                                                    {5' 6}                                                }'                                     Decimals = new Dictionary<decimal' decimal>                                                    {                                                        {decimal.MinValue' decimal.MaxValue}'                                                        {.2m' 4m}'                                                        {.5m' .4234m}                                                    }'                                     Doubles = new Dictionary<double' double>                                                   {                                                       {double.MinValue' double.MaxValue}'                                                       {.223d' 234d}'                                                       {.513d' .4212334d}                                                   }'                                     Floats = new Dictionary<float' float>                                                  {                                                      {float.MinValue' float.MaxValue}'                                                      {.223f' 234f}'                                                      {.513f' .4212334f}                                                  }'                                     Enums = new Dictionary<DateTimeStyles' DateTimeKind>                                                 {                                                     {DateTimeStyles.AdjustToUniversal' DateTimeKind.Local}'                                                     {DateTimeStyles.AllowLeadingWhite' DateTimeKind.Unspecified}'                                                   }'                                     Longs = new Dictionary<long' long>                                                 {                                                     {long.MaxValue' long.MinValue}'                                                     {34234' 234324}'                                                     {45345345' 34534534565}                                                 }'                                     SBytes = new Dictionary<sbyte' sbyte>                                                  {                                                      {sbyte.MaxValue' sbyte.MaxValue}'                                                      {56' 13}                                                  }'                                     Shorts = new Dictionary<short' short>                                                  {                                                      {short.MinValue' short.MaxValue}'                                                      {5231' 6123}                                                  }'                                     Strings = new Dictionary<string' string>                                                   {                                                       {"Key1"' "Value1"}'                                                       {"Key2"' "Value2"}'                                                       {"Key3"' "Value3"}'                                                   }'                                     UInts = new Dictionary<uint' uint>                                                 {                                                     {uint.MinValue' 23}'                                                     {uint.MaxValue' 34324}                                                 }'                                     ULongs = new Dictionary<ulong' ulong>                                                  {                                                      {ulong.MinValue' ulong.MaxValue}'                                                      {34324234' 3243243245}                                                  }'                                     UShorts = new Dictionary<ushort' ushort>                                                   {                                                       {ushort.MinValue' ushort.MaxValue}'                                                       {42324' 32}                                                   }                                   };
Magic Number,NServiceBus.Serializers.XML.Test,DictionaryTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\DictionaryTests.cs,Should_deserialize_dictionaries,The following statement contains a magic number: var expected = new MessageWithDictionaries                                 {                                     Bools = new Dictionary<bool' bool>                                                 {                                                     {true' true}'                                                     {false' false}                                                 }'                                     Chars = new Dictionary<char' char>                                                 {                                                     //{char.MinValue' char.MaxValue}' // doesn't work because we use UTF8                                                     {'a'' 'b'}'                                                     {'c'' 'd'}'                                                     {'e'' 'f'}                                                 }'                                     Bytes = new Dictionary<byte' byte>                                                 {                                                     {byte.MinValue' byte.MaxValue}'                                                     {11' 1}'                                                     {1' 0}                                                 }'                                     Ints = new Dictionary<int' int>                                                {                                                    {int.MinValue' int.MaxValue}'                                                    {1' 2}'                                                    {3' 4}'                                                    {5' 6}                                                }'                                     Decimals = new Dictionary<decimal' decimal>                                                    {                                                        {decimal.MinValue' decimal.MaxValue}'                                                        {.2m' 4m}'                                                        {.5m' .4234m}                                                    }'                                     Doubles = new Dictionary<double' double>                                                   {                                                       {double.MinValue' double.MaxValue}'                                                       {.223d' 234d}'                                                       {.513d' .4212334d}                                                   }'                                     Floats = new Dictionary<float' float>                                                  {                                                      {float.MinValue' float.MaxValue}'                                                      {.223f' 234f}'                                                      {.513f' .4212334f}                                                  }'                                     Enums = new Dictionary<DateTimeStyles' DateTimeKind>                                                 {                                                     {DateTimeStyles.AdjustToUniversal' DateTimeKind.Local}'                                                     {DateTimeStyles.AllowLeadingWhite' DateTimeKind.Unspecified}'                                                   }'                                     Longs = new Dictionary<long' long>                                                 {                                                     {long.MaxValue' long.MinValue}'                                                     {34234' 234324}'                                                     {45345345' 34534534565}                                                 }'                                     SBytes = new Dictionary<sbyte' sbyte>                                                  {                                                      {sbyte.MaxValue' sbyte.MaxValue}'                                                      {56' 13}                                                  }'                                     Shorts = new Dictionary<short' short>                                                  {                                                      {short.MinValue' short.MaxValue}'                                                      {5231' 6123}                                                  }'                                     Strings = new Dictionary<string' string>                                                   {                                                       {"Key1"' "Value1"}'                                                       {"Key2"' "Value2"}'                                                       {"Key3"' "Value3"}'                                                   }'                                     UInts = new Dictionary<uint' uint>                                                 {                                                     {uint.MinValue' 23}'                                                     {uint.MaxValue' 34324}                                                 }'                                     ULongs = new Dictionary<ulong' ulong>                                                  {                                                      {ulong.MinValue' ulong.MaxValue}'                                                      {34324234' 3243243245}                                                  }'                                     UShorts = new Dictionary<ushort' ushort>                                                   {                                                       {ushort.MinValue' ushort.MaxValue}'                                                       {42324' 32}                                                   }                                   };
Magic Number,NServiceBus.Serializers.XML.Test,DictionaryTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\DictionaryTests.cs,Should_deserialize_dictionaries,The following statement contains a magic number: var expected = new MessageWithDictionaries                                 {                                     Bools = new Dictionary<bool' bool>                                                 {                                                     {true' true}'                                                     {false' false}                                                 }'                                     Chars = new Dictionary<char' char>                                                 {                                                     //{char.MinValue' char.MaxValue}' // doesn't work because we use UTF8                                                     {'a'' 'b'}'                                                     {'c'' 'd'}'                                                     {'e'' 'f'}                                                 }'                                     Bytes = new Dictionary<byte' byte>                                                 {                                                     {byte.MinValue' byte.MaxValue}'                                                     {11' 1}'                                                     {1' 0}                                                 }'                                     Ints = new Dictionary<int' int>                                                {                                                    {int.MinValue' int.MaxValue}'                                                    {1' 2}'                                                    {3' 4}'                                                    {5' 6}                                                }'                                     Decimals = new Dictionary<decimal' decimal>                                                    {                                                        {decimal.MinValue' decimal.MaxValue}'                                                        {.2m' 4m}'                                                        {.5m' .4234m}                                                    }'                                     Doubles = new Dictionary<double' double>                                                   {                                                       {double.MinValue' double.MaxValue}'                                                       {.223d' 234d}'                                                       {.513d' .4212334d}                                                   }'                                     Floats = new Dictionary<float' float>                                                  {                                                      {float.MinValue' float.MaxValue}'                                                      {.223f' 234f}'                                                      {.513f' .4212334f}                                                  }'                                     Enums = new Dictionary<DateTimeStyles' DateTimeKind>                                                 {                                                     {DateTimeStyles.AdjustToUniversal' DateTimeKind.Local}'                                                     {DateTimeStyles.AllowLeadingWhite' DateTimeKind.Unspecified}'                                                   }'                                     Longs = new Dictionary<long' long>                                                 {                                                     {long.MaxValue' long.MinValue}'                                                     {34234' 234324}'                                                     {45345345' 34534534565}                                                 }'                                     SBytes = new Dictionary<sbyte' sbyte>                                                  {                                                      {sbyte.MaxValue' sbyte.MaxValue}'                                                      {56' 13}                                                  }'                                     Shorts = new Dictionary<short' short>                                                  {                                                      {short.MinValue' short.MaxValue}'                                                      {5231' 6123}                                                  }'                                     Strings = new Dictionary<string' string>                                                   {                                                       {"Key1"' "Value1"}'                                                       {"Key2"' "Value2"}'                                                       {"Key3"' "Value3"}'                                                   }'                                     UInts = new Dictionary<uint' uint>                                                 {                                                     {uint.MinValue' 23}'                                                     {uint.MaxValue' 34324}                                                 }'                                     ULongs = new Dictionary<ulong' ulong>                                                  {                                                      {ulong.MinValue' ulong.MaxValue}'                                                      {34324234' 3243243245}                                                  }'                                     UShorts = new Dictionary<ushort' ushort>                                                   {                                                       {ushort.MinValue' ushort.MaxValue}'                                                       {42324' 32}                                                   }                                   };
Magic Number,NServiceBus.Serializers.XML.Test,DictionaryTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\DictionaryTests.cs,Should_deserialize_dictionaries,The following statement contains a magic number: var expected = new MessageWithDictionaries                                 {                                     Bools = new Dictionary<bool' bool>                                                 {                                                     {true' true}'                                                     {false' false}                                                 }'                                     Chars = new Dictionary<char' char>                                                 {                                                     //{char.MinValue' char.MaxValue}' // doesn't work because we use UTF8                                                     {'a'' 'b'}'                                                     {'c'' 'd'}'                                                     {'e'' 'f'}                                                 }'                                     Bytes = new Dictionary<byte' byte>                                                 {                                                     {byte.MinValue' byte.MaxValue}'                                                     {11' 1}'                                                     {1' 0}                                                 }'                                     Ints = new Dictionary<int' int>                                                {                                                    {int.MinValue' int.MaxValue}'                                                    {1' 2}'                                                    {3' 4}'                                                    {5' 6}                                                }'                                     Decimals = new Dictionary<decimal' decimal>                                                    {                                                        {decimal.MinValue' decimal.MaxValue}'                                                        {.2m' 4m}'                                                        {.5m' .4234m}                                                    }'                                     Doubles = new Dictionary<double' double>                                                   {                                                       {double.MinValue' double.MaxValue}'                                                       {.223d' 234d}'                                                       {.513d' .4212334d}                                                   }'                                     Floats = new Dictionary<float' float>                                                  {                                                      {float.MinValue' float.MaxValue}'                                                      {.223f' 234f}'                                                      {.513f' .4212334f}                                                  }'                                     Enums = new Dictionary<DateTimeStyles' DateTimeKind>                                                 {                                                     {DateTimeStyles.AdjustToUniversal' DateTimeKind.Local}'                                                     {DateTimeStyles.AllowLeadingWhite' DateTimeKind.Unspecified}'                                                   }'                                     Longs = new Dictionary<long' long>                                                 {                                                     {long.MaxValue' long.MinValue}'                                                     {34234' 234324}'                                                     {45345345' 34534534565}                                                 }'                                     SBytes = new Dictionary<sbyte' sbyte>                                                  {                                                      {sbyte.MaxValue' sbyte.MaxValue}'                                                      {56' 13}                                                  }'                                     Shorts = new Dictionary<short' short>                                                  {                                                      {short.MinValue' short.MaxValue}'                                                      {5231' 6123}                                                  }'                                     Strings = new Dictionary<string' string>                                                   {                                                       {"Key1"' "Value1"}'                                                       {"Key2"' "Value2"}'                                                       {"Key3"' "Value3"}'                                                   }'                                     UInts = new Dictionary<uint' uint>                                                 {                                                     {uint.MinValue' 23}'                                                     {uint.MaxValue' 34324}                                                 }'                                     ULongs = new Dictionary<ulong' ulong>                                                  {                                                      {ulong.MinValue' ulong.MaxValue}'                                                      {34324234' 3243243245}                                                  }'                                     UShorts = new Dictionary<ushort' ushort>                                                   {                                                       {ushort.MinValue' ushort.MaxValue}'                                                       {42324' 32}                                                   }                                   };
Magic Number,NServiceBus.Serializers.XML.Test,DictionaryTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\DictionaryTests.cs,Should_deserialize_dictionaries,The following statement contains a magic number: var expected = new MessageWithDictionaries                                 {                                     Bools = new Dictionary<bool' bool>                                                 {                                                     {true' true}'                                                     {false' false}                                                 }'                                     Chars = new Dictionary<char' char>                                                 {                                                     //{char.MinValue' char.MaxValue}' // doesn't work because we use UTF8                                                     {'a'' 'b'}'                                                     {'c'' 'd'}'                                                     {'e'' 'f'}                                                 }'                                     Bytes = new Dictionary<byte' byte>                                                 {                                                     {byte.MinValue' byte.MaxValue}'                                                     {11' 1}'                                                     {1' 0}                                                 }'                                     Ints = new Dictionary<int' int>                                                {                                                    {int.MinValue' int.MaxValue}'                                                    {1' 2}'                                                    {3' 4}'                                                    {5' 6}                                                }'                                     Decimals = new Dictionary<decimal' decimal>                                                    {                                                        {decimal.MinValue' decimal.MaxValue}'                                                        {.2m' 4m}'                                                        {.5m' .4234m}                                                    }'                                     Doubles = new Dictionary<double' double>                                                   {                                                       {double.MinValue' double.MaxValue}'                                                       {.223d' 234d}'                                                       {.513d' .4212334d}                                                   }'                                     Floats = new Dictionary<float' float>                                                  {                                                      {float.MinValue' float.MaxValue}'                                                      {.223f' 234f}'                                                      {.513f' .4212334f}                                                  }'                                     Enums = new Dictionary<DateTimeStyles' DateTimeKind>                                                 {                                                     {DateTimeStyles.AdjustToUniversal' DateTimeKind.Local}'                                                     {DateTimeStyles.AllowLeadingWhite' DateTimeKind.Unspecified}'                                                   }'                                     Longs = new Dictionary<long' long>                                                 {                                                     {long.MaxValue' long.MinValue}'                                                     {34234' 234324}'                                                     {45345345' 34534534565}                                                 }'                                     SBytes = new Dictionary<sbyte' sbyte>                                                  {                                                      {sbyte.MaxValue' sbyte.MaxValue}'                                                      {56' 13}                                                  }'                                     Shorts = new Dictionary<short' short>                                                  {                                                      {short.MinValue' short.MaxValue}'                                                      {5231' 6123}                                                  }'                                     Strings = new Dictionary<string' string>                                                   {                                                       {"Key1"' "Value1"}'                                                       {"Key2"' "Value2"}'                                                       {"Key3"' "Value3"}'                                                   }'                                     UInts = new Dictionary<uint' uint>                                                 {                                                     {uint.MinValue' 23}'                                                     {uint.MaxValue' 34324}                                                 }'                                     ULongs = new Dictionary<ulong' ulong>                                                  {                                                      {ulong.MinValue' ulong.MaxValue}'                                                      {34324234' 3243243245}                                                  }'                                     UShorts = new Dictionary<ushort' ushort>                                                   {                                                       {ushort.MinValue' ushort.MaxValue}'                                                       {42324' 32}                                                   }                                   };
Magic Number,NServiceBus.Serializers.XML.Test,DictionaryTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\DictionaryTests.cs,Should_deserialize_dictionaries,The following statement contains a magic number: var expected = new MessageWithDictionaries                                 {                                     Bools = new Dictionary<bool' bool>                                                 {                                                     {true' true}'                                                     {false' false}                                                 }'                                     Chars = new Dictionary<char' char>                                                 {                                                     //{char.MinValue' char.MaxValue}' // doesn't work because we use UTF8                                                     {'a'' 'b'}'                                                     {'c'' 'd'}'                                                     {'e'' 'f'}                                                 }'                                     Bytes = new Dictionary<byte' byte>                                                 {                                                     {byte.MinValue' byte.MaxValue}'                                                     {11' 1}'                                                     {1' 0}                                                 }'                                     Ints = new Dictionary<int' int>                                                {                                                    {int.MinValue' int.MaxValue}'                                                    {1' 2}'                                                    {3' 4}'                                                    {5' 6}                                                }'                                     Decimals = new Dictionary<decimal' decimal>                                                    {                                                        {decimal.MinValue' decimal.MaxValue}'                                                        {.2m' 4m}'                                                        {.5m' .4234m}                                                    }'                                     Doubles = new Dictionary<double' double>                                                   {                                                       {double.MinValue' double.MaxValue}'                                                       {.223d' 234d}'                                                       {.513d' .4212334d}                                                   }'                                     Floats = new Dictionary<float' float>                                                  {                                                      {float.MinValue' float.MaxValue}'                                                      {.223f' 234f}'                                                      {.513f' .4212334f}                                                  }'                                     Enums = new Dictionary<DateTimeStyles' DateTimeKind>                                                 {                                                     {DateTimeStyles.AdjustToUniversal' DateTimeKind.Local}'                                                     {DateTimeStyles.AllowLeadingWhite' DateTimeKind.Unspecified}'                                                   }'                                     Longs = new Dictionary<long' long>                                                 {                                                     {long.MaxValue' long.MinValue}'                                                     {34234' 234324}'                                                     {45345345' 34534534565}                                                 }'                                     SBytes = new Dictionary<sbyte' sbyte>                                                  {                                                      {sbyte.MaxValue' sbyte.MaxValue}'                                                      {56' 13}                                                  }'                                     Shorts = new Dictionary<short' short>                                                  {                                                      {short.MinValue' short.MaxValue}'                                                      {5231' 6123}                                                  }'                                     Strings = new Dictionary<string' string>                                                   {                                                       {"Key1"' "Value1"}'                                                       {"Key2"' "Value2"}'                                                       {"Key3"' "Value3"}'                                                   }'                                     UInts = new Dictionary<uint' uint>                                                 {                                                     {uint.MinValue' 23}'                                                     {uint.MaxValue' 34324}                                                 }'                                     ULongs = new Dictionary<ulong' ulong>                                                  {                                                      {ulong.MinValue' ulong.MaxValue}'                                                      {34324234' 3243243245}                                                  }'                                     UShorts = new Dictionary<ushort' ushort>                                                   {                                                       {ushort.MinValue' ushort.MaxValue}'                                                       {42324' 32}                                                   }                                   };
Magic Number,NServiceBus.Serializers.XML.Test,DictionaryTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\DictionaryTests.cs,Should_deserialize_dictionaries,The following statement contains a magic number: var expected = new MessageWithDictionaries                                 {                                     Bools = new Dictionary<bool' bool>                                                 {                                                     {true' true}'                                                     {false' false}                                                 }'                                     Chars = new Dictionary<char' char>                                                 {                                                     //{char.MinValue' char.MaxValue}' // doesn't work because we use UTF8                                                     {'a'' 'b'}'                                                     {'c'' 'd'}'                                                     {'e'' 'f'}                                                 }'                                     Bytes = new Dictionary<byte' byte>                                                 {                                                     {byte.MinValue' byte.MaxValue}'                                                     {11' 1}'                                                     {1' 0}                                                 }'                                     Ints = new Dictionary<int' int>                                                {                                                    {int.MinValue' int.MaxValue}'                                                    {1' 2}'                                                    {3' 4}'                                                    {5' 6}                                                }'                                     Decimals = new Dictionary<decimal' decimal>                                                    {                                                        {decimal.MinValue' decimal.MaxValue}'                                                        {.2m' 4m}'                                                        {.5m' .4234m}                                                    }'                                     Doubles = new Dictionary<double' double>                                                   {                                                       {double.MinValue' double.MaxValue}'                                                       {.223d' 234d}'                                                       {.513d' .4212334d}                                                   }'                                     Floats = new Dictionary<float' float>                                                  {                                                      {float.MinValue' float.MaxValue}'                                                      {.223f' 234f}'                                                      {.513f' .4212334f}                                                  }'                                     Enums = new Dictionary<DateTimeStyles' DateTimeKind>                                                 {                                                     {DateTimeStyles.AdjustToUniversal' DateTimeKind.Local}'                                                     {DateTimeStyles.AllowLeadingWhite' DateTimeKind.Unspecified}'                                                   }'                                     Longs = new Dictionary<long' long>                                                 {                                                     {long.MaxValue' long.MinValue}'                                                     {34234' 234324}'                                                     {45345345' 34534534565}                                                 }'                                     SBytes = new Dictionary<sbyte' sbyte>                                                  {                                                      {sbyte.MaxValue' sbyte.MaxValue}'                                                      {56' 13}                                                  }'                                     Shorts = new Dictionary<short' short>                                                  {                                                      {short.MinValue' short.MaxValue}'                                                      {5231' 6123}                                                  }'                                     Strings = new Dictionary<string' string>                                                   {                                                       {"Key1"' "Value1"}'                                                       {"Key2"' "Value2"}'                                                       {"Key3"' "Value3"}'                                                   }'                                     UInts = new Dictionary<uint' uint>                                                 {                                                     {uint.MinValue' 23}'                                                     {uint.MaxValue' 34324}                                                 }'                                     ULongs = new Dictionary<ulong' ulong>                                                  {                                                      {ulong.MinValue' ulong.MaxValue}'                                                      {34324234' 3243243245}                                                  }'                                     UShorts = new Dictionary<ushort' ushort>                                                   {                                                       {ushort.MinValue' ushort.MaxValue}'                                                       {42324' 32}                                                   }                                   };
Magic Number,NServiceBus.Serializers.XML.Test,DictionaryTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\DictionaryTests.cs,Should_deserialize_dictionaries,The following statement contains a magic number: var expected = new MessageWithDictionaries                                 {                                     Bools = new Dictionary<bool' bool>                                                 {                                                     {true' true}'                                                     {false' false}                                                 }'                                     Chars = new Dictionary<char' char>                                                 {                                                     //{char.MinValue' char.MaxValue}' // doesn't work because we use UTF8                                                     {'a'' 'b'}'                                                     {'c'' 'd'}'                                                     {'e'' 'f'}                                                 }'                                     Bytes = new Dictionary<byte' byte>                                                 {                                                     {byte.MinValue' byte.MaxValue}'                                                     {11' 1}'                                                     {1' 0}                                                 }'                                     Ints = new Dictionary<int' int>                                                {                                                    {int.MinValue' int.MaxValue}'                                                    {1' 2}'                                                    {3' 4}'                                                    {5' 6}                                                }'                                     Decimals = new Dictionary<decimal' decimal>                                                    {                                                        {decimal.MinValue' decimal.MaxValue}'                                                        {.2m' 4m}'                                                        {.5m' .4234m}                                                    }'                                     Doubles = new Dictionary<double' double>                                                   {                                                       {double.MinValue' double.MaxValue}'                                                       {.223d' 234d}'                                                       {.513d' .4212334d}                                                   }'                                     Floats = new Dictionary<float' float>                                                  {                                                      {float.MinValue' float.MaxValue}'                                                      {.223f' 234f}'                                                      {.513f' .4212334f}                                                  }'                                     Enums = new Dictionary<DateTimeStyles' DateTimeKind>                                                 {                                                     {DateTimeStyles.AdjustToUniversal' DateTimeKind.Local}'                                                     {DateTimeStyles.AllowLeadingWhite' DateTimeKind.Unspecified}'                                                   }'                                     Longs = new Dictionary<long' long>                                                 {                                                     {long.MaxValue' long.MinValue}'                                                     {34234' 234324}'                                                     {45345345' 34534534565}                                                 }'                                     SBytes = new Dictionary<sbyte' sbyte>                                                  {                                                      {sbyte.MaxValue' sbyte.MaxValue}'                                                      {56' 13}                                                  }'                                     Shorts = new Dictionary<short' short>                                                  {                                                      {short.MinValue' short.MaxValue}'                                                      {5231' 6123}                                                  }'                                     Strings = new Dictionary<string' string>                                                   {                                                       {"Key1"' "Value1"}'                                                       {"Key2"' "Value2"}'                                                       {"Key3"' "Value3"}'                                                   }'                                     UInts = new Dictionary<uint' uint>                                                 {                                                     {uint.MinValue' 23}'                                                     {uint.MaxValue' 34324}                                                 }'                                     ULongs = new Dictionary<ulong' ulong>                                                  {                                                      {ulong.MinValue' ulong.MaxValue}'                                                      {34324234' 3243243245}                                                  }'                                     UShorts = new Dictionary<ushort' ushort>                                                   {                                                       {ushort.MinValue' ushort.MaxValue}'                                                       {42324' 32}                                                   }                                   };
Magic Number,NServiceBus.Serializers.XML.Test,DictionaryTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\DictionaryTests.cs,Should_deserialize_dictionaries,The following statement contains a magic number: var expected = new MessageWithDictionaries                                 {                                     Bools = new Dictionary<bool' bool>                                                 {                                                     {true' true}'                                                     {false' false}                                                 }'                                     Chars = new Dictionary<char' char>                                                 {                                                     //{char.MinValue' char.MaxValue}' // doesn't work because we use UTF8                                                     {'a'' 'b'}'                                                     {'c'' 'd'}'                                                     {'e'' 'f'}                                                 }'                                     Bytes = new Dictionary<byte' byte>                                                 {                                                     {byte.MinValue' byte.MaxValue}'                                                     {11' 1}'                                                     {1' 0}                                                 }'                                     Ints = new Dictionary<int' int>                                                {                                                    {int.MinValue' int.MaxValue}'                                                    {1' 2}'                                                    {3' 4}'                                                    {5' 6}                                                }'                                     Decimals = new Dictionary<decimal' decimal>                                                    {                                                        {decimal.MinValue' decimal.MaxValue}'                                                        {.2m' 4m}'                                                        {.5m' .4234m}                                                    }'                                     Doubles = new Dictionary<double' double>                                                   {                                                       {double.MinValue' double.MaxValue}'                                                       {.223d' 234d}'                                                       {.513d' .4212334d}                                                   }'                                     Floats = new Dictionary<float' float>                                                  {                                                      {float.MinValue' float.MaxValue}'                                                      {.223f' 234f}'                                                      {.513f' .4212334f}                                                  }'                                     Enums = new Dictionary<DateTimeStyles' DateTimeKind>                                                 {                                                     {DateTimeStyles.AdjustToUniversal' DateTimeKind.Local}'                                                     {DateTimeStyles.AllowLeadingWhite' DateTimeKind.Unspecified}'                                                   }'                                     Longs = new Dictionary<long' long>                                                 {                                                     {long.MaxValue' long.MinValue}'                                                     {34234' 234324}'                                                     {45345345' 34534534565}                                                 }'                                     SBytes = new Dictionary<sbyte' sbyte>                                                  {                                                      {sbyte.MaxValue' sbyte.MaxValue}'                                                      {56' 13}                                                  }'                                     Shorts = new Dictionary<short' short>                                                  {                                                      {short.MinValue' short.MaxValue}'                                                      {5231' 6123}                                                  }'                                     Strings = new Dictionary<string' string>                                                   {                                                       {"Key1"' "Value1"}'                                                       {"Key2"' "Value2"}'                                                       {"Key3"' "Value3"}'                                                   }'                                     UInts = new Dictionary<uint' uint>                                                 {                                                     {uint.MinValue' 23}'                                                     {uint.MaxValue' 34324}                                                 }'                                     ULongs = new Dictionary<ulong' ulong>                                                  {                                                      {ulong.MinValue' ulong.MaxValue}'                                                      {34324234' 3243243245}                                                  }'                                     UShorts = new Dictionary<ushort' ushort>                                                   {                                                       {ushort.MinValue' ushort.MaxValue}'                                                       {42324' 32}                                                   }                                   };
Magic Number,NServiceBus.Serializers.XML.Test,DictionaryTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\DictionaryTests.cs,Should_deserialize_dictionaries,The following statement contains a magic number: var expected = new MessageWithDictionaries                                 {                                     Bools = new Dictionary<bool' bool>                                                 {                                                     {true' true}'                                                     {false' false}                                                 }'                                     Chars = new Dictionary<char' char>                                                 {                                                     //{char.MinValue' char.MaxValue}' // doesn't work because we use UTF8                                                     {'a'' 'b'}'                                                     {'c'' 'd'}'                                                     {'e'' 'f'}                                                 }'                                     Bytes = new Dictionary<byte' byte>                                                 {                                                     {byte.MinValue' byte.MaxValue}'                                                     {11' 1}'                                                     {1' 0}                                                 }'                                     Ints = new Dictionary<int' int>                                                {                                                    {int.MinValue' int.MaxValue}'                                                    {1' 2}'                                                    {3' 4}'                                                    {5' 6}                                                }'                                     Decimals = new Dictionary<decimal' decimal>                                                    {                                                        {decimal.MinValue' decimal.MaxValue}'                                                        {.2m' 4m}'                                                        {.5m' .4234m}                                                    }'                                     Doubles = new Dictionary<double' double>                                                   {                                                       {double.MinValue' double.MaxValue}'                                                       {.223d' 234d}'                                                       {.513d' .4212334d}                                                   }'                                     Floats = new Dictionary<float' float>                                                  {                                                      {float.MinValue' float.MaxValue}'                                                      {.223f' 234f}'                                                      {.513f' .4212334f}                                                  }'                                     Enums = new Dictionary<DateTimeStyles' DateTimeKind>                                                 {                                                     {DateTimeStyles.AdjustToUniversal' DateTimeKind.Local}'                                                     {DateTimeStyles.AllowLeadingWhite' DateTimeKind.Unspecified}'                                                   }'                                     Longs = new Dictionary<long' long>                                                 {                                                     {long.MaxValue' long.MinValue}'                                                     {34234' 234324}'                                                     {45345345' 34534534565}                                                 }'                                     SBytes = new Dictionary<sbyte' sbyte>                                                  {                                                      {sbyte.MaxValue' sbyte.MaxValue}'                                                      {56' 13}                                                  }'                                     Shorts = new Dictionary<short' short>                                                  {                                                      {short.MinValue' short.MaxValue}'                                                      {5231' 6123}                                                  }'                                     Strings = new Dictionary<string' string>                                                   {                                                       {"Key1"' "Value1"}'                                                       {"Key2"' "Value2"}'                                                       {"Key3"' "Value3"}'                                                   }'                                     UInts = new Dictionary<uint' uint>                                                 {                                                     {uint.MinValue' 23}'                                                     {uint.MaxValue' 34324}                                                 }'                                     ULongs = new Dictionary<ulong' ulong>                                                  {                                                      {ulong.MinValue' ulong.MaxValue}'                                                      {34324234' 3243243245}                                                  }'                                     UShorts = new Dictionary<ushort' ushort>                                                   {                                                       {ushort.MinValue' ushort.MaxValue}'                                                       {42324' 32}                                                   }                                   };
Magic Number,NServiceBus.Serializers.XML.Test,DictionaryTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\DictionaryTests.cs,Should_deserialize_dictionaries,The following statement contains a magic number: var expected = new MessageWithDictionaries                                 {                                     Bools = new Dictionary<bool' bool>                                                 {                                                     {true' true}'                                                     {false' false}                                                 }'                                     Chars = new Dictionary<char' char>                                                 {                                                     //{char.MinValue' char.MaxValue}' // doesn't work because we use UTF8                                                     {'a'' 'b'}'                                                     {'c'' 'd'}'                                                     {'e'' 'f'}                                                 }'                                     Bytes = new Dictionary<byte' byte>                                                 {                                                     {byte.MinValue' byte.MaxValue}'                                                     {11' 1}'                                                     {1' 0}                                                 }'                                     Ints = new Dictionary<int' int>                                                {                                                    {int.MinValue' int.MaxValue}'                                                    {1' 2}'                                                    {3' 4}'                                                    {5' 6}                                                }'                                     Decimals = new Dictionary<decimal' decimal>                                                    {                                                        {decimal.MinValue' decimal.MaxValue}'                                                        {.2m' 4m}'                                                        {.5m' .4234m}                                                    }'                                     Doubles = new Dictionary<double' double>                                                   {                                                       {double.MinValue' double.MaxValue}'                                                       {.223d' 234d}'                                                       {.513d' .4212334d}                                                   }'                                     Floats = new Dictionary<float' float>                                                  {                                                      {float.MinValue' float.MaxValue}'                                                      {.223f' 234f}'                                                      {.513f' .4212334f}                                                  }'                                     Enums = new Dictionary<DateTimeStyles' DateTimeKind>                                                 {                                                     {DateTimeStyles.AdjustToUniversal' DateTimeKind.Local}'                                                     {DateTimeStyles.AllowLeadingWhite' DateTimeKind.Unspecified}'                                                   }'                                     Longs = new Dictionary<long' long>                                                 {                                                     {long.MaxValue' long.MinValue}'                                                     {34234' 234324}'                                                     {45345345' 34534534565}                                                 }'                                     SBytes = new Dictionary<sbyte' sbyte>                                                  {                                                      {sbyte.MaxValue' sbyte.MaxValue}'                                                      {56' 13}                                                  }'                                     Shorts = new Dictionary<short' short>                                                  {                                                      {short.MinValue' short.MaxValue}'                                                      {5231' 6123}                                                  }'                                     Strings = new Dictionary<string' string>                                                   {                                                       {"Key1"' "Value1"}'                                                       {"Key2"' "Value2"}'                                                       {"Key3"' "Value3"}'                                                   }'                                     UInts = new Dictionary<uint' uint>                                                 {                                                     {uint.MinValue' 23}'                                                     {uint.MaxValue' 34324}                                                 }'                                     ULongs = new Dictionary<ulong' ulong>                                                  {                                                      {ulong.MinValue' ulong.MaxValue}'                                                      {34324234' 3243243245}                                                  }'                                     UShorts = new Dictionary<ushort' ushort>                                                   {                                                       {ushort.MinValue' ushort.MaxValue}'                                                       {42324' 32}                                                   }                                   };
Magic Number,NServiceBus.Serializers.XML.Test,DictionaryTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\DictionaryTests.cs,Should_deserialize_dictionaries,The following statement contains a magic number: var expected = new MessageWithDictionaries                                 {                                     Bools = new Dictionary<bool' bool>                                                 {                                                     {true' true}'                                                     {false' false}                                                 }'                                     Chars = new Dictionary<char' char>                                                 {                                                     //{char.MinValue' char.MaxValue}' // doesn't work because we use UTF8                                                     {'a'' 'b'}'                                                     {'c'' 'd'}'                                                     {'e'' 'f'}                                                 }'                                     Bytes = new Dictionary<byte' byte>                                                 {                                                     {byte.MinValue' byte.MaxValue}'                                                     {11' 1}'                                                     {1' 0}                                                 }'                                     Ints = new Dictionary<int' int>                                                {                                                    {int.MinValue' int.MaxValue}'                                                    {1' 2}'                                                    {3' 4}'                                                    {5' 6}                                                }'                                     Decimals = new Dictionary<decimal' decimal>                                                    {                                                        {decimal.MinValue' decimal.MaxValue}'                                                        {.2m' 4m}'                                                        {.5m' .4234m}                                                    }'                                     Doubles = new Dictionary<double' double>                                                   {                                                       {double.MinValue' double.MaxValue}'                                                       {.223d' 234d}'                                                       {.513d' .4212334d}                                                   }'                                     Floats = new Dictionary<float' float>                                                  {                                                      {float.MinValue' float.MaxValue}'                                                      {.223f' 234f}'                                                      {.513f' .4212334f}                                                  }'                                     Enums = new Dictionary<DateTimeStyles' DateTimeKind>                                                 {                                                     {DateTimeStyles.AdjustToUniversal' DateTimeKind.Local}'                                                     {DateTimeStyles.AllowLeadingWhite' DateTimeKind.Unspecified}'                                                   }'                                     Longs = new Dictionary<long' long>                                                 {                                                     {long.MaxValue' long.MinValue}'                                                     {34234' 234324}'                                                     {45345345' 34534534565}                                                 }'                                     SBytes = new Dictionary<sbyte' sbyte>                                                  {                                                      {sbyte.MaxValue' sbyte.MaxValue}'                                                      {56' 13}                                                  }'                                     Shorts = new Dictionary<short' short>                                                  {                                                      {short.MinValue' short.MaxValue}'                                                      {5231' 6123}                                                  }'                                     Strings = new Dictionary<string' string>                                                   {                                                       {"Key1"' "Value1"}'                                                       {"Key2"' "Value2"}'                                                       {"Key3"' "Value3"}'                                                   }'                                     UInts = new Dictionary<uint' uint>                                                 {                                                     {uint.MinValue' 23}'                                                     {uint.MaxValue' 34324}                                                 }'                                     ULongs = new Dictionary<ulong' ulong>                                                  {                                                      {ulong.MinValue' ulong.MaxValue}'                                                      {34324234' 3243243245}                                                  }'                                     UShorts = new Dictionary<ushort' ushort>                                                   {                                                       {ushort.MinValue' ushort.MaxValue}'                                                       {42324' 32}                                                   }                                   };
Magic Number,NServiceBus.Serializers.XML.Test,DictionaryTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\DictionaryTests.cs,Should_deserialize_dictionaries,The following statement contains a magic number: var expected = new MessageWithDictionaries                                 {                                     Bools = new Dictionary<bool' bool>                                                 {                                                     {true' true}'                                                     {false' false}                                                 }'                                     Chars = new Dictionary<char' char>                                                 {                                                     //{char.MinValue' char.MaxValue}' // doesn't work because we use UTF8                                                     {'a'' 'b'}'                                                     {'c'' 'd'}'                                                     {'e'' 'f'}                                                 }'                                     Bytes = new Dictionary<byte' byte>                                                 {                                                     {byte.MinValue' byte.MaxValue}'                                                     {11' 1}'                                                     {1' 0}                                                 }'                                     Ints = new Dictionary<int' int>                                                {                                                    {int.MinValue' int.MaxValue}'                                                    {1' 2}'                                                    {3' 4}'                                                    {5' 6}                                                }'                                     Decimals = new Dictionary<decimal' decimal>                                                    {                                                        {decimal.MinValue' decimal.MaxValue}'                                                        {.2m' 4m}'                                                        {.5m' .4234m}                                                    }'                                     Doubles = new Dictionary<double' double>                                                   {                                                       {double.MinValue' double.MaxValue}'                                                       {.223d' 234d}'                                                       {.513d' .4212334d}                                                   }'                                     Floats = new Dictionary<float' float>                                                  {                                                      {float.MinValue' float.MaxValue}'                                                      {.223f' 234f}'                                                      {.513f' .4212334f}                                                  }'                                     Enums = new Dictionary<DateTimeStyles' DateTimeKind>                                                 {                                                     {DateTimeStyles.AdjustToUniversal' DateTimeKind.Local}'                                                     {DateTimeStyles.AllowLeadingWhite' DateTimeKind.Unspecified}'                                                   }'                                     Longs = new Dictionary<long' long>                                                 {                                                     {long.MaxValue' long.MinValue}'                                                     {34234' 234324}'                                                     {45345345' 34534534565}                                                 }'                                     SBytes = new Dictionary<sbyte' sbyte>                                                  {                                                      {sbyte.MaxValue' sbyte.MaxValue}'                                                      {56' 13}                                                  }'                                     Shorts = new Dictionary<short' short>                                                  {                                                      {short.MinValue' short.MaxValue}'                                                      {5231' 6123}                                                  }'                                     Strings = new Dictionary<string' string>                                                   {                                                       {"Key1"' "Value1"}'                                                       {"Key2"' "Value2"}'                                                       {"Key3"' "Value3"}'                                                   }'                                     UInts = new Dictionary<uint' uint>                                                 {                                                     {uint.MinValue' 23}'                                                     {uint.MaxValue' 34324}                                                 }'                                     ULongs = new Dictionary<ulong' ulong>                                                  {                                                      {ulong.MinValue' ulong.MaxValue}'                                                      {34324234' 3243243245}                                                  }'                                     UShorts = new Dictionary<ushort' ushort>                                                   {                                                       {ushort.MinValue' ushort.MaxValue}'                                                       {42324' 32}                                                   }                                   };
Magic Number,NServiceBus.Serializers.XML.Test,DictionaryTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\DictionaryTests.cs,Should_deserialize_dictionaries,The following statement contains a magic number: var expected = new MessageWithDictionaries                                 {                                     Bools = new Dictionary<bool' bool>                                                 {                                                     {true' true}'                                                     {false' false}                                                 }'                                     Chars = new Dictionary<char' char>                                                 {                                                     //{char.MinValue' char.MaxValue}' // doesn't work because we use UTF8                                                     {'a'' 'b'}'                                                     {'c'' 'd'}'                                                     {'e'' 'f'}                                                 }'                                     Bytes = new Dictionary<byte' byte>                                                 {                                                     {byte.MinValue' byte.MaxValue}'                                                     {11' 1}'                                                     {1' 0}                                                 }'                                     Ints = new Dictionary<int' int>                                                {                                                    {int.MinValue' int.MaxValue}'                                                    {1' 2}'                                                    {3' 4}'                                                    {5' 6}                                                }'                                     Decimals = new Dictionary<decimal' decimal>                                                    {                                                        {decimal.MinValue' decimal.MaxValue}'                                                        {.2m' 4m}'                                                        {.5m' .4234m}                                                    }'                                     Doubles = new Dictionary<double' double>                                                   {                                                       {double.MinValue' double.MaxValue}'                                                       {.223d' 234d}'                                                       {.513d' .4212334d}                                                   }'                                     Floats = new Dictionary<float' float>                                                  {                                                      {float.MinValue' float.MaxValue}'                                                      {.223f' 234f}'                                                      {.513f' .4212334f}                                                  }'                                     Enums = new Dictionary<DateTimeStyles' DateTimeKind>                                                 {                                                     {DateTimeStyles.AdjustToUniversal' DateTimeKind.Local}'                                                     {DateTimeStyles.AllowLeadingWhite' DateTimeKind.Unspecified}'                                                   }'                                     Longs = new Dictionary<long' long>                                                 {                                                     {long.MaxValue' long.MinValue}'                                                     {34234' 234324}'                                                     {45345345' 34534534565}                                                 }'                                     SBytes = new Dictionary<sbyte' sbyte>                                                  {                                                      {sbyte.MaxValue' sbyte.MaxValue}'                                                      {56' 13}                                                  }'                                     Shorts = new Dictionary<short' short>                                                  {                                                      {short.MinValue' short.MaxValue}'                                                      {5231' 6123}                                                  }'                                     Strings = new Dictionary<string' string>                                                   {                                                       {"Key1"' "Value1"}'                                                       {"Key2"' "Value2"}'                                                       {"Key3"' "Value3"}'                                                   }'                                     UInts = new Dictionary<uint' uint>                                                 {                                                     {uint.MinValue' 23}'                                                     {uint.MaxValue' 34324}                                                 }'                                     ULongs = new Dictionary<ulong' ulong>                                                  {                                                      {ulong.MinValue' ulong.MaxValue}'                                                      {34324234' 3243243245}                                                  }'                                     UShorts = new Dictionary<ushort' ushort>                                                   {                                                       {ushort.MinValue' ushort.MaxValue}'                                                       {42324' 32}                                                   }                                   };
Magic Number,NServiceBus.Serializers.XML.Test,DictionaryTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\DictionaryTests.cs,Should_deserialize_dictionaries,The following statement contains a magic number: var expected = new MessageWithDictionaries                                 {                                     Bools = new Dictionary<bool' bool>                                                 {                                                     {true' true}'                                                     {false' false}                                                 }'                                     Chars = new Dictionary<char' char>                                                 {                                                     //{char.MinValue' char.MaxValue}' // doesn't work because we use UTF8                                                     {'a'' 'b'}'                                                     {'c'' 'd'}'                                                     {'e'' 'f'}                                                 }'                                     Bytes = new Dictionary<byte' byte>                                                 {                                                     {byte.MinValue' byte.MaxValue}'                                                     {11' 1}'                                                     {1' 0}                                                 }'                                     Ints = new Dictionary<int' int>                                                {                                                    {int.MinValue' int.MaxValue}'                                                    {1' 2}'                                                    {3' 4}'                                                    {5' 6}                                                }'                                     Decimals = new Dictionary<decimal' decimal>                                                    {                                                        {decimal.MinValue' decimal.MaxValue}'                                                        {.2m' 4m}'                                                        {.5m' .4234m}                                                    }'                                     Doubles = new Dictionary<double' double>                                                   {                                                       {double.MinValue' double.MaxValue}'                                                       {.223d' 234d}'                                                       {.513d' .4212334d}                                                   }'                                     Floats = new Dictionary<float' float>                                                  {                                                      {float.MinValue' float.MaxValue}'                                                      {.223f' 234f}'                                                      {.513f' .4212334f}                                                  }'                                     Enums = new Dictionary<DateTimeStyles' DateTimeKind>                                                 {                                                     {DateTimeStyles.AdjustToUniversal' DateTimeKind.Local}'                                                     {DateTimeStyles.AllowLeadingWhite' DateTimeKind.Unspecified}'                                                   }'                                     Longs = new Dictionary<long' long>                                                 {                                                     {long.MaxValue' long.MinValue}'                                                     {34234' 234324}'                                                     {45345345' 34534534565}                                                 }'                                     SBytes = new Dictionary<sbyte' sbyte>                                                  {                                                      {sbyte.MaxValue' sbyte.MaxValue}'                                                      {56' 13}                                                  }'                                     Shorts = new Dictionary<short' short>                                                  {                                                      {short.MinValue' short.MaxValue}'                                                      {5231' 6123}                                                  }'                                     Strings = new Dictionary<string' string>                                                   {                                                       {"Key1"' "Value1"}'                                                       {"Key2"' "Value2"}'                                                       {"Key3"' "Value3"}'                                                   }'                                     UInts = new Dictionary<uint' uint>                                                 {                                                     {uint.MinValue' 23}'                                                     {uint.MaxValue' 34324}                                                 }'                                     ULongs = new Dictionary<ulong' ulong>                                                  {                                                      {ulong.MinValue' ulong.MaxValue}'                                                      {34324234' 3243243245}                                                  }'                                     UShorts = new Dictionary<ushort' ushort>                                                   {                                                       {ushort.MinValue' ushort.MaxValue}'                                                       {42324' 32}                                                   }                                   };
Magic Number,NServiceBus.Serializers.XML.Test,DictionaryTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\DictionaryTests.cs,Should_deserialize_dictionaries,The following statement contains a magic number: var expected = new MessageWithDictionaries                                 {                                     Bools = new Dictionary<bool' bool>                                                 {                                                     {true' true}'                                                     {false' false}                                                 }'                                     Chars = new Dictionary<char' char>                                                 {                                                     //{char.MinValue' char.MaxValue}' // doesn't work because we use UTF8                                                     {'a'' 'b'}'                                                     {'c'' 'd'}'                                                     {'e'' 'f'}                                                 }'                                     Bytes = new Dictionary<byte' byte>                                                 {                                                     {byte.MinValue' byte.MaxValue}'                                                     {11' 1}'                                                     {1' 0}                                                 }'                                     Ints = new Dictionary<int' int>                                                {                                                    {int.MinValue' int.MaxValue}'                                                    {1' 2}'                                                    {3' 4}'                                                    {5' 6}                                                }'                                     Decimals = new Dictionary<decimal' decimal>                                                    {                                                        {decimal.MinValue' decimal.MaxValue}'                                                        {.2m' 4m}'                                                        {.5m' .4234m}                                                    }'                                     Doubles = new Dictionary<double' double>                                                   {                                                       {double.MinValue' double.MaxValue}'                                                       {.223d' 234d}'                                                       {.513d' .4212334d}                                                   }'                                     Floats = new Dictionary<float' float>                                                  {                                                      {float.MinValue' float.MaxValue}'                                                      {.223f' 234f}'                                                      {.513f' .4212334f}                                                  }'                                     Enums = new Dictionary<DateTimeStyles' DateTimeKind>                                                 {                                                     {DateTimeStyles.AdjustToUniversal' DateTimeKind.Local}'                                                     {DateTimeStyles.AllowLeadingWhite' DateTimeKind.Unspecified}'                                                   }'                                     Longs = new Dictionary<long' long>                                                 {                                                     {long.MaxValue' long.MinValue}'                                                     {34234' 234324}'                                                     {45345345' 34534534565}                                                 }'                                     SBytes = new Dictionary<sbyte' sbyte>                                                  {                                                      {sbyte.MaxValue' sbyte.MaxValue}'                                                      {56' 13}                                                  }'                                     Shorts = new Dictionary<short' short>                                                  {                                                      {short.MinValue' short.MaxValue}'                                                      {5231' 6123}                                                  }'                                     Strings = new Dictionary<string' string>                                                   {                                                       {"Key1"' "Value1"}'                                                       {"Key2"' "Value2"}'                                                       {"Key3"' "Value3"}'                                                   }'                                     UInts = new Dictionary<uint' uint>                                                 {                                                     {uint.MinValue' 23}'                                                     {uint.MaxValue' 34324}                                                 }'                                     ULongs = new Dictionary<ulong' ulong>                                                  {                                                      {ulong.MinValue' ulong.MaxValue}'                                                      {34324234' 3243243245}                                                  }'                                     UShorts = new Dictionary<ushort' ushort>                                                   {                                                       {ushort.MinValue' ushort.MaxValue}'                                                       {42324' 32}                                                   }                                   };
Magic Number,NServiceBus.Serializers.XML.Test,DictionaryTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\DictionaryTests.cs,Should_deserialize_dictionaries,The following statement contains a magic number: var expected = new MessageWithDictionaries                                 {                                     Bools = new Dictionary<bool' bool>                                                 {                                                     {true' true}'                                                     {false' false}                                                 }'                                     Chars = new Dictionary<char' char>                                                 {                                                     //{char.MinValue' char.MaxValue}' // doesn't work because we use UTF8                                                     {'a'' 'b'}'                                                     {'c'' 'd'}'                                                     {'e'' 'f'}                                                 }'                                     Bytes = new Dictionary<byte' byte>                                                 {                                                     {byte.MinValue' byte.MaxValue}'                                                     {11' 1}'                                                     {1' 0}                                                 }'                                     Ints = new Dictionary<int' int>                                                {                                                    {int.MinValue' int.MaxValue}'                                                    {1' 2}'                                                    {3' 4}'                                                    {5' 6}                                                }'                                     Decimals = new Dictionary<decimal' decimal>                                                    {                                                        {decimal.MinValue' decimal.MaxValue}'                                                        {.2m' 4m}'                                                        {.5m' .4234m}                                                    }'                                     Doubles = new Dictionary<double' double>                                                   {                                                       {double.MinValue' double.MaxValue}'                                                       {.223d' 234d}'                                                       {.513d' .4212334d}                                                   }'                                     Floats = new Dictionary<float' float>                                                  {                                                      {float.MinValue' float.MaxValue}'                                                      {.223f' 234f}'                                                      {.513f' .4212334f}                                                  }'                                     Enums = new Dictionary<DateTimeStyles' DateTimeKind>                                                 {                                                     {DateTimeStyles.AdjustToUniversal' DateTimeKind.Local}'                                                     {DateTimeStyles.AllowLeadingWhite' DateTimeKind.Unspecified}'                                                   }'                                     Longs = new Dictionary<long' long>                                                 {                                                     {long.MaxValue' long.MinValue}'                                                     {34234' 234324}'                                                     {45345345' 34534534565}                                                 }'                                     SBytes = new Dictionary<sbyte' sbyte>                                                  {                                                      {sbyte.MaxValue' sbyte.MaxValue}'                                                      {56' 13}                                                  }'                                     Shorts = new Dictionary<short' short>                                                  {                                                      {short.MinValue' short.MaxValue}'                                                      {5231' 6123}                                                  }'                                     Strings = new Dictionary<string' string>                                                   {                                                       {"Key1"' "Value1"}'                                                       {"Key2"' "Value2"}'                                                       {"Key3"' "Value3"}'                                                   }'                                     UInts = new Dictionary<uint' uint>                                                 {                                                     {uint.MinValue' 23}'                                                     {uint.MaxValue' 34324}                                                 }'                                     ULongs = new Dictionary<ulong' ulong>                                                  {                                                      {ulong.MinValue' ulong.MaxValue}'                                                      {34324234' 3243243245}                                                  }'                                     UShorts = new Dictionary<ushort' ushort>                                                   {                                                       {ushort.MinValue' ushort.MaxValue}'                                                       {42324' 32}                                                   }                                   };
Magic Number,NServiceBus.Serializers.XML.Test,DictionaryTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\DictionaryTests.cs,Should_deserialize_dictionaries,The following statement contains a magic number: var expected = new MessageWithDictionaries                                 {                                     Bools = new Dictionary<bool' bool>                                                 {                                                     {true' true}'                                                     {false' false}                                                 }'                                     Chars = new Dictionary<char' char>                                                 {                                                     //{char.MinValue' char.MaxValue}' // doesn't work because we use UTF8                                                     {'a'' 'b'}'                                                     {'c'' 'd'}'                                                     {'e'' 'f'}                                                 }'                                     Bytes = new Dictionary<byte' byte>                                                 {                                                     {byte.MinValue' byte.MaxValue}'                                                     {11' 1}'                                                     {1' 0}                                                 }'                                     Ints = new Dictionary<int' int>                                                {                                                    {int.MinValue' int.MaxValue}'                                                    {1' 2}'                                                    {3' 4}'                                                    {5' 6}                                                }'                                     Decimals = new Dictionary<decimal' decimal>                                                    {                                                        {decimal.MinValue' decimal.MaxValue}'                                                        {.2m' 4m}'                                                        {.5m' .4234m}                                                    }'                                     Doubles = new Dictionary<double' double>                                                   {                                                       {double.MinValue' double.MaxValue}'                                                       {.223d' 234d}'                                                       {.513d' .4212334d}                                                   }'                                     Floats = new Dictionary<float' float>                                                  {                                                      {float.MinValue' float.MaxValue}'                                                      {.223f' 234f}'                                                      {.513f' .4212334f}                                                  }'                                     Enums = new Dictionary<DateTimeStyles' DateTimeKind>                                                 {                                                     {DateTimeStyles.AdjustToUniversal' DateTimeKind.Local}'                                                     {DateTimeStyles.AllowLeadingWhite' DateTimeKind.Unspecified}'                                                   }'                                     Longs = new Dictionary<long' long>                                                 {                                                     {long.MaxValue' long.MinValue}'                                                     {34234' 234324}'                                                     {45345345' 34534534565}                                                 }'                                     SBytes = new Dictionary<sbyte' sbyte>                                                  {                                                      {sbyte.MaxValue' sbyte.MaxValue}'                                                      {56' 13}                                                  }'                                     Shorts = new Dictionary<short' short>                                                  {                                                      {short.MinValue' short.MaxValue}'                                                      {5231' 6123}                                                  }'                                     Strings = new Dictionary<string' string>                                                   {                                                       {"Key1"' "Value1"}'                                                       {"Key2"' "Value2"}'                                                       {"Key3"' "Value3"}'                                                   }'                                     UInts = new Dictionary<uint' uint>                                                 {                                                     {uint.MinValue' 23}'                                                     {uint.MaxValue' 34324}                                                 }'                                     ULongs = new Dictionary<ulong' ulong>                                                  {                                                      {ulong.MinValue' ulong.MaxValue}'                                                      {34324234' 3243243245}                                                  }'                                     UShorts = new Dictionary<ushort' ushort>                                                   {                                                       {ushort.MinValue' ushort.MaxValue}'                                                       {42324' 32}                                                   }                                   };
Magic Number,NServiceBus.Serializers.XML.Test,DictionaryTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\DictionaryTests.cs,Should_deserialize_dictionaries,The following statement contains a magic number: var expected = new MessageWithDictionaries                                 {                                     Bools = new Dictionary<bool' bool>                                                 {                                                     {true' true}'                                                     {false' false}                                                 }'                                     Chars = new Dictionary<char' char>                                                 {                                                     //{char.MinValue' char.MaxValue}' // doesn't work because we use UTF8                                                     {'a'' 'b'}'                                                     {'c'' 'd'}'                                                     {'e'' 'f'}                                                 }'                                     Bytes = new Dictionary<byte' byte>                                                 {                                                     {byte.MinValue' byte.MaxValue}'                                                     {11' 1}'                                                     {1' 0}                                                 }'                                     Ints = new Dictionary<int' int>                                                {                                                    {int.MinValue' int.MaxValue}'                                                    {1' 2}'                                                    {3' 4}'                                                    {5' 6}                                                }'                                     Decimals = new Dictionary<decimal' decimal>                                                    {                                                        {decimal.MinValue' decimal.MaxValue}'                                                        {.2m' 4m}'                                                        {.5m' .4234m}                                                    }'                                     Doubles = new Dictionary<double' double>                                                   {                                                       {double.MinValue' double.MaxValue}'                                                       {.223d' 234d}'                                                       {.513d' .4212334d}                                                   }'                                     Floats = new Dictionary<float' float>                                                  {                                                      {float.MinValue' float.MaxValue}'                                                      {.223f' 234f}'                                                      {.513f' .4212334f}                                                  }'                                     Enums = new Dictionary<DateTimeStyles' DateTimeKind>                                                 {                                                     {DateTimeStyles.AdjustToUniversal' DateTimeKind.Local}'                                                     {DateTimeStyles.AllowLeadingWhite' DateTimeKind.Unspecified}'                                                   }'                                     Longs = new Dictionary<long' long>                                                 {                                                     {long.MaxValue' long.MinValue}'                                                     {34234' 234324}'                                                     {45345345' 34534534565}                                                 }'                                     SBytes = new Dictionary<sbyte' sbyte>                                                  {                                                      {sbyte.MaxValue' sbyte.MaxValue}'                                                      {56' 13}                                                  }'                                     Shorts = new Dictionary<short' short>                                                  {                                                      {short.MinValue' short.MaxValue}'                                                      {5231' 6123}                                                  }'                                     Strings = new Dictionary<string' string>                                                   {                                                       {"Key1"' "Value1"}'                                                       {"Key2"' "Value2"}'                                                       {"Key3"' "Value3"}'                                                   }'                                     UInts = new Dictionary<uint' uint>                                                 {                                                     {uint.MinValue' 23}'                                                     {uint.MaxValue' 34324}                                                 }'                                     ULongs = new Dictionary<ulong' ulong>                                                  {                                                      {ulong.MinValue' ulong.MaxValue}'                                                      {34324234' 3243243245}                                                  }'                                     UShorts = new Dictionary<ushort' ushort>                                                   {                                                       {ushort.MinValue' ushort.MaxValue}'                                                       {42324' 32}                                                   }                                   };
Magic Number,NServiceBus.Serializers.XML.Test,DictionaryTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\DictionaryTests.cs,Should_deserialize_dictionaries,The following statement contains a magic number: var expected = new MessageWithDictionaries                                 {                                     Bools = new Dictionary<bool' bool>                                                 {                                                     {true' true}'                                                     {false' false}                                                 }'                                     Chars = new Dictionary<char' char>                                                 {                                                     //{char.MinValue' char.MaxValue}' // doesn't work because we use UTF8                                                     {'a'' 'b'}'                                                     {'c'' 'd'}'                                                     {'e'' 'f'}                                                 }'                                     Bytes = new Dictionary<byte' byte>                                                 {                                                     {byte.MinValue' byte.MaxValue}'                                                     {11' 1}'                                                     {1' 0}                                                 }'                                     Ints = new Dictionary<int' int>                                                {                                                    {int.MinValue' int.MaxValue}'                                                    {1' 2}'                                                    {3' 4}'                                                    {5' 6}                                                }'                                     Decimals = new Dictionary<decimal' decimal>                                                    {                                                        {decimal.MinValue' decimal.MaxValue}'                                                        {.2m' 4m}'                                                        {.5m' .4234m}                                                    }'                                     Doubles = new Dictionary<double' double>                                                   {                                                       {double.MinValue' double.MaxValue}'                                                       {.223d' 234d}'                                                       {.513d' .4212334d}                                                   }'                                     Floats = new Dictionary<float' float>                                                  {                                                      {float.MinValue' float.MaxValue}'                                                      {.223f' 234f}'                                                      {.513f' .4212334f}                                                  }'                                     Enums = new Dictionary<DateTimeStyles' DateTimeKind>                                                 {                                                     {DateTimeStyles.AdjustToUniversal' DateTimeKind.Local}'                                                     {DateTimeStyles.AllowLeadingWhite' DateTimeKind.Unspecified}'                                                   }'                                     Longs = new Dictionary<long' long>                                                 {                                                     {long.MaxValue' long.MinValue}'                                                     {34234' 234324}'                                                     {45345345' 34534534565}                                                 }'                                     SBytes = new Dictionary<sbyte' sbyte>                                                  {                                                      {sbyte.MaxValue' sbyte.MaxValue}'                                                      {56' 13}                                                  }'                                     Shorts = new Dictionary<short' short>                                                  {                                                      {short.MinValue' short.MaxValue}'                                                      {5231' 6123}                                                  }'                                     Strings = new Dictionary<string' string>                                                   {                                                       {"Key1"' "Value1"}'                                                       {"Key2"' "Value2"}'                                                       {"Key3"' "Value3"}'                                                   }'                                     UInts = new Dictionary<uint' uint>                                                 {                                                     {uint.MinValue' 23}'                                                     {uint.MaxValue' 34324}                                                 }'                                     ULongs = new Dictionary<ulong' ulong>                                                  {                                                      {ulong.MinValue' ulong.MaxValue}'                                                      {34324234' 3243243245}                                                  }'                                     UShorts = new Dictionary<ushort' ushort>                                                   {                                                       {ushort.MinValue' ushort.MaxValue}'                                                       {42324' 32}                                                   }                                   };
Magic Number,NServiceBus.Serializers.XML.Test,DictionaryTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\DictionaryTests.cs,Should_deserialize_dictionaries,The following statement contains a magic number: var expected = new MessageWithDictionaries                                 {                                     Bools = new Dictionary<bool' bool>                                                 {                                                     {true' true}'                                                     {false' false}                                                 }'                                     Chars = new Dictionary<char' char>                                                 {                                                     //{char.MinValue' char.MaxValue}' // doesn't work because we use UTF8                                                     {'a'' 'b'}'                                                     {'c'' 'd'}'                                                     {'e'' 'f'}                                                 }'                                     Bytes = new Dictionary<byte' byte>                                                 {                                                     {byte.MinValue' byte.MaxValue}'                                                     {11' 1}'                                                     {1' 0}                                                 }'                                     Ints = new Dictionary<int' int>                                                {                                                    {int.MinValue' int.MaxValue}'                                                    {1' 2}'                                                    {3' 4}'                                                    {5' 6}                                                }'                                     Decimals = new Dictionary<decimal' decimal>                                                    {                                                        {decimal.MinValue' decimal.MaxValue}'                                                        {.2m' 4m}'                                                        {.5m' .4234m}                                                    }'                                     Doubles = new Dictionary<double' double>                                                   {                                                       {double.MinValue' double.MaxValue}'                                                       {.223d' 234d}'                                                       {.513d' .4212334d}                                                   }'                                     Floats = new Dictionary<float' float>                                                  {                                                      {float.MinValue' float.MaxValue}'                                                      {.223f' 234f}'                                                      {.513f' .4212334f}                                                  }'                                     Enums = new Dictionary<DateTimeStyles' DateTimeKind>                                                 {                                                     {DateTimeStyles.AdjustToUniversal' DateTimeKind.Local}'                                                     {DateTimeStyles.AllowLeadingWhite' DateTimeKind.Unspecified}'                                                   }'                                     Longs = new Dictionary<long' long>                                                 {                                                     {long.MaxValue' long.MinValue}'                                                     {34234' 234324}'                                                     {45345345' 34534534565}                                                 }'                                     SBytes = new Dictionary<sbyte' sbyte>                                                  {                                                      {sbyte.MaxValue' sbyte.MaxValue}'                                                      {56' 13}                                                  }'                                     Shorts = new Dictionary<short' short>                                                  {                                                      {short.MinValue' short.MaxValue}'                                                      {5231' 6123}                                                  }'                                     Strings = new Dictionary<string' string>                                                   {                                                       {"Key1"' "Value1"}'                                                       {"Key2"' "Value2"}'                                                       {"Key3"' "Value3"}'                                                   }'                                     UInts = new Dictionary<uint' uint>                                                 {                                                     {uint.MinValue' 23}'                                                     {uint.MaxValue' 34324}                                                 }'                                     ULongs = new Dictionary<ulong' ulong>                                                  {                                                      {ulong.MinValue' ulong.MaxValue}'                                                      {34324234' 3243243245}                                                  }'                                     UShorts = new Dictionary<ushort' ushort>                                                   {                                                       {ushort.MinValue' ushort.MaxValue}'                                                       {42324' 32}                                                   }                                   };
Magic Number,NServiceBus.Serializers.XML.Test,DictionaryTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\DictionaryTests.cs,Should_deserialize_dictionaries,The following statement contains a magic number: var expected = new MessageWithDictionaries                                 {                                     Bools = new Dictionary<bool' bool>                                                 {                                                     {true' true}'                                                     {false' false}                                                 }'                                     Chars = new Dictionary<char' char>                                                 {                                                     //{char.MinValue' char.MaxValue}' // doesn't work because we use UTF8                                                     {'a'' 'b'}'                                                     {'c'' 'd'}'                                                     {'e'' 'f'}                                                 }'                                     Bytes = new Dictionary<byte' byte>                                                 {                                                     {byte.MinValue' byte.MaxValue}'                                                     {11' 1}'                                                     {1' 0}                                                 }'                                     Ints = new Dictionary<int' int>                                                {                                                    {int.MinValue' int.MaxValue}'                                                    {1' 2}'                                                    {3' 4}'                                                    {5' 6}                                                }'                                     Decimals = new Dictionary<decimal' decimal>                                                    {                                                        {decimal.MinValue' decimal.MaxValue}'                                                        {.2m' 4m}'                                                        {.5m' .4234m}                                                    }'                                     Doubles = new Dictionary<double' double>                                                   {                                                       {double.MinValue' double.MaxValue}'                                                       {.223d' 234d}'                                                       {.513d' .4212334d}                                                   }'                                     Floats = new Dictionary<float' float>                                                  {                                                      {float.MinValue' float.MaxValue}'                                                      {.223f' 234f}'                                                      {.513f' .4212334f}                                                  }'                                     Enums = new Dictionary<DateTimeStyles' DateTimeKind>                                                 {                                                     {DateTimeStyles.AdjustToUniversal' DateTimeKind.Local}'                                                     {DateTimeStyles.AllowLeadingWhite' DateTimeKind.Unspecified}'                                                   }'                                     Longs = new Dictionary<long' long>                                                 {                                                     {long.MaxValue' long.MinValue}'                                                     {34234' 234324}'                                                     {45345345' 34534534565}                                                 }'                                     SBytes = new Dictionary<sbyte' sbyte>                                                  {                                                      {sbyte.MaxValue' sbyte.MaxValue}'                                                      {56' 13}                                                  }'                                     Shorts = new Dictionary<short' short>                                                  {                                                      {short.MinValue' short.MaxValue}'                                                      {5231' 6123}                                                  }'                                     Strings = new Dictionary<string' string>                                                   {                                                       {"Key1"' "Value1"}'                                                       {"Key2"' "Value2"}'                                                       {"Key3"' "Value3"}'                                                   }'                                     UInts = new Dictionary<uint' uint>                                                 {                                                     {uint.MinValue' 23}'                                                     {uint.MaxValue' 34324}                                                 }'                                     ULongs = new Dictionary<ulong' ulong>                                                  {                                                      {ulong.MinValue' ulong.MaxValue}'                                                      {34324234' 3243243245}                                                  }'                                     UShorts = new Dictionary<ushort' ushort>                                                   {                                                       {ushort.MinValue' ushort.MaxValue}'                                                       {42324' 32}                                                   }                                   };
Magic Number,NServiceBus.Serializers.XML.Test,DictionaryTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\DictionaryTests.cs,Should_deserialize_dictionaries,The following statement contains a magic number: var expected = new MessageWithDictionaries                                 {                                     Bools = new Dictionary<bool' bool>                                                 {                                                     {true' true}'                                                     {false' false}                                                 }'                                     Chars = new Dictionary<char' char>                                                 {                                                     //{char.MinValue' char.MaxValue}' // doesn't work because we use UTF8                                                     {'a'' 'b'}'                                                     {'c'' 'd'}'                                                     {'e'' 'f'}                                                 }'                                     Bytes = new Dictionary<byte' byte>                                                 {                                                     {byte.MinValue' byte.MaxValue}'                                                     {11' 1}'                                                     {1' 0}                                                 }'                                     Ints = new Dictionary<int' int>                                                {                                                    {int.MinValue' int.MaxValue}'                                                    {1' 2}'                                                    {3' 4}'                                                    {5' 6}                                                }'                                     Decimals = new Dictionary<decimal' decimal>                                                    {                                                        {decimal.MinValue' decimal.MaxValue}'                                                        {.2m' 4m}'                                                        {.5m' .4234m}                                                    }'                                     Doubles = new Dictionary<double' double>                                                   {                                                       {double.MinValue' double.MaxValue}'                                                       {.223d' 234d}'                                                       {.513d' .4212334d}                                                   }'                                     Floats = new Dictionary<float' float>                                                  {                                                      {float.MinValue' float.MaxValue}'                                                      {.223f' 234f}'                                                      {.513f' .4212334f}                                                  }'                                     Enums = new Dictionary<DateTimeStyles' DateTimeKind>                                                 {                                                     {DateTimeStyles.AdjustToUniversal' DateTimeKind.Local}'                                                     {DateTimeStyles.AllowLeadingWhite' DateTimeKind.Unspecified}'                                                   }'                                     Longs = new Dictionary<long' long>                                                 {                                                     {long.MaxValue' long.MinValue}'                                                     {34234' 234324}'                                                     {45345345' 34534534565}                                                 }'                                     SBytes = new Dictionary<sbyte' sbyte>                                                  {                                                      {sbyte.MaxValue' sbyte.MaxValue}'                                                      {56' 13}                                                  }'                                     Shorts = new Dictionary<short' short>                                                  {                                                      {short.MinValue' short.MaxValue}'                                                      {5231' 6123}                                                  }'                                     Strings = new Dictionary<string' string>                                                   {                                                       {"Key1"' "Value1"}'                                                       {"Key2"' "Value2"}'                                                       {"Key3"' "Value3"}'                                                   }'                                     UInts = new Dictionary<uint' uint>                                                 {                                                     {uint.MinValue' 23}'                                                     {uint.MaxValue' 34324}                                                 }'                                     ULongs = new Dictionary<ulong' ulong>                                                  {                                                      {ulong.MinValue' ulong.MaxValue}'                                                      {34324234' 3243243245}                                                  }'                                     UShorts = new Dictionary<ushort' ushort>                                                   {                                                       {ushort.MinValue' ushort.MaxValue}'                                                       {42324' 32}                                                   }                                   };
Magic Number,NServiceBus.Serializers.XML.Test,DictionaryTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\DictionaryTests.cs,Should_deserialize_dictionaries,The following statement contains a magic number: var expected = new MessageWithDictionaries                                 {                                     Bools = new Dictionary<bool' bool>                                                 {                                                     {true' true}'                                                     {false' false}                                                 }'                                     Chars = new Dictionary<char' char>                                                 {                                                     //{char.MinValue' char.MaxValue}' // doesn't work because we use UTF8                                                     {'a'' 'b'}'                                                     {'c'' 'd'}'                                                     {'e'' 'f'}                                                 }'                                     Bytes = new Dictionary<byte' byte>                                                 {                                                     {byte.MinValue' byte.MaxValue}'                                                     {11' 1}'                                                     {1' 0}                                                 }'                                     Ints = new Dictionary<int' int>                                                {                                                    {int.MinValue' int.MaxValue}'                                                    {1' 2}'                                                    {3' 4}'                                                    {5' 6}                                                }'                                     Decimals = new Dictionary<decimal' decimal>                                                    {                                                        {decimal.MinValue' decimal.MaxValue}'                                                        {.2m' 4m}'                                                        {.5m' .4234m}                                                    }'                                     Doubles = new Dictionary<double' double>                                                   {                                                       {double.MinValue' double.MaxValue}'                                                       {.223d' 234d}'                                                       {.513d' .4212334d}                                                   }'                                     Floats = new Dictionary<float' float>                                                  {                                                      {float.MinValue' float.MaxValue}'                                                      {.223f' 234f}'                                                      {.513f' .4212334f}                                                  }'                                     Enums = new Dictionary<DateTimeStyles' DateTimeKind>                                                 {                                                     {DateTimeStyles.AdjustToUniversal' DateTimeKind.Local}'                                                     {DateTimeStyles.AllowLeadingWhite' DateTimeKind.Unspecified}'                                                   }'                                     Longs = new Dictionary<long' long>                                                 {                                                     {long.MaxValue' long.MinValue}'                                                     {34234' 234324}'                                                     {45345345' 34534534565}                                                 }'                                     SBytes = new Dictionary<sbyte' sbyte>                                                  {                                                      {sbyte.MaxValue' sbyte.MaxValue}'                                                      {56' 13}                                                  }'                                     Shorts = new Dictionary<short' short>                                                  {                                                      {short.MinValue' short.MaxValue}'                                                      {5231' 6123}                                                  }'                                     Strings = new Dictionary<string' string>                                                   {                                                       {"Key1"' "Value1"}'                                                       {"Key2"' "Value2"}'                                                       {"Key3"' "Value3"}'                                                   }'                                     UInts = new Dictionary<uint' uint>                                                 {                                                     {uint.MinValue' 23}'                                                     {uint.MaxValue' 34324}                                                 }'                                     ULongs = new Dictionary<ulong' ulong>                                                  {                                                      {ulong.MinValue' ulong.MaxValue}'                                                      {34324234' 3243243245}                                                  }'                                     UShorts = new Dictionary<ushort' ushort>                                                   {                                                       {ushort.MinValue' ushort.MaxValue}'                                                       {42324' 32}                                                   }                                   };
Magic Number,NServiceBus.Serializers.XML.Test,DictionaryTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\DictionaryTests.cs,Should_deserialize_dictionaries,The following statement contains a magic number: var expected = new MessageWithDictionaries                                 {                                     Bools = new Dictionary<bool' bool>                                                 {                                                     {true' true}'                                                     {false' false}                                                 }'                                     Chars = new Dictionary<char' char>                                                 {                                                     //{char.MinValue' char.MaxValue}' // doesn't work because we use UTF8                                                     {'a'' 'b'}'                                                     {'c'' 'd'}'                                                     {'e'' 'f'}                                                 }'                                     Bytes = new Dictionary<byte' byte>                                                 {                                                     {byte.MinValue' byte.MaxValue}'                                                     {11' 1}'                                                     {1' 0}                                                 }'                                     Ints = new Dictionary<int' int>                                                {                                                    {int.MinValue' int.MaxValue}'                                                    {1' 2}'                                                    {3' 4}'                                                    {5' 6}                                                }'                                     Decimals = new Dictionary<decimal' decimal>                                                    {                                                        {decimal.MinValue' decimal.MaxValue}'                                                        {.2m' 4m}'                                                        {.5m' .4234m}                                                    }'                                     Doubles = new Dictionary<double' double>                                                   {                                                       {double.MinValue' double.MaxValue}'                                                       {.223d' 234d}'                                                       {.513d' .4212334d}                                                   }'                                     Floats = new Dictionary<float' float>                                                  {                                                      {float.MinValue' float.MaxValue}'                                                      {.223f' 234f}'                                                      {.513f' .4212334f}                                                  }'                                     Enums = new Dictionary<DateTimeStyles' DateTimeKind>                                                 {                                                     {DateTimeStyles.AdjustToUniversal' DateTimeKind.Local}'                                                     {DateTimeStyles.AllowLeadingWhite' DateTimeKind.Unspecified}'                                                   }'                                     Longs = new Dictionary<long' long>                                                 {                                                     {long.MaxValue' long.MinValue}'                                                     {34234' 234324}'                                                     {45345345' 34534534565}                                                 }'                                     SBytes = new Dictionary<sbyte' sbyte>                                                  {                                                      {sbyte.MaxValue' sbyte.MaxValue}'                                                      {56' 13}                                                  }'                                     Shorts = new Dictionary<short' short>                                                  {                                                      {short.MinValue' short.MaxValue}'                                                      {5231' 6123}                                                  }'                                     Strings = new Dictionary<string' string>                                                   {                                                       {"Key1"' "Value1"}'                                                       {"Key2"' "Value2"}'                                                       {"Key3"' "Value3"}'                                                   }'                                     UInts = new Dictionary<uint' uint>                                                 {                                                     {uint.MinValue' 23}'                                                     {uint.MaxValue' 34324}                                                 }'                                     ULongs = new Dictionary<ulong' ulong>                                                  {                                                      {ulong.MinValue' ulong.MaxValue}'                                                      {34324234' 3243243245}                                                  }'                                     UShorts = new Dictionary<ushort' ushort>                                                   {                                                       {ushort.MinValue' ushort.MaxValue}'                                                       {42324' 32}                                                   }                                   };
Magic Number,NServiceBus.Serializers.XML.Test,DictionaryTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\DictionaryTests.cs,Should_deserialize_dictionaries,The following statement contains a magic number: var expected = new MessageWithDictionaries                                 {                                     Bools = new Dictionary<bool' bool>                                                 {                                                     {true' true}'                                                     {false' false}                                                 }'                                     Chars = new Dictionary<char' char>                                                 {                                                     //{char.MinValue' char.MaxValue}' // doesn't work because we use UTF8                                                     {'a'' 'b'}'                                                     {'c'' 'd'}'                                                     {'e'' 'f'}                                                 }'                                     Bytes = new Dictionary<byte' byte>                                                 {                                                     {byte.MinValue' byte.MaxValue}'                                                     {11' 1}'                                                     {1' 0}                                                 }'                                     Ints = new Dictionary<int' int>                                                {                                                    {int.MinValue' int.MaxValue}'                                                    {1' 2}'                                                    {3' 4}'                                                    {5' 6}                                                }'                                     Decimals = new Dictionary<decimal' decimal>                                                    {                                                        {decimal.MinValue' decimal.MaxValue}'                                                        {.2m' 4m}'                                                        {.5m' .4234m}                                                    }'                                     Doubles = new Dictionary<double' double>                                                   {                                                       {double.MinValue' double.MaxValue}'                                                       {.223d' 234d}'                                                       {.513d' .4212334d}                                                   }'                                     Floats = new Dictionary<float' float>                                                  {                                                      {float.MinValue' float.MaxValue}'                                                      {.223f' 234f}'                                                      {.513f' .4212334f}                                                  }'                                     Enums = new Dictionary<DateTimeStyles' DateTimeKind>                                                 {                                                     {DateTimeStyles.AdjustToUniversal' DateTimeKind.Local}'                                                     {DateTimeStyles.AllowLeadingWhite' DateTimeKind.Unspecified}'                                                   }'                                     Longs = new Dictionary<long' long>                                                 {                                                     {long.MaxValue' long.MinValue}'                                                     {34234' 234324}'                                                     {45345345' 34534534565}                                                 }'                                     SBytes = new Dictionary<sbyte' sbyte>                                                  {                                                      {sbyte.MaxValue' sbyte.MaxValue}'                                                      {56' 13}                                                  }'                                     Shorts = new Dictionary<short' short>                                                  {                                                      {short.MinValue' short.MaxValue}'                                                      {5231' 6123}                                                  }'                                     Strings = new Dictionary<string' string>                                                   {                                                       {"Key1"' "Value1"}'                                                       {"Key2"' "Value2"}'                                                       {"Key3"' "Value3"}'                                                   }'                                     UInts = new Dictionary<uint' uint>                                                 {                                                     {uint.MinValue' 23}'                                                     {uint.MaxValue' 34324}                                                 }'                                     ULongs = new Dictionary<ulong' ulong>                                                  {                                                      {ulong.MinValue' ulong.MaxValue}'                                                      {34324234' 3243243245}                                                  }'                                     UShorts = new Dictionary<ushort' ushort>                                                   {                                                       {ushort.MinValue' ushort.MaxValue}'                                                       {42324' 32}                                                   }                                   };
Magic Number,NServiceBus.Serializers.XML.Test,DictionaryTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\DictionaryTests.cs,Should_deserialize_dictionaries,The following statement contains a magic number: var expected = new MessageWithDictionaries                                 {                                     Bools = new Dictionary<bool' bool>                                                 {                                                     {true' true}'                                                     {false' false}                                                 }'                                     Chars = new Dictionary<char' char>                                                 {                                                     //{char.MinValue' char.MaxValue}' // doesn't work because we use UTF8                                                     {'a'' 'b'}'                                                     {'c'' 'd'}'                                                     {'e'' 'f'}                                                 }'                                     Bytes = new Dictionary<byte' byte>                                                 {                                                     {byte.MinValue' byte.MaxValue}'                                                     {11' 1}'                                                     {1' 0}                                                 }'                                     Ints = new Dictionary<int' int>                                                {                                                    {int.MinValue' int.MaxValue}'                                                    {1' 2}'                                                    {3' 4}'                                                    {5' 6}                                                }'                                     Decimals = new Dictionary<decimal' decimal>                                                    {                                                        {decimal.MinValue' decimal.MaxValue}'                                                        {.2m' 4m}'                                                        {.5m' .4234m}                                                    }'                                     Doubles = new Dictionary<double' double>                                                   {                                                       {double.MinValue' double.MaxValue}'                                                       {.223d' 234d}'                                                       {.513d' .4212334d}                                                   }'                                     Floats = new Dictionary<float' float>                                                  {                                                      {float.MinValue' float.MaxValue}'                                                      {.223f' 234f}'                                                      {.513f' .4212334f}                                                  }'                                     Enums = new Dictionary<DateTimeStyles' DateTimeKind>                                                 {                                                     {DateTimeStyles.AdjustToUniversal' DateTimeKind.Local}'                                                     {DateTimeStyles.AllowLeadingWhite' DateTimeKind.Unspecified}'                                                   }'                                     Longs = new Dictionary<long' long>                                                 {                                                     {long.MaxValue' long.MinValue}'                                                     {34234' 234324}'                                                     {45345345' 34534534565}                                                 }'                                     SBytes = new Dictionary<sbyte' sbyte>                                                  {                                                      {sbyte.MaxValue' sbyte.MaxValue}'                                                      {56' 13}                                                  }'                                     Shorts = new Dictionary<short' short>                                                  {                                                      {short.MinValue' short.MaxValue}'                                                      {5231' 6123}                                                  }'                                     Strings = new Dictionary<string' string>                                                   {                                                       {"Key1"' "Value1"}'                                                       {"Key2"' "Value2"}'                                                       {"Key3"' "Value3"}'                                                   }'                                     UInts = new Dictionary<uint' uint>                                                 {                                                     {uint.MinValue' 23}'                                                     {uint.MaxValue' 34324}                                                 }'                                     ULongs = new Dictionary<ulong' ulong>                                                  {                                                      {ulong.MinValue' ulong.MaxValue}'                                                      {34324234' 3243243245}                                                  }'                                     UShorts = new Dictionary<ushort' ushort>                                                   {                                                       {ushort.MinValue' ushort.MaxValue}'                                                       {42324' 32}                                                   }                                   };
Magic Number,NServiceBus.Serializers.XML.Test,DictionaryTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\DictionaryTests.cs,Should_deserialize_dictionaries,The following statement contains a magic number: var expected = new MessageWithDictionaries                                 {                                     Bools = new Dictionary<bool' bool>                                                 {                                                     {true' true}'                                                     {false' false}                                                 }'                                     Chars = new Dictionary<char' char>                                                 {                                                     //{char.MinValue' char.MaxValue}' // doesn't work because we use UTF8                                                     {'a'' 'b'}'                                                     {'c'' 'd'}'                                                     {'e'' 'f'}                                                 }'                                     Bytes = new Dictionary<byte' byte>                                                 {                                                     {byte.MinValue' byte.MaxValue}'                                                     {11' 1}'                                                     {1' 0}                                                 }'                                     Ints = new Dictionary<int' int>                                                {                                                    {int.MinValue' int.MaxValue}'                                                    {1' 2}'                                                    {3' 4}'                                                    {5' 6}                                                }'                                     Decimals = new Dictionary<decimal' decimal>                                                    {                                                        {decimal.MinValue' decimal.MaxValue}'                                                        {.2m' 4m}'                                                        {.5m' .4234m}                                                    }'                                     Doubles = new Dictionary<double' double>                                                   {                                                       {double.MinValue' double.MaxValue}'                                                       {.223d' 234d}'                                                       {.513d' .4212334d}                                                   }'                                     Floats = new Dictionary<float' float>                                                  {                                                      {float.MinValue' float.MaxValue}'                                                      {.223f' 234f}'                                                      {.513f' .4212334f}                                                  }'                                     Enums = new Dictionary<DateTimeStyles' DateTimeKind>                                                 {                                                     {DateTimeStyles.AdjustToUniversal' DateTimeKind.Local}'                                                     {DateTimeStyles.AllowLeadingWhite' DateTimeKind.Unspecified}'                                                   }'                                     Longs = new Dictionary<long' long>                                                 {                                                     {long.MaxValue' long.MinValue}'                                                     {34234' 234324}'                                                     {45345345' 34534534565}                                                 }'                                     SBytes = new Dictionary<sbyte' sbyte>                                                  {                                                      {sbyte.MaxValue' sbyte.MaxValue}'                                                      {56' 13}                                                  }'                                     Shorts = new Dictionary<short' short>                                                  {                                                      {short.MinValue' short.MaxValue}'                                                      {5231' 6123}                                                  }'                                     Strings = new Dictionary<string' string>                                                   {                                                       {"Key1"' "Value1"}'                                                       {"Key2"' "Value2"}'                                                       {"Key3"' "Value3"}'                                                   }'                                     UInts = new Dictionary<uint' uint>                                                 {                                                     {uint.MinValue' 23}'                                                     {uint.MaxValue' 34324}                                                 }'                                     ULongs = new Dictionary<ulong' ulong>                                                  {                                                      {ulong.MinValue' ulong.MaxValue}'                                                      {34324234' 3243243245}                                                  }'                                     UShorts = new Dictionary<ushort' ushort>                                                   {                                                       {ushort.MinValue' ushort.MaxValue}'                                                       {42324' 32}                                                   }                                   };
Magic Number,NServiceBus.Serializers.XML.Test,DictionaryTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\DictionaryTests.cs,Should_deserialize_dictionaries,The following statement contains a magic number: var expected = new MessageWithDictionaries                                 {                                     Bools = new Dictionary<bool' bool>                                                 {                                                     {true' true}'                                                     {false' false}                                                 }'                                     Chars = new Dictionary<char' char>                                                 {                                                     //{char.MinValue' char.MaxValue}' // doesn't work because we use UTF8                                                     {'a'' 'b'}'                                                     {'c'' 'd'}'                                                     {'e'' 'f'}                                                 }'                                     Bytes = new Dictionary<byte' byte>                                                 {                                                     {byte.MinValue' byte.MaxValue}'                                                     {11' 1}'                                                     {1' 0}                                                 }'                                     Ints = new Dictionary<int' int>                                                {                                                    {int.MinValue' int.MaxValue}'                                                    {1' 2}'                                                    {3' 4}'                                                    {5' 6}                                                }'                                     Decimals = new Dictionary<decimal' decimal>                                                    {                                                        {decimal.MinValue' decimal.MaxValue}'                                                        {.2m' 4m}'                                                        {.5m' .4234m}                                                    }'                                     Doubles = new Dictionary<double' double>                                                   {                                                       {double.MinValue' double.MaxValue}'                                                       {.223d' 234d}'                                                       {.513d' .4212334d}                                                   }'                                     Floats = new Dictionary<float' float>                                                  {                                                      {float.MinValue' float.MaxValue}'                                                      {.223f' 234f}'                                                      {.513f' .4212334f}                                                  }'                                     Enums = new Dictionary<DateTimeStyles' DateTimeKind>                                                 {                                                     {DateTimeStyles.AdjustToUniversal' DateTimeKind.Local}'                                                     {DateTimeStyles.AllowLeadingWhite' DateTimeKind.Unspecified}'                                                   }'                                     Longs = new Dictionary<long' long>                                                 {                                                     {long.MaxValue' long.MinValue}'                                                     {34234' 234324}'                                                     {45345345' 34534534565}                                                 }'                                     SBytes = new Dictionary<sbyte' sbyte>                                                  {                                                      {sbyte.MaxValue' sbyte.MaxValue}'                                                      {56' 13}                                                  }'                                     Shorts = new Dictionary<short' short>                                                  {                                                      {short.MinValue' short.MaxValue}'                                                      {5231' 6123}                                                  }'                                     Strings = new Dictionary<string' string>                                                   {                                                       {"Key1"' "Value1"}'                                                       {"Key2"' "Value2"}'                                                       {"Key3"' "Value3"}'                                                   }'                                     UInts = new Dictionary<uint' uint>                                                 {                                                     {uint.MinValue' 23}'                                                     {uint.MaxValue' 34324}                                                 }'                                     ULongs = new Dictionary<ulong' ulong>                                                  {                                                      {ulong.MinValue' ulong.MaxValue}'                                                      {34324234' 3243243245}                                                  }'                                     UShorts = new Dictionary<ushort' ushort>                                                   {                                                       {ushort.MinValue' ushort.MaxValue}'                                                       {42324' 32}                                                   }                                   };
Magic Number,NServiceBus.Serializers.XML.Test,ListTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\ListTests.cs,Should_deserialize_list,The following statement contains a magic number: var expected = new MessageWithLists                                 {                                     Bools = new List<bool> {true' false}'                                     Chars = new List<char> {'a'' 'b'' 'c'' 'd'' 'e'' 'f'}'                                     Bytes = new List<byte> {byte.MinValue' byte.MaxValue' 11' 1' 1' 0}'                                     Ints = new List<int> {int.MinValue' int.MaxValue' 1' 2' 3' 4' 5' 6}'                                     Decimals =                                         new List<decimal> {decimal.MinValue' decimal.MaxValue' .2m' 4m' .5m' .4234m}'                                     Doubles =                                         new List<double>                                             {double.MinValue' double.MaxValue' .223d' 234d' .513d' .4212334d}'                                     Floats =                                         new List<float> {float.MinValue' float.MaxValue' .223f' 234f' .513f' .4212334f}'                                     Enums = new List<DateTimeStyles>                                                 {                                                     DateTimeStyles.AdjustToUniversal'                                                     DateTimeStyles.AllowLeadingWhite'                                                     DateTimeStyles.AllowTrailingWhite                                                 }'                                     Longs =                                         new List<long>                                             {long.MaxValue' long.MinValue' 34234' 234324' 45345345' 34534534565}'                                     SBytes = new List<sbyte> {sbyte.MaxValue' sbyte.MaxValue' 56' 13}'                                     Shorts = new List<short> {short.MinValue' short.MaxValue' 5231' 6123}'                                     Strings = new List<string> {"Key1"' "Value1"' "Key2"' "Value2"' "Key3"' "Value3"}'                                     UInts = new List<uint> {uint.MinValue' 23' uint.MaxValue' 34324}'                                     ULongs = new List<ulong> {ulong.MinValue' ulong.MaxValue' 34324234' 3243243245}'                                     UShorts = new List<ushort> {ushort.MinValue' ushort.MaxValue' 42324' 32}                                 };
Magic Number,NServiceBus.Serializers.XML.Test,ListTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\ListTests.cs,Should_deserialize_list,The following statement contains a magic number: var expected = new MessageWithLists                                 {                                     Bools = new List<bool> {true' false}'                                     Chars = new List<char> {'a'' 'b'' 'c'' 'd'' 'e'' 'f'}'                                     Bytes = new List<byte> {byte.MinValue' byte.MaxValue' 11' 1' 1' 0}'                                     Ints = new List<int> {int.MinValue' int.MaxValue' 1' 2' 3' 4' 5' 6}'                                     Decimals =                                         new List<decimal> {decimal.MinValue' decimal.MaxValue' .2m' 4m' .5m' .4234m}'                                     Doubles =                                         new List<double>                                             {double.MinValue' double.MaxValue' .223d' 234d' .513d' .4212334d}'                                     Floats =                                         new List<float> {float.MinValue' float.MaxValue' .223f' 234f' .513f' .4212334f}'                                     Enums = new List<DateTimeStyles>                                                 {                                                     DateTimeStyles.AdjustToUniversal'                                                     DateTimeStyles.AllowLeadingWhite'                                                     DateTimeStyles.AllowTrailingWhite                                                 }'                                     Longs =                                         new List<long>                                             {long.MaxValue' long.MinValue' 34234' 234324' 45345345' 34534534565}'                                     SBytes = new List<sbyte> {sbyte.MaxValue' sbyte.MaxValue' 56' 13}'                                     Shorts = new List<short> {short.MinValue' short.MaxValue' 5231' 6123}'                                     Strings = new List<string> {"Key1"' "Value1"' "Key2"' "Value2"' "Key3"' "Value3"}'                                     UInts = new List<uint> {uint.MinValue' 23' uint.MaxValue' 34324}'                                     ULongs = new List<ulong> {ulong.MinValue' ulong.MaxValue' 34324234' 3243243245}'                                     UShorts = new List<ushort> {ushort.MinValue' ushort.MaxValue' 42324' 32}                                 };
Magic Number,NServiceBus.Serializers.XML.Test,ListTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\ListTests.cs,Should_deserialize_list,The following statement contains a magic number: var expected = new MessageWithLists                                 {                                     Bools = new List<bool> {true' false}'                                     Chars = new List<char> {'a'' 'b'' 'c'' 'd'' 'e'' 'f'}'                                     Bytes = new List<byte> {byte.MinValue' byte.MaxValue' 11' 1' 1' 0}'                                     Ints = new List<int> {int.MinValue' int.MaxValue' 1' 2' 3' 4' 5' 6}'                                     Decimals =                                         new List<decimal> {decimal.MinValue' decimal.MaxValue' .2m' 4m' .5m' .4234m}'                                     Doubles =                                         new List<double>                                             {double.MinValue' double.MaxValue' .223d' 234d' .513d' .4212334d}'                                     Floats =                                         new List<float> {float.MinValue' float.MaxValue' .223f' 234f' .513f' .4212334f}'                                     Enums = new List<DateTimeStyles>                                                 {                                                     DateTimeStyles.AdjustToUniversal'                                                     DateTimeStyles.AllowLeadingWhite'                                                     DateTimeStyles.AllowTrailingWhite                                                 }'                                     Longs =                                         new List<long>                                             {long.MaxValue' long.MinValue' 34234' 234324' 45345345' 34534534565}'                                     SBytes = new List<sbyte> {sbyte.MaxValue' sbyte.MaxValue' 56' 13}'                                     Shorts = new List<short> {short.MinValue' short.MaxValue' 5231' 6123}'                                     Strings = new List<string> {"Key1"' "Value1"' "Key2"' "Value2"' "Key3"' "Value3"}'                                     UInts = new List<uint> {uint.MinValue' 23' uint.MaxValue' 34324}'                                     ULongs = new List<ulong> {ulong.MinValue' ulong.MaxValue' 34324234' 3243243245}'                                     UShorts = new List<ushort> {ushort.MinValue' ushort.MaxValue' 42324' 32}                                 };
Magic Number,NServiceBus.Serializers.XML.Test,ListTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\ListTests.cs,Should_deserialize_list,The following statement contains a magic number: var expected = new MessageWithLists                                 {                                     Bools = new List<bool> {true' false}'                                     Chars = new List<char> {'a'' 'b'' 'c'' 'd'' 'e'' 'f'}'                                     Bytes = new List<byte> {byte.MinValue' byte.MaxValue' 11' 1' 1' 0}'                                     Ints = new List<int> {int.MinValue' int.MaxValue' 1' 2' 3' 4' 5' 6}'                                     Decimals =                                         new List<decimal> {decimal.MinValue' decimal.MaxValue' .2m' 4m' .5m' .4234m}'                                     Doubles =                                         new List<double>                                             {double.MinValue' double.MaxValue' .223d' 234d' .513d' .4212334d}'                                     Floats =                                         new List<float> {float.MinValue' float.MaxValue' .223f' 234f' .513f' .4212334f}'                                     Enums = new List<DateTimeStyles>                                                 {                                                     DateTimeStyles.AdjustToUniversal'                                                     DateTimeStyles.AllowLeadingWhite'                                                     DateTimeStyles.AllowTrailingWhite                                                 }'                                     Longs =                                         new List<long>                                             {long.MaxValue' long.MinValue' 34234' 234324' 45345345' 34534534565}'                                     SBytes = new List<sbyte> {sbyte.MaxValue' sbyte.MaxValue' 56' 13}'                                     Shorts = new List<short> {short.MinValue' short.MaxValue' 5231' 6123}'                                     Strings = new List<string> {"Key1"' "Value1"' "Key2"' "Value2"' "Key3"' "Value3"}'                                     UInts = new List<uint> {uint.MinValue' 23' uint.MaxValue' 34324}'                                     ULongs = new List<ulong> {ulong.MinValue' ulong.MaxValue' 34324234' 3243243245}'                                     UShorts = new List<ushort> {ushort.MinValue' ushort.MaxValue' 42324' 32}                                 };
Magic Number,NServiceBus.Serializers.XML.Test,ListTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\ListTests.cs,Should_deserialize_list,The following statement contains a magic number: var expected = new MessageWithLists                                 {                                     Bools = new List<bool> {true' false}'                                     Chars = new List<char> {'a'' 'b'' 'c'' 'd'' 'e'' 'f'}'                                     Bytes = new List<byte> {byte.MinValue' byte.MaxValue' 11' 1' 1' 0}'                                     Ints = new List<int> {int.MinValue' int.MaxValue' 1' 2' 3' 4' 5' 6}'                                     Decimals =                                         new List<decimal> {decimal.MinValue' decimal.MaxValue' .2m' 4m' .5m' .4234m}'                                     Doubles =                                         new List<double>                                             {double.MinValue' double.MaxValue' .223d' 234d' .513d' .4212334d}'                                     Floats =                                         new List<float> {float.MinValue' float.MaxValue' .223f' 234f' .513f' .4212334f}'                                     Enums = new List<DateTimeStyles>                                                 {                                                     DateTimeStyles.AdjustToUniversal'                                                     DateTimeStyles.AllowLeadingWhite'                                                     DateTimeStyles.AllowTrailingWhite                                                 }'                                     Longs =                                         new List<long>                                             {long.MaxValue' long.MinValue' 34234' 234324' 45345345' 34534534565}'                                     SBytes = new List<sbyte> {sbyte.MaxValue' sbyte.MaxValue' 56' 13}'                                     Shorts = new List<short> {short.MinValue' short.MaxValue' 5231' 6123}'                                     Strings = new List<string> {"Key1"' "Value1"' "Key2"' "Value2"' "Key3"' "Value3"}'                                     UInts = new List<uint> {uint.MinValue' 23' uint.MaxValue' 34324}'                                     ULongs = new List<ulong> {ulong.MinValue' ulong.MaxValue' 34324234' 3243243245}'                                     UShorts = new List<ushort> {ushort.MinValue' ushort.MaxValue' 42324' 32}                                 };
Magic Number,NServiceBus.Serializers.XML.Test,ListTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\ListTests.cs,Should_deserialize_list,The following statement contains a magic number: var expected = new MessageWithLists                                 {                                     Bools = new List<bool> {true' false}'                                     Chars = new List<char> {'a'' 'b'' 'c'' 'd'' 'e'' 'f'}'                                     Bytes = new List<byte> {byte.MinValue' byte.MaxValue' 11' 1' 1' 0}'                                     Ints = new List<int> {int.MinValue' int.MaxValue' 1' 2' 3' 4' 5' 6}'                                     Decimals =                                         new List<decimal> {decimal.MinValue' decimal.MaxValue' .2m' 4m' .5m' .4234m}'                                     Doubles =                                         new List<double>                                             {double.MinValue' double.MaxValue' .223d' 234d' .513d' .4212334d}'                                     Floats =                                         new List<float> {float.MinValue' float.MaxValue' .223f' 234f' .513f' .4212334f}'                                     Enums = new List<DateTimeStyles>                                                 {                                                     DateTimeStyles.AdjustToUniversal'                                                     DateTimeStyles.AllowLeadingWhite'                                                     DateTimeStyles.AllowTrailingWhite                                                 }'                                     Longs =                                         new List<long>                                             {long.MaxValue' long.MinValue' 34234' 234324' 45345345' 34534534565}'                                     SBytes = new List<sbyte> {sbyte.MaxValue' sbyte.MaxValue' 56' 13}'                                     Shorts = new List<short> {short.MinValue' short.MaxValue' 5231' 6123}'                                     Strings = new List<string> {"Key1"' "Value1"' "Key2"' "Value2"' "Key3"' "Value3"}'                                     UInts = new List<uint> {uint.MinValue' 23' uint.MaxValue' 34324}'                                     ULongs = new List<ulong> {ulong.MinValue' ulong.MaxValue' 34324234' 3243243245}'                                     UShorts = new List<ushort> {ushort.MinValue' ushort.MaxValue' 42324' 32}                                 };
Magic Number,NServiceBus.Serializers.XML.Test,ListTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\ListTests.cs,Should_deserialize_list,The following statement contains a magic number: var expected = new MessageWithLists                                 {                                     Bools = new List<bool> {true' false}'                                     Chars = new List<char> {'a'' 'b'' 'c'' 'd'' 'e'' 'f'}'                                     Bytes = new List<byte> {byte.MinValue' byte.MaxValue' 11' 1' 1' 0}'                                     Ints = new List<int> {int.MinValue' int.MaxValue' 1' 2' 3' 4' 5' 6}'                                     Decimals =                                         new List<decimal> {decimal.MinValue' decimal.MaxValue' .2m' 4m' .5m' .4234m}'                                     Doubles =                                         new List<double>                                             {double.MinValue' double.MaxValue' .223d' 234d' .513d' .4212334d}'                                     Floats =                                         new List<float> {float.MinValue' float.MaxValue' .223f' 234f' .513f' .4212334f}'                                     Enums = new List<DateTimeStyles>                                                 {                                                     DateTimeStyles.AdjustToUniversal'                                                     DateTimeStyles.AllowLeadingWhite'                                                     DateTimeStyles.AllowTrailingWhite                                                 }'                                     Longs =                                         new List<long>                                             {long.MaxValue' long.MinValue' 34234' 234324' 45345345' 34534534565}'                                     SBytes = new List<sbyte> {sbyte.MaxValue' sbyte.MaxValue' 56' 13}'                                     Shorts = new List<short> {short.MinValue' short.MaxValue' 5231' 6123}'                                     Strings = new List<string> {"Key1"' "Value1"' "Key2"' "Value2"' "Key3"' "Value3"}'                                     UInts = new List<uint> {uint.MinValue' 23' uint.MaxValue' 34324}'                                     ULongs = new List<ulong> {ulong.MinValue' ulong.MaxValue' 34324234' 3243243245}'                                     UShorts = new List<ushort> {ushort.MinValue' ushort.MaxValue' 42324' 32}                                 };
Magic Number,NServiceBus.Serializers.XML.Test,ListTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\ListTests.cs,Should_deserialize_list,The following statement contains a magic number: var expected = new MessageWithLists                                 {                                     Bools = new List<bool> {true' false}'                                     Chars = new List<char> {'a'' 'b'' 'c'' 'd'' 'e'' 'f'}'                                     Bytes = new List<byte> {byte.MinValue' byte.MaxValue' 11' 1' 1' 0}'                                     Ints = new List<int> {int.MinValue' int.MaxValue' 1' 2' 3' 4' 5' 6}'                                     Decimals =                                         new List<decimal> {decimal.MinValue' decimal.MaxValue' .2m' 4m' .5m' .4234m}'                                     Doubles =                                         new List<double>                                             {double.MinValue' double.MaxValue' .223d' 234d' .513d' .4212334d}'                                     Floats =                                         new List<float> {float.MinValue' float.MaxValue' .223f' 234f' .513f' .4212334f}'                                     Enums = new List<DateTimeStyles>                                                 {                                                     DateTimeStyles.AdjustToUniversal'                                                     DateTimeStyles.AllowLeadingWhite'                                                     DateTimeStyles.AllowTrailingWhite                                                 }'                                     Longs =                                         new List<long>                                             {long.MaxValue' long.MinValue' 34234' 234324' 45345345' 34534534565}'                                     SBytes = new List<sbyte> {sbyte.MaxValue' sbyte.MaxValue' 56' 13}'                                     Shorts = new List<short> {short.MinValue' short.MaxValue' 5231' 6123}'                                     Strings = new List<string> {"Key1"' "Value1"' "Key2"' "Value2"' "Key3"' "Value3"}'                                     UInts = new List<uint> {uint.MinValue' 23' uint.MaxValue' 34324}'                                     ULongs = new List<ulong> {ulong.MinValue' ulong.MaxValue' 34324234' 3243243245}'                                     UShorts = new List<ushort> {ushort.MinValue' ushort.MaxValue' 42324' 32}                                 };
Magic Number,NServiceBus.Serializers.XML.Test,ListTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\ListTests.cs,Should_deserialize_list,The following statement contains a magic number: var expected = new MessageWithLists                                 {                                     Bools = new List<bool> {true' false}'                                     Chars = new List<char> {'a'' 'b'' 'c'' 'd'' 'e'' 'f'}'                                     Bytes = new List<byte> {byte.MinValue' byte.MaxValue' 11' 1' 1' 0}'                                     Ints = new List<int> {int.MinValue' int.MaxValue' 1' 2' 3' 4' 5' 6}'                                     Decimals =                                         new List<decimal> {decimal.MinValue' decimal.MaxValue' .2m' 4m' .5m' .4234m}'                                     Doubles =                                         new List<double>                                             {double.MinValue' double.MaxValue' .223d' 234d' .513d' .4212334d}'                                     Floats =                                         new List<float> {float.MinValue' float.MaxValue' .223f' 234f' .513f' .4212334f}'                                     Enums = new List<DateTimeStyles>                                                 {                                                     DateTimeStyles.AdjustToUniversal'                                                     DateTimeStyles.AllowLeadingWhite'                                                     DateTimeStyles.AllowTrailingWhite                                                 }'                                     Longs =                                         new List<long>                                             {long.MaxValue' long.MinValue' 34234' 234324' 45345345' 34534534565}'                                     SBytes = new List<sbyte> {sbyte.MaxValue' sbyte.MaxValue' 56' 13}'                                     Shorts = new List<short> {short.MinValue' short.MaxValue' 5231' 6123}'                                     Strings = new List<string> {"Key1"' "Value1"' "Key2"' "Value2"' "Key3"' "Value3"}'                                     UInts = new List<uint> {uint.MinValue' 23' uint.MaxValue' 34324}'                                     ULongs = new List<ulong> {ulong.MinValue' ulong.MaxValue' 34324234' 3243243245}'                                     UShorts = new List<ushort> {ushort.MinValue' ushort.MaxValue' 42324' 32}                                 };
Magic Number,NServiceBus.Serializers.XML.Test,ListTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\ListTests.cs,Should_deserialize_list,The following statement contains a magic number: var expected = new MessageWithLists                                 {                                     Bools = new List<bool> {true' false}'                                     Chars = new List<char> {'a'' 'b'' 'c'' 'd'' 'e'' 'f'}'                                     Bytes = new List<byte> {byte.MinValue' byte.MaxValue' 11' 1' 1' 0}'                                     Ints = new List<int> {int.MinValue' int.MaxValue' 1' 2' 3' 4' 5' 6}'                                     Decimals =                                         new List<decimal> {decimal.MinValue' decimal.MaxValue' .2m' 4m' .5m' .4234m}'                                     Doubles =                                         new List<double>                                             {double.MinValue' double.MaxValue' .223d' 234d' .513d' .4212334d}'                                     Floats =                                         new List<float> {float.MinValue' float.MaxValue' .223f' 234f' .513f' .4212334f}'                                     Enums = new List<DateTimeStyles>                                                 {                                                     DateTimeStyles.AdjustToUniversal'                                                     DateTimeStyles.AllowLeadingWhite'                                                     DateTimeStyles.AllowTrailingWhite                                                 }'                                     Longs =                                         new List<long>                                             {long.MaxValue' long.MinValue' 34234' 234324' 45345345' 34534534565}'                                     SBytes = new List<sbyte> {sbyte.MaxValue' sbyte.MaxValue' 56' 13}'                                     Shorts = new List<short> {short.MinValue' short.MaxValue' 5231' 6123}'                                     Strings = new List<string> {"Key1"' "Value1"' "Key2"' "Value2"' "Key3"' "Value3"}'                                     UInts = new List<uint> {uint.MinValue' 23' uint.MaxValue' 34324}'                                     ULongs = new List<ulong> {ulong.MinValue' ulong.MaxValue' 34324234' 3243243245}'                                     UShorts = new List<ushort> {ushort.MinValue' ushort.MaxValue' 42324' 32}                                 };
Magic Number,NServiceBus.Serializers.XML.Test,ListTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\ListTests.cs,Should_deserialize_list,The following statement contains a magic number: var expected = new MessageWithLists                                 {                                     Bools = new List<bool> {true' false}'                                     Chars = new List<char> {'a'' 'b'' 'c'' 'd'' 'e'' 'f'}'                                     Bytes = new List<byte> {byte.MinValue' byte.MaxValue' 11' 1' 1' 0}'                                     Ints = new List<int> {int.MinValue' int.MaxValue' 1' 2' 3' 4' 5' 6}'                                     Decimals =                                         new List<decimal> {decimal.MinValue' decimal.MaxValue' .2m' 4m' .5m' .4234m}'                                     Doubles =                                         new List<double>                                             {double.MinValue' double.MaxValue' .223d' 234d' .513d' .4212334d}'                                     Floats =                                         new List<float> {float.MinValue' float.MaxValue' .223f' 234f' .513f' .4212334f}'                                     Enums = new List<DateTimeStyles>                                                 {                                                     DateTimeStyles.AdjustToUniversal'                                                     DateTimeStyles.AllowLeadingWhite'                                                     DateTimeStyles.AllowTrailingWhite                                                 }'                                     Longs =                                         new List<long>                                             {long.MaxValue' long.MinValue' 34234' 234324' 45345345' 34534534565}'                                     SBytes = new List<sbyte> {sbyte.MaxValue' sbyte.MaxValue' 56' 13}'                                     Shorts = new List<short> {short.MinValue' short.MaxValue' 5231' 6123}'                                     Strings = new List<string> {"Key1"' "Value1"' "Key2"' "Value2"' "Key3"' "Value3"}'                                     UInts = new List<uint> {uint.MinValue' 23' uint.MaxValue' 34324}'                                     ULongs = new List<ulong> {ulong.MinValue' ulong.MaxValue' 34324234' 3243243245}'                                     UShorts = new List<ushort> {ushort.MinValue' ushort.MaxValue' 42324' 32}                                 };
Magic Number,NServiceBus.Serializers.XML.Test,ListTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\ListTests.cs,Should_deserialize_list,The following statement contains a magic number: var expected = new MessageWithLists                                 {                                     Bools = new List<bool> {true' false}'                                     Chars = new List<char> {'a'' 'b'' 'c'' 'd'' 'e'' 'f'}'                                     Bytes = new List<byte> {byte.MinValue' byte.MaxValue' 11' 1' 1' 0}'                                     Ints = new List<int> {int.MinValue' int.MaxValue' 1' 2' 3' 4' 5' 6}'                                     Decimals =                                         new List<decimal> {decimal.MinValue' decimal.MaxValue' .2m' 4m' .5m' .4234m}'                                     Doubles =                                         new List<double>                                             {double.MinValue' double.MaxValue' .223d' 234d' .513d' .4212334d}'                                     Floats =                                         new List<float> {float.MinValue' float.MaxValue' .223f' 234f' .513f' .4212334f}'                                     Enums = new List<DateTimeStyles>                                                 {                                                     DateTimeStyles.AdjustToUniversal'                                                     DateTimeStyles.AllowLeadingWhite'                                                     DateTimeStyles.AllowTrailingWhite                                                 }'                                     Longs =                                         new List<long>                                             {long.MaxValue' long.MinValue' 34234' 234324' 45345345' 34534534565}'                                     SBytes = new List<sbyte> {sbyte.MaxValue' sbyte.MaxValue' 56' 13}'                                     Shorts = new List<short> {short.MinValue' short.MaxValue' 5231' 6123}'                                     Strings = new List<string> {"Key1"' "Value1"' "Key2"' "Value2"' "Key3"' "Value3"}'                                     UInts = new List<uint> {uint.MinValue' 23' uint.MaxValue' 34324}'                                     ULongs = new List<ulong> {ulong.MinValue' ulong.MaxValue' 34324234' 3243243245}'                                     UShorts = new List<ushort> {ushort.MinValue' ushort.MaxValue' 42324' 32}                                 };
Magic Number,NServiceBus.Serializers.XML.Test,ListTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\ListTests.cs,Should_deserialize_list,The following statement contains a magic number: var expected = new MessageWithLists                                 {                                     Bools = new List<bool> {true' false}'                                     Chars = new List<char> {'a'' 'b'' 'c'' 'd'' 'e'' 'f'}'                                     Bytes = new List<byte> {byte.MinValue' byte.MaxValue' 11' 1' 1' 0}'                                     Ints = new List<int> {int.MinValue' int.MaxValue' 1' 2' 3' 4' 5' 6}'                                     Decimals =                                         new List<decimal> {decimal.MinValue' decimal.MaxValue' .2m' 4m' .5m' .4234m}'                                     Doubles =                                         new List<double>                                             {double.MinValue' double.MaxValue' .223d' 234d' .513d' .4212334d}'                                     Floats =                                         new List<float> {float.MinValue' float.MaxValue' .223f' 234f' .513f' .4212334f}'                                     Enums = new List<DateTimeStyles>                                                 {                                                     DateTimeStyles.AdjustToUniversal'                                                     DateTimeStyles.AllowLeadingWhite'                                                     DateTimeStyles.AllowTrailingWhite                                                 }'                                     Longs =                                         new List<long>                                             {long.MaxValue' long.MinValue' 34234' 234324' 45345345' 34534534565}'                                     SBytes = new List<sbyte> {sbyte.MaxValue' sbyte.MaxValue' 56' 13}'                                     Shorts = new List<short> {short.MinValue' short.MaxValue' 5231' 6123}'                                     Strings = new List<string> {"Key1"' "Value1"' "Key2"' "Value2"' "Key3"' "Value3"}'                                     UInts = new List<uint> {uint.MinValue' 23' uint.MaxValue' 34324}'                                     ULongs = new List<ulong> {ulong.MinValue' ulong.MaxValue' 34324234' 3243243245}'                                     UShorts = new List<ushort> {ushort.MinValue' ushort.MaxValue' 42324' 32}                                 };
Magic Number,NServiceBus.Serializers.XML.Test,ListTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\ListTests.cs,Should_deserialize_list,The following statement contains a magic number: var expected = new MessageWithLists                                 {                                     Bools = new List<bool> {true' false}'                                     Chars = new List<char> {'a'' 'b'' 'c'' 'd'' 'e'' 'f'}'                                     Bytes = new List<byte> {byte.MinValue' byte.MaxValue' 11' 1' 1' 0}'                                     Ints = new List<int> {int.MinValue' int.MaxValue' 1' 2' 3' 4' 5' 6}'                                     Decimals =                                         new List<decimal> {decimal.MinValue' decimal.MaxValue' .2m' 4m' .5m' .4234m}'                                     Doubles =                                         new List<double>                                             {double.MinValue' double.MaxValue' .223d' 234d' .513d' .4212334d}'                                     Floats =                                         new List<float> {float.MinValue' float.MaxValue' .223f' 234f' .513f' .4212334f}'                                     Enums = new List<DateTimeStyles>                                                 {                                                     DateTimeStyles.AdjustToUniversal'                                                     DateTimeStyles.AllowLeadingWhite'                                                     DateTimeStyles.AllowTrailingWhite                                                 }'                                     Longs =                                         new List<long>                                             {long.MaxValue' long.MinValue' 34234' 234324' 45345345' 34534534565}'                                     SBytes = new List<sbyte> {sbyte.MaxValue' sbyte.MaxValue' 56' 13}'                                     Shorts = new List<short> {short.MinValue' short.MaxValue' 5231' 6123}'                                     Strings = new List<string> {"Key1"' "Value1"' "Key2"' "Value2"' "Key3"' "Value3"}'                                     UInts = new List<uint> {uint.MinValue' 23' uint.MaxValue' 34324}'                                     ULongs = new List<ulong> {ulong.MinValue' ulong.MaxValue' 34324234' 3243243245}'                                     UShorts = new List<ushort> {ushort.MinValue' ushort.MaxValue' 42324' 32}                                 };
Magic Number,NServiceBus.Serializers.XML.Test,ListTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\ListTests.cs,Should_deserialize_list,The following statement contains a magic number: var expected = new MessageWithLists                                 {                                     Bools = new List<bool> {true' false}'                                     Chars = new List<char> {'a'' 'b'' 'c'' 'd'' 'e'' 'f'}'                                     Bytes = new List<byte> {byte.MinValue' byte.MaxValue' 11' 1' 1' 0}'                                     Ints = new List<int> {int.MinValue' int.MaxValue' 1' 2' 3' 4' 5' 6}'                                     Decimals =                                         new List<decimal> {decimal.MinValue' decimal.MaxValue' .2m' 4m' .5m' .4234m}'                                     Doubles =                                         new List<double>                                             {double.MinValue' double.MaxValue' .223d' 234d' .513d' .4212334d}'                                     Floats =                                         new List<float> {float.MinValue' float.MaxValue' .223f' 234f' .513f' .4212334f}'                                     Enums = new List<DateTimeStyles>                                                 {                                                     DateTimeStyles.AdjustToUniversal'                                                     DateTimeStyles.AllowLeadingWhite'                                                     DateTimeStyles.AllowTrailingWhite                                                 }'                                     Longs =                                         new List<long>                                             {long.MaxValue' long.MinValue' 34234' 234324' 45345345' 34534534565}'                                     SBytes = new List<sbyte> {sbyte.MaxValue' sbyte.MaxValue' 56' 13}'                                     Shorts = new List<short> {short.MinValue' short.MaxValue' 5231' 6123}'                                     Strings = new List<string> {"Key1"' "Value1"' "Key2"' "Value2"' "Key3"' "Value3"}'                                     UInts = new List<uint> {uint.MinValue' 23' uint.MaxValue' 34324}'                                     ULongs = new List<ulong> {ulong.MinValue' ulong.MaxValue' 34324234' 3243243245}'                                     UShorts = new List<ushort> {ushort.MinValue' ushort.MaxValue' 42324' 32}                                 };
Magic Number,NServiceBus.Serializers.XML.Test,ListTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\ListTests.cs,Should_deserialize_list,The following statement contains a magic number: var expected = new MessageWithLists                                 {                                     Bools = new List<bool> {true' false}'                                     Chars = new List<char> {'a'' 'b'' 'c'' 'd'' 'e'' 'f'}'                                     Bytes = new List<byte> {byte.MinValue' byte.MaxValue' 11' 1' 1' 0}'                                     Ints = new List<int> {int.MinValue' int.MaxValue' 1' 2' 3' 4' 5' 6}'                                     Decimals =                                         new List<decimal> {decimal.MinValue' decimal.MaxValue' .2m' 4m' .5m' .4234m}'                                     Doubles =                                         new List<double>                                             {double.MinValue' double.MaxValue' .223d' 234d' .513d' .4212334d}'                                     Floats =                                         new List<float> {float.MinValue' float.MaxValue' .223f' 234f' .513f' .4212334f}'                                     Enums = new List<DateTimeStyles>                                                 {                                                     DateTimeStyles.AdjustToUniversal'                                                     DateTimeStyles.AllowLeadingWhite'                                                     DateTimeStyles.AllowTrailingWhite                                                 }'                                     Longs =                                         new List<long>                                             {long.MaxValue' long.MinValue' 34234' 234324' 45345345' 34534534565}'                                     SBytes = new List<sbyte> {sbyte.MaxValue' sbyte.MaxValue' 56' 13}'                                     Shorts = new List<short> {short.MinValue' short.MaxValue' 5231' 6123}'                                     Strings = new List<string> {"Key1"' "Value1"' "Key2"' "Value2"' "Key3"' "Value3"}'                                     UInts = new List<uint> {uint.MinValue' 23' uint.MaxValue' 34324}'                                     ULongs = new List<ulong> {ulong.MinValue' ulong.MaxValue' 34324234' 3243243245}'                                     UShorts = new List<ushort> {ushort.MinValue' ushort.MaxValue' 42324' 32}                                 };
Magic Number,NServiceBus.Serializers.XML.Test,ListTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\ListTests.cs,Should_deserialize_list,The following statement contains a magic number: var expected = new MessageWithLists                                 {                                     Bools = new List<bool> {true' false}'                                     Chars = new List<char> {'a'' 'b'' 'c'' 'd'' 'e'' 'f'}'                                     Bytes = new List<byte> {byte.MinValue' byte.MaxValue' 11' 1' 1' 0}'                                     Ints = new List<int> {int.MinValue' int.MaxValue' 1' 2' 3' 4' 5' 6}'                                     Decimals =                                         new List<decimal> {decimal.MinValue' decimal.MaxValue' .2m' 4m' .5m' .4234m}'                                     Doubles =                                         new List<double>                                             {double.MinValue' double.MaxValue' .223d' 234d' .513d' .4212334d}'                                     Floats =                                         new List<float> {float.MinValue' float.MaxValue' .223f' 234f' .513f' .4212334f}'                                     Enums = new List<DateTimeStyles>                                                 {                                                     DateTimeStyles.AdjustToUniversal'                                                     DateTimeStyles.AllowLeadingWhite'                                                     DateTimeStyles.AllowTrailingWhite                                                 }'                                     Longs =                                         new List<long>                                             {long.MaxValue' long.MinValue' 34234' 234324' 45345345' 34534534565}'                                     SBytes = new List<sbyte> {sbyte.MaxValue' sbyte.MaxValue' 56' 13}'                                     Shorts = new List<short> {short.MinValue' short.MaxValue' 5231' 6123}'                                     Strings = new List<string> {"Key1"' "Value1"' "Key2"' "Value2"' "Key3"' "Value3"}'                                     UInts = new List<uint> {uint.MinValue' 23' uint.MaxValue' 34324}'                                     ULongs = new List<ulong> {ulong.MinValue' ulong.MaxValue' 34324234' 3243243245}'                                     UShorts = new List<ushort> {ushort.MinValue' ushort.MaxValue' 42324' 32}                                 };
Magic Number,NServiceBus.Serializers.XML.Test,ListTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\ListTests.cs,Should_deserialize_list,The following statement contains a magic number: var expected = new MessageWithLists                                 {                                     Bools = new List<bool> {true' false}'                                     Chars = new List<char> {'a'' 'b'' 'c'' 'd'' 'e'' 'f'}'                                     Bytes = new List<byte> {byte.MinValue' byte.MaxValue' 11' 1' 1' 0}'                                     Ints = new List<int> {int.MinValue' int.MaxValue' 1' 2' 3' 4' 5' 6}'                                     Decimals =                                         new List<decimal> {decimal.MinValue' decimal.MaxValue' .2m' 4m' .5m' .4234m}'                                     Doubles =                                         new List<double>                                             {double.MinValue' double.MaxValue' .223d' 234d' .513d' .4212334d}'                                     Floats =                                         new List<float> {float.MinValue' float.MaxValue' .223f' 234f' .513f' .4212334f}'                                     Enums = new List<DateTimeStyles>                                                 {                                                     DateTimeStyles.AdjustToUniversal'                                                     DateTimeStyles.AllowLeadingWhite'                                                     DateTimeStyles.AllowTrailingWhite                                                 }'                                     Longs =                                         new List<long>                                             {long.MaxValue' long.MinValue' 34234' 234324' 45345345' 34534534565}'                                     SBytes = new List<sbyte> {sbyte.MaxValue' sbyte.MaxValue' 56' 13}'                                     Shorts = new List<short> {short.MinValue' short.MaxValue' 5231' 6123}'                                     Strings = new List<string> {"Key1"' "Value1"' "Key2"' "Value2"' "Key3"' "Value3"}'                                     UInts = new List<uint> {uint.MinValue' 23' uint.MaxValue' 34324}'                                     ULongs = new List<ulong> {ulong.MinValue' ulong.MaxValue' 34324234' 3243243245}'                                     UShorts = new List<ushort> {ushort.MinValue' ushort.MaxValue' 42324' 32}                                 };
Magic Number,NServiceBus.Serializers.XML.Test,ListTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\ListTests.cs,Should_deserialize_list,The following statement contains a magic number: var expected = new MessageWithLists                                 {                                     Bools = new List<bool> {true' false}'                                     Chars = new List<char> {'a'' 'b'' 'c'' 'd'' 'e'' 'f'}'                                     Bytes = new List<byte> {byte.MinValue' byte.MaxValue' 11' 1' 1' 0}'                                     Ints = new List<int> {int.MinValue' int.MaxValue' 1' 2' 3' 4' 5' 6}'                                     Decimals =                                         new List<decimal> {decimal.MinValue' decimal.MaxValue' .2m' 4m' .5m' .4234m}'                                     Doubles =                                         new List<double>                                             {double.MinValue' double.MaxValue' .223d' 234d' .513d' .4212334d}'                                     Floats =                                         new List<float> {float.MinValue' float.MaxValue' .223f' 234f' .513f' .4212334f}'                                     Enums = new List<DateTimeStyles>                                                 {                                                     DateTimeStyles.AdjustToUniversal'                                                     DateTimeStyles.AllowLeadingWhite'                                                     DateTimeStyles.AllowTrailingWhite                                                 }'                                     Longs =                                         new List<long>                                             {long.MaxValue' long.MinValue' 34234' 234324' 45345345' 34534534565}'                                     SBytes = new List<sbyte> {sbyte.MaxValue' sbyte.MaxValue' 56' 13}'                                     Shorts = new List<short> {short.MinValue' short.MaxValue' 5231' 6123}'                                     Strings = new List<string> {"Key1"' "Value1"' "Key2"' "Value2"' "Key3"' "Value3"}'                                     UInts = new List<uint> {uint.MinValue' 23' uint.MaxValue' 34324}'                                     ULongs = new List<ulong> {ulong.MinValue' ulong.MaxValue' 34324234' 3243243245}'                                     UShorts = new List<ushort> {ushort.MinValue' ushort.MaxValue' 42324' 32}                                 };
Magic Number,NServiceBus.Serializers.XML.Test,ListTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\ListTests.cs,Should_deserialize_list,The following statement contains a magic number: var expected = new MessageWithLists                                 {                                     Bools = new List<bool> {true' false}'                                     Chars = new List<char> {'a'' 'b'' 'c'' 'd'' 'e'' 'f'}'                                     Bytes = new List<byte> {byte.MinValue' byte.MaxValue' 11' 1' 1' 0}'                                     Ints = new List<int> {int.MinValue' int.MaxValue' 1' 2' 3' 4' 5' 6}'                                     Decimals =                                         new List<decimal> {decimal.MinValue' decimal.MaxValue' .2m' 4m' .5m' .4234m}'                                     Doubles =                                         new List<double>                                             {double.MinValue' double.MaxValue' .223d' 234d' .513d' .4212334d}'                                     Floats =                                         new List<float> {float.MinValue' float.MaxValue' .223f' 234f' .513f' .4212334f}'                                     Enums = new List<DateTimeStyles>                                                 {                                                     DateTimeStyles.AdjustToUniversal'                                                     DateTimeStyles.AllowLeadingWhite'                                                     DateTimeStyles.AllowTrailingWhite                                                 }'                                     Longs =                                         new List<long>                                             {long.MaxValue' long.MinValue' 34234' 234324' 45345345' 34534534565}'                                     SBytes = new List<sbyte> {sbyte.MaxValue' sbyte.MaxValue' 56' 13}'                                     Shorts = new List<short> {short.MinValue' short.MaxValue' 5231' 6123}'                                     Strings = new List<string> {"Key1"' "Value1"' "Key2"' "Value2"' "Key3"' "Value3"}'                                     UInts = new List<uint> {uint.MinValue' 23' uint.MaxValue' 34324}'                                     ULongs = new List<ulong> {ulong.MinValue' ulong.MaxValue' 34324234' 3243243245}'                                     UShorts = new List<ushort> {ushort.MinValue' ushort.MaxValue' 42324' 32}                                 };
Magic Number,NServiceBus.Serializers.XML.Test,ListTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\ListTests.cs,Should_deserialize_list,The following statement contains a magic number: var expected = new MessageWithLists                                 {                                     Bools = new List<bool> {true' false}'                                     Chars = new List<char> {'a'' 'b'' 'c'' 'd'' 'e'' 'f'}'                                     Bytes = new List<byte> {byte.MinValue' byte.MaxValue' 11' 1' 1' 0}'                                     Ints = new List<int> {int.MinValue' int.MaxValue' 1' 2' 3' 4' 5' 6}'                                     Decimals =                                         new List<decimal> {decimal.MinValue' decimal.MaxValue' .2m' 4m' .5m' .4234m}'                                     Doubles =                                         new List<double>                                             {double.MinValue' double.MaxValue' .223d' 234d' .513d' .4212334d}'                                     Floats =                                         new List<float> {float.MinValue' float.MaxValue' .223f' 234f' .513f' .4212334f}'                                     Enums = new List<DateTimeStyles>                                                 {                                                     DateTimeStyles.AdjustToUniversal'                                                     DateTimeStyles.AllowLeadingWhite'                                                     DateTimeStyles.AllowTrailingWhite                                                 }'                                     Longs =                                         new List<long>                                             {long.MaxValue' long.MinValue' 34234' 234324' 45345345' 34534534565}'                                     SBytes = new List<sbyte> {sbyte.MaxValue' sbyte.MaxValue' 56' 13}'                                     Shorts = new List<short> {short.MinValue' short.MaxValue' 5231' 6123}'                                     Strings = new List<string> {"Key1"' "Value1"' "Key2"' "Value2"' "Key3"' "Value3"}'                                     UInts = new List<uint> {uint.MinValue' 23' uint.MaxValue' 34324}'                                     ULongs = new List<ulong> {ulong.MinValue' ulong.MaxValue' 34324234' 3243243245}'                                     UShorts = new List<ushort> {ushort.MinValue' ushort.MaxValue' 42324' 32}                                 };
Magic Number,NServiceBus.Serializers.XML.Test,ListTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\ListTests.cs,Should_deserialize_list,The following statement contains a magic number: var expected = new MessageWithLists                                 {                                     Bools = new List<bool> {true' false}'                                     Chars = new List<char> {'a'' 'b'' 'c'' 'd'' 'e'' 'f'}'                                     Bytes = new List<byte> {byte.MinValue' byte.MaxValue' 11' 1' 1' 0}'                                     Ints = new List<int> {int.MinValue' int.MaxValue' 1' 2' 3' 4' 5' 6}'                                     Decimals =                                         new List<decimal> {decimal.MinValue' decimal.MaxValue' .2m' 4m' .5m' .4234m}'                                     Doubles =                                         new List<double>                                             {double.MinValue' double.MaxValue' .223d' 234d' .513d' .4212334d}'                                     Floats =                                         new List<float> {float.MinValue' float.MaxValue' .223f' 234f' .513f' .4212334f}'                                     Enums = new List<DateTimeStyles>                                                 {                                                     DateTimeStyles.AdjustToUniversal'                                                     DateTimeStyles.AllowLeadingWhite'                                                     DateTimeStyles.AllowTrailingWhite                                                 }'                                     Longs =                                         new List<long>                                             {long.MaxValue' long.MinValue' 34234' 234324' 45345345' 34534534565}'                                     SBytes = new List<sbyte> {sbyte.MaxValue' sbyte.MaxValue' 56' 13}'                                     Shorts = new List<short> {short.MinValue' short.MaxValue' 5231' 6123}'                                     Strings = new List<string> {"Key1"' "Value1"' "Key2"' "Value2"' "Key3"' "Value3"}'                                     UInts = new List<uint> {uint.MinValue' 23' uint.MaxValue' 34324}'                                     ULongs = new List<ulong> {ulong.MinValue' ulong.MaxValue' 34324234' 3243243245}'                                     UShorts = new List<ushort> {ushort.MinValue' ushort.MaxValue' 42324' 32}                                 };
Magic Number,NServiceBus.Serializers.XML.Test,ListTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\ListTests.cs,Should_deserialize_list,The following statement contains a magic number: var expected = new MessageWithLists                                 {                                     Bools = new List<bool> {true' false}'                                     Chars = new List<char> {'a'' 'b'' 'c'' 'd'' 'e'' 'f'}'                                     Bytes = new List<byte> {byte.MinValue' byte.MaxValue' 11' 1' 1' 0}'                                     Ints = new List<int> {int.MinValue' int.MaxValue' 1' 2' 3' 4' 5' 6}'                                     Decimals =                                         new List<decimal> {decimal.MinValue' decimal.MaxValue' .2m' 4m' .5m' .4234m}'                                     Doubles =                                         new List<double>                                             {double.MinValue' double.MaxValue' .223d' 234d' .513d' .4212334d}'                                     Floats =                                         new List<float> {float.MinValue' float.MaxValue' .223f' 234f' .513f' .4212334f}'                                     Enums = new List<DateTimeStyles>                                                 {                                                     DateTimeStyles.AdjustToUniversal'                                                     DateTimeStyles.AllowLeadingWhite'                                                     DateTimeStyles.AllowTrailingWhite                                                 }'                                     Longs =                                         new List<long>                                             {long.MaxValue' long.MinValue' 34234' 234324' 45345345' 34534534565}'                                     SBytes = new List<sbyte> {sbyte.MaxValue' sbyte.MaxValue' 56' 13}'                                     Shorts = new List<short> {short.MinValue' short.MaxValue' 5231' 6123}'                                     Strings = new List<string> {"Key1"' "Value1"' "Key2"' "Value2"' "Key3"' "Value3"}'                                     UInts = new List<uint> {uint.MinValue' 23' uint.MaxValue' 34324}'                                     ULongs = new List<ulong> {ulong.MinValue' ulong.MaxValue' 34324234' 3243243245}'                                     UShorts = new List<ushort> {ushort.MinValue' ushort.MaxValue' 42324' 32}                                 };
Magic Number,NServiceBus.Serializers.XML.Test,ListTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\ListTests.cs,Should_deserialize_list,The following statement contains a magic number: var expected = new MessageWithLists                                 {                                     Bools = new List<bool> {true' false}'                                     Chars = new List<char> {'a'' 'b'' 'c'' 'd'' 'e'' 'f'}'                                     Bytes = new List<byte> {byte.MinValue' byte.MaxValue' 11' 1' 1' 0}'                                     Ints = new List<int> {int.MinValue' int.MaxValue' 1' 2' 3' 4' 5' 6}'                                     Decimals =                                         new List<decimal> {decimal.MinValue' decimal.MaxValue' .2m' 4m' .5m' .4234m}'                                     Doubles =                                         new List<double>                                             {double.MinValue' double.MaxValue' .223d' 234d' .513d' .4212334d}'                                     Floats =                                         new List<float> {float.MinValue' float.MaxValue' .223f' 234f' .513f' .4212334f}'                                     Enums = new List<DateTimeStyles>                                                 {                                                     DateTimeStyles.AdjustToUniversal'                                                     DateTimeStyles.AllowLeadingWhite'                                                     DateTimeStyles.AllowTrailingWhite                                                 }'                                     Longs =                                         new List<long>                                             {long.MaxValue' long.MinValue' 34234' 234324' 45345345' 34534534565}'                                     SBytes = new List<sbyte> {sbyte.MaxValue' sbyte.MaxValue' 56' 13}'                                     Shorts = new List<short> {short.MinValue' short.MaxValue' 5231' 6123}'                                     Strings = new List<string> {"Key1"' "Value1"' "Key2"' "Value2"' "Key3"' "Value3"}'                                     UInts = new List<uint> {uint.MinValue' 23' uint.MaxValue' 34324}'                                     ULongs = new List<ulong> {ulong.MinValue' ulong.MaxValue' 34324234' 3243243245}'                                     UShorts = new List<ushort> {ushort.MinValue' ushort.MaxValue' 42324' 32}                                 };
Magic Number,NServiceBus.Serializers.XML.Test,ListTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\ListTests.cs,Should_deserialize_list,The following statement contains a magic number: var expected = new MessageWithLists                                 {                                     Bools = new List<bool> {true' false}'                                     Chars = new List<char> {'a'' 'b'' 'c'' 'd'' 'e'' 'f'}'                                     Bytes = new List<byte> {byte.MinValue' byte.MaxValue' 11' 1' 1' 0}'                                     Ints = new List<int> {int.MinValue' int.MaxValue' 1' 2' 3' 4' 5' 6}'                                     Decimals =                                         new List<decimal> {decimal.MinValue' decimal.MaxValue' .2m' 4m' .5m' .4234m}'                                     Doubles =                                         new List<double>                                             {double.MinValue' double.MaxValue' .223d' 234d' .513d' .4212334d}'                                     Floats =                                         new List<float> {float.MinValue' float.MaxValue' .223f' 234f' .513f' .4212334f}'                                     Enums = new List<DateTimeStyles>                                                 {                                                     DateTimeStyles.AdjustToUniversal'                                                     DateTimeStyles.AllowLeadingWhite'                                                     DateTimeStyles.AllowTrailingWhite                                                 }'                                     Longs =                                         new List<long>                                             {long.MaxValue' long.MinValue' 34234' 234324' 45345345' 34534534565}'                                     SBytes = new List<sbyte> {sbyte.MaxValue' sbyte.MaxValue' 56' 13}'                                     Shorts = new List<short> {short.MinValue' short.MaxValue' 5231' 6123}'                                     Strings = new List<string> {"Key1"' "Value1"' "Key2"' "Value2"' "Key3"' "Value3"}'                                     UInts = new List<uint> {uint.MinValue' 23' uint.MaxValue' 34324}'                                     ULongs = new List<ulong> {ulong.MinValue' ulong.MaxValue' 34324234' 3243243245}'                                     UShorts = new List<ushort> {ushort.MinValue' ushort.MaxValue' 42324' 32}                                 };
Magic Number,NServiceBus.Serializers.XML.Test,ListTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\ListTests.cs,Should_deserialize_list,The following statement contains a magic number: var expected = new MessageWithLists                                 {                                     Bools = new List<bool> {true' false}'                                     Chars = new List<char> {'a'' 'b'' 'c'' 'd'' 'e'' 'f'}'                                     Bytes = new List<byte> {byte.MinValue' byte.MaxValue' 11' 1' 1' 0}'                                     Ints = new List<int> {int.MinValue' int.MaxValue' 1' 2' 3' 4' 5' 6}'                                     Decimals =                                         new List<decimal> {decimal.MinValue' decimal.MaxValue' .2m' 4m' .5m' .4234m}'                                     Doubles =                                         new List<double>                                             {double.MinValue' double.MaxValue' .223d' 234d' .513d' .4212334d}'                                     Floats =                                         new List<float> {float.MinValue' float.MaxValue' .223f' 234f' .513f' .4212334f}'                                     Enums = new List<DateTimeStyles>                                                 {                                                     DateTimeStyles.AdjustToUniversal'                                                     DateTimeStyles.AllowLeadingWhite'                                                     DateTimeStyles.AllowTrailingWhite                                                 }'                                     Longs =                                         new List<long>                                             {long.MaxValue' long.MinValue' 34234' 234324' 45345345' 34534534565}'                                     SBytes = new List<sbyte> {sbyte.MaxValue' sbyte.MaxValue' 56' 13}'                                     Shorts = new List<short> {short.MinValue' short.MaxValue' 5231' 6123}'                                     Strings = new List<string> {"Key1"' "Value1"' "Key2"' "Value2"' "Key3"' "Value3"}'                                     UInts = new List<uint> {uint.MinValue' 23' uint.MaxValue' 34324}'                                     ULongs = new List<ulong> {ulong.MinValue' ulong.MaxValue' 34324234' 3243243245}'                                     UShorts = new List<ushort> {ushort.MinValue' ushort.MaxValue' 42324' 32}                                 };
Magic Number,NServiceBus.Serializers.XML.Test,ListTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\ListTests.cs,Should_deserialize_list,The following statement contains a magic number: var expected = new MessageWithLists                                 {                                     Bools = new List<bool> {true' false}'                                     Chars = new List<char> {'a'' 'b'' 'c'' 'd'' 'e'' 'f'}'                                     Bytes = new List<byte> {byte.MinValue' byte.MaxValue' 11' 1' 1' 0}'                                     Ints = new List<int> {int.MinValue' int.MaxValue' 1' 2' 3' 4' 5' 6}'                                     Decimals =                                         new List<decimal> {decimal.MinValue' decimal.MaxValue' .2m' 4m' .5m' .4234m}'                                     Doubles =                                         new List<double>                                             {double.MinValue' double.MaxValue' .223d' 234d' .513d' .4212334d}'                                     Floats =                                         new List<float> {float.MinValue' float.MaxValue' .223f' 234f' .513f' .4212334f}'                                     Enums = new List<DateTimeStyles>                                                 {                                                     DateTimeStyles.AdjustToUniversal'                                                     DateTimeStyles.AllowLeadingWhite'                                                     DateTimeStyles.AllowTrailingWhite                                                 }'                                     Longs =                                         new List<long>                                             {long.MaxValue' long.MinValue' 34234' 234324' 45345345' 34534534565}'                                     SBytes = new List<sbyte> {sbyte.MaxValue' sbyte.MaxValue' 56' 13}'                                     Shorts = new List<short> {short.MinValue' short.MaxValue' 5231' 6123}'                                     Strings = new List<string> {"Key1"' "Value1"' "Key2"' "Value2"' "Key3"' "Value3"}'                                     UInts = new List<uint> {uint.MinValue' 23' uint.MaxValue' 34324}'                                     ULongs = new List<ulong> {ulong.MinValue' ulong.MaxValue' 34324234' 3243243245}'                                     UShorts = new List<ushort> {ushort.MinValue' ushort.MaxValue' 42324' 32}                                 };
Magic Number,NServiceBus.Serializers.XML.Test,ListTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\ListTests.cs,Should_deserialize_list,The following statement contains a magic number: var expected = new MessageWithLists                                 {                                     Bools = new List<bool> {true' false}'                                     Chars = new List<char> {'a'' 'b'' 'c'' 'd'' 'e'' 'f'}'                                     Bytes = new List<byte> {byte.MinValue' byte.MaxValue' 11' 1' 1' 0}'                                     Ints = new List<int> {int.MinValue' int.MaxValue' 1' 2' 3' 4' 5' 6}'                                     Decimals =                                         new List<decimal> {decimal.MinValue' decimal.MaxValue' .2m' 4m' .5m' .4234m}'                                     Doubles =                                         new List<double>                                             {double.MinValue' double.MaxValue' .223d' 234d' .513d' .4212334d}'                                     Floats =                                         new List<float> {float.MinValue' float.MaxValue' .223f' 234f' .513f' .4212334f}'                                     Enums = new List<DateTimeStyles>                                                 {                                                     DateTimeStyles.AdjustToUniversal'                                                     DateTimeStyles.AllowLeadingWhite'                                                     DateTimeStyles.AllowTrailingWhite                                                 }'                                     Longs =                                         new List<long>                                             {long.MaxValue' long.MinValue' 34234' 234324' 45345345' 34534534565}'                                     SBytes = new List<sbyte> {sbyte.MaxValue' sbyte.MaxValue' 56' 13}'                                     Shorts = new List<short> {short.MinValue' short.MaxValue' 5231' 6123}'                                     Strings = new List<string> {"Key1"' "Value1"' "Key2"' "Value2"' "Key3"' "Value3"}'                                     UInts = new List<uint> {uint.MinValue' 23' uint.MaxValue' 34324}'                                     ULongs = new List<ulong> {ulong.MinValue' ulong.MaxValue' 34324234' 3243243245}'                                     UShorts = new List<ushort> {ushort.MinValue' ushort.MaxValue' 42324' 32}                                 };
Magic Number,NServiceBus.Serializers.XML.Test,ListTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\ListTests.cs,Should_deserialize_list,The following statement contains a magic number: var expected = new MessageWithLists                                 {                                     Bools = new List<bool> {true' false}'                                     Chars = new List<char> {'a'' 'b'' 'c'' 'd'' 'e'' 'f'}'                                     Bytes = new List<byte> {byte.MinValue' byte.MaxValue' 11' 1' 1' 0}'                                     Ints = new List<int> {int.MinValue' int.MaxValue' 1' 2' 3' 4' 5' 6}'                                     Decimals =                                         new List<decimal> {decimal.MinValue' decimal.MaxValue' .2m' 4m' .5m' .4234m}'                                     Doubles =                                         new List<double>                                             {double.MinValue' double.MaxValue' .223d' 234d' .513d' .4212334d}'                                     Floats =                                         new List<float> {float.MinValue' float.MaxValue' .223f' 234f' .513f' .4212334f}'                                     Enums = new List<DateTimeStyles>                                                 {                                                     DateTimeStyles.AdjustToUniversal'                                                     DateTimeStyles.AllowLeadingWhite'                                                     DateTimeStyles.AllowTrailingWhite                                                 }'                                     Longs =                                         new List<long>                                             {long.MaxValue' long.MinValue' 34234' 234324' 45345345' 34534534565}'                                     SBytes = new List<sbyte> {sbyte.MaxValue' sbyte.MaxValue' 56' 13}'                                     Shorts = new List<short> {short.MinValue' short.MaxValue' 5231' 6123}'                                     Strings = new List<string> {"Key1"' "Value1"' "Key2"' "Value2"' "Key3"' "Value3"}'                                     UInts = new List<uint> {uint.MinValue' 23' uint.MaxValue' 34324}'                                     ULongs = new List<ulong> {ulong.MinValue' ulong.MaxValue' 34324234' 3243243245}'                                     UShorts = new List<ushort> {ushort.MinValue' ushort.MaxValue' 42324' 32}                                 };
Magic Number,NServiceBus.Serializers.XML.Test,ListTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\ListTests.cs,Should_deserialize_list,The following statement contains a magic number: var expected = new MessageWithLists                                 {                                     Bools = new List<bool> {true' false}'                                     Chars = new List<char> {'a'' 'b'' 'c'' 'd'' 'e'' 'f'}'                                     Bytes = new List<byte> {byte.MinValue' byte.MaxValue' 11' 1' 1' 0}'                                     Ints = new List<int> {int.MinValue' int.MaxValue' 1' 2' 3' 4' 5' 6}'                                     Decimals =                                         new List<decimal> {decimal.MinValue' decimal.MaxValue' .2m' 4m' .5m' .4234m}'                                     Doubles =                                         new List<double>                                             {double.MinValue' double.MaxValue' .223d' 234d' .513d' .4212334d}'                                     Floats =                                         new List<float> {float.MinValue' float.MaxValue' .223f' 234f' .513f' .4212334f}'                                     Enums = new List<DateTimeStyles>                                                 {                                                     DateTimeStyles.AdjustToUniversal'                                                     DateTimeStyles.AllowLeadingWhite'                                                     DateTimeStyles.AllowTrailingWhite                                                 }'                                     Longs =                                         new List<long>                                             {long.MaxValue' long.MinValue' 34234' 234324' 45345345' 34534534565}'                                     SBytes = new List<sbyte> {sbyte.MaxValue' sbyte.MaxValue' 56' 13}'                                     Shorts = new List<short> {short.MinValue' short.MaxValue' 5231' 6123}'                                     Strings = new List<string> {"Key1"' "Value1"' "Key2"' "Value2"' "Key3"' "Value3"}'                                     UInts = new List<uint> {uint.MinValue' 23' uint.MaxValue' 34324}'                                     ULongs = new List<ulong> {ulong.MinValue' ulong.MaxValue' 34324234' 3243243245}'                                     UShorts = new List<ushort> {ushort.MinValue' ushort.MaxValue' 42324' 32}                                 };
Magic Number,NServiceBus.Serializers.XML.Test,ListTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\ListTests.cs,Should_deserialize_list,The following statement contains a magic number: var expected = new MessageWithLists                                 {                                     Bools = new List<bool> {true' false}'                                     Chars = new List<char> {'a'' 'b'' 'c'' 'd'' 'e'' 'f'}'                                     Bytes = new List<byte> {byte.MinValue' byte.MaxValue' 11' 1' 1' 0}'                                     Ints = new List<int> {int.MinValue' int.MaxValue' 1' 2' 3' 4' 5' 6}'                                     Decimals =                                         new List<decimal> {decimal.MinValue' decimal.MaxValue' .2m' 4m' .5m' .4234m}'                                     Doubles =                                         new List<double>                                             {double.MinValue' double.MaxValue' .223d' 234d' .513d' .4212334d}'                                     Floats =                                         new List<float> {float.MinValue' float.MaxValue' .223f' 234f' .513f' .4212334f}'                                     Enums = new List<DateTimeStyles>                                                 {                                                     DateTimeStyles.AdjustToUniversal'                                                     DateTimeStyles.AllowLeadingWhite'                                                     DateTimeStyles.AllowTrailingWhite                                                 }'                                     Longs =                                         new List<long>                                             {long.MaxValue' long.MinValue' 34234' 234324' 45345345' 34534534565}'                                     SBytes = new List<sbyte> {sbyte.MaxValue' sbyte.MaxValue' 56' 13}'                                     Shorts = new List<short> {short.MinValue' short.MaxValue' 5231' 6123}'                                     Strings = new List<string> {"Key1"' "Value1"' "Key2"' "Value2"' "Key3"' "Value3"}'                                     UInts = new List<uint> {uint.MinValue' 23' uint.MaxValue' 34324}'                                     ULongs = new List<ulong> {ulong.MinValue' ulong.MaxValue' 34324234' 3243243245}'                                     UShorts = new List<ushort> {ushort.MinValue' ushort.MaxValue' 42324' 32}                                 };
Magic Number,NServiceBus.Serializers.XML.Test,ListTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\ListTests.cs,Should_deserialize_list,The following statement contains a magic number: var expected = new MessageWithLists                                 {                                     Bools = new List<bool> {true' false}'                                     Chars = new List<char> {'a'' 'b'' 'c'' 'd'' 'e'' 'f'}'                                     Bytes = new List<byte> {byte.MinValue' byte.MaxValue' 11' 1' 1' 0}'                                     Ints = new List<int> {int.MinValue' int.MaxValue' 1' 2' 3' 4' 5' 6}'                                     Decimals =                                         new List<decimal> {decimal.MinValue' decimal.MaxValue' .2m' 4m' .5m' .4234m}'                                     Doubles =                                         new List<double>                                             {double.MinValue' double.MaxValue' .223d' 234d' .513d' .4212334d}'                                     Floats =                                         new List<float> {float.MinValue' float.MaxValue' .223f' 234f' .513f' .4212334f}'                                     Enums = new List<DateTimeStyles>                                                 {                                                     DateTimeStyles.AdjustToUniversal'                                                     DateTimeStyles.AllowLeadingWhite'                                                     DateTimeStyles.AllowTrailingWhite                                                 }'                                     Longs =                                         new List<long>                                             {long.MaxValue' long.MinValue' 34234' 234324' 45345345' 34534534565}'                                     SBytes = new List<sbyte> {sbyte.MaxValue' sbyte.MaxValue' 56' 13}'                                     Shorts = new List<short> {short.MinValue' short.MaxValue' 5231' 6123}'                                     Strings = new List<string> {"Key1"' "Value1"' "Key2"' "Value2"' "Key3"' "Value3"}'                                     UInts = new List<uint> {uint.MinValue' 23' uint.MaxValue' 34324}'                                     ULongs = new List<ulong> {ulong.MinValue' ulong.MaxValue' 34324234' 3243243245}'                                     UShorts = new List<ushort> {ushort.MinValue' ushort.MaxValue' 42324' 32}                                 };
Magic Number,NServiceBus.Serializers.XML.Test,SerializerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\SerializerTests.cs,Deserialize_private_message_with_two_unrelated_interface_without_wrapping,The following statement contains a magic number: var msg = new CompositeMessage                  {                      IntValue = 42'                      StringValue = "Answer"                  };
Magic Number,NServiceBus.Serializers.XML.Test,SerializerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\SerializerTests.cs,Deserialize_private_message_with_two_unrelated_interface_without_wrapping,The following statement contains a magic number: Assert.AreEqual(42' b.IntValue);
Magic Number,NServiceBus.Serializers.XML.Test,SerializerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\SerializerTests.cs,Should_deserialize_a_single_message_with_typeName_passed_in_externally_even_when_not_initialized_with_type,The following statement contains a magic number: Assert.AreEqual(23.4' ((MessageWithDouble)msgArray[0]).Double);
Magic Number,NServiceBus.Serializers.XML.Test,SerializerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\SerializerTests.cs,Should_deserialize_a_batched_messages_with_typeName_passed_in_externally,The following statement contains a magic number: Assert.AreEqual(23.4' ((MessageWithDouble)msgArray[0]).Double);
Magic Number,NServiceBus.Serializers.XML.Test,SerializerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\SerializerTests.cs,Should_deserialize_a_batched_messages_with_typeName_passed_in_externally_even_when_not_initialized_with_type,The following statement contains a magic number: Assert.AreEqual(23.4' ((MessageWithDouble)msgArray[0]).Double);
Magic Number,NServiceBus.Serializers.XML.Test,SerializerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\SerializerTests.cs,Culture,The following statement contains a magic number: var val = 65.36;
Magic Number,NServiceBus.Serializers.XML.Test,SerializerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\SerializerTests.cs,TestInterfaces,The following statement contains a magic number: o.Age = 10;
Magic Number,NServiceBus.Serializers.XML.Test,SerializerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\SerializerTests.cs,TestInterfaces,The following statement contains a magic number: o.Int = 7;
Magic Number,NServiceBus.Serializers.XML.Test,SerializerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\SerializerTests.cs,TestInterfaces,The following statement contains a magic number: o.Risk = new Risk              {                  Percent = 0.15D'                  Annum = true'                  Accuracy = 0.314M              };
Magic Number,NServiceBus.Serializers.XML.Test,SerializerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\SerializerTests.cs,TestInterfaces,The following statement contains a magic number: o.Risk = new Risk              {                  Percent = 0.15D'                  Annum = true'                  Accuracy = 0.314M              };
Magic Number,NServiceBus.Serializers.XML.Test,SerializerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\SerializerTests.cs,TestInterfaces,The following statement contains a magic number: o.Data = new byte[]              {                  1'                  2'                  3'                  4'                  5'                  4'                  3'                  2'                  1              };
Magic Number,NServiceBus.Serializers.XML.Test,SerializerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\SerializerTests.cs,TestInterfaces,The following statement contains a magic number: o.Data = new byte[]              {                  1'                  2'                  3'                  4'                  5'                  4'                  3'                  2'                  1              };
Magic Number,NServiceBus.Serializers.XML.Test,SerializerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\SerializerTests.cs,TestInterfaces,The following statement contains a magic number: o.Data = new byte[]              {                  1'                  2'                  3'                  4'                  5'                  4'                  3'                  2'                  1              };
Magic Number,NServiceBus.Serializers.XML.Test,SerializerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\SerializerTests.cs,TestInterfaces,The following statement contains a magic number: o.Data = new byte[]              {                  1'                  2'                  3'                  4'                  5'                  4'                  3'                  2'                  1              };
Magic Number,NServiceBus.Serializers.XML.Test,SerializerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\SerializerTests.cs,TestInterfaces,The following statement contains a magic number: o.Data = new byte[]              {                  1'                  2'                  3'                  4'                  5'                  4'                  3'                  2'                  1              };
Magic Number,NServiceBus.Serializers.XML.Test,SerializerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\SerializerTests.cs,TestInterfaces,The following statement contains a magic number: o.Data = new byte[]              {                  1'                  2'                  3'                  4'                  5'                  4'                  3'                  2'                  1              };
Magic Number,NServiceBus.Serializers.XML.Test,SerializerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\SerializerTests.cs,TestInterfaces,The following statement contains a magic number: o.Data = new byte[]              {                  1'                  2'                  3'                  4'                  5'                  4'                  3'                  2'                  1              };
Magic Number,NServiceBus.Serializers.XML.Test,SerializerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\SerializerTests.cs,TestInterfaces,The following statement contains a magic number: o.Bars = new[]              {                  new Bar                  {                      Name = "Bar1"'                      Length = 1                  }'                  new Bar                  {                      Name = "BAr2"'                      Length = 5                  }              };
Magic Number,NServiceBus.Serializers.XML.Test,SerializerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\SerializerTests.cs,TestInterfaces,The following statement contains a magic number: o.NaturalNumbers = new HashSet<int>(new[]              {                  0'                  1'                  2'                  3'                  4'                  5'                  6'                  7'                  8'                  9              });
Magic Number,NServiceBus.Serializers.XML.Test,SerializerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\SerializerTests.cs,TestInterfaces,The following statement contains a magic number: o.NaturalNumbers = new HashSet<int>(new[]              {                  0'                  1'                  2'                  3'                  4'                  5'                  6'                  7'                  8'                  9              });
Magic Number,NServiceBus.Serializers.XML.Test,SerializerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\SerializerTests.cs,TestInterfaces,The following statement contains a magic number: o.NaturalNumbers = new HashSet<int>(new[]              {                  0'                  1'                  2'                  3'                  4'                  5'                  6'                  7'                  8'                  9              });
Magic Number,NServiceBus.Serializers.XML.Test,SerializerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\SerializerTests.cs,TestInterfaces,The following statement contains a magic number: o.NaturalNumbers = new HashSet<int>(new[]              {                  0'                  1'                  2'                  3'                  4'                  5'                  6'                  7'                  8'                  9              });
Magic Number,NServiceBus.Serializers.XML.Test,SerializerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\SerializerTests.cs,TestInterfaces,The following statement contains a magic number: o.NaturalNumbers = new HashSet<int>(new[]              {                  0'                  1'                  2'                  3'                  4'                  5'                  6'                  7'                  8'                  9              });
Magic Number,NServiceBus.Serializers.XML.Test,SerializerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\SerializerTests.cs,TestInterfaces,The following statement contains a magic number: o.NaturalNumbers = new HashSet<int>(new[]              {                  0'                  1'                  2'                  3'                  4'                  5'                  6'                  7'                  8'                  9              });
Magic Number,NServiceBus.Serializers.XML.Test,SerializerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\SerializerTests.cs,TestInterfaces,The following statement contains a magic number: o.NaturalNumbers = new HashSet<int>(new[]              {                  0'                  1'                  2'                  3'                  4'                  5'                  6'                  7'                  8'                  9              });
Magic Number,NServiceBus.Serializers.XML.Test,SerializerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\SerializerTests.cs,TestInterfaces,The following statement contains a magic number: o.NaturalNumbers = new HashSet<int>(new[]              {                  0'                  1'                  2'                  3'                  4'                  5'                  6'                  7'                  8'                  9              });
Magic Number,NServiceBus.Serializers.XML.Test,SerializerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\SerializerTests.cs,TestInterfaces,The following statement contains a magic number: o.Parent.Age = 10;
Magic Number,NServiceBus.Serializers.XML.Test,SerializerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\SerializerTests.cs,TestInterfaces,The following statement contains a magic number: o.Parent.Int = 7;
Magic Number,NServiceBus.Serializers.XML.Test,SerializerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\SerializerTests.cs,TestInterfaces,The following statement contains a magic number: o.Parent.Risk = new Risk              {                  Percent = 0.15D'                  Annum = true'                  Accuracy = 0.314M              };
Magic Number,NServiceBus.Serializers.XML.Test,SerializerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\SerializerTests.cs,TestInterfaces,The following statement contains a magic number: o.Parent.Risk = new Risk              {                  Percent = 0.15D'                  Annum = true'                  Accuracy = 0.314M              };
Magic Number,NServiceBus.Serializers.XML.Test,SerializerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\SerializerTests.cs,TestInterfaces,The following statement contains a magic number: firstMessage.Age = 10;
Magic Number,NServiceBus.Serializers.XML.Test,SerializerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\SerializerTests.cs,TestInterfaces,The following statement contains a magic number: firstMessage.Int = 7;
Magic Number,NServiceBus.Serializers.XML.Test,SerializerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\SerializerTests.cs,TestInterfaces,The following statement contains a magic number: firstMessage.Risk = new Risk                  {                      Percent = 0.15D'                      Annum = true'                      Accuracy = 0.314M                  };
Magic Number,NServiceBus.Serializers.XML.Test,SerializerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\SerializerTests.cs,TestInterfaces,The following statement contains a magic number: firstMessage.Risk = new Risk                  {                      Percent = 0.15D'                      Annum = true'                      Accuracy = 0.314M                  };
Magic Number,NServiceBus.Serializers.XML.Test,SerializerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\SerializerTests.cs,CreateSecondSerializableMessage,The following statement contains a magic number: var secondMessage = new SecondSerializableMessage              {                  Id = Guid.NewGuid()'                  Age = 10'                  Address = Guid.NewGuid().ToString()'                  Int = 7'                  Name = "udi"'                  Risk = new Risk                  {                      Percent = 0.15D'                      Annum = true'                      Accuracy = 0.314M                  }'                  Some = SomeEnum.B'                  Start = DateTime.Now'                  Duration = TimeSpan.Parse("-01:15:27.123")'                  Offset = DateTimeOffset.Now'                  Parent = new FirstSerializableMessage                  {                      Age = 10'                      Address = Guid.NewGuid().ToString()'                      Int = 7'                      Name = "-1"'                      Risk = new Risk                      {                          Percent = 0.15D'                          Annum = true'                          Accuracy = 0.314M                      }                  }'                  Names = new List<FirstSerializableMessage>()              };
Magic Number,NServiceBus.Serializers.XML.Test,SerializerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\SerializerTests.cs,CreateSecondSerializableMessage,The following statement contains a magic number: var secondMessage = new SecondSerializableMessage              {                  Id = Guid.NewGuid()'                  Age = 10'                  Address = Guid.NewGuid().ToString()'                  Int = 7'                  Name = "udi"'                  Risk = new Risk                  {                      Percent = 0.15D'                      Annum = true'                      Accuracy = 0.314M                  }'                  Some = SomeEnum.B'                  Start = DateTime.Now'                  Duration = TimeSpan.Parse("-01:15:27.123")'                  Offset = DateTimeOffset.Now'                  Parent = new FirstSerializableMessage                  {                      Age = 10'                      Address = Guid.NewGuid().ToString()'                      Int = 7'                      Name = "-1"'                      Risk = new Risk                      {                          Percent = 0.15D'                          Annum = true'                          Accuracy = 0.314M                      }                  }'                  Names = new List<FirstSerializableMessage>()              };
Magic Number,NServiceBus.Serializers.XML.Test,SerializerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\SerializerTests.cs,CreateSecondSerializableMessage,The following statement contains a magic number: var secondMessage = new SecondSerializableMessage              {                  Id = Guid.NewGuid()'                  Age = 10'                  Address = Guid.NewGuid().ToString()'                  Int = 7'                  Name = "udi"'                  Risk = new Risk                  {                      Percent = 0.15D'                      Annum = true'                      Accuracy = 0.314M                  }'                  Some = SomeEnum.B'                  Start = DateTime.Now'                  Duration = TimeSpan.Parse("-01:15:27.123")'                  Offset = DateTimeOffset.Now'                  Parent = new FirstSerializableMessage                  {                      Age = 10'                      Address = Guid.NewGuid().ToString()'                      Int = 7'                      Name = "-1"'                      Risk = new Risk                      {                          Percent = 0.15D'                          Annum = true'                          Accuracy = 0.314M                      }                  }'                  Names = new List<FirstSerializableMessage>()              };
Magic Number,NServiceBus.Serializers.XML.Test,SerializerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\SerializerTests.cs,CreateSecondSerializableMessage,The following statement contains a magic number: var secondMessage = new SecondSerializableMessage              {                  Id = Guid.NewGuid()'                  Age = 10'                  Address = Guid.NewGuid().ToString()'                  Int = 7'                  Name = "udi"'                  Risk = new Risk                  {                      Percent = 0.15D'                      Annum = true'                      Accuracy = 0.314M                  }'                  Some = SomeEnum.B'                  Start = DateTime.Now'                  Duration = TimeSpan.Parse("-01:15:27.123")'                  Offset = DateTimeOffset.Now'                  Parent = new FirstSerializableMessage                  {                      Age = 10'                      Address = Guid.NewGuid().ToString()'                      Int = 7'                      Name = "-1"'                      Risk = new Risk                      {                          Percent = 0.15D'                          Annum = true'                          Accuracy = 0.314M                      }                  }'                  Names = new List<FirstSerializableMessage>()              };
Magic Number,NServiceBus.Serializers.XML.Test,SerializerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\SerializerTests.cs,CreateSecondSerializableMessage,The following statement contains a magic number: var secondMessage = new SecondSerializableMessage              {                  Id = Guid.NewGuid()'                  Age = 10'                  Address = Guid.NewGuid().ToString()'                  Int = 7'                  Name = "udi"'                  Risk = new Risk                  {                      Percent = 0.15D'                      Annum = true'                      Accuracy = 0.314M                  }'                  Some = SomeEnum.B'                  Start = DateTime.Now'                  Duration = TimeSpan.Parse("-01:15:27.123")'                  Offset = DateTimeOffset.Now'                  Parent = new FirstSerializableMessage                  {                      Age = 10'                      Address = Guid.NewGuid().ToString()'                      Int = 7'                      Name = "-1"'                      Risk = new Risk                      {                          Percent = 0.15D'                          Annum = true'                          Accuracy = 0.314M                      }                  }'                  Names = new List<FirstSerializableMessage>()              };
Magic Number,NServiceBus.Serializers.XML.Test,SerializerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\SerializerTests.cs,CreateSecondSerializableMessage,The following statement contains a magic number: var secondMessage = new SecondSerializableMessage              {                  Id = Guid.NewGuid()'                  Age = 10'                  Address = Guid.NewGuid().ToString()'                  Int = 7'                  Name = "udi"'                  Risk = new Risk                  {                      Percent = 0.15D'                      Annum = true'                      Accuracy = 0.314M                  }'                  Some = SomeEnum.B'                  Start = DateTime.Now'                  Duration = TimeSpan.Parse("-01:15:27.123")'                  Offset = DateTimeOffset.Now'                  Parent = new FirstSerializableMessage                  {                      Age = 10'                      Address = Guid.NewGuid().ToString()'                      Int = 7'                      Name = "-1"'                      Risk = new Risk                      {                          Percent = 0.15D'                          Annum = true'                          Accuracy = 0.314M                      }                  }'                  Names = new List<FirstSerializableMessage>()              };
Magic Number,NServiceBus.Serializers.XML.Test,SerializerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\SerializerTests.cs,CreateSecondSerializableMessage,The following statement contains a magic number: var secondMessage = new SecondSerializableMessage              {                  Id = Guid.NewGuid()'                  Age = 10'                  Address = Guid.NewGuid().ToString()'                  Int = 7'                  Name = "udi"'                  Risk = new Risk                  {                      Percent = 0.15D'                      Annum = true'                      Accuracy = 0.314M                  }'                  Some = SomeEnum.B'                  Start = DateTime.Now'                  Duration = TimeSpan.Parse("-01:15:27.123")'                  Offset = DateTimeOffset.Now'                  Parent = new FirstSerializableMessage                  {                      Age = 10'                      Address = Guid.NewGuid().ToString()'                      Int = 7'                      Name = "-1"'                      Risk = new Risk                      {                          Percent = 0.15D'                          Annum = true'                          Accuracy = 0.314M                      }                  }'                  Names = new List<FirstSerializableMessage>()              };
Magic Number,NServiceBus.Serializers.XML.Test,SerializerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\SerializerTests.cs,CreateSecondSerializableMessage,The following statement contains a magic number: var secondMessage = new SecondSerializableMessage              {                  Id = Guid.NewGuid()'                  Age = 10'                  Address = Guid.NewGuid().ToString()'                  Int = 7'                  Name = "udi"'                  Risk = new Risk                  {                      Percent = 0.15D'                      Annum = true'                      Accuracy = 0.314M                  }'                  Some = SomeEnum.B'                  Start = DateTime.Now'                  Duration = TimeSpan.Parse("-01:15:27.123")'                  Offset = DateTimeOffset.Now'                  Parent = new FirstSerializableMessage                  {                      Age = 10'                      Address = Guid.NewGuid().ToString()'                      Int = 7'                      Name = "-1"'                      Risk = new Risk                      {                          Percent = 0.15D'                          Annum = true'                          Accuracy = 0.314M                      }                  }'                  Names = new List<FirstSerializableMessage>()              };
Magic Number,NServiceBus.Serializers.XML.Test,SerializerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\SerializerTests.cs,CreateSecondSerializableMessage,The following statement contains a magic number: firstMessage.Age = 10;
Magic Number,NServiceBus.Serializers.XML.Test,SerializerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\SerializerTests.cs,CreateSecondSerializableMessage,The following statement contains a magic number: firstMessage.Int = 7;
Magic Number,NServiceBus.Serializers.XML.Test,SerializerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\SerializerTests.cs,CreateSecondSerializableMessage,The following statement contains a magic number: firstMessage.Risk = new Risk                  {                      Percent = 0.15D'                      Annum = true'                      Accuracy = 0.314M                  };
Magic Number,NServiceBus.Serializers.XML.Test,SerializerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\SerializerTests.cs,CreateSecondSerializableMessage,The following statement contains a magic number: firstMessage.Risk = new Risk                  {                      Percent = 0.15D'                      Annum = true'                      Accuracy = 0.314M                  };
Magic Number,NServiceBus.Serializers.XML.Test,SerializerTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\SerializerTests.cs,Should_be_able_to_deserialize_many_messages_of_same_type,The following statement contains a magic number: Assert.AreEqual(3' msgArray.Length);
Magic Number,NServiceBus.Serializers.XML.Test,SerializingArrayTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\SerializingArrayTests.cs,CanSerializeAndBack,The following statement contains a magic number: var message = new MessageWithArray(Guid.NewGuid()' new[] { 1234' 5323 });
Magic Number,NServiceBus.Serializers.XML.Test,SerializingArrayTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\SerializingArrayTests.cs,CanSerializeAndBack,The following statement contains a magic number: var message = new MessageWithArray(Guid.NewGuid()' new[] { 1234' 5323 });
Magic Number,NServiceBus.Serializers.XML.Test,SerializingArrayTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\SerializingArrayTests.cs,CanSerializeAndBack,The following statement contains a magic number: Assert.That(result.SomeInts' Has.Length.EqualTo(2));
Magic Number,NServiceBus.Serializers.XML.Test,SerializingArrayTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\SerializingArrayTests.cs,CanSerializeAndBack,The following statement contains a magic number: Assert.AreEqual(1234' result.SomeInts[0]);
Magic Number,NServiceBus.Serializers.XML.Test,SerializingArrayTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\SerializingArrayTests.cs,CanSerializeAndBack,The following statement contains a magic number: Assert.AreEqual(5323' result.SomeInts[1]);
Magic Number,NServiceBus.Serializers.XML.Test,SerializingArrayTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\SerializingArrayTests.cs,CanSerializeMessageWithNullableArray,The following statement contains a magic number: var message = new MessageWithNullableArray              {                  SomeInts = new int?[] { null' 1' null' 3' null }              };
Magic Number,NServiceBus.Serializers.XML.Test,SerializingArrayTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\SerializingArrayTests.cs,CanSerializeMessageWithNullableArray,The following statement contains a magic number: Assert.IsNull(result.SomeInts[2]);
Magic Number,NServiceBus.Serializers.XML.Test,SerializingArrayTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\SerializingArrayTests.cs,CanSerializeMessageWithNullableArray,The following statement contains a magic number: Assert.AreEqual(3' result.SomeInts[3]);
Magic Number,NServiceBus.Serializers.XML.Test,SerializingArrayTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\SerializingArrayTests.cs,CanSerializeMessageWithNullableArray,The following statement contains a magic number: Assert.AreEqual(3' result.SomeInts[3]);
Magic Number,NServiceBus.Serializers.XML.Test,SerializingArrayTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\SerializingArrayTests.cs,CanSerializeMessageWithNullableArray,The following statement contains a magic number: Assert.IsNull(result.SomeInts[4]);
Magic Number,NServiceBus.Serializers.XML.Test,SerializingEnumerableTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\SerializingEnumerableTests.cs,CanSerializeNullElements,The following statement contains a magic number: Assert.AreEqual(4' result.SomeStrings.Count());
Magic Number,NServiceBus.Serializers.XML.Test,SerializingNullableTypesTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\SerializingNullableTypesTests.cs,NullableTypeSerializeToValueWhenNotNull,The following statement contains a magic number: var message = new MessageWithNullable              {                  FirstName = "FirstName"'                  LastName = "LastName"'                  EmailAddress = "EmailAddress"'                  BirthDate = new DateTime(1950' 04' 25)              };
Magic Number,NServiceBus.Serializers.XML.Test,SerializingNullableTypesTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\SerializingNullableTypesTests.cs,NullableTypeSerializeToValueWhenNotNull,The following statement contains a magic number: var message = new MessageWithNullable              {                  FirstName = "FirstName"'                  LastName = "LastName"'                  EmailAddress = "EmailAddress"'                  BirthDate = new DateTime(1950' 04' 25)              };
Magic Number,NServiceBus.Serializers.XML.Test,SerializingNullableTypesTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\SerializingNullableTypesTests.cs,NullableTypeSerializeToValueWhenNotNull,The following statement contains a magic number: var message = new MessageWithNullable              {                  FirstName = "FirstName"'                  LastName = "LastName"'                  EmailAddress = "EmailAddress"'                  BirthDate = new DateTime(1950' 04' 25)              };
Magic Number,NServiceBus.Core.Tests.Serializers.XML,SerializingGenericTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\SerializingGenericTests.cs,CanSerializeAndBack,The following statement contains a magic number: var message = new GenericMessage<int' string>(Guid.NewGuid()' 1234' "Lorem ipsum");
Magic Number,NServiceBus.Core.Tests.Serializers.XML,SerializingGenericTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\SerializingGenericTests.cs,CanSerializeAndBack,The following statement contains a magic number: Assert.AreEqual(1234' result.Data1);
Magic Number,NServiceBus.Core.Tests.Serializers.XML,Using_Infer_Type_With_Non_Nested_Class,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\Using_Infer_Type_With_Non_Nested_Class.cs,Execute,The following statement contains a magic number: Assert.IsInstanceOf<SecondMessage>(messageDeserialized[2]);
Magic Number,NServiceBus.Core.Tests.Serializers.XML,Using_Infer_Type_With_Non_Nested_Class,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\Using_Infer_Type_With_Non_Nested_Class.cs,Execute,The following statement contains a magic number: Assert.IsInstanceOf<SecondMessage>(messageDeserialized[3]);
Magic Number,NServiceBus.Core.Tests.Serializers.XML,XmlSerializerCacheTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Serializers\XML\XmlSerializerCacheTests.cs,InitType_ShouldHandleConcurrentInitializations,The following statement contains a magic number: Parallel.For(0' 10' _ =>              {                  cache.InitType(typeof(SimpleType));                    var members = cache.typeMembers[typeof(SimpleType)];                  Assert.NotNull(members);                  Assert.AreEqual(nameof(SimpleType.SimpleField)' members.Item1.Single().Name);                  Assert.AreEqual(nameof(SimpleType.SimpleProperty)' members.Item2.Single().Name);              });
Magic Number,NServiceBus.Core.Tests.Transports,PushRuntimeSettingsTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Transports\PushRuntimeSettingsTests.cs,Should_default_concurrency_to_num_processors,The following statement contains a magic number: Assert.AreEqual(Math.Max(2' Environment.ProcessorCount)' new PushRuntimeSettings().MaxConcurrency);
Magic Number,NServiceBus.Core.Tests.Transports,PushRuntimeSettingsTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Transports\PushRuntimeSettingsTests.cs,Should_honor_explicit_concurrency_settings,The following statement contains a magic number: Assert.AreEqual(10' new PushRuntimeSettings(10).MaxConcurrency);
Magic Number,NServiceBus.Core.Tests.Transports,PushRuntimeSettingsTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Transports\PushRuntimeSettingsTests.cs,Should_honor_explicit_concurrency_settings,The following statement contains a magic number: Assert.AreEqual(10' new PushRuntimeSettings(10).MaxConcurrency);
Magic Number,NServiceBus.Core.Tests.Transports.Learning,AsyncFileTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Transports\Learning\AsyncFileTests.cs,When_file_content_larger_than_buffer_size,The following statement contains a magic number: var originalContent = string.Join(""' Enumerable.Repeat("a#~×ψؾࢯ‽%1"' 2000));
Magic Number,NServiceBus.Core.Tests.Transports.Learning,LearningTransportDispatcherTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Transports\Learning\LearningTransportDispatcherTests.cs,Should_throw_for_size_above_threshold,The following statement contains a magic number: var dispatcher = new LearningTransportDispatcher(path' 64);
Magic Number,NServiceBus.Unicast.Tests,HandlerInvocationCachePerformanceTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Unicast\HandlerInvocationCache.cs,RunNew,The following statement contains a magic number: i < 100000
Magic Number,NServiceBus.Unicast.Tests,When_getting_message_definition,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Unicast\Messages\DefaultMessageRegistryTests.cs,Should_return_the_correct_parent_hierarchy,The following statement contains a magic number: Assert.AreEqual(5' messageMetadata.MessageHierarchy.Count());
Magic Number,NServiceBus.Unicast.Tests,When_getting_message_definition,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Unicast\Messages\DefaultMessageRegistryTests.cs,Should_return_the_correct_parent_hierarchy,The following statement contains a magic number: Assert.AreEqual(typeof(ConcreteParent1)' messageMetadata.MessageHierarchy.ToList()[2]);
Magic Number,NServiceBus.Unicast.Tests,When_getting_message_definition,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Unicast\Messages\DefaultMessageRegistryTests.cs,Should_return_the_correct_parent_hierarchy,The following statement contains a magic number: Assert.AreEqual(typeof(InterfaceParent1Base)' messageMetadata.MessageHierarchy.ToList()[3]);
Magic Number,NServiceBus.Unicast.Tests,When_getting_message_definition,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Unicast\Messages\DefaultMessageRegistryTests.cs,Should_return_the_correct_parent_hierarchy,The following statement contains a magic number: Assert.AreEqual(typeof(ConcreteParentBase)' messageMetadata.MessageHierarchy.ToList()[4]);
Magic Number,NServiceBus.Unicast.Tests,MessageTypeTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Unicast\MessageTypeTests.cs,Should_parse_version_strings,The following statement contains a magic number: Assert.AreEqual(messageType.Version' new Version(1' 2' 3' 4));
Magic Number,NServiceBus.Unicast.Tests,MessageTypeTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Unicast\MessageTypeTests.cs,Should_parse_version_strings,The following statement contains a magic number: Assert.AreEqual(messageType.Version' new Version(1' 2' 3' 4));
Magic Number,NServiceBus.Unicast.Tests,MessageTypeTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Unicast\MessageTypeTests.cs,Should_parse_version_strings,The following statement contains a magic number: Assert.AreEqual(messageType.Version' new Version(1' 2' 3' 4));
Magic Number,NServiceBus.Unicast.Tests,UnitOfWorkBehaviorTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\UnitOfWork\UnitOfWorkBehaviorTests.cs,Should_invoke_ends_in_reverse_order_of_the_begins,The following statement contains a magic number: Assert.AreEqual("second"' order[2]);
Magic Number,NServiceBus.Unicast.Tests,UnitOfWorkBehaviorTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\UnitOfWork\UnitOfWorkBehaviorTests.cs,Should_invoke_ends_in_reverse_order_of_the_begins,The following statement contains a magic number: Assert.AreEqual("first"' order[3]);
Magic Number,NServiceBus.Unicast.Tests,UnitOfWorkBehaviorTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\UnitOfWork\UnitOfWorkBehaviorTests.cs,Verify_order,The following statement contains a magic number: Assert.AreEqual(2' unitOfWork2.BeginCallIndex);
Magic Number,NServiceBus.Unicast.Tests,UnitOfWorkBehaviorTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\UnitOfWork\UnitOfWorkBehaviorTests.cs,Verify_order,The following statement contains a magic number: Assert.AreEqual(3' unitOfWork3.BeginCallIndex);
Magic Number,NServiceBus.Unicast.Tests,UnitOfWorkBehaviorTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\UnitOfWork\UnitOfWorkBehaviorTests.cs,Verify_order,The following statement contains a magic number: Assert.AreEqual(3' unitOfWork1.EndCallIndex);
Magic Number,NServiceBus.Unicast.Tests,UnitOfWorkBehaviorTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\UnitOfWork\UnitOfWorkBehaviorTests.cs,Verify_order,The following statement contains a magic number: Assert.AreEqual(2' unitOfWork2.EndCallIndex);
Magic Number,NServiceBus.Core.Tests.Utils,ExceptionHeaderHelperTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Utils\ExceptionHeaderHelperTests.cs,ExceptionMessageIsTruncated,The following statement contains a magic number: var exception = new Exception(new string('x'' (int)Math.Pow(2' 15)));
Magic Number,NServiceBus.Core.Tests.Utils,ExceptionHeaderHelperTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Utils\ExceptionHeaderHelperTests.cs,ExceptionMessageIsTruncated,The following statement contains a magic number: var exception = new Exception(new string('x'' (int)Math.Pow(2' 15)));
Magic Number,NServiceBus.Core.Tests.Utils,ExceptionHeaderHelperTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Utils\ExceptionHeaderHelperTests.cs,ExceptionMessageIsTruncated,The following statement contains a magic number: Assert.AreEqual((int)Math.Pow(2' 14)' dictionary["NServiceBus.ExceptionInfo.Message"].Length);
Magic Number,NServiceBus.Core.Tests.Utils,ExceptionHeaderHelperTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.Core.Tests\Utils\ExceptionHeaderHelperTests.cs,ExceptionMessageIsTruncated,The following statement contains a magic number: Assert.AreEqual((int)Math.Pow(2' 14)' dictionary["NServiceBus.ExceptionInfo.Message"].Length);
