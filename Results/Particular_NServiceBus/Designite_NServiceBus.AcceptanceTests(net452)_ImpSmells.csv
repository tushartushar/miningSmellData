Implementation smell,Namespace,Class,File,Method,Description
Long Identifier,NServiceBus.AcceptanceTests.Core.Diagnostics,When_message_is_faulted,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\Diagnostics\When_message_is_faulted.cs,Should_contain_processing_stats_headers,The length of the parameter timeSentWhenFailedMessageWasSentToTheErrorQueue is 47.
Long Identifier,NServiceBus.AcceptanceTests.Core.SelfVerification,EndpointNameEnforcementTests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\SelfVerification\EndpointNameEnforcementTests.cs,,The length of the parameter endpointConfigurationBuilderType is 32.
Long Identifier,NServiceBus.AcceptanceTests.Core.SubscriptionMigration,AcceptanceTestingTransportServer,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\SubscriptionMigration\AcceptanceTestingTransportServer.cs,GetConfiguration,The length of the parameter configurationBuilderCustomization is 33.
Long Identifier,NServiceBus.AcceptanceTests.EndpointTemplates,ConfigureExtensions,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\EndpointTemplates\ConfigureExtensions.cs,DefineTransport,The length of the parameter endpointCustomizationConfiguration is 34.
Long Identifier,NServiceBus.AcceptanceTests.EndpointTemplates,ConfigureExtensions,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\EndpointTemplates\ConfigureExtensions.cs,DefineTransport,The length of the parameter endpointCustomizationConfiguration is 34.
Long Identifier,NServiceBus.AcceptanceTests.EndpointTemplates,ConfigureExtensions,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\EndpointTemplates\ConfigureExtensions.cs,DefinePersistence,The length of the parameter endpointCustomizationConfiguration is 34.
Long Identifier,NServiceBus.AcceptanceTests.EndpointTemplates,ConfigureExtensions,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\EndpointTemplates\ConfigureExtensions.cs,DefinePersistence,The length of the parameter endpointCustomizationConfiguration is 34.
Long Identifier,NServiceBus.AcceptanceTests.EndpointTemplates,DefaultPublisher,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\EndpointTemplates\DefaultPublisher.cs,GetConfiguration,The length of the parameter configurationBuilderCustomization is 33.
Long Identifier,NServiceBus.AcceptanceTests.EndpointTemplates,DefaultServer,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\EndpointTemplates\DefaultServer.cs,GetConfiguration,The length of the parameter endpointCustomizationConfiguration is 34.
Long Identifier,NServiceBus.AcceptanceTests.EndpointTemplates,DefaultServer,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\EndpointTemplates\DefaultServer.cs,GetConfiguration,The length of the parameter configurationBuilderCustomization is 33.
Long Identifier,NServiceBus.AcceptanceTests.EndpointTemplates,ExternallyManagedContainerServer,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\EndpointTemplates\ExternallyManagedContainerServer.cs,GetConfiguration,The length of the parameter configurationBuilderCustomization is 33.
Long Identifier,NServiceBus.AcceptanceTests.EndpointTemplates,ServerWithNoDefaultPersistenceDefinitions,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\EndpointTemplates\ServerWithNoDefaultPersistenceDefinitions.cs,GetConfiguration,The length of the parameter configurationBuilderCustomization is 33.
Long Identifier,NServiceBus.AcceptanceTests.Recoverability,When_delayed_retries_with_immediate_retries_disabled,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Recoverability\When_delayed_retries_with_immediate_retries_disabled.cs,,The length of the parameter ConfiguredNumberOfDelayedRetries is 32.
Long Statement,NServiceBus.AcceptanceTests.Audit,When_a_message_is_audited,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Audit\When_a_message_is_audited.cs,Should_preserve_the_original_body,The length of the statement  "            Assert.AreEqual(context.OriginalBodyChecksum' context.AuditChecksum' "The body of the message sent to audit should be the same as the original message coming off the queue"); " is 174.
Long Statement,NServiceBus.AcceptanceTests.Core.AutomaticSubscriptions,When_excluding_event_type_from_autosubscribe,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\AutomaticSubscriptions\When_excluding_event_type_from_autosubscribe.cs,Should_not_subscribe_excluded_events,The length of the statement  "            CollectionAssert.IsEmpty(ctx.Logs.Where(l => l.LoggerName == typeof(AutoSubscribe).FullName && l.Level == LogLevel.Error)); " is 123.
Long Statement,NServiceBus.AcceptanceTests.Core.AutomaticSubscriptions,When_starting_an_endpoint_with_autosubscribe,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\AutomaticSubscriptions\When_starting_an_endpoint_with_autosubscribe.cs,Should_autosubscribe_to_relevant_messagetypes,The length of the statement  "            Assert.False(context.EventsSubscribedTo.Contains(typeof(MyEventWithNoRouting))' "Events without routing should not be auto subscribed"); " is 136.
Long Statement,NServiceBus.AcceptanceTests.Core.AutomaticSubscriptions,When_starting_an_endpoint_with_autosubscribe,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\AutomaticSubscriptions\When_starting_an_endpoint_with_autosubscribe.cs,Should_autosubscribe_to_relevant_messagetypes,The length of the statement  "            Assert.False(context.EventsSubscribedTo.Contains(typeof(MyEventWithNoHandler))' "Events without handlers should not be auto subscribed"); " is 137.
Long Statement,NServiceBus.AcceptanceTests.Core.AutomaticSubscriptions,When_starting_an_endpoint_with_autosubscribe,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\AutomaticSubscriptions\When_starting_an_endpoint_with_autosubscribe.cs,Should_autosubscribe_to_relevant_messagetypes,The length of the statement  "            Assert.False(context.EventsSubscribedTo.Contains(typeof(MyMessage))' "Plain messages should not be auto subscribed by default"); " is 128.
Long Statement,NServiceBus.AcceptanceTests.Core.AutomaticSubscriptions,When_starting_an_endpoint_with_a_saga,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\AutomaticSubscriptions\When_starting_an_endpoint_with_a_saga.cs,Should_autoSubscribe_the_saga_messageHandler_by_default,The length of the statement  "            Assert.True(context.EventsSubscribedTo.Contains(typeof(MyEvent))' "Events only handled by sagas should be auto subscribed"); " is 124.
Long Statement,NServiceBus.AcceptanceTests.Core.AutomaticSubscriptions,When_starting_an_endpoint_with_a_saga,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\AutomaticSubscriptions\When_starting_an_endpoint_with_a_saga.cs,Should_autoSubscribe_the_saga_messageHandler_by_default,The length of the statement  "            Assert.True(context.EventsSubscribedTo.Contains(typeof(MyEventBase))' "Sagas should be auto subscribed even when handling a base class event"); " is 143.
Long Statement,NServiceBus.AcceptanceTests.Core.Causation,When_a_message_is_sent,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\Causation\When_a_message_is_sent.cs,Should_flow_causation_headers,The length of the statement  "            Assert.AreEqual(context.FirstConversationId' context.ConversationIdReceived' "Conversation id should flow to outgoing messages"); " is 129.
Long Statement,NServiceBus.AcceptanceTests.Core.Causation,When_a_message_is_sent,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\Causation\When_a_message_is_sent.cs,Should_flow_causation_headers,The length of the statement  "            Assert.AreEqual(context.MessageIdOfFirstMessage' context.RelatedToReceived' "RelatedToId on outgoing messages should be set to the message id of the message causing it to be sent"); " is 181.
Long Statement,NServiceBus.AcceptanceTests.Core.Conventions,When_receiving_unobtrusive_message_without_handler,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\Conventions\When_receiving_unobtrusive_message_without_handler.cs,Message_should_be_moved_to_error_because_handler_not_found,The length of the statement  "            Assert.True(context.Logs.Any(l => l.Level == LogLevel.Error && l.Message.Contains($"No handlers could be found for message type: { typeof(MyCommand).FullName}"))' "No handlers could be found was not logged."); " is 209.
Long Statement,NServiceBus.AcceptanceTests.Core.Conventions,When_receiving_unobtrusive_message_without_handler,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\Conventions\When_receiving_unobtrusive_message_without_handler.cs,Message_should_be_moved_to_error_because_handler_not_found,The length of the statement  "            Assert.False(context.Logs.Any(l => l.Level == LogLevel.Warn && l.Message.Contains($"Message header '{ typeof(MyCommand).FullName }' was mapped to type '{ typeof(MyCommand).FullName }' but that type was not found in the message registry' ensure the same message registration conventions are used in all endpoints' especially if using unobtrusive mode."))' "Message type could not be mapped."); " is 392.
Long Statement,NServiceBus.AcceptanceTests.Core.Conventions,When_receiving_unobtrusive_message_without_handler,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\Conventions\When_receiving_unobtrusive_message_without_handler.cs,Message_should_be_moved_to_error_because_handler_not_found,The length of the statement  "            Assert.False(context.Logs.Any(l => l.Level == LogLevel.Warn && l.Message.Contains($"Could not determine message type from message header '{ typeof(MyCommand).FullName}'"))' "Message type could not be mapped."); " is 210.
Long Statement,NServiceBus.AcceptanceTests,Requires,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\EndpointTemplates\Requires.cs,MessageDrivenPubSub,The length of the statement  "                Assert.Ignore("Ignoring this test because it requires message driven publish subscribe but this test suite uses native publish subscribe."); " is 140.
Long Statement,NServiceBus.AcceptanceTests,Requires,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\EndpointTemplates\Requires.cs,TimeoutStorage,The length of the statement  "                Assert.Ignore("Ignoring this test because it requires the timeout manager but this transport provides native deferral."); " is 121.
Long Statement,NServiceBus.AcceptanceTests,NServiceBusAcceptanceTest,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\NServiceBusAcceptanceTest.cs,SetUp,The length of the statement  "            // https://docs.microsoft.com/en-us/dotnet/framework/migration-guide/mitigation-deserialization-of-objects-across-app-domains " is 125.
Long Statement,NServiceBus.AcceptanceTests.Core.CriticalError,CriticalErrorStartup,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\CriticalError\When_raising_critical_error_at_startup.cs,Setup,The length of the statement  "                context.RegisterStartupTask(b => new CriticalErrorStartupFeatureTask(b.Build<CriticalError>()' b.Build<TestContext>())); " is 120.
Long Statement,NServiceBus.AcceptanceTests.Core.CriticalError,CriticalErrorStartup,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\CriticalError\When_raising_critical_error_at_startup.cs,Setup,The length of the statement  "                context.RegisterStartupTask(b => new CriticalErrorStartupFeatureTask(b.Build<CriticalError>()' b.Build<TestContext>())); " is 120.
Long Statement,NServiceBus.AcceptanceTests.Core.DependencyInjection,When_endpoint_is_warmed_up,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\DependencyInjection\When_endpoint_is_warmed_up.cs,Make_sure_things_are_in_DI,The length of the statement  "            builder.AppendLine("----------- Registrations not used by the core' can be removed in next major if downstreams have been confirmed to not use it -----------"); " is 160.
Long Statement,NServiceBus.AcceptanceTests.Core.Diagnostics,MessageToBeAuditedHandler,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\Diagnostics\When_a_message_is_audited.cs,Handle,The length of the statement  "                    TestContext.HostId = context.MessageHeaders.ContainsKey(Headers.HostId) ? context.MessageHeaders[Headers.HostId] : null; " is 120.
Long Statement,NServiceBus.AcceptanceTests.Core.Diagnostics,MessageToBeAuditedHandler,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\Diagnostics\When_a_message_is_audited.cs,Handle,The length of the statement  "                    TestContext.HostName = context.MessageHeaders.ContainsKey(Headers.HostDisplayName) ? context.MessageHeaders[Headers.HostDisplayName] : null; " is 140.
Long Statement,NServiceBus.AcceptanceTests.Core.Diagnostics,MessageToBeAuditedHandler,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\Diagnostics\When_a_message_is_audited.cs,Handle,The length of the statement  "                    TestContext.Endpoint = context.MessageHeaders.ContainsKey(Headers.ProcessingEndpoint) ? context.MessageHeaders[Headers.ProcessingEndpoint] : null; " is 146.
Long Statement,NServiceBus.AcceptanceTests.Core.Diagnostics,MessageToBeAuditedHandler,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\Diagnostics\When_a_message_is_audited.cs,Handle,The length of the statement  "                    TestContext.Machine = context.MessageHeaders.ContainsKey(Headers.ProcessingMachine) ? context.MessageHeaders[Headers.ProcessingMachine] : null; " is 143.
Long Statement,NServiceBus.AcceptanceTests.Core.Diagnostics,When_a_message_is_faulted,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\Diagnostics\When_a_message_is_faulted.cs,Should_add_host_related_headers,The length of the statement  "                .WithEndpoint<EndpointWithAuditOn>(b => b.When((session' c) => session.SendLocal(new MessageThatFails())).DoNotFailOnErrorMessages()) " is 133.
Long Statement,NServiceBus.AcceptanceTests.Core.Diagnostics,When_license_expired,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\Diagnostics\When_license_expired.cs,Should_add_the_license_diagnostic_headers_to_audited_messages,The length of the statement  "                Assert.True(context.Logs.Any(m => m.Level == LogLevel.Error && m.Message.StartsWith("Your license has expired"))' "Error should be logged"); " is 140.
Long Statement,NServiceBus.AcceptanceTests.Core.Diagnostics,When_message_is_faulted,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\Diagnostics\When_message_is_faulted.cs,Should_contain_processing_stats_headers,The length of the statement  "                .WithEndpoint<EndpointWithAuditOn>(b => b.When(session => session.SendLocal(new MessageToBeAudited())).DoNotFailOnErrorMessages()) " is 130.
Long Statement,NServiceBus.AcceptanceTests.Core.Diagnostics,When_message_is_faulted,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\Diagnostics\When_message_is_faulted.cs,Should_contain_processing_stats_headers,The length of the statement  "            var timeSentWhenFailedMessageWasSentToTheErrorQueue = DateTimeExtensions.ToUtcDateTime(context.FaultHeaders[Headers.TimeSent]); " is 127.
Long Statement,NServiceBus.AcceptanceTests.Core.Diagnostics,When_message_is_faulted,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\Diagnostics\When_message_is_faulted.cs,Should_contain_processing_stats_headers,The length of the statement  "            Assert.That(timeSentWhenFailedMessageWasSentToTheErrorQueue' Is.EqualTo(context.TimeSentOnTheFailingMessageWhenItWasHandled)); " is 126.
Long Statement,NServiceBus.AcceptanceTests.Core.Diagnostics,ErrorMessageHandler,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\Diagnostics\When_message_is_faulted.cs,Handle,The length of the statement  "                    testContext.TimeSentOnTheFailingMessageWhenItWasHandled = DateTimeExtensions.ToUtcDateTime(context.MessageHeaders[Headers.TimeSent]); " is 133.
Long Statement,NServiceBus.AcceptanceTests.Core.Diagnostics,When_sending_ensure_proper_headers,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\Diagnostics\When_sending_ensure_proper_headers.cs,Should_have_proper_headers_for_the_originating_endpoint,The length of the statement  "            Assert.AreEqual("SenderForEnsureProperHeadersTest"' context.ReceivedHeaders[Headers.OriginatingEndpoint]' "Message should contain the Originating endpoint"); " is 157.
Long Statement,NServiceBus.AcceptanceTests.Core.Diagnostics,When_sending_ensure_proper_headers,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\Diagnostics\When_sending_ensure_proper_headers.cs,Should_have_proper_headers_for_the_originating_endpoint,The length of the statement  "            Assert.That(context.ReceivedHeaders[Headers.OriginatingHostId]' Is.Not.Null.Or.Empty' "OriginatingHostId cannot be null or empty"); " is 131.
Long Statement,NServiceBus.AcceptanceTests.Core.Diagnostics,When_sending_ensure_proper_headers,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\Diagnostics\When_sending_ensure_proper_headers.cs,Should_have_proper_headers_for_the_originating_endpoint,The length of the statement  "            Assert.That(context.ReceivedHeaders[Headers.OriginatingMachine]' Is.Not.Null.Or.Empty' "Endpoint machine name cannot be null or empty"); " is 136.
Long Statement,NServiceBus.AcceptanceTests.Core.FakeTransport,FakeTransportInfrastructure,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\FakeTransport\FakeTransportInfrastructure.cs,ConfigureReceiveInfrastructure,The length of the statement  "            settings.Get<FakeTransport.StartUpSequence>().Add($"{nameof(TransportInfrastructure)}.{nameof(ConfigureReceiveInfrastructure)}"); " is 129.
Long Statement,NServiceBus.AcceptanceTests.Core.FakeTransport,FakeTransportInfrastructure,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\FakeTransport\FakeTransportInfrastructure.cs,ConfigureSendInfrastructure,The length of the statement  "            settings.Get<FakeTransport.StartUpSequence>().Add($"{nameof(TransportInfrastructure)}.{nameof(ConfigureSendInfrastructure)}"); " is 126.
Long Statement,NServiceBus.AcceptanceTests.Core.FakeTransport,FakeTransportInfrastructure,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\FakeTransport\FakeTransportInfrastructure.cs,ConfigureSubscriptionInfrastructure,The length of the statement  "            settings.Get<FakeTransport.StartUpSequence>().Add($"{nameof(TransportInfrastructure)}.{nameof(ConfigureSubscriptionInfrastructure)}"); " is 134.
Long Statement,NServiceBus.AcceptanceTests.Core.FakeTransport.ProcessingOptimizations,FakeTransportInfrastructure,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\FakeTransport\ProcessingOptimizations\When_using_concurrency_limit.cs,ConfigureReceiveInfrastructure,The length of the statement  "                return new TransportReceiveInfrastructure(() => new FakeReceiver()' () => new FakeQueueCreator()' () => Task.FromResult(StartupCheckResult.Success)); " is 149.
Long Statement,NServiceBus.AcceptanceTests.Core.Pipeline,When_discontinuing_message_dispatch,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\Pipeline\When_discontinuing_message_dispatch.cs,Should_not_continue_to_dispatch_the_message,The length of the statement  "            Assert.False(context.SagaStarted' "The saga should not have been started since the intercepting handler stops the pipeline"); " is 125.
Long Statement,NServiceBus.AcceptanceTests.Core.Pipeline,When_overwriting_conversation_id,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\Pipeline\When_overwriting_conversation_id.cs,Should_throw_when_incoming_conversation_id_available,The length of the statement  "            StringAssert.Contains($"Cannot set the {Headers.ConversationId} header to 'intermediate message header' as it cannot override the incoming header value ('{initialConversationId}')."' exception.InnerException.Message); " is 217.
Long Statement,NServiceBus.AcceptanceTests.Core.Pipeline,When_subscribed_to_ReceivePipelineCompleted,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\Pipeline\When_subscribed_to_ReceivePipelineCompleted.cs,Should_receive_notifications,The length of the statement  "            Assert.AreEqual(context.MessageId' context.ReceivePipelineCompletedMessage.ProcessedMessage.MessageId' "MessageId mismatch"); " is 125.
Long Statement,NServiceBus.AcceptanceTests.Core.Pipeline,When_using_per_uow_component_in_the_pipeline,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\Pipeline\When_using_per_uow_component_in_the_pipeline.cs,It_should_be_scoped_to_uow_both_in_behavior_and_in_the_handler,The length of the statement  "            Assert.IsFalse(context.ValueEmpty' "Empty value in the UoW component meaning the UoW component has been registered as per-call"); " is 129.
Long Statement,NServiceBus.AcceptanceTests.Core.Pipeline,When_using_per_uow_component_in_the_pipeline,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\Pipeline\When_using_per_uow_component_in_the_pipeline.cs,It_should_be_scoped_to_uow_both_in_behavior_and_in_the_handler,The length of the statement  "            Assert.IsFalse(context.ValueAlreadyInitialized' "Value in the UoW has already been initialized when it was resolved for the first time in a given pipeline meaning the UoW component has been registered as a singleton."); " is 219.
Long Statement,NServiceBus.AcceptanceTests.Core.MessageDurability,When_disabling_durable_messages_on_durable_transport,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\MessageDurability\When_disabling_durable_messages_on_durable_transport.cs,Should_throw_exception_at_startup,The length of the statement  "            Assert.That(exception.Message' Does.Contain("The configured transport does not support non-durable messages but some messages have been configured to be non-durable")); " is 168.
Long Statement,NServiceBus.AcceptanceTests.Core.MessageDurability,When_using_non_durable_messages_on_durable_only_transport,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\MessageDurability\When_using_non_durable_messages_on_durable_only_transport.cs,Should_throw_exception_when_sending,The length of the statement  "            Assert.That(exception.Message' Does.Contain("The configured transport does not support non-durable messages but some messages have been configured to be non-durable")); " is 168.
Long Statement,NServiceBus.AcceptanceTests.Core.Mutators,MyTransportMessageMutator,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\Mutators\When_using_outgoing_tm_mutator.cs,MutateOutgoing,The length of the statement  "                    context.OutgoingBody = Encoding.UTF8.GetBytes("<MessageThatMutatorChangesTo><SomeProperty>SomeValue</SomeProperty></MessageThatMutatorChangesTo>"); " is 147.
Long Statement,NServiceBus.AcceptanceTests.Core.Recoverability,When_delayed_retries_with_regular_exception,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\Recoverability\When_delayed_retries_with_regular_exception.cs,Should_preserve_the_original_body_for_regular_exceptions,The length of the statement  "            CollectionAssert.AreEqual(context.OriginalBody' delayedRetryBody' "The body of the message sent to Delayed Retry should be the same as the original message coming off the queue"); " is 179.
Long Statement,NServiceBus.AcceptanceTests.Core.Recoverability,When_failing_mutated_message,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\Recoverability\When_failing_mutated_message.cs,Should_preserve_the_original_body,The length of the statement  "            CollectionAssert.AreEqual(context.OriginalBody' errorBody' "The body of the message sent to delayed retry should be the same as the original message coming off the queue"); " is 172.
Long Statement,NServiceBus.AcceptanceTests.Core.Recoverability,When_subscribing_to_delayed_retries_notifications,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\Recoverability\When_subscribing_to_delayed_retries_notifications.cs,Should_trigger_notification_on_delayed_retry,The length of the statement  "            // Immediate Retries max retries = 3 means we will be processing 4 times. Delayed Retries max retries = 2 means we will do 3 * Immediate Retries " is 144.
Long Statement,NServiceBus.AcceptanceTests.Core.Recoverability,When_subscribing_to_error_notifications,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\Recoverability\When_subscribing_to_error_notifications.cs,Should_retain_exception_details_over_immediate_and_delayed_retries,The length of the statement  "            Assert.True(context.Logs.Any(l => l.Level == LogLevel.Error && l.Message.Contains("Simulated exception message"))' "The last exception should be logged as `error` before sending it to the error queue"); " is 202.
Long Statement,NServiceBus.AcceptanceTests.Core.Recoverability,When_subscribing_to_error_notifications,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\Recoverability\When_subscribing_to_error_notifications.cs,Should_retain_exception_details_over_immediate_and_delayed_retries,The length of the statement  "            // Immediate Retries max retries = 3 means we will be processing 4 times. Delayed Retries max retries = 2 means we will do 3 * Immediate Retries " is 144.
Long Statement,NServiceBus.AcceptanceTests.Core.Recoverability,When_subscribing_to_immediate_retries_notifications,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\Recoverability\When_subscribing_to_immediate_retries_notifications.cs,Should_trigger_notification_on_immediate_retry,The length of the statement  "            // Immediate Retries max retries = 3 means we will be processing 4 times. Delayed Retries max retries = 2 means we will do 3 * Immediate Retries " is 144.
Long Statement,NServiceBus.AcceptanceTests.Core.Routing.AutomaticSubscriptions,When_handling_local_event,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\Routing\AutomaticSubscriptions\When_handling_local_event.cs,Should_autosubscribe_to_event,The length of the statement  "                .When(c => c.EventSubscribed || c.HasNativePubSubSupport' (session' context) => session.Publish(new Event { ContextId = context.Id }))) " is 135.
Long Statement,NServiceBus.AcceptanceTests.Core.Routing,When_callbacks_are_used_to_reply_with_int_or_enum,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\Routing\When_callbacks_are_used_to_reply_with_int_or_enum.cs,Should_throw_late_enough_to_allow_intercept,The length of the statement  "            // See https://github.com/Particular/NServiceBus.Callbacks/blob/develop/src/NServiceBus.Callbacks/Reply/SetCallbackResponseReturnCodeBehavior.cs#L7 " is 147.
Long Statement,NServiceBus.AcceptanceTests.Core.Routing,When_callbacks_are_used_to_reply_with_int_or_enum,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\Routing\When_callbacks_are_used_to_reply_with_int_or_enum.cs,Should_throw_late_enough_to_allow_intercept,The length of the statement  "            Assert.True(context.WasAbleToInterceptBeforeCoreThrows' "Callbacks needs to be able to intercept the pipeline before core throws"); " is 131.
Long Statement,NServiceBus.AcceptanceTests.Core.Sagas,CustomFinder,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\Sagas\When_adding_state_to_context.cs,FindBy,The length of the statement  "                    var sagaData = await SagaPersister.Get<TestSaga08.SagaData08>(message.SagaId' storageSession' (ContextBag)context).ConfigureAwait(false); " is 137.
Long Statement,NServiceBus.AcceptanceTests.Core.Sagas,When_a_saga_is_completed,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\Sagas\When_a_saga_is_completed.cs,Saga_should_not_handle_subsequent_messages_for_that_sagadata,The length of the statement  "            Assert.True(context.AnotherMessageReceived' "AnotherMessage should have been delivered to the handler outside the saga"); " is 121.
Long Statement,NServiceBus.AcceptanceTests.Core.Sagas,When_a_saga_is_completed,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\Sagas\When_a_saga_is_completed.cs,Saga_should_not_handle_subsequent_messages_for_that_sagadata,The length of the statement  "            Assert.False(context.SagaReceivedAnotherMessage' "AnotherMessage should not be delivered to the saga after completion"); " is 120.
Long Statement,NServiceBus.AcceptanceTests.Core.Sagas,CustomSagaIdGenerator,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\Sagas\When_overriding_saga_id_creation.cs,Generate,The length of the statement  "                    return ToGuid($"{context.SagaMetadata.SagaEntityType.FullName}_{context.CorrelationProperty.Name}_{context.CorrelationProperty.Value}"); " is 136.
Long Statement,NServiceBus.AcceptanceTests.Core.Sagas,When_using_ReplyToOriginator,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\Sagas\When_using_ReplyToOriginator.cs,Should_preserve_correlation_context,The length of the statement  "            Assert.AreEqual(context.OriginalCorrelationId' context.CorrelationIdOnReply' "Correlation id should be preserved so that things like callbacks work properly"); " is 159.
Long Statement,NServiceBus.AcceptanceTests.Core.Sagas,MyReplyToOriginatorHandler,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\Sagas\When_using_ReplyToOriginator.cs,Handle,The length of the statement  "                    TestContext.Intent = (MessageIntentEnum)Enum.Parse(typeof(MessageIntentEnum)' context.MessageHeaders[Headers.MessageIntent]); " is 125.
Long Statement,NServiceBus.AcceptanceTests.Core.SelfVerification,When_running_saga_tests,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\SelfVerification\When_running_saga_tests.cs,All_saga_entities_in_acceptance_tests_should_have_virtual_properties,The length of the statement  "                        Console.WriteLine("ERROR: {0}.{1} must be marked as virtual for NHibernate tests to succeed."' entity.FullName' property.Name); " is 127.
Long Statement,NServiceBus.AcceptanceTests.Core.Stopping,When_feature_startup_task_throws_on_stop,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\Stopping\When_feature_startup_task_throws_on_stop.cs,Should_log_exception,The length of the statement  "            var logItem = context.Logs.FirstOrDefault(item => item.Message.Contains("stopping of feature startup task") && item.Level == LogLevel.Warn); " is 140.
Long Statement,NServiceBus.AcceptanceTests.Core.Stopping,When_feature_startup_task_throws_on_stop,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\Stopping\When_feature_startup_task_throws_on_stop.cs,Should_log_exception,The length of the statement  "            StringAssert.Contains("Exception occurred during stopping of feature startup task 'CustomTask'. System.InvalidOperationException: CustomTaskThrows"' logItem.Message); " is 166.
Long Statement,NServiceBus.AcceptanceTests.Core.Stopping,When_pump_throws_on_stop,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\Stopping\When_pump_throws_on_stop.cs,Should_not_throw_but_log_exception,The length of the statement  "                && l.Message.Contains("Receiver Main listening to queue PumpThrowsOnStop.EndpointThatThrowsOnPumpStop threw an exception on stopping. System.InvalidOperationException: ExceptionInPumpStop"))); " is 192.
Long Statement,NServiceBus.AcceptanceTests.Core.Stopping,When_transport_infrastructure_throws_on_stop,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\Stopping\When_transport_infrastructure_throws_on_stop.cs,Should_log_exception,The length of the statement  "            StringAssert.Contains("Exception occurred during shutdown of the transport. System.InvalidOperationException: ExceptionInInfrastructureStop"' logItem.Message); " is 159.
Long Statement,NServiceBus.AcceptanceTests.Core.SubscriptionMigration,AcceptanceTestingTransportServer,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\SubscriptionMigration\AcceptanceTestingTransportServer.cs,GetConfiguration,The length of the statement  "            await transportConfiguration.Configure(endpointConfiguration.EndpointName' configuration' runDescriptor.Settings' endpointConfiguration.PublisherMetadata); " is 155.
Long Statement,NServiceBus.AcceptanceTests.Core.SubscriptionMigration,AcceptanceTestingTransportServer,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\SubscriptionMigration\AcceptanceTestingTransportServer.cs,GetConfiguration,The length of the statement  "            await persistenceConfiguration.Configure(endpointConfiguration.EndpointName' configuration' runDescriptor.Settings' endpointConfiguration.PublisherMetadata); " is 157.
Long Statement,NServiceBus.AcceptanceTests.Core.Timeout,CustomTimeoutPersisterFeature,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\Timeout\When_timeout_storage_is_unavailable_temporarily.cs,Setup,The length of the statement  "                    context.Container.ConfigureComponent(b => new CyclingOutageTimeoutPersister(testContext.SecondsToWait)' DependencyLifecycle.SingleInstance); " is 140.
Long Statement,NServiceBus.AcceptanceTests.Core.TransportSeam,FeatureEnabledByUser,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\TransportSeam\When_features_are_setup.cs,Setup,The length of the statement  "                    context.Settings.Get<Context>().TransactionModeFromSettingsExtensions = context.Settings.GetRequiredTransactionModeForReceives(); " is 129.
Long Statement,NServiceBus.AcceptanceTests.Core.TransportSeam,When_querying_for_transaction_mode,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\TransportSeam\When_querying_for_transaction_mode.cs,Should_retrieve_value_set_for_transport_transaction_mode,The length of the statement  "            Assert.AreEqual(TransportTransactionMode.ReceiveOnly' context.TransactionModeFromSettingsExtensions' "Transport transaction mode for the endpoint did not match the expected value."); " is 182.
Long Statement,NServiceBus.AcceptanceTests.Core.UnitOfWork.TransactionScope,When_transactionscope_enabled,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\UnitOfWork\TransactionScope\When_transactionscope_enabled.cs,Should_wrap_the_handlers_in_a_scope,The length of the statement  "            Assert.AreEqual(context.IsolationLevel' IsolationLevel.RepeatableRead' "There should be a ambient transaction present"); " is 120.
Long Statement,NServiceBus.AcceptanceTests.Core.UnitOfWork.TransactionScope,When_used_with_transport_scopes,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\UnitOfWork\TransactionScope\When_used_with_transport_scopes.cs,Should_blow_up,The length of the statement  "            Assert.True(exception.Message.Contains("A Transaction scope unit of work can't be used when the transport already uses a scope")); " is 130.
Long Statement,NServiceBus.AcceptanceTests.DataBus,When_sending_databus_properties,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\DataBus\When_sending_databus_properties.cs,Should_receive_messages_with_largepayload_correctly,The length of the statement  "            Assert.AreEqual(payloadToSend' context.ReceivedPayload' "The large payload should be marshalled correctly using the databus"); " is 126.
Long Statement,NServiceBus.AcceptanceTests.DataBus,When_sending_databus_properties_with_unobtrusive,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\DataBus\When_sending_databus_properties_with_unobtrusive.cs,Should_receive_messages_with_largepayload_correctly,The length of the statement  "            Assert.AreEqual(payloadToSend' context.ReceivedPayload' "The large payload should be marshalled correctly using the databus"); " is 126.
Long Statement,NServiceBus.AcceptanceTests.DataBus,When_using_custom_IDataBus,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\DataBus\When_using_custom_IDataBus.cs,Should_be_able_to_register_via_fluent,The length of the statement  "            Assert.AreEqual(PayloadToSend' context.ReceivedPayload' "The large payload should be marshalled correctly using the databus"); " is 126.
Long Statement,NServiceBus.AcceptanceTests.EndpointTemplates,ConfigureExtensions,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\EndpointTemplates\ConfigureExtensions.cs,DefineTransport,The length of the statement  "            await transportConfiguration.Configure(endpointCustomizationConfiguration.EndpointName' config' runDescriptor.Settings' endpointCustomizationConfiguration.PublisherMetadata); " is 174.
Long Statement,NServiceBus.AcceptanceTests.EndpointTemplates,ConfigureExtensions,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\EndpointTemplates\ConfigureExtensions.cs,DefineTransport,The length of the statement  "            await transportConfiguration.Configure(endpointCustomizationConfiguration.EndpointName' config' runDescriptor.Settings' endpointCustomizationConfiguration.PublisherMetadata); " is 174.
Long Statement,NServiceBus.AcceptanceTests.EndpointTemplates,ConfigureExtensions,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\EndpointTemplates\ConfigureExtensions.cs,DefinePersistence,The length of the statement  "            await persistenceConfiguration.Configure(endpointCustomizationConfiguration.EndpointName' config' runDescriptor.Settings' endpointCustomizationConfiguration.PublisherMetadata); " is 176.
Long Statement,NServiceBus.AcceptanceTests.EndpointTemplates,ConfigureExtensions,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\EndpointTemplates\ConfigureExtensions.cs,DefinePersistence,The length of the statement  "            await persistenceConfiguration.Configure(endpointCustomizationConfiguration.EndpointName' config' runDescriptor.Settings' endpointCustomizationConfiguration.PublisherMetadata); " is 176.
Long Statement,NServiceBus.AcceptanceTests.EndpointTemplates,EndpointCustomizationConfigurationExtensions,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\EndpointTemplates\EndpointCustomizationConfigurationExtensions.cs,GetTypesScopedByTestClass,The length of the statement  "            types = types.Union(GetNestedTypeRecursive(endpointConfiguration.BuilderType.DeclaringType' endpointConfiguration.BuilderType)); " is 128.
Long Statement,NServiceBus.AcceptanceTests.EndpointTemplates,EndpointCustomizationConfigurationExtensions,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\EndpointTemplates\EndpointCustomizationConfigurationExtensions.cs,GetNestedTypeRecursive,The length of the statement  "                throw new InvalidOperationException("Make sure you nest the endpoint infrastructure inside the TestFixture as nested classes"); " is 127.
Long Statement,NServiceBus.AcceptanceTests.EndpointTemplates,EndpointCustomizationConfigurationExtensions,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\EndpointTemplates\EndpointCustomizationConfigurationExtensions.cs,GetNestedTypeRecursive,The length of the statement  "            foreach (var nestedType in rootType.GetNestedTypes(BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic).SelectMany(t => GetNestedTypeRecursive(t' builderType))) " is 199.
Long Statement,NServiceBus.AcceptanceTests.EndpointTemplates,ExternallyManagedContainerServer,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\EndpointTemplates\ExternallyManagedContainerServer.cs,GetConfiguration,The length of the statement  "            await configuration.DefineTransport(TransportConfiguration' runDescriptor' endpointConfiguration).ConfigureAwait(false); " is 120.
Long Statement,NServiceBus.AcceptanceTests.EndpointTemplates,ExternallyManagedContainerServer,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\EndpointTemplates\ExternallyManagedContainerServer.cs,GetConfiguration,The length of the statement  "            await configuration.DefinePersistence(PersistenceConfiguration' runDescriptor' endpointConfiguration).ConfigureAwait(false); " is 124.
Long Statement,NServiceBus.AcceptanceTests.EndpointTemplates,ServerWithNoDefaultPersistenceDefinitions,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\EndpointTemplates\ServerWithNoDefaultPersistenceDefinitions.cs,GetConfiguration,The length of the statement  "            await builder.DefineTransport(TestSuiteConstraints.Current.CreateTransportConfiguration()' runDescriptor' endpointConfiguration).ConfigureAwait(false); " is 151.
Long Statement,NServiceBus.AcceptanceTests.Forwarding,When_forwarding_is_configured_for_endpoint,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Forwarding\When_forwarding_is_configured_for_endpoint.cs,Should_forward_message,The length of the statement  "            CollectionAssert.AreEqual(context.ForwardedHeaders' context.ReceivedHeaders' "Headers should be preserved on the forwarded message"); " is 133.
Long Statement,NServiceBus.AcceptanceTests.Forwarding,When_requesting_message_to_be_forwarded,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Forwarding\When_requesting_message_to_be_forwarded.cs,Should_forward_message,The length of the statement  "            CollectionAssert.AreEqual(context.ForwardedHeaders' context.ReceivedHeaders' "Headers should be preserved on the forwarded message"); " is 133.
Long Statement,NServiceBus.AcceptanceTests.MessageId,When_message_has_empty_id_header,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\MessageId\When_message_has_empty_id_header.cs,A_message_id_is_generated_by_the_transport_layer,The length of the statement  "            Assert.AreEqual(context.MessageId' context.Headers[Headers.MessageId]' "Should populate the NServiceBus.MessageId header with the new value"); " is 142.
Long Statement,NServiceBus.AcceptanceTests.Outbox,BlowUpAfterDispatchBehavior,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Outbox\When_a_message_is_audited.cs,Invoke,The length of the statement  "                    if (!context.Operations.Any(op => op.Message.Headers[Headers.EnclosedMessageTypes].Contains(typeof(MessageToBeAudited).Name))) " is 126.
Long Statement,NServiceBus.AcceptanceTests.Outbox,BlowUpAfterDispatchBehavior,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Outbox\When_a_message_is_audited.cs,Invoke,The length of the statement  "                    if (!context.Operations.Any(op => op.Message.Headers[Headers.EnclosedMessageTypes].Contains(typeof(MessageToBeForwarded).Name))) " is 128.
Long Statement,NServiceBus.AcceptanceTests.Outbox,When_blowing_up_just_after_dispatch,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Outbox\When_blowing_up_just_after_dispatch.cs,Should_still_release_the_outgoing_messages_to_the_transport,The length of the statement  "            Assert.AreEqual(1' context.OrderAckReceived' "Order ack should have been received since outbox dispatch isn't part of the receive tx"); " is 135.
Long Statement,NServiceBus.AcceptanceTests.Pipeline,When_a_message_is_audited,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Pipeline\When_a_message_is_audited.cs,Should_flow_causation_headers,The length of the statement  "            Assert.AreEqual(context.OriginRelatedTo' context.RelatedTo' "The RelatedTo header in audit message should be be equal to RelatedTo header in origin."); " is 151.
Long Statement,NServiceBus.AcceptanceTests.Pipeline,When_a_message_is_audited,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Pipeline\When_a_message_is_audited.cs,Should_flow_causation_headers,The length of the statement  "            Assert.AreEqual(context.OriginConversationId' context.ConversationId' "The ConversationId header in audit message should be be equal to ConversationId header in origin."); " is 171.
Long Statement,NServiceBus.AcceptanceTests.Pipeline,FirstMessageHandler,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Pipeline\When_a_message_is_audited.cs,Handle,The length of the statement  "                    TestContext.OriginConversationId = context.MessageHeaders.ContainsKey(Headers.ConversationId) ? context.MessageHeaders[Headers.ConversationId] : null; " is 150.
Long Statement,NServiceBus.AcceptanceTests.Pipeline,FirstMessageHandler,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Pipeline\When_a_message_is_audited.cs,Handle,The length of the statement  "                    TestContext.OriginConversationId = context.MessageHeaders.ContainsKey(Headers.ConversationId) ? context.MessageHeaders[Headers.ConversationId] : null; " is 150.
Long Statement,NServiceBus.AcceptanceTests.Pipeline,MessageToBeAuditedHandler,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Pipeline\When_a_message_is_audited.cs,Handle,The length of the statement  "                    TestContext.RelatedTo = context.MessageHeaders.ContainsKey(Headers.RelatedTo) ? context.MessageHeaders[Headers.RelatedTo] : null; " is 129.
Long Statement,NServiceBus.AcceptanceTests.Pipeline,MessageToBeAuditedHandler,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Pipeline\When_a_message_is_audited.cs,Handle,The length of the statement  "                    TestContext.ConversationId = context.MessageHeaders.ContainsKey(Headers.ConversationId) ? context.MessageHeaders[Headers.ConversationId] : null; " is 144.
Long Statement,NServiceBus.AcceptanceTests.Pipeline,When_a_message_is_faulted,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Pipeline\When_a_message_is_faulted.cs,Should_flow_causation_headers,The length of the statement  "                .WithEndpoint<CausationEndpoint>(b => b.When(session => session.SendLocal(new FirstMessage())).DoNotFailOnErrorMessages()) " is 122.
Long Statement,NServiceBus.AcceptanceTests.Pipeline,When_a_message_is_faulted,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Pipeline\When_a_message_is_faulted.cs,Should_flow_causation_headers,The length of the statement  "            Assert.AreEqual(context.OriginRelatedTo' context.RelatedTo' "The RelatedTo header in fault message should be be equal to RelatedTo header in origin."); " is 151.
Long Statement,NServiceBus.AcceptanceTests.Pipeline,When_a_message_is_faulted,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Pipeline\When_a_message_is_faulted.cs,Should_flow_causation_headers,The length of the statement  "            Assert.AreEqual(context.OriginConversationId' context.ConversationId' "The ConversationId header in fault message should be be equal to ConversationId header in origin."); " is 171.
Long Statement,NServiceBus.AcceptanceTests.Pipeline,ErrorMessageHandler,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Pipeline\When_a_message_is_faulted.cs,Handle,The length of the statement  "                    testContext.RelatedTo = context.MessageHeaders.ContainsKey(Headers.RelatedTo) ? context.MessageHeaders[Headers.RelatedTo] : null; " is 129.
Long Statement,NServiceBus.AcceptanceTests.Pipeline,ErrorMessageHandler,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Pipeline\When_a_message_is_faulted.cs,Handle,The length of the statement  "                    testContext.ConversationId = context.MessageHeaders.ContainsKey(Headers.ConversationId) ? context.MessageHeaders[Headers.ConversationId] : null; " is 144.
Long Statement,NServiceBus.AcceptanceTests.Pipeline,When_sending_to_another_endpoint,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Pipeline\When_sending_to_another_endpoint.cs,Should_receive_the_message,The length of the statement  "            Assert.AreEqual("StaticHeaderValue"' context.ReceivedHeaders["MyStaticHeader"]' "Static headers should be attached to outgoing messages"); " is 138.
Long Statement,NServiceBus.AcceptanceTests.Recoverability,When_delayed_retries_with_immediate_retries_disabled,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Recoverability\When_delayed_retries_with_immediate_retries_disabled.cs,Should_reschedule_message_the_configured_number_of_times,The length of the statement  "            Assert.AreEqual(ConfiguredNumberOfDelayedRetries + 1' context.ReceiveCount' "Message should be delivered 4 times. Once initially and retried 3 times by Delayed Retries"); " is 170.
Long Statement,NServiceBus.AcceptanceTests.Recoverability,When_immediate_retries_with_dtc_on,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Recoverability\When_immediate_retries_with_dtc_on.cs,Should_do_the_configured_number_of_retries,The length of the statement  "            Assert.AreEqual(maxretries + 1' context.NumberOfTimesInvoked' $"The Immediate Retries should retry {maxretries} times"); " is 120.
Long Statement,NServiceBus.AcceptanceTests.Recoverability,When_message_fails_retries,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Recoverability\When_message_fails_retries.cs,Should_forward_message_to_error_queue,The length of the statement  "            Assert.AreEqual(typeof(MessageWhichFailsRetries).AssemblyQualifiedName' exception.FailedMessage.Headers[Headers.EnclosedMessageTypes]); " is 135.
Long Statement,NServiceBus.AcceptanceTests.Recoverability,When_message_fails_retries,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Recoverability\When_message_fails_retries.cs,Should_forward_message_to_error_queue,The length of the statement  "                .StartsWith($"Moving message '{testContext.PhysicalMessageId}' to the error queue 'error' because processing failed due to an exception:"))); " is 141.
Long Statement,NServiceBus.AcceptanceTests.Routing.MessageDrivenSubscriptions,When_autosubscribe_with_missing_publisher_information,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Routing\MessageDrivenSubscriptions\When_autosubscribe_with_missing_publisher_information.cs,Should_log_events_with_missing_routes,The length of the statement  "            var log = context.Logs.Single(l => l.Message.Contains($"AutoSubscribe was unable to subscribe to event '{typeof(MyEvent).FullName}': No publisher address could be found for message type '{typeof(MyEvent).FullName}'.")); " is 219.
Long Statement,NServiceBus.AcceptanceTests.Routing.MessageDrivenSubscriptions,When_publishing_to_scaled_out_subscribers,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Routing\MessageDrivenSubscriptions\When_publishing_to_scaled_out_subscribers.cs,Each_event_should_be_delivered_to_single_instance_of_each_subscriber,The length of the statement  "                .WithEndpoint<Publisher>(b => b.When(c => c.SubscribersCounter == 4' async (session' c) => { await session.Publish(new MyEvent()); })) " is 134.
Long Statement,NServiceBus.AcceptanceTests.Sagas,SagaSpecialValues,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Sagas\When_correlating_on_special_characters.cs,ConfigureHowToFindSaga,The length of the statement  "                    mapper.ConfigureMapping<MessageWithSpecialPropertyValues>(m => m.SpecialCharacterValues).ToSaga(s => s.SpecialCharacterValues); " is 127.
Long Statement,NServiceBus.AcceptanceTests.Sagas,SagaSpecialValues,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Sagas\When_correlating_on_special_characters.cs,ConfigureHowToFindSaga,The length of the statement  "                    mapper.ConfigureMapping<FollowupMessageWithSpecialPropertyValues>(m => m.SpecialCharacterValues).ToSaga(s => s.SpecialCharacterValues); " is 135.
Long Statement,NServiceBus.AcceptanceTests.Sagas,When_correlation_property_is_null,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Sagas\When_correlation_property_is_null.cs,Should_throw_an_exception_with_details,The length of the statement  "            var errorMessage = $"Message {typeof(MessageWithNullCorrelationProperty).FullName} mapped to saga {typeof(SagaWithCorrelationPropertyEndpoint.SagaWithCorrelatedProperty).FullName} has attempted to assign null to the correlation property {nameof(SagaWithCorrelationPropertyEndpoint.SagaDataWithCorrelatedProperty.CorrelatedProperty)}. Correlation properties cannot be assigned null."; " is 383.
Long Statement,NServiceBus.AcceptanceTests.Sagas,SagaWithCorrelatedProperty,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Sagas\When_correlation_property_is_null.cs,ConfigureHowToFindSaga,The length of the statement  "                    mapper.ConfigureMapping<MessageWithNullCorrelationProperty>(m => m.CorrelationProperty).ToSaga(s => s.CorrelatedProperty); " is 122.
Long Statement,NServiceBus.AcceptanceTests.Sagas,RequestResponseRespondingSaga1,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Sagas\When_doing_request_response_between_sagas.cs,Handle,The length of the statement  "                    // we explicitly set the correlation ID to a non-existent saga since auto correlation happens to work for this special case " is 123.
Long Statement,NServiceBus.AcceptanceTests.Sagas,RequestResponseRespondingSaga2,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Sagas\When_replying_to_originator.cs,Handle,The length of the statement  "                    //reply to originator must be used here since the sender of the incoming message is this saga and not the requesting saga " is 121.
Long Statement,NServiceBus.AcceptanceTests.Sagas,RequestResponseRespondingSaga2,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Sagas\When_replying_to_originator.cs,ConfigureHowToFindSaga,The length of the statement  "                    mapper.ConfigureMapping<RequestToRespondingSaga>(m => m.SomeIdThatTheResponseSagaCanCorrelateBackToUs).ToSaga(s => s.CorrIdForRequest); " is 135.
Long Statement,NServiceBus.AcceptanceTests.Sagas,RequestResponseRespondingSaga2,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Sagas\When_replying_to_originator.cs,ConfigureHowToFindSaga,The length of the statement  "                    mapper.ConfigureMapping<SendReplyFromNonInitiatingHandler>(m => m.SagaIdSoWeCanCorrelate).ToSaga(s => s.CorrIdForRequest); " is 122.
Long Statement,NServiceBus.AcceptanceTests.Sagas,RequestResponseRespondingSaga3,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Sagas\When_replying_to_originator_from_a_timeout.cs,Timeout,The length of the statement  "                    //reply to originator must be used here since the sender of the incoming message is the TimeoutManager and not the requesting saga " is 130.
Long Statement,NServiceBus.AcceptanceTests.Sagas,RequestResponseRespondingSaga3,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Sagas\When_replying_to_originator_from_a_timeout.cs,ConfigureHowToFindSaga,The length of the statement  "                    mapper.ConfigureMapping<RequestToRespondingSaga>(m => m.SomeIdThatTheResponseSagaCanCorrelateBackToUs).ToSaga(s => s.CorrIdForRequest); " is 135.
Long Statement,NServiceBus.AcceptanceTests.Sagas,When_saga_id_changed,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Sagas\When_saga_id_changed.cs,Should_throw,The length of the statement  "            Assert.That(((Context) exception.ScenarioContext).MessageId' Is.EqualTo(exception.FailedMessage.MessageId)' "Message should be moved to errorqueue"); " is 149.
Long Statement,NServiceBus.AcceptanceTests.Sagas,When_saga_id_changed,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Sagas\When_saga_id_changed.cs,Should_throw,The length of the statement  "            Assert.That(exception.FailedMessage.Exception.Message' Contains.Substring("A modification of IContainSagaData.Id has been detected. This property is for infrastructure purposes only and should not be modified. SagaType:")); " is 223.
Long Statement,NServiceBus.AcceptanceTests.Sagas,When_saga_started_concurrently,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Sagas\When_saga_started_concurrently.cs,Should_start_single_saga,The length of the statement  "            Assert.AreEqual(context.PlacedSagaId' context.BilledSagaId' "Both messages should have been handled by the same saga' but SagaIds don't match."); " is 145.
Long Statement,NServiceBus.AcceptanceTests.Satellites,When_a_message_is_available,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Satellites\When_a_message_is_available.cs,Should_receive_the_message,The length of the statement  "                .WithEndpoint<Endpoint>(b => b.When((session' c) => session.Send(Endpoint.MySatelliteFeature.Address' new MyMessage()))) " is 120.
Long Statement,NServiceBus.AcceptanceTests.Satellites,MySatelliteFeature,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Satellites\When_a_message_is_available.cs,Setup,The length of the statement  "                            testContext.TransportTransactionAddedToContext = ReferenceEquals(messageContext.Extensions.Get<TransportTransaction>()' messageContext.TransportTransaction); " is 157.
Long Statement,NServiceBus.AcceptanceTests.Serialization,MyCustomSerializer,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Serialization\When_registering_additional_deserializers.cs,Configure,The length of the statement  "                return mapper => new MyCustomMessageSerializer(settings.GetOrDefault<string>("MyCustomSerializer.Settings")' settings.Get<Context>()); " is 134.
Long Statement,NServiceBus.AcceptanceTests.Serialization,InjectInvalidCharMutator,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Serialization\When_sanitizing_xml_messages.cs,MutateIncoming,The length of the statement  "                    context.Body = Encoding.UTF8.GetBytes(body.Replace("Hello World!"' $"{invalidChar}Hello {invalidChar}World!{invalidChar}")); " is 124.
Long Statement,NServiceBus.AcceptanceTests.Serialization,When_wrapping_is_not_skipped,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Serialization\When_wrapping_is_not_skipped.cs,Should_wrap_xml_content,The length of the statement  "            Assert.That(context.XmlMessage.Root.Elements().Single().Elements().Single().ToString()' Is.EqualTo(xmlContent.ToString())); " is 123.
Long Statement,NServiceBus.AcceptanceTests.TimeToBeReceived,When_TimeToBeReceived_has_not_expired,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\TimeToBeReceived\When_TimeToBeReceived_has_not_expired.cs,Message_should_be_received,The length of the statement  "            Assert.AreEqual(TimeSpan.FromSeconds(10)' context.TTBROnIncomingMessage' "TTBR should be available as a header so receiving endpoints can know what value was used when the message was originally sent"); " is 202.
Long Statement,NServiceBus.AcceptanceTests.Tx,When_receiving_with_dtc_enabled,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Tx\When_receiving_with_dtc_enabled.cs,Basic_assumptions_promotable_should_fail_if_durable_already_exists,The length of the statement  "                Transaction.Current.EnlistDurable(FakePromotableResourceManager.ResourceManagerId' new FakePromotableResourceManager()' EnlistmentOptions.None); " is 144.
Long Statement,NServiceBus.AcceptanceTests.Tx,When_sending_within_an_ambient_transaction,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Tx\When_sending_within_an_ambient_transaction.cs,Should_not_deliver_them_until_the_commit_phase,The length of the statement  "            Assert.AreEqual(1' context.SequenceNumberOfFirstMessage' "The transport should preserve the order in which the transactional messages are delivered to the queuing system"); " is 172.
Magic Number,NServiceBus.AcceptanceTests.Audit,EndpointThatHandlesAuditMessages,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Audit\When_auditing.cs,EndpointThatHandlesAuditMessages,The following statement contains a magic number: EndpointSetup<DefaultServer>(c => c.Recoverability().Immediate(s => s.NumberOfRetries(10)));
Magic Number,NServiceBus.AcceptanceTests.Audit,BodyMutator,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Audit\When_a_message_is_audited.cs,MutateIncoming,The following statement contains a magic number: modifiedBody[modifiedBody.Length - 1] = 13;
Magic Number,NServiceBus.AcceptanceTests.Core.AutomaticSubscriptions,When_starting_an_endpoint_with_a_saga,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\AutomaticSubscriptions\When_starting_an_endpoint_with_a_saga.cs,Should_autoSubscribe_the_saga_messageHandler_by_default,The following statement contains a magic number: var context = await Scenario.Define<Context>()                  .WithEndpoint<Subscriber>()                  .Done(c => c.EventsSubscribedTo.Count >= 2)                  .Run();
Magic Number,NServiceBus.AcceptanceTests.Core.CriticalError,When_raising_critical_error_at_startup,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\CriticalError\When_raising_critical_error_at_startup.cs,Should_call_critical_error_action_for_every_error_that_occurred_before_startup,The following statement contains a magic number: var context = await Scenario.Define<TestContext>()                  .WithEndpoint<EndpointWithCriticalErrorStartup>(b => { b                      .CustomConfig(config => { config.DefineCriticalErrorAction(addCritical); }); })                  .Done(c => c.CriticalErrorsRaised >= 2 && exceptions.Count >= 2)                  .Run();
Magic Number,NServiceBus.AcceptanceTests.Core.CriticalError,When_raising_critical_error_at_startup,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\CriticalError\When_raising_critical_error_at_startup.cs,Should_call_critical_error_action_for_every_error_that_occurred_before_startup,The following statement contains a magic number: var context = await Scenario.Define<TestContext>()                  .WithEndpoint<EndpointWithCriticalErrorStartup>(b => { b                      .CustomConfig(config => { config.DefineCriticalErrorAction(addCritical); }); })                  .Done(c => c.CriticalErrorsRaised >= 2 && exceptions.Count >= 2)                  .Run();
Magic Number,NServiceBus.AcceptanceTests.Core.CriticalError,When_raising_critical_error_at_startup,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\CriticalError\When_raising_critical_error_at_startup.cs,Should_call_critical_error_action_for_every_error_that_occurred_before_startup,The following statement contains a magic number: Assert.AreEqual(2' context.CriticalErrorsRaised);
Magic Number,NServiceBus.AcceptanceTests.Core.DelayedDelivery.TimeoutManager,FakeTimeoutStorage,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\DelayedDelivery\TimeoutManager\When_dispatch_fails_on_removal_SendsAtomicWithReceive.cs,GetNextChunk,The following statement contains a magic number: return Task.FromResult(new TimeoutsChunk(timeouts' DateTime.UtcNow + TimeSpan.FromSeconds(10)));
Magic Number,NServiceBus.AcceptanceTests.Core.DelayedDelivery.TimeoutManager,FakeTimeoutStorage,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\DelayedDelivery\TimeoutManager\When_dispatch_fails_on_removal_SendsAtomicWithReceive.cs,GetNextChunk,The following statement contains a magic number: return Task.FromResult(new TimeoutsChunk(timeouts' DateTime.UtcNow + TimeSpan.FromSeconds(10)));
Magic Number,NServiceBus.AcceptanceTests.Core.DelayedDelivery.TimeoutManager,FakeTimeoutStorage,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\DelayedDelivery\TimeoutManager\When_dispatch_fails_on_removal_SendsAtomicWithReceive.cs,GetNextChunk,The following statement contains a magic number: return Task.FromResult(new TimeoutsChunk(timeouts' DateTime.UtcNow + TimeSpan.FromSeconds(10)));
Magic Number,NServiceBus.AcceptanceTests.Core.DelayedDelivery.TimeoutManager,FakeTimeoutStorage,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\DelayedDelivery\TimeoutManager\When_dispatch_fails_on_removal_SendsAtomicWithReceive.cs,GetNextChunk,The following statement contains a magic number: return Task.FromResult(new TimeoutsChunk(new TimeoutsChunk.Timeout[0]' DateTime.UtcNow + TimeSpan.FromSeconds(10)));
Magic Number,NServiceBus.AcceptanceTests.Core.DelayedDelivery.TimeoutManager,When_reusing_sendoptions_with_delay,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\DelayedDelivery\TimeoutManager\When_reusing_sendoptions_with_delay.cs,Should_delay_both_messages,The following statement contains a magic number: var context = await Scenario.Define<Context>()                  .WithEndpoint<EndpointWithTimeoutManager>(e => e.When(async s =>                  {                      var reusedSendOptions = new SendOptions();                      reusedSendOptions.DelayDeliveryWith(TimeSpan.FromMilliseconds(1));                      reusedSendOptions.RouteToThisEndpoint();                        await s.Send(new DelayedMessage()' reusedSendOptions);                      await s.Send(new DelayedMessage()' reusedSendOptions);                  }))                  .Done(c => c.IncomingMessageHeaders.Count >= 2)                  .Run();
Magic Number,NServiceBus.AcceptanceTests.Core.DelayedDelivery.TimeoutManager,When_timeout_storage_fails,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\DelayedDelivery\TimeoutManager\When_timeout_storage_fails.cs,Should_retry_and_move_to_error,The following statement contains a magic number: var context = await Scenario.Define<Context>()                  .WithEndpoint<Endpoint>(b => b.DoNotFailOnErrorMessages()                      .When((bus' c) =>                      {                          var options = new SendOptions();                            options.DelayDeliveryWith(TimeSpan.FromDays(30));                            options.RouteToThisEndpoint();                            return bus.Send(new MyMessage()' options);                      }))                  .WithEndpoint<ErrorSpy>()                  .Done(c => c.FailedTimeoutMovedToError)                  .Run();
Magic Number,NServiceBus.AcceptanceTests.Core.DelayedDelivery.TimeoutManager,When_timeout_storage_fails,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\DelayedDelivery\TimeoutManager\When_timeout_storage_fails.cs,Should_retry_and_move_to_error,The following statement contains a magic number: Assert.AreEqual(5' context.NumTimesStorageCalled);
Magic Number,NServiceBus.AcceptanceTests.Core.DelayedDelivery.TimeoutManager,When_using_external_timeout_manager_code_first,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\DelayedDelivery\TimeoutManager\When_using_external_timeout_manager_code_first.cs,Should_send_delayed_messages_to_external_TimeoutManager,The following statement contains a magic number: var context = await Scenario.Define<Context>()                  .WithEndpoint<EndpointWithTimeoutManager>()                  .WithEndpoint<Endpoint>(b => b.When((session' c) =>                  {                      var options = new SendOptions();                        options.DelayDeliveryWith(TimeSpan.FromDays(5));                      options.RouteToThisEndpoint();                        return session.Send(new DelayedMessage()' options);                  }))                  .Done(c => c.ExternalTimeoutManagerInvoked)                  .Run();
Magic Number,NServiceBus.AcceptanceTests.Core.Diagnostics,When_message_is_audited,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\Diagnostics\When_message_is_audited.cs,Should_contain_processing_stats_headers,The following statement contains a magic number: Assert.That(processingStarted' Is.EqualTo(now).Within(TimeSpan.FromSeconds(30)));
Magic Number,NServiceBus.AcceptanceTests.Core.Diagnostics,When_message_is_audited,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\Diagnostics\When_message_is_audited.cs,Should_contain_processing_stats_headers,The following statement contains a magic number: Assert.That(processingEnded' Is.EqualTo(now).Within(TimeSpan.FromSeconds(30)));
Magic Number,NServiceBus.AcceptanceTests.Core.Diagnostics,When_message_is_audited,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\Diagnostics\When_message_is_audited.cs,Should_contain_processing_stats_headers,The following statement contains a magic number: Assert.That(timeSent' Is.EqualTo(now).Within(TimeSpan.FromSeconds(30)));
Magic Number,NServiceBus.AcceptanceTests.Core.Diagnostics,When_message_is_faulted,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\Diagnostics\When_message_is_faulted.cs,Should_contain_processing_stats_headers,The following statement contains a magic number: Assert.That(processingStarted' Is.EqualTo(now).Within(TimeSpan.FromSeconds(30)));
Magic Number,NServiceBus.AcceptanceTests.Core.Diagnostics,When_message_is_faulted,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\Diagnostics\When_message_is_faulted.cs,Should_contain_processing_stats_headers,The following statement contains a magic number: Assert.That(processingEnded' Is.EqualTo(now).Within(TimeSpan.FromSeconds(30)));
Magic Number,NServiceBus.AcceptanceTests.Core.Diagnostics,When_message_is_faulted,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\Diagnostics\When_message_is_faulted.cs,Should_contain_processing_stats_headers,The following statement contains a magic number: Assert.That(timeSent' Is.EqualTo(now).Within(TimeSpan.FromSeconds(30)));
Magic Number,NServiceBus.AcceptanceTests.Core.Diagnostics,When_message_is_faulted,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\Diagnostics\When_message_is_faulted.cs,Should_contain_processing_stats_headers,The following statement contains a magic number: Assert.That(timeSentWhenFailedMessageWasSentToTheErrorQueue' Is.EqualTo(now).Within(TimeSpan.FromSeconds(30)));
Magic Number,NServiceBus.AcceptanceTests.Core.FakeTransport.ProcessingOptimizations,When_using_concurrency_limit,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\FakeTransport\ProcessingOptimizations\When_using_concurrency_limit.cs,Should_pass_it_to_the_transport,The following statement contains a magic number: return Scenario.Define<ScenarioContext>()                  .WithEndpoint<ThrottledEndpoint>(b => b.CustomConfig(c => c.LimitMessageProcessingConcurrencyTo(10)))                  .Done(c => c.EndpointsStarted)                  .Run();
Magic Number,NServiceBus.AcceptanceTests.Core.FakeTransport.ProcessingOptimizations,FakeReceiver,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\FakeTransport\ProcessingOptimizations\When_using_concurrency_limit.cs,Start,The following statement contains a magic number: Assert.AreEqual(10' limitations.MaxConcurrency);
Magic Number,NServiceBus.AcceptanceTests.Core.Pipeline,When_disabling_payload_restrictions,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\LearningTransport\When_disabling_payload_restrictions.cs,Should_allow_messages_above_64kb,The following statement contains a magic number: var context = await Scenario.Define<Context>()                  .WithEndpoint<LargePayloadEndpoint>(b => b.When(session => session.SendLocal(new SomeMessage                  {                      LargeProperty = new byte[1024 * 64]                  })))                  .Done(c => c.MessageReceived)                  .Run();
Magic Number,NServiceBus.AcceptanceTests.Core.Pipeline,When_disabling_payload_restrictions,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\LearningTransport\When_disabling_payload_restrictions.cs,Should_allow_messages_above_64kb,The following statement contains a magic number: var context = await Scenario.Define<Context>()                  .WithEndpoint<LargePayloadEndpoint>(b => b.When(session => session.SendLocal(new SomeMessage                  {                      LargeProperty = new byte[1024 * 64]                  })))                  .Done(c => c.MessageReceived)                  .Run();
Magic Number,NServiceBus.AcceptanceTests.Core.Pipeline,When_providing_custom_handler_registry,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\Pipeline\When_providing_custom_handler_registry.cs,Should_invoke_manually_registered_handlers,The following statement contains a magic number: var context = await Scenario.Define<Context>()                  .WithEndpoint<EndpointWithRegularHandler>(e => e                      .When(ctx => ctx.SendLocal(new SomeCommand()))                      .When(ctx => ctx.Publish(new SomeEvent()))) // verify autosubscribe picks up the handlers too                  .Done(c => c.RegularCommandHandlerInvoked                             && c.ManuallyRegisteredCommandHandlerInvoked                             && c.RegularEventHandlerInvoked                             && c.ManuallyRegisteredEventHandlerInvoked)                  .Run(TimeSpan.FromSeconds(10));
Magic Number,NServiceBus.AcceptanceTests.Core.Pipeline,When_reusing_sendoptions,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\Pipeline\When_reusing_sendoptions.cs,Should_generate_new_message_id_for_every_message,The following statement contains a magic number: var context = await Scenario.Define<Context>()                  .WithEndpoint<Endpoint>(e => e                      .When(async s =>                      {                          var sendOptions = new SendOptions();                          sendOptions.RouteToThisEndpoint();                          await s.Send(new SomeCommand()' sendOptions);                          await s.Send(new SomeCommand()' sendOptions);                          await s.Send(new SomeCommand()' sendOptions);                      }))                  .Done(c => c.ReceivedMessageIds.Count >= 3)                  .Run();
Magic Number,NServiceBus.AcceptanceTests.Core.Pipeline,When_reusing_sendoptions,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\Pipeline\When_reusing_sendoptions.cs,Should_generate_new_message_id_for_every_message,The following statement contains a magic number: Assert.AreEqual(3' context.ReceivedMessageIds.Count);
Magic Number,NServiceBus.AcceptanceTests.Core.Pipeline,When_reusing_sendoptions,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\Pipeline\When_reusing_sendoptions.cs,Should_generate_new_message_id_for_every_message,The following statement contains a magic number: Assert.AreEqual(3' context.ReceivedMessageIds.Distinct().Count()' "the message ids should be distinct");
Magic Number,NServiceBus.AcceptanceTests.Core.Pipeline,When_using_per_uow_component_in_the_pipeline,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\Pipeline\When_using_per_uow_component_in_the_pipeline.cs,It_should_be_scoped_to_uow_both_in_behavior_and_in_the_handler,The following statement contains a magic number: var context = await Scenario.Define<Context>()                  .WithEndpoint<Endpoint>(e => e                      .When(async s =>                      {                          await SendMessage(s).ConfigureAwait(false);                          await SendMessage(s).ConfigureAwait(false);                      }))                  .Done(c => c.MessagesProcessed >= 2)                  .Run();
Magic Number,NServiceBus.AcceptanceTests.Core.Recoverability,EndpointWithFailingHandler,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\Recoverability\When_configuring_unrecoverable_exception.cs,EndpointWithFailingHandler,The following statement contains a magic number: EndpointSetup<DefaultServer>((config' context) =>                  {                      config.Recoverability().AddUnrecoverableException(typeof(CustomException));                      config.Recoverability().Immediate(i => i.NumberOfRetries(2));                      config.Recoverability().Delayed(d => d.NumberOfRetries(2));                  });
Magic Number,NServiceBus.AcceptanceTests.Core.Recoverability,EndpointWithFailingHandler,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\Recoverability\When_configuring_unrecoverable_exception.cs,EndpointWithFailingHandler,The following statement contains a magic number: EndpointSetup<DefaultServer>((config' context) =>                  {                      config.Recoverability().AddUnrecoverableException(typeof(CustomException));                      config.Recoverability().Immediate(i => i.NumberOfRetries(2));                      config.Recoverability().Delayed(d => d.NumberOfRetries(2));                  });
Magic Number,NServiceBus.AcceptanceTests.Core.Recoverability,When_custom_policy_executed,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\Recoverability\When_custom_policy_executed.cs,Should_provide_error_context_to_policy,The following statement contains a magic number: Assert.That(context.ErrorContexts.Count' Is.EqualTo(2)' "because the custom policy should have been invoked twice");
Magic Number,NServiceBus.AcceptanceTests.Core.Recoverability,When_delayed_retries_with_regular_exception,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\Recoverability\When_delayed_retries_with_regular_exception.cs,Should_preserve_the_original_body_for_regular_exceptions,The following statement contains a magic number: var context = await Scenario.Define<Context>()                  .WithEndpoint<RetryEndpoint>(b => b                      .When(session => session.SendLocal(new MessageToBeRetried()))                      .DoNotFailOnErrorMessages())                  .Done(c => c.FailedMessages.Any())                  .Run(TimeSpan.FromSeconds(120));
Magic Number,NServiceBus.AcceptanceTests.Core.Recoverability,RetryEndpoint,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\Recoverability\When_delayed_retries_with_regular_exception.cs,RetryEndpoint,The following statement contains a magic number: EndpointSetup<DefaultServer'Context>((config' context) =>                  {                      config.EnableFeature<TimeoutManager>();                      config.RegisterMessageMutator(new BodyMutator(context));                      config.Recoverability().Delayed(settings => settings.TimeIncrease(TimeSpan.FromMilliseconds(1)));                      config.Recoverability().Immediate(settings => settings.NumberOfRetries(3));                  });
Magic Number,NServiceBus.AcceptanceTests.Core.Recoverability,When_subscribing_to_delayed_retries_notifications,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\Recoverability\When_subscribing_to_delayed_retries_notifications.cs,Should_trigger_notification_on_delayed_retry,The following statement contains a magic number: Assert.AreEqual(4 * 3' context.TotalNumberOfHandlerInvocations);
Magic Number,NServiceBus.AcceptanceTests.Core.Recoverability,When_subscribing_to_delayed_retries_notifications,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\Recoverability\When_subscribing_to_delayed_retries_notifications.cs,Should_trigger_notification_on_delayed_retry,The following statement contains a magic number: Assert.AreEqual(4 * 3' context.TotalNumberOfHandlerInvocations);
Magic Number,NServiceBus.AcceptanceTests.Core.Recoverability,When_subscribing_to_delayed_retries_notifications,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\Recoverability\When_subscribing_to_delayed_retries_notifications.cs,Should_trigger_notification_on_delayed_retry,The following statement contains a magic number: Assert.AreEqual(2' context.NumberOfDelayedRetriesPerformed);
Magic Number,NServiceBus.AcceptanceTests.Core.Recoverability,When_subscribing_to_delayed_retries_notifications,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\Recoverability\When_subscribing_to_delayed_retries_notifications.cs,Should_trigger_notification_on_delayed_retry,The following statement contains a magic number: Assert.AreEqual(2' context.LastDelayedRetryInfo.RetryAttempt);
Magic Number,NServiceBus.AcceptanceTests.Core.Recoverability,DelayedRetriesEndpoint,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\Recoverability\When_subscribing_to_delayed_retries_notifications.cs,DelayedRetriesEndpoint,The following statement contains a magic number: EndpointSetup<DefaultServer>((config' context) =>                  {                      var testContext = (Context)context.ScenarioContext;                      config.EnableFeature<TimeoutManager>();                        var recoverability = config.Recoverability();                      recoverability.Failed(f => f.OnMessageSentToErrorQueue(failedMessage =>                      {                          testContext.MessageSentToError = true;                          return Task.FromResult(0);                      }));                      recoverability.Immediate(settings =>                      {                          settings.NumberOfRetries(3);                          settings.OnMessageBeingRetried(retry =>                          {                              testContext.TotalNumberOfImmediateRetriesEventInvocations++;                              return Task.FromResult(0);                          });                      });                      recoverability.Delayed(settings =>                      {                          settings.NumberOfRetries(2);                          settings.TimeIncrease(TimeSpan.FromMilliseconds(1));                          settings.OnMessageBeingRetried(retry =>                          {                              testContext.NumberOfDelayedRetriesPerformed++;                              testContext.LastDelayedRetryInfo = retry;                              return Task.FromResult(0);                          });                      });                  });
Magic Number,NServiceBus.AcceptanceTests.Core.Recoverability,DelayedRetriesEndpoint,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\Recoverability\When_subscribing_to_delayed_retries_notifications.cs,DelayedRetriesEndpoint,The following statement contains a magic number: EndpointSetup<DefaultServer>((config' context) =>                  {                      var testContext = (Context)context.ScenarioContext;                      config.EnableFeature<TimeoutManager>();                        var recoverability = config.Recoverability();                      recoverability.Failed(f => f.OnMessageSentToErrorQueue(failedMessage =>                      {                          testContext.MessageSentToError = true;                          return Task.FromResult(0);                      }));                      recoverability.Immediate(settings =>                      {                          settings.NumberOfRetries(3);                          settings.OnMessageBeingRetried(retry =>                          {                              testContext.TotalNumberOfImmediateRetriesEventInvocations++;                              return Task.FromResult(0);                          });                      });                      recoverability.Delayed(settings =>                      {                          settings.NumberOfRetries(2);                          settings.TimeIncrease(TimeSpan.FromMilliseconds(1));                          settings.OnMessageBeingRetried(retry =>                          {                              testContext.NumberOfDelayedRetriesPerformed++;                              testContext.LastDelayedRetryInfo = retry;                              return Task.FromResult(0);                          });                      });                  });
Magic Number,NServiceBus.AcceptanceTests.Core.Recoverability,DelayedRetriesEndpoint,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\Recoverability\When_subscribing_to_delayed_retries_notifications.cs,DelayedRetriesEndpoint,The following statement contains a magic number: EndpointSetup<DefaultServer>((config' context) =>                  {                      var testContext = (Context)context.ScenarioContext;                      config.EnableFeature<TimeoutManager>();                        var recoverability = config.Recoverability();                      recoverability.Failed(f => f.OnMessageSentToErrorQueue(failedMessage =>                      {                          testContext.MessageSentToErrorException = failedMessage.Exception;                          testContext.MessageSentToError = true;                          return Task.FromResult(0);                      }));                      recoverability.Delayed(settings =>                      {                          settings.NumberOfRetries(2);                          settings.TimeIncrease(TimeSpan.FromMilliseconds(1));                          settings.OnMessageBeingRetried(retry =>                          {                              testContext.NumberOfDelayedRetriesPerformed++;                              return Task.FromResult(0);                          });                      });                      recoverability.Immediate(settings =>                      {                          settings.NumberOfRetries(3);                          settings.OnMessageBeingRetried(retry =>                          {                              testContext.TotalNumberOfImmediateRetriesEventInvocations++;                              return Task.FromResult(0);                          });                      });                  });
Magic Number,NServiceBus.AcceptanceTests.Core.Recoverability,DelayedRetriesEndpoint,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\Recoverability\When_subscribing_to_delayed_retries_notifications.cs,DelayedRetriesEndpoint,The following statement contains a magic number: EndpointSetup<DefaultServer>((config' context) =>                  {                      var testContext = (Context)context.ScenarioContext;                      config.EnableFeature<TimeoutManager>();                        var recoverability = config.Recoverability();                      recoverability.Failed(f => f.OnMessageSentToErrorQueue(failedMessage =>                      {                          testContext.MessageSentToErrorException = failedMessage.Exception;                          testContext.MessageSentToError = true;                          return Task.FromResult(0);                      }));                      recoverability.Delayed(settings =>                      {                          settings.NumberOfRetries(2);                          settings.TimeIncrease(TimeSpan.FromMilliseconds(1));                          settings.OnMessageBeingRetried(retry =>                          {                              testContext.NumberOfDelayedRetriesPerformed++;                              return Task.FromResult(0);                          });                      });                      recoverability.Immediate(settings =>                      {                          settings.NumberOfRetries(3);                          settings.OnMessageBeingRetried(retry =>                          {                              testContext.TotalNumberOfImmediateRetriesEventInvocations++;                              return Task.FromResult(0);                          });                      });                  });
Magic Number,NServiceBus.AcceptanceTests.Core.Recoverability,When_subscribing_to_error_notifications,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\Recoverability\When_subscribing_to_error_notifications.cs,Should_retain_exception_details_over_immediate_and_delayed_retries,The following statement contains a magic number: Assert.AreEqual(4 * 3' context.TotalNumberOfHandlerInvocations);
Magic Number,NServiceBus.AcceptanceTests.Core.Recoverability,When_subscribing_to_error_notifications,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\Recoverability\When_subscribing_to_error_notifications.cs,Should_retain_exception_details_over_immediate_and_delayed_retries,The following statement contains a magic number: Assert.AreEqual(4 * 3' context.TotalNumberOfHandlerInvocations);
Magic Number,NServiceBus.AcceptanceTests.Core.Recoverability,When_subscribing_to_error_notifications,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\Recoverability\When_subscribing_to_error_notifications.cs,Should_retain_exception_details_over_immediate_and_delayed_retries,The following statement contains a magic number: Assert.AreEqual(3 * 3' context.TotalNumberOfImmediateRetriesEventInvocations);
Magic Number,NServiceBus.AcceptanceTests.Core.Recoverability,When_subscribing_to_error_notifications,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\Recoverability\When_subscribing_to_error_notifications.cs,Should_retain_exception_details_over_immediate_and_delayed_retries,The following statement contains a magic number: Assert.AreEqual(3 * 3' context.TotalNumberOfImmediateRetriesEventInvocations);
Magic Number,NServiceBus.AcceptanceTests.Core.Recoverability,When_subscribing_to_error_notifications,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\Recoverability\When_subscribing_to_error_notifications.cs,Should_retain_exception_details_over_immediate_and_delayed_retries,The following statement contains a magic number: Assert.AreEqual(2' context.NumberOfDelayedRetriesPerformed);
Magic Number,NServiceBus.AcceptanceTests.Core.Recoverability,When_subscribing_to_immediate_retries_notifications,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\Recoverability\When_subscribing_to_immediate_retries_notifications.cs,Should_trigger_notification_on_immediate_retry,The following statement contains a magic number: Assert.AreEqual(4' context.TotalNumberOfHandlerInvocations);
Magic Number,NServiceBus.AcceptanceTests.Core.Recoverability,When_subscribing_to_immediate_retries_notifications,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\Recoverability\When_subscribing_to_immediate_retries_notifications.cs,Should_trigger_notification_on_immediate_retry,The following statement contains a magic number: Assert.AreEqual(3' context.TotalNumberOfImmediateRetriesEventInvocations);
Magic Number,NServiceBus.AcceptanceTests.Core.Recoverability,When_subscribing_to_immediate_retries_notifications,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\Recoverability\When_subscribing_to_immediate_retries_notifications.cs,Should_trigger_notification_on_immediate_retry,The following statement contains a magic number: Assert.AreEqual(2' context.LastImmediateRetryInfo.RetryAttempt);
Magic Number,NServiceBus.AcceptanceTests.Core.Recoverability,RetryingEndpoint,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\Recoverability\When_subscribing_to_immediate_retries_notifications.cs,RetryingEndpoint,The following statement contains a magic number: EndpointSetup<DefaultServer>((config' context) =>                  {                      var testContext = (Context)context.ScenarioContext;                        var recoverability = config.Recoverability();                      recoverability.Failed(f => f.OnMessageSentToErrorQueue(failedMessage =>                      {                          testContext.MessageSentToError = true;                          return Task.FromResult(0);                      }));                        recoverability.Immediate(immediateRetriesSettings =>                      {                          immediateRetriesSettings.NumberOfRetries(3);                          immediateRetriesSettings.OnMessageBeingRetried(retryInfo =>                          {                              testContext.TotalNumberOfImmediateRetriesEventInvocations++;                              testContext.LastImmediateRetryInfo = retryInfo;                              return Task.FromResult(0);                          });                      });                  });
Magic Number,NServiceBus.AcceptanceTests.Core.Routing,StartMessageHandler,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\Routing\When_callbacks_are_used_to_reply_with_int_or_enum.cs,Handle,The following statement contains a magic number: await context.Reply(10);
Magic Number,NServiceBus.AcceptanceTests.Routing,When_extending_command_routing,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Routing\When_extending_command_routing.cs,Should_route_commands_correctly,The following statement contains a magic number: var ctx = await Scenario.Define<Context>()                  .WithEndpoint<Sender>(b =>                      b.When(c => c.EndpointsStarted' async session =>                      {                          await session.Send(new MyCommand());                          await session.Send(new MyCommand());                          await session.Send(new MyCommand());                          await session.Send(new MyCommand());                      })                  )                  .WithEndpoint<Receiver>()                  .Done(c => c.MessageDelivered >= 4)                  .Run();
Magic Number,NServiceBus.AcceptanceTests.Routing,When_extending_command_routing,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Routing\When_extending_command_routing.cs,Should_route_commands_correctly,The following statement contains a magic number: Assert.IsTrue(ctx.MessageDelivered >= 4);
Magic Number,NServiceBus.AcceptanceTests.Routing,When_making_endpoint_uniquely_addressable,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Routing\When_making_endpoint_uniquely_addressable.cs,Should_be_addressable_both_by_shared_queue_and_unique_queue,The following statement contains a magic number: Assert.AreEqual(2' context.MessagesReceived);
Magic Number,NServiceBus.AcceptanceTests.Routing,MyMessageHandler,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Routing\When_making_endpoint_uniquely_addressable.cs,Handle,The following statement contains a magic number: return Task.Delay(2000);
Magic Number,NServiceBus.AcceptanceTests.Routing,MyMessageHandler,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Routing\When_making_endpoint_uniquely_addressable.cs,Handle,The following statement contains a magic number: return Task.Delay(2000);
Magic Number,NServiceBus.AcceptanceTests.Routing,When_publishing,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Routing\When_publishing.cs,Should_be_delivered_to_all_subscribers,The following statement contains a magic number: var context = await Scenario.Define<Context>()                  .WithEndpoint<Publisher>(b =>                      b.When(c => c.Subscriber1Subscribed && c.Subscriber2Subscribed' (session' c) =>                      {                          c.AddTrace("Both subscribers is subscribed' going to publish MyEvent");                            var options = new PublishOptions();                            options.SetHeader("MyHeader"' "SomeValue");                          return session.Publish(new MyEvent()' options);                      })                  )                  .WithEndpoint<Subscriber1>(b => b.When(async (session' ctx) =>                  {                      await session.Subscribe<MyEvent>();                      if (ctx.HasNativePubSubSupport)                      {                          ctx.Subscriber1Subscribed = true;                          ctx.AddTrace("Subscriber1 is now subscribed (at least we have asked the broker to be subscribed)");                      }                      else                      {                          ctx.AddTrace("Subscriber1 has now asked to be subscribed to MyEvent");                      }                  }))                  .WithEndpoint<Subscriber2>(b => b.When(async (session' ctx) =>                  {                      await session.Subscribe<MyEvent>();                        if (ctx.HasNativePubSubSupport)                      {                          ctx.Subscriber2Subscribed = true;                          ctx.AddTrace("Subscriber2 is now subscribed (at least we have asked the broker to be subscribed)");                      }                      else                      {                          ctx.AddTrace("Subscriber2 has now asked to be subscribed to MyEvent");                      }                  }))                  .Done(c => c.Subscriber1GotTheEvent && c.Subscriber2GotTheEvent)                  .Run(TimeSpan.FromSeconds(10));
Magic Number,NServiceBus.AcceptanceTests.Routing,When_publishing_an_event_implementing_two_unrelated_interfaces,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Routing\When_publishing_an_event_implementing_two_unrelated_interfaces.cs,Event_should_be_published_using_instance_type,The following statement contains a magic number: var context = await Scenario.Define<Context>(c => { c.Id = Guid.NewGuid(); })                  .WithEndpoint<Publisher>(b =>                      b.When(c => c.EventASubscribed && c.EventBSubscribed' (session' ctx) =>                      {                          var message = new CompositeEvent                          {                              ContextId = ctx.Id                          };                          return session.Publish(message);                      }))                  .WithEndpoint<Subscriber>(b => b.When(async (session' ctx) =>                  {                      await session.Subscribe<IEventA>();                      await session.Subscribe<IEventB>();                        if (ctx.HasNativePubSubSupport)                      {                          ctx.EventASubscribed = true;                          ctx.EventBSubscribed = true;                      }                  }))                  .Done(c => c.GotEventA && c.GotEventB)                  .Run(TimeSpan.FromSeconds(20));
Magic Number,NServiceBus.AcceptanceTests.Routing,When_publishing_using_base_type,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Routing\When_publishing_using_base_type.cs,Event_should_be_published_using_instance_type,The following statement contains a magic number: var context = await Scenario.Define<Context>()                  .WithEndpoint<Publisher>(b =>                      b.When(c => c.Subscriber1Subscribed' session =>                      {                          IMyEvent message = new EventMessage();                            return session.Publish(message);                      }))                  .WithEndpoint<Subscriber1>(b => b.When(async (session' ctx) =>                  {                      await session.Subscribe<EventMessage>();                        if (ctx.HasNativePubSubSupport)                      {                          ctx.Subscriber1Subscribed = true;                      }                  }))                  .Done(c => c.Subscriber1GotTheEvent)                  .Run(TimeSpan.FromSeconds(20));
Magic Number,NServiceBus.AcceptanceTests.Routing,When_using_custom_routing_strategy,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Routing\When_using_custom_routing_strategy.cs,Should_route_commands_correctly,The following statement contains a magic number: var ctx = await Scenario.Define<Context>()                  .WithEndpoint<Sender>(b =>                      b.When(c => c.EndpointsStarted' async session =>                      {                          await session.Send(new MyCommand { Instance = Discriminator1 });                          await session.Send(new MyCommand { Instance = Discriminator2 });                          await session.Send(new MyCommand { Instance = Discriminator1 });                          await session.Send(new MyCommand { Instance = Discriminator1 });                      })                  )                  .WithEndpoint<Receiver>(b => b.CustomConfig(cfg => cfg.MakeInstanceUniquelyAddressable(Discriminator1)))                  .WithEndpoint<Receiver>(b => b.CustomConfig(cfg => cfg.MakeInstanceUniquelyAddressable(Discriminator2)))                  .Done(c => c.MessageDeliveredReceiver1 >= 3 && c.MessageDeliveredReceiver2 >=1)                  .Run();
Magic Number,NServiceBus.AcceptanceTests.Routing,When_using_custom_routing_strategy,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Routing\When_using_custom_routing_strategy.cs,Should_route_commands_correctly,The following statement contains a magic number: Assert.AreEqual(3' ctx.MessageDeliveredReceiver1);
Magic Number,NServiceBus.AcceptanceTests.Core.Sagas,When_mapping_saga_messages_using_base_classes,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\Sagas\When_mapping_saga_messages_using_base_classes.cs,Should_apply_base_class_mapping_to_sub_classes,The following statement contains a magic number: var context = await Scenario.Define<Context>()                  .WithEndpoint<SagaEndpoint>(b => b.When(session =>                  {                      var startSagaMessage = new StartSagaMessage                      {                          SomeId = correlationId                      };                      return session.SendLocal(startSagaMessage);                  }))                  .Done(c => c.SecondMessageFoundExistingSaga)                  .Run(TimeSpan.FromSeconds(20));
Magic Number,NServiceBus.AcceptanceTests.Core.Sagas,CustomSagaIdGenerator,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\Sagas\When_overriding_saga_id_creation.cs,ToGuid,The following statement contains a magic number: Array.Resize(ref hashedBytes' 16);
Magic Number,NServiceBus.AcceptanceTests.Core.Timeout,When_timeout_storage_is_unavailable_temporarily,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\Timeout\When_timeout_storage_is_unavailable_temporarily.cs,Endpoint_should_not_shutdown,The following statement contains a magic number: var stopTime = DateTime.UtcNow.AddSeconds(2);
Magic Number,NServiceBus.AcceptanceTests.Core.Timeout,Endpoint,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Core\Timeout\When_timeout_storage_is_unavailable_temporarily.cs,Endpoint,The following statement contains a magic number: EndpointSetup<DefaultServer>(config =>                  {                      config.GetSettings().Set("TimeToWaitBeforeTriggeringCriticalErrorForTimeoutPersisterReceiver"' TimeSpan.FromSeconds(3));                      config.EnableFeature<TimeoutManager>();                      config.UsePersistence<CustomTimeoutPersister' StorageType.Timeouts>();                  });
Magic Number,NServiceBus.AcceptanceTests.DataBus,MyDataBus,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\DataBus\When_using_custom_IDataBus.cs,Get,The following statement contains a magic number: var fileStream = new FileStream(Context.TempPath' FileMode.Open' FileAccess.Read' FileShare.Read' 4096' true);
Magic Number,NServiceBus.AcceptanceTests.DelayedDelivery,When_deferring_a_message,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\DelayedDelivery\When_Deferring_a_message.cs,Should_delay_delivery,The following statement contains a magic number: var delay = TimeSpan.FromSeconds(2);
Magic Number,NServiceBus.AcceptanceTests.DelayedDelivery,When_deferring_to_non_local,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\DelayedDelivery\When_deferring_to_non_local.cs,Message_should_be_received,The following statement contains a magic number: var delay = TimeSpan.FromSeconds(2);
Magic Number,NServiceBus.AcceptanceTests.DelayedDelivery,When_using_special_characters_in_headers,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\DelayedDelivery\When_using_special_characters_in_headers.cs,Should_store_unicode_characters_in_timeout_persistence_for_delayed_messages,The following statement contains a magic number: var context = await Scenario.Define<Context>()                  .WithEndpoint<EndpointHandlingDelayedMessages>(e => e                      .When(s =>                      {                          var options = new SendOptions();                          options.RouteToThisEndpoint();                          options.DelayDeliveryWith(TimeSpan.FromSeconds(3));                          foreach (var specialHeader in specialHeaders)                          {                              options.SetHeader(specialHeader.Key' specialHeader.Value);                          }                          return s.Send(new DelayedMessage()' options);                      }))                  .Done(c => c.ReceivedMessageHeaders != null)                  .Run();
Magic Number,NServiceBus.AcceptanceTests.Outbox,When_a_duplicate_message_arrives,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Outbox\When_a_duplicate_message_arrives.cs,Should_not_invoke_handler_for_a_duplicate_message,The following statement contains a magic number: var context = await Scenario.Define<Context>()                  .WithEndpoint<OutboxEndpoint>(b => b.When(async session =>                  {                      var duplicateMessageId = Guid.NewGuid().ToString();                        var options = new SendOptions();                        options.SetMessageId(duplicateMessageId);                      options.RouteToThisEndpoint();                        await session.Send(new PlaceOrder()' options);                      await session.Send(new PlaceOrder()' options);                      await session.SendLocal(new PlaceOrder                      {                          Terminator = true                      });                  }))                  .WithEndpoint<DownstreamEndpoint>()                  .Done(c => c.Done && c.MessagesReceivedByDownstreamEndpoint >= 2 && c.MessagesReceivedByOutboxEndpoint >= 2)                  .Run();
Magic Number,NServiceBus.AcceptanceTests.Outbox,When_a_duplicate_message_arrives,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Outbox\When_a_duplicate_message_arrives.cs,Should_not_invoke_handler_for_a_duplicate_message,The following statement contains a magic number: var context = await Scenario.Define<Context>()                  .WithEndpoint<OutboxEndpoint>(b => b.When(async session =>                  {                      var duplicateMessageId = Guid.NewGuid().ToString();                        var options = new SendOptions();                        options.SetMessageId(duplicateMessageId);                      options.RouteToThisEndpoint();                        await session.Send(new PlaceOrder()' options);                      await session.Send(new PlaceOrder()' options);                      await session.SendLocal(new PlaceOrder                      {                          Terminator = true                      });                  }))                  .WithEndpoint<DownstreamEndpoint>()                  .Done(c => c.Done && c.MessagesReceivedByDownstreamEndpoint >= 2 && c.MessagesReceivedByOutboxEndpoint >= 2)                  .Run();
Magic Number,NServiceBus.AcceptanceTests.Outbox,When_a_duplicate_message_arrives,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Outbox\When_a_duplicate_message_arrives.cs,Should_not_invoke_handler_for_a_duplicate_message,The following statement contains a magic number: Assert.AreEqual(2' context.MessagesReceivedByDownstreamEndpoint);
Magic Number,NServiceBus.AcceptanceTests.Outbox,When_a_duplicate_message_arrives,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Outbox\When_a_duplicate_message_arrives.cs,Should_not_invoke_handler_for_a_duplicate_message,The following statement contains a magic number: Assert.AreEqual(2' context.MessagesReceivedByOutboxEndpoint);
Magic Number,NServiceBus.AcceptanceTests.Outbox,When_blowing_up_just_after_dispatch,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Outbox\When_blowing_up_just_after_dispatch.cs,Should_still_release_the_outgoing_messages_to_the_transport,The following statement contains a magic number: var context = await Scenario.Define<Context>()                  .WithEndpoint<NonDtcReceivingEndpoint>(b => b                      .DoNotFailOnErrorMessages() // PlaceOrder should fail due to exception after dispatch                      .When(session => session.SendLocal(new PlaceOrder())))                  .Done(c => c.OrderAckReceived == 1)                  .Run(TimeSpan.FromSeconds(20));
Magic Number,NServiceBus.AcceptanceTests.Outbox,When_clearing_saga_timeouts,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Outbox\When_clearing_saga_timeouts.cs,Should_record_the_request_to_clear_in_outbox,The following statement contains a magic number: Assert.AreEqual(2' context.NumberOfOps' "Request to clear and a done signal should be in the outbox");
Magic Number,NServiceBus.AcceptanceTests.Outbox,When_receiving_a_message_not_found_in_the_outbox,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Outbox\When_receiving_a_message.cs,Should_handle_it,The following statement contains a magic number: var context = await Scenario.Define<Context>()                  .WithEndpoint<NonDtcReceivingEndpoint>(b => b.When(session => session.SendLocal(new PlaceOrder())))                  .Done(c => c.OrderAckReceived == 1)                  .Run(TimeSpan.FromSeconds(20));
Magic Number,NServiceBus.AcceptanceTests.Recoverability,RetryEndpoint,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Recoverability\When_custom_policy_always_moves_to_error.cs,RetryPolicy,The following statement contains a magic number: return RecoverabilityAction.DelayedRetry(TimeSpan.FromMilliseconds(10));
Magic Number,NServiceBus.AcceptanceTests.Recoverability,RetryEndpoint,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Recoverability\When_custom_policy_always_moves_to_error.cs,RetryEndpoint,The following statement contains a magic number: EndpointSetup<DefaultServer>((config' context) =>                  {                      config.ConfigureTransport().Transactions(TransportTransactionMode.None);                      var recoverability = config.Recoverability();                      recoverability.Immediate(i => i.NumberOfRetries(3));                      recoverability.Delayed(d => d.NumberOfRetries(3));                  });
Magic Number,NServiceBus.AcceptanceTests.Recoverability,RetryEndpoint,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Recoverability\When_custom_policy_always_moves_to_error.cs,RetryEndpoint,The following statement contains a magic number: EndpointSetup<DefaultServer>((config' context) =>                  {                      config.ConfigureTransport().Transactions(TransportTransactionMode.None);                      var recoverability = config.Recoverability();                      recoverability.Immediate(i => i.NumberOfRetries(3));                      recoverability.Delayed(d => d.NumberOfRetries(3));                  });
Magic Number,NServiceBus.AcceptanceTests.Recoverability,When_custom_policy_does_single_delayed_retry_before_move_to_error,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Recoverability\When_custom_policy_does_single_delayed_retry_before_move_to_error.cs,Should_execute_twice_and_send_to_error_queue,The following statement contains a magic number: Assert.AreEqual(context.Count' 2);
Magic Number,NServiceBus.AcceptanceTests.Recoverability,When_message_is_deferred_by_delayed_retries_using_dtc,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Recoverability\When_message_is_deferred_by_delayed_retries_using_dtc.cs,Should_not_commit_distributed_transaction,The following statement contains a magic number: Assert.GreaterOrEqual(context.NumberOfRetriesAttempted' 3' "Should retry at least three times");
Magic Number,NServiceBus.AcceptanceTests.Recoverability,Endpoint,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Recoverability\When_message_is_deferred_by_delayed_retries_using_dtc.cs,Endpoint,The following statement contains a magic number: EndpointSetup<DefaultServer>(config =>                  {                      config.EnableFeature<TimeoutManager>();                      var recoverability = config.Recoverability();                      recoverability.Delayed(settings =>                      {                          settings.NumberOfRetries(3);                          settings.TimeIncrease(TimeSpan.FromSeconds(1));                      });                  });
Magic Number,NServiceBus.AcceptanceTests.Recoverability,EndpointThatHandlesErrorMessages,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Recoverability\When_message_with_TimeToBeReceived_fails.cs,EndpointThatHandlesErrorMessages,The following statement contains a magic number: EndpointSetup<DefaultServer>(c => c.Recoverability().Immediate(s => s.NumberOfRetries(10)));
Magic Number,NServiceBus.AcceptanceTests.Recoverability,When_using_special_characters_in_headers,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Recoverability\When_using_special_characters_in_headers.cs,Should_store_unicode_characters_in_timeout_manager_for_delayed_retries,The following statement contains a magic number: var context = await Scenario.Define<Context>()                  .WithEndpoint<EndpointHandlingDelayedMessages>(e => e                      .When(s =>                      {                          var options = new SendOptions();                          options.RouteToThisEndpoint();                          options.DelayDeliveryWith(TimeSpan.FromSeconds(3));                          foreach (var specialHeader in specialHeaders)                          {                              options.SetHeader(specialHeader.Key' specialHeader.Value);                          }                          return s.Send(new FailingMessage()' options);                      }))                  .Done(c => c.ReceivedMessageHeaders != null)                  .Run();
Magic Number,NServiceBus.AcceptanceTests.Recoverability,EndpointHandlingDelayedMessages,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Recoverability\When_using_special_characters_in_headers.cs,EndpointHandlingDelayedMessages,The following statement contains a magic number: EndpointSetup<DefaultServer>(e =>                  {                      e.EnableFeature<TimeoutManager>();                      e.Recoverability()                          .Immediate(ir => ir                              .NumberOfRetries(0))                          .Delayed(dr => dr                              .NumberOfRetries(1)                              .TimeIncrease(TimeSpan.FromSeconds(3)));                  });
Magic Number,NServiceBus.AcceptanceTests.Routing.MessageDrivenSubscriptions,Publisher1,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Routing\MessageDrivenSubscriptions\When_multi_subscribing_to_a_polymorphic_event.cs,Publisher1,The following statement contains a magic number: EndpointSetup<DefaultPublisher>(b =>                  {                      //Immediate Retries on since subscription storages can throw on concurrency violation and need to retry                      b.Recoverability().Immediate(immediate => immediate.NumberOfRetries(5));                      b.OnEndpointSubscribed<Context>((args' context) =>                      {                          context.AddTrace("Publisher1 OnEndpointSubscribed " + args.MessageType);                          if (args.MessageType.Contains(typeof(IMyEvent).Name))                          {                              context.Publisher1HasASubscriberForIMyEvent = true;                          }                      });                  });
Magic Number,NServiceBus.AcceptanceTests.Routing.MessageDrivenSubscriptions,Publisher2,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Routing\MessageDrivenSubscriptions\When_multi_subscribing_to_a_polymorphic_event.cs,Publisher2,The following statement contains a magic number: EndpointSetup<DefaultPublisher>(b =>                  {                      // Immediate Retries on since subscription storages can throw on concurrency violation and need to retry                      b.Recoverability().Immediate(immediate => immediate.NumberOfRetries(5));                        b.OnEndpointSubscribed<Context>((args' context) =>                      {                          context.AddTrace("Publisher2 OnEndpointSubscribed " + args.MessageType);                            if (args.MessageType.Contains(typeof(MyEvent2).Name))                          {                              context.Publisher2HasDetectedASubscriberForEvent2 = true;                          }                      });                  });
Magic Number,NServiceBus.AcceptanceTests.Routing.MessageDrivenSubscriptions,When_publishing_to_scaled_out_subscribers,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Routing\MessageDrivenSubscriptions\When_publishing_to_scaled_out_subscribers.cs,Each_event_should_be_delivered_to_single_instance_of_each_subscriber,The following statement contains a magic number: var context = await Scenario.Define<Context>()                  .WithEndpoint<Publisher>(b => b.When(c => c.SubscribersCounter == 4' async (session' c) => { await session.Publish(new MyEvent()); }))                  .WithEndpoint<SubscriberA>(b => b.CustomConfig(c => c.MakeInstanceUniquelyAddressable("1")))                  .WithEndpoint<SubscriberA>(b => b.CustomConfig(c => c.MakeInstanceUniquelyAddressable("2")))                  .WithEndpoint<SubscriberB>(b => b.CustomConfig(c => c.MakeInstanceUniquelyAddressable("1")))                  .WithEndpoint<SubscriberB>(b => b.CustomConfig(c => c.MakeInstanceUniquelyAddressable("2")))                  .Done(c => c.ProcessedByA > 0 && c.ProcessedByB > 0)                  .Run();
Magic Number,NServiceBus.AcceptanceTests.Routing.MessageDrivenSubscriptions,When_subscribing_to_scaled_out_publisher,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Routing\MessageDrivenSubscriptions\When_subscribing_to_scaled_out_publisher.cs,Should_send_subscription_message_to_each_instance,The following statement contains a magic number: var context = await Scenario.Define<Context>()                  .WithEndpoint<ScaledOutPublisher>(b => b.CustomConfig(c => c.MakeInstanceUniquelyAddressable("1")))                  .WithEndpoint<ScaledOutPublisher>(b => b.CustomConfig(c => c.MakeInstanceUniquelyAddressable("2")))                  .WithEndpoint<Subscriber>(b => b.When(s => s.Subscribe<MyEvent>()))                  .Done(c => c.PublisherReceivedSubscription.Count >= 2)                  .Run();
Magic Number,NServiceBus.AcceptanceTests.Routing.MessageDrivenSubscriptions,When_subscribing_to_scaled_out_publisher,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Routing\MessageDrivenSubscriptions\When_subscribing_to_scaled_out_publisher.cs,Should_send_subscription_message_to_each_instance,The following statement contains a magic number: Assert.That(context.PublisherReceivedSubscription.Count' Is.EqualTo(2));
Magic Number,NServiceBus.AcceptanceTests.Routing.MessageDrivenSubscriptions,When_unsubscribing_from_event,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Routing\MessageDrivenSubscriptions\When_unsubscribing_from_event.cs,Should_no_longer_receive_event,The following statement contains a magic number: var context = await Scenario.Define<Context>()                  .WithEndpoint<Publisher>(c => c                      .When(                          ctx => ctx.Subscriber1Subscribed && ctx.Subscriber2Subscribed'                          s => s.Publish(new Event()))                      .When(                          ctx => ctx.Subscriber2Unsubscribed'                          async s =>                          {                              await s.Publish(new Event());                              await s.Publish(new Event());                              await s.Publish(new Event());                          }))                  .WithEndpoint<Subscriber1>(c => c                      .When(s => s.Subscribe<Event>()))                  .WithEndpoint<Subscriber2>(c => c                      .When(s => s.Subscribe<Event>())                      .When(                          ctx => ctx.Subscriber2ReceivedMessages >= 1'                          s => s.Unsubscribe<Event>()))                  .Done(c => c.Subscriber1ReceivedMessages >= 4)                  .Run();
Magic Number,NServiceBus.AcceptanceTests.Routing.MessageDrivenSubscriptions,When_unsubscribing_from_event,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Routing\MessageDrivenSubscriptions\When_unsubscribing_from_event.cs,Should_no_longer_receive_event,The following statement contains a magic number: Assert.AreEqual(4' context.Subscriber1ReceivedMessages);
Magic Number,NServiceBus.AcceptanceTests.Routing.MessageDrivenSubscriptions,When_unsubscribing_to_scaled_out_publisher,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Routing\MessageDrivenSubscriptions\When_unsubscribing_to_scaled_out_publisher.cs,Should_send_unsubscribe_message_to_each_instance,The following statement contains a magic number: var context = await Scenario.Define<Context>()                  .WithEndpoint<ScaledOutPublisher>(b => b.CustomConfig(c => c.MakeInstanceUniquelyAddressable("1")))                  .WithEndpoint<ScaledOutPublisher>(b => b.CustomConfig(c => c.MakeInstanceUniquelyAddressable("2")))                  .WithEndpoint<Unsubscriber>(b => b.When(s => s.Unsubscribe<MyEvent>()))                  .Done(c => c.PublisherReceivedUnsubscribeMessage.Count >= 2)                  .Run();
Magic Number,NServiceBus.AcceptanceTests.Routing.MessageDrivenSubscriptions,When_unsubscribing_to_scaled_out_publisher,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Routing\MessageDrivenSubscriptions\When_unsubscribing_to_scaled_out_publisher.cs,Should_send_unsubscribe_message_to_each_instance,The following statement contains a magic number: Assert.That(context.PublisherReceivedUnsubscribeMessage.Count' Is.EqualTo(2));
Magic Number,NServiceBus.AcceptanceTests.Routing.NativePublishSubscribe,When_unsubscribing_from_event,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Routing\NativePublishSubscribe\When_unsubscribing_from_event.cs,Should_no_longer_receive_event,The following statement contains a magic number: var context = await Scenario.Define<Context>()                  .WithEndpoint<Publisher>(c => c                      .When(                          ctx => ctx.Subscriber1Subscribed && ctx.Subscriber2Subscribed'                          s => s.Publish(new Event()))                      .When(                          ctx => ctx.Subscriber2Unsubscribed'                          async s =>                          {                              await s.Publish(new Event());                              await s.Publish(new Event());                              await s.Publish(new Event());                          }))                  .WithEndpoint<Subscriber1>(c => c                      .When(async (s' ctx) =>                      {                          await s.Subscribe<Event>();                          ctx.Subscriber1Subscribed = true;                      }))                  .WithEndpoint<Subscriber2>(c => c                      .When(async (s' ctx) =>                      {                          await s.Subscribe<Event>();                          ctx.Subscriber2Subscribed = true;                      })                      .When(                          ctx => ctx.Subscriber2ReceivedMessages >= 1'                          async (s' ctx) =>                          {                              await s.Unsubscribe<Event>();                              ctx.Subscriber2Unsubscribed = true;                          }))                  .Done(c => c.Subscriber1ReceivedMessages >= 4)                  .Run();
Magic Number,NServiceBus.AcceptanceTests.Routing.NativePublishSubscribe,When_unsubscribing_from_event,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Routing\NativePublishSubscribe\When_unsubscribing_from_event.cs,Should_no_longer_receive_event,The following statement contains a magic number: Assert.AreEqual(4' context.Subscriber1ReceivedMessages);
Magic Number,NServiceBus.AcceptanceTests.Sagas,Endpoint,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Sagas\When_correlated_property_value_is_changed.cs,Endpoint,The following statement contains a magic number: EndpointSetup<DefaultServer>(c =>                  {                      c.EnableFeature<TimeoutManager>();                      c.ExecuteTheseHandlersFirst(typeof(CatchAllMessageHandler));                      c.Recoverability().Immediate(immediate => immediate.NumberOfRetries(5));                  });
Magic Number,NServiceBus.AcceptanceTests.Sagas,When_handling_concurrent_messages,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Sagas\When_handling_concurrent_messages.cs,Should_not_overwrite_each_other,The following statement contains a magic number: var context = await Scenario.Define<Context>()                  .WithEndpoint<EndpointWithSagaAndOutbox>(b =>                  {                      b.DoNotFailOnErrorMessages();                      b.CustomConfig(cfg =>                      {                          if (useOutbox)                          {                              cfg.EnableOutbox();                          }                          cfg.Recoverability().Immediate(x => x.NumberOfRetries(5));                      });                      b.When((session' ctx) => session.SendLocal(new StartMsg { OrderId = "12345" }));                        var timeout = DateTime.UtcNow.AddSeconds(15);                        b.When(c => DateTime.UtcNow > timeout' (session' ctx) => session.SendLocal(new FinishMsg { OrderId = "12345" }));                  })                  .Done(c => c.SagaData != null)                  .Run();
Magic Number,NServiceBus.AcceptanceTests.Sagas,When_handling_concurrent_messages,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Sagas\When_handling_concurrent_messages.cs,Should_not_overwrite_each_other,The following statement contains a magic number: var context = await Scenario.Define<Context>()                  .WithEndpoint<EndpointWithSagaAndOutbox>(b =>                  {                      b.DoNotFailOnErrorMessages();                      b.CustomConfig(cfg =>                      {                          if (useOutbox)                          {                              cfg.EnableOutbox();                          }                          cfg.Recoverability().Immediate(x => x.NumberOfRetries(5));                      });                      b.When((session' ctx) => session.SendLocal(new StartMsg { OrderId = "12345" }));                        var timeout = DateTime.UtcNow.AddSeconds(15);                        b.When(c => DateTime.UtcNow > timeout' (session' ctx) => session.SendLocal(new FinishMsg { OrderId = "12345" }));                  })                  .Done(c => c.SagaData != null)                  .Run();
Magic Number,NServiceBus.AcceptanceTests.Sagas,When_handling_concurrent_messages,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Sagas\When_handling_concurrent_messages.cs,Should_not_overwrite_each_other,The following statement contains a magic number: Assert.AreEqual(3' context.SagaData.ContinueCount);
Magic Number,NServiceBus.AcceptanceTests.Sagas,OrderSaga,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Sagas\When_handling_concurrent_messages.cs,Handle,The following statement contains a magic number: await context.SendLocal(new ContinueMsg { OrderId = message.OrderId' Index = 2 });
Magic Number,NServiceBus.AcceptanceTests.Sagas,OrderSaga,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Sagas\When_handling_concurrent_messages.cs,Handle,The following statement contains a magic number: await context.SendLocal(new ContinueMsg { OrderId = message.OrderId' Index = 3 });
Magic Number,NServiceBus.AcceptanceTests.Sagas,OrderSaga,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Sagas\When_handling_concurrent_messages.cs,Handle,The following statement contains a magic number: this.Data.ContinueCount == 3
Magic Number,NServiceBus.AcceptanceTests.Sagas,When_receiving_multiple_timeouts,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Sagas\When_receiving_multiple_timeouts.cs,It_should_not_invoke_SagaNotFound_handler,The following statement contains a magic number: var context = await Scenario.Define<Context>(c => { c.Id = Guid.NewGuid(); })                  .WithEndpoint<Endpoint>(b => b.When((session' c) => session.SendLocal(new StartSaga1                  {                      ContextId = c.Id                  })))                  .Done(c => (c.Saga1TimeoutFired && c.Saga2TimeoutFired) || c.SagaNotFound)                  .Run(TimeSpan.FromSeconds(60));
Magic Number,NServiceBus.AcceptanceTests.Sagas,When_replying_to_originator_from_a_timeout,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Sagas\When_replying_to_originator_from_a_timeout.cs,Should_route_the_message_to_the_endpoint_starting_the_saga,The following statement contains a magic number: var context = await Scenario.Define<Context>()                  .WithEndpoint<Endpoint>(b => b.When(session => session.SendLocal(new InitiateRequestingSaga())))                  .Done(c => c.DidRequestingSagaGetTheResponse)                  .Run(TimeSpan.FromSeconds(15));
Magic Number,NServiceBus.AcceptanceTests.Sagas,When_sagas_share_timeout_messages,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Sagas\When_sagas_share_timeout_messages.cs,Should_invoke_instance_that_requested_the_timeout,The following statement contains a magic number: var context = await Scenario.Define<Context>()                  .WithEndpoint<Endpoint>(e => e.When(s => s.SendLocal(new StartSagaMessage                  {                      Id = Guid.NewGuid().ToString()                  })))                  .Done(c => c.Saga1ReceivedTimeout || c.Saga2ReceivedTimeout)                  .Run(TimeSpan.FromSeconds(30));
Magic Number,NServiceBus.AcceptanceTests.Sagas,TimeoutSharingSaga2,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Sagas\When_sagas_share_timeout_messages.cs,Handle,The following statement contains a magic number: return RequestTimeout<MySagaTimeout>(context' TimeSpan.FromSeconds(10));
Magic Number,NServiceBus.AcceptanceTests.Sagas,When_saga_exists_for_start_message,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Sagas\When_saga_exists_for_start_message.cs,Should_hydrate_and_invoke_the_existing_instance,The following statement contains a magic number: var context = await Scenario.Define<Context>()                  .WithEndpoint<ExistingSagaInstanceEndpoint>(b => b                      .When(async session =>                      {                          await session.SendLocal(                              new StartSagaMessage                              {                                  SomeId = someId                              });                          await session.SendLocal(                              new StartSagaMessage                              {                                  SomeId = someId                              });                      }))                  .Done(c => c.SagaIds.Count >= 2)                  .Run();
Magic Number,NServiceBus.AcceptanceTests.Sagas,When_saga_exists_for_start_message,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Sagas\When_saga_exists_for_start_message.cs,Should_hydrate_and_invoke_the_existing_instance,The following statement contains a magic number: Assert.AreEqual(2' context.SagaIds.Count);
Magic Number,NServiceBus.AcceptanceTests.Sagas,DelayedRetryTestingSaga,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Sagas\When_saga_message_goes_through_delayed_retries.cs,Handle,The following statement contains a magic number: TestContext.NumberOfTimesInvoked < 2
Magic Number,NServiceBus.AcceptanceTests.Sagas,ConcurrentHandlerEndpoint,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Sagas\When_saga_started_concurrently.cs,ConcurrentHandlerEndpoint,The following statement contains a magic number: EndpointSetup<DefaultServer>(b =>                  {                      b.LimitMessageProcessingConcurrencyTo(2);                      b.Recoverability().Immediate(immediate => immediate.NumberOfRetries(3));                  });
Magic Number,NServiceBus.AcceptanceTests.Sagas,ConcurrentHandlerEndpoint,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Sagas\When_saga_started_concurrently.cs,ConcurrentHandlerEndpoint,The following statement contains a magic number: EndpointSetup<DefaultServer>(b =>                  {                      b.LimitMessageProcessingConcurrencyTo(2);                      b.Recoverability().Immediate(immediate => immediate.NumberOfRetries(3));                  });
Magic Number,NServiceBus.AcceptanceTests.Sagas,TestSaga01,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Sagas\When_using_a_received_message_for_timeout.cs,Handle,The following statement contains a magic number: return RequestTimeout(context' TimeSpan.FromMilliseconds(100)' message);
Magic Number,NServiceBus.AcceptanceTests.Scheduling,When_scheduling_a_recurring_task,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Scheduling\When_scheduling_a_recurring_task.cs,Should_execute_the_task,The following statement contains a magic number: var context = await Scenario.Define<Context>()                  .WithEndpoint<SchedulingEndpoint>()                  .Done(c => c.InvokedAt.HasValue)                  .Run(TimeSpan.FromSeconds(60));
Magic Number,NServiceBus.AcceptanceTests.Scheduling,When_scheduling_a_recurring_task,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Scheduling\When_scheduling_a_recurring_task.cs,Should_execute_the_task,The following statement contains a magic number: Assert.Greater(context.InvokedAt.Value - context.RequestedAt' TimeSpan.FromMilliseconds(5));
Magic Number,NServiceBus.AcceptanceTests.Scheduling,SetupScheduledActionTask,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Scheduling\When_scheduling_a_recurring_task.cs,OnStart,The following statement contains a magic number: return session.ScheduleEvery(TimeSpan.FromMilliseconds(5)' "MyTask"' c =>                  {                      context.InvokedAt = DateTime.UtcNow;                      return Task.FromResult(0);                  });
Magic Number,NServiceBus.AcceptanceTests.Serialization,When_serializing_a_message,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Serialization\When_serializing_a_message.cs,DateTime_properties_should_keep_their_original_timezone_information,The following statement contains a magic number: var expectedDateTime = new DateTime(2010' 10' 13' 12' 32' 42' DateTimeKind.Unspecified);
Magic Number,NServiceBus.AcceptanceTests.Serialization,When_serializing_a_message,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Serialization\When_serializing_a_message.cs,DateTime_properties_should_keep_their_original_timezone_information,The following statement contains a magic number: var expectedDateTime = new DateTime(2010' 10' 13' 12' 32' 42' DateTimeKind.Unspecified);
Magic Number,NServiceBus.AcceptanceTests.Serialization,When_serializing_a_message,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Serialization\When_serializing_a_message.cs,DateTime_properties_should_keep_their_original_timezone_information,The following statement contains a magic number: var expectedDateTime = new DateTime(2010' 10' 13' 12' 32' 42' DateTimeKind.Unspecified);
Magic Number,NServiceBus.AcceptanceTests.Serialization,When_serializing_a_message,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Serialization\When_serializing_a_message.cs,DateTime_properties_should_keep_their_original_timezone_information,The following statement contains a magic number: var expectedDateTime = new DateTime(2010' 10' 13' 12' 32' 42' DateTimeKind.Unspecified);
Magic Number,NServiceBus.AcceptanceTests.Serialization,When_serializing_a_message,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Serialization\When_serializing_a_message.cs,DateTime_properties_should_keep_their_original_timezone_information,The following statement contains a magic number: var expectedDateTime = new DateTime(2010' 10' 13' 12' 32' 42' DateTimeKind.Unspecified);
Magic Number,NServiceBus.AcceptanceTests.Serialization,When_serializing_a_message,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Serialization\When_serializing_a_message.cs,DateTime_properties_should_keep_their_original_timezone_information,The following statement contains a magic number: var expectedDateTime = new DateTime(2010' 10' 13' 12' 32' 42' DateTimeKind.Unspecified);
Magic Number,NServiceBus.AcceptanceTests.Serialization,When_serializing_a_message,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Serialization\When_serializing_a_message.cs,DateTime_properties_should_keep_their_original_timezone_information,The following statement contains a magic number: var expectedDateTimeLocal = new DateTime(2010' 10' 13' 12' 32' 42' DateTimeKind.Local);
Magic Number,NServiceBus.AcceptanceTests.Serialization,When_serializing_a_message,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Serialization\When_serializing_a_message.cs,DateTime_properties_should_keep_their_original_timezone_information,The following statement contains a magic number: var expectedDateTimeLocal = new DateTime(2010' 10' 13' 12' 32' 42' DateTimeKind.Local);
Magic Number,NServiceBus.AcceptanceTests.Serialization,When_serializing_a_message,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Serialization\When_serializing_a_message.cs,DateTime_properties_should_keep_their_original_timezone_information,The following statement contains a magic number: var expectedDateTimeLocal = new DateTime(2010' 10' 13' 12' 32' 42' DateTimeKind.Local);
Magic Number,NServiceBus.AcceptanceTests.Serialization,When_serializing_a_message,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Serialization\When_serializing_a_message.cs,DateTime_properties_should_keep_their_original_timezone_information,The following statement contains a magic number: var expectedDateTimeLocal = new DateTime(2010' 10' 13' 12' 32' 42' DateTimeKind.Local);
Magic Number,NServiceBus.AcceptanceTests.Serialization,When_serializing_a_message,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Serialization\When_serializing_a_message.cs,DateTime_properties_should_keep_their_original_timezone_information,The following statement contains a magic number: var expectedDateTimeLocal = new DateTime(2010' 10' 13' 12' 32' 42' DateTimeKind.Local);
Magic Number,NServiceBus.AcceptanceTests.Serialization,When_serializing_a_message,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Serialization\When_serializing_a_message.cs,DateTime_properties_should_keep_their_original_timezone_information,The following statement contains a magic number: var expectedDateTimeLocal = new DateTime(2010' 10' 13' 12' 32' 42' DateTimeKind.Local);
Magic Number,NServiceBus.AcceptanceTests.Serialization,When_serializing_a_message,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Serialization\When_serializing_a_message.cs,DateTime_properties_should_keep_their_original_timezone_information,The following statement contains a magic number: var expectedDateTimeUtc = new DateTime(2010' 10' 13' 12' 32' 42' DateTimeKind.Utc);
Magic Number,NServiceBus.AcceptanceTests.Serialization,When_serializing_a_message,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Serialization\When_serializing_a_message.cs,DateTime_properties_should_keep_their_original_timezone_information,The following statement contains a magic number: var expectedDateTimeUtc = new DateTime(2010' 10' 13' 12' 32' 42' DateTimeKind.Utc);
Magic Number,NServiceBus.AcceptanceTests.Serialization,When_serializing_a_message,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Serialization\When_serializing_a_message.cs,DateTime_properties_should_keep_their_original_timezone_information,The following statement contains a magic number: var expectedDateTimeUtc = new DateTime(2010' 10' 13' 12' 32' 42' DateTimeKind.Utc);
Magic Number,NServiceBus.AcceptanceTests.Serialization,When_serializing_a_message,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Serialization\When_serializing_a_message.cs,DateTime_properties_should_keep_their_original_timezone_information,The following statement contains a magic number: var expectedDateTimeUtc = new DateTime(2010' 10' 13' 12' 32' 42' DateTimeKind.Utc);
Magic Number,NServiceBus.AcceptanceTests.Serialization,When_serializing_a_message,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Serialization\When_serializing_a_message.cs,DateTime_properties_should_keep_their_original_timezone_information,The following statement contains a magic number: var expectedDateTimeUtc = new DateTime(2010' 10' 13' 12' 32' 42' DateTimeKind.Utc);
Magic Number,NServiceBus.AcceptanceTests.Serialization,When_serializing_a_message,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Serialization\When_serializing_a_message.cs,DateTime_properties_should_keep_their_original_timezone_information,The following statement contains a magic number: var expectedDateTimeUtc = new DateTime(2010' 10' 13' 12' 32' 42' DateTimeKind.Utc);
Magic Number,NServiceBus.AcceptanceTests.Serialization,When_serializing_a_message,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Serialization\When_serializing_a_message.cs,DateTime_properties_should_keep_their_original_timezone_information,The following statement contains a magic number: var expectedDateTimeOffset = new DateTimeOffset(2012' 12' 12' 12' 12' 12' TimeSpan.FromHours(6));
Magic Number,NServiceBus.AcceptanceTests.Serialization,When_serializing_a_message,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Serialization\When_serializing_a_message.cs,DateTime_properties_should_keep_their_original_timezone_information,The following statement contains a magic number: var expectedDateTimeOffset = new DateTimeOffset(2012' 12' 12' 12' 12' 12' TimeSpan.FromHours(6));
Magic Number,NServiceBus.AcceptanceTests.Serialization,When_serializing_a_message,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Serialization\When_serializing_a_message.cs,DateTime_properties_should_keep_their_original_timezone_information,The following statement contains a magic number: var expectedDateTimeOffset = new DateTimeOffset(2012' 12' 12' 12' 12' 12' TimeSpan.FromHours(6));
Magic Number,NServiceBus.AcceptanceTests.Serialization,When_serializing_a_message,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Serialization\When_serializing_a_message.cs,DateTime_properties_should_keep_their_original_timezone_information,The following statement contains a magic number: var expectedDateTimeOffset = new DateTimeOffset(2012' 12' 12' 12' 12' 12' TimeSpan.FromHours(6));
Magic Number,NServiceBus.AcceptanceTests.Serialization,When_serializing_a_message,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Serialization\When_serializing_a_message.cs,DateTime_properties_should_keep_their_original_timezone_information,The following statement contains a magic number: var expectedDateTimeOffset = new DateTimeOffset(2012' 12' 12' 12' 12' 12' TimeSpan.FromHours(6));
Magic Number,NServiceBus.AcceptanceTests.Serialization,When_serializing_a_message,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Serialization\When_serializing_a_message.cs,DateTime_properties_should_keep_their_original_timezone_information,The following statement contains a magic number: var expectedDateTimeOffset = new DateTimeOffset(2012' 12' 12' 12' 12' 12' TimeSpan.FromHours(6));
Magic Number,NServiceBus.AcceptanceTests.Serialization,When_serializing_a_message,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Serialization\When_serializing_a_message.cs,DateTime_properties_should_keep_their_original_timezone_information,The following statement contains a magic number: var expectedDateTimeOffset = new DateTimeOffset(2012' 12' 12' 12' 12' 12' TimeSpan.FromHours(6));
Magic Number,NServiceBus.AcceptanceTests.TimeToBeReceived,When_TimeToBeReceived_has_expired,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\TimeToBeReceived\When_TimeToBeReceived_has_expired.cs,Message_should_not_be_received,The following statement contains a magic number: var context = await Scenario.Define<Context>()                  .WithEndpoint<Endpoint>()                  .Run(TimeSpan.FromSeconds(10));
Magic Number,NServiceBus.AcceptanceTests.TimeToBeReceived,DelayReceiverFromStartingTask,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\TimeToBeReceived\When_TimeToBeReceived_has_expired.cs,OnStart,The following statement contains a magic number: await Task.Delay(TimeSpan.FromSeconds(5));
Magic Number,NServiceBus.AcceptanceTests.TimeToBeReceived,DelayReceiverFromStartingTask,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\TimeToBeReceived\When_TimeToBeReceived_has_expired.cs,OnStart,The following statement contains a magic number: await Task.Delay(TimeSpan.FromSeconds(5));
Magic Number,NServiceBus.AcceptanceTests.TimeToBeReceived,DelayReceiverFromStartingTask,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\TimeToBeReceived\When_TimeToBeReceived_has_expired.cs,OnStart,The following statement contains a magic number: return Task.Delay(TimeSpan.FromSeconds(5));
Magic Number,NServiceBus.AcceptanceTests.TimeToBeReceived,Endpoint,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\TimeToBeReceived\When_TimeToBeReceived_has_expired.cs,Endpoint,The following statement contains a magic number: EndpointSetup<DefaultServer>(c =>                  {                      c.EnableFeature<DelayReceiverFromStarting>();                      c.Conventions().DefiningTimeToBeReceivedAs(messageType =>                      {                          if (messageType == typeof(MyMessage))                          {                              return TimeSpan.FromSeconds(2);                          }                          return TimeSpan.MaxValue;                      });                  });
Magic Number,NServiceBus.AcceptanceTests.TimeToBeReceived,When_TimeToBeReceived_has_expired_convention,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\TimeToBeReceived\When_TimeToBeReceived_has_expired_convention.cs,Message_should_not_be_received,The following statement contains a magic number: var context = await Scenario.Define<Context>()                  .WithEndpoint<Endpoint>()                  .Run(TimeSpan.FromSeconds(10));
Magic Number,NServiceBus.AcceptanceTests.TimeToBeReceived,When_TimeToBeReceived_has_not_expired,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\TimeToBeReceived\When_TimeToBeReceived_has_not_expired.cs,Message_should_be_received,The following statement contains a magic number: Assert.AreEqual(TimeSpan.FromSeconds(10)' context.TTBROnIncomingMessage' "TTBR should be available as a header so receiving endpoints can know what value was used when the message was originally sent");
Magic Number,NServiceBus.AcceptanceTests.TimeToBeReceived,When_TimeToBeReceived_used_with_unobtrusive_mode,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\TimeToBeReceived\When_TimeToBeReceived_used_with_unobtrusive_mode.cs,Message_should_not_be_received,The following statement contains a magic number: var context = await Scenario.Define<Context>()                  .WithEndpoint<Sender>()                  .WithEndpoint<Receiver>()                  .Run(TimeSpan.FromSeconds(10));
Magic Number,NServiceBus.AcceptanceTests.TimeToBeReceived,Sender,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\TimeToBeReceived\When_TimeToBeReceived_used_with_unobtrusive_mode.cs,Sender,The following statement contains a magic number: EndpointSetup<DefaultServer>(c =>                  {                      c.Conventions()                      .DefiningCommandsAs(t => t.Namespace != null && t.FullName == typeof(MyCommand).FullName)                      .DefiningTimeToBeReceivedAs(messageType =>                      {                          if (messageType == typeof(MyCommand))                          {                              return TimeSpan.FromSeconds(2);                          }                          return TimeSpan.MaxValue;                      });                      c.EnableFeature<SendMessageWhileStarting>();                      c.ConfigureTransport().Routing().RouteToEndpoint(typeof(MyCommand)' typeof(Receiver));                  }).ExcludeType<MyCommand>();
Magic Number,NServiceBus.AcceptanceTests.Tx,When_sending_within_an_ambient_transaction,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Tx\When_sending_within_an_ambient_transaction.cs,Should_not_deliver_them_until_the_commit_phase,The following statement contains a magic number: var context = await Scenario.Define<Context>()                  .WithEndpoint<TransactionalEndpoint>(b => b.When(async (session' ctx) =>                  {                      using (var tx = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))                      {                          await session.Send(new MessageThatIsEnlisted                          {                              SequenceNumber = 1                          });                          await session.Send(new MessageThatIsEnlisted                          {                              SequenceNumber = 2                          });                            //send another message as well so that we can check the order in the receiver                          using (new TransactionScope(TransactionScopeOption.Suppress' TransactionScopeAsyncFlowOption.Enabled))                          {                              await session.Send(new MessageThatIsNotEnlisted());                          }                            tx.Complete();                      }                  }))                  .Done(c => c.MessageThatIsNotEnlistedHandlerWasCalled && c.TimesCalled >= 2)                  .Run();
Magic Number,NServiceBus.AcceptanceTests.Tx,When_sending_within_an_ambient_transaction,C:\research\architectureSmells\repos\Particular_NServiceBus\src\NServiceBus.AcceptanceTests\Tx\When_sending_within_an_ambient_transaction.cs,Should_not_deliver_them_until_the_commit_phase,The following statement contains a magic number: var context = await Scenario.Define<Context>()                  .WithEndpoint<TransactionalEndpoint>(b => b.When(async (session' ctx) =>                  {                      using (var tx = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))                      {                          await session.Send(new MessageThatIsEnlisted                          {                              SequenceNumber = 1                          });                          await session.Send(new MessageThatIsEnlisted                          {                              SequenceNumber = 2                          });                            //send another message as well so that we can check the order in the receiver                          using (new TransactionScope(TransactionScopeOption.Suppress' TransactionScopeAsyncFlowOption.Enabled))                          {                              await session.Send(new MessageThatIsNotEnlisted());                          }                            tx.Complete();                      }                  }))                  .Done(c => c.MessageThatIsNotEnlistedHandlerWasCalled && c.TimesCalled >= 2)                  .Run();
