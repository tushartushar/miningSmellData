Implementation smell,Namespace,Class,File,Method,Description
Magic Number,Mantle.DictionaryStorage.Azure.Clients,AzureTableDictionaryStorageClient<T>,C:\repos\caseywatson_Mantle\v1\Mantle\Mantle.DictionaryStorage.Azure\Clients\AzureTableDictionaryStorageClient.cs,DeletePartition,The following statement contains a magic number: if (transientFaultStrategy.Try(() => table.Exists()))              {                  var query = new TableQuery<AzureTableDictionaryStorageEntity<T>>()                      .Where(TableQuery.GenerateFilterCondition("PartitionKey"' QueryComparisons.Equal' partitionId));                    var entities = transientFaultStrategy.Try(() => table.ExecuteQuery(query).ToList());                    if (entities.Any())                  {                      var entityChunks = transientFaultStrategy.Try(() => table.ExecuteQuery(query).Chunk(100).ToList());                        foreach (var entityChunk in entityChunks)                      {                          var batchDeleteOp = new TableBatchOperation();                            foreach (var entity in entityChunk)                              batchDeleteOp.Delete(entity);                            transientFaultStrategy.Try(() => table.ExecuteBatch(batchDeleteOp));                      }                        return true;                  }              }
Magic Number,Mantle.DictionaryStorage.Azure.Clients,AzureTableDictionaryStorageClient<T>,C:\repos\caseywatson_Mantle\v1\Mantle\Mantle.DictionaryStorage.Azure\Clients\AzureTableDictionaryStorageClient.cs,InsertOrUpdateDictionaryStorageEntities,The following statement contains a magic number: foreach (var group in groups)              {                  var chunks = transientFaultStrategy.Try(() => group.Chunk(100).ToList());                    foreach (var chunk in chunks)                  {                      var batchOp = new TableBatchOperation();                        foreach (var storageEntity in chunk)                          batchOp.InsertOrReplace(storageEntity);                        transientFaultStrategy.Try(() => table.ExecuteBatch(batchOp));                  }              }
