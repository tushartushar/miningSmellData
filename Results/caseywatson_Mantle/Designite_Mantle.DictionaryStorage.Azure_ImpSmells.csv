Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Mantle.DictionaryStorage.Azure.Entities,AzureTableDictionaryStorageEntity,D:\newReposJune17\caseywatson_Mantle\v1\Mantle\Mantle.DictionaryStorage.Azure\Entities\AzureTableDictionaryStorageEntity.cs,ReadEntity,Cyclomatic complexity of the method is 24
Complex Method,Mantle.DictionaryStorage.Azure.Entities,AzureTableDictionaryStorageEntity,D:\newReposJune17\caseywatson_Mantle\v1\Mantle\Mantle.DictionaryStorage.Azure\Entities\AzureTableDictionaryStorageEntity.cs,WriteEntity,Cyclomatic complexity of the method is 23
Long Statement,Mantle.DictionaryStorage.Azure.Clients,AzureTableDictionaryStorageClient,D:\newReposJune17\caseywatson_Mantle\v1\Mantle\Mantle.DictionaryStorage.Azure\Clients\AzureTableDictionaryStorageClient.cs,DeletePartition,The length of the statement  "		var query = new TableQuery<AzureTableDictionaryStorageEntity<T>> ().Where (TableQuery.GenerateFilterCondition ("PartitionKey"' QueryComparisons.Equal' partitionId)); " is 165.
Long Statement,Mantle.DictionaryStorage.Azure.Clients,AzureTableDictionaryStorageClient,D:\newReposJune17\caseywatson_Mantle\v1\Mantle\Mantle.DictionaryStorage.Azure\Clients\AzureTableDictionaryStorageClient.cs,LoadAllDictionaryStorageEntities,The length of the statement  "		var query = new TableQuery<AzureTableDictionaryStorageEntity<T>> ().Where (TableQuery.GenerateFilterCondition ("PartitionKey"' QueryComparisons.Equal' partitionId)); " is 165.
Long Statement,Mantle.DictionaryStorage.Azure.Clients,AzureTableDictionaryStorageClient,D:\newReposJune17\caseywatson_Mantle\v1\Mantle\Mantle.DictionaryStorage.Azure\Clients\AzureTableDictionaryStorageClient.cs,LoadDictionaryStorageEntity,The length of the statement  "	var storageEntity = transientFaultStrategy.Try (() => table.Execute (op).Result as AzureTableDictionaryStorageEntity<T>); " is 121.
Magic Number,Mantle.DictionaryStorage.Azure.Clients,AzureTableDictionaryStorageClient,D:\newReposJune17\caseywatson_Mantle\v1\Mantle\Mantle.DictionaryStorage.Azure\Clients\AzureTableDictionaryStorageClient.cs,DeletePartition,The following statement contains a magic number: if (transientFaultStrategy.Try (() => table.Exists ())) {  	var query = new TableQuery<AzureTableDictionaryStorageEntity<T>> ().Where (TableQuery.GenerateFilterCondition ("PartitionKey"' QueryComparisons.Equal' partitionId));  	var entities = transientFaultStrategy.Try (() => table.ExecuteQuery (query).ToList ());  	if (entities.Any ()) {  		var entityChunks = transientFaultStrategy.Try (() => table.ExecuteQuery (query).Chunk (100).ToList ());  		foreach (var entityChunk in entityChunks) {  			var batchDeleteOp = new TableBatchOperation ();  			foreach (var entity in entityChunk)  				batchDeleteOp.Delete (entity);  			transientFaultStrategy.Try (() => table.ExecuteBatch (batchDeleteOp));  		}  		return true;  	}  }  
Magic Number,Mantle.DictionaryStorage.Azure.Clients,AzureTableDictionaryStorageClient,D:\newReposJune17\caseywatson_Mantle\v1\Mantle\Mantle.DictionaryStorage.Azure\Clients\AzureTableDictionaryStorageClient.cs,DeletePartition,The following statement contains a magic number: if (entities.Any ()) {  	var entityChunks = transientFaultStrategy.Try (() => table.ExecuteQuery (query).Chunk (100).ToList ());  	foreach (var entityChunk in entityChunks) {  		var batchDeleteOp = new TableBatchOperation ();  		foreach (var entity in entityChunk)  			batchDeleteOp.Delete (entity);  		transientFaultStrategy.Try (() => table.ExecuteBatch (batchDeleteOp));  	}  	return true;  }  
Magic Number,Mantle.DictionaryStorage.Azure.Clients,AzureTableDictionaryStorageClient,D:\newReposJune17\caseywatson_Mantle\v1\Mantle\Mantle.DictionaryStorage.Azure\Clients\AzureTableDictionaryStorageClient.cs,InsertOrUpdateDictionaryStorageEntities,The following statement contains a magic number: foreach (var group in groups) {  	var chunks = transientFaultStrategy.Try (() => group.Chunk (100).ToList ());  	foreach (var chunk in chunks) {  		var batchOp = new TableBatchOperation ();  		foreach (var storageEntity in chunk)  			batchOp.InsertOrReplace (storageEntity);  		transientFaultStrategy.Try (() => table.ExecuteBatch (batchOp));  	}  }  
