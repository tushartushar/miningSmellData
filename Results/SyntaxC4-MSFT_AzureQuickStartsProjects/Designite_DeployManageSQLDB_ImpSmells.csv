Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,DeployManageSQLDB,SqlManagementController,C:\repos\SyntaxC4-MSFT_AzureQuickStartsProjects\Data Services\DeployManageSQLDB\SqlManagementController.cs,CreateDatabaseAsync,The method has 5 parameters. Parameters: serverName' databaseName' collation' edition' maxSizeInGB
Long Parameter List,DeployManageSQLDB,SqlManagementController,C:\repos\SyntaxC4-MSFT_AzureQuickStartsProjects\Data Services\DeployManageSQLDB\SqlManagementController.cs,UpdateDatabaseAsync,The method has 5 parameters. Parameters: serverName' databaseName' newName' edition' maxSizeInGB
Long Statement,DeployManageSQLDB,Program,C:\repos\SyntaxC4-MSFT_AzureQuickStartsProjects\Data Services\DeployManageSQLDB\Program.cs,CreateDatabaseAsync,The length of the statement  "                Task t = Task.Run(() => controller.CreateDatabaseAsync(_serverName' parameters.DatabaseName' parameters.DatabaseCollation' parameters.DatabaseEdition' parameters.DatabaseMaxSizeInGB)); " is 184.
Long Statement,DeployManageSQLDB,Program,C:\repos\SyntaxC4-MSFT_AzureQuickStartsProjects\Data Services\DeployManageSQLDB\Program.cs,ConfigureFirewallAsync,The length of the statement  "                Task t = Task.Run(() => controller.ConfigureFirewallAsync(_serverName' parameters.FirewallRuleName' parameters.FirewallRuleStartIP' parameters.FirewallRuleEndIP)); " is 163.
Long Statement,DeployManageSQLDB,Program,C:\repos\SyntaxC4-MSFT_AzureQuickStartsProjects\Data Services\DeployManageSQLDB\Program.cs,SetupServerAsync,The length of the statement  "                    Task p = Task.Run(() => controller.ConfigureFirewallAsync(_serverName' "Azure Services"' parameters.FirewallRuleStartIP' parameters.FirewallRuleEndIP)); " is 152.
Magic Number,DeployManageSQLDB,Program,C:\repos\SyntaxC4-MSFT_AzureQuickStartsProjects\Data Services\DeployManageSQLDB\Program.cs,WaitForStatus,The following statement contains a magic number: while (t.Status != TaskStatus.RanToCompletion &&                     t.Status != TaskStatus.Canceled &&                     t.Status != TaskStatus.Faulted)              {                  Console.WriteLine(string.Format("\t\t{0}"' t.Status));                  Thread.Sleep(5000);              }
