Implementation smell,Namespace,Class,File,Method,Description
Long Statement,DataSQLEF,Program,C:\repos\SyntaxC4-MSFT_AzureQuickStartsProjects\Data Services\DataSQLEF\Program.cs,Main,The length of the statement  "                    Console.WriteLine(string.Format("\t Order: {0}' {1}' {2}' {3}"' o.OrderId' o.Title' o.Status' o.DeliveryLocation.AsText())); " is 124.
Magic Number,DataSQLEF,Program,C:\repos\SyntaxC4-MSFT_AzureQuickStartsProjects\Data Services\DataSQLEF\Program.cs,Main,The following statement contains a magic number: using (OrderDbContext ctx = new OrderDbContext())              {                    Console.WriteLine("- Adding an Order to the db context");                  var order = new Order                  {                      Title = string.Format("Some order {0}"' DateTime.Now.Ticks)'                      Status = OrderStatus.New'                      DeliveryLocation = DbGeography.FromText("POINT(-122.336106 47.605049)")'                      DeliveryDate = DateTime.Now.AddDays(10)                  };                    ctx.Orders.Add(order);                    Console.WriteLine("- Adding OrderItems to the db context");                  ctx.OrderItems.Add(new OrderItem                  {                      Qty = 10'                      Title = "Visual Studio 2013"'                      Order = order                  });                    ctx.OrderItems.Add(new OrderItem                   {                       Qty = 21'                       Title = "Office 2013"'                       Order = order                   });                    //Saves changes to Azure SQL DB                  Console.WriteLine("- Save DB context changes to Azure SQL DB");                  ctx.SaveChanges();                    Console.WriteLine("- Query Server for Orders");                  //Query orders back from the server                  var orders = from o in ctx.Orders                               where o.DeliveryDate > DateTime.Now                               select o;                    //Alternatively you could have used an Linq expression                  //var orders = ctx.Orders.Where(o => o.DeliveryDate > DateTime.Now);                    //Printing the orders                  foreach (var o in orders)                  {                      Console.WriteLine(string.Format("\t Order: {0}' {1}' {2}' {3}"' o.OrderId' o.Title' o.Status' o.DeliveryLocation.AsText()));                        Console.WriteLine("\t\t Order Items:");                      foreach (var item in o.OrderItems)                          Console.WriteLine(string.Format("\t\t\t {0} x {1}"' item.Qty' item.Title));                  }                    Console.WriteLine("> Press any key to continue");                  Console.ReadLine();              }
Magic Number,DataSQLEF,Program,C:\repos\SyntaxC4-MSFT_AzureQuickStartsProjects\Data Services\DataSQLEF\Program.cs,Main,The following statement contains a magic number: using (OrderDbContext ctx = new OrderDbContext())              {                    Console.WriteLine("- Adding an Order to the db context");                  var order = new Order                  {                      Title = string.Format("Some order {0}"' DateTime.Now.Ticks)'                      Status = OrderStatus.New'                      DeliveryLocation = DbGeography.FromText("POINT(-122.336106 47.605049)")'                      DeliveryDate = DateTime.Now.AddDays(10)                  };                    ctx.Orders.Add(order);                    Console.WriteLine("- Adding OrderItems to the db context");                  ctx.OrderItems.Add(new OrderItem                  {                      Qty = 10'                      Title = "Visual Studio 2013"'                      Order = order                  });                    ctx.OrderItems.Add(new OrderItem                   {                       Qty = 21'                       Title = "Office 2013"'                       Order = order                   });                    //Saves changes to Azure SQL DB                  Console.WriteLine("- Save DB context changes to Azure SQL DB");                  ctx.SaveChanges();                    Console.WriteLine("- Query Server for Orders");                  //Query orders back from the server                  var orders = from o in ctx.Orders                               where o.DeliveryDate > DateTime.Now                               select o;                    //Alternatively you could have used an Linq expression                  //var orders = ctx.Orders.Where(o => o.DeliveryDate > DateTime.Now);                    //Printing the orders                  foreach (var o in orders)                  {                      Console.WriteLine(string.Format("\t Order: {0}' {1}' {2}' {3}"' o.OrderId' o.Title' o.Status' o.DeliveryLocation.AsText()));                        Console.WriteLine("\t\t Order Items:");                      foreach (var item in o.OrderItems)                          Console.WriteLine(string.Format("\t\t\t {0} x {1}"' item.Qty' item.Title));                  }                    Console.WriteLine("> Press any key to continue");                  Console.ReadLine();              }
Magic Number,DataSQLEF,Program,C:\repos\SyntaxC4-MSFT_AzureQuickStartsProjects\Data Services\DataSQLEF\Program.cs,Main,The following statement contains a magic number: using (OrderDbContext ctx = new OrderDbContext())              {                    Console.WriteLine("- Adding an Order to the db context");                  var order = new Order                  {                      Title = string.Format("Some order {0}"' DateTime.Now.Ticks)'                      Status = OrderStatus.New'                      DeliveryLocation = DbGeography.FromText("POINT(-122.336106 47.605049)")'                      DeliveryDate = DateTime.Now.AddDays(10)                  };                    ctx.Orders.Add(order);                    Console.WriteLine("- Adding OrderItems to the db context");                  ctx.OrderItems.Add(new OrderItem                  {                      Qty = 10'                      Title = "Visual Studio 2013"'                      Order = order                  });                    ctx.OrderItems.Add(new OrderItem                   {                       Qty = 21'                       Title = "Office 2013"'                       Order = order                   });                    //Saves changes to Azure SQL DB                  Console.WriteLine("- Save DB context changes to Azure SQL DB");                  ctx.SaveChanges();                    Console.WriteLine("- Query Server for Orders");                  //Query orders back from the server                  var orders = from o in ctx.Orders                               where o.DeliveryDate > DateTime.Now                               select o;                    //Alternatively you could have used an Linq expression                  //var orders = ctx.Orders.Where(o => o.DeliveryDate > DateTime.Now);                    //Printing the orders                  foreach (var o in orders)                  {                      Console.WriteLine(string.Format("\t Order: {0}' {1}' {2}' {3}"' o.OrderId' o.Title' o.Status' o.DeliveryLocation.AsText()));                        Console.WriteLine("\t\t Order Items:");                      foreach (var item in o.OrderItems)                          Console.WriteLine(string.Format("\t\t\t {0} x {1}"' item.Qty' item.Title));                  }                    Console.WriteLine("> Press any key to continue");                  Console.ReadLine();              }
