Implementation smell,Namespace,Class,File,Method,Description
Complex Method,POP,MailDecoder,C:\repos\DavyWk_POP-Lib\MailDecoder.cs,RemoveEncoding,Cyclomatic complexity of the method is 11
Complex Method,POP,MailDecoder,C:\repos\DavyWk_POP-Lib\MailDecoder.cs,DecodeSpecialChars,Cyclomatic complexity of the method is 11
Complex Method,POP,MailParser,C:\repos\DavyWk_POP-Lib\MailParser.cs,MailParser,Cyclomatic complexity of the method is 10
Complex Method,POP,MailParser,C:\repos\DavyWk_POP-Lib\MailParser.cs,GetSender,Cyclomatic complexity of the method is 8
Complex Method,POP,MailParser,C:\repos\DavyWk_POP-Lib\MailParser.cs,GetReceivers,Cyclomatic complexity of the method is 14
Complex Method,POP,MailParser,C:\repos\DavyWk_POP-Lib\MailParser.cs,ParseDate,Cyclomatic complexity of the method is 11
Complex Method,POP,MimeParser,C:\repos\DavyWk_POP-Lib\MimeParser.cs,Decode,Cyclomatic complexity of the method is 18
Long Statement,POP,MailDecoder,C:\repos\DavyWk_POP-Lib\MailDecoder.cs,GetCharFromHex,The length of the statement  "	if (char.IsLetterOrDigit (hexString [0]) && (char.IsLetterOrDigit (hexString [1]) || char.IsWhiteSpace (hexString [1]))) { " is 122.
Magic Number,POP,MailDecoder,C:\repos\DavyWk_POP-Lib\MailDecoder.cs,RemoveEncoding,The following statement contains a magic number: while ((index = s.IndexOf ("=?")) > -1) {  	var current = string.Empty;  	// index is at the beginning of the encoded string.  	// End of encoded string  	int followingSpace = s.IndexOf (' '' index);  	// If there are no spaces' get the whole string.  	if (followingSpace == -1)  		followingSpace = s.Length;  	current = s.Substring (index' followingSpace - index);  	if ((followingSpace != s.Length) && (s [followingSpace + 1] == '=') && (s [followingSpace + 2] == '?'))  		s = s.Remove (followingSpace' 1);  	Encoding charset = Encoding.GetEncoding (strCharset);  	// Skip ? after strCharset  	index = current.IndexOf ('?'' 3) + 1;  	char code = current [index];  	// Skip the second '?'  	index = current.IndexOf ('?'' index) + 1;  	string original = current.Substring (0' index);  	int endIndex = 0;  	var decoded = string.Empty;  	var encoded = string.Empty;  	if (code == 'B')// The string is encoded using Base64.  	 {  		// Two padding characters.  		endIndex = current.IndexOf ("=="' index) + 2;  		// One padding character.  		if (endIndex == 1)  			endIndex = current.IndexOf ('='' index) + 1;  		// No padding character.  		if (current [endIndex - 2] == '?')  			endIndex -= 2;  		encoded = current.Substring (index' endIndex - index);  		decoded = GetStringFromEncodedBase64 (encoded' charset);  	}  	else {  		endIndex = current.IndexOf (' '' index);  		// If there are no spaces' get the whole string.  		if (endIndex == -1)  			endIndex = current.IndexOf ('?'' index);  	}  	if (decoded == string.Empty) {  		if ((index != -1) && (endIndex != -1)) {  			encoded = current.Substring (index' endIndex - index);  			//byte[] raw = Encoding.UTF8.GetBytes(encoded);  			//decoded = charset.GetString(raw);  			decoded = DecodeSpecialChars (encoded' charset);  		}  	}  	string ret = current.Replace (original' string.Empty);  	if (!string.IsNullOrWhiteSpace (encoded))  		ret = ret.Replace (encoded' decoded);  	ret = ret.Replace ("?="' string.Empty);  	s = s.Replace (current' ret);  }  
Magic Number,POP,MailDecoder,C:\repos\DavyWk_POP-Lib\MailDecoder.cs,RemoveEncoding,The following statement contains a magic number: while ((index = s.IndexOf ("=?")) > -1) {  	var current = string.Empty;  	// index is at the beginning of the encoded string.  	// End of encoded string  	int followingSpace = s.IndexOf (' '' index);  	// If there are no spaces' get the whole string.  	if (followingSpace == -1)  		followingSpace = s.Length;  	current = s.Substring (index' followingSpace - index);  	if ((followingSpace != s.Length) && (s [followingSpace + 1] == '=') && (s [followingSpace + 2] == '?'))  		s = s.Remove (followingSpace' 1);  	Encoding charset = Encoding.GetEncoding (strCharset);  	// Skip ? after strCharset  	index = current.IndexOf ('?'' 3) + 1;  	char code = current [index];  	// Skip the second '?'  	index = current.IndexOf ('?'' index) + 1;  	string original = current.Substring (0' index);  	int endIndex = 0;  	var decoded = string.Empty;  	var encoded = string.Empty;  	if (code == 'B')// The string is encoded using Base64.  	 {  		// Two padding characters.  		endIndex = current.IndexOf ("=="' index) + 2;  		// One padding character.  		if (endIndex == 1)  			endIndex = current.IndexOf ('='' index) + 1;  		// No padding character.  		if (current [endIndex - 2] == '?')  			endIndex -= 2;  		encoded = current.Substring (index' endIndex - index);  		decoded = GetStringFromEncodedBase64 (encoded' charset);  	}  	else {  		endIndex = current.IndexOf (' '' index);  		// If there are no spaces' get the whole string.  		if (endIndex == -1)  			endIndex = current.IndexOf ('?'' index);  	}  	if (decoded == string.Empty) {  		if ((index != -1) && (endIndex != -1)) {  			encoded = current.Substring (index' endIndex - index);  			//byte[] raw = Encoding.UTF8.GetBytes(encoded);  			//decoded = charset.GetString(raw);  			decoded = DecodeSpecialChars (encoded' charset);  		}  	}  	string ret = current.Replace (original' string.Empty);  	if (!string.IsNullOrWhiteSpace (encoded))  		ret = ret.Replace (encoded' decoded);  	ret = ret.Replace ("?="' string.Empty);  	s = s.Replace (current' ret);  }  
Magic Number,POP,MailDecoder,C:\repos\DavyWk_POP-Lib\MailDecoder.cs,RemoveEncoding,The following statement contains a magic number: while ((index = s.IndexOf ("=?")) > -1) {  	var current = string.Empty;  	// index is at the beginning of the encoded string.  	// End of encoded string  	int followingSpace = s.IndexOf (' '' index);  	// If there are no spaces' get the whole string.  	if (followingSpace == -1)  		followingSpace = s.Length;  	current = s.Substring (index' followingSpace - index);  	if ((followingSpace != s.Length) && (s [followingSpace + 1] == '=') && (s [followingSpace + 2] == '?'))  		s = s.Remove (followingSpace' 1);  	Encoding charset = Encoding.GetEncoding (strCharset);  	// Skip ? after strCharset  	index = current.IndexOf ('?'' 3) + 1;  	char code = current [index];  	// Skip the second '?'  	index = current.IndexOf ('?'' index) + 1;  	string original = current.Substring (0' index);  	int endIndex = 0;  	var decoded = string.Empty;  	var encoded = string.Empty;  	if (code == 'B')// The string is encoded using Base64.  	 {  		// Two padding characters.  		endIndex = current.IndexOf ("=="' index) + 2;  		// One padding character.  		if (endIndex == 1)  			endIndex = current.IndexOf ('='' index) + 1;  		// No padding character.  		if (current [endIndex - 2] == '?')  			endIndex -= 2;  		encoded = current.Substring (index' endIndex - index);  		decoded = GetStringFromEncodedBase64 (encoded' charset);  	}  	else {  		endIndex = current.IndexOf (' '' index);  		// If there are no spaces' get the whole string.  		if (endIndex == -1)  			endIndex = current.IndexOf ('?'' index);  	}  	if (decoded == string.Empty) {  		if ((index != -1) && (endIndex != -1)) {  			encoded = current.Substring (index' endIndex - index);  			//byte[] raw = Encoding.UTF8.GetBytes(encoded);  			//decoded = charset.GetString(raw);  			decoded = DecodeSpecialChars (encoded' charset);  		}  	}  	string ret = current.Replace (original' string.Empty);  	if (!string.IsNullOrWhiteSpace (encoded))  		ret = ret.Replace (encoded' decoded);  	ret = ret.Replace ("?="' string.Empty);  	s = s.Replace (current' ret);  }  
Magic Number,POP,MailDecoder,C:\repos\DavyWk_POP-Lib\MailDecoder.cs,RemoveEncoding,The following statement contains a magic number: while ((index = s.IndexOf ("=?")) > -1) {  	var current = string.Empty;  	// index is at the beginning of the encoded string.  	// End of encoded string  	int followingSpace = s.IndexOf (' '' index);  	// If there are no spaces' get the whole string.  	if (followingSpace == -1)  		followingSpace = s.Length;  	current = s.Substring (index' followingSpace - index);  	if ((followingSpace != s.Length) && (s [followingSpace + 1] == '=') && (s [followingSpace + 2] == '?'))  		s = s.Remove (followingSpace' 1);  	Encoding charset = Encoding.GetEncoding (strCharset);  	// Skip ? after strCharset  	index = current.IndexOf ('?'' 3) + 1;  	char code = current [index];  	// Skip the second '?'  	index = current.IndexOf ('?'' index) + 1;  	string original = current.Substring (0' index);  	int endIndex = 0;  	var decoded = string.Empty;  	var encoded = string.Empty;  	if (code == 'B')// The string is encoded using Base64.  	 {  		// Two padding characters.  		endIndex = current.IndexOf ("=="' index) + 2;  		// One padding character.  		if (endIndex == 1)  			endIndex = current.IndexOf ('='' index) + 1;  		// No padding character.  		if (current [endIndex - 2] == '?')  			endIndex -= 2;  		encoded = current.Substring (index' endIndex - index);  		decoded = GetStringFromEncodedBase64 (encoded' charset);  	}  	else {  		endIndex = current.IndexOf (' '' index);  		// If there are no spaces' get the whole string.  		if (endIndex == -1)  			endIndex = current.IndexOf ('?'' index);  	}  	if (decoded == string.Empty) {  		if ((index != -1) && (endIndex != -1)) {  			encoded = current.Substring (index' endIndex - index);  			//byte[] raw = Encoding.UTF8.GetBytes(encoded);  			//decoded = charset.GetString(raw);  			decoded = DecodeSpecialChars (encoded' charset);  		}  	}  	string ret = current.Replace (original' string.Empty);  	if (!string.IsNullOrWhiteSpace (encoded))  		ret = ret.Replace (encoded' decoded);  	ret = ret.Replace ("?="' string.Empty);  	s = s.Replace (current' ret);  }  
Magic Number,POP,MailDecoder,C:\repos\DavyWk_POP-Lib\MailDecoder.cs,RemoveEncoding,The following statement contains a magic number: while ((index = s.IndexOf ("=?")) > -1) {  	var current = string.Empty;  	// index is at the beginning of the encoded string.  	// End of encoded string  	int followingSpace = s.IndexOf (' '' index);  	// If there are no spaces' get the whole string.  	if (followingSpace == -1)  		followingSpace = s.Length;  	current = s.Substring (index' followingSpace - index);  	if ((followingSpace != s.Length) && (s [followingSpace + 1] == '=') && (s [followingSpace + 2] == '?'))  		s = s.Remove (followingSpace' 1);  	Encoding charset = Encoding.GetEncoding (strCharset);  	// Skip ? after strCharset  	index = current.IndexOf ('?'' 3) + 1;  	char code = current [index];  	// Skip the second '?'  	index = current.IndexOf ('?'' index) + 1;  	string original = current.Substring (0' index);  	int endIndex = 0;  	var decoded = string.Empty;  	var encoded = string.Empty;  	if (code == 'B')// The string is encoded using Base64.  	 {  		// Two padding characters.  		endIndex = current.IndexOf ("=="' index) + 2;  		// One padding character.  		if (endIndex == 1)  			endIndex = current.IndexOf ('='' index) + 1;  		// No padding character.  		if (current [endIndex - 2] == '?')  			endIndex -= 2;  		encoded = current.Substring (index' endIndex - index);  		decoded = GetStringFromEncodedBase64 (encoded' charset);  	}  	else {  		endIndex = current.IndexOf (' '' index);  		// If there are no spaces' get the whole string.  		if (endIndex == -1)  			endIndex = current.IndexOf ('?'' index);  	}  	if (decoded == string.Empty) {  		if ((index != -1) && (endIndex != -1)) {  			encoded = current.Substring (index' endIndex - index);  			//byte[] raw = Encoding.UTF8.GetBytes(encoded);  			//decoded = charset.GetString(raw);  			decoded = DecodeSpecialChars (encoded' charset);  		}  	}  	string ret = current.Replace (original' string.Empty);  	if (!string.IsNullOrWhiteSpace (encoded))  		ret = ret.Replace (encoded' decoded);  	ret = ret.Replace ("?="' string.Empty);  	s = s.Replace (current' ret);  }  
Magic Number,POP,MailDecoder,C:\repos\DavyWk_POP-Lib\MailDecoder.cs,RemoveEncoding,The following statement contains a magic number: if ((followingSpace != s.Length) && (s [followingSpace + 1] == '=') && (s [followingSpace + 2] == '?'))  	s = s.Remove (followingSpace' 1);  
Magic Number,POP,MailDecoder,C:\repos\DavyWk_POP-Lib\MailDecoder.cs,RemoveEncoding,The following statement contains a magic number: index = current.IndexOf ('?'' 3) + 1;  
Magic Number,POP,MailDecoder,C:\repos\DavyWk_POP-Lib\MailDecoder.cs,RemoveEncoding,The following statement contains a magic number: if (code == 'B')// The string is encoded using Base64.   {  	// Two padding characters.  	endIndex = current.IndexOf ("=="' index) + 2;  	// One padding character.  	if (endIndex == 1)  		endIndex = current.IndexOf ('='' index) + 1;  	// No padding character.  	if (current [endIndex - 2] == '?')  		endIndex -= 2;  	encoded = current.Substring (index' endIndex - index);  	decoded = GetStringFromEncodedBase64 (encoded' charset);  }  else {  	endIndex = current.IndexOf (' '' index);  	// If there are no spaces' get the whole string.  	if (endIndex == -1)  		endIndex = current.IndexOf ('?'' index);  }  
Magic Number,POP,MailDecoder,C:\repos\DavyWk_POP-Lib\MailDecoder.cs,RemoveEncoding,The following statement contains a magic number: if (code == 'B')// The string is encoded using Base64.   {  	// Two padding characters.  	endIndex = current.IndexOf ("=="' index) + 2;  	// One padding character.  	if (endIndex == 1)  		endIndex = current.IndexOf ('='' index) + 1;  	// No padding character.  	if (current [endIndex - 2] == '?')  		endIndex -= 2;  	encoded = current.Substring (index' endIndex - index);  	decoded = GetStringFromEncodedBase64 (encoded' charset);  }  else {  	endIndex = current.IndexOf (' '' index);  	// If there are no spaces' get the whole string.  	if (endIndex == -1)  		endIndex = current.IndexOf ('?'' index);  }  
Magic Number,POP,MailDecoder,C:\repos\DavyWk_POP-Lib\MailDecoder.cs,RemoveEncoding,The following statement contains a magic number: if (code == 'B')// The string is encoded using Base64.   {  	// Two padding characters.  	endIndex = current.IndexOf ("=="' index) + 2;  	// One padding character.  	if (endIndex == 1)  		endIndex = current.IndexOf ('='' index) + 1;  	// No padding character.  	if (current [endIndex - 2] == '?')  		endIndex -= 2;  	encoded = current.Substring (index' endIndex - index);  	decoded = GetStringFromEncodedBase64 (encoded' charset);  }  else {  	endIndex = current.IndexOf (' '' index);  	// If there are no spaces' get the whole string.  	if (endIndex == -1)  		endIndex = current.IndexOf ('?'' index);  }  
Magic Number,POP,MailDecoder,C:\repos\DavyWk_POP-Lib\MailDecoder.cs,RemoveEncoding,The following statement contains a magic number: endIndex = current.IndexOf ("=="' index) + 2;  
Magic Number,POP,MailDecoder,C:\repos\DavyWk_POP-Lib\MailDecoder.cs,RemoveEncoding,The following statement contains a magic number: if (current [endIndex - 2] == '?')  	endIndex -= 2;  
Magic Number,POP,MailDecoder,C:\repos\DavyWk_POP-Lib\MailDecoder.cs,RemoveEncoding,The following statement contains a magic number: if (current [endIndex - 2] == '?')  	endIndex -= 2;  
Magic Number,POP,MailDecoder,C:\repos\DavyWk_POP-Lib\MailDecoder.cs,RemoveEncoding,The following statement contains a magic number: endIndex -= 2;  
Magic Number,POP,MailDecoder,C:\repos\DavyWk_POP-Lib\MailDecoder.cs,DecodeSpecialChars,The following statement contains a magic number: while ((index < current.Length) && (index = current.IndexOf ("="' index)) > -1) {  	if (lastIndex == index) {  		index++;  		continue;  	}  	index++;  	if ((index + 1) > current.Length - 1)  		continue;  	// Just to know where the original string starts.  	// -1: Keep the '=' sign.  	lastIndex = index - 1;  	int next = index;  	var hex = new List<byte> ();  	string hexString = current.Substring (index' 2);  	if (!hexString.ToCharArray ().Contains (HexChars))  		break;  	byte b = (byte)GetCharFromHex (hexString);  	if (b == 0)  		break;  	hex.Add (b);  	while ((next = current.IndexOf ('='' next) + 1) > index) {  		if ((next - 3) != index)  			break;  		index = next;  		hexString = current.Substring (index' 2);  		if (!hexString.ToCharArray ().Contains (HexChars))  			break;  		b = (byte)GetCharFromHex (hexString);  		if (b == 0)  			break;  		hex.Add (b);  	}  	// Gets to the end of the encoded string.  	index += 2;  	// Original is used to keep the = sign at the beginning.  	string original = current.Substring (lastIndex' index - lastIndex);  	string decoded = enc.GetString (hex.ToArray ());  	current = current.Replace (original' decoded);  	// Reset index for next iteration.  	index = lastIndex + 1;  	lastIndex = index;  }  
Magic Number,POP,MailDecoder,C:\repos\DavyWk_POP-Lib\MailDecoder.cs,DecodeSpecialChars,The following statement contains a magic number: while ((index < current.Length) && (index = current.IndexOf ("="' index)) > -1) {  	if (lastIndex == index) {  		index++;  		continue;  	}  	index++;  	if ((index + 1) > current.Length - 1)  		continue;  	// Just to know where the original string starts.  	// -1: Keep the '=' sign.  	lastIndex = index - 1;  	int next = index;  	var hex = new List<byte> ();  	string hexString = current.Substring (index' 2);  	if (!hexString.ToCharArray ().Contains (HexChars))  		break;  	byte b = (byte)GetCharFromHex (hexString);  	if (b == 0)  		break;  	hex.Add (b);  	while ((next = current.IndexOf ('='' next) + 1) > index) {  		if ((next - 3) != index)  			break;  		index = next;  		hexString = current.Substring (index' 2);  		if (!hexString.ToCharArray ().Contains (HexChars))  			break;  		b = (byte)GetCharFromHex (hexString);  		if (b == 0)  			break;  		hex.Add (b);  	}  	// Gets to the end of the encoded string.  	index += 2;  	// Original is used to keep the = sign at the beginning.  	string original = current.Substring (lastIndex' index - lastIndex);  	string decoded = enc.GetString (hex.ToArray ());  	current = current.Replace (original' decoded);  	// Reset index for next iteration.  	index = lastIndex + 1;  	lastIndex = index;  }  
Magic Number,POP,MailDecoder,C:\repos\DavyWk_POP-Lib\MailDecoder.cs,DecodeSpecialChars,The following statement contains a magic number: while ((index < current.Length) && (index = current.IndexOf ("="' index)) > -1) {  	if (lastIndex == index) {  		index++;  		continue;  	}  	index++;  	if ((index + 1) > current.Length - 1)  		continue;  	// Just to know where the original string starts.  	// -1: Keep the '=' sign.  	lastIndex = index - 1;  	int next = index;  	var hex = new List<byte> ();  	string hexString = current.Substring (index' 2);  	if (!hexString.ToCharArray ().Contains (HexChars))  		break;  	byte b = (byte)GetCharFromHex (hexString);  	if (b == 0)  		break;  	hex.Add (b);  	while ((next = current.IndexOf ('='' next) + 1) > index) {  		if ((next - 3) != index)  			break;  		index = next;  		hexString = current.Substring (index' 2);  		if (!hexString.ToCharArray ().Contains (HexChars))  			break;  		b = (byte)GetCharFromHex (hexString);  		if (b == 0)  			break;  		hex.Add (b);  	}  	// Gets to the end of the encoded string.  	index += 2;  	// Original is used to keep the = sign at the beginning.  	string original = current.Substring (lastIndex' index - lastIndex);  	string decoded = enc.GetString (hex.ToArray ());  	current = current.Replace (original' decoded);  	// Reset index for next iteration.  	index = lastIndex + 1;  	lastIndex = index;  }  
Magic Number,POP,MailDecoder,C:\repos\DavyWk_POP-Lib\MailDecoder.cs,DecodeSpecialChars,The following statement contains a magic number: while ((index < current.Length) && (index = current.IndexOf ("="' index)) > -1) {  	if (lastIndex == index) {  		index++;  		continue;  	}  	index++;  	if ((index + 1) > current.Length - 1)  		continue;  	// Just to know where the original string starts.  	// -1: Keep the '=' sign.  	lastIndex = index - 1;  	int next = index;  	var hex = new List<byte> ();  	string hexString = current.Substring (index' 2);  	if (!hexString.ToCharArray ().Contains (HexChars))  		break;  	byte b = (byte)GetCharFromHex (hexString);  	if (b == 0)  		break;  	hex.Add (b);  	while ((next = current.IndexOf ('='' next) + 1) > index) {  		if ((next - 3) != index)  			break;  		index = next;  		hexString = current.Substring (index' 2);  		if (!hexString.ToCharArray ().Contains (HexChars))  			break;  		b = (byte)GetCharFromHex (hexString);  		if (b == 0)  			break;  		hex.Add (b);  	}  	// Gets to the end of the encoded string.  	index += 2;  	// Original is used to keep the = sign at the beginning.  	string original = current.Substring (lastIndex' index - lastIndex);  	string decoded = enc.GetString (hex.ToArray ());  	current = current.Replace (original' decoded);  	// Reset index for next iteration.  	index = lastIndex + 1;  	lastIndex = index;  }  
Magic Number,POP,MailDecoder,C:\repos\DavyWk_POP-Lib\MailDecoder.cs,DecodeSpecialChars,The following statement contains a magic number: while ((next = current.IndexOf ('='' next) + 1) > index) {  	if ((next - 3) != index)  		break;  	index = next;  	hexString = current.Substring (index' 2);  	if (!hexString.ToCharArray ().Contains (HexChars))  		break;  	b = (byte)GetCharFromHex (hexString);  	if (b == 0)  		break;  	hex.Add (b);  }  
Magic Number,POP,MailDecoder,C:\repos\DavyWk_POP-Lib\MailDecoder.cs,DecodeSpecialChars,The following statement contains a magic number: while ((next = current.IndexOf ('='' next) + 1) > index) {  	if ((next - 3) != index)  		break;  	index = next;  	hexString = current.Substring (index' 2);  	if (!hexString.ToCharArray ().Contains (HexChars))  		break;  	b = (byte)GetCharFromHex (hexString);  	if (b == 0)  		break;  	hex.Add (b);  }  
Magic Number,POP,MailDecoder,C:\repos\DavyWk_POP-Lib\MailDecoder.cs,DecodeSpecialChars,The following statement contains a magic number: if ((next - 3) != index)  	break;  
Magic Number,POP,MailDecoder,C:\repos\DavyWk_POP-Lib\MailDecoder.cs,DecodeSpecialChars,The following statement contains a magic number: hexString = current.Substring (index' 2);  
Magic Number,POP,MailDecoder,C:\repos\DavyWk_POP-Lib\MailDecoder.cs,DecodeSpecialChars,The following statement contains a magic number: index += 2;  
Magic Number,POP,MailDecoder,C:\repos\DavyWk_POP-Lib\MailDecoder.cs,StartsWith,The following statement contains a magic number: if (s.StartsWith ("\t") || s.StartsWith (" "))  	return 1;  else if (s.StartsWith ("  "))  	return 2;  else  	return 0;  
Magic Number,POP,MailDecoder,C:\repos\DavyWk_POP-Lib\MailDecoder.cs,StartsWith,The following statement contains a magic number: if (s.StartsWith ("  "))  	return 2;  else  	return 0;  
Magic Number,POP,MailDecoder,C:\repos\DavyWk_POP-Lib\MailDecoder.cs,StartsWith,The following statement contains a magic number: return 2;  
Magic Number,POP,MailParser,C:\repos\DavyWk_POP-Lib\MailParser.cs,GetReceivers,The following statement contains a magic number: s = s.Remove (0' index + 2);  
Magic Number,POP,MailParser,C:\repos\DavyWk_POP-Lib\MailParser.cs,ParseDate,The following statement contains a magic number: if ((lastSpace == -2) || (lastSpace < index))  	lastSpace = date.Length - 1;  
Magic Number,POP,MailParser,C:\repos\DavyWk_POP-Lib\MailParser.cs,ParseDate,The following statement contains a magic number: offsetHours /= 100;  
Magic Number,POP,MailParser,C:\repos\DavyWk_POP-Lib\MailParser.cs,ParseDate,The following statement contains a magic number: int.TryParse (date.Substring (4' 2)' out day);  
Magic Number,POP,MailParser,C:\repos\DavyWk_POP-Lib\MailParser.cs,ParseDate,The following statement contains a magic number: int.TryParse (date.Substring (4' 2)' out day);  
Magic Number,POP,MailParser,C:\repos\DavyWk_POP-Lib\MailParser.cs,ParseDate,The following statement contains a magic number: if ((day > 0) && (day < 10))  	dateFormat = dateFormat.Replace ("ddd dd"' "ddd d");  
Magic Number,POP,MailParsingUtils,C:\repos\DavyWk_POP-Lib\MailParsingUtils.cs,RemoveParenthesisEnding,The following statement contains a magic number: if ((end == -1) || (beg == -2))  	return s;  
Magic Number,POP,MimeParser,C:\repos\DavyWk_POP-Lib\MimeParser.cs,FindSections,The following statement contains a magic number: if (sections.Count < 2)  	return sections;  
Magic Number,POP,POP3Client,C:\repos\DavyWk_POP-Lib\POP3Client.cs,POP3Client,The following statement contains a magic number: if (_port < 1) {  	// Port 995 is the default TLS/SSL POP3 port.  	_port = 995;  	_ssl = true;  }  
Magic Number,POP,POP3Client,C:\repos\DavyWk_POP-Lib\POP3Client.cs,POP3Client,The following statement contains a magic number: _port = 995;  
Magic Number,POP,POP3Client,C:\repos\DavyWk_POP-Lib\POP3Client.cs,Connect,The following statement contains a magic number: try {  	client.Connect (new IPEndPoint (IP' Port));  	client.ReceiveTimeout = 2 * 1000;  	client.SendTimeout = 2 * 1000;  }  catch (SocketException ex) {  	InternalClose ();  	return ex.Message;  }  
Magic Number,POP,POP3Client,C:\repos\DavyWk_POP-Lib\POP3Client.cs,Connect,The following statement contains a magic number: try {  	client.Connect (new IPEndPoint (IP' Port));  	client.ReceiveTimeout = 2 * 1000;  	client.SendTimeout = 2 * 1000;  }  catch (SocketException ex) {  	InternalClose ();  	return ex.Message;  }  
Magic Number,POP,POP3Client,C:\repos\DavyWk_POP-Lib\POP3Client.cs,Connect,The following statement contains a magic number: try {  	client.Connect (new IPEndPoint (IP' Port));  	client.ReceiveTimeout = 2 * 1000;  	client.SendTimeout = 2 * 1000;  }  catch (SocketException ex) {  	InternalClose ();  	return ex.Message;  }  
Magic Number,POP,POP3Client,C:\repos\DavyWk_POP-Lib\POP3Client.cs,Connect,The following statement contains a magic number: try {  	client.Connect (new IPEndPoint (IP' Port));  	client.ReceiveTimeout = 2 * 1000;  	client.SendTimeout = 2 * 1000;  }  catch (SocketException ex) {  	InternalClose ();  	return ex.Message;  }  
Magic Number,POP,POP3Client,C:\repos\DavyWk_POP-Lib\POP3Client.cs,Connect,The following statement contains a magic number: client.ReceiveTimeout = 2 * 1000;  
Magic Number,POP,POP3Client,C:\repos\DavyWk_POP-Lib\POP3Client.cs,Connect,The following statement contains a magic number: client.ReceiveTimeout = 2 * 1000;  
Magic Number,POP,POP3Client,C:\repos\DavyWk_POP-Lib\POP3Client.cs,Connect,The following statement contains a magic number: client.SendTimeout = 2 * 1000;  
Magic Number,POP,POP3Client,C:\repos\DavyWk_POP-Lib\POP3Client.cs,Connect,The following statement contains a magic number: client.SendTimeout = 2 * 1000;  
