Implementation smell,Namespace,Class,File,Method,Description
Long Statement,Mogade.Tests.Achievements,AchievementEarnedTests,D:\research\architectureSmells\repos\mogade_mogade-csharp\Mogade.Tests.Core\Achievements\AchievementEarnedTests.cs,SendsTheRequest,The length of the statement  "         Server.Stub(new ApiExpectation { Method = "POST"' Url = "/gamma/achievements"' Request = "aid=123abc&username=paul&userkey=jessica&key=thekey&sig=1ddea35e4249044f29a16ac0b12e98162ad76855"' Response = "{}" }); " is 208.
Long Statement,Mogade.Tests.Achievements,AchievementEarnedTests,D:\research\architectureSmells\repos\mogade_mogade-csharp\Mogade.Tests.Core\Achievements\AchievementEarnedTests.cs,GetsAnAchievementResponse,The length of the statement  "         Server.Stub(new ApiExpectation { Method = "POST"' Url = "/gamma/achievements"' Response = "{id: 'the_id'' points: 286}" }); " is 123.
Long Statement,Mogade.Tests.Achievements,GetAchievementTests,D:\research\architectureSmells\repos\mogade_mogade-csharp\Mogade.Tests.Core\Achievements\GetAchievementTests.cs,SendsTheRequest,The length of the statement  "         Server.Stub(new ApiExpectation { Method = "GET"' Url = "/gamma/achievements"' Request = "key=thekey"' Response = "[]" }); " is 121.
Long Statement,Mogade.Tests.Achievements,GetAchievementTests,D:\research\architectureSmells\repos\mogade_mogade-csharp\Mogade.Tests.Core\Achievements\GetAchievementTests.cs,DeserializesAchievements,The length of the statement  "         Server.Stub(new ApiExpectation { Method = "GET"' Url = "/gamma/achievements"' Response = "[{id:'123'' name: 'the-name'' description: 'the-desc'' points: 234}]" }); " is 163.
Long Statement,Mogade.Tests.Achievements,GetEarnedAchievementsTests,D:\research\architectureSmells\repos\mogade_mogade-csharp\Mogade.Tests.Core\Achievements\GetEarnedAchievementsTests.cs,SendsTheRequest,The length of the statement  "         Server.Stub(new ApiExpectation { Method = "GET"' Url = "/gamma/achievements"' Request = "username=paul&userkey=jessica&key=thekey"' Response = "[]" }); " is 151.
Long Statement,Mogade.Tests.AssetTests,GetAssetsTests,D:\research\architectureSmells\repos\mogade_mogade-csharp\Mogade.Tests.Core\AssetTests\GetAssetsTests.cs,RetrievesTheAssets,The length of the statement  "         Server.Stub(new ApiExpectation { Response = "[{name: 'a-name'' type: 33' dated: '2009-02-16T04:06:06Z'' file: 'a.zip'' meta: 'har'}]" }); " is 137.
Long Statement,Mogade.Tests.ErrorsTests,LogErrorTests,D:\research\architectureSmells\repos\mogade_mogade-csharp\Mogade.Tests.Core\ErrorsTests\LogErrorTests.cs,SendsRequestToTheServer,The length of the statement  "         Server.Stub(new ApiExpectation { Method = "POST"' Url = "/gamma/errors"' Request = "subject=ts&details=thedetails&key=akey&sig=98c6c01d87fecb1504d70d82c05b74cde732f2bf"' Response = null }); " is 189.
Long Statement,Mogade.Tests,CoreCommunicationTests,D:\research\architectureSmells\repos\mogade_mogade-csharp\Mogade.Tests.Core\InfrastructureTests\CoreCommunicationTests.cs,PayloadIncludesTheGameKey,The length of the statement  "         new Communicator(new FakeContext { Key = "ItsOver9000!" }).SendPayload<object>("POST"' "anything"' new Dictionary<string' object>(0)' s => " is 138.
Long Statement,Mogade.Tests,CoreCommunicationTests,D:\research\architectureSmells\repos\mogade_mogade-csharp\Mogade.Tests.Core\InfrastructureTests\CoreCommunicationTests.cs,PayloadProperlyHandlesIEnumerables,The length of the statement  "         new Communicator(new FakeContext { Key = "ItsOver9000!" }).SendPayload<object>("GET"' "anything"' new Dictionary<string' object>{{"scopes"' new[]{2'5'6}}}' s => " is 160.
Long Statement,Mogade.Tests,CoreCommunicationTests,D:\research\architectureSmells\repos\mogade_mogade-csharp\Mogade.Tests.Core\InfrastructureTests\CoreCommunicationTests.cs,PayloadProperlyHandlesIEnumerables,The length of the statement  "            Assert.True(s.Raw.Contains("scopes%5B%5D=2&scopes%5B%5D=5&scopes%5B%5D=6")' "payload should contain the game key version"); " is 123.
Long Statement,Mogade.Tests,CoreCommunicationTests,D:\research\architectureSmells\repos\mogade_mogade-csharp\Mogade.Tests.Core\InfrastructureTests\CoreCommunicationTests.cs,PayloadPropertyEncodesValues,The length of the statement  "         new Communicator(new FakeContext { Key = "ItsOver9000!" }).SendPayload<object>("GET"' "anything"' new Dictionary<string' object> { { "data"' "2 + 3 = 5" } }' s => " is 162.
Long Statement,Mogade.Tests,FakeServer,D:\research\architectureSmells\repos\mogade_mogade-csharp\Mogade.Tests.Core\FakeServer.cs,Listen,The length of the statement  "               SendResponse(context' string.Format("Unexpected call: {0} {1}{2}{3}"' context.Request.HttpMethod' context.Request.Url' Environment.NewLine' body)' new ApiExpectation { Status = 500 }); " is 184.
Long Statement,Mogade.Tests,ErrorHandlingTests,D:\research\architectureSmells\repos\mogade_mogade-csharp\Mogade.Tests.Core\InfrastructureTests\ErrorHandlingTests.cs,IncludesAnErrorInfoInTheExceptionIfPresent,The length of the statement  "         Server.Stub(new ApiExpectation { Status = 400' Response = @"{'error': 'its over 9000!!'' 'info': 'some extra goodness'}" }); " is 124.
Long Statement,Mogade.Tests.LeaderboardsTest,GetLeaderboardCountTests,D:\research\architectureSmells\repos\mogade_mogade-csharp\Mogade.Tests.Core\LeaderboardsTest\GetLeaderboardCountTests.cs,SendsRequestForLeaderboardCountToTheServer,The length of the statement  "         Server.Stub(new ApiExpectation { Method = "GET"' Url = "/gamma/scores/count"' Request = "lid=theid&scope=2"' Response = "0" }); " is 127.
Long Statement,Mogade.Tests.LeaderboardsTest,GetLeaderboardTests,D:\research\architectureSmells\repos\mogade_mogade-csharp\Mogade.Tests.Core\LeaderboardsTest\GetLeaderboardTests.cs,SendsRequestForLeaderboardToTheServer,The length of the statement  "         Server.Stub(new ApiExpectation { Method = "GET"' Url = "/gamma/scores"' Request = "lid=theid&page=3&records=10&scope=2"' Response = "{}" }); " is 140.
Long Statement,Mogade.Tests.LeaderboardsTest,GetLeaderboardTests,D:\research\architectureSmells\repos\mogade_mogade-csharp\Mogade.Tests.Core\LeaderboardsTest\GetLeaderboardTests.cs,SendsRequestForLeaderboardWitUserAndRecordCount,The length of the statement  "         Server.Stub(new ApiExpectation { Method = "GET"' Url = "/gamma/scores"' Request = "lid=theid&username=itsme&userKey=imunique&records=25&scope=2"' Response = "{}" }); " is 165.
Long Statement,Mogade.Tests.LeaderboardsTest,GetLeaderboardTests,D:\research\architectureSmells\repos\mogade_mogade-csharp\Mogade.Tests.Core\LeaderboardsTest\GetLeaderboardTests.cs,RetrievesALeaderboard,The length of the statement  "         Server.Stub(new ApiExpectation { Response = @"{'page': 23' 'scores':[{'username':'teg'' 'points': 9001' 'data': 'something'' 'dated': '2009-02-16T04:06:06Z'}' {'username':'paul'' 'points': 8999' 'dated': '2009-02-15T04:05:06Z'}]}" }); " is 234.
Long Statement,Mogade.Tests.LeaderboardsTest,GetRankTests,D:\research\architectureSmells\repos\mogade_mogade-csharp\Mogade.Tests.Core\LeaderboardsTest\GetRankTests.cs,SendsIndividualRankRequestToTheServerForAPlayer,The length of the statement  "         Server.Stub(new ApiExpectation { Method = "GET"' Url = "/gamma/ranks"' Request = "lid=mybaloney&username=paul&userkey=jessica&scopes=3"' Response = "0" }); " is 155.
Long Statement,Mogade.Tests.LeaderboardsTest,GetRankTests,D:\research\architectureSmells\repos\mogade_mogade-csharp\Mogade.Tests.Core\LeaderboardsTest\GetRankTests.cs,SendMultipleRankRequestToServerForAPlayer,The length of the statement  "         Server.Stub(new ApiExpectation { Method = "GET"' Url = "/gamma/ranks"' Request = "lid=mybaloney&username=paul&userkey=jessica&scopes%5B%5D=1&scopes%5B%5D=2"' Response = "{}" }); " is 177.
Long Statement,Mogade.Tests.LeaderboardsTest,GetRankTests,D:\research\architectureSmells\repos\mogade_mogade-csharp\Mogade.Tests.Core\LeaderboardsTest\GetRankTests.cs,SendMultipleRankRequestToServerForAPlayer,The length of the statement  "         new Driver("thekey"' "sssshh").GetRanks("mybaloney"' "paul"' "jessica"' new[]{LeaderboardScope.Daily' LeaderboardScope.Weekly}' SetIfSuccess); " is 142.
Long Statement,Mogade.Tests.LeaderboardsTest,GetRankTests,D:\research\architectureSmells\repos\mogade_mogade-csharp\Mogade.Tests.Core\LeaderboardsTest\GetRankTests.cs,SendsAllRanksRequestToServerForAPlayer,The length of the statement  "         Server.Stub(new ApiExpectation { Method = "GET"' Url = "/gamma/ranks"' Request = "lid=mybaloney&username=paul&userkey=jessica&scopes%5B%5D=1&scopes%5B%5D=2&scopes%5B%5D=3&scopes%5B%5D=4"' Response = "{}" }); " is 207.
Long Statement,Mogade.Tests.LeaderboardsTest,GetRankTests,D:\research\architectureSmells\repos\mogade_mogade-csharp\Mogade.Tests.Core\LeaderboardsTest\GetRankTests.cs,SendsIndividualRankRequestToTheServerForAScore,The length of the statement  "         Server.Stub(new ApiExpectation { Method = "GET"' Url = "/gamma/ranks"' Request = "lid=mybaloney&score=55&scopes=3"' Response = "0" }); " is 134.
Long Statement,Mogade.Tests.LeaderboardsTest,GetRankTests,D:\research\architectureSmells\repos\mogade_mogade-csharp\Mogade.Tests.Core\LeaderboardsTest\GetRankTests.cs,SendMultipleRankRequestToServerForAScore,The length of the statement  "         Server.Stub(new ApiExpectation { Method = "GET"' Url = "/gamma/ranks"' Request = "lid=mybaloney&score=66&scopes%5B%5D=1&scopes%5B%5D=2"' Response = "{}" }); " is 156.
Long Statement,Mogade.Tests.LeaderboardsTest,GetRankTests,D:\research\architectureSmells\repos\mogade_mogade-csharp\Mogade.Tests.Core\LeaderboardsTest\GetRankTests.cs,SendMultipleRankRequestToServerForAScore,The length of the statement  "         new Driver("thekey"' "sssshh").GetRanks("mybaloney"' 66' new[] { LeaderboardScope.Daily' LeaderboardScope.Weekly }' SetIfSuccess); " is 130.
Long Statement,Mogade.Tests.LeaderboardsTest,GetRankTests,D:\research\architectureSmells\repos\mogade_mogade-csharp\Mogade.Tests.Core\LeaderboardsTest\GetRankTests.cs,SendsAllRanksRequestToServerForAScore,The length of the statement  "         Server.Stub(new ApiExpectation { Method = "GET"' Url = "/gamma/ranks"' Request = "lid=mybaloney&score=77&scopes%5B%5D=1&scopes%5B%5D=2&scopes%5B%5D=3&scopes%5B%5D=4"' Response = "{}" }); " is 186.
Long Statement,Mogade.Tests.LeaderboardsTest,GetRivalsTests,D:\research\architectureSmells\repos\mogade_mogade-csharp\Mogade.Tests.Core\LeaderboardsTest\GetRivalsTests.cs,SendsRequestForToServer,The length of the statement  "         Server.Stub(new ApiExpectation { Method = "GET"' Url = "/gamma/scores/rivals"' Request = "lid=theid&username=itsme&userKey=imunique&scope=2"' Response = "[]" }); " is 161.
Long Statement,Mogade.Tests.LeaderboardsTest,GetRivalsTests,D:\research\architectureSmells\repos\mogade_mogade-csharp\Mogade.Tests.Core\LeaderboardsTest\GetRivalsTests.cs,RetrivesScores,The length of the statement  "         Server.Stub(new ApiExpectation { Response = @"[{'username':'teg'' 'points': 9001' 'data': 'something'' 'dated': '2009-02-16T04:06:06Z'}' {'username':'paul'' 'points': 8999' 'dated': '2009-02-15T04:05:06Z'}]" }); " is 211.
Long Statement,Mogade.Tests.LeaderboardsTest,SaveScoreTests,D:\research\architectureSmells\repos\mogade_mogade-csharp\Mogade.Tests.Core\LeaderboardsTest\SaveScoreTests.cs,Darren,The length of the statement  "         Server.Stub(new ApiExpectation { Method = "POST"' Url = "/gamma/scores"' Request = "lid=mybaloney&username=Scytale&userkey=gom%20jabbar&points=10039&key=thekey&sig=ea56e70da9398d58eff2ec78d7d00605021dba12"' Response = "{}" }); " is 226.
Long Statement,Mogade.Tests.LeaderboardsTest,SaveScoreTests,D:\research\architectureSmells\repos\mogade_mogade-csharp\Mogade.Tests.Core\LeaderboardsTest\SaveScoreTests.cs,Darren,The length of the statement  "         new Driver("4ee6add2563d8a7d3200001d"' "Fw>HPS^OXw1Kx=_SATiE@32[FUZ9lW@uO").SaveScore("4ee6b064563d8a7d32000038"' score' "android-emulator"' SetIfSuccess); " is 155.
Long Statement,Mogade.Tests.LeaderboardsTest,SaveScoreTests,D:\research\architectureSmells\repos\mogade_mogade-csharp\Mogade.Tests.Core\LeaderboardsTest\SaveScoreTests.cs,SendsScoreWithoutDataToTheServer,The length of the statement  "         Server.Stub(new ApiExpectation { Method = "POST"' Url = "/gamma/scores"' Request = "lid=mybaloney&username=Scytale&userkey=gom%20jabbar&points=10039&key=thekey&sig=ea56e70da9398d58eff2ec78d7d00605021dba12"' Response = "{}" }); " is 226.
Long Statement,Mogade.Tests.LeaderboardsTest,SaveScoreTests,D:\research\architectureSmells\repos\mogade_mogade-csharp\Mogade.Tests.Core\LeaderboardsTest\SaveScoreTests.cs,SendsScoreWithDataToTheServer,The length of the statement  "         Server.Stub(new ApiExpectation { Method = "POST"' Url = "/gamma/scores"' Request = "lid=mybaloney&username=Scytale&userkey=gom%20jabbar&points=10039&data=mydata&key=thekey&sig=750c0ae7304e3e4cdc4e97e09f197f05d5708fad"' Response = "{}" });" is 238.
Long Statement,Mogade.Tests.StatsTests,LogApplicationStartTests,D:\research\architectureSmells\repos\mogade_mogade-csharp\Mogade.Tests.Core\StatsTests\LogApplicationStartTests.cs,SendsRequestToTheServer,The length of the statement  "         Server.Stub(new ApiExpectation { Method = "POST"' Url = "/gamma/stats"' Request = "userkey=imspecial&key=akey&sig=ecdc09ff182d5b16f85517100c224639b3611258"' Response = null }); " is 176.
Long Statement,Mogade.Tests.Users,RenameTests,D:\research\architectureSmells\repos\mogade_mogade-csharp\Mogade.Tests.Core\Users\RenameTests.cs,SendsRequestToTheServer,The length of the statement  "         Server.Stub(new ApiExpectation { Method = "POST"' Url = "/gamma/users/rename"' Request = "username=old&userkey=did&newname=new&key=akey&sig=0b29a989f610c9a4eb166846d9a63ff8a87c5c78"' Response = "true" }); " is 204.
Magic Number,Mogade.Tests.Achievements,AchievementEarnedTests,D:\research\architectureSmells\repos\mogade_mogade-csharp\Mogade.Tests.Core\Achievements\AchievementEarnedTests.cs,GetsAnAchievementResponse,The following statement contains a magic number: new Driver("thekey"' "sssshh").AchievementEarned("123abc"' "paul"' "jessica"' r =>           {              Assert.AreEqual(true' r.Success);              Assert.AreEqual("the_id"' r.Data.Id);              Assert.AreEqual(286' r.Data.Points);              Set();           });
Magic Number,Mogade.Tests.Achievements,GetAchievementTests,D:\research\architectureSmells\repos\mogade_mogade-csharp\Mogade.Tests.Core\Achievements\GetAchievementTests.cs,DeserializesAchievements,The following statement contains a magic number: new Driver("thekey"' "sssshh").GetAchievements(r =>           {              Assert.AreEqual(true' r.Success);              Assert.AreEqual(1' r.Data.Count);              Assert.AreEqual("123"' r.Data.ElementAt(0).Id);              Assert.AreEqual("the-name"' r.Data.ElementAt(0).Name);              Assert.AreEqual("the-desc"' r.Data.ElementAt(0).Description);              Assert.AreEqual(234' r.Data.ElementAt(0).Points);              Set();           });
Magic Number,Mogade.Tests.Achievements,GetEarnedAchievementsTests,D:\research\architectureSmells\repos\mogade_mogade-csharp\Mogade.Tests.Core\Achievements\GetEarnedAchievementsTests.cs,DeserializesEarnedAchievements,The following statement contains a magic number: new Driver("thekey"' "sssshh").GetEarnedAchievements("paul"' "jessica"' r =>           {              Assert.AreEqual(true' r.Success);              Assert.AreEqual(2' r.Data.Count);              Assert.AreEqual("its over"' r.Data.ElementAt(0));              Assert.AreEqual("9000"' r.Data.ElementAt(1));              Set();           });
Magic Number,Mogade.Tests.AssetTests,GetAssetsTests,D:\research\architectureSmells\repos\mogade_mogade-csharp\Mogade.Tests.Core\AssetTests\GetAssetsTests.cs,RetrievesTheAssets,The following statement contains a magic number: new Driver("akey"' "sssshh2").GetAssets(response =>           {              Assert.AreEqual(1' response.Data.Count);              Assert.AreEqual("a-name"' response.Data[0].Name);              Assert.AreEqual("a.zip"' response.Data[0].File);              Assert.AreEqual(33' response.Data[0].Type);              Assert.AreEqual(new DateTime(2009' 2' 16' 4' 6' 6)' response.Data[0].Dated.ToUniversalTime());              Assert.AreEqual("har"' response.Data[0].Meta);              Set();           });
Magic Number,Mogade.Tests.AssetTests,GetAssetsTests,D:\research\architectureSmells\repos\mogade_mogade-csharp\Mogade.Tests.Core\AssetTests\GetAssetsTests.cs,RetrievesTheAssets,The following statement contains a magic number: new Driver("akey"' "sssshh2").GetAssets(response =>           {              Assert.AreEqual(1' response.Data.Count);              Assert.AreEqual("a-name"' response.Data[0].Name);              Assert.AreEqual("a.zip"' response.Data[0].File);              Assert.AreEqual(33' response.Data[0].Type);              Assert.AreEqual(new DateTime(2009' 2' 16' 4' 6' 6)' response.Data[0].Dated.ToUniversalTime());              Assert.AreEqual("har"' response.Data[0].Meta);              Set();           });
Magic Number,Mogade.Tests.AssetTests,GetAssetsTests,D:\research\architectureSmells\repos\mogade_mogade-csharp\Mogade.Tests.Core\AssetTests\GetAssetsTests.cs,RetrievesTheAssets,The following statement contains a magic number: new Driver("akey"' "sssshh2").GetAssets(response =>           {              Assert.AreEqual(1' response.Data.Count);              Assert.AreEqual("a-name"' response.Data[0].Name);              Assert.AreEqual("a.zip"' response.Data[0].File);              Assert.AreEqual(33' response.Data[0].Type);              Assert.AreEqual(new DateTime(2009' 2' 16' 4' 6' 6)' response.Data[0].Dated.ToUniversalTime());              Assert.AreEqual("har"' response.Data[0].Meta);              Set();           });
Magic Number,Mogade.Tests.AssetTests,GetAssetsTests,D:\research\architectureSmells\repos\mogade_mogade-csharp\Mogade.Tests.Core\AssetTests\GetAssetsTests.cs,RetrievesTheAssets,The following statement contains a magic number: new Driver("akey"' "sssshh2").GetAssets(response =>           {              Assert.AreEqual(1' response.Data.Count);              Assert.AreEqual("a-name"' response.Data[0].Name);              Assert.AreEqual("a.zip"' response.Data[0].File);              Assert.AreEqual(33' response.Data[0].Type);              Assert.AreEqual(new DateTime(2009' 2' 16' 4' 6' 6)' response.Data[0].Dated.ToUniversalTime());              Assert.AreEqual("har"' response.Data[0].Meta);              Set();           });
Magic Number,Mogade.Tests.AssetTests,GetAssetsTests,D:\research\architectureSmells\repos\mogade_mogade-csharp\Mogade.Tests.Core\AssetTests\GetAssetsTests.cs,RetrievesTheAssets,The following statement contains a magic number: new Driver("akey"' "sssshh2").GetAssets(response =>           {              Assert.AreEqual(1' response.Data.Count);              Assert.AreEqual("a-name"' response.Data[0].Name);              Assert.AreEqual("a.zip"' response.Data[0].File);              Assert.AreEqual(33' response.Data[0].Type);              Assert.AreEqual(new DateTime(2009' 2' 16' 4' 6' 6)' response.Data[0].Dated.ToUniversalTime());              Assert.AreEqual("har"' response.Data[0].Meta);              Set();           });
Magic Number,Mogade.Tests.AssetTests,GetAssetsTests,D:\research\architectureSmells\repos\mogade_mogade-csharp\Mogade.Tests.Core\AssetTests\GetAssetsTests.cs,RetrievesTheAssets,The following statement contains a magic number: new Driver("akey"' "sssshh2").GetAssets(response =>           {              Assert.AreEqual(1' response.Data.Count);              Assert.AreEqual("a-name"' response.Data[0].Name);              Assert.AreEqual("a.zip"' response.Data[0].File);              Assert.AreEqual(33' response.Data[0].Type);              Assert.AreEqual(new DateTime(2009' 2' 16' 4' 6' 6)' response.Data[0].Dated.ToUniversalTime());              Assert.AreEqual("har"' response.Data[0].Meta);              Set();           });
Magic Number,Mogade.Tests.AssetTests,GetAssetsTests,D:\research\architectureSmells\repos\mogade_mogade-csharp\Mogade.Tests.Core\AssetTests\GetAssetsTests.cs,RetrievesTheAssets,The following statement contains a magic number: new Driver("akey"' "sssshh2").GetAssets(response =>           {              Assert.AreEqual(1' response.Data.Count);              Assert.AreEqual("a-name"' response.Data[0].Name);              Assert.AreEqual("a.zip"' response.Data[0].File);              Assert.AreEqual(33' response.Data[0].Type);              Assert.AreEqual(new DateTime(2009' 2' 16' 4' 6' 6)' response.Data[0].Dated.ToUniversalTime());              Assert.AreEqual("har"' response.Data[0].Meta);              Set();           });
Magic Number,Mogade.Tests,CoreCommunicationTests,D:\research\architectureSmells\repos\mogade_mogade-csharp\Mogade.Tests.Core\InfrastructureTests\CoreCommunicationTests.cs,PayloadProperlyHandlesIEnumerables,The following statement contains a magic number: new Communicator(new FakeContext { Key = "ItsOver9000!" }).SendPayload<object>("GET"' "anything"' new Dictionary<string' object>{{"scopes"' new[]{2'5'6}}}' s =>           {              Assert.True(s.Raw.Contains("scopes%5B%5D=2&scopes%5B%5D=5&scopes%5B%5D=6")' "payload should contain the game key version");              Set();           });
Magic Number,Mogade.Tests,CoreCommunicationTests,D:\research\architectureSmells\repos\mogade_mogade-csharp\Mogade.Tests.Core\InfrastructureTests\CoreCommunicationTests.cs,PayloadProperlyHandlesIEnumerables,The following statement contains a magic number: new Communicator(new FakeContext { Key = "ItsOver9000!" }).SendPayload<object>("GET"' "anything"' new Dictionary<string' object>{{"scopes"' new[]{2'5'6}}}' s =>           {              Assert.True(s.Raw.Contains("scopes%5B%5D=2&scopes%5B%5D=5&scopes%5B%5D=6")' "payload should contain the game key version");              Set();           });
Magic Number,Mogade.Tests,CoreCommunicationTests,D:\research\architectureSmells\repos\mogade_mogade-csharp\Mogade.Tests.Core\InfrastructureTests\CoreCommunicationTests.cs,PayloadProperlyHandlesIEnumerables,The following statement contains a magic number: new Communicator(new FakeContext { Key = "ItsOver9000!" }).SendPayload<object>("GET"' "anything"' new Dictionary<string' object>{{"scopes"' new[]{2'5'6}}}' s =>           {              Assert.True(s.Raw.Contains("scopes%5B%5D=2&scopes%5B%5D=5&scopes%5B%5D=6")' "payload should contain the game key version");              Set();           });
Magic Number,Mogade.Tests,FakeServer,D:\research\architectureSmells\repos\mogade_mogade-csharp\Mogade.Tests.Core\FakeServer.cs,FakeServer,The following statement contains a magic number: _expectations = new List<ApiExpectation>(5);
Magic Number,Mogade.Tests,FakeServer,D:\research\architectureSmells\repos\mogade_mogade-csharp\Mogade.Tests.Core\FakeServer.cs,FakeServer,The following statement contains a magic number: _listener.Prefixes.Add("http://*:" + 9948 + "/");
Magic Number,Mogade.Tests,FakeServer,D:\research\architectureSmells\repos\mogade_mogade-csharp\Mogade.Tests.Core\FakeServer.cs,Listen,The following statement contains a magic number: SendResponse(context' string.Format("Unexpected call: {0} {1}{2}{3}"' context.Request.HttpMethod' context.Request.Url' Environment.NewLine' body)' new ApiExpectation { Status = 500 });
Magic Number,Mogade.Tests,FakeServer,D:\research\architectureSmells\repos\mogade_mogade-csharp\Mogade.Tests.Core\FakeServer.cs,SendResponse,The following statement contains a magic number: response.StatusCode = expectation.Status ?? 200;
Magic Number,Mogade.Tests,ErrorHandlingTests,D:\research\architectureSmells\repos\mogade_mogade-csharp\Mogade.Tests.Core\InfrastructureTests\ErrorHandlingTests.cs,WrapsANormalServerErrorInMogadeException,The following statement contains a magic number: Server.Stub(new ApiExpectation { Status = 400' Response = @"{'error': 'its over 9000!!'}" });
Magic Number,Mogade.Tests,ErrorHandlingTests,D:\research\architectureSmells\repos\mogade_mogade-csharp\Mogade.Tests.Core\InfrastructureTests\ErrorHandlingTests.cs,IncludesAnErrorInfoInTheExceptionIfPresent,The following statement contains a magic number: Server.Stub(new ApiExpectation { Status = 400' Response = @"{'error': 'its over 9000!!'' 'info': 'some extra goodness'}" });
Magic Number,Mogade.Tests,ErrorHandlingTests,D:\research\architectureSmells\repos\mogade_mogade-csharp\Mogade.Tests.Core\InfrastructureTests\ErrorHandlingTests.cs,WrapsAnUnexpectedServerErrorInMogadeException,The following statement contains a magic number: Server.Stub(new ApiExpectation { Status = 500' Response = @"Server CRASH!" });
Magic Number,Mogade.Tests,ErrorHandlingTests,D:\research\architectureSmells\repos\mogade_mogade-csharp\Mogade.Tests.Core\InfrastructureTests\ErrorHandlingTests.cs,WrapsAMaintenanceErrorInAMogadeException,The following statement contains a magic number: Server.Stub(new ApiExpectation { Status = 503' Response = @"{'maintenance': 'the server is down for a bit'}" });
Magic Number,Mogade.Tests,SignatureTests,D:\research\architectureSmells\repos\mogade_mogade-csharp\Mogade.Tests.Core\InfrastructureTests\SignatureTests.cs,ProperlySignsThePayLoadBlackBox1,The following statement contains a magic number: var payload = new Dictionary<string' object> { { "itsover"' 9000 }' { "really"' true }' { "howmuch?"' "9000" } };
Magic Number,Mogade.Tests,BaseFixture,D:\research\architectureSmells\repos\mogade_mogade-csharp\Mogade.Tests.Core\BaseFixture.cs,WaitOne,The following statement contains a magic number: Assert.IsTrue(Trigger.WaitOne(3000)' "Test terminated without properly signalling the trigger");
Magic Number,Mogade.Tests.LeaderboardsTest,GetLeaderboardCountTests,D:\research\architectureSmells\repos\mogade_mogade-csharp\Mogade.Tests.Core\LeaderboardsTest\GetLeaderboardCountTests.cs,RetrievesACount,The following statement contains a magic number: new Driver("akey"' "sssshh2").GetLeaderboardCount("theid"' LeaderboardScope.Weekly' response =>           {              Assert.AreEqual(55' response.Data);              Set();           });
Magic Number,Mogade.Tests.LeaderboardsTest,GetLeaderboardTests,D:\research\architectureSmells\repos\mogade_mogade-csharp\Mogade.Tests.Core\LeaderboardsTest\GetLeaderboardTests.cs,SendsRequestForLeaderboardToTheServer,The following statement contains a magic number: new Driver("akey"' "sssshh2").GetLeaderboard("theid"' LeaderboardScope.Weekly' 3' 10' SetIfSuccess);
Magic Number,Mogade.Tests.LeaderboardsTest,GetLeaderboardTests,D:\research\architectureSmells\repos\mogade_mogade-csharp\Mogade.Tests.Core\LeaderboardsTest\GetLeaderboardTests.cs,SendsRequestForLeaderboardToTheServer,The following statement contains a magic number: new Driver("akey"' "sssshh2").GetLeaderboard("theid"' LeaderboardScope.Weekly' 3' 10' SetIfSuccess);
Magic Number,Mogade.Tests.LeaderboardsTest,GetLeaderboardTests,D:\research\architectureSmells\repos\mogade_mogade-csharp\Mogade.Tests.Core\LeaderboardsTest\GetLeaderboardTests.cs,SendsRequestForLeaderboardWitUserAndRecordCount,The following statement contains a magic number: new Driver("akey"' "sssshh2").GetLeaderboard("theid"' LeaderboardScope.Weekly' "itsme"' "imunique"' 25' SetIfSuccess);
Magic Number,Mogade.Tests.LeaderboardsTest,GetLeaderboardTests,D:\research\architectureSmells\repos\mogade_mogade-csharp\Mogade.Tests.Core\LeaderboardsTest\GetLeaderboardTests.cs,RetrievesAnEmptyLeaderboard,The following statement contains a magic number: new Driver("akey"' "sssshh2").GetLeaderboard("theid"' LeaderboardScope.Weekly' 3' 10' leaderboard =>           {              Assert.AreEqual(true' leaderboard.Success);              Assert.AreEqual(0' leaderboard.Data.Scores.Count);              Set();           });
Magic Number,Mogade.Tests.LeaderboardsTest,GetLeaderboardTests,D:\research\architectureSmells\repos\mogade_mogade-csharp\Mogade.Tests.Core\LeaderboardsTest\GetLeaderboardTests.cs,RetrievesAnEmptyLeaderboard,The following statement contains a magic number: new Driver("akey"' "sssshh2").GetLeaderboard("theid"' LeaderboardScope.Weekly' 3' 10' leaderboard =>           {              Assert.AreEqual(true' leaderboard.Success);              Assert.AreEqual(0' leaderboard.Data.Scores.Count);              Set();           });
Magic Number,Mogade.Tests.LeaderboardsTest,GetLeaderboardTests,D:\research\architectureSmells\repos\mogade_mogade-csharp\Mogade.Tests.Core\LeaderboardsTest\GetLeaderboardTests.cs,RetrievesALeaderboard,The following statement contains a magic number: new Driver("akey"' "sssshh2").GetLeaderboard("theid"' LeaderboardScope.Weekly' 3' 10' leaderboard =>           {              Assert.AreEqual(true' leaderboard.Success);              Assert.AreEqual(23' leaderboard.Data.Page);              Assert.AreEqual(2' leaderboard.Data.Scores.Count);              Assert.AreEqual("teg"' leaderboard.Data.Scores[0].UserName);              Assert.AreEqual(9001' leaderboard.Data.Scores[0].Points);              Assert.AreEqual("something"' leaderboard.Data.Scores[0].Data);              Assert.AreEqual(new DateTime(2009' 2' 16' 4' 6' 6)' leaderboard.Data.Scores[0].Dated.ToUniversalTime());               Assert.AreEqual("paul"' leaderboard.Data.Scores[1].UserName);              Assert.AreEqual(8999' leaderboard.Data.Scores[1].Points);              Assert.AreEqual(null' leaderboard.Data.Scores[1].Data);              Assert.AreEqual(new DateTime(2009' 2' 15' 4' 5' 6)' leaderboard.Data.Scores[1].Dated.ToUniversalTime());              Set();           });
Magic Number,Mogade.Tests.LeaderboardsTest,GetLeaderboardTests,D:\research\architectureSmells\repos\mogade_mogade-csharp\Mogade.Tests.Core\LeaderboardsTest\GetLeaderboardTests.cs,RetrievesALeaderboard,The following statement contains a magic number: new Driver("akey"' "sssshh2").GetLeaderboard("theid"' LeaderboardScope.Weekly' 3' 10' leaderboard =>           {              Assert.AreEqual(true' leaderboard.Success);              Assert.AreEqual(23' leaderboard.Data.Page);              Assert.AreEqual(2' leaderboard.Data.Scores.Count);              Assert.AreEqual("teg"' leaderboard.Data.Scores[0].UserName);              Assert.AreEqual(9001' leaderboard.Data.Scores[0].Points);              Assert.AreEqual("something"' leaderboard.Data.Scores[0].Data);              Assert.AreEqual(new DateTime(2009' 2' 16' 4' 6' 6)' leaderboard.Data.Scores[0].Dated.ToUniversalTime());               Assert.AreEqual("paul"' leaderboard.Data.Scores[1].UserName);              Assert.AreEqual(8999' leaderboard.Data.Scores[1].Points);              Assert.AreEqual(null' leaderboard.Data.Scores[1].Data);              Assert.AreEqual(new DateTime(2009' 2' 15' 4' 5' 6)' leaderboard.Data.Scores[1].Dated.ToUniversalTime());              Set();           });
Magic Number,Mogade.Tests.LeaderboardsTest,GetLeaderboardTests,D:\research\architectureSmells\repos\mogade_mogade-csharp\Mogade.Tests.Core\LeaderboardsTest\GetLeaderboardTests.cs,RetrievesALeaderboard,The following statement contains a magic number: new Driver("akey"' "sssshh2").GetLeaderboard("theid"' LeaderboardScope.Weekly' 3' 10' leaderboard =>           {              Assert.AreEqual(true' leaderboard.Success);              Assert.AreEqual(23' leaderboard.Data.Page);              Assert.AreEqual(2' leaderboard.Data.Scores.Count);              Assert.AreEqual("teg"' leaderboard.Data.Scores[0].UserName);              Assert.AreEqual(9001' leaderboard.Data.Scores[0].Points);              Assert.AreEqual("something"' leaderboard.Data.Scores[0].Data);              Assert.AreEqual(new DateTime(2009' 2' 16' 4' 6' 6)' leaderboard.Data.Scores[0].Dated.ToUniversalTime());               Assert.AreEqual("paul"' leaderboard.Data.Scores[1].UserName);              Assert.AreEqual(8999' leaderboard.Data.Scores[1].Points);              Assert.AreEqual(null' leaderboard.Data.Scores[1].Data);              Assert.AreEqual(new DateTime(2009' 2' 15' 4' 5' 6)' leaderboard.Data.Scores[1].Dated.ToUniversalTime());              Set();           });
Magic Number,Mogade.Tests.LeaderboardsTest,GetLeaderboardTests,D:\research\architectureSmells\repos\mogade_mogade-csharp\Mogade.Tests.Core\LeaderboardsTest\GetLeaderboardTests.cs,RetrievesALeaderboard,The following statement contains a magic number: new Driver("akey"' "sssshh2").GetLeaderboard("theid"' LeaderboardScope.Weekly' 3' 10' leaderboard =>           {              Assert.AreEqual(true' leaderboard.Success);              Assert.AreEqual(23' leaderboard.Data.Page);              Assert.AreEqual(2' leaderboard.Data.Scores.Count);              Assert.AreEqual("teg"' leaderboard.Data.Scores[0].UserName);              Assert.AreEqual(9001' leaderboard.Data.Scores[0].Points);              Assert.AreEqual("something"' leaderboard.Data.Scores[0].Data);              Assert.AreEqual(new DateTime(2009' 2' 16' 4' 6' 6)' leaderboard.Data.Scores[0].Dated.ToUniversalTime());               Assert.AreEqual("paul"' leaderboard.Data.Scores[1].UserName);              Assert.AreEqual(8999' leaderboard.Data.Scores[1].Points);              Assert.AreEqual(null' leaderboard.Data.Scores[1].Data);              Assert.AreEqual(new DateTime(2009' 2' 15' 4' 5' 6)' leaderboard.Data.Scores[1].Dated.ToUniversalTime());              Set();           });
Magic Number,Mogade.Tests.LeaderboardsTest,GetLeaderboardTests,D:\research\architectureSmells\repos\mogade_mogade-csharp\Mogade.Tests.Core\LeaderboardsTest\GetLeaderboardTests.cs,RetrievesALeaderboard,The following statement contains a magic number: new Driver("akey"' "sssshh2").GetLeaderboard("theid"' LeaderboardScope.Weekly' 3' 10' leaderboard =>           {              Assert.AreEqual(true' leaderboard.Success);              Assert.AreEqual(23' leaderboard.Data.Page);              Assert.AreEqual(2' leaderboard.Data.Scores.Count);              Assert.AreEqual("teg"' leaderboard.Data.Scores[0].UserName);              Assert.AreEqual(9001' leaderboard.Data.Scores[0].Points);              Assert.AreEqual("something"' leaderboard.Data.Scores[0].Data);              Assert.AreEqual(new DateTime(2009' 2' 16' 4' 6' 6)' leaderboard.Data.Scores[0].Dated.ToUniversalTime());               Assert.AreEqual("paul"' leaderboard.Data.Scores[1].UserName);              Assert.AreEqual(8999' leaderboard.Data.Scores[1].Points);              Assert.AreEqual(null' leaderboard.Data.Scores[1].Data);              Assert.AreEqual(new DateTime(2009' 2' 15' 4' 5' 6)' leaderboard.Data.Scores[1].Dated.ToUniversalTime());              Set();           });
Magic Number,Mogade.Tests.LeaderboardsTest,GetLeaderboardTests,D:\research\architectureSmells\repos\mogade_mogade-csharp\Mogade.Tests.Core\LeaderboardsTest\GetLeaderboardTests.cs,RetrievesALeaderboard,The following statement contains a magic number: new Driver("akey"' "sssshh2").GetLeaderboard("theid"' LeaderboardScope.Weekly' 3' 10' leaderboard =>           {              Assert.AreEqual(true' leaderboard.Success);              Assert.AreEqual(23' leaderboard.Data.Page);              Assert.AreEqual(2' leaderboard.Data.Scores.Count);              Assert.AreEqual("teg"' leaderboard.Data.Scores[0].UserName);              Assert.AreEqual(9001' leaderboard.Data.Scores[0].Points);              Assert.AreEqual("something"' leaderboard.Data.Scores[0].Data);              Assert.AreEqual(new DateTime(2009' 2' 16' 4' 6' 6)' leaderboard.Data.Scores[0].Dated.ToUniversalTime());               Assert.AreEqual("paul"' leaderboard.Data.Scores[1].UserName);              Assert.AreEqual(8999' leaderboard.Data.Scores[1].Points);              Assert.AreEqual(null' leaderboard.Data.Scores[1].Data);              Assert.AreEqual(new DateTime(2009' 2' 15' 4' 5' 6)' leaderboard.Data.Scores[1].Dated.ToUniversalTime());              Set();           });
Magic Number,Mogade.Tests.LeaderboardsTest,GetLeaderboardTests,D:\research\architectureSmells\repos\mogade_mogade-csharp\Mogade.Tests.Core\LeaderboardsTest\GetLeaderboardTests.cs,RetrievesALeaderboard,The following statement contains a magic number: new Driver("akey"' "sssshh2").GetLeaderboard("theid"' LeaderboardScope.Weekly' 3' 10' leaderboard =>           {              Assert.AreEqual(true' leaderboard.Success);              Assert.AreEqual(23' leaderboard.Data.Page);              Assert.AreEqual(2' leaderboard.Data.Scores.Count);              Assert.AreEqual("teg"' leaderboard.Data.Scores[0].UserName);              Assert.AreEqual(9001' leaderboard.Data.Scores[0].Points);              Assert.AreEqual("something"' leaderboard.Data.Scores[0].Data);              Assert.AreEqual(new DateTime(2009' 2' 16' 4' 6' 6)' leaderboard.Data.Scores[0].Dated.ToUniversalTime());               Assert.AreEqual("paul"' leaderboard.Data.Scores[1].UserName);              Assert.AreEqual(8999' leaderboard.Data.Scores[1].Points);              Assert.AreEqual(null' leaderboard.Data.Scores[1].Data);              Assert.AreEqual(new DateTime(2009' 2' 15' 4' 5' 6)' leaderboard.Data.Scores[1].Dated.ToUniversalTime());              Set();           });
Magic Number,Mogade.Tests.LeaderboardsTest,GetLeaderboardTests,D:\research\architectureSmells\repos\mogade_mogade-csharp\Mogade.Tests.Core\LeaderboardsTest\GetLeaderboardTests.cs,RetrievesALeaderboard,The following statement contains a magic number: new Driver("akey"' "sssshh2").GetLeaderboard("theid"' LeaderboardScope.Weekly' 3' 10' leaderboard =>           {              Assert.AreEqual(true' leaderboard.Success);              Assert.AreEqual(23' leaderboard.Data.Page);              Assert.AreEqual(2' leaderboard.Data.Scores.Count);              Assert.AreEqual("teg"' leaderboard.Data.Scores[0].UserName);              Assert.AreEqual(9001' leaderboard.Data.Scores[0].Points);              Assert.AreEqual("something"' leaderboard.Data.Scores[0].Data);              Assert.AreEqual(new DateTime(2009' 2' 16' 4' 6' 6)' leaderboard.Data.Scores[0].Dated.ToUniversalTime());               Assert.AreEqual("paul"' leaderboard.Data.Scores[1].UserName);              Assert.AreEqual(8999' leaderboard.Data.Scores[1].Points);              Assert.AreEqual(null' leaderboard.Data.Scores[1].Data);              Assert.AreEqual(new DateTime(2009' 2' 15' 4' 5' 6)' leaderboard.Data.Scores[1].Dated.ToUniversalTime());              Set();           });
Magic Number,Mogade.Tests.LeaderboardsTest,GetLeaderboardTests,D:\research\architectureSmells\repos\mogade_mogade-csharp\Mogade.Tests.Core\LeaderboardsTest\GetLeaderboardTests.cs,RetrievesALeaderboard,The following statement contains a magic number: new Driver("akey"' "sssshh2").GetLeaderboard("theid"' LeaderboardScope.Weekly' 3' 10' leaderboard =>           {              Assert.AreEqual(true' leaderboard.Success);              Assert.AreEqual(23' leaderboard.Data.Page);              Assert.AreEqual(2' leaderboard.Data.Scores.Count);              Assert.AreEqual("teg"' leaderboard.Data.Scores[0].UserName);              Assert.AreEqual(9001' leaderboard.Data.Scores[0].Points);              Assert.AreEqual("something"' leaderboard.Data.Scores[0].Data);              Assert.AreEqual(new DateTime(2009' 2' 16' 4' 6' 6)' leaderboard.Data.Scores[0].Dated.ToUniversalTime());               Assert.AreEqual("paul"' leaderboard.Data.Scores[1].UserName);              Assert.AreEqual(8999' leaderboard.Data.Scores[1].Points);              Assert.AreEqual(null' leaderboard.Data.Scores[1].Data);              Assert.AreEqual(new DateTime(2009' 2' 15' 4' 5' 6)' leaderboard.Data.Scores[1].Dated.ToUniversalTime());              Set();           });
Magic Number,Mogade.Tests.LeaderboardsTest,GetLeaderboardTests,D:\research\architectureSmells\repos\mogade_mogade-csharp\Mogade.Tests.Core\LeaderboardsTest\GetLeaderboardTests.cs,RetrievesALeaderboard,The following statement contains a magic number: new Driver("akey"' "sssshh2").GetLeaderboard("theid"' LeaderboardScope.Weekly' 3' 10' leaderboard =>           {              Assert.AreEqual(true' leaderboard.Success);              Assert.AreEqual(23' leaderboard.Data.Page);              Assert.AreEqual(2' leaderboard.Data.Scores.Count);              Assert.AreEqual("teg"' leaderboard.Data.Scores[0].UserName);              Assert.AreEqual(9001' leaderboard.Data.Scores[0].Points);              Assert.AreEqual("something"' leaderboard.Data.Scores[0].Data);              Assert.AreEqual(new DateTime(2009' 2' 16' 4' 6' 6)' leaderboard.Data.Scores[0].Dated.ToUniversalTime());               Assert.AreEqual("paul"' leaderboard.Data.Scores[1].UserName);              Assert.AreEqual(8999' leaderboard.Data.Scores[1].Points);              Assert.AreEqual(null' leaderboard.Data.Scores[1].Data);              Assert.AreEqual(new DateTime(2009' 2' 15' 4' 5' 6)' leaderboard.Data.Scores[1].Dated.ToUniversalTime());              Set();           });
Magic Number,Mogade.Tests.LeaderboardsTest,GetLeaderboardTests,D:\research\architectureSmells\repos\mogade_mogade-csharp\Mogade.Tests.Core\LeaderboardsTest\GetLeaderboardTests.cs,RetrievesALeaderboard,The following statement contains a magic number: new Driver("akey"' "sssshh2").GetLeaderboard("theid"' LeaderboardScope.Weekly' 3' 10' leaderboard =>           {              Assert.AreEqual(true' leaderboard.Success);              Assert.AreEqual(23' leaderboard.Data.Page);              Assert.AreEqual(2' leaderboard.Data.Scores.Count);              Assert.AreEqual("teg"' leaderboard.Data.Scores[0].UserName);              Assert.AreEqual(9001' leaderboard.Data.Scores[0].Points);              Assert.AreEqual("something"' leaderboard.Data.Scores[0].Data);              Assert.AreEqual(new DateTime(2009' 2' 16' 4' 6' 6)' leaderboard.Data.Scores[0].Dated.ToUniversalTime());               Assert.AreEqual("paul"' leaderboard.Data.Scores[1].UserName);              Assert.AreEqual(8999' leaderboard.Data.Scores[1].Points);              Assert.AreEqual(null' leaderboard.Data.Scores[1].Data);              Assert.AreEqual(new DateTime(2009' 2' 15' 4' 5' 6)' leaderboard.Data.Scores[1].Dated.ToUniversalTime());              Set();           });
Magic Number,Mogade.Tests.LeaderboardsTest,GetLeaderboardTests,D:\research\architectureSmells\repos\mogade_mogade-csharp\Mogade.Tests.Core\LeaderboardsTest\GetLeaderboardTests.cs,RetrievesALeaderboard,The following statement contains a magic number: new Driver("akey"' "sssshh2").GetLeaderboard("theid"' LeaderboardScope.Weekly' 3' 10' leaderboard =>           {              Assert.AreEqual(true' leaderboard.Success);              Assert.AreEqual(23' leaderboard.Data.Page);              Assert.AreEqual(2' leaderboard.Data.Scores.Count);              Assert.AreEqual("teg"' leaderboard.Data.Scores[0].UserName);              Assert.AreEqual(9001' leaderboard.Data.Scores[0].Points);              Assert.AreEqual("something"' leaderboard.Data.Scores[0].Data);              Assert.AreEqual(new DateTime(2009' 2' 16' 4' 6' 6)' leaderboard.Data.Scores[0].Dated.ToUniversalTime());               Assert.AreEqual("paul"' leaderboard.Data.Scores[1].UserName);              Assert.AreEqual(8999' leaderboard.Data.Scores[1].Points);              Assert.AreEqual(null' leaderboard.Data.Scores[1].Data);              Assert.AreEqual(new DateTime(2009' 2' 15' 4' 5' 6)' leaderboard.Data.Scores[1].Dated.ToUniversalTime());              Set();           });
Magic Number,Mogade.Tests.LeaderboardsTest,GetLeaderboardTests,D:\research\architectureSmells\repos\mogade_mogade-csharp\Mogade.Tests.Core\LeaderboardsTest\GetLeaderboardTests.cs,RetrievesALeaderboard,The following statement contains a magic number: new Driver("akey"' "sssshh2").GetLeaderboard("theid"' LeaderboardScope.Weekly' 3' 10' leaderboard =>           {              Assert.AreEqual(true' leaderboard.Success);              Assert.AreEqual(23' leaderboard.Data.Page);              Assert.AreEqual(2' leaderboard.Data.Scores.Count);              Assert.AreEqual("teg"' leaderboard.Data.Scores[0].UserName);              Assert.AreEqual(9001' leaderboard.Data.Scores[0].Points);              Assert.AreEqual("something"' leaderboard.Data.Scores[0].Data);              Assert.AreEqual(new DateTime(2009' 2' 16' 4' 6' 6)' leaderboard.Data.Scores[0].Dated.ToUniversalTime());               Assert.AreEqual("paul"' leaderboard.Data.Scores[1].UserName);              Assert.AreEqual(8999' leaderboard.Data.Scores[1].Points);              Assert.AreEqual(null' leaderboard.Data.Scores[1].Data);              Assert.AreEqual(new DateTime(2009' 2' 15' 4' 5' 6)' leaderboard.Data.Scores[1].Dated.ToUniversalTime());              Set();           });
Magic Number,Mogade.Tests.LeaderboardsTest,GetLeaderboardTests,D:\research\architectureSmells\repos\mogade_mogade-csharp\Mogade.Tests.Core\LeaderboardsTest\GetLeaderboardTests.cs,RetrievesALeaderboard,The following statement contains a magic number: new Driver("akey"' "sssshh2").GetLeaderboard("theid"' LeaderboardScope.Weekly' 3' 10' leaderboard =>           {              Assert.AreEqual(true' leaderboard.Success);              Assert.AreEqual(23' leaderboard.Data.Page);              Assert.AreEqual(2' leaderboard.Data.Scores.Count);              Assert.AreEqual("teg"' leaderboard.Data.Scores[0].UserName);              Assert.AreEqual(9001' leaderboard.Data.Scores[0].Points);              Assert.AreEqual("something"' leaderboard.Data.Scores[0].Data);              Assert.AreEqual(new DateTime(2009' 2' 16' 4' 6' 6)' leaderboard.Data.Scores[0].Dated.ToUniversalTime());               Assert.AreEqual("paul"' leaderboard.Data.Scores[1].UserName);              Assert.AreEqual(8999' leaderboard.Data.Scores[1].Points);              Assert.AreEqual(null' leaderboard.Data.Scores[1].Data);              Assert.AreEqual(new DateTime(2009' 2' 15' 4' 5' 6)' leaderboard.Data.Scores[1].Dated.ToUniversalTime());              Set();           });
Magic Number,Mogade.Tests.LeaderboardsTest,GetLeaderboardTests,D:\research\architectureSmells\repos\mogade_mogade-csharp\Mogade.Tests.Core\LeaderboardsTest\GetLeaderboardTests.cs,RetrievesALeaderboard,The following statement contains a magic number: new Driver("akey"' "sssshh2").GetLeaderboard("theid"' LeaderboardScope.Weekly' 3' 10' leaderboard =>           {              Assert.AreEqual(true' leaderboard.Success);              Assert.AreEqual(23' leaderboard.Data.Page);              Assert.AreEqual(2' leaderboard.Data.Scores.Count);              Assert.AreEqual("teg"' leaderboard.Data.Scores[0].UserName);              Assert.AreEqual(9001' leaderboard.Data.Scores[0].Points);              Assert.AreEqual("something"' leaderboard.Data.Scores[0].Data);              Assert.AreEqual(new DateTime(2009' 2' 16' 4' 6' 6)' leaderboard.Data.Scores[0].Dated.ToUniversalTime());               Assert.AreEqual("paul"' leaderboard.Data.Scores[1].UserName);              Assert.AreEqual(8999' leaderboard.Data.Scores[1].Points);              Assert.AreEqual(null' leaderboard.Data.Scores[1].Data);              Assert.AreEqual(new DateTime(2009' 2' 15' 4' 5' 6)' leaderboard.Data.Scores[1].Dated.ToUniversalTime());              Set();           });
Magic Number,Mogade.Tests.LeaderboardsTest,GetLeaderboardTests,D:\research\architectureSmells\repos\mogade_mogade-csharp\Mogade.Tests.Core\LeaderboardsTest\GetLeaderboardTests.cs,RetrievesALeaderboard,The following statement contains a magic number: new Driver("akey"' "sssshh2").GetLeaderboard("theid"' LeaderboardScope.Weekly' 3' 10' leaderboard =>           {              Assert.AreEqual(true' leaderboard.Success);              Assert.AreEqual(23' leaderboard.Data.Page);              Assert.AreEqual(2' leaderboard.Data.Scores.Count);              Assert.AreEqual("teg"' leaderboard.Data.Scores[0].UserName);              Assert.AreEqual(9001' leaderboard.Data.Scores[0].Points);              Assert.AreEqual("something"' leaderboard.Data.Scores[0].Data);              Assert.AreEqual(new DateTime(2009' 2' 16' 4' 6' 6)' leaderboard.Data.Scores[0].Dated.ToUniversalTime());               Assert.AreEqual("paul"' leaderboard.Data.Scores[1].UserName);              Assert.AreEqual(8999' leaderboard.Data.Scores[1].Points);              Assert.AreEqual(null' leaderboard.Data.Scores[1].Data);              Assert.AreEqual(new DateTime(2009' 2' 15' 4' 5' 6)' leaderboard.Data.Scores[1].Dated.ToUniversalTime());              Set();           });
Magic Number,Mogade.Tests.LeaderboardsTest,GetLeaderboardTests,D:\research\architectureSmells\repos\mogade_mogade-csharp\Mogade.Tests.Core\LeaderboardsTest\GetLeaderboardTests.cs,RetrievesALeaderboard,The following statement contains a magic number: new Driver("akey"' "sssshh2").GetLeaderboard("theid"' LeaderboardScope.Weekly' 3' 10' leaderboard =>           {              Assert.AreEqual(true' leaderboard.Success);              Assert.AreEqual(23' leaderboard.Data.Page);              Assert.AreEqual(2' leaderboard.Data.Scores.Count);              Assert.AreEqual("teg"' leaderboard.Data.Scores[0].UserName);              Assert.AreEqual(9001' leaderboard.Data.Scores[0].Points);              Assert.AreEqual("something"' leaderboard.Data.Scores[0].Data);              Assert.AreEqual(new DateTime(2009' 2' 16' 4' 6' 6)' leaderboard.Data.Scores[0].Dated.ToUniversalTime());               Assert.AreEqual("paul"' leaderboard.Data.Scores[1].UserName);              Assert.AreEqual(8999' leaderboard.Data.Scores[1].Points);              Assert.AreEqual(null' leaderboard.Data.Scores[1].Data);              Assert.AreEqual(new DateTime(2009' 2' 15' 4' 5' 6)' leaderboard.Data.Scores[1].Dated.ToUniversalTime());              Set();           });
Magic Number,Mogade.Tests.LeaderboardsTest,GetLeaderboardTests,D:\research\architectureSmells\repos\mogade_mogade-csharp\Mogade.Tests.Core\LeaderboardsTest\GetLeaderboardTests.cs,RetrievesALeaderboard,The following statement contains a magic number: new Driver("akey"' "sssshh2").GetLeaderboard("theid"' LeaderboardScope.Weekly' 3' 10' leaderboard =>           {              Assert.AreEqual(true' leaderboard.Success);              Assert.AreEqual(23' leaderboard.Data.Page);              Assert.AreEqual(2' leaderboard.Data.Scores.Count);              Assert.AreEqual("teg"' leaderboard.Data.Scores[0].UserName);              Assert.AreEqual(9001' leaderboard.Data.Scores[0].Points);              Assert.AreEqual("something"' leaderboard.Data.Scores[0].Data);              Assert.AreEqual(new DateTime(2009' 2' 16' 4' 6' 6)' leaderboard.Data.Scores[0].Dated.ToUniversalTime());               Assert.AreEqual("paul"' leaderboard.Data.Scores[1].UserName);              Assert.AreEqual(8999' leaderboard.Data.Scores[1].Points);              Assert.AreEqual(null' leaderboard.Data.Scores[1].Data);              Assert.AreEqual(new DateTime(2009' 2' 15' 4' 5' 6)' leaderboard.Data.Scores[1].Dated.ToUniversalTime());              Set();           });
Magic Number,Mogade.Tests.LeaderboardsTest,GetRankTests,D:\research\architectureSmells\repos\mogade_mogade-csharp\Mogade.Tests.Core\LeaderboardsTest\GetRankTests.cs,SendsIndividualRankRequestToTheServerForAScore,The following statement contains a magic number: new Driver("thekey"' "sssshh").GetRank("mybaloney"' 55' LeaderboardScope.Overall' SetIfSuccess);
Magic Number,Mogade.Tests.LeaderboardsTest,GetRankTests,D:\research\architectureSmells\repos\mogade_mogade-csharp\Mogade.Tests.Core\LeaderboardsTest\GetRankTests.cs,SendMultipleRankRequestToServerForAScore,The following statement contains a magic number: new Driver("thekey"' "sssshh").GetRanks("mybaloney"' 66' new[] { LeaderboardScope.Daily' LeaderboardScope.Weekly }' SetIfSuccess);
Magic Number,Mogade.Tests.LeaderboardsTest,GetRankTests,D:\research\architectureSmells\repos\mogade_mogade-csharp\Mogade.Tests.Core\LeaderboardsTest\GetRankTests.cs,SendsAllRanksRequestToServerForAScore,The following statement contains a magic number: new Driver("thekey"' "sssshh").GetRanks("mybaloney"' 77' SetIfSuccess);
Magic Number,Mogade.Tests.LeaderboardsTest,GetRankTests,D:\research\architectureSmells\repos\mogade_mogade-csharp\Mogade.Tests.Core\LeaderboardsTest\GetRankTests.cs,RetrievesAllTheRanksFromTheResponse,The following statement contains a magic number: new Driver("thekey"' "sssshh").GetRanks("mybaloney"' "paul"' "jessica"' ranks =>           {              Assert.AreEqual(true' ranks.Success);              Assert.AreEqual(20' ranks.Data.Daily);              Assert.AreEqual(25' ranks.Data.Weekly);              Assert.AreEqual(45' ranks.Data.Overall);              Assert.AreEqual(22' ranks.Data.Yesterday);              Set();           });
Magic Number,Mogade.Tests.LeaderboardsTest,GetRankTests,D:\research\architectureSmells\repos\mogade_mogade-csharp\Mogade.Tests.Core\LeaderboardsTest\GetRankTests.cs,RetrievesAllTheRanksFromTheResponse,The following statement contains a magic number: new Driver("thekey"' "sssshh").GetRanks("mybaloney"' "paul"' "jessica"' ranks =>           {              Assert.AreEqual(true' ranks.Success);              Assert.AreEqual(20' ranks.Data.Daily);              Assert.AreEqual(25' ranks.Data.Weekly);              Assert.AreEqual(45' ranks.Data.Overall);              Assert.AreEqual(22' ranks.Data.Yesterday);              Set();           });
Magic Number,Mogade.Tests.LeaderboardsTest,GetRankTests,D:\research\architectureSmells\repos\mogade_mogade-csharp\Mogade.Tests.Core\LeaderboardsTest\GetRankTests.cs,RetrievesAllTheRanksFromTheResponse,The following statement contains a magic number: new Driver("thekey"' "sssshh").GetRanks("mybaloney"' "paul"' "jessica"' ranks =>           {              Assert.AreEqual(true' ranks.Success);              Assert.AreEqual(20' ranks.Data.Daily);              Assert.AreEqual(25' ranks.Data.Weekly);              Assert.AreEqual(45' ranks.Data.Overall);              Assert.AreEqual(22' ranks.Data.Yesterday);              Set();           });
Magic Number,Mogade.Tests.LeaderboardsTest,GetRankTests,D:\research\architectureSmells\repos\mogade_mogade-csharp\Mogade.Tests.Core\LeaderboardsTest\GetRankTests.cs,RetrievesAllTheRanksFromTheResponse,The following statement contains a magic number: new Driver("thekey"' "sssshh").GetRanks("mybaloney"' "paul"' "jessica"' ranks =>           {              Assert.AreEqual(true' ranks.Success);              Assert.AreEqual(20' ranks.Data.Daily);              Assert.AreEqual(25' ranks.Data.Weekly);              Assert.AreEqual(45' ranks.Data.Overall);              Assert.AreEqual(22' ranks.Data.Yesterday);              Set();           });
Magic Number,Mogade.Tests.LeaderboardsTest,GetRankTests,D:\research\architectureSmells\repos\mogade_mogade-csharp\Mogade.Tests.Core\LeaderboardsTest\GetRankTests.cs,RetrievesASingleRank,The following statement contains a magic number: new Driver("thekey"' "sssshh").GetRank("mybaloney"' "paul"' "jessica"' LeaderboardScope.Yesterday' rank =>           {              Assert.AreEqual(true' rank.Success);              Assert.AreEqual(55' rank.Data);              Set();           });
Magic Number,Mogade.Tests.LeaderboardsTest,GetRivalsTests,D:\research\architectureSmells\repos\mogade_mogade-csharp\Mogade.Tests.Core\LeaderboardsTest\GetRivalsTests.cs,RetrivesScores,The following statement contains a magic number: new Driver("akey"' "sssshh2").GetRivals("theid"' LeaderboardScope.Weekly' "itsme"' "imunique"' leaderboard =>           {              Assert.AreEqual(true' leaderboard.Success);              Assert.AreEqual(2' leaderboard.Data.Count);              Assert.AreEqual("teg"' leaderboard.Data[0].UserName);              Assert.AreEqual(9001' leaderboard.Data[0].Points);              Assert.AreEqual("something"' leaderboard.Data[0].Data);              Assert.AreEqual(new DateTime(2009' 2' 16' 4' 6' 6)' leaderboard.Data[0].Dated.ToUniversalTime());              Assert.AreEqual("paul"' leaderboard.Data[1].UserName);              Assert.AreEqual(8999' leaderboard.Data[1].Points);              Assert.AreEqual(null' leaderboard.Data[1].Data);              Assert.AreEqual(new DateTime(2009' 2' 15' 4' 5' 6)' leaderboard.Data[1].Dated.ToUniversalTime());              Set();           });
Magic Number,Mogade.Tests.LeaderboardsTest,GetRivalsTests,D:\research\architectureSmells\repos\mogade_mogade-csharp\Mogade.Tests.Core\LeaderboardsTest\GetRivalsTests.cs,RetrivesScores,The following statement contains a magic number: new Driver("akey"' "sssshh2").GetRivals("theid"' LeaderboardScope.Weekly' "itsme"' "imunique"' leaderboard =>           {              Assert.AreEqual(true' leaderboard.Success);              Assert.AreEqual(2' leaderboard.Data.Count);              Assert.AreEqual("teg"' leaderboard.Data[0].UserName);              Assert.AreEqual(9001' leaderboard.Data[0].Points);              Assert.AreEqual("something"' leaderboard.Data[0].Data);              Assert.AreEqual(new DateTime(2009' 2' 16' 4' 6' 6)' leaderboard.Data[0].Dated.ToUniversalTime());              Assert.AreEqual("paul"' leaderboard.Data[1].UserName);              Assert.AreEqual(8999' leaderboard.Data[1].Points);              Assert.AreEqual(null' leaderboard.Data[1].Data);              Assert.AreEqual(new DateTime(2009' 2' 15' 4' 5' 6)' leaderboard.Data[1].Dated.ToUniversalTime());              Set();           });
Magic Number,Mogade.Tests.LeaderboardsTest,GetRivalsTests,D:\research\architectureSmells\repos\mogade_mogade-csharp\Mogade.Tests.Core\LeaderboardsTest\GetRivalsTests.cs,RetrivesScores,The following statement contains a magic number: new Driver("akey"' "sssshh2").GetRivals("theid"' LeaderboardScope.Weekly' "itsme"' "imunique"' leaderboard =>           {              Assert.AreEqual(true' leaderboard.Success);              Assert.AreEqual(2' leaderboard.Data.Count);              Assert.AreEqual("teg"' leaderboard.Data[0].UserName);              Assert.AreEqual(9001' leaderboard.Data[0].Points);              Assert.AreEqual("something"' leaderboard.Data[0].Data);              Assert.AreEqual(new DateTime(2009' 2' 16' 4' 6' 6)' leaderboard.Data[0].Dated.ToUniversalTime());              Assert.AreEqual("paul"' leaderboard.Data[1].UserName);              Assert.AreEqual(8999' leaderboard.Data[1].Points);              Assert.AreEqual(null' leaderboard.Data[1].Data);              Assert.AreEqual(new DateTime(2009' 2' 15' 4' 5' 6)' leaderboard.Data[1].Dated.ToUniversalTime());              Set();           });
Magic Number,Mogade.Tests.LeaderboardsTest,GetRivalsTests,D:\research\architectureSmells\repos\mogade_mogade-csharp\Mogade.Tests.Core\LeaderboardsTest\GetRivalsTests.cs,RetrivesScores,The following statement contains a magic number: new Driver("akey"' "sssshh2").GetRivals("theid"' LeaderboardScope.Weekly' "itsme"' "imunique"' leaderboard =>           {              Assert.AreEqual(true' leaderboard.Success);              Assert.AreEqual(2' leaderboard.Data.Count);              Assert.AreEqual("teg"' leaderboard.Data[0].UserName);              Assert.AreEqual(9001' leaderboard.Data[0].Points);              Assert.AreEqual("something"' leaderboard.Data[0].Data);              Assert.AreEqual(new DateTime(2009' 2' 16' 4' 6' 6)' leaderboard.Data[0].Dated.ToUniversalTime());              Assert.AreEqual("paul"' leaderboard.Data[1].UserName);              Assert.AreEqual(8999' leaderboard.Data[1].Points);              Assert.AreEqual(null' leaderboard.Data[1].Data);              Assert.AreEqual(new DateTime(2009' 2' 15' 4' 5' 6)' leaderboard.Data[1].Dated.ToUniversalTime());              Set();           });
Magic Number,Mogade.Tests.LeaderboardsTest,GetRivalsTests,D:\research\architectureSmells\repos\mogade_mogade-csharp\Mogade.Tests.Core\LeaderboardsTest\GetRivalsTests.cs,RetrivesScores,The following statement contains a magic number: new Driver("akey"' "sssshh2").GetRivals("theid"' LeaderboardScope.Weekly' "itsme"' "imunique"' leaderboard =>           {              Assert.AreEqual(true' leaderboard.Success);              Assert.AreEqual(2' leaderboard.Data.Count);              Assert.AreEqual("teg"' leaderboard.Data[0].UserName);              Assert.AreEqual(9001' leaderboard.Data[0].Points);              Assert.AreEqual("something"' leaderboard.Data[0].Data);              Assert.AreEqual(new DateTime(2009' 2' 16' 4' 6' 6)' leaderboard.Data[0].Dated.ToUniversalTime());              Assert.AreEqual("paul"' leaderboard.Data[1].UserName);              Assert.AreEqual(8999' leaderboard.Data[1].Points);              Assert.AreEqual(null' leaderboard.Data[1].Data);              Assert.AreEqual(new DateTime(2009' 2' 15' 4' 5' 6)' leaderboard.Data[1].Dated.ToUniversalTime());              Set();           });
Magic Number,Mogade.Tests.LeaderboardsTest,GetRivalsTests,D:\research\architectureSmells\repos\mogade_mogade-csharp\Mogade.Tests.Core\LeaderboardsTest\GetRivalsTests.cs,RetrivesScores,The following statement contains a magic number: new Driver("akey"' "sssshh2").GetRivals("theid"' LeaderboardScope.Weekly' "itsme"' "imunique"' leaderboard =>           {              Assert.AreEqual(true' leaderboard.Success);              Assert.AreEqual(2' leaderboard.Data.Count);              Assert.AreEqual("teg"' leaderboard.Data[0].UserName);              Assert.AreEqual(9001' leaderboard.Data[0].Points);              Assert.AreEqual("something"' leaderboard.Data[0].Data);              Assert.AreEqual(new DateTime(2009' 2' 16' 4' 6' 6)' leaderboard.Data[0].Dated.ToUniversalTime());              Assert.AreEqual("paul"' leaderboard.Data[1].UserName);              Assert.AreEqual(8999' leaderboard.Data[1].Points);              Assert.AreEqual(null' leaderboard.Data[1].Data);              Assert.AreEqual(new DateTime(2009' 2' 15' 4' 5' 6)' leaderboard.Data[1].Dated.ToUniversalTime());              Set();           });
Magic Number,Mogade.Tests.LeaderboardsTest,GetRivalsTests,D:\research\architectureSmells\repos\mogade_mogade-csharp\Mogade.Tests.Core\LeaderboardsTest\GetRivalsTests.cs,RetrivesScores,The following statement contains a magic number: new Driver("akey"' "sssshh2").GetRivals("theid"' LeaderboardScope.Weekly' "itsme"' "imunique"' leaderboard =>           {              Assert.AreEqual(true' leaderboard.Success);              Assert.AreEqual(2' leaderboard.Data.Count);              Assert.AreEqual("teg"' leaderboard.Data[0].UserName);              Assert.AreEqual(9001' leaderboard.Data[0].Points);              Assert.AreEqual("something"' leaderboard.Data[0].Data);              Assert.AreEqual(new DateTime(2009' 2' 16' 4' 6' 6)' leaderboard.Data[0].Dated.ToUniversalTime());              Assert.AreEqual("paul"' leaderboard.Data[1].UserName);              Assert.AreEqual(8999' leaderboard.Data[1].Points);              Assert.AreEqual(null' leaderboard.Data[1].Data);              Assert.AreEqual(new DateTime(2009' 2' 15' 4' 5' 6)' leaderboard.Data[1].Dated.ToUniversalTime());              Set();           });
Magic Number,Mogade.Tests.LeaderboardsTest,GetRivalsTests,D:\research\architectureSmells\repos\mogade_mogade-csharp\Mogade.Tests.Core\LeaderboardsTest\GetRivalsTests.cs,RetrivesScores,The following statement contains a magic number: new Driver("akey"' "sssshh2").GetRivals("theid"' LeaderboardScope.Weekly' "itsme"' "imunique"' leaderboard =>           {              Assert.AreEqual(true' leaderboard.Success);              Assert.AreEqual(2' leaderboard.Data.Count);              Assert.AreEqual("teg"' leaderboard.Data[0].UserName);              Assert.AreEqual(9001' leaderboard.Data[0].Points);              Assert.AreEqual("something"' leaderboard.Data[0].Data);              Assert.AreEqual(new DateTime(2009' 2' 16' 4' 6' 6)' leaderboard.Data[0].Dated.ToUniversalTime());              Assert.AreEqual("paul"' leaderboard.Data[1].UserName);              Assert.AreEqual(8999' leaderboard.Data[1].Points);              Assert.AreEqual(null' leaderboard.Data[1].Data);              Assert.AreEqual(new DateTime(2009' 2' 15' 4' 5' 6)' leaderboard.Data[1].Dated.ToUniversalTime());              Set();           });
Magic Number,Mogade.Tests.LeaderboardsTest,GetRivalsTests,D:\research\architectureSmells\repos\mogade_mogade-csharp\Mogade.Tests.Core\LeaderboardsTest\GetRivalsTests.cs,RetrivesScores,The following statement contains a magic number: new Driver("akey"' "sssshh2").GetRivals("theid"' LeaderboardScope.Weekly' "itsme"' "imunique"' leaderboard =>           {              Assert.AreEqual(true' leaderboard.Success);              Assert.AreEqual(2' leaderboard.Data.Count);              Assert.AreEqual("teg"' leaderboard.Data[0].UserName);              Assert.AreEqual(9001' leaderboard.Data[0].Points);              Assert.AreEqual("something"' leaderboard.Data[0].Data);              Assert.AreEqual(new DateTime(2009' 2' 16' 4' 6' 6)' leaderboard.Data[0].Dated.ToUniversalTime());              Assert.AreEqual("paul"' leaderboard.Data[1].UserName);              Assert.AreEqual(8999' leaderboard.Data[1].Points);              Assert.AreEqual(null' leaderboard.Data[1].Data);              Assert.AreEqual(new DateTime(2009' 2' 15' 4' 5' 6)' leaderboard.Data[1].Dated.ToUniversalTime());              Set();           });
Magic Number,Mogade.Tests.LeaderboardsTest,GetRivalsTests,D:\research\architectureSmells\repos\mogade_mogade-csharp\Mogade.Tests.Core\LeaderboardsTest\GetRivalsTests.cs,RetrivesScores,The following statement contains a magic number: new Driver("akey"' "sssshh2").GetRivals("theid"' LeaderboardScope.Weekly' "itsme"' "imunique"' leaderboard =>           {              Assert.AreEqual(true' leaderboard.Success);              Assert.AreEqual(2' leaderboard.Data.Count);              Assert.AreEqual("teg"' leaderboard.Data[0].UserName);              Assert.AreEqual(9001' leaderboard.Data[0].Points);              Assert.AreEqual("something"' leaderboard.Data[0].Data);              Assert.AreEqual(new DateTime(2009' 2' 16' 4' 6' 6)' leaderboard.Data[0].Dated.ToUniversalTime());              Assert.AreEqual("paul"' leaderboard.Data[1].UserName);              Assert.AreEqual(8999' leaderboard.Data[1].Points);              Assert.AreEqual(null' leaderboard.Data[1].Data);              Assert.AreEqual(new DateTime(2009' 2' 15' 4' 5' 6)' leaderboard.Data[1].Dated.ToUniversalTime());              Set();           });
Magic Number,Mogade.Tests.LeaderboardsTest,GetRivalsTests,D:\research\architectureSmells\repos\mogade_mogade-csharp\Mogade.Tests.Core\LeaderboardsTest\GetRivalsTests.cs,RetrivesScores,The following statement contains a magic number: new Driver("akey"' "sssshh2").GetRivals("theid"' LeaderboardScope.Weekly' "itsme"' "imunique"' leaderboard =>           {              Assert.AreEqual(true' leaderboard.Success);              Assert.AreEqual(2' leaderboard.Data.Count);              Assert.AreEqual("teg"' leaderboard.Data[0].UserName);              Assert.AreEqual(9001' leaderboard.Data[0].Points);              Assert.AreEqual("something"' leaderboard.Data[0].Data);              Assert.AreEqual(new DateTime(2009' 2' 16' 4' 6' 6)' leaderboard.Data[0].Dated.ToUniversalTime());              Assert.AreEqual("paul"' leaderboard.Data[1].UserName);              Assert.AreEqual(8999' leaderboard.Data[1].Points);              Assert.AreEqual(null' leaderboard.Data[1].Data);              Assert.AreEqual(new DateTime(2009' 2' 15' 4' 5' 6)' leaderboard.Data[1].Dated.ToUniversalTime());              Set();           });
Magic Number,Mogade.Tests.LeaderboardsTest,GetRivalsTests,D:\research\architectureSmells\repos\mogade_mogade-csharp\Mogade.Tests.Core\LeaderboardsTest\GetRivalsTests.cs,RetrivesScores,The following statement contains a magic number: new Driver("akey"' "sssshh2").GetRivals("theid"' LeaderboardScope.Weekly' "itsme"' "imunique"' leaderboard =>           {              Assert.AreEqual(true' leaderboard.Success);              Assert.AreEqual(2' leaderboard.Data.Count);              Assert.AreEqual("teg"' leaderboard.Data[0].UserName);              Assert.AreEqual(9001' leaderboard.Data[0].Points);              Assert.AreEqual("something"' leaderboard.Data[0].Data);              Assert.AreEqual(new DateTime(2009' 2' 16' 4' 6' 6)' leaderboard.Data[0].Dated.ToUniversalTime());              Assert.AreEqual("paul"' leaderboard.Data[1].UserName);              Assert.AreEqual(8999' leaderboard.Data[1].Points);              Assert.AreEqual(null' leaderboard.Data[1].Data);              Assert.AreEqual(new DateTime(2009' 2' 15' 4' 5' 6)' leaderboard.Data[1].Dated.ToUniversalTime());              Set();           });
Magic Number,Mogade.Tests.LeaderboardsTest,GetRivalsTests,D:\research\architectureSmells\repos\mogade_mogade-csharp\Mogade.Tests.Core\LeaderboardsTest\GetRivalsTests.cs,RetrivesScores,The following statement contains a magic number: new Driver("akey"' "sssshh2").GetRivals("theid"' LeaderboardScope.Weekly' "itsme"' "imunique"' leaderboard =>           {              Assert.AreEqual(true' leaderboard.Success);              Assert.AreEqual(2' leaderboard.Data.Count);              Assert.AreEqual("teg"' leaderboard.Data[0].UserName);              Assert.AreEqual(9001' leaderboard.Data[0].Points);              Assert.AreEqual("something"' leaderboard.Data[0].Data);              Assert.AreEqual(new DateTime(2009' 2' 16' 4' 6' 6)' leaderboard.Data[0].Dated.ToUniversalTime());              Assert.AreEqual("paul"' leaderboard.Data[1].UserName);              Assert.AreEqual(8999' leaderboard.Data[1].Points);              Assert.AreEqual(null' leaderboard.Data[1].Data);              Assert.AreEqual(new DateTime(2009' 2' 15' 4' 5' 6)' leaderboard.Data[1].Dated.ToUniversalTime());              Set();           });
Magic Number,Mogade.Tests.LeaderboardsTest,GetRivalsTests,D:\research\architectureSmells\repos\mogade_mogade-csharp\Mogade.Tests.Core\LeaderboardsTest\GetRivalsTests.cs,RetrivesScores,The following statement contains a magic number: new Driver("akey"' "sssshh2").GetRivals("theid"' LeaderboardScope.Weekly' "itsme"' "imunique"' leaderboard =>           {              Assert.AreEqual(true' leaderboard.Success);              Assert.AreEqual(2' leaderboard.Data.Count);              Assert.AreEqual("teg"' leaderboard.Data[0].UserName);              Assert.AreEqual(9001' leaderboard.Data[0].Points);              Assert.AreEqual("something"' leaderboard.Data[0].Data);              Assert.AreEqual(new DateTime(2009' 2' 16' 4' 6' 6)' leaderboard.Data[0].Dated.ToUniversalTime());              Assert.AreEqual("paul"' leaderboard.Data[1].UserName);              Assert.AreEqual(8999' leaderboard.Data[1].Points);              Assert.AreEqual(null' leaderboard.Data[1].Data);              Assert.AreEqual(new DateTime(2009' 2' 15' 4' 5' 6)' leaderboard.Data[1].Dated.ToUniversalTime());              Set();           });
Magic Number,Mogade.Tests.LeaderboardsTest,GetRivalsTests,D:\research\architectureSmells\repos\mogade_mogade-csharp\Mogade.Tests.Core\LeaderboardsTest\GetRivalsTests.cs,RetrivesScores,The following statement contains a magic number: new Driver("akey"' "sssshh2").GetRivals("theid"' LeaderboardScope.Weekly' "itsme"' "imunique"' leaderboard =>           {              Assert.AreEqual(true' leaderboard.Success);              Assert.AreEqual(2' leaderboard.Data.Count);              Assert.AreEqual("teg"' leaderboard.Data[0].UserName);              Assert.AreEqual(9001' leaderboard.Data[0].Points);              Assert.AreEqual("something"' leaderboard.Data[0].Data);              Assert.AreEqual(new DateTime(2009' 2' 16' 4' 6' 6)' leaderboard.Data[0].Dated.ToUniversalTime());              Assert.AreEqual("paul"' leaderboard.Data[1].UserName);              Assert.AreEqual(8999' leaderboard.Data[1].Points);              Assert.AreEqual(null' leaderboard.Data[1].Data);              Assert.AreEqual(new DateTime(2009' 2' 15' 4' 5' 6)' leaderboard.Data[1].Dated.ToUniversalTime());              Set();           });
Magic Number,Mogade.Tests.LeaderboardsTest,SaveScoreTests,D:\research\architectureSmells\repos\mogade_mogade-csharp\Mogade.Tests.Core\LeaderboardsTest\SaveScoreTests.cs,Darren,The following statement contains a magic number: var score = new Score { Points = 3' UserName = "Name"' Data = "Name"};
Magic Number,Mogade.Tests.LeaderboardsTest,SaveScoreTests,D:\research\architectureSmells\repos\mogade_mogade-csharp\Mogade.Tests.Core\LeaderboardsTest\SaveScoreTests.cs,SendsScoreWithoutDataToTheServer,The following statement contains a magic number: var score = new Score { Points = 10039' UserName = "Scytale"};
Magic Number,Mogade.Tests.LeaderboardsTest,SaveScoreTests,D:\research\architectureSmells\repos\mogade_mogade-csharp\Mogade.Tests.Core\LeaderboardsTest\SaveScoreTests.cs,SendsScoreWithDataToTheServer,The following statement contains a magic number: var score = new Score { Points = 10039' UserName = "Scytale"' Data = "mydata" };
Magic Number,Mogade.Tests.LeaderboardsTest,SaveScoreTests,D:\research\architectureSmells\repos\mogade_mogade-csharp\Mogade.Tests.Core\LeaderboardsTest\SaveScoreTests.cs,RetrievesAllTheRanksFromTheResponse,The following statement contains a magic number: var score = new Score { Points = 10039' UserName = "Scytale" };
Magic Number,Mogade.Tests.LeaderboardsTest,SaveScoreTests,D:\research\architectureSmells\repos\mogade_mogade-csharp\Mogade.Tests.Core\LeaderboardsTest\SaveScoreTests.cs,RetrievesAllTheRanksFromTheResponse,The following statement contains a magic number: new Driver("thekey"' "sssshh").SaveScore("mybaloney"' score' "gom jabbar"' r =>           {              Assert.AreEqual(true' r.Success);              Assert.AreEqual(20' r.Data.Ranks.Daily);              Assert.AreEqual(25' r.Data.Ranks.Weekly);              Assert.AreEqual(45' r.Data.Ranks.Overall);              Assert.AreEqual(22' r.Data.Ranks.Yesterday);              Set();           });
Magic Number,Mogade.Tests.LeaderboardsTest,SaveScoreTests,D:\research\architectureSmells\repos\mogade_mogade-csharp\Mogade.Tests.Core\LeaderboardsTest\SaveScoreTests.cs,RetrievesAllTheRanksFromTheResponse,The following statement contains a magic number: new Driver("thekey"' "sssshh").SaveScore("mybaloney"' score' "gom jabbar"' r =>           {              Assert.AreEqual(true' r.Success);              Assert.AreEqual(20' r.Data.Ranks.Daily);              Assert.AreEqual(25' r.Data.Ranks.Weekly);              Assert.AreEqual(45' r.Data.Ranks.Overall);              Assert.AreEqual(22' r.Data.Ranks.Yesterday);              Set();           });
Magic Number,Mogade.Tests.LeaderboardsTest,SaveScoreTests,D:\research\architectureSmells\repos\mogade_mogade-csharp\Mogade.Tests.Core\LeaderboardsTest\SaveScoreTests.cs,RetrievesAllTheRanksFromTheResponse,The following statement contains a magic number: new Driver("thekey"' "sssshh").SaveScore("mybaloney"' score' "gom jabbar"' r =>           {              Assert.AreEqual(true' r.Success);              Assert.AreEqual(20' r.Data.Ranks.Daily);              Assert.AreEqual(25' r.Data.Ranks.Weekly);              Assert.AreEqual(45' r.Data.Ranks.Overall);              Assert.AreEqual(22' r.Data.Ranks.Yesterday);              Set();           });
Magic Number,Mogade.Tests.LeaderboardsTest,SaveScoreTests,D:\research\architectureSmells\repos\mogade_mogade-csharp\Mogade.Tests.Core\LeaderboardsTest\SaveScoreTests.cs,RetrievesAllTheRanksFromTheResponse,The following statement contains a magic number: new Driver("thekey"' "sssshh").SaveScore("mybaloney"' score' "gom jabbar"' r =>           {              Assert.AreEqual(true' r.Success);              Assert.AreEqual(20' r.Data.Ranks.Daily);              Assert.AreEqual(25' r.Data.Ranks.Weekly);              Assert.AreEqual(45' r.Data.Ranks.Overall);              Assert.AreEqual(22' r.Data.Ranks.Yesterday);              Set();           });
Magic Number,Mogade.Tests.LeaderboardsTest,SaveScoreTests,D:\research\architectureSmells\repos\mogade_mogade-csharp\Mogade.Tests.Core\LeaderboardsTest\SaveScoreTests.cs,RetrievesAnEmptyRankSet,The following statement contains a magic number: var score = new Score { Points = 10039' UserName = "Scytale"' };
Magic Number,Mogade.Tests.LeaderboardsTest,SaveScoreTests,D:\research\architectureSmells\repos\mogade_mogade-csharp\Mogade.Tests.Core\LeaderboardsTest\SaveScoreTests.cs,RetrievesAnPartialRankSet,The following statement contains a magic number: var score = new Score { Points = 10039' UserName = "Scytale"' };
Magic Number,Mogade.Tests.LeaderboardsTest,SaveScoreTests,D:\research\architectureSmells\repos\mogade_mogade-csharp\Mogade.Tests.Core\LeaderboardsTest\SaveScoreTests.cs,RetrievesAnPartialRankSet,The following statement contains a magic number: new Driver("thekey"' "sssshh").SaveScore("mybaloney"' score' "gom jabbar"' r =>           {              Assert.AreEqual(0' r.Data.Ranks.Daily);              Assert.AreEqual(49494' r.Data.Ranks.Weekly);              Assert.AreEqual(0' r.Data.Ranks.Overall);              Assert.AreEqual(0' r.Data.Ranks.Yesterday);              Set();           });
Magic Number,Mogade.Tests.LeaderboardsTest,SaveScoreTests,D:\research\architectureSmells\repos\mogade_mogade-csharp\Mogade.Tests.Core\LeaderboardsTest\SaveScoreTests.cs,RetrievesHighScores,The following statement contains a magic number: var score = new Score { Points = 10039' UserName = "Scytale"' };
