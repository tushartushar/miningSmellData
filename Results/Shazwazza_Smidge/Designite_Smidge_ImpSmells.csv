Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Smidge,SmidgeHelper,C:\repos\Shazwazza_Smidge\src\Smidge\SmidgeHelper.cs,SmidgeHelper,Cyclomatic complexity of the method is 11
Complex Method,Smidge.FileProcessors,CssMin,C:\repos\Shazwazza_Smidge\src\Smidge\FileProcessors\CssMinifier.cs,Action,Cyclomatic complexity of the method is 12
Complex Method,Smidge.FileProcessors,JsMin,C:\repos\Shazwazza_Smidge\src\Smidge\FileProcessors\JsMinifier.cs,HandleRegexLiteral,Cyclomatic complexity of the method is 11
Long Parameter List,Smidge,FileSystemHelper,C:\repos\Shazwazza_Smidge\src\Smidge\FileSystemHelper.cs,GetCacheFilePath,The method has 5 parameters. Parameters: file' fileWatchEnabled' extension' cacheBuster' fileInfo
Long Parameter List,Smidge,SmidgeHelper,C:\repos\Shazwazza_Smidge\src\Smidge\SmidgeHelper.cs,SmidgeHelper,The method has 11 parameters. Parameters: fileSetGenerator' dynamicallyRegisteredWebFiles' preProcessManager' fileSystemHelper' hasher' bundleManager' processorFactory' urlManager' requestHelper' httpContextAccessor' cacheBusterResolver
Long Parameter List,Smidge,SmidgeStartup,C:\repos\Shazwazza_Smidge\src\Smidge\SmidgeStartup.cs,FileWatchOptions_FileModified,The method has 5 parameters. Parameters: bundleManager' cacheBusterResolver' bundleName' bundle' debug
Long Parameter List,Smidge,SmidgeStartup,C:\repos\Shazwazza_Smidge\src\Smidge\SmidgeStartup.cs,FileWatchOptions_FileModified,The method has 6 parameters. Parameters: bundleManager' cacheBusterResolver' bundleName' bundle' debug' e
Long Parameter List,Smidge.Controllers,CompositeFileCacheFilterAttribute,C:\repos\Shazwazza_Smidge\src\Smidge\Controllers\CompositeFileCacheFilterAttribute.cs,TryGetCachedCompositeFileResult,The method has 7 parameters. Parameters: fileSystemHelper' cacheBuster' filesetKey' type' mime' result' lastWriteTime
Long Parameter List,Smidge.Controllers,SmidgeController,C:\repos\Shazwazza_Smidge\src\Smidge\Controllers\SmidgeController.cs,SmidgeController,The method has 6 parameters. Parameters: fileSystemHelper' bundleManager' fileSetGenerator' processorFactory' preProcessManager' logger
Long Parameter List,Smidge.Models,BundleRequestModel,C:\repos\Shazwazza_Smidge\src\Smidge\Models\BundleRequestModel.cs,BundleRequestModel,The method has 5 parameters. Parameters: urlManager' accessor' requestHelper' bundleManager' cacheBusterResolver
Long Parameter List,Smidge.Models,CompositeFileModel,C:\repos\Shazwazza_Smidge\src\Smidge\Models\CompositeFileModel.cs,CompositeFileModel,The method has 6 parameters. Parameters: hasher' urlManager' accessor' requestHelper' bundleManager' cacheBusterResolver
Long Identifier,Smidge,SmidgeHelper,C:\repos\Shazwazza_Smidge\src\Smidge\SmidgeHelper.cs,,The length of the parameter _dynamicallyRegisteredWebFiles is 30.
Long Statement,Smidge,BundleManager,C:\repos\Shazwazza_Smidge\src\Smidge\BundleManager.cs,Create,The length of the statement  "            if (string.IsNullOrWhiteSpace(bundleName)) throw new ArgumentException("Value cannot be null or whitespace."' nameof(bundleName)); " is 130.
Long Statement,Smidge,BundleManager,C:\repos\Shazwazza_Smidge\src\Smidge\BundleManager.cs,Create,The length of the statement  "            if (string.IsNullOrWhiteSpace(bundleName)) throw new ArgumentException("Value cannot be null or whitespace."' nameof(bundleName)); " is 130.
Long Statement,Smidge,BundleManager,C:\repos\Shazwazza_Smidge\src\Smidge\BundleManager.cs,Create,The length of the statement  "            if (string.IsNullOrWhiteSpace(bundleName)) throw new ArgumentException("Value cannot be null or whitespace."' nameof(bundleName)); " is 130.
Long Statement,Smidge,BundleManager,C:\repos\Shazwazza_Smidge\src\Smidge\BundleManager.cs,Create,The length of the statement  "            if (string.IsNullOrWhiteSpace(bundleName)) throw new ArgumentException("Value cannot be null or whitespace."' nameof(bundleName)); " is 130.
Long Statement,Smidge,BundleManager,C:\repos\Shazwazza_Smidge\src\Smidge\BundleManager.cs,Create,The length of the statement  "            if (string.IsNullOrWhiteSpace(bundleName)) throw new ArgumentException("Value cannot be null or whitespace."' nameof(bundleName)); " is 130.
Long Statement,Smidge,BundleManager,C:\repos\Shazwazza_Smidge\src\Smidge\BundleManager.cs,Create,The length of the statement  "            _logger.LogDebug($"Creating {WebFileType.Css} bundle '{bundleName}' with {cssFiles.Length} files and a custom pipeline"); " is 121.
Long Statement,Smidge,BundleManager,C:\repos\Shazwazza_Smidge\src\Smidge\BundleManager.cs,Create,The length of the statement  "            if (string.IsNullOrWhiteSpace(bundleName)) throw new ArgumentException("Value cannot be null or whitespace."' nameof(bundleName)); " is 130.
Long Statement,Smidge,FileSystemHelper,C:\repos\Shazwazza_Smidge\src\Smidge\FileSystemHelper.cs,GetFileInfo,The length of the statement  "                throw new FileNotFoundException($"No such file exists {fileInfo.PhysicalPath} (mapped from {path})"' fileInfo.PhysicalPath); " is 124.
Long Statement,Smidge,FileSystemHelper,C:\repos\Shazwazza_Smidge\src\Smidge\FileSystemHelper.cs,GetFileInfo,The length of the statement  "                throw new FileNotFoundException($"No such file exists {fileInfo.PhysicalPath ?? fileInfo.Name} (mapped from {filePath})"' fileInfo.PhysicalPath); " is 145.
Long Statement,Smidge,HttpExtensions,C:\repos\Shazwazza_Smidge\src\Smidge\HttpExtensions.cs,TryParseHttpDate,The length of the statement  "            return DateTime.TryParseExact(dateString' HttpConstants.HttpDateFormat' CultureInfo.InvariantCulture' DateTimeStyles.None' out parsedDate); " is 139.
Long Statement,Smidge,HttpExtensions,C:\repos\Shazwazza_Smidge\src\Smidge\HttpExtensions.cs,AddLastModifiedResponseHeader,The length of the statement  "            response.Headers[HttpConstants.LastModified] = model.LastFileWriteTime.ToUniversalTime().ToString(HttpConstants.HttpDateFormat); " is 128.
Long Statement,Smidge,SmidgeHelper,C:\repos\Shazwazza_Smidge\src\Smidge\SmidgeHelper.cs,GenerateBundleUrlsAsync,The length of the statement  "            //TODO: We should cache this' but problem is how do we do that with file watchers enabled? We'd still have to lookup the bundleOptions " is 134.
Long Statement,Smidge,SmidgeHelper,C:\repos\Shazwazza_Smidge\src\Smidge\SmidgeHelper.cs,GenerateUrlsAsync,The length of the statement  "            var cacheBuster = _cacheBusterResolver.GetCacheBuster(_bundleManager.GetDefaultBundleOptions(debug).GetCacheBusterType()); " is 122.
Long Statement,Smidge,SmidgeStartup,C:\repos\Shazwazza_Smidge\src\Smidge\SmidgeStartup.cs,AddSmidge,The length of the statement  "            services.AddSingleton<Lazy<IEnumerable<IPreProcessor>>>(provider => new Lazy<IEnumerable<IPreProcessor>>(provider.GetRequiredService<IEnumerable<IPreProcessor>>)); " is 163.
Long Statement,Smidge,SmidgeStartup,C:\repos\Shazwazza_Smidge\src\Smidge\SmidgeStartup.cs,WireUpFileWatchEventHandlers,The length of the statement  "                bundle.BundleOptions.DebugOptions.FileWatchOptions.FileModified += FileWatchOptions_FileModified(bundleManager' cacheBusterResolver' bundleName' bundle' true); " is 159.
Long Statement,Smidge,SmidgeStartup,C:\repos\Shazwazza_Smidge\src\Smidge\SmidgeStartup.cs,WireUpFileWatchEventHandlers,The length of the statement  "                bundle.BundleOptions.ProductionOptions.FileWatchOptions.FileModified += FileWatchOptions_FileModified(bundleManager' cacheBusterResolver' bundleName' bundle' false); " is 165.
Long Statement,Smidge,SmidgeStartup,C:\repos\Shazwazza_Smidge\src\Smidge\SmidgeStartup.cs,FileWatchOptions_FileModified,The length of the statement  "            var cacheBuster = cacheBusterResolver.GetCacheBuster(bundle.GetBundleOptions(bundleManager' debug).GetCacheBusterType());                 " is 121.
Long Statement,Smidge.CompositeFiles,DefaultUrlManager,C:\repos\Shazwazza_Smidge\src\Smidge\CompositeFiles\DefaultUrlManager.cs,GetUrls,The length of the statement  "                        throw new InvalidOperationException("The path for the single dependency: '" + current.FilePath.TrimExtension(fileExtension) + "' exceeds the max length (" + _options.MaxUrlLength + ")' either reduce the single dependency's path length or increase the MaxHandlerUrlLength value"); " is 279.
Long Statement,Smidge.Controllers,CacheFilter,C:\repos\Shazwazza_Smidge\src\Smidge\Controllers\CompositeFileCacheFilterAttribute.cs,OnActionExecuting,The length of the statement  "                    cacheBuster = _cacheBusterResolver.GetCacheBuster(bundleFile.Bundle.GetBundleOptions(_bundleManager' bundleFile.Debug).GetCacheBusterType());                         " is 141.
Long Statement,Smidge.Controllers,CacheFilter,C:\repos\Shazwazza_Smidge\src\Smidge\Controllers\CompositeFileCacheFilterAttribute.cs,OnActionExecuting,The length of the statement  "                    if (TryGetCachedCompositeFileResult(_fileSystemHelper' cacheBuster' file.FileKey' file.Compression' file.Mime' out result' out lastWrite)) " is 138.
Long Statement,Smidge.Controllers,SmidgeController,C:\repos\Shazwazza_Smidge\src\Smidge\Controllers\SmidgeController.cs,Bundle,The length of the statement  "            var compositeFilePath = new FileInfo(_fileSystemHelper.GetCurrentCompositeFilePath(bundle.CacheBuster' bundle.Compression' bundle.FileKey)); " is 140.
Long Statement,Smidge.Controllers,SmidgeController,C:\repos\Shazwazza_Smidge\src\Smidge\Controllers\SmidgeController.cs,Bundle,The length of the statement  "                    x => _fileSystemHelper.GetCacheFilePath(x' bundleOptions.FileWatchOptions.Enabled' bundle.Extension' bundle.CacheBuster' out fi)); " is 130.
Long Statement,Smidge.Controllers,SmidgeController,C:\repos\Shazwazza_Smidge\src\Smidge\Controllers\SmidgeController.cs,Composite,The length of the statement  "            var compositeFilePath = new FileInfo(_fileSystemHelper.GetCurrentCompositeFilePath(file.CacheBuster' file.Compression' file.FileKey)); " is 134.
Long Statement,Smidge.Controllers,SmidgeController,C:\repos\Shazwazza_Smidge\src\Smidge\Controllers\SmidgeController.cs,Composite,The length of the statement  "            //this bundle context isn't really used since this is not a bundle but just a composite file which doesn't support all of the features of a real bundle " is 151.
Long Statement,Smidge.FileProcessors,CssImportProcessor,C:\repos\Shazwazza_Smidge\src\Smidge\FileProcessors\CssImportProcessor.cs,ProcessAsync,The length of the statement  "            //need to write the imported sheets first since these theoretically should *always* be at the top for browser to support them " is 125.
Long Statement,Smidge.FileProcessors,CssImportProcessor,C:\repos\Shazwazza_Smidge\src\Smidge\FileProcessors\CssImportProcessor.cs,ProcessAsync,The length of the statement  "                var uri = new Uri(fileProcessContext.WebFile.FilePath' UriKind.RelativeOrAbsolute).MakeAbsoluteUri(_siteInfo.GetBaseUrl()); " is 123.
Long Statement,Smidge.FileProcessors,CssImportProcessor,C:\repos\Shazwazza_Smidge\src\Smidge\FileProcessors\CssImportProcessor.cs,ProcessAsync,The length of the statement  "                    var processed = await clone.Pipeline.ProcessAsync(new FileProcessContext(content' clone' fileProcessContext.BundleContext)); " is 124.
Long Statement,Smidge.FileProcessors,PreProcessManager,C:\repos\Shazwazza_Smidge\src\Smidge\FileProcessors\PreProcessManager.cs,ProcessFileImpl,The length of the statement  "                : _cacheBusterResolver.GetCacheBuster(_bundleManager.GetDefaultBundleOptions(false).GetCacheBusterType()); //the default for any dynamically (non bundle) file is the default bundle options in production " is 202.
Long Statement,Smidge.FileProcessors,PreProcessManager,C:\repos\Shazwazza_Smidge\src\Smidge\FileProcessors\PreProcessManager.cs,ProcessFileImpl,The length of the statement  "                _logger.LogDebug($"File already in cache '{file.FilePath}'' type: {file.DependencyType}' cacheFile: {cacheFile}' watching? {fileWatchEnabled}"); " is 144.
Long Statement,Smidge.FileProcessors,PreProcessManager,C:\repos\Shazwazza_Smidge\src\Smidge\FileProcessors\PreProcessManager.cs,ProcessFileImpl,The length of the statement  "                _logger.LogDebug($"Processing file '{file.FilePath}'' type: {file.DependencyType}' cacheFile: {cacheFile}' watching? {fileWatchEnabled} ..."); " is 142.
Long Statement,Smidge.Models,BundleExtensions,C:\repos\Shazwazza_Smidge\src\Smidge\Models\BundleExtensions.cs,GetBundleOptions,The length of the statement  "                : (bundle.BundleOptions == null ? bundleMgr.DefaultBundleOptions.ProductionOptions : bundle.BundleOptions.ProductionOptions); " is 125.
Complex Conditional,Smidge.FileProcessors,CssMin,C:\repos\Shazwazza_Smidge\src\Smidge\FileProcessors\CssMinifier.cs,Action,The conditional expression  "_theB == '/' && (_theA == '(' || _theA == ''' || _theA == '=' ||                                          _theA == '[' || _theA == '!' || _theA == ':' ||                                          _theA == '&' || _theA == '|' || _theA == '?' ||                                          _theA == '{' || _theA == '}' || _theA == ';' ||                                          _theA == '\n')"  is complex.
Complex Conditional,Smidge.FileProcessors,JsMin,C:\repos\Shazwazza_Smidge\src\Smidge\FileProcessors\JsMinifier.cs,HandleUnaryOperator,The conditional expression  "(_theY == '\n' || _theY == ' ') &&                      (operators.IndexOf((char)_theA) >= 0) && (operators.IndexOf((char)_theB) >= 0)"  is complex.
Complex Conditional,Smidge.FileProcessors,JsMin,C:\repos\Shazwazza_Smidge\src\Smidge\FileProcessors\JsMinifier.cs,TrackReturnStatement,The conditional expression  "_retStatement == -1 && _theA == 'r' &&                      (preReturn.IndexOf((char)_theY) >= 0 || char.IsWhiteSpace((char)_theY) || _theY == 'r')"  is complex.
Magic Number,Smidge,RequestHelper,C:\repos\Shazwazza_Smidge\src\Smidge\RequestHelper.cs,Content,The following statement contains a magic number: if (path[0] == 126)              {                  PathString pathBase = _siteInfo.GetBasePath();                  return pathBase.Add(new PathString(path.Substring(1))).Value;              }
Magic Number,Smidge,StringExtensions,C:\repos\Shazwazza_Smidge\src\Smidge\StringExtensions.cs,DecodeFrom64Url,The following statement contains a magic number: int rem = toDecode.Length % 4;
Magic Number,Smidge,StringExtensions,C:\repos\Shazwazza_Smidge\src\Smidge\StringExtensions.cs,DecodeFrom64Url,The following statement contains a magic number: if (rem > 0)                  toDecode = toDecode.PadRight(toDecode.Length + 4 - rem' '=');
Magic Number,Smidge.CompositeFiles,DefaultUrlManager,C:\repos\Shazwazza_Smidge\src\Smidge\CompositeFiles\DefaultUrlManager.cs,GetUrls,The following statement contains a magic number: while (remaining.Any())              {                  var current = remaining.Peek();                    //add the normal file path (generally this would already be hashed)                  delimitedBuilder.Append(current.FilePath.TrimExtension(fileExtension).EnsureEndsWith('.'));                    //test if the current string exceeds the max length' if so we need to split                  if ((delimitedBuilder.Length                       + _options.CompositeFilePath.Length                       + fileExtension.Length                       + cacheBuster.GetValue().Length                       //this number deals with slashes' etc...                       + 10)                      >= (_options.MaxUrlLength))                  {                      //we need to do a check here' this is the first one and it's already exceeded the max length we cannot continue                      if (currBuilder.Length == 0)                      {                          throw new InvalidOperationException("The path for the single dependency: '" + current.FilePath.TrimExtension(fileExtension) + "' exceeds the max length (" + _options.MaxUrlLength + ")' either reduce the single dependency's path length or increase the MaxHandlerUrlLength value");                      }                        //flush the current output to the array                      var output = currBuilder.ToString().TrimEnd('.');                      files.Add(new FileSetUrl                      {                          Key = _hasher.Hash(output)'                          Url = GetCompositeUrl(output' fileExtension' cacheBuster)                      });                      //create some new output                      currBuilder = new StringBuilder();                      delimitedBuilder = new StringBuilder();                      builderCount++;                  }                  else                  {                      //update the normal builder                      currBuilder.Append(current.FilePath.TrimExtension(fileExtension).EnsureEndsWith('.'));                      //remove from the queue                      remaining.Dequeue();                  }              }
Magic Number,Smidge.CompositeFiles,DefaultUrlManager,C:\repos\Shazwazza_Smidge\src\Smidge\CompositeFiles\DefaultUrlManager.cs,ParsePath,The following statement contains a magic number: if (parts.Length < 3)              {                  //invalid                  return null;              }
Magic Number,Smidge.CompositeFiles,DefaultUrlManager,C:\repos\Shazwazza_Smidge\src\Smidge\CompositeFiles\DefaultUrlManager.cs,ParsePath,The following statement contains a magic number: var ext = parts[parts.Length - 2];
Magic Number,Smidge.CompositeFiles,DefaultUrlManager,C:\repos\Shazwazza_Smidge\src\Smidge\CompositeFiles\DefaultUrlManager.cs,ParsePath,The following statement contains a magic number: result.Names = parts.Take(parts.Length - 2);
Magic Number,Smidge.CompositeFiles,UrlManagerOptions,C:\repos\Shazwazza_Smidge\src\Smidge\CompositeFiles\UrlManagerOptions.cs,UrlManagerOptions,The following statement contains a magic number: MaxUrlLength = 2048;
Magic Number,Smidge.Controllers,AddExpiryHeaderFilter,C:\repos\Shazwazza_Smidge\src\Smidge\Controllers\AddExpiryHeadersAttribute.cs,OnActionExecuted,The following statement contains a magic number: var cacheControlMaxAge = 10*24;
Magic Number,Smidge.Controllers,AddExpiryHeaderFilter,C:\repos\Shazwazza_Smidge\src\Smidge\Controllers\AddExpiryHeadersAttribute.cs,OnActionExecuted,The following statement contains a magic number: var cacheControlMaxAge = 10*24;
Magic Number,Smidge.FileProcessors,CssImportProcessor,C:\repos\Shazwazza_Smidge\src\Smidge\FileProcessors\CssImportProcessor.cs,ParseImportStatements,The following statement contains a magic number: foreach (Match match in matches)              {                                  //Ignore external imports - they might be wrapped in a url( block so get it                  var urlMatch = RegexStatements.CssUrlRegex.Match(match.Value);                  if (urlMatch.Success && urlMatch.Groups.Count >= 2)                  {                      var path = urlMatch.Groups[1].Value.Trim('\''' '"');                      if (_requestHelper.IsExternalRequestPath(path)) continue;                  }                                    //Strip the import statement                                  content = content.ReplaceFirst(match.Value' "");                    //get the last non-empty match                  var filePath = match.Groups.Cast<Group>().Where(x => !string.IsNullOrEmpty(x.Value)).Last().Value.Trim('\''' '"');                    //Ignore external imports - this will occur if they are not wrapped in a url block                  if (_requestHelper.IsExternalRequestPath(filePath)) continue;                    pathsFound.Add(filePath);              }
Magic Number,Smidge.FileProcessors,CssMin,C:\repos\Shazwazza_Smidge\src\Smidge\FileProcessors\CssMinifier.cs,ExecuteCssMin,The following statement contains a magic number: Action(3);
Magic Number,Smidge.FileProcessors,CssMin,C:\repos\Shazwazza_Smidge\src\Smidge\FileProcessors\CssMinifier.cs,ExecuteCssMin,The following statement contains a magic number: while (_theA != Eof)                  {                      switch (_theA)                      {                          case ' ':                              {                                  switch (_theB)                                  {                                      case ' ':        //body.Replace("  "' String.Empty);                                      case '{':        //body = body.Replace(" {"' "{");                                      case ':':        //body = body.Replace(" {"' "{");                                      case '\n':       //body = body.Replace(" \n"' "\n");                                      case '\r':       //body = body.Replace(" \r"' "\r");                                      case '\t':       //body = body.Replace(" \t"' "\t");                                          Action(2);                                          break;                                      default:                                          Action(1);                                          break;                                  }                                  break;                              }                          case '\t':              //body = body.Replace("\t"' "");                          case '\r':              //body = body.Replace("\r"' "");                              Action(2);                              break;                          case '\n':              //body = body.Replace("\n"' "");                              if (char.IsWhiteSpace((char)_theB))                              {                                  //skip over whitespace                                  Action(3);                              }                              else                              {                                  //convert the line break to a space except when in the beginning                                  //TODO: this isn't the best place to put this logic since all puts are done                                  // in the action' but i don't see any other way to do this'                                  //we could set theA = ' ' and call action(1) ?                                  if (_sb.Length > 0) Put(' ');                                  Action(2);                              }                              break;                          case '}':                          case '{':                          case ':':                          case ''':                          case ';':                              //skip over whitespace                              Action(char.IsWhiteSpace((char)_theB) ? 3 : 1);                              break;                          default:                              Action(1);                              break;                      }                  }
Magic Number,Smidge.FileProcessors,CssMin,C:\repos\Shazwazza_Smidge\src\Smidge\FileProcessors\CssMinifier.cs,ExecuteCssMin,The following statement contains a magic number: while (_theA != Eof)                  {                      switch (_theA)                      {                          case ' ':                              {                                  switch (_theB)                                  {                                      case ' ':        //body.Replace("  "' String.Empty);                                      case '{':        //body = body.Replace(" {"' "{");                                      case ':':        //body = body.Replace(" {"' "{");                                      case '\n':       //body = body.Replace(" \n"' "\n");                                      case '\r':       //body = body.Replace(" \r"' "\r");                                      case '\t':       //body = body.Replace(" \t"' "\t");                                          Action(2);                                          break;                                      default:                                          Action(1);                                          break;                                  }                                  break;                              }                          case '\t':              //body = body.Replace("\t"' "");                          case '\r':              //body = body.Replace("\r"' "");                              Action(2);                              break;                          case '\n':              //body = body.Replace("\n"' "");                              if (char.IsWhiteSpace((char)_theB))                              {                                  //skip over whitespace                                  Action(3);                              }                              else                              {                                  //convert the line break to a space except when in the beginning                                  //TODO: this isn't the best place to put this logic since all puts are done                                  // in the action' but i don't see any other way to do this'                                  //we could set theA = ' ' and call action(1) ?                                  if (_sb.Length > 0) Put(' ');                                  Action(2);                              }                              break;                          case '}':                          case '{':                          case ':':                          case ''':                          case ';':                              //skip over whitespace                              Action(char.IsWhiteSpace((char)_theB) ? 3 : 1);                              break;                          default:                              Action(1);                              break;                      }                  }
Magic Number,Smidge.FileProcessors,CssMin,C:\repos\Shazwazza_Smidge\src\Smidge\FileProcessors\CssMinifier.cs,ExecuteCssMin,The following statement contains a magic number: while (_theA != Eof)                  {                      switch (_theA)                      {                          case ' ':                              {                                  switch (_theB)                                  {                                      case ' ':        //body.Replace("  "' String.Empty);                                      case '{':        //body = body.Replace(" {"' "{");                                      case ':':        //body = body.Replace(" {"' "{");                                      case '\n':       //body = body.Replace(" \n"' "\n");                                      case '\r':       //body = body.Replace(" \r"' "\r");                                      case '\t':       //body = body.Replace(" \t"' "\t");                                          Action(2);                                          break;                                      default:                                          Action(1);                                          break;                                  }                                  break;                              }                          case '\t':              //body = body.Replace("\t"' "");                          case '\r':              //body = body.Replace("\r"' "");                              Action(2);                              break;                          case '\n':              //body = body.Replace("\n"' "");                              if (char.IsWhiteSpace((char)_theB))                              {                                  //skip over whitespace                                  Action(3);                              }                              else                              {                                  //convert the line break to a space except when in the beginning                                  //TODO: this isn't the best place to put this logic since all puts are done                                  // in the action' but i don't see any other way to do this'                                  //we could set theA = ' ' and call action(1) ?                                  if (_sb.Length > 0) Put(' ');                                  Action(2);                              }                              break;                          case '}':                          case '{':                          case ':':                          case ''':                          case ';':                              //skip over whitespace                              Action(char.IsWhiteSpace((char)_theB) ? 3 : 1);                              break;                          default:                              Action(1);                              break;                      }                  }
Magic Number,Smidge.FileProcessors,CssMin,C:\repos\Shazwazza_Smidge\src\Smidge\FileProcessors\CssMinifier.cs,ExecuteCssMin,The following statement contains a magic number: while (_theA != Eof)                  {                      switch (_theA)                      {                          case ' ':                              {                                  switch (_theB)                                  {                                      case ' ':        //body.Replace("  "' String.Empty);                                      case '{':        //body = body.Replace(" {"' "{");                                      case ':':        //body = body.Replace(" {"' "{");                                      case '\n':       //body = body.Replace(" \n"' "\n");                                      case '\r':       //body = body.Replace(" \r"' "\r");                                      case '\t':       //body = body.Replace(" \t"' "\t");                                          Action(2);                                          break;                                      default:                                          Action(1);                                          break;                                  }                                  break;                              }                          case '\t':              //body = body.Replace("\t"' "");                          case '\r':              //body = body.Replace("\r"' "");                              Action(2);                              break;                          case '\n':              //body = body.Replace("\n"' "");                              if (char.IsWhiteSpace((char)_theB))                              {                                  //skip over whitespace                                  Action(3);                              }                              else                              {                                  //convert the line break to a space except when in the beginning                                  //TODO: this isn't the best place to put this logic since all puts are done                                  // in the action' but i don't see any other way to do this'                                  //we could set theA = ' ' and call action(1) ?                                  if (_sb.Length > 0) Put(' ');                                  Action(2);                              }                              break;                          case '}':                          case '{':                          case ':':                          case ''':                          case ';':                              //skip over whitespace                              Action(char.IsWhiteSpace((char)_theB) ? 3 : 1);                              break;                          default:                              Action(1);                              break;                      }                  }
Magic Number,Smidge.FileProcessors,CssMin,C:\repos\Shazwazza_Smidge\src\Smidge\FileProcessors\CssMinifier.cs,ExecuteCssMin,The following statement contains a magic number: while (_theA != Eof)                  {                      switch (_theA)                      {                          case ' ':                              {                                  switch (_theB)                                  {                                      case ' ':        //body.Replace("  "' String.Empty);                                      case '{':        //body = body.Replace(" {"' "{");                                      case ':':        //body = body.Replace(" {"' "{");                                      case '\n':       //body = body.Replace(" \n"' "\n");                                      case '\r':       //body = body.Replace(" \r"' "\r");                                      case '\t':       //body = body.Replace(" \t"' "\t");                                          Action(2);                                          break;                                      default:                                          Action(1);                                          break;                                  }                                  break;                              }                          case '\t':              //body = body.Replace("\t"' "");                          case '\r':              //body = body.Replace("\r"' "");                              Action(2);                              break;                          case '\n':              //body = body.Replace("\n"' "");                              if (char.IsWhiteSpace((char)_theB))                              {                                  //skip over whitespace                                  Action(3);                              }                              else                              {                                  //convert the line break to a space except when in the beginning                                  //TODO: this isn't the best place to put this logic since all puts are done                                  // in the action' but i don't see any other way to do this'                                  //we could set theA = ' ' and call action(1) ?                                  if (_sb.Length > 0) Put(' ');                                  Action(2);                              }                              break;                          case '}':                          case '{':                          case ':':                          case ''':                          case ';':                              //skip over whitespace                              Action(char.IsWhiteSpace((char)_theB) ? 3 : 1);                              break;                          default:                              Action(1);                              break;                      }                  }
Magic Number,Smidge.FileProcessors,CssMin,C:\repos\Shazwazza_Smidge\src\Smidge\FileProcessors\CssMinifier.cs,Action,The following statement contains a magic number: if (d <= 2)                  {                      _theA = _theB;                      if (_theA == '\'' || _theA == '"')                      {                          for (;;)                          {                              Put(_theA);                              _theA = Get();                              if (_theA == _theB)                              {                                  break;                              }                              if (_theA <= '\n')                              {                                  throw new FormatException(string.Format("Error: unterminated string literal: {0}\n"' _theA));                              }                              if (_theA == '\\')                              {                                  Put(_theA);                                  _theA = Get();                              }                          }                      }                  }
Magic Number,Smidge.FileProcessors,CssMin,C:\repos\Shazwazza_Smidge\src\Smidge\FileProcessors\CssMinifier.cs,Action,The following statement contains a magic number: if (d <= 3)                  {                      _theB = Next();                      if (_theB == '/' && (_theA == '(' || _theA == ''' || _theA == '=' ||                                          _theA == '[' || _theA == '!' || _theA == ':' ||                                          _theA == '&' || _theA == '|' || _theA == '?' ||                                          _theA == '{' || _theA == '}' || _theA == ';' ||                                          _theA == '\n'))                      {                          Put(_theA);                          Put(_theB);                          for (;;)                          {                              _theA = Get();                              if (_theA == '/')                              {                                  break;                              }                              else if (_theA == '\\')                              {                                  Put(_theA);                                  _theA = Get();                              }                              else if (_theA <= '\n')                              {                                  throw new FormatException(string.Format("Error: unterminated Regular Expression literal : {0}.\n"' _theA));                              }                              Put(_theA);                          }                          _theB = Next();                      }                  }
Magic Number,Smidge.FileProcessors,CssUrlProcessor,C:\repos\Shazwazza_Smidge\src\Smidge\FileProcessors\CssUrlProcessor.cs,ReplaceUrlsWithAbsolutePaths,The following statement contains a magic number: var str = RegexStatements.CssUrlRegex.Replace(fileContent' m =>              {                  if (m.Groups.Count == 2)                  {                      var match = m.Groups[1].Value.Trim('\''' '"');                      var hashSplit = match.Split(new[] { '#' }' StringSplitOptions.RemoveEmptyEntries);                        return string.Format(@"url(""{0}{1}"")"'                                           (match.StartsWith("http://"' StringComparison.OrdinalIgnoreCase)                                           || match.StartsWith("https://"' StringComparison.OrdinalIgnoreCase)                                           || match.StartsWith("//"' StringComparison.OrdinalIgnoreCase)) ? match : new Uri(cssLocation' match).PathAndQuery'                                           hashSplit.Length > 1 ? ("#" + hashSplit[1]) : "");                  }                  return m.Value;              });
Magic Number,Smidge.FileProcessors,JsMin,C:\repos\Shazwazza_Smidge\src\Smidge\FileProcessors\JsMinifier.cs,ExecuteJsMin,The following statement contains a magic number: Action(3);
Magic Number,Smidge.FileProcessors,JsMin,C:\repos\Shazwazza_Smidge\src\Smidge\FileProcessors\JsMinifier.cs,ExecuteJsMin,The following statement contains a magic number: while (_theA != Eof)                  {                      switch (_theA)                      {                          case ' ':                              Action(IsAlphanum(_theB) ? 1 : 2);                              break;                          case '\n':                          case '\u2028':                          case '\u2029':                              switch (_theB)                              {                                  case '{':                                  case '[':                                  case '(':                                  case '+':                                  case '-':                                  case '!':                                  case '~':                                      if (!_start)                                      {                                          //this is the first write' we don't want to write a new line to begin'                                          // read next                                          Action(2);                                          break;                                      }                                      //Maintain the line break                                      Action(1);                                      break;                                  case ' ':                                      Action(3);                                      break;                                  default:                                      if (!_start)                                      {                                          //this is the first write' we don't want to write a new line to begin'                                          // read next                                          Action(2);                                          break;                                      }                                      Action(IsAlphanum(_theB) ? 1 : 2);                                      break;                              }                              break;                          default:                              switch (_theB)                              {                                    case ' ':                                      Action(IsAlphanum(_theA) ? 1 : 3);                                      break;                                  case '\n':                                  case '\u2028':                                  case '\u2029':                                      switch (_theA)                                      {                                          case '}':                                          case ']':                                          case ')':                                          case '+':                                          case '-':                                          case '"':                                          case '\'':                                          case '`':                                              Action(1);                                              break;                                          default:                                              Action(IsAlphanum(_theA) ? 1 : 3);                                              break;                                      }                                      break;                                  default:                                      Action(1);                                      break;                              }                              break;                      }                  }
Magic Number,Smidge.FileProcessors,JsMin,C:\repos\Shazwazza_Smidge\src\Smidge\FileProcessors\JsMinifier.cs,ExecuteJsMin,The following statement contains a magic number: while (_theA != Eof)                  {                      switch (_theA)                      {                          case ' ':                              Action(IsAlphanum(_theB) ? 1 : 2);                              break;                          case '\n':                          case '\u2028':                          case '\u2029':                              switch (_theB)                              {                                  case '{':                                  case '[':                                  case '(':                                  case '+':                                  case '-':                                  case '!':                                  case '~':                                      if (!_start)                                      {                                          //this is the first write' we don't want to write a new line to begin'                                          // read next                                          Action(2);                                          break;                                      }                                      //Maintain the line break                                      Action(1);                                      break;                                  case ' ':                                      Action(3);                                      break;                                  default:                                      if (!_start)                                      {                                          //this is the first write' we don't want to write a new line to begin'                                          // read next                                          Action(2);                                          break;                                      }                                      Action(IsAlphanum(_theB) ? 1 : 2);                                      break;                              }                              break;                          default:                              switch (_theB)                              {                                    case ' ':                                      Action(IsAlphanum(_theA) ? 1 : 3);                                      break;                                  case '\n':                                  case '\u2028':                                  case '\u2029':                                      switch (_theA)                                      {                                          case '}':                                          case ']':                                          case ')':                                          case '+':                                          case '-':                                          case '"':                                          case '\'':                                          case '`':                                              Action(1);                                              break;                                          default:                                              Action(IsAlphanum(_theA) ? 1 : 3);                                              break;                                      }                                      break;                                  default:                                      Action(1);                                      break;                              }                              break;                      }                  }
Magic Number,Smidge.FileProcessors,JsMin,C:\repos\Shazwazza_Smidge\src\Smidge\FileProcessors\JsMinifier.cs,ExecuteJsMin,The following statement contains a magic number: while (_theA != Eof)                  {                      switch (_theA)                      {                          case ' ':                              Action(IsAlphanum(_theB) ? 1 : 2);                              break;                          case '\n':                          case '\u2028':                          case '\u2029':                              switch (_theB)                              {                                  case '{':                                  case '[':                                  case '(':                                  case '+':                                  case '-':                                  case '!':                                  case '~':                                      if (!_start)                                      {                                          //this is the first write' we don't want to write a new line to begin'                                          // read next                                          Action(2);                                          break;                                      }                                      //Maintain the line break                                      Action(1);                                      break;                                  case ' ':                                      Action(3);                                      break;                                  default:                                      if (!_start)                                      {                                          //this is the first write' we don't want to write a new line to begin'                                          // read next                                          Action(2);                                          break;                                      }                                      Action(IsAlphanum(_theB) ? 1 : 2);                                      break;                              }                              break;                          default:                              switch (_theB)                              {                                    case ' ':                                      Action(IsAlphanum(_theA) ? 1 : 3);                                      break;                                  case '\n':                                  case '\u2028':                                  case '\u2029':                                      switch (_theA)                                      {                                          case '}':                                          case ']':                                          case ')':                                          case '+':                                          case '-':                                          case '"':                                          case '\'':                                          case '`':                                              Action(1);                                              break;                                          default:                                              Action(IsAlphanum(_theA) ? 1 : 3);                                              break;                                      }                                      break;                                  default:                                      Action(1);                                      break;                              }                              break;                      }                  }
Magic Number,Smidge.FileProcessors,JsMin,C:\repos\Shazwazza_Smidge\src\Smidge\FileProcessors\JsMinifier.cs,ExecuteJsMin,The following statement contains a magic number: while (_theA != Eof)                  {                      switch (_theA)                      {                          case ' ':                              Action(IsAlphanum(_theB) ? 1 : 2);                              break;                          case '\n':                          case '\u2028':                          case '\u2029':                              switch (_theB)                              {                                  case '{':                                  case '[':                                  case '(':                                  case '+':                                  case '-':                                  case '!':                                  case '~':                                      if (!_start)                                      {                                          //this is the first write' we don't want to write a new line to begin'                                          // read next                                          Action(2);                                          break;                                      }                                      //Maintain the line break                                      Action(1);                                      break;                                  case ' ':                                      Action(3);                                      break;                                  default:                                      if (!_start)                                      {                                          //this is the first write' we don't want to write a new line to begin'                                          // read next                                          Action(2);                                          break;                                      }                                      Action(IsAlphanum(_theB) ? 1 : 2);                                      break;                              }                              break;                          default:                              switch (_theB)                              {                                    case ' ':                                      Action(IsAlphanum(_theA) ? 1 : 3);                                      break;                                  case '\n':                                  case '\u2028':                                  case '\u2029':                                      switch (_theA)                                      {                                          case '}':                                          case ']':                                          case ')':                                          case '+':                                          case '-':                                          case '"':                                          case '\'':                                          case '`':                                              Action(1);                                              break;                                          default:                                              Action(IsAlphanum(_theA) ? 1 : 3);                                              break;                                      }                                      break;                                  default:                                      Action(1);                                      break;                              }                              break;                      }                  }
Magic Number,Smidge.FileProcessors,JsMin,C:\repos\Shazwazza_Smidge\src\Smidge\FileProcessors\JsMinifier.cs,ExecuteJsMin,The following statement contains a magic number: while (_theA != Eof)                  {                      switch (_theA)                      {                          case ' ':                              Action(IsAlphanum(_theB) ? 1 : 2);                              break;                          case '\n':                          case '\u2028':                          case '\u2029':                              switch (_theB)                              {                                  case '{':                                  case '[':                                  case '(':                                  case '+':                                  case '-':                                  case '!':                                  case '~':                                      if (!_start)                                      {                                          //this is the first write' we don't want to write a new line to begin'                                          // read next                                          Action(2);                                          break;                                      }                                      //Maintain the line break                                      Action(1);                                      break;                                  case ' ':                                      Action(3);                                      break;                                  default:                                      if (!_start)                                      {                                          //this is the first write' we don't want to write a new line to begin'                                          // read next                                          Action(2);                                          break;                                      }                                      Action(IsAlphanum(_theB) ? 1 : 2);                                      break;                              }                              break;                          default:                              switch (_theB)                              {                                    case ' ':                                      Action(IsAlphanum(_theA) ? 1 : 3);                                      break;                                  case '\n':                                  case '\u2028':                                  case '\u2029':                                      switch (_theA)                                      {                                          case '}':                                          case ']':                                          case ')':                                          case '+':                                          case '-':                                          case '"':                                          case '\'':                                          case '`':                                              Action(1);                                              break;                                          default:                                              Action(IsAlphanum(_theA) ? 1 : 3);                                              break;                                      }                                      break;                                  default:                                      Action(1);                                      break;                              }                              break;                      }                  }
Magic Number,Smidge.FileProcessors,JsMin,C:\repos\Shazwazza_Smidge\src\Smidge\FileProcessors\JsMinifier.cs,ExecuteJsMin,The following statement contains a magic number: while (_theA != Eof)                  {                      switch (_theA)                      {                          case ' ':                              Action(IsAlphanum(_theB) ? 1 : 2);                              break;                          case '\n':                          case '\u2028':                          case '\u2029':                              switch (_theB)                              {                                  case '{':                                  case '[':                                  case '(':                                  case '+':                                  case '-':                                  case '!':                                  case '~':                                      if (!_start)                                      {                                          //this is the first write' we don't want to write a new line to begin'                                          // read next                                          Action(2);                                          break;                                      }                                      //Maintain the line break                                      Action(1);                                      break;                                  case ' ':                                      Action(3);                                      break;                                  default:                                      if (!_start)                                      {                                          //this is the first write' we don't want to write a new line to begin'                                          // read next                                          Action(2);                                          break;                                      }                                      Action(IsAlphanum(_theB) ? 1 : 2);                                      break;                              }                              break;                          default:                              switch (_theB)                              {                                    case ' ':                                      Action(IsAlphanum(_theA) ? 1 : 3);                                      break;                                  case '\n':                                  case '\u2028':                                  case '\u2029':                                      switch (_theA)                                      {                                          case '}':                                          case ']':                                          case ')':                                          case '+':                                          case '-':                                          case '"':                                          case '\'':                                          case '`':                                              Action(1);                                              break;                                          default:                                              Action(IsAlphanum(_theA) ? 1 : 3);                                              break;                                      }                                      break;                                  default:                                      Action(1);                                      break;                              }                              break;                      }                  }
Magic Number,Smidge.FileProcessors,JsMin,C:\repos\Shazwazza_Smidge\src\Smidge\FileProcessors\JsMinifier.cs,ExecuteJsMin,The following statement contains a magic number: while (_theA != Eof)                  {                      switch (_theA)                      {                          case ' ':                              Action(IsAlphanum(_theB) ? 1 : 2);                              break;                          case '\n':                          case '\u2028':                          case '\u2029':                              switch (_theB)                              {                                  case '{':                                  case '[':                                  case '(':                                  case '+':                                  case '-':                                  case '!':                                  case '~':                                      if (!_start)                                      {                                          //this is the first write' we don't want to write a new line to begin'                                          // read next                                          Action(2);                                          break;                                      }                                      //Maintain the line break                                      Action(1);                                      break;                                  case ' ':                                      Action(3);                                      break;                                  default:                                      if (!_start)                                      {                                          //this is the first write' we don't want to write a new line to begin'                                          // read next                                          Action(2);                                          break;                                      }                                      Action(IsAlphanum(_theB) ? 1 : 2);                                      break;                              }                              break;                          default:                              switch (_theB)                              {                                    case ' ':                                      Action(IsAlphanum(_theA) ? 1 : 3);                                      break;                                  case '\n':                                  case '\u2028':                                  case '\u2029':                                      switch (_theA)                                      {                                          case '}':                                          case ']':                                          case ')':                                          case '+':                                          case '-':                                          case '"':                                          case '\'':                                          case '`':                                              Action(1);                                              break;                                          default:                                              Action(IsAlphanum(_theA) ? 1 : 3);                                              break;                                      }                                      break;                                  default:                                      Action(1);                                      break;                              }                              break;                      }                  }
Magic Number,Smidge.FileProcessors,JsMin,C:\repos\Shazwazza_Smidge\src\Smidge\FileProcessors\JsMinifier.cs,Action,The following statement contains a magic number: switch (d)                  {                      case 1:                          Put(_theA);                          _start = true;                            //process unary operator                          HandleUnaryOperator();                            goto case 2;                      case 2:                          _theA = _theB;                            //process string literals or end of statement and track return statement                          if (!HandleStringLiteral())                              HandleEndOfStatement();                            goto case 3;                      case 3:                          _theB = NextCharExcludingComments();                            //track return statement                          TrackReturnStatement();                            //Check for a regex literal and process it if it is found                          HandleRegexLiteral();                            goto default;                      default:                          break;                  }
Magic Number,Smidge.FileProcessors,JsMin,C:\repos\Shazwazza_Smidge\src\Smidge\FileProcessors\JsMinifier.cs,Action,The following statement contains a magic number: switch (d)                  {                      case 1:                          Put(_theA);                          _start = true;                            //process unary operator                          HandleUnaryOperator();                            goto case 2;                      case 2:                          _theA = _theB;                            //process string literals or end of statement and track return statement                          if (!HandleStringLiteral())                              HandleEndOfStatement();                            goto case 3;                      case 3:                          _theB = NextCharExcludingComments();                            //track return statement                          TrackReturnStatement();                            //Check for a regex literal and process it if it is found                          HandleRegexLiteral();                            goto default;                      default:                          break;                  }
Magic Number,Smidge.FileProcessors,JsMin,C:\repos\Shazwazza_Smidge\src\Smidge\FileProcessors\JsMinifier.cs,Action,The following statement contains a magic number: switch (d)                  {                      case 1:                          Put(_theA);                          _start = true;                            //process unary operator                          HandleUnaryOperator();                            goto case 2;                      case 2:                          _theA = _theB;                            //process string literals or end of statement and track return statement                          if (!HandleStringLiteral())                              HandleEndOfStatement();                            goto case 3;                      case 3:                          _theB = NextCharExcludingComments();                            //track return statement                          TrackReturnStatement();                            //Check for a regex literal and process it if it is found                          HandleRegexLiteral();                            goto default;                      default:                          break;                  }
Magic Number,Smidge.FileProcessors,JsMin,C:\repos\Shazwazza_Smidge\src\Smidge\FileProcessors\JsMinifier.cs,Action,The following statement contains a magic number: switch (d)                  {                      case 1:                          Put(_theA);                          _start = true;                            //process unary operator                          HandleUnaryOperator();                            goto case 2;                      case 2:                          _theA = _theB;                            //process string literals or end of statement and track return statement                          if (!HandleStringLiteral())                              HandleEndOfStatement();                            goto case 3;                      case 3:                          _theB = NextCharExcludingComments();                            //track return statement                          TrackReturnStatement();                            //Check for a regex literal and process it if it is found                          HandleRegexLiteral();                            goto default;                      default:                          break;                  }
Magic Number,Smidge.FileProcessors,JsMin,C:\repos\Shazwazza_Smidge\src\Smidge\FileProcessors\JsMinifier.cs,HandleRegexLiteral,The following statement contains a magic number: if (toMatch.IndexOf((char)_theA) < 0 && (char)_theY != '\n' && _retStatement != 5)                      return false;
Magic Number,Smidge.FileProcessors,JsMin,C:\repos\Shazwazza_Smidge\src\Smidge\FileProcessors\JsMinifier.cs,IsAlphanum,The following statement contains a magic number: return ((c >= 'a' && c <= 'z') || (c >= '0' && c <= '9') ||                          (c >= 'A' && c <= 'Z') || c == '_' || c == '$' || c == '\\' ||                          c > 126);
Magic Number,Smidge.Hashing,Crc32,C:\repos\Shazwazza_Smidge\src\Smidge\Hashing\Crc32.cs,HashCore,The following statement contains a magic number: for (int i = offset; i < count; i++)              {                  ulong ptr = (_crc & 0xFF) ^ buffer[i];                  _crc >>= 8;                  _crc ^= _crc32Table[ptr];              }
Magic Number,Smidge.Hashing,Crc32,C:\repos\Shazwazza_Smidge\src\Smidge\Hashing\Crc32.cs,HashFinal,The following statement contains a magic number: byte[] finalHash = new byte[4];
Magic Number,Smidge.Hashing,Crc32,C:\repos\Shazwazza_Smidge\src\Smidge\Hashing\Crc32.cs,HashFinal,The following statement contains a magic number: finalHash[1] = (byte)((finalCRC >> 8) & 0xFF);
Magic Number,Smidge.Hashing,Crc32,C:\repos\Shazwazza_Smidge\src\Smidge\Hashing\Crc32.cs,HashFinal,The following statement contains a magic number: finalHash[2] = (byte)((finalCRC >> 16) & 0xFF);
Magic Number,Smidge.Hashing,Crc32,C:\repos\Shazwazza_Smidge\src\Smidge\Hashing\Crc32.cs,HashFinal,The following statement contains a magic number: finalHash[2] = (byte)((finalCRC >> 16) & 0xFF);
Magic Number,Smidge.Hashing,Crc32,C:\repos\Shazwazza_Smidge\src\Smidge\Hashing\Crc32.cs,HashFinal,The following statement contains a magic number: finalHash[3] = (byte)((finalCRC >> 24) & 0xFF);
Magic Number,Smidge.Hashing,Crc32,C:\repos\Shazwazza_Smidge\src\Smidge\Hashing\Crc32.cs,HashFinal,The following statement contains a magic number: finalHash[3] = (byte)((finalCRC >> 24) & 0xFF);
Magic Number,Smidge.Hashing,Crc32,C:\repos\Shazwazza_Smidge\src\Smidge\Hashing\Crc32.cs,ComputeHash,The following statement contains a magic number: byte[] buffer = new byte[4096];
Magic Number,Smidge.Hashing,Crc32,C:\repos\Shazwazza_Smidge\src\Smidge\Hashing\Crc32.cs,ComputeHash,The following statement contains a magic number: while ((bytesRead = inputStream.Read(buffer' 0' 4096)) > 0)              {                  HashCore(buffer' 0' bytesRead);              }
Magic Number,Smidge.Hashing,Crc32,C:\repos\Shazwazza_Smidge\src\Smidge\Hashing\Crc32.cs,_buildCRC32Table,The following statement contains a magic number: uint[] table = new uint[256];
Magic Number,Smidge.Hashing,Crc32,C:\repos\Shazwazza_Smidge\src\Smidge\Hashing\Crc32.cs,_buildCRC32Table,The following statement contains a magic number: for (int i = 0; i < 256; i++)              {                  crc = (uint)i;                  for (int j = 8; j > 0; j--)                  {                      if ((crc & 1) == 1)                          crc = (crc >> 1) ^ polynomial;                      else                          crc >>= 1;                  }                  table[i] = crc;              }
Magic Number,Smidge.Hashing,Crc32,C:\repos\Shazwazza_Smidge\src\Smidge\Hashing\Crc32.cs,_buildCRC32Table,The following statement contains a magic number: for (int i = 0; i < 256; i++)              {                  crc = (uint)i;                  for (int j = 8; j > 0; j--)                  {                      if ((crc & 1) == 1)                          crc = (crc >> 1) ^ polynomial;                      else                          crc >>= 1;                  }                  table[i] = crc;              }
Magic Number,Smidge.Options,CacheControlOptions,C:\repos\Shazwazza_Smidge\src\Smidge\Options\CacheControlOptions.cs,CacheControlOptions,The following statement contains a magic number: CacheControlMaxAge = 10 * 24;
Magic Number,Smidge.Options,CacheControlOptions,C:\repos\Shazwazza_Smidge\src\Smidge\Options\CacheControlOptions.cs,CacheControlOptions,The following statement contains a magic number: CacheControlMaxAge = 10 * 24;
Missing Default,Smidge.FileProcessors,CssMin,C:\repos\Shazwazza_Smidge\src\Smidge\FileProcessors\CssMinifier.cs,Next,The following switch statement is missing a default case: switch (Get())                                      {                                          case '*':                                              {                                                  if (Peek() == '/')                                                  {                                                      Get();                                                      return ' ';                                                  }                                                  break;                                              }                                          case Eof:                                              {                                                  throw new FormatException("Error: Unterminated comment.\n");                                              }                                      }
Missing Default,Smidge.FileProcessors,JsMin,C:\repos\Shazwazza_Smidge\src\Smidge\FileProcessors\JsMinifier.cs,HandleStringTemplateBlock,The following switch statement is missing a default case: switch (_theA)                      {                          case '}':                              //write the end bracket and read                              Put(_theA);                              _theA = Get();                              //exit!                              return;                          case '$':                              //check for inner string templates (i.e. ${ } )                              if (Peek() == '{')                              {                                  //recurse                                  HandleStringTemplateBlock();                              }                              break;                          case Eof:                              throw new Exception($"Error: JSMIN unterminated string template block: {_theA}\n");                      }
Missing Default,Smidge.FileProcessors,JsMin,C:\repos\Shazwazza_Smidge\src\Smidge\FileProcessors\JsMinifier.cs,HandleRegexLiteral,The following switch statement is missing a default case: switch (Peek())                          {                              case 'i':                              case 'g':                                  //regex modifiers' do we care?                                  break;                              case ' ':                                  //skip the space                                  Put(_theA);                                  Get();                                  _theA = Get();                                  break;                              case '/':                              case '*':                                  throw new Exception($"Error: JSMIN Unterminated set in Regular Expression literal: {_theA}\n");                          }
Missing Default,Smidge.FileProcessors,JsMin,C:\repos\Shazwazza_Smidge\src\Smidge\FileProcessors\JsMinifier.cs,NextCharExcludingComments,The following switch statement is missing a default case: switch (Peek())                      {                          case '/':                              //handle single line comments                              for (;;)                              {                                  c = Get();                                  if (IsLineSeparator(c))                                  {                                      break;                                  }                              }                              break;                          case '*':                              //handle multi-line comments                              Get(); //move to *                                for (;;)                              {                                  var exit = false;                                  c = Get(); //read next                                  switch (c)                                  {                                      case '*':                                          var currPeek = Peek();                                          if (currPeek == '/')                                          {                                              //we're at the end of the comment                                                Get(); //move to /                                                //In one very peculiar circumstance' if the JS value is like:                                              // val(1 /* Calendar */.toString());                                              // if we strip the comment out' JS will produce an error because                                              // 1.toString() is not valid' however 1..toString() is valid and                                               // similarly keeping the comment is valid. So we can check if the next value                                              // is a '.' and if the current value is numeric and perform this operation.                                              // The reason why .. works is because the JS parser cannot do 1.toString() because it                                               // sees the '.' as a decimal                                                if (char.IsDigit((char)_theY))                                              {                                                  currPeek = Peek();                                                  if (currPeek == '.')                                                  {                                                      //we actually want to write another '.'                                                      return '.';                                                  }                                              }                                                c = Get(); //move past the comment                                              exit = true;                                          }                                          break;                                      case Eof:                                          throw new Exception("Error: JSMIN Unterminated comment.\n");                                  }                                    if (exit)                                      break;                              }                              break;                      }
Missing Default,Smidge.FileProcessors,JsMin,C:\repos\Shazwazza_Smidge\src\Smidge\FileProcessors\JsMinifier.cs,NextCharExcludingComments,The following switch statement is missing a default case: switch (c)                                  {                                      case '*':                                          var currPeek = Peek();                                          if (currPeek == '/')                                          {                                              //we're at the end of the comment                                                Get(); //move to /                                                //In one very peculiar circumstance' if the JS value is like:                                              // val(1 /* Calendar */.toString());                                              // if we strip the comment out' JS will produce an error because                                              // 1.toString() is not valid' however 1..toString() is valid and                                               // similarly keeping the comment is valid. So we can check if the next value                                              // is a '.' and if the current value is numeric and perform this operation.                                              // The reason why .. works is because the JS parser cannot do 1.toString() because it                                               // sees the '.' as a decimal                                                if (char.IsDigit((char)_theY))                                              {                                                  currPeek = Peek();                                                  if (currPeek == '.')                                                  {                                                      //we actually want to write another '.'                                                      return '.';                                                  }                                              }                                                c = Get(); //move past the comment                                              exit = true;                                          }                                          break;                                      case Eof:                                          throw new Exception("Error: JSMIN Unterminated comment.\n");                                  }
