Implementation smell,Namespace,Class,File,Method,Description
Magic Number,PollySpike,CircutBreakerTests,C:\repos\jquintus_spikes\ConsoleApps\Polly\CircutBreakerTests.cs,CircuitBreaker,The following statement contains a magic number: var policy = Policy.Handle<DivideByZeroException>()                                 .CircuitBreaker(2' TimeSpan.FromSeconds(5));
Magic Number,PollySpike,CircutBreakerTests,C:\repos\jquintus_spikes\ConsoleApps\Polly\CircutBreakerTests.cs,CircuitBreaker,The following statement contains a magic number: var policy = Policy.Handle<DivideByZeroException>()                                 .CircuitBreaker(2' TimeSpan.FromSeconds(5));
Magic Number,PollySpike,CircutBreakerTests,C:\repos\jquintus_spikes\ConsoleApps\Polly\CircutBreakerTests.cs,CircuitBreaker,The following statement contains a magic number: result = TryExcute(2' policy);
Magic Number,PollySpike,CircutBreakerTests,C:\repos\jquintus_spikes\ConsoleApps\Polly\CircutBreakerTests.cs,CircuitBreaker,The following statement contains a magic number: result = TryExcute(3' policy);
Magic Number,PollySpike,CircutBreakerTests,C:\repos\jquintus_spikes\ConsoleApps\Polly\CircutBreakerTests.cs,TryExcute,The following statement contains a magic number: try              {                  policy.Execute(() =>                  {                      retryCount++;                      Console.WriteLine("{0:H:mm:ss} attempt #{1}"' DateTime.Now' retryCount);                        var undefined = 5 / zero;                  });              }              catch (DivideByZeroException)              {                  return new Tuple<bool' bool>(true' false);              }              catch (BrokenCircuitException)              {                  return new Tuple<bool' bool>(false' true);              }
Magic Number,PollySpike,TimeSpanTests,C:\repos\jquintus_spikes\ConsoleApps\Polly\TimeSpanTests.cs,TimeSpan_RetriesAndThrows,The following statement contains a magic number: try              {                  int zero = 1 - 1;                  Policy.Handle<DivideByZeroException>()                        .WaitAndRetry(new TimeSpan[]                        {                           TimeSpan.FromMilliseconds(1)'                           TimeSpan.FromMilliseconds(1)'                           TimeSpan.FromMilliseconds(1)'                        }' (ex' ts) =>                            {                                retryCount++;                                Console.WriteLine("Retry attempt #{0}"' retryCount);                            })                        .Execute(() => 5 / zero);              }              catch (DivideByZeroException)              {                  Assert.AreEqual(3' retryCount);                  rethrown = true;              }
Magic Number,PollySpike,TimeSpanTests,C:\repos\jquintus_spikes\ConsoleApps\Polly\TimeSpanTests.cs,TimeSpan_RetriesAndThrows,The following statement contains a magic number: try              {                  int zero = 1 - 1;                  Policy.Handle<DivideByZeroException>()                        .WaitAndRetry(new TimeSpan[]                        {                           TimeSpan.FromMilliseconds(1)'                           TimeSpan.FromMilliseconds(1)'                           TimeSpan.FromMilliseconds(1)'                        }' (ex' ts) =>                            {                                retryCount++;                                Console.WriteLine("Retry attempt #{0}"' retryCount);                            })                        .Execute(() => 5 / zero);              }              catch (DivideByZeroException)              {                  Assert.AreEqual(3' retryCount);                  rethrown = true;              }
