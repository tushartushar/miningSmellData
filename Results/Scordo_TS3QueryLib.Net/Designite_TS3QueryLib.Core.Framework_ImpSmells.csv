Implementation smell,Namespace,Class,File,Method,Description
Complex Method,TS3QueryLib.Core,SyncTcpDispatcher,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\SyncTcpDispatcher.cs,Connect,Cyclomatic complexity of the method is 13
Complex Method,TS3QueryLib.Core.Common,DumpExtender,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\Common\IDump.cs,AddDumpString,Cyclomatic complexity of the method is 8
Complex Method,TS3QueryLib.Core.Server,QueryRunner,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\Server\QueryRunner.cs,GetClientList,Cyclomatic complexity of the method is 10
Long Parameter List,TS3QueryLib.Core,AsyncFileTransfer,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\AsyncFileTransfer.cs,DownloadFile,The method has 10 parameters. Parameters: fileTransferKey' size' host' filePort' targetFileName' connectedMethod' errorMethod' progressMethod' finishedMethod' abortFunction
Long Parameter List,TS3QueryLib.Core,AsyncFileTransfer,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\AsyncFileTransfer.cs,DownloadFile,The method has 10 parameters. Parameters: fileTransferKey' size' host' filePort' downloadStream' connectedMethod' errorMethod' progressMethod' finishedMethod' abortFunction
Long Parameter List,TS3QueryLib.Core,AsyncFileTransfer,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\AsyncFileTransfer.cs,UploadFile,The method has 9 parameters. Parameters: fileTransferKey' host' filePort' sourceFileName' connectedMethod' errorMethod' progressMethod' finishedMethod' abortFunction
Long Parameter List,TS3QueryLib.Core,AsyncFileTransfer,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\AsyncFileTransfer.cs,UploadFile,The method has 10 parameters. Parameters: fileTransferKey' host' filePort' numberOfBytesToSkip' sourceFileName' connectedMethod' errorMethod' progressMethod' finishedMethod' abortFunction
Long Parameter List,TS3QueryLib.Core,AsyncFileTransfer,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\AsyncFileTransfer.cs,UploadFile,The method has 11 parameters. Parameters: fileTransferKey' host' filePort' numberOfBytesToSkip' numberOfBytesToSend' sourceFileName' connectedMethod' errorMethod' progressMethod' finishedMethod' abortFunction
Long Parameter List,TS3QueryLib.Core,AsyncFileTransfer,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\AsyncFileTransfer.cs,UploadData,The method has 11 parameters. Parameters: fileTransferKey' host' filePort' numberOfBytesToSkip' numberOfBytesToSend' sourceStream' connectedMethod' errorMethod' progressMethod' finishedMethod' abortFunction
Long Parameter List,TS3QueryLib.Core,AsyncFileTranserHelper,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\AsyncFileTransfer.cs,AsyncFileTranserHelper,The method has 5 parameters. Parameters: host' port' fileTransferKey' size' dataStream
Long Parameter List,TS3QueryLib.Core,AsyncFileTranserHelper,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\AsyncFileTransfer.cs,DownloadFile,The method has 5 parameters. Parameters: connectedMethod' errorMethod' progressMethod' finishedMethod' abortFunction
Long Parameter List,TS3QueryLib.Core,AsyncFileTranserHelper,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\AsyncFileTransfer.cs,UploadFile,The method has 5 parameters. Parameters: connectedMethod' errorMethod' progressMethod' finishedMethod' abortFunction
Long Parameter List,TS3QueryLib.Core,AsyncFileTranserHelper,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\AsyncFileTransfer.cs,HandleFileTransfer,The method has 6 parameters. Parameters: callback' connectedMethod' errorMethod' progressMethod' finishedMethod' abortFunction
Long Parameter List,TS3QueryLib.Core,SyncFileTransfer,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\SyncFileTransfer.cs,UploadFile,The method has 5 parameters. Parameters: fileTransferKey' host' filePort' numberOfBytesToSkip' sourceFileName
Long Parameter List,TS3QueryLib.Core,SyncFileTransfer,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\SyncFileTransfer.cs,UploadFile,The method has 6 parameters. Parameters: fileTransferKey' host' filePort' numberOfBytesToSkip' numberOfBytesToSend' sourceFileName
Long Parameter List,TS3QueryLib.Core,SyncFileTransfer,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\SyncFileTransfer.cs,UploadData,The method has 6 parameters. Parameters: fileTransferKey' host' filePort' numberOfBytesToSkip' numberOfBytesToSend' sourceStream
Long Parameter List,TS3QueryLib.Core,SyncFileTransfer,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\SyncFileTransfer.cs,DownloadFile,The method has 5 parameters. Parameters: fileTransferKey' size' host' filePort' targetFileName
Long Parameter List,TS3QueryLib.Core,SyncFileTransfer,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\SyncFileTransfer.cs,DownloadFile,The method has 5 parameters. Parameters: fileTransferKey' size' host' filePort' downloadStream
Long Parameter List,TS3QueryLib.Core.Client,QueryRunner,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\Client\QueryRunner.cs,GetChannelList,The method has 6 parameters. Parameters: includeAll' includeTopics' includeFlags' includeVoiceInfo' includeLimits' includeIcon
Long Parameter List,TS3QueryLib.Core.Server,QueryRunner,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\Server\QueryRunner.cs,GetChannelList,The method has 5 parameters. Parameters: includeTopics' includeFlags' includeVoiceInfo' includeLimits' includeIcon
Long Parameter List,TS3QueryLib.Core.Server,QueryRunner,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\Server\QueryRunner.cs,GetChannelList,The method has 6 parameters. Parameters: includeAll' includeTopics' includeFlags' includeVoiceInfo' includeLimits' includeIcon
Long Parameter List,TS3QueryLib.Core.Server,QueryRunner,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\Server\QueryRunner.cs,GetClientList,The method has 9 parameters. Parameters: includeUniqueId' includeAwayState' includeVoiceInfo' includeGroupInfo' includeClientInfo' includeTimes' includeIcon' includeCountry' includeIPs
Long Parameter List,TS3QueryLib.Core.Server,QueryRunner,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\Server\QueryRunner.cs,GetClientList,The method has 10 parameters. Parameters: includeAll' includeUniqueId' includeAwayState' includeVoiceInfo' includeGroupInfo' includeClientInfo' includeTimes' includeIcon' includeCountry' includeIPs
Long Parameter List,TS3QueryLib.Core.Server,QueryRunner,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\Server\QueryRunner.cs,AddPrivilegeKey,The method has 5 parameters. Parameters: isChannelGroupIdInsteadOfServerGroupId' groupId' channelId' tokenDescription' identValuePairs
Long Parameter List,TS3QueryLib.Core.Server,QueryRunner,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\Server\QueryRunner.cs,AddPrivilegeKey,The method has 5 parameters. Parameters: isChannelGroupIdInsteadOfServerGroupId' groupId' channelId' tokenDescription' tokenCustomSettings
Long Parameter List,TS3QueryLib.Core.Server,QueryRunner,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\Server\QueryRunner.cs,AddBanRule,The method has 5 parameters. Parameters: ipPattern' namePattern' clientUniqueId' duration' banReason
Long Parameter List,TS3QueryLib.Core.Server,QueryRunner,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\Server\QueryRunner.cs,InitializeFileUpload,The method has 6 parameters. Parameters: clientFileTransferId' name' channelId' size' overwrite' resume
Long Parameter List,TS3QueryLib.Core.Server,QueryRunner,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\Server\QueryRunner.cs,InitializeFileUpload,The method has 7 parameters. Parameters: clientFileTransferId' name' channelId' size' overwrite' resume' channelPassword
Long Parameter List,TS3QueryLib.Core.Server,QueryRunner,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\Server\QueryRunner.cs,InitializeFileDownload,The method has 5 parameters. Parameters: clientFileTransferId' name' channelId' seekPosition' channelPassword
Long Parameter List,TS3QueryLib.Core.Server,QueryRunner,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\Server\QueryRunner.cs,RenameFile,The method has 6 parameters. Parameters: channelId' oldName' newName' targetChannelId' channelPassword' targetChannelPassword
Long Identifier,TS3QueryLib.Core,AwaitableQueryDispatcher,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\AwaitableQueryDispatcher.cs,ReadLoop,The length of the parameter LastServerConnectionHandlerIdText is 33.
Long Identifier,TS3QueryLib.Core.Server,QueryRunner,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\Server\QueryRunner.cs,FindClientDatabaseIds,The length of the parameter useUniqueIdInsteadOfNicknameForSearch is 37.
Long Identifier,TS3QueryLib.Core.Server,QueryRunner,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\Server\QueryRunner.cs,AddPrivilegeKey,The length of the parameter isChannelGroupIdInsteadOfServerGroupId is 38.
Long Identifier,TS3QueryLib.Core.Server,QueryRunner,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\Server\QueryRunner.cs,AddPrivilegeKey,The length of the parameter isChannelGroupIdInsteadOfServerGroupId is 38.
Long Identifier,TS3QueryLib.Core.Server,QueryRunner,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\Server\QueryRunner.cs,AddPrivilegeKey,The length of the parameter isChannelGroupIdInsteadOfServerGroupId is 38.
Long Identifier,TS3QueryLib.Core.Server,QueryRunner,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\Server\QueryRunner.cs,AddPrivilegeKey,The length of the parameter isChannelGroupIdInsteadOfServerGroupId is 38.
Long Identifier,TS3QueryLib.Core.Server,QueryRunner,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\Server\QueryRunner.cs,AddPrivilegeKey,The length of the parameter isChannelGroupIdInsteadOfServerGroupId is 38.
Long Statement,TS3QueryLib.Core,AsyncFileTransfer,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\AsyncFileTransfer.cs,DownloadFile,The length of the statement  "            AsyncFileTranserHelper fileTransferHelper = new AsyncFileTranserHelper(host' filePort' fileTransferKey' size' downloadStream); " is 126.
Long Statement,TS3QueryLib.Core,AsyncFileTransfer,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\AsyncFileTransfer.cs,UploadFile,The length of the statement  "            UploadFile(fileTransferKey' host' filePort' 0' (ulong)fileInfo.Length' sourceFileName' connectedMethod' errorMethod' progressMethod' finishedMethod' abortFunction); " is 164.
Long Statement,TS3QueryLib.Core,AsyncFileTransfer,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\AsyncFileTransfer.cs,UploadFile,The length of the statement  "            UploadFile(fileTransferKey' host' filePort' numberOfBytesToSkip' numberOfBytesToSend' sourceFileName' connectedMethod' errorMethod' progressMethod' finishedMethod' abortFunction); " is 179.
Long Statement,TS3QueryLib.Core,AsyncFileTransfer,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\AsyncFileTransfer.cs,UploadData,The length of the statement  "            AsyncFileTranserHelper fileTransferHelper = new AsyncFileTranserHelper(host' filePort' fileTransferKey' numberOfBytesToSend' sourceStream); " is 139.
Long Statement,TS3QueryLib.Core,AsyncFileTranserHelper,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\AsyncFileTransfer.cs,Download_FinishedReadingData,The length of the statement  "                    OnError(new InvalidOperationException(string.Format("File download failed and was aborted after reading {0} of {1} bytes."' Processed' Size))); " is 143.
Long Statement,TS3QueryLib.Core,AsyncFileTranserHelper,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\AsyncFileTransfer.cs,HandleFileTransfer,The length of the statement  "                Socket = new Socket(AddressFamily.InterNetwork' SocketType.Stream' ProtocolType.Tcp) { ReceiveBufferSize = RECEIVE_BUFFER_SIZE' SendBufferSize = SEND_BUFFER_SIZE }; " is 164.
Long Statement,TS3QueryLib.Core,AsyncFileTranserHelper,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\AsyncFileTransfer.cs,HandleFileTransfer,The length of the statement  "                SocketAsyncEventArgs = new SocketAsyncEventArgs { RemoteEndPoint = ResolveEndpoint(Host' Port)' UserToken = new SocketAsyncEventArgsUserToken { Socket = Socket } }; " is 164.
Long Statement,TS3QueryLib.Core,AsyncFileTranserHelper,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\AsyncFileTransfer.cs,Upload_StartSendingData,The length of the statement  "                    OnError(new InvalidOperationException(string.Format("File upload failed and was aborted after sending {0} of {1} bytes."' Processed' Size))); " is 141.
Long Statement,TS3QueryLib.Core,AsyncFileTranserHelper,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\AsyncFileTransfer.cs,Upload_FinishedSendingData,The length of the statement  "                    OnError(new InvalidOperationException(string.Format("File upload failed and was aborted after sending {0} of {1} bytes."' Processed' Size))); " is 141.
Long Statement,TS3QueryLib.Core,AsyncTcpDispatcher,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\AsyncTcpDispatcher.cs,Connect,The length of the statement  "            Socket = new Socket(AddressFamily.InterNetwork' SocketType.Stream' ProtocolType.Tcp) {ReceiveBufferSize = RECEIVE_BUFFER_SIZE}; " is 127.
Long Statement,TS3QueryLib.Core,AsyncTcpDispatcher,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\AsyncTcpDispatcher.cs,Connect,The length of the statement  "            SocketAsyncEventArgs = new SocketAsyncEventArgs {RemoteEndPoint = RemoteEndPoint' UserToken = new SocketAsyncEventArgsUserToken {Socket = Socket}}; " is 147.
Long Statement,TS3QueryLib.Core,AsyncTcpDispatcher,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\AsyncTcpDispatcher.cs,MessageReceived,The length of the statement  "                string message = Encoding.UTF8.GetString(socketAsyncEventArgs.Buffer' socketAsyncEventArgs.Offset' socketAsyncEventArgs.BytesTransferred); " is 138.
Long Statement,TS3QueryLib.Core,AsyncTcpDispatcher,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\AsyncTcpDispatcher.cs,MessageReceived,The length of the statement  "                            // happens when there is a notification between the body and statusline of a command response --> I think this is a bug of ts3 " is 126.
Long Statement,TS3QueryLib.Core,AsyncTcpDispatcher,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\AsyncTcpDispatcher.cs,NotifyResponseMatch,The length of the statement  "            return text.StartsWith("notify"' StringComparison.OrdinalIgnoreCase) ? Regex.Match(text' pattern' RegexOptions.Singleline) : Match.Empty; " is 137.
Long Statement,TS3QueryLib.Core,AsyncTcpDispatcher,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\AsyncTcpDispatcher.cs,StatusLineMatch,The length of the statement  "            const string pattern = @"((^)|(.*?" + Ts3Util.QUERY_REGEX_LINE_BREAK + "))error id=.+?" + Ts3Util.QUERY_REGEX_LINE_BREAK; " is 121.
Long Statement,TS3QueryLib.Core,AsyncTcpDispatcher,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\AsyncTcpDispatcher.cs,StatusLineMatch,The length of the statement  "            return responseText.IndexOf("error id="' StringComparison.OrdinalIgnoreCase) != -1 ? Regex.Match(responseText' pattern' RegexOptions.Singleline) : Match.Empty; " is 159.
Long Statement,TS3QueryLib.Core,AsyncTcpDispatcher,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\AsyncTcpDispatcher.cs,Send,The length of the statement  "                using (SocketAsyncEventArgs socketAsyncEventArgs = new SocketAsyncEventArgs { RemoteEndPoint = RemoteEndPoint' UserToken = new SocketAsyncEventArgsUserToken { Socket = Socket } }) " is 179.
Long Statement,TS3QueryLib.Core,AsyncTcpDispatcher,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\AsyncTcpDispatcher.cs,OnSocketErrorInternal,The length of the statement  "                SyncContext.PostEx(p => SocketError(((object[])p)[0]' new SocketErrorEventArgs((SocketError)((object[])p)[1]))' new object[] { this' socketError }); " is 148.
Long Statement,TS3QueryLib.Core,AwaitableQueryDispatcher,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\AwaitableQueryDispatcher.cs,ReadLoop,The length of the statement  "                        if (message.StartsWith(LastServerConnectionHandlerIdText' StringComparison.InvariantCultureIgnoreCase) && int.TryParse(message.Substring(LastServerConnectionHandlerIdText.Length).Trim()' out int handlerId)) " is 206.
Long Statement,TS3QueryLib.Core,AwaitableQueryDispatcher,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\AwaitableQueryDispatcher.cs,OnNotificationReceived,The length of the statement  "                SyncContext.PostEx(p => NotificationReceived(((object[])p)[0]' new EventArgs<string>(Convert.ToString(((object[])p)[1])))' new[] { this' notificationText }); " is 157.
Long Statement,TS3QueryLib.Core,SyncFileTransfer,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\SyncFileTransfer.cs,OpenConnection,The length of the statement  "            Socket socket = new Socket(AddressFamily.InterNetwork' SocketType.Stream' ProtocolType.Tcp) { ReceiveBufferSize = 4096 }; " is 121.
Long Statement,TS3QueryLib.Core,SyncFileTransfer,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\SyncFileTransfer.cs,OpenConnection,The length of the statement  "            SocketAsyncEventArgs socketAsyncEventArgs = new SocketAsyncEventArgs { RemoteEndPoint = ResolveEndpoint(host' port)' UserToken = new SocketAsyncEventArgsUserToken { Socket = socket } }; " is 185.
Long Statement,TS3QueryLib.Core,SyncFileTransfer,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\SyncFileTransfer.cs,OpenConnection,The length of the statement  "            EventHandler<SocketAsyncEventArgs> connectCallback = (sender' args) => { socketError = SocketError.Success; connectLock.Set(); }; " is 129.
Long Statement,TS3QueryLib.Core,SyncFileTransfer,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\SyncFileTransfer.cs,SendFileTransferKey,The length of the statement  "            EventHandler<SocketAsyncEventArgs> sendCallback = (sender' args) => { resultError = args.SocketError; sendLock.Set(); }; " is 120.
Long Statement,TS3QueryLib.Core,SyncFileTransfer,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\SyncFileTransfer.cs,ReadFromStreamWriteToSocket,The length of the statement  "                EventHandler<SocketAsyncEventArgs> sendCallback = (sender' args) => { resultError = args.SocketError; bytesTransfered = args.BytesTransferred; sendLock.Set(); }; " is 161.
Long Statement,TS3QueryLib.Core,SyncFileTransfer,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\SyncFileTransfer.cs,ReadFromStreamWriteToSocket,The length of the statement  "                throw new InvalidOperationException(string.Format("File upload failed and was aborted after sending {0} of {1} bytes."' bytesSent' numberOfBytesToSend)); " is 153.
Long Statement,TS3QueryLib.Core,SyncFileTransfer,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\SyncFileTransfer.cs,ReadFromSocketWriteToStream,The length of the statement  "                throw new InvalidOperationException(string.Format("File download failed and was aborted after reading {0} of {1} bytes."' bytesRead' size)); " is 140.
Long Statement,TS3QueryLib.Core,SyncTcpDispatcher,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\SyncTcpDispatcher.cs,Connect,The length of the statement  "            Socket = new Socket(AddressFamily.InterNetwork' SocketType.Stream' ProtocolType.Tcp) { ReceiveBufferSize = RECEIVE_BUFFER_SIZE }; " is 129.
Long Statement,TS3QueryLib.Core,SyncTcpDispatcher,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\SyncTcpDispatcher.cs,Connect,The length of the statement  "            SocketAsyncEventArgs = new SocketAsyncEventArgs { RemoteEndPoint = RemoteEndPoint' UserToken = new SocketAsyncEventArgsUserToken { Socket = Socket } }; " is 151.
Long Statement,TS3QueryLib.Core,SyncTcpDispatcher,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\SyncTcpDispatcher.cs,Connect,The length of the statement  "            EventHandler<SocketAsyncEventArgs> connectCallback = (sender' args) => { result = args.SocketError; connectLock.Set(); }; " is 121.
Long Statement,TS3QueryLib.Core,SyncTcpDispatcher,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\SyncTcpDispatcher.cs,HandleClientQueryGreeting,The length of the statement  "                if (!PATTERN_STATIC_PART.StartsWith(greeting' StringComparison.InvariantCultureIgnoreCase) && !greeting.StartsWith(PATTERN_STATIC_PART' StringComparison.InvariantCultureIgnoreCase)) " is 181.
Long Statement,TS3QueryLib.Core,SyncTcpDispatcher,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\SyncTcpDispatcher.cs,Send,The length of the statement  "                using (SocketAsyncEventArgs socketAsyncEventArgs = new SocketAsyncEventArgs { RemoteEndPoint = RemoteEndPoint' UserToken = new SocketAsyncEventArgsUserToken { Socket = Socket } }) " is 179.
Long Statement,TS3QueryLib.Core,SyncTcpDispatcher,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\SyncTcpDispatcher.cs,Send,The length of the statement  "                    EventHandler<SocketAsyncEventArgs> sendCallback = (sender' args) => { resultError = args.SocketError; sendLock.Set(); }; " is 120.
Long Statement,TS3QueryLib.Core,TcpDispatcherBase,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\TcpDispatcherBase.cs,OnNotificationReceived,The length of the statement  "                SyncContext.PostEx(p => NotificationReceived(((object[])p)[0]' new EventArgs<string>(Convert.ToString(((object[])p)[1])))' new[] { this' notificationText }); " is 157.
Long Statement,TS3QueryLib.Core,TcpDispatcherBase,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\TcpDispatcherBase.cs,OnBanDetected,The length of the statement  "                SyncContext.PostEx(p => BanDetected(((object[])p)[0]' new EventArgs<SimpleResponse>((SimpleResponse)((object[])p)[1]))' new [] { this' banResponse }); " is 150.
Long Statement,TS3QueryLib.Core.CommandHandling,CommandParameterGroup,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\CommandHandling\CommandParameterGroup.cs,ConvertValue,The length of the statement  "                    throw new InvalidCastException(string.Format("Can not cast null value of parameter '{0}' to target type '{1}'."' parameterName' targetType)); " is 141.
Long Statement,TS3QueryLib.Core.CommandHandling,CommandParameterGroup,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\CommandHandling\CommandParameterGroup.cs,ConvertValue,The length of the statement  "                throw new InvalidCastException(string.Format("Could not cast parameter with name '{0}' and value '{1}' to target type of '{2}'."' parameterName' parameterValue' targetType)' ex); " is 178.
Long Statement,TS3QueryLib.Core.CommandHandling,CommandParameterGroupList,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\CommandHandling\CommandParameterGroupList.cs,AddParameter,The length of the statement  "                throw new ArgumentOutOfRangeException(string.Format("Can not add parameter '{0}' with value '{1}' to group with index '{2}'' because the index is '{3}' too big."' name' value' groupIndex' Count-groupIndex)); " is 207.
Long Statement,TS3QueryLib.Core.CommandHandling,CommandParameterGroupList,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\CommandHandling\CommandParameterGroupList.cs,Parse,The length of the statement  "                        group.Add(new CommandParameter(parameterText.Substring(0' equalSignIndex)' Ts3Util.DecodeString(parameterText.Substring(equalSignIndex+1)))); " is 141.
Long Statement,TS3QueryLib.Core.Common.Notification,NotificationsBase,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\Common\Notification\NotificationsBase.cs,QueryRunner_UnknownNotificationReceived,The length of the statement  "            if (NotificationHandlers.TryGetValue(notificationName' out handler) || NotificationHandlers.TryGetValue("*"' out handler)) " is 122.
Long Statement,TS3QueryLib.Core.Common,DumpExtender,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\Common\IDump.cs,AddDumpString,The length of the statement  "                    output.AppendFormat("{0}[{1}]: {2}{3}"' string.Empty.PadLeft(depth' '\t')' counter' propertyString' Environment.NewLine); " is 121.
Long Statement,TS3QueryLib.Core.Common,DumpExtender,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\Common\IDump.cs,AddDumpString,The length of the statement  "                if (propertyValue != null && propertyValue is IEnumerable && !excludedEnumerableTypes.Any(t => t == propertyValue.GetType())) " is 125.
Long Statement,TS3QueryLib.Core.Common,DumpExtender,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\Common\IDump.cs,AddDumpString,The length of the statement  "                    output.AppendFormat("{0}{1}: {2}{3}"' string.Empty.PadLeft(depth' '\t')' property.Name' propertyString' Environment.NewLine); " is 125.
Long Statement,TS3QueryLib.Core.Common,QueryRunnerBase,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\Common\QueryRunnerBase.cs,SendCommand,The length of the statement  "            return SendCommandValidationPredicate?.Invoke(command' this) == false ? @"error id=256 msg=command\snot\ssent" : Dispatcher.Dispatch(command); " is 142.
Long Statement,TS3QueryLib.Core.Server,QueryRunner,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\Server\QueryRunner.cs,GetServerConnectionInfo,The length of the statement  "            return ResponseBase<ConnectionInfoResponse>.Parse(SendCommand(CommandName.ServerRequestConnectionInfo.CreateCommand())); " is 120.
Long Statement,TS3QueryLib.Core.Server,QueryRunner,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\Server\QueryRunner.cs,GetClientList,The length of the statement  "            return GetClientList(false' includeUniqueId' includeAwayState' includeVoiceInfo' includeGroupInfo' includeClientInfo' includeTimes' includeIcon' includeCountry' includeIPs); " is 173.
Long Statement,TS3QueryLib.Core.Server,QueryRunner,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\Server\QueryRunner.cs,GetPermissionList,The length of the statement  "            return ListResponse<PermissionDetails>.Parse(SendCommand(CommandName.PermissionList.CreateCommand())' PermissionDetails.Parse); " is 127.
Long Statement,TS3QueryLib.Core.Server,QueryRunner,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\Server\QueryRunner.cs,AddPrivilegeKey,The length of the statement  "            string tokenCustomSettings = string.Join("|"' identValuePairs.Select(ivp => string.Format("ident={0} value={1}"' ivp.Key' ivp.Value)).ToArray()); " is 145.
Long Statement,TS3QueryLib.Core.Server,QueryRunner,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\Server\QueryRunner.cs,AddPrivilegeKey,The length of the statement  "            return AddPrivilegeKey(isChannelGroupIdInsteadOfServerGroupId' groupId' channelId' tokenDescription' tokenCustomSettings); " is 122.
Long Statement,TS3QueryLib.Core.Server,QueryRunner,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\Server\QueryRunner.cs,GetFileTransferList,The length of the statement  "            return ListResponse<FileTransferListEntry>.Parse(SendCommand(CommandName.FtList.CreateCommand())' FileTransferListEntry.Parse); " is 127.
Long Statement,TS3QueryLib.Core.Server,QueryUtils,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\Server\QueryUtils.cs,AddChildren,The length of the statement  "                ChannelTreeItem channelTreeItem = new ChannelTreeItem(channel' parentChannelTreeItem == null ? null : parentChannelTreeItem.ParentChannel); " is 139.
Long Statement,TS3QueryLib.Core.Common.Responses,ListResponse<T>,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\Common\Responses\ListResponse.cs,FillFrom,The length of the statement  "                Values = list.Select(cpg => cpg.GetParameterValue(additionalStates[0].ToString()).ChangeTypeInvariant(default(T))).ToList(); " is 124.
Long Statement,TS3QueryLib.Core.Server.Entities,ClientDbEntry,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\Server\Entities\ClientDBEntry.cs,Parse,The length of the statement  "                LastConnected = new DateTime(1970' 1' 1).AddSeconds(currentParameterGroup.GetParameterValue<ulong>("client_lastconnected"))' " is 124.
Long Statement,TS3QueryLib.Core.Server.Entities,ClientListEntry,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\Server\Entities\ClientListEntry.cs,Parse,The length of the statement  "                ClientLastConnected = lastConnected.HasValue ? (DateTime?)new DateTime(1970' 1' 1).AddSeconds(lastConnected.Value) : null' " is 122.
Long Statement,TS3QueryLib.Core.Server.Entities,LogEntry,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\Server\Entities\LogEntry.cs,Parse,The length of the statement  "            DateTime.TryParse(message.Split('|')[0]' System.Globalization.CultureInfo.CurrentCulture' System.Globalization.DateTimeStyles.None' out timeStamp); " is 147.
Long Statement,TS3QueryLib.Core.Server.Entities,LogEntry,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\Server\Entities\LogEntry.cs,Parse,The length of the statement  "            if (message.Split('|').Length >= 2 && Enum.GetNames(typeof(LogLevel)).Contains(message.Split('|')[1].Trim()' StringComparer.CurrentCultureIgnoreCase)) " is 150.
Long Statement,TS3QueryLib.Core.Server.Entities,Permission,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\Server\Entities\Permission.cs,Parse,The length of the statement  "                Id = currentParameterGroup.GetParameter("permid") == null ? 0 : currentParameterGroup.GetParameterValue<uint>("permid")' " is 120.
Long Statement,TS3QueryLib.Core.Server.Entities,VirtualServerModification,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\Server\Entities\VirtualServerModification.cs,AddToCommand,The length of the statement  "            AddToCommand(command' "virtualserver_min_clients_in_channel_before_forced_silence"' MinClientsInChannelBeforeForcedSilence); " is 124.
Long Statement,TS3QueryLib.Core.Server.Notification,Notifications,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\Server\Notification\Notifications.cs,HandleClientLeave,The length of the statement  "                        ThreadPool.QueueUserWorkItem(x => ClientConnectionLost(this' new ClientConnectionLostEventArgs(parameterGroupList))' null); " is 123.
Long Statement,TS3QueryLib.Core.Server.Notification,Notifications,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\Server\Notification\Notifications.cs,HandleMessages,The length of the statement  "                        ThreadPool.QueueUserWorkItem(x => ChannelMessageReceived(this' new MessageReceivedEventArgs(parameterGroupList))' null); " is 120.
Long Statement,TS3QueryLib.Core.Server.Notification,Notifications,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\Server\Notification\Notifications.cs,HandleClientMove,The length of the statement  "                    ThreadPool.QueueUserWorkItem(x => ClientMovedByTemporaryChannelCreate(this' new ClientMovedEventArgs(parameterGroupList))' null); " is 129.
Long Statement,TS3QueryLib.Core.Server.Notification,Notifications,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\Server\Notification\Notifications.cs,HandleChannelDescriptionChanged,The length of the statement  "                ThreadPool.QueueUserWorkItem(x => ChannelDescriptionChanged(this' new ChannelDescriptionChangedEventArgs(parameterGroupList))' null); " is 133.
Long Statement,TS3QueryLib.Core.Server.Notification,Notifications,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\Server\Notification\Notifications.cs,HandleChannelPasswordChanged,The length of the statement  "                ThreadPool.QueueUserWorkItem(x => ChannelPasswordChanged(this' new ChannelPasswordChangedEventArgs(parameterGroupList))' null); " is 127.
Long Statement,TS3QueryLib.Core.Server.Notification,Notifications,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\Server\Notification\Notifications.cs,HandleUnknownNotificationReceived,The length of the statement  "                ThreadPool.QueueUserWorkItem(x => UnknownNotificationReceived(this' new UnknownNotificationEventArgs(parameterGroupList.First()?.First()?.Name' parameterGroupList))' null); " is 172.
Long Statement,TS3QueryLib.Core.Server.Responses,ServerInfoResponse,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\Server\Responses\ServerInfoResponse.cs,FillFrom,The length of the statement  "            MinClientsBeforeForcedSilence = list.GetParameterValue<int>("virtualserver_min_clients_in_channel_before_forced_silence"); " is 122.
Long Statement,TS3QueryLib.Core.Server.Responses,InstanceInfoResponse,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\Server\Responses\InstanceInfoResponse.cs,FillFrom,The length of the statement  "            ServerQueryFloodRatingDuration = TimeSpan.FromSeconds(list.GetParameterValue<double>("serverinstance_serverquery_flood_time")); " is 127.
Long Statement,System,ExtensionMethods,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\TypeExtensions\ExtensionMethods.cs,ChangeType,The length of the statement  "            bool targetTypeIsNullableValueTyoe = targetType.IsGenericType && targetType.GetGenericTypeDefinition() == typeof(Nullable<>); " is 125.
Complex Conditional,TS3QueryLib.Core.Common.Responses,ListResponse<T>,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\Common\Responses\ListResponse.cs,FillFrom,The conditional expression  "list.Count == 0 || ((additionalStates == null || additionalStates.Length == 0) && parseMethod == null)"  is complex.
Virtual Method Call from Constructor,TS3QueryLib.Core.Common.Notification,NotificationsBase,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\Common\Notification\NotificationsBase.cs,NotificationsBase,The constructor "NotificationsBase" calls a virtual method "GetNotificationHandlers".
Empty Catch Block,TS3QueryLib.Core,AsyncTcpDispatcher,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\AsyncTcpDispatcher.cs,Disconnect,The method has an empty catch block.
Empty Catch Block,TS3QueryLib.Core,SyncTcpDispatcher,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\SyncTcpDispatcher.cs,Disconnect,The method has an empty catch block.
Magic Number,TS3QueryLib.Core,AsyncTcpDispatcher,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\AsyncTcpDispatcher.cs,DispatchInternal,The following statement contains a magic number: lock (_dispatchLockObject)              {                  Send(string.Concat(commandText' "\n"));                    do                  {                      if (_lastCommandResponse != null)                      {                          string lastCommandResponse = _lastCommandResponse;                          ModifyLastCommandResponse(null);                            return lastCommandResponse;                      }                        Thread.Sleep(10);                  }                  while (IsConnected);                    return null;              }
Magic Number,TS3QueryLib.Core,AwaitableQueryDispatcher,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\AwaitableQueryDispatcher.cs,AwaitableQueryDispatcher,The following statement contains a magic number: Port = port ?? 10011;
Magic Number,TS3QueryLib.Core,AwaitableQueryDispatcher,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\AwaitableQueryDispatcher.cs,SendAsync,The following statement contains a magic number: try              {                  await SendAsync(ClientWriter' messageToSend);                    do                  {                      if (MessageResponses.TryDequeue(out var result))                          return result;                        await Task.Delay(TimeSpan.FromMilliseconds(10)).ConfigureAwait(false);                  } while (Connected);                    return null;              }              finally              {                  SendLock.Release();              }
Magic Number,TS3QueryLib.Core,FileTransferBase,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\FileTransferBase.cs,Validate,The following statement contains a magic number: if (fileTransferKey.Length != 32)                  throw new ArgumentOutOfRangeException("fileTransferKey"' "fileTransferKey must have a length of 32 characters");
Magic Number,TS3QueryLib.Core,SyncFileTransfer,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\SyncFileTransfer.cs,OpenConnection,The following statement contains a magic number: Socket socket = new Socket(AddressFamily.InterNetwork' SocketType.Stream' ProtocolType.Tcp) { ReceiveBufferSize = 4096 };
Magic Number,TS3QueryLib.Core,SyncFileTransfer,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\SyncFileTransfer.cs,ReadFromStreamWriteToSocket,The following statement contains a magic number: const int BUFFER_SIZE = 4096;
Magic Number,TS3QueryLib.Core,SyncFileTransfer,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\SyncFileTransfer.cs,ReadFromSocketWriteToStream,The following statement contains a magic number: do              {                  byte[] sizeBuffer = new byte[4096];                  socketAsyncEventArgs.SetBuffer(sizeBuffer' 0' sizeBuffer.Length);                  SocketError lastError = SocketError.Success;                    ManualResetEvent receiveLock = new ManualResetEvent(false);                  int bytesTransfered = 0;                  EventHandler<SocketAsyncEventArgs> receiveCallback = (sender' args) =>                  {                      if (args.SocketError != SocketError.Success)                      {                          lastError = args.SocketError;                          receiveLock.Set();                          return;                      }                        bytesTransfered = socketAsyncEventArgs.BytesTransferred;                      if (bytesTransfered != 0)                          downloadStream.Write(socketAsyncEventArgs.Buffer' socketAsyncEventArgs.Offset' socketAsyncEventArgs.BytesTransferred);                        receiveLock.Set();                  };                    userToken.Socket.InvokeAsyncMethod(userToken.Socket.ReceiveAsync' receiveCallback' socketAsyncEventArgs);                  receiveLock.WaitOne();                  socketAsyncEventArgs.Completed -= receiveCallback;                    if (lastError != SocketError.Success)                      throw new SocketException((int)lastError);                    if (bytesTransfered == 0)                      break;                    bytesRead += (ulong)bytesTransfered;              }              while (bytesRead < size);
Magic Number,TS3QueryLib.Core,TcpDispatcherBase,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\TcpDispatcherBase.cs,TcpDispatcherBase,The following statement contains a magic number: Port = port ?? 10011;
Magic Number,TS3QueryLib.Core.Server,QueryRunner,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\Server\QueryRunner.cs,GetLogEntries,The following statement contains a magic number: lines = Math.Max(Math.Min(lines' (ushort) 100)' (ushort) 1);
Magic Number,TS3QueryLib.Core.Server,QueryRunner,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\Server\QueryRunner.cs,KickClients,The following statement contains a magic number: if (!reasonMessage.IsNullOrTrimmedEmpty())              {                  if (reasonMessage.Length > 40)                      reasonMessage = reasonMessage.Substring(0' 40);                    command.AddParameter("reasonmsg"' reasonMessage);              }
Magic Number,TS3QueryLib.Core.Server,QueryRunner,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\Server\QueryRunner.cs,KickClients,The following statement contains a magic number: if (!reasonMessage.IsNullOrTrimmedEmpty())              {                  if (reasonMessage.Length > 40)                      reasonMessage = reasonMessage.Substring(0' 40);                    command.AddParameter("reasonmsg"' reasonMessage);              }
Magic Number,TS3QueryLib.Core.Server,QueryUtils,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\Server\QueryUtils.cs,SortChannels,The following statement contains a magic number: if (channels.Count < 2)                  return;
Magic Number,TS3QueryLib.Core.Common.Responses,ResponseBase<T>,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\Common\Responses\ResponseBase.cs,DetermineErrorDetails,The following statement contains a magic number: IsBanned = ErrorId == 3329 || ErrorId == 3331;
Magic Number,TS3QueryLib.Core.Common.Responses,ResponseBase<T>,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\Common\Responses\ResponseBase.cs,DetermineErrorDetails,The following statement contains a magic number: IsBanned = ErrorId == 3329 || ErrorId == 3331;
Magic Number,TS3QueryLib.Core.Common.Responses,ResponseBase<T>,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\Common\Responses\ResponseBase.cs,SplitResponse,The following statement contains a magic number: statusLine = index == -1 ? response : response.Substring(index + 2).Trim();
Magic Number,TS3QueryLib.Core.Server.Entities,BanListEntry,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\Server\Entities\BanListEntry.cs,Parse,The following statement contains a magic number: return new BanListEntry              {                  Id = currentParameterGroup.GetParameterValue<uint>("banid")'                  Ip = currentParameterGroup.GetParameterValue("ip")'                  Created = new DateTime(1970' 1' 1).AddSeconds(currentParameterGroup.GetParameterValue<ulong>("created"))'                  InvokerNickname = currentParameterGroup.GetParameterValue("invokername")'                  InvokerClientDatabaseId = currentParameterGroup.GetParameterValue<uint>("invokercldbid")'                  InvokerUniqueId = currentParameterGroup.GetParameterValue("invokeruid")'                  Reason = currentParameterGroup.GetParameterValue("reason")'                  Enforcements = currentParameterGroup.GetParameterValue<uint>("enforcements")'              };
Magic Number,TS3QueryLib.Core.Server.Entities,ClientDbEntry,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\Server\Entities\ClientDBEntry.cs,Parse,The following statement contains a magic number: return new ClientDbEntry              {                  DatabaseId = currentParameterGroup.GetParameterValue<uint>("cldbid")'                  NickName = currentParameterGroup.GetParameterValue("client_nickname")'                  UniqueId = currentParameterGroup.GetParameterValue("client_unique_identifier")'                  Description = currentParameterGroup.GetParameterValue("client_description")'                  LastConnected = new DateTime(1970' 1' 1).AddSeconds(currentParameterGroup.GetParameterValue<ulong>("client_lastconnected"))'                  TotalConnections = currentParameterGroup.GetParameterValue<uint>("client_totalconnections")'                  LastIP = currentParameterGroup.GetParameterValue("client_lastip")'              };
Magic Number,TS3QueryLib.Core.Server.Entities,ClientListEntry,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\Server\Entities\ClientListEntry.cs,Parse,The following statement contains a magic number: return new ClientListEntry              {                  ClientId = currentParameterGroup.GetParameterValue<uint>("clid")'                  ChannelId = currentParameterGroup.GetParameterValue<uint>("cid")'                  ClientDatabaseId = currentParameterGroup.GetParameterValue<uint>("client_database_id")'                  Nickname = currentParameterGroup.GetParameterValue("client_nickname")'                  ClientType = currentParameterGroup.GetParameterValue<ushort>("client_type")'                  ClientUniqueId = currentParameterGroup.GetParameterValue("client_unique_identifier")'                  IsClientAway = currentParameterGroup.GetParameterValue("client_away").ToNullableBool()'                  ClientAwayMessage = currentParameterGroup.GetParameterValue("client_away_message")'                  ServerGroups = currentParameterGroup.GetParameterValue("client_servergroups").ToIdList()'                  ClientChannelGroupId = currentParameterGroup.GetParameterValue<uint?>("client_channel_group_id")'                  IsClientTalking = currentParameterGroup.GetParameterValue("client_flag_talking").ToNullableBool()'                  IsClientTalker = currentParameterGroup.GetParameterValue("client_is_talker").ToNullableBool()'                  IsClientInputMuted = currentParameterGroup.GetParameterValue("client_input_muted").ToNullableBool()'                  IsClientOutputMuted = currentParameterGroup.GetParameterValue("client_output_muted").ToNullableBool()'                  HasClientInputHardware = currentParameterGroup.GetParameterValue("client_input_hardware").ToNullableBool()'                  HasClientOutputHardware = currentParameterGroup.GetParameterValue("client_output_hardware").ToNullableBool()'                  IsClientInputDeactivated = currentParameterGroup.GetParameterValue("client_input_deactivated").ToNullableBool()'                  ClientTalkPower = currentParameterGroup.GetParameterValue<uint?>("client_talk_power")'                  ClientVersion = currentParameterGroup.GetParameterValue("client_version")'                  ClientPlatform = currentParameterGroup.GetParameterValue("client_platform")'                  ClientIdleDuration = idleSeconds.HasValue ? (TimeSpan?)TimeSpan.FromMilliseconds(idleSeconds.Value) : null'                  IsPrioritySpeaker = currentParameterGroup.GetParameterValue("client_is_priority_speaker").ToNullableBool()'                  IsClientRecording = currentParameterGroup.GetParameterValue("client_is_recording").ToNullableBool()'                  ClientIconId = currentParameterGroup.GetParameterValue<uint?>("client_icon_id")'                  IsChannelCommander = currentParameterGroup.GetParameterValue("CLIENT_IS_CHANNEL_COMMANDER").ToNullableBool()'                  ClientCountry = currentParameterGroup.GetParameterValue("client_country")'                  ClientCreated = created.HasValue ? (DateTime?) new DateTime(1970' 1' 1).AddSeconds(created.Value) : null'                  ClientLastConnected = lastConnected.HasValue ? (DateTime?)new DateTime(1970' 1' 1).AddSeconds(lastConnected.Value) : null'                  ClientIP = currentParameterGroup.GetParameterValue("connection_client_ip")'              };
Magic Number,TS3QueryLib.Core.Server.Entities,ClientListEntry,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\Server\Entities\ClientListEntry.cs,Parse,The following statement contains a magic number: return new ClientListEntry              {                  ClientId = currentParameterGroup.GetParameterValue<uint>("clid")'                  ChannelId = currentParameterGroup.GetParameterValue<uint>("cid")'                  ClientDatabaseId = currentParameterGroup.GetParameterValue<uint>("client_database_id")'                  Nickname = currentParameterGroup.GetParameterValue("client_nickname")'                  ClientType = currentParameterGroup.GetParameterValue<ushort>("client_type")'                  ClientUniqueId = currentParameterGroup.GetParameterValue("client_unique_identifier")'                  IsClientAway = currentParameterGroup.GetParameterValue("client_away").ToNullableBool()'                  ClientAwayMessage = currentParameterGroup.GetParameterValue("client_away_message")'                  ServerGroups = currentParameterGroup.GetParameterValue("client_servergroups").ToIdList()'                  ClientChannelGroupId = currentParameterGroup.GetParameterValue<uint?>("client_channel_group_id")'                  IsClientTalking = currentParameterGroup.GetParameterValue("client_flag_talking").ToNullableBool()'                  IsClientTalker = currentParameterGroup.GetParameterValue("client_is_talker").ToNullableBool()'                  IsClientInputMuted = currentParameterGroup.GetParameterValue("client_input_muted").ToNullableBool()'                  IsClientOutputMuted = currentParameterGroup.GetParameterValue("client_output_muted").ToNullableBool()'                  HasClientInputHardware = currentParameterGroup.GetParameterValue("client_input_hardware").ToNullableBool()'                  HasClientOutputHardware = currentParameterGroup.GetParameterValue("client_output_hardware").ToNullableBool()'                  IsClientInputDeactivated = currentParameterGroup.GetParameterValue("client_input_deactivated").ToNullableBool()'                  ClientTalkPower = currentParameterGroup.GetParameterValue<uint?>("client_talk_power")'                  ClientVersion = currentParameterGroup.GetParameterValue("client_version")'                  ClientPlatform = currentParameterGroup.GetParameterValue("client_platform")'                  ClientIdleDuration = idleSeconds.HasValue ? (TimeSpan?)TimeSpan.FromMilliseconds(idleSeconds.Value) : null'                  IsPrioritySpeaker = currentParameterGroup.GetParameterValue("client_is_priority_speaker").ToNullableBool()'                  IsClientRecording = currentParameterGroup.GetParameterValue("client_is_recording").ToNullableBool()'                  ClientIconId = currentParameterGroup.GetParameterValue<uint?>("client_icon_id")'                  IsChannelCommander = currentParameterGroup.GetParameterValue("CLIENT_IS_CHANNEL_COMMANDER").ToNullableBool()'                  ClientCountry = currentParameterGroup.GetParameterValue("client_country")'                  ClientCreated = created.HasValue ? (DateTime?) new DateTime(1970' 1' 1).AddSeconds(created.Value) : null'                  ClientLastConnected = lastConnected.HasValue ? (DateTime?)new DateTime(1970' 1' 1).AddSeconds(lastConnected.Value) : null'                  ClientIP = currentParameterGroup.GetParameterValue("connection_client_ip")'              };
Magic Number,TS3QueryLib.Core.Server.Entities,ComplainListEntry,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\Server\Entities\ComplainListEntry.cs,Parse,The following statement contains a magic number: return new ComplainListEntry              {                  TargetClientDatabaseId = currentParameterGroup.GetParameterValue<uint>("tcldbid")'                  TargetName = currentParameterGroup.GetParameterValue("tname")'                  SourceClientDatabaseId = currentParameterGroup.GetParameterValue<uint>("fcldbid")'                  SourceName = currentParameterGroup.GetParameterValue("fname")'                  Message = currentParameterGroup.GetParameterValue("message")'                  Created = new DateTime(1970' 1' 1).AddSeconds(currentParameterGroup.GetParameterValue<ulong>("timestamp"))'              };
Magic Number,TS3QueryLib.Core.Server.Entities,FileTransferFileEntry,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\Server\Entities\FileTransferFileEntry.cs,Parse,The following statement contains a magic number: return new FileTransferFileEntry              {                  ChannelId = firstParameterGroup.GetParameterValue<uint>("cid")'                  Name = currentParameterGroup.GetParameterValue("name")'                  Size = currentParameterGroup.GetParameterValue<ulong>("size")'                  Created = new DateTime(1970' 1' 1).AddSeconds(currentParameterGroup.GetParameterValue<ulong>("datetime"))'                  Type = currentParameterGroup.GetParameterValue<uint?>("type")'              };
Magic Number,TS3QueryLib.Core.Server.Entities,LogEntry,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\Server\Entities\LogEntry.cs,Parse,The following statement contains a magic number: if (message.Split('|').Length >= 2 && Enum.GetNames(typeof(LogLevel)).Contains(message.Split('|')[1].Trim()' StringComparer.CurrentCultureIgnoreCase))              {                  logLevel = (LogLevel)Enum.Parse(typeof(LogLevel)' message.Split('|')[1].Trim()' true);              }
Magic Number,TS3QueryLib.Core.Server.Entities,MessageEntry,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\Server\Entities\MessageEntry.cs,Parse,The following statement contains a magic number: return new MessageEntry              {                  MessageId = parameterGroup.GetParameterValue<uint>("msgid")'                  SenderUniqueId = parameterGroup.GetParameterValue("cluid")'                  Subject = parameterGroup.GetParameterValue("subject")'                  Created = new DateTime(1970' 1' 1).AddSeconds(parameterGroup.GetParameterValue<ulong>("timestamp"))'                  WasRead = parameterGroup.GetParameterValue("flag_read").ToBool()'              };
Magic Number,TS3QueryLib.Core.Server.Responses,ClientInfoBaseResponse<T>,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\Server\Responses\ClientInfoBaseResponse.cs,FillFrom,The following statement contains a magic number: Created = new DateTime(1970' 1' 1).AddSeconds(list.GetParameterValue<ulong>("client_created"));
Magic Number,TS3QueryLib.Core.Server.Responses,ClientInfoBaseResponse<T>,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\Server\Responses\ClientInfoBaseResponse.cs,FillFrom,The following statement contains a magic number: LastConnected = new DateTime(1970' 1' 1).AddSeconds(list.GetParameterValue<ulong>("client_lastconnected"));
Magic Number,TS3QueryLib.Core.Server.Responses,GetMessageResponse,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\Server\Responses\GetMessageResponse.cs,FillFrom,The following statement contains a magic number: Created = new DateTime(1970' 1' 1).AddSeconds(list.GetParameterValue<ulong>("timestamp"));
Magic Number,TS3QueryLib.Core.Server.Responses,ServerInfoResponse,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\Server\Responses\ServerInfoResponse.cs,FillFrom,The following statement contains a magic number: DateCreatedUtc = new DateTime(1970' 1' 1).AddSeconds(list.GetParameterValue<ulong>("virtualserver_created"));
Magic Number,TS3QueryLib.Core.Server.Responses,HostInfoResponse,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\Server\Responses\HostInfoResponse.cs,FillFrom,The following statement contains a magic number: UtcTimeStamp = new DateTime(1970' 1' 1).AddSeconds(list.GetParameterValue<ulong>("HOST_TIMESTAMP_UTC"));
Missing Default,TS3QueryLib.Core.Common.Entities,SpacerInfo,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\Common\Entities\SpacerInfo.cs,Parse,The following switch statement is missing a default case: switch (alignmentChar)              {                  case 'c': alignment = SpacerAlignment.Center;                      break;                  case 'r': alignment = SpacerAlignment.Right;                      break;                  case 'l': alignment = SpacerAlignment.Left;                      break;              }
Missing Default,TS3QueryLib.Core.Server.Notification,Notifications,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\Server\Notification\Notifications.cs,HandleClientLeave,The following switch statement is missing a default case: switch ((ClientLeftReason)reasonId.Value)              {                  case ClientLeftReason.Kicked:                      if (ClientKick != null)                          ThreadPool.QueueUserWorkItem(x => ClientKick(this' new ClientKickEventArgs(parameterGroupList))' null);                      break;                  case ClientLeftReason.Banned:                      if (ClientBan != null)                          ThreadPool.QueueUserWorkItem(x => ClientBan(this' new ClientBanEventArgs(parameterGroupList))' null);                      break;                  case ClientLeftReason.ConnectionLost:                      if (ClientConnectionLost != null)                          ThreadPool.QueueUserWorkItem(x => ClientConnectionLost(this' new ClientConnectionLostEventArgs(parameterGroupList))' null);                      break;                  case ClientLeftReason.Disconnect:                      if (ClientDisconnect != null)                          ThreadPool.QueueUserWorkItem(x => ClientDisconnect(this' new ClientDisconnectEventArgs(parameterGroupList))' null);                      break;              }
Missing Default,TS3QueryLib.Core.Server.Notification,Notifications,C:\repos\Scordo_TS3QueryLib.Net\TS3QueryLib.Core.Framework\Server\Notification\Notifications.cs,HandleMessages,The following switch statement is missing a default case: switch (messageTarget)              {                  case MessageTarget.Client:                      if (ClientMessageReceived != null)                          ThreadPool.QueueUserWorkItem(x => ClientMessageReceived(this' new MessageReceivedEventArgs(parameterGroupList))' null);                      break;                  case MessageTarget.Channel:                      if (ChannelMessageReceived != null)                          ThreadPool.QueueUserWorkItem(x => ChannelMessageReceived(this' new MessageReceivedEventArgs(parameterGroupList))' null);                      break;                  case MessageTarget.Server:                      if (ServerMessageReceived != null)                          ThreadPool.QueueUserWorkItem(x => ServerMessageReceived(this' new MessageReceivedEventArgs(parameterGroupList))' null);                      break;              }
