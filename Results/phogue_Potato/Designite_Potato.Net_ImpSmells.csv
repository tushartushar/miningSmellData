Implementation smell,Namespace,Class,File,Method,Description
Long Statement,Potato.Net.Protocols.CommandServer,CommandServerPacketSerializer,C:\repos\phogue_Potato\src\Potato.Net\Protocols\CommandServer\CommandServerPacketSerializer.cs,SerializeHeader,The length of the statement  "            builder.AppendFormat("HTTP/{0}.{1} {2} {3}\r\n"' packet.ProtocolVersion.Major' packet.ProtocolVersion.Minor' (int)packet.StatusCode' packet.StatusCode); " is 152.
Long Statement,Potato.Net.Protocols.CommandServer,CommandServerPacketSerializer,C:\repos\phogue_Potato\src\Potato.Net\Protocols\CommandServer\CommandServerPacketSerializer.cs,Deserialize,The length of the statement  "            packet.Query = CommandServerPacketSerializer.CombineNameValueCollections(CommandServerPacketSerializer.ParseGet(packet)' CommandServerPacketSerializer.ParsePost(packet)); " is 170.
Long Statement,Potato.Net.Protocols.CommandServer,CommandServerListener,C:\repos\phogue_Potato\src\Potato.Net\Protocols\CommandServer\CommandServerListener.cs,AcceptTcpClientCallback,The length of the statement  "                    CommandServerClient client = new CommandServerClient(commandServerListener.Listener.EndAcceptTcpClient(ar)' commandServerListener.Certificate); " is 143.
Long Statement,Potato.Net.Utils.Tests,ProtocolUnitTest,C:\repos\phogue_Potato\src\Potato.Net\Utils\Tests\ProtocolUnitTest.cs,LoggedIn,The length of the statement  "                    this.OnTestEvent(new ProtocolUnitTestEventArgs() { Message = "Timeout on client connection + login. (check end point & credentials)" }); " is 136.
Long Statement,Potato.Net.Utils.Tests,ProtocolUnitTest,C:\repos\phogue_Potato\src\Potato.Net\Utils\Tests\ProtocolUnitTest.cs,Execute,The length of the statement  "                            ProtocolUnitTestPacket matchedPacket = args.Now.Packets.First().Type == PacketType.Response ? localCommand.Responses.FirstOrDefault(response => response.Matches(args.Now.Packets.First().Text)) : localCommand.Requests.FirstOrDefault(request => request.Matches(args.Now.Packets.First().Text)); " is 291.
Long Statement,Potato.Net.Utils.Tests,ProtocolUnitTest,C:\repos\phogue_Potato\src\Potato.Net\Utils\Tests\ProtocolUnitTest.cs,Execute,The length of the statement  "                            if (localCommand.Responses.Count(response => response.Found == false) + localCommand.Requests.Count(request => request.Found == false) == 0) { " is 142.
Long Statement,Potato.Net.Utils.Tests,ProtocolUnitTest,C:\repos\phogue_Potato\src\Potato.Net\Utils\Tests\ProtocolUnitTest.cs,Execute,The length of the statement  "                        String[] expecting = command.Responses.Where(response => response.Found == false).Select(response => response.ToString()).Union(command.Requests.Where(request => request.Found == false).Select(request => request.ToString())).ToArray(); " is 235.
Long Statement,Potato.Net.Utils.Tests,ProtocolUnitTest,C:\repos\phogue_Potato\src\Potato.Net\Utils\Tests\ProtocolUnitTest.cs,Execute,The length of the statement  "                        this.OnTestEvent(new ProtocolUnitTestEventArgs() { Message = String.Format("Expecting: {0}; Received: {1}"' String.Join("' "' expecting)' String.Join("' "' unmatchedReceived.ToArray())) }); " is 189.
Long Statement,Potato.Net.Utils.Tests,ProtocolUnitTestObject,C:\repos\phogue_Potato\src\Potato.Net\Utils\Tests\ProtocolUnitTestObject.cs,ReplaceWith,The length of the statement  "                    this.Text = this.Text.Replace(replacement.Text' replacement.Random != null ? replacement.Random.ToString() : replacement.Replace); " is 130.
Magic Number,Potato.Net.Protocols.CommandServer,CommandServerPacketSerializer,C:\repos\phogue_Potato\src\Potato.Net\Protocols\CommandServer\CommandServerPacketSerializer.cs,CommandServerPacketSerializer,The following statement contains a magic number: this.PacketHeaderSize = 14;
Magic Number,Potato.Net.Protocols.CommandServer,CommandServerPacketSerializer,C:\repos\phogue_Potato\src\Potato.Net\Protocols\CommandServer\CommandServerPacketSerializer.cs,Parse,The following statement contains a magic number: if (packet.Header != null) {                  string[] headers = packet.Header.Split(new [] {"\r\n"}' StringSplitOptions.RemoveEmptyEntries);                    if (headers.Length > 0) {                      List<String> status = headers.First().Wordify();                                            var headerValues = packet.Header.Split(new [] { "\r\n" }' StringSplitOptions.RemoveEmptyEntries).Skip(1).ToDictionary(                          line => (line.Split(new[] { ":" }' 2' StringSplitOptions.RemoveEmptyEntries).FirstOrDefault() ?? "").Trim()'                          line => (line.Split(new[] { ":" }' 2' StringSplitOptions.RemoveEmptyEntries).LastOrDefault() ?? "").Trim()                      );                        if (status.Count == 3 && headerValues.ContainsKey("Host") == true) {                          packet.Request = new Uri("http://" + headerValues["Host"] + status[1]);                          packet.Method = status[0];                          packet.ProtocolVersion = new Version(status[2].Replace("HTTP/"' ""));                            foreach (var header in headerValues) {                              try {                                  packet.Headers.Set(header.Key' header.Value);                              }                              catch {                                  packet.Headers.Set(header.Key' "");                              }                          }                      }                  }              }
Magic Number,Potato.Net.Protocols.CommandServer,CommandServerPacketSerializer,C:\repos\phogue_Potato\src\Potato.Net\Protocols\CommandServer\CommandServerPacketSerializer.cs,Parse,The following statement contains a magic number: if (packet.Header != null) {                  string[] headers = packet.Header.Split(new [] {"\r\n"}' StringSplitOptions.RemoveEmptyEntries);                    if (headers.Length > 0) {                      List<String> status = headers.First().Wordify();                                            var headerValues = packet.Header.Split(new [] { "\r\n" }' StringSplitOptions.RemoveEmptyEntries).Skip(1).ToDictionary(                          line => (line.Split(new[] { ":" }' 2' StringSplitOptions.RemoveEmptyEntries).FirstOrDefault() ?? "").Trim()'                          line => (line.Split(new[] { ":" }' 2' StringSplitOptions.RemoveEmptyEntries).LastOrDefault() ?? "").Trim()                      );                        if (status.Count == 3 && headerValues.ContainsKey("Host") == true) {                          packet.Request = new Uri("http://" + headerValues["Host"] + status[1]);                          packet.Method = status[0];                          packet.ProtocolVersion = new Version(status[2].Replace("HTTP/"' ""));                            foreach (var header in headerValues) {                              try {                                  packet.Headers.Set(header.Key' header.Value);                              }                              catch {                                  packet.Headers.Set(header.Key' "");                              }                          }                      }                  }              }
Magic Number,Potato.Net.Protocols.CommandServer,CommandServerPacketSerializer,C:\repos\phogue_Potato\src\Potato.Net\Protocols\CommandServer\CommandServerPacketSerializer.cs,Parse,The following statement contains a magic number: if (packet.Header != null) {                  string[] headers = packet.Header.Split(new [] {"\r\n"}' StringSplitOptions.RemoveEmptyEntries);                    if (headers.Length > 0) {                      List<String> status = headers.First().Wordify();                                            var headerValues = packet.Header.Split(new [] { "\r\n" }' StringSplitOptions.RemoveEmptyEntries).Skip(1).ToDictionary(                          line => (line.Split(new[] { ":" }' 2' StringSplitOptions.RemoveEmptyEntries).FirstOrDefault() ?? "").Trim()'                          line => (line.Split(new[] { ":" }' 2' StringSplitOptions.RemoveEmptyEntries).LastOrDefault() ?? "").Trim()                      );                        if (status.Count == 3 && headerValues.ContainsKey("Host") == true) {                          packet.Request = new Uri("http://" + headerValues["Host"] + status[1]);                          packet.Method = status[0];                          packet.ProtocolVersion = new Version(status[2].Replace("HTTP/"' ""));                            foreach (var header in headerValues) {                              try {                                  packet.Headers.Set(header.Key' header.Value);                              }                              catch {                                  packet.Headers.Set(header.Key' "");                              }                          }                      }                  }              }
Magic Number,Potato.Net.Protocols.CommandServer,CommandServerPacketSerializer,C:\repos\phogue_Potato\src\Potato.Net\Protocols\CommandServer\CommandServerPacketSerializer.cs,Parse,The following statement contains a magic number: if (packet.Header != null) {                  string[] headers = packet.Header.Split(new [] {"\r\n"}' StringSplitOptions.RemoveEmptyEntries);                    if (headers.Length > 0) {                      List<String> status = headers.First().Wordify();                                            var headerValues = packet.Header.Split(new [] { "\r\n" }' StringSplitOptions.RemoveEmptyEntries).Skip(1).ToDictionary(                          line => (line.Split(new[] { ":" }' 2' StringSplitOptions.RemoveEmptyEntries).FirstOrDefault() ?? "").Trim()'                          line => (line.Split(new[] { ":" }' 2' StringSplitOptions.RemoveEmptyEntries).LastOrDefault() ?? "").Trim()                      );                        if (status.Count == 3 && headerValues.ContainsKey("Host") == true) {                          packet.Request = new Uri("http://" + headerValues["Host"] + status[1]);                          packet.Method = status[0];                          packet.ProtocolVersion = new Version(status[2].Replace("HTTP/"' ""));                            foreach (var header in headerValues) {                              try {                                  packet.Headers.Set(header.Key' header.Value);                              }                              catch {                                  packet.Headers.Set(header.Key' "");                              }                          }                      }                  }              }
Magic Number,Potato.Net.Protocols.CommandServer,CommandServerPacketSerializer,C:\repos\phogue_Potato\src\Potato.Net\Protocols\CommandServer\CommandServerPacketSerializer.cs,ReadPacketSize,The following statement contains a magic number: if (packet.Headers[HttpRequestHeader.ContentLength] != null) {                  // todo Potential issues with content encoding?                    if (long.TryParse(packet.Headers[HttpRequestHeader.ContentLength]' out length) == false) {                      length = packetData.Length;                  }                  else {                      length += packet.Header.Length;                  }                    // The header/content separator.                  length += 4;              }
Magic Number,Potato.Net.Utils.Tests,ProtocolUnitRandomObject,C:\repos\phogue_Potato\src\Potato.Net\Utils\Tests\ProtocolUnitRandomObject.cs,ToString,The following statement contains a magic number: if (this.GeneratedText == null) {                  int minimum = this.Minimum' maximum = this.Maximum > 0 ? this.Maximum : 10;                    if (this.Type == ProtocolUnitRandomType.String) {                      this.GeneratedText = StringExtensions.RandomString(maximum);                  }                  else if (this.Type == ProtocolUnitRandomType.Integer) {                      Random r = new Random();                      this.GeneratedText = r.Next(minimum' maximum).ToString(CultureInfo.InvariantCulture);                  }                  else if (this.Type == ProtocolUnitRandomType.Float) {                      Random r = new Random();                      this.GeneratedText = r.NextDouble().ToString(CultureInfo.InvariantCulture);                  }              }
Magic Number,Potato.Net.Utils.Tests,ProtocolUnitTest,C:\repos\phogue_Potato\src\Potato.Net\Utils\Tests\ProtocolUnitTest.cs,Disconnect,The following statement contains a magic number: if (game.State != null && game.State.Settings.Current.ConnectionState != ConnectionState.ConnectionDisconnected) {                  AutoResetEvent disconnectEvent = new AutoResetEvent(false);                    Action<IClientEventArgs> handler = (args) => {                      if (args.EventType == ClientEventType.ClientConnectionStateChange) {                          if (args.ConnectionState == ConnectionState.ConnectionDisconnected) {                              disconnectEvent.Set();                          }                      }                  };                    ISandboxProtocolCallbackProxy originalBubbleProxy = game.Bubble;                    game.Bubble = new SandboxProtocolCallbackProxy() {                      ClientEvent = new Action<IClientEventArgs>(handler)                  };                    game.Shutdown();                                    if ((disconnected = disconnectEvent.WaitOne(this.Timeout * 1000)) == false) {                      this.OnTestEvent(new ProtocolUnitTestEventArgs() { Message = "Timeout on client disconnection." });                  }                    game.Bubble = originalBubbleProxy;              }
Magic Number,Potato.Net.Utils.Tests,ProtocolUnitTest,C:\repos\phogue_Potato\src\Potato.Net\Utils\Tests\ProtocolUnitTest.cs,LoggedIn,The following statement contains a magic number: if (game.State == null || game.State.Settings.Current.ConnectionState != ConnectionState.ConnectionLoggedIn) {                  AutoResetEvent loginEvent = new AutoResetEvent(false);                    Action<IClientEventArgs> handler = (args) => {                      if (args.EventType == ClientEventType.ClientConnectionStateChange) {                          if (args.ConnectionState == ConnectionState.ConnectionLoggedIn) {                              loginEvent.Set();                          }                      }                  };                    ISandboxProtocolCallbackProxy originalBubbleProxy = game.Bubble;                    game.Bubble = new SandboxProtocolCallbackProxy() {                      ClientEvent = new Action<IClientEventArgs>(handler)                  };                    game.AttemptConnection();                    if ((loggedIn = loginEvent.WaitOne(this.Timeout * 1000)) == false) {                      this.OnTestEvent(new ProtocolUnitTestEventArgs() { Message = "Timeout on client connection + login. (check end point & credentials)" });                  }                    game.Bubble = originalBubbleProxy;              }
Magic Number,Potato.Net.Utils.Tests,ProtocolUnitTest,C:\repos\phogue_Potato\src\Potato.Net\Utils\Tests\ProtocolUnitTest.cs,Execute,The following statement contains a magic number: if (success == true) {                  this.OnTestSetup(new ProtocolUnitTestEventArgs() {                      Message = "Test connection reconnected and logged in."                  });                    // 3. Assert each command is successful in whole from sending a command.                  foreach (ProtocolUnitTestCommand command in this.TestCommands) {                        AutoResetEvent expectedResults = new AutoResetEvent(false);                        // List of packets recieved that were not matched.                      List<String> unmatchedReceived = new List<String>();                        ProtocolUnitTestCommand localCommand = command;                        Action<IClientEventArgs> handler = (args) => {                          if (args.EventType == ClientEventType.ClientPacketReceived) {                              ProtocolUnitTestPacket matchedPacket = args.Now.Packets.First().Type == PacketType.Response ? localCommand.Responses.FirstOrDefault(response => response.Matches(args.Now.Packets.First().Text)) : localCommand.Requests.FirstOrDefault(request => request.Matches(args.Now.Packets.First().Text));                                if (matchedPacket != null) {                                  matchedPacket.Found = true;                              }                              else {                                  // Add it to the alternative packets received for debug output.                                  unmatchedReceived.Add(args.Now.Packets.First().Text);                              }                                // If we don't have any packets remaining that have not been found yet.                              if (localCommand.Responses.Count(response => response.Found == false) + localCommand.Requests.Count(request => request.Found == false) == 0) {                                  expectedResults.Set();                              }                          }                      };                        ISandboxProtocolCallbackProxy originalBubbleProxy = game.Bubble;                        game.Bubble = new SandboxProtocolCallbackProxy() {                          ClientEvent = new Action<IClientEventArgs>(handler)                      };                        // 3 b. Send our packet to initiate this command test                      game.Action(new NetworkAction() {                          ActionType = NetworkActionType.NetworkPacketSend'                          Now = {                              Content = new List<String>() {                                  command.Send.Text                              }                          }                      });                        if ((success = success && expectedResults.WaitOne(this.Timeout * 1000)) == false) {                          String[] expecting = command.Responses.Where(response => response.Found == false).Select(response => response.ToString()).Union(command.Requests.Where(request => request.Found == false).Select(request => request.ToString())).ToArray();                            this.OnTestEvent(new ProtocolUnitTestEventArgs() { Message = String.Format("Expecting: {0}; Received: {1}"' String.Join("' "' expecting)' String.Join("' "' unmatchedReceived.ToArray())) });                      }                        game.Bubble = originalBubbleProxy;                  }              }
