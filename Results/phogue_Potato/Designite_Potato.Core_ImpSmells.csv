Implementation smell,Namespace,Class,File,Method,Description
Long Method,Potato.Core.Events,PushEventsController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Events\PushEventsController.cs,PushEventsController,The method has 70 lines of code.
Long Method,Potato.Core,PotatoController,D:\newReposJune17\phogue_Potato\src\Potato.Core\PotatoController.cs,PotatoController,The method has 138 lines of code.
Long Method,Potato.Core,PotatoController,D:\newReposJune17\phogue_Potato\src\Potato.Core\PotatoController.cs,WriteConfig,The method has 64 lines of code.
Long Method,Potato.Core,PotatoController,D:\newReposJune17\phogue_Potato\src\Potato.Core\PotatoController.cs,PotatoAddConnection,The method has 70 lines of code.
Long Method,Potato.Core.Database,DatabaseController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Database\DatabaseController.cs,DatabaseController,The method has 68 lines of code.
Long Method,Potato.Core.Variables,VariableController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Variables\VariableController.cs,VariableController,The method has 105 lines of code.
Long Method,Potato.Core.Localization,LanguageController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Localization\LanguageController.cs,LanguageController,The method has 71 lines of code.
Long Method,Potato.Core.Security,SecurityController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Security\SecurityController.cs,SecurityController,The method has 335 lines of code.
Long Method,Potato.Core.Security,SecurityController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Security\SecurityController.cs,SecurityGroupSetPermission,The method has 61 lines of code.
Long Method,Potato.Core.Security,SecurityController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Security\SecurityController.cs,SecurityGroupAddAccount,The method has 94 lines of code.
Long Method,Potato.Core.Security,SecurityController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Security\SecurityController.cs,SecurityAccountAddPlayer,The method has 93 lines of code.
Complex Method,Potato.Core.Connections,ConnectionController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Connections\ConnectionController.cs,Protocol_ClientEvent,Cyclomatic complexity of the method is 7
Complex Method,Potato.Core.Connections,ConnectionController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Connections\ConnectionController.cs,Protocol_ProtocolEvent,Cyclomatic complexity of the method is 7
Complex Method,Potato.Core.Connections.TextCommands.Parsers.Fuzzy,KdrPropertyReference,D:\newReposJune17\phogue_Potato\src\Potato.Core\Connections\TextCommands\Parsers\Fuzzy\KdrPropertyReference.cs,RemoveAll,Cyclomatic complexity of the method is 7
Complex Method,Potato.Core.Connections.TextCommands.Parsers.Fuzzy,DeathsPropertyReference,D:\newReposJune17\phogue_Potato\src\Potato.Core\Connections\TextCommands\Parsers\Fuzzy\DeathsPropertyReference.cs,RemoveAll,Cyclomatic complexity of the method is 7
Complex Method,Potato.Core.Connections.TextCommands.Parsers.Fuzzy,KillsPropertyReference,D:\newReposJune17\phogue_Potato\src\Potato.Core\Connections\TextCommands\Parsers\Fuzzy\KillsPropertyReference.cs,RemoveAll,Cyclomatic complexity of the method is 7
Complex Method,Potato.Core.Connections.TextCommands.Parsers.Fuzzy,ScorePropertyReference,D:\newReposJune17\phogue_Potato\src\Potato.Core\Connections\TextCommands\Parsers\Fuzzy\ScorePropertyReference.cs,RemoveAll,Cyclomatic complexity of the method is 7
Complex Method,Potato.Core.Connections.TextCommands.Parsers.Fuzzy,PingPropertyReference,D:\newReposJune17\phogue_Potato\src\Potato.Core\Connections\TextCommands\Parsers\Fuzzy\PingPropertyReference.cs,RemoveAll,Cyclomatic complexity of the method is 7
Complex Method,Potato.Core.Connections.TextCommands.Parsers,FuzzyParser,D:\newReposJune17\phogue_Potato\src\Potato.Core\Connections\TextCommands\Parsers\FuzzyParser.cs,ParseProperty,Cyclomatic complexity of the method is 7
Complex Method,Potato.Core.Events,EventsConsoleController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Events\EventsConsoleController.cs,FormatEvent,Cyclomatic complexity of the method is 20
Complex Method,Potato.Core.Events,EventsController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Events\EventsController.cs,WriteEventsList,Cyclomatic complexity of the method is 7
Complex Method,Potato.Core.Remote,CommandServerSerializer,D:\newReposJune17\phogue_Potato\src\Potato.Core\Remote\CommandServerSerializer.cs,CompleteResponsePacket,Cyclomatic complexity of the method is 12
Complex Method,Potato.Core.Security,SecurityController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Security\SecurityController.cs,WriteConfig,Cyclomatic complexity of the method is 7
Complex Method,Potato.Core.Security,SecurityController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Security\SecurityController.cs,SecurityRemoveGroup,Cyclomatic complexity of the method is 7
Complex Method,Potato.Core.Security,SecurityController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Security\SecurityController.cs,SecurityGroupCopyPermissions,Cyclomatic complexity of the method is 7
Complex Method,Potato.Core.Security,SecurityController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Security\SecurityController.cs,SecurityGroupAddAccount,Cyclomatic complexity of the method is 8
Complex Method,Potato.Core.Security,SecurityController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Security\SecurityController.cs,SecurityAccountAddPlayer,Cyclomatic complexity of the method is 7
Long Parameter List,Potato.Core.Connections.TextCommands,TextCommandController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Connections\TextCommands\TextCommandController.cs,Parse,The method has 4 parameters.
Long Parameter List,Potato.Core.Connections.TextCommands.Parsers,RouteParser,D:\newReposJune17\phogue_Potato\src\Potato.Core\Connections\TextCommands\Parsers\RouteParser.cs,MinimumSimilarity,The method has 4 parameters.
Long Parameter List,Potato.Core.Connections.TextCommands.Parsers,FuzzyParser,D:\newReposJune17\phogue_Potato\src\Potato.Core\Connections\TextCommands\Parsers\FuzzyParser.cs,MinimumSimilarity,The method has 4 parameters.
Long Parameter List,Potato.Core.Localization,LanguageController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Localization\LanguageController.cs,Localize,The method has 5 parameters.
Long Parameter List,Potato.Core.Security,SecurityController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Security\SecurityController.cs,CheckPermissions,The method has 4 parameters.
Long Parameter List,Potato.Core.Security,SecurityController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Security\SecurityController.cs,DispatchPermissionsCheck,The method has 4 parameters.
Long Statement,Potato.Core.Connections,ConnectionController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Connections\ConnectionController.cs,CreatePermissionSet,The length of the statement  "	permissions.AddPermission (new SocketPermission (NetworkAccess.Connect' TransportType.All' "*.*.*.*"' SocketPermission.AllPorts)); " is 130.
Long Statement,Potato.Core.Connections,ConnectionController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Connections\ConnectionController.cs,CreatePermissionSet,The length of the statement  "	permissions.AddPermission (new FileIOPermission (FileIOPermissionAccess.PathDiscovery' AppDomain.CurrentDomain.BaseDirectory)); " is 127.
Long Statement,Potato.Core.Connections,ConnectionController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Connections\ConnectionController.cs,CreatePermissionSet,The length of the statement  "	DirectoryInfo coreSharedPackageDirectory = Defines.PackageContainingPath (Defines.PackageMyrconPotatoSharedLibNet40.FullName); " is 126.
Long Statement,Potato.Core.Connections,ConnectionController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Connections\ConnectionController.cs,CreatePermissionSet,The length of the statement  "		permissions.AddPermission (new FileIOPermission (FileIOPermissionAccess.Read | FileIOPermissionAccess.PathDiscovery' coreSharedPackageDirectory.FullName)); " is 155.
Long Statement,Potato.Core.Connections,ConnectionController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Connections\ConnectionController.cs,SetupProtocolFactory,The length of the statement  "	this.AppDomainSandbox = AppDomain.CreateDomain (String.Format ("Potato.Protocols.{0}"' this.ConnectionModel != null ? this.ConnectionModel.ConnectionGuid.ToString () : String.Empty)' null' setup' permissions); " is 209.
Long Statement,Potato.Core.Connections,ConnectionController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Connections\ConnectionController.cs,SetupProtocolFactory,The length of the statement  "	this.ProtocolFactory = (ISandboxProtocolController)this.AppDomainSandbox.CreateInstanceAndUnwrap (typeof(ISandboxProtocolController).Assembly.FullName' typeof(SandboxProtocolController).FullName); " is 196.
Long Statement,Potato.Core.Connections,ConnectionController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Connections\ConnectionController.cs,Execute,The length of the statement  "	this.ConnectionModel.ConnectionGuid = MD5.Guid (String.Format ("{0}:{1}:{2}"' this.ConnectionModel.ProtocolType' this.ConnectionModel.Hostname' this.ConnectionModel.Port)); " is 172.
Long Statement,Potato.Core.Connections,ConnectionController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Connections\ConnectionController.cs,Poke,The length of the statement  "		if (this.ProtocolState != null && this.ProtocolState.Settings.Current.ConnectionState == ConnectionState.ConnectionDisconnected) { " is 130.
Long Statement,Potato.Core.Connections,ConnectionController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Connections\ConnectionController.cs,PropogatePreview,The length of the statement  "	if (direction == CommandDirection.Bubble && command.Scope != null && command.Scope.ConnectionGuid == this.ConnectionModel.ConnectionGuid) { " is 139.
Long Statement,Potato.Core.Connections,ConnectionController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Connections\ConnectionController.cs,PropogateHandler,The length of the statement  "	if (direction == CommandDirection.Bubble && command.Scope != null && command.Scope.ConnectionGuid == this.ConnectionModel.ConnectionGuid) { " is 139.
Long Statement,Potato.Core.Connections,ConnectionController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Connections\ConnectionController.cs,PropogateExecuted,The length of the statement  "	if (direction == CommandDirection.Bubble && command.Scope != null && command.Scope.ConnectionGuid == this.ConnectionModel.ConnectionGuid) { " is 139.
Long Statement,Potato.Core.Connections,ConnectionController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Connections\ConnectionController.cs,Protocol_ClientEvent,The length of the statement  "	} else if (e.EventType == ClientEventType.ClientConnectionFailure || e.EventType == ClientEventType.ClientSocketException) { " is 124.
Long Statement,Potato.Core.Connections,ConnectionController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Connections\ConnectionController.cs,Protocol_ProtocolEvent,The length of the statement  "	if (this.Shared.Variables.Get<List<String>> (CommonVariableNames.ProtocolEventsIgnoreList).Contains (e.ProtocolEventType.ToString ()) == false) { " is 145.
Long Statement,Potato.Core.Connections,ConnectionController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Connections\ConnectionController.cs,Protocol_ProtocolEvent,The length of the statement  "			bool execute = prefix == this.Shared.Variables.Get<String> (CommonVariableNames.TextCommandPublicPrefix) || prefix == this.Shared.Variables.Get<String> (CommonVariableNames.TextCommandProtectedPrefix) || prefix == this.Shared.Variables.Get<String> (CommonVariableNames.TextCommandPrivatePrefix); " is 295.
Long Statement,Potato.Core.Connections.Plugins,CorePluginController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Connections\Plugins\CorePluginController.cs,CreatePermissionSet,The length of the statement  "	permissions.AddPermission (new FileIOPermission (FileIOPermissionAccess.PathDiscovery' AppDomain.CurrentDomain.BaseDirectory)); " is 127.
Long Statement,Potato.Core.Connections.Plugins,CorePluginController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Connections\Plugins\CorePluginController.cs,CreatePermissionSet,The length of the statement  "	permissions.AddPermission (new FileIOPermission (FileIOPermissionAccess.AllAccess' Path.Combine (Defines.ConfigsDirectory.FullName' this.Connection != null ? this.Connection.ConnectionModel.ConnectionGuid.ToString () : Guid.Empty.ToString ()))); " is 245.
Long Statement,Potato.Core.Connections.Plugins,CorePluginController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Connections\Plugins\CorePluginController.cs,CreatePermissionSet,The length of the statement  "	permissions.AddPermission (new FileIOPermission (FileIOPermissionAccess.Read | FileIOPermissionAccess.PathDiscovery' Defines.ConfigsDirectory.FullName)); " is 153.
Long Statement,Potato.Core.Connections.Plugins,CorePluginController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Connections\Plugins\CorePluginController.cs,CreateDirectories,The length of the statement  "	Directory.CreateDirectory (Path.Combine (Defines.ConfigsDirectory.FullName' this.Connection != null ? this.Connection.ConnectionModel.ConnectionGuid.ToString () : Guid.Empty.ToString ())); " is 188.
Long Statement,Potato.Core.Connections.Plugins,CorePluginController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Connections\Plugins\CorePluginController.cs,SetupPluginFactory,The length of the statement  "	this.AppDomainSandbox = AppDomain.CreateDomain (String.Format ("Potato.Plugins.{0}"' this.Connection != null ? this.Connection.ConnectionModel.ConnectionGuid.ToString () : String.Empty)' null' setup' permissions); " is 213.
Long Statement,Potato.Core.Connections.Plugins,CorePluginController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Connections\Plugins\CorePluginController.cs,SetupPluginFactory,The length of the statement  "	this.PluginFactory = (ISandboxPluginController)this.AppDomainSandbox.CreateInstanceAndUnwrap (typeof(SandboxPluginController).Assembly.FullName' typeof(SandboxPluginController).FullName); " is 187.
Long Statement,Potato.Core.Connections.Plugins,CorePluginController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Connections\Plugins\CorePluginController.cs,GetPluginAssemblies,The length of the statement  "	return Directory.GetFiles (Defines.PackagesDirectory.FullName' @"*.Plugins.*.dll"' SearchOption.AllDirectories).Select (path => new FileInfo (path)).Where (file => file.Name != Defines.PotatoCoreDll && file.Name != Defines.PotatoNetDll && file.Name != Defines.PotatoFuzzyDll && file.Name != Defines.NewtonsoftJsonDll && file.Name != Defines.PotatoCoreSharedDll && file.Name != Defines.PotatoDatabaseSharedDll && file.Name != Defines.PotatoNetSharedDll).Where (file => Regex.Matches (file.FullName' file.Name.Replace (file.Extension' String.Empty)).Cast<Match> ().Count () >= 2).ToList (); " is 588.
Long Statement,Potato.Core.Connections.Plugins,CorePluginController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Connections\Plugins\CorePluginController.cs,LoadPlugins,The length of the statement  "				ConfigDirectoryPath = Path.Combine (Defines.ConfigsDirectory.FullName' connectionGuid.ToString ()' plugin.PluginGuid.ToString ())' " is 130.
Long Statement,Potato.Core.Connections.Plugins,CorePluginController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Connections\Plugins\CorePluginController.cs,LoadPlugins,The length of the statement  "				LogDirectoryPath = Path.Combine (Defines.LogsDirectory.FullName' connectionGuid.ToString ()' plugin.PluginGuid.ToString ()) " is 123.
Long Statement,Potato.Core.Protocols,ProtocolController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Protocols\ProtocolController.cs,GetProtocolAssemblies,The length of the statement  "	return Directory.GetFiles (this.PackagesDirectory.FullName' @"*.Protocols.*.dll"' SearchOption.AllDirectories).Select (path => new FileInfo (path)).Where (file => Regex.Matches (file.FullName' file.Name.Replace (file.Extension' String.Empty)).Cast<Match> ().Count () >= 2).ToList (); " is 283.
Long Statement,Potato.Core.Protocols,ProtocolController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Protocols\ProtocolController.cs,GetProtocolPackages,The length of the statement  "	return assemblies.Select (file => Defines.PackageVersionDirectory (this.PackagesDirectory.FullName' file.Name.Replace (file.Extension' String.Empty))).Where (path => path != null).Distinct ().Select (path => new DirectoryInfo (path)).Where (package => package != null).ToList (); " is 279.
Long Statement,Potato.Core.Protocols,ProtocolController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Protocols\ProtocolController.cs,LoadProtocolsMetadata,The length of the statement  "	List<String> names = assemblies.Select (assembly => assembly.Name.Replace (assembly.Extension' String.Empty)).Distinct ().ToList (); " is 132.
Long Statement,Potato.Core.Protocols,ProtocolController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Protocols\ProtocolController.cs,ProtocolsCheckSupportedProtocol,The length of the statement  "		var meta = this.Protocols.FirstOrDefault (metadata => metadata.ProtocolTypes.Any (protocolType => String.Compare (protocolType.Provider' provider' StringComparison.OrdinalIgnoreCase) == 0 && String.Compare (protocolType.Type' type' StringComparison.OrdinalIgnoreCase) == 0)); " is 275.
Long Statement,Potato.Core.Protocols,ProtocolController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Protocols\ProtocolController.cs,ProtocolsCheckSupportedProtocol,The length of the statement  "			var protocol = meta.ProtocolTypes.FirstOrDefault (protocolType => String.Compare (protocolType.Provider' provider' StringComparison.OrdinalIgnoreCase) == 0 && String.Compare (protocolType.Type' type' StringComparison.OrdinalIgnoreCase) == 0); " is 242.
Long Statement,Potato.Core.Connections.TextCommands.Parsers.Fuzzy,LocationThingReference,D:\newReposJune17\phogue_Potato\src\Potato.Core\Connections\TextCommands\Parsers\Fuzzy\LocationThingReference.cs,Union,The length of the statement  "		this.Locations.AddRange (locationThingReference.Locations.Where (location => this.Locations.Contains (location) == false)); " is 123.
Long Statement,Potato.Core.Connections.TextCommands.Parsers.Fuzzy,PlayerThingReference,D:\newReposJune17\phogue_Potato\src\Potato.Core\Connections\TextCommands\Parsers\Fuzzy\PlayerThingReference.cs,Union,The length of the statement  "		this.Players.RemoveAll (player => locationThingReference.Locations.Any (location => location.CountryName != player.Location.CountryName)); " is 138.
Long Statement,Potato.Core.Connections.TextCommands.Parsers.Fuzzy,PlayerThingReference,D:\newReposJune17\phogue_Potato\src\Potato.Core\Connections\TextCommands\Parsers\Fuzzy\PlayerThingReference.cs,Union,The length of the statement  "		this.Players.RemoveAll (player => itemThingReference.Items.Any (item => player.Inventory.Now.Items.Any (playerItem => item.Name == playerItem.Name)) == false); " is 159.
Long Statement,Potato.Core.Connections.TextCommands.Parsers.Fuzzy,PlayerThingReference,D:\newReposJune17\phogue_Potato\src\Potato.Core\Connections\TextCommands\Parsers\Fuzzy\PlayerThingReference.cs,Complement,The length of the statement  "		this.Players.RemoveAll (player => locationThingReference.Locations.Any (location => location.CountryName == player.Location.CountryName)); " is 138.
Long Statement,Potato.Core.Connections.TextCommands.Parsers.Fuzzy,PlayerThingReference,D:\newReposJune17\phogue_Potato\src\Potato.Core\Connections\TextCommands\Parsers\Fuzzy\PlayerThingReference.cs,Complement,The length of the statement  "		this.Players.RemoveAll (player => itemThingReference.Items.Any (item => player.Inventory.Now.Items.Any (playerItem => item.Name == playerItem.Name))); " is 150.
Long Statement,Potato.Core.Connections.TextCommands,TextCommandController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Connections\TextCommands\TextCommandController.cs,BuildFuzzyParser,The length of the statement  "		TextCommands = this.TextCommands.Where (textCommand => textCommand.Parser == TextCommandParserType.Any || textCommand.Parser == TextCommandParserType.Fuzzy).ToList ()' " is 167.
Long Statement,Potato.Core.Connections.TextCommands,TextCommandController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Connections\TextCommands\TextCommandController.cs,BuildRouteParser,The length of the statement  "		TextCommands = this.TextCommands.Where (textCommand => textCommand.Parser == TextCommandParserType.Any || textCommand.Parser == TextCommandParserType.Route).ToList ()' " is 167.
Long Statement,Potato.Core.Connections.TextCommands,TextCommandController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Connections\TextCommands\TextCommandController.cs,GetAccountNetworkPlayer,The length of the statement  "	PlayerModel player = this.Connection.ProtocolState.Players.Values.FirstOrDefault (p => p.Uid == command.Authentication.Uid); " is 124.
Long Statement,Potato.Core.Connections.TextCommands,TextCommandController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Connections\TextCommands\TextCommandController.cs,GetAccountNetworkPlayer,The length of the statement  "		AccountPlayerModel accountPlayer = speaker.Players.FirstOrDefault (p => p.ProtocolType == this.Connection.ConnectionModel.ProtocolType.Type); " is 141.
Long Statement,Potato.Core.Connections.TextCommands,TextCommandController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Connections\TextCommands\TextCommandController.cs,TextCommandsRegister,The length of the statement  "		TextCommandModel existingRegisteredCommand = this.TextCommands.Find (existingCommand => existingCommand.PluginGuid == textCommand.PluginGuid && existingCommand.PluginCommand == textCommand.PluginCommand); " is 204.
Long Statement,Potato.Core.Connections.TextCommands,TextCommandController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Connections\TextCommands\TextCommandController.cs,TextCommandsUnregister,The length of the statement  "		TextCommandModel existingRegisteredCommand = this.TextCommands.Find (existingCommand => existingCommand.PluginGuid == textCommand.PluginGuid && existingCommand.PluginCommand == textCommand.PluginCommand); " is 204.
Long Statement,Potato.Core.Connections.TextCommands.Parsers,RouteParser,D:\newReposJune17\phogue_Potato\src\Potato.Core\Connections\TextCommands\Parsers\RouteParser.cs,TryMatchPlayers,The length of the statement  "	int maximumNameLength = this.Connection.ProtocolState.Players.Count > 0 ? this.Connection.ProtocolState.Players.Values.Max (player => player.Name.Length) : 0; " is 158.
Long Statement,Potato.Core.Connections.TextCommands.Parsers,RouteParser,D:\newReposJune17\phogue_Potato\src\Potato.Core\Connections\TextCommands\Parsers\RouteParser.cs,TryMatchPlayers,The length of the statement  "		PlayerModel player = this.Connection.ProtocolState.Players.Values.FirstOrDefault (p => Math.Max (p.NameStripped.DePluralStringSimularity (text)' p.Name.DePluralStringSimularity (text)) >= this.MinimumSimilarity (55' 70' maximumNameLength' p.Name.Length)); " is 255.
Long Statement,Potato.Core.Connections.TextCommands.Parsers,RouteParser,D:\newReposJune17\phogue_Potato\src\Potato.Core\Connections\TextCommands\Parsers\RouteParser.cs,TryMatchMaps,The length of the statement  "		MapModel map = this.Connection.ProtocolState.MapPool.Values.FirstOrDefault (m => Math.Max (m.FriendlyName.DePluralStringSimularity (text)' m.Name.DePluralStringSimularity (text)) >= 60); " is 186.
Long Statement,Potato.Core.Connections.TextCommands.Parsers,RouteParser,D:\newReposJune17\phogue_Potato\src\Potato.Core\Connections\TextCommands\Parsers\RouteParser.cs,BuildTextCommandMatch,The length of the statement  "	bool matches = this.TryMatchPlayers (match' textCommandMatchModel) && this.TryMatchMaps (match' textCommandMatchModel) && this.TryMatchTexts (match' textCommandMatchModel) && this.TryMatchNumbers (match' textCommandMatchModel); " is 227.
Long Statement,Potato.Core.Connections.TextCommands.Parsers,RouteParser,D:\newReposJune17\phogue_Potato\src\Potato.Core\Connections\TextCommands\Parsers\RouteParser.cs,Parse,The length of the statement  "	return this.CompileTextCommands ().Select (compiledTextCommand => this.BuildCommandResult (compiledTextCommand.Match (text)' compiledTextCommand)).FirstOrDefault (result => result != null); " is 189.
Long Statement,Potato.Core.Connections.TextCommands.Parsers,FuzzyParser,D:\newReposJune17\phogue_Potato\src\Potato.Core\Connections\TextCommands\Parsers\FuzzyParser.cs,ParseMapNames,The length of the statement  "		Similarity = Math.Max (map.FriendlyName.DePluralStringSimularity (phrase.Text)' map.Name.DePluralStringSimularity (phrase.Text)) " is 128.
Long Statement,Potato.Core.Connections.TextCommands.Parsers,FuzzyParser,D:\newReposJune17\phogue_Potato\src\Potato.Core\Connections\TextCommands\Parsers\FuzzyParser.cs,ParsePlayerNames,The length of the statement  "	int maximumNameLength = this.Connection.ProtocolState.Players.Count > 0 ? this.Connection.ProtocolState.Players.Values.Max (player => player.Name.Length) : 0; " is 158.
Long Statement,Potato.Core.Connections.TextCommands.Parsers,FuzzyParser,D:\newReposJune17\phogue_Potato\src\Potato.Core\Connections\TextCommands\Parsers\FuzzyParser.cs,ParsePlayerNames,The length of the statement  "		Similarity = Math.Max (player.NameStripped.DePluralStringSimularity (phrase.Text)' player.Name.DePluralStringSimularity (phrase.Text)) " is 134.
Long Statement,Potato.Core.Connections.TextCommands.Parsers,FuzzyParser,D:\newReposJune17\phogue_Potato\src\Potato.Core\Connections\TextCommands\Parsers\FuzzyParser.cs,ParsePlayerNames,The length of the statement  "	}).Where (@t => @t.Similarity >= this.MinimumSimilarity (55' 70' maximumNameLength' @t.player.Name.Length)).Select (@t => new ThingObjectToken () { " is 147.
Long Statement,Potato.Core.Connections.TextCommands.Parsers,FuzzyParser,D:\newReposJune17\phogue_Potato\src\Potato.Core\Connections\TextCommands\Parsers\FuzzyParser.cs,ParseItemNames,The length of the statement  "		Similarity = Math.Max (item.FriendlyName.StringSimularitySubsetBonusRatio (phrase.Text)' item.Tags.Select (tag => tag.StringSimularitySubsetBonusRatio (phrase.Text)).Max ()) " is 173.
Long Statement,Potato.Core.Connections.TextCommands.Parsers,FuzzyParser,D:\newReposJune17\phogue_Potato\src\Potato.Core\Connections\TextCommands\Parsers\FuzzyParser.cs,ExtractCommandList,The length of the statement  "	resultMethodList = resultMethodList.OrderByDescending (token => token.Similarity).ThenByDescending (token => token.Text.Length).ToList (); " is 138.
Long Statement,Potato.Core.Connections.TextCommands.Parsers,FuzzyParser,D:\newReposJune17\phogue_Potato\src\Potato.Core\Connections\TextCommands\Parsers\FuzzyParser.cs,ExtractCommandList,The length of the statement  "	List<TextCommandModel> results = resultMethodList.Select (method => this.TextCommands.Find (command => command.PluginCommand == method.MethodName)).Where (command => command != null).ToList (); " is 193.
Long Statement,Potato.Core.Connections.TextCommands.Parsers,FuzzyParser,D:\newReposJune17\phogue_Potato\src\Potato.Core\Connections\TextCommands\Parsers\FuzzyParser.cs,ExtractThings,The length of the statement  "	List<T> things = sentence.ScrapeStrictList<ThingObjectToken> ().Where (token => token.Reference is T).Select (token => token.Reference).Cast<T> ().ToList (); " is 157.
Long Statement,Potato.Core.Connections.TextCommands.Parsers,FuzzyParser,D:\newReposJune17\phogue_Potato\src\Potato.Core\Connections\TextCommands\Parsers\FuzzyParser.cs,ExtractThings,The length of the statement  "	things.AddRange (sentence.ScrapeStrictList<SelfReflectionThingObjectToken> ().Where (token => token.Reference is T).Select (token => token.Reference).Cast<T> ()); " is 162.
Long Statement,Potato.Core.Connections.TextCommands.Parsers,FuzzyParser,D:\newReposJune17\phogue_Potato\src\Potato.Core\Connections\TextCommands\Parsers\FuzzyParser.cs,ExtractTextCommandInterval,The length of the statement  "	FuzzyDateTimePattern pattern = sentence.ExtractList<TemporalToken> ().Where (token => token.Pattern != null && token.Pattern.Modifier == TimeModifier.Interval).Select (token => token.Pattern).FirstOrDefault (); " is 210.
Long Statement,Potato.Core.Connections.TextCommands.Parsers,FuzzyParser,D:\newReposJune17\phogue_Potato\src\Potato.Core\Connections\TextCommands\Parsers\FuzzyParser.cs,ExtractTextCommandInterval,The length of the statement  "			IntervalType = (TextCommandIntervalType)Enum.Parse (typeof(TextCommandIntervalType)' pattern.TemporalInterval.ToString ())' " is 123.
Long Statement,Potato.Core.Connections.TextCommands.Parsers,FuzzyParser,D:\newReposJune17\phogue_Potato\src\Potato.Core\Connections\TextCommands\Parsers\FuzzyParser.cs,Parse,The length of the statement  "	List<String> quotes = sentence.Where (token => token.Count > 0 && token [0] is StringPrimitiveToken).Select (token => token [0].Text).ToList (); " is 144.
Long Statement,Potato.Core.Connections.TextCommands.Parsers,FuzzyParser,D:\newReposJune17\phogue_Potato\src\Potato.Core\Connections\TextCommands\Parsers\FuzzyParser.cs,Parse,The length of the statement  "	DateTime? delay = timeTokens.Where (token => token.Pattern != null && token.Pattern.Modifier == TimeModifier.Delay).Select (token => token.Pattern.ToDateTime ()).FirstOrDefault (); " is 180.
Long Statement,Potato.Core.Connections.TextCommands.Parsers,FuzzyParser,D:\newReposJune17\phogue_Potato\src\Potato.Core\Connections\TextCommands\Parsers\FuzzyParser.cs,Parse,The length of the statement  "	TimeSpan? period = timeTokens.Where (token => token.Pattern != null && (token.Pattern.Modifier == TimeModifier.Period || token.Pattern.Modifier == TimeModifier.None)).Select (token => token.Pattern.ToTimeSpan ()).FirstOrDefault (); " is 231.
Long Statement,Potato.Core.Events,EventsConsoleController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Events\EventsConsoleController.cs,FormatGuid,The length of the statement  "	return String.Format ("{0}..{1}"' new String (guid.ToString ().Take (5).ToArray ())' new String (guid.ToString ().Skip (Math.Max (0' guid.ToString ().Count () - 3)).Take (3).ToArray ())); " is 187.
Long Statement,Potato.Core.Events,EventsConsoleController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Events\EventsConsoleController.cs,FormatGuid,The length of the statement  "	return String.Format ("{0}..{1}"' new String (guid.Take (5).ToArray ())' new String (guid.Skip (Math.Max (0' guid.Count () - 3)).Take (3).ToArray ())); " is 151.
Long Statement,Potato.Core.Events,EventsConsoleController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Events\EventsConsoleController.cs,FormatEvent,The length of the statement  "			text = String.Format (@"Registed command(s) ""{0}"" to plugin {1} on connection {2}."' String.Join ("' "' firstTextCommand.Commands.ToArray ())' this.FormatGuid (firstTextCommand.PluginGuid)' this.FormatGuid (firstConnection.ConnectionGuid)); " is 242.
Long Statement,Potato.Core.Events,EventsController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Events\EventsController.cs,EventsLogFileName,The length of the statement  "	return Path.Combine (directory' String.Format ("events_{0}_to_{1}.json"' stamp.ToString ("HH_00_00")' stamp.AddHours (1.0D).ToString ("HH_00_00"))); " is 148.
Long Statement,Potato.Core.Events,EventsController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Events\EventsController.cs,WriteEventsList,The length of the statement  "		foreach (var eventHourlyGroup in events.GroupBy (e => new DateTime (e.Stamp.Year' e.Stamp.Month' e.Stamp.Day' e.Stamp.Hour' 0' 0))) { " is 133.
Long Statement,Potato.Core.Events,EventsController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Events\EventsController.cs,WriteEvents,The length of the statement  "		DateTime before = now - TimeSpan.FromSeconds (this.Shared.Variables.Get (CommonVariableNames.MaximumEventsTimeSeconds' 30)); " is 124.
Long Statement,Potato.Core.Events,EventsController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Events\EventsController.cs,WriteEvents,The length of the statement  "			flushEvents = this.LoggedEvents.Where (e => e.Stamp < before).Where (e => this.Shared.Variables.Get (CommonVariableNames.EventsLogIgnoredNames' this.DefaultEventsLogIgnoredNames).Contains (e.Name) == false).ToList (); " is 217.
Long Statement,Potato.Core.Events,EventsController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Events\EventsController.cs,EventsFetchAfterEventId,The length of the statement  "			events = this.LoggedEvents.Where (e => e.Stamp > DateTime.Now - TimeSpan.FromSeconds (this.Shared.Variables.Get (CommonVariableNames.MaximumEventsTimeSeconds' 300))).Where (e => e.Id > eventId).OrderBy (e => e.Id).ToList (); " is 224.
Long Statement,Potato.Core.Events,PushEventsController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Events\PushEventsController.cs,GroupedVariableListenerOnVariablesModified,The length of the statement  "		String pushUri = this.Shared.Variables.Get (VariableModel.NamespaceVariableName (pushEventsGroupName' CommonVariableNames.EventsPushUri)' String.Empty); " is 152.
Long Statement,Potato.Core.Events,PushEventsController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Events\PushEventsController.cs,GroupedVariableListenerOnVariablesModified,The length of the statement  "					StreamKey = this.Shared.Variables.Get (VariableModel.NamespaceVariableName (pushEventsGroupName' CommonVariableNames.EventPushStreamKey)' String.Empty)' " is 152.
Long Statement,Potato.Core.Events,PushEventsController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Events\PushEventsController.cs,GroupedVariableListenerOnVariablesModified,The length of the statement  "					Uri = new Uri (this.Shared.Variables.Get (VariableModel.NamespaceVariableName (pushEventsGroupName' CommonVariableNames.EventsPushUri)' String.Empty))' " is 151.
Long Statement,Potato.Core.Events,PushEventsController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Events\PushEventsController.cs,GroupedVariableListenerOnVariablesModified,The length of the statement  "					Interval = this.Shared.Variables.Get (VariableModel.NamespaceVariableName (pushEventsGroupName' CommonVariableNames.EventPushIntervalSeconds)' 1)' " is 146.
Long Statement,Potato.Core.Events,PushEventsController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Events\PushEventsController.cs,GroupedVariableListenerOnVariablesModified,The length of the statement  "					ContentType = Mime.ToMimeType (this.Shared.Variables.Get (VariableModel.NamespaceVariableName (pushEventsGroupName' CommonVariableNames.EventPushContentType)' Mime.ApplicationJson)' Mime.ApplicationJson)' " is 204.
Long Statement,Potato.Core.Events,PushEventsController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Events\PushEventsController.cs,GroupedVariableListenerOnVariablesModified,The length of the statement  "					InclusiveNames = this.Shared.Variables.Variable (VariableModel.NamespaceVariableName (pushEventsGroupName' CommonVariableNames.EventPushInclusiveNames)).ToList<String> () " is 170.
Long Statement,Potato.Core.Events,PushEventsController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Events\PushEventsController.cs,GroupedVariableListenerOnVariablesModified,The length of the statement  "				this.EndPoints [pushEventsGroupName].StreamKey = this.Shared.Variables.Get (VariableModel.NamespaceVariableName (pushEventsGroupName' CommonVariableNames.EventPushStreamKey)' String.Empty); " is 189.
Long Statement,Potato.Core.Events,PushEventsController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Events\PushEventsController.cs,GroupedVariableListenerOnVariablesModified,The length of the statement  "				this.EndPoints [pushEventsGroupName].Uri = new Uri (this.Shared.Variables.Get (VariableModel.NamespaceVariableName (pushEventsGroupName' CommonVariableNames.EventsPushUri)' String.Empty)); " is 188.
Long Statement,Potato.Core.Events,PushEventsController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Events\PushEventsController.cs,GroupedVariableListenerOnVariablesModified,The length of the statement  "				this.EndPoints [pushEventsGroupName].Interval = this.Shared.Variables.Get (VariableModel.NamespaceVariableName (pushEventsGroupName' CommonVariableNames.EventPushIntervalSeconds)' 1); " is 183.
Long Statement,Potato.Core.Events,PushEventsController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Events\PushEventsController.cs,GroupedVariableListenerOnVariablesModified,The length of the statement  "				this.EndPoints [pushEventsGroupName].ContentType = Mime.ToMimeType (this.Shared.Variables.Get (VariableModel.NamespaceVariableName (pushEventsGroupName' CommonVariableNames.EventPushContentType)' Mime.ApplicationJson)' Mime.ApplicationJson); " is 241.
Long Statement,Potato.Core.Events,PushEventsController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Events\PushEventsController.cs,GroupedVariableListenerOnVariablesModified,The length of the statement  "				this.EndPoints [pushEventsGroupName].InclusiveNames = this.Shared.Variables.Variable (VariableModel.NamespaceVariableName (pushEventsGroupName' CommonVariableNames.EventPushInclusiveNames)).ToList<String> (); " is 208.
Long Statement,Potato.Core.Events,PushEventsController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Events\PushEventsController.cs,GroupedVariableListenerOnVariablesModified,The length of the statement  "		this.Tasks.Add (new Timer (OnTick' endPoint.Value' TimeSpan.FromMilliseconds (0)' TimeSpan.FromSeconds (endPoint.Value.Interval))); " is 131.
Long Statement,Potato.Core.Events,PushEventsController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Events\PushEventsController.cs,EventsEstablishJsonStream,The length of the statement  "		this.Shared.Variables.Tunnel (CommandBuilder.VariablesSetF (VariableModel.NamespaceVariableName (name' CommonVariableNames.EventPushContentType)' Mime.ApplicationJson).SetOrigin (CommandOrigin.Local)); " is 201.
Long Statement,Potato.Core.Events,PushEventsController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Events\PushEventsController.cs,EventsEstablishJsonStream,The length of the statement  "		this.Shared.Variables.Tunnel (CommandBuilder.VariablesSetF (VariableModel.NamespaceVariableName (name' CommonVariableNames.EventsPushUri)' uri).SetOrigin (CommandOrigin.Local)); " is 177.
Long Statement,Potato.Core.Events,PushEventsController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Events\PushEventsController.cs,EventsEstablishJsonStream,The length of the statement  "		this.Shared.Variables.Tunnel (CommandBuilder.VariablesSetF (VariableModel.NamespaceVariableName (name' CommonVariableNames.EventPushIntervalSeconds)' interval.ToString (CultureInfo.InvariantCulture)).SetOrigin (CommandOrigin.Local)); " is 233.
Long Statement,Potato.Core.Events,PushEventsController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Events\PushEventsController.cs,EventsEstablishJsonStream,The length of the statement  "		this.Shared.Variables.Tunnel (CommandBuilder.VariablesSetF (VariableModel.NamespaceVariableName (name' CommonVariableNames.EventPushStreamKey)' key).SetOrigin (CommandOrigin.Local)); " is 182.
Long Statement,Potato.Core.Events,PushEventsController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Events\PushEventsController.cs,EventsEstablishJsonStream,The length of the statement  "		this.Shared.Variables.Tunnel (CommandBuilder.VariablesSetF (VariableModel.NamespaceVariableName (name' CommonVariableNames.EventPushInclusiveNames)' inclusive).SetOrigin (CommandOrigin.Local)); " is 193.
Long Statement,Potato.Core.Events,PushEventsController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Events\PushEventsController.cs,EventsEstablishJsonStream,The length of the statement  "		ICommandResult uris = this.Shared.Variables.Tunnel (CommandBuilder.VariablesGet (CommonVariableNames.EventsPushConfigGroups).SetOrigin (CommandOrigin.Local)); " is 158.
Long Statement,Potato.Core.Events,PushEventsController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Events\PushEventsController.cs,EventsEstablishJsonStream,The length of the statement  "		var content = uris.Now.Variables != null ? uris.Now.Variables.SelectMany (variable => variable.ToList<String> ()).ToList () : new List<String> (); " is 146.
Long Statement,Potato.Core.Events,PushEventsController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Events\PushEventsController.cs,EventsEstablishJsonStream,The length of the statement  "			this.Shared.Variables.Tunnel (CommandBuilder.VariablesSetF (CommonVariableNames.EventsPushConfigGroups' content.Union (new List<String> () { " is 140.
Long Statement,Potato.Core.Packages,AvailableCacheBuilder,D:\newReposJune17\phogue_Potato\src\Potato.Core\Packages\AvailableCacheBuilder.cs,Build,The length of the statement  "			packageWrapper.State = availablePackage.Version.CompareTo (new SemanticVersion (packageWrapper.Installed.Version)) > 0 ? PackageState.UpdateAvailable : PackageState.Installed; " is 175.
Long Statement,Potato.Core.Packages,PackagesController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Packages\PackagesController.cs,PackagesMergePackage,The length of the statement  "			var repository = this.Cache.Repositories.FirstOrDefault (repo => repo.Packages.Any (pack => pack.Id == packageId) == true); " is 123.
Long Statement,Potato.Core.Packages,PackagesController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Packages\PackagesController.cs,PackagesUninstallPackage,The length of the statement  "			var repository = this.Cache.Repositories.FirstOrDefault (repo => repo.Packages.Any (pack => pack.Id == packageId) == true); " is 123.
Long Statement,Potato.Core.Packages,PackagesController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Packages\PackagesController.cs,PackagesAppendRepository,The length of the statement  "		this.Shared.Variables.Tunnel (CommandBuilder.VariablesSetA (VariableModel.NamespaceVariableName (sluggedUri' CommonVariableNames.PackagesRepositoryUri)' uri).SetOrigin (CommandOrigin.Local)); " is 191.
Long Statement,Potato.Core.Packages,PackagesController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Packages\PackagesController.cs,PackagesAppendRepository,The length of the statement  "		ICommandResult uris = this.Shared.Variables.Tunnel (CommandBuilder.VariablesGet (CommonVariableNames.PackagesConfigGroups).SetOrigin (CommandOrigin.Local)); " is 156.
Long Statement,Potato.Core.Packages,PackagesController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Packages\PackagesController.cs,PackagesAppendRepository,The length of the statement  "		var content = uris.Now.Variables != null ? uris.Now.Variables.SelectMany (variable => variable.ToList<String> ()).ToList () : new List<String> (); " is 146.
Long Statement,Potato.Core.Packages,PackagesController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Packages\PackagesController.cs,PackagesAppendRepository,The length of the statement  "			this.Shared.Variables.Tunnel (CommandBuilder.VariablesSetA (CommonVariableNames.PackagesConfigGroups' content.Union (new List<String> () { " is 138.
Long Statement,Potato.Core.Packages,PackagesController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Packages\PackagesController.cs,PackagesRemoveRepository,The length of the statement  "		this.Shared.Variables.Tunnel (CommandBuilder.VariablesSetA (VariableModel.NamespaceVariableName (sluggedUri' CommonVariableNames.PackagesRepositoryUri)' "").SetOrigin (CommandOrigin.Local)); " is 190.
Long Statement,Potato.Core.Packages,PackagesController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Packages\PackagesController.cs,PackagesRemoveRepository,The length of the statement  "		ICommandResult uris = this.Shared.Variables.Tunnel (CommandBuilder.VariablesGet (CommonVariableNames.PackagesConfigGroups).SetOrigin (CommandOrigin.Local)); " is 156.
Long Statement,Potato.Core.Packages,PackagesController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Packages\PackagesController.cs,PackagesRemoveRepository,The length of the statement  "		var content = uris.Now.Variables != null ? uris.Now.Variables.SelectMany (variable => variable.ToList<String> ()).ToList () : new List<String> (); " is 146.
Long Statement,Potato.Core.Packages,PackagesController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Packages\PackagesController.cs,PackagesRemoveRepository,The length of the statement  "			this.Shared.Variables.Tunnel (CommandBuilder.VariablesSetA (CommonVariableNames.PackagesConfigGroups' content).SetOrigin (CommandOrigin.Local)); " is 144.
Long Statement,Potato.Core.Packages,PackagesController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Packages\PackagesController.cs,GroupedVariableListenerOnVariablesModified,The length of the statement  "		String uri = this.Shared.Variables.Get (VariableModel.NamespaceVariableName (repositoryGroupName' CommonVariableNames.PackagesRepositoryUri)' String.Empty); " is 156.
Long Statement,Potato.Core.Packages,InstalledCacheBuilder,D:\newReposJune17\phogue_Potato\src\Potato.Core\Packages\InstalledCacheBuilder.cs,Build,The length of the statement  "			packageWrapper.State = installedPackage.Version.CompareTo (new SemanticVersion (packageWrapper.Available.Version)) < 0 ? PackageState.UpdateAvailable : PackageState.Installed; " is 175.
Long Statement,Potato.Core.Packages,RepositoryCache,D:\newReposJune17\phogue_Potato\src\Potato.Core\Packages\RepositoryCache.cs,Build,The length of the statement  "		foreach (RepositoryModel repository in this.Repositories.Where (repository => String.IsNullOrEmpty (repository.Uri) == false)) { " is 128.
Long Statement,Potato.Core.Packages,RepositoryCache,D:\newReposJune17\phogue_Potato\src\Potato.Core\Packages\RepositoryCache.cs,Build,The length of the statement  "				var query = this.GetCachedSourceRepository (repository.Uri).GetPackages ().Where (package => package.IsLatestVersion == true); " is 126.
Long Statement,Potato.Core.Packages,RepositoryCache,D:\newReposJune17\phogue_Potato\src\Potato.Core\Packages\RepositoryCache.cs,Build,The length of the statement  "				Defines.PackageRequiredTags.ForEach (tag => query = query.Where (package => package.Tags != null && package.Tags.Contains (tag))); " is 130.
Long Statement,Potato.Core.Packages,RepositoryCache,D:\newReposJune17\phogue_Potato\src\Potato.Core\Packages\RepositoryCache.cs,Build,The length of the statement  "		IEnumerable<String> availablePackageIds = this.Repositories.SelectMany (repository => repository.Packages).Select (packageWrapper => packageWrapper.Id); " is 152.
Long Statement,Potato.Core.Remote,CertificateController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Remote\CertificateController.cs,Load,The length of the statement  "	return this.Load (this.Shared.Variables.Get (CommonVariableNames.CommandServerCertificatePath' Defines.CertificatesDirectoryCommandServerPfx.FullName)' this.Shared.Variables.Get<String> (CommonVariableNames.CommandServerCertificatePassword)); " is 242.
Long Statement,Potato.Core.Remote,CommandServerSerializer,D:\newReposJune17\phogue_Potato\src\Potato.Core\Remote\CommandServerSerializer.cs,ResponseContentType,The length of the statement  "		contentType = command.Request.Tags.ContainsKey (HttpRequestHeader.ContentType.ToString ()) == true ? command.Request.Tags [HttpRequestHeader.ContentType.ToString ()].ToLower () : Mime.ApplicationJson; " is 200.
Long Statement,Potato.Core.Remote,CommandServerController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Remote\CommandServerController.cs,Execute,The length of the statement  "	this.Shared.Variables.Variable (CommonVariableNames.CommandServerEnabled).PropertyChanged += new System.ComponentModel.PropertyChangedEventHandler (OnPropertyChanged); " is 167.
Long Statement,Potato.Core.Remote,CommandServerController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Remote\CommandServerController.cs,Execute,The length of the statement  "	this.Shared.Variables.Variable (CommonVariableNames.CommandServerPort).PropertyChanged += new System.ComponentModel.PropertyChangedEventHandler (OnPropertyChanged); " is 164.
Long Statement,Potato.Core.Remote,CommandServerController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Remote\CommandServerController.cs,Execute,The length of the statement  "	this.Shared.Variables.Variable (CommonVariableNames.CommandServerCertificatePath).PropertyChanged += new System.ComponentModel.PropertyChangedEventHandler (OnPropertyChanged); " is 175.
Long Statement,Potato.Core.Remote,CommandServerController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Remote\CommandServerController.cs,Dispose,The length of the statement  "	this.Shared.Variables.Variable (CommonVariableNames.CommandServerEnabled).PropertyChanged -= new System.ComponentModel.PropertyChangedEventHandler (OnPropertyChanged); " is 167.
Long Statement,Potato.Core.Remote,CommandServerController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Remote\CommandServerController.cs,Dispose,The length of the statement  "	this.Shared.Variables.Variable (CommonVariableNames.CommandServerPort).PropertyChanged -= new System.ComponentModel.PropertyChangedEventHandler (OnPropertyChanged); " is 164.
Long Statement,Potato.Core.Remote,CommandServerController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Remote\CommandServerController.cs,Dispose,The length of the statement  "	this.Shared.Variables.Variable (CommonVariableNames.CommandServerCertificatePath).PropertyChanged -= new System.ComponentModel.PropertyChangedEventHandler (OnPropertyChanged); " is 175.
Long Statement,Potato.Core.Remote,CommandServerController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Remote\CommandServerController.cs,OnBeginException,The length of the statement  "	Potato.Service.Shared.ServiceControllerHelpers.LogUnhandledException ("CommandServerController.OnBeginException"' exception); " is 125.
Long Statement,Potato.Core.Remote,CommandServerController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Remote\CommandServerController.cs,OnListenerException,The length of the statement  "	Potato.Service.Shared.ServiceControllerHelpers.LogUnhandledException ("CommandServerController.OnListenerException"' exception); " is 128.
Long Statement,Potato.Core.Remote,CommandServerController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Remote\CommandServerController.cs,ExtractIdentifer,The length of the statement  "	if (request != null && request.Packet != null && request.Packet.RemoteEndPoint != null && request.Packet.RemoteEndPoint.Address != null) { " is 138.
Long Statement,Potato.Core.Remote,CommandServerController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Remote\CommandServerController.cs,Authenticate,The length of the statement  "	if (String.IsNullOrEmpty (command.Authentication.Username) == false && String.IsNullOrEmpty (command.Authentication.PasswordPlainText) == false) { " is 146.
Long Statement,Potato.Core.Remote,CommandServerController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Remote\CommandServerController.cs,Authenticate,The length of the statement  "		result = this.Shared.Security.Tunnel (CommandBuilder.SecurityAccountAuthenticate (command.Authentication.Username' command.Authentication.PasswordPlainText' this.ExtractIdentifer (request)).SetOrigin (CommandOrigin.Remote)); " is 224.
Long Statement,Potato.Core.Remote,CommandServerController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Remote\CommandServerController.cs,Authenticate,The length of the statement  "	} else if (command.Authentication.TokenId != Guid.Empty && String.IsNullOrEmpty (command.Authentication.Token) == false) { " is 122.
Long Statement,Potato.Core.Remote,CommandServerController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Remote\CommandServerController.cs,Authenticate,The length of the statement  "		result = this.Shared.Security.Tunnel (CommandBuilder.SecurityAccountAuthenticateToken (command.Authentication.TokenId' command.Authentication.Token' this.ExtractIdentifer (request)).SetOrigin (CommandOrigin.Remote)); " is 216.
Long Statement,Potato.Core.Remote,CommandServerController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Remote\CommandServerController.cs,OnPacketReceived,The length of the statement  "			if (String.CompareOrdinal (command.Name' CommandType.SecurityAccountAuthenticate.ToString ()) == 0 || String.CompareOrdinal (command.Name' CommandType.SecurityAccountAuthenticateToken.ToString ()) == 0) { " is 204.
Long Statement,Potato.Core.Remote,CommandServerController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Remote\CommandServerController.cs,OnPacketReceived,The length of the statement  "				response = CommandServerSerializer.CompleteResponsePacket (CommandServerSerializer.ResponseContentType (command)' response' authentication); " is 140.
Long Statement,Potato.Core.Remote,CommandServerController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Remote\CommandServerController.cs,OnPacketReceived,The length of the statement  "				response = CommandServerSerializer.CompleteResponsePacket (CommandServerSerializer.ResponseContentType (command)' response' result); " is 132.
Long Statement,Potato.Core.Remote,CommandServerController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Remote\CommandServerController.cs,OnPacketReceived,The length of the statement  "			response = CommandServerSerializer.CompleteResponsePacket (CommandServerSerializer.ResponseContentType (command)' response' authentication); " is 140.
Long Statement,Potato.Core,SharedReferences,D:\newReposJune17\phogue_Potato\src\Potato.Core\SharedReferences.cs,Setup,The length of the statement  "	if (SharedReferences._masterVariables != null && SharedReferences._masterLanguages != null && SharedReferences._masterSecurity != null && SharedReferences._masterEvents != null) { " is 179.
Long Statement,Potato.Core,SharedReferences,D:\newReposJune17\phogue_Potato\src\Potato.Core\SharedReferences.cs,Setup,The length of the statement  "		SharedReferences._masterVariables.Shared.Variables = SharedReferences._masterLanguages.Shared.Variables = SharedReferences._masterSecurity.Shared.Variables = SharedReferences._masterEvents.Shared.Variables = SharedReferences._masterVariables; " is 242.
Long Statement,Potato.Core,SharedReferences,D:\newReposJune17\phogue_Potato\src\Potato.Core\SharedReferences.cs,Setup,The length of the statement  "		SharedReferences._masterVariables.Shared.Languages = SharedReferences._masterLanguages.Shared.Languages = SharedReferences._masterSecurity.Shared.Languages = SharedReferences._masterEvents.Shared.Languages = SharedReferences._masterLanguages; " is 242.
Long Statement,Potato.Core,SharedReferences,D:\newReposJune17\phogue_Potato\src\Potato.Core\SharedReferences.cs,Setup,The length of the statement  "		SharedReferences._masterVariables.Shared.Security = SharedReferences._masterLanguages.Shared.Security = SharedReferences._masterSecurity.Shared.Security = SharedReferences._masterEvents.Shared.Security = SharedReferences._masterSecurity; " is 237.
Long Statement,Potato.Core,SharedReferences,D:\newReposJune17\phogue_Potato\src\Potato.Core\SharedReferences.cs,Setup,The length of the statement  "		SharedReferences._masterVariables.Shared.Events = SharedReferences._masterLanguages.Shared.Events = SharedReferences._masterSecurity.Shared.Events = SharedReferences._masterEvents.Shared.Events = SharedReferences._masterEvents; " is 227.
Long Statement,Potato.Core,PotatoController,D:\newReposJune17\phogue_Potato\src\Potato.Core\PotatoController.cs,Packages_Tick,The length of the statement  "		this.Shared.Variables.Variable (CommonVariableNames.PackagesRepositoryUri).Value = this.Shared.Variables.Get (CommonVariableNames.PackagesDefaultSourceRepositoryUri' Defines.PackagesDefaultSourceRepositoryUri); " is 210.
Long Statement,Potato.Core,PotatoController,D:\newReposJune17\phogue_Potato\src\Potato.Core\PotatoController.cs,Execute,The length of the statement  "	}' new Config ().Load (new DirectoryInfo (Defines.ConfigsDirectory.FullName))' this.Shared.Variables.Get<String> (CommonVariableNames.PotatoConfigPassword)); " is 157.
Long Statement,Potato.Core,PotatoController,D:\newReposJune17\phogue_Potato\src\Potato.Core\PotatoController.cs,TunnelExecutableObjects,The length of the statement  "		this.Connections.Where (connection => connection.ConnectionModel.ConnectionGuid == command.Scope.ConnectionGuid).ToList ().ForEach (list.Add); " is 142.
Long Statement,Potato.Core,PotatoController,D:\newReposJune17\phogue_Potato\src\Potato.Core\PotatoController.cs,PotatoAddConnection,The length of the statement  "			if (this.Connections.FirstOrDefault (c => c.ConnectionModel.ProtocolType.Type == protocolTypeType && c.ConnectionModel.Hostname == hostName && c.ConnectionModel.Port == port) == null) { " is 185.
Long Statement,Potato.Core,PotatoController,D:\newReposJune17\phogue_Potato\src\Potato.Core\PotatoController.cs,PotatoAddConnection,The length of the statement  "				var supportCheckResult = this.Protocols.Tunnel (CommandBuilder.ProtocolsCheckSupportedProtocol (protocolTypeProvider' protocolTypeType).SetOrigin (CommandOrigin.Local)); " is 169.
Long Statement,Potato.Core,PotatoController,D:\newReposJune17\phogue_Potato\src\Potato.Core\PotatoController.cs,PotatoAddConnection,The length of the statement  "					connection.SetupProtocol (supportCheckResult.Now.ProtocolAssemblyMetadatas.First ()' supportCheckResult.Now.ProtocolTypes.First ()' new ProtocolSetup () { " is 154.
Long Statement,Potato.Core,PotatoController,D:\newReposJune17\phogue_Potato\src\Potato.Core\PotatoController.cs,PotatoAddConnection,The length of the statement  "						ConfigDirectory = meta.Directory.GetDirectories (Defines.ProtocolsDirectoryName' SearchOption.AllDirectories).Select (directory => directory.FullName).FirstOrDefault () " is 168.
Long Statement,Potato.Core,PotatoController,D:\newReposJune17\phogue_Potato\src\Potato.Core\PotatoController.cs,PotatoAddConnection,The length of the statement  "					Message = String.Format (@"Game type ""{0}"" with connection to {1}:{2} has already been added."' protocolTypeType' hostName' port)' " is 132.
Long Statement,Potato.Core,PotatoController,D:\newReposJune17\phogue_Potato\src\Potato.Core\PotatoController.cs,PotatoRemoveConnection,The length of the statement  "				Message = String.Format (@"Successfully removed connection with connection to {0}:{1} and game type ""{2}""."' connection.ConnectionModel.Hostname' connection.ConnectionModel.Port' connection)' " is 193.
Long Statement,Potato.Core,PotatoController,D:\newReposJune17\phogue_Potato\src\Potato.Core\PotatoController.cs,PotatoRemoveConnectionByGuid,The length of the statement  "	IConnectionController connection = this.Connections.FirstOrDefault (x => String.Compare (x.ConnectionModel.ConnectionGuid.ToString ()' connectionGuid' StringComparison.OrdinalIgnoreCase) == 0); " is 193.
Long Statement,Potato.Core,PotatoController,D:\newReposJune17\phogue_Potato\src\Potato.Core\PotatoController.cs,PotatoRemoveConnectionByDetails,The length of the statement  "	IConnectionController connection = this.Connections.FirstOrDefault (c => c.ConnectionModel.ProtocolType.Provider == gameTypeProvider && c.ConnectionModel.ProtocolType.Type == gameTypeType && c.ConnectionModel.Hostname == hostName && c.ConnectionModel.Port == port); " is 265.
Long Statement,Potato.Core.Database,DatabaseController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Database\DatabaseController.cs,GroupedVariableListenerOnVariablesModified,The length of the statement  "		IDriver driver = this.AvailableDrivers.FirstOrDefault (pool => String.Compare (pool.Name' this.Shared.Variables.Get<String> (VariableModel.NamespaceVariableName (databaseGroupName' CommonVariableNames.DatabaseDriverName))' StringComparison.InvariantCultureIgnoreCase) == 0); " is 274.
Long Statement,Potato.Core.Database,DatabaseController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Database\DatabaseController.cs,GroupedVariableListenerOnVariablesModified,The length of the statement  "					Hostname = this.Shared.Variables.Get (VariableModel.NamespaceVariableName (databaseGroupName' CommonVariableNames.DatabaseHostname)' String.Empty)' " is 147.
Long Statement,Potato.Core.Database,DatabaseController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Database\DatabaseController.cs,GroupedVariableListenerOnVariablesModified,The length of the statement  "					Port = this.Shared.Variables.Get<ushort> (VariableModel.NamespaceVariableName (databaseGroupName' CommonVariableNames.DatabasePort))' " is 133.
Long Statement,Potato.Core.Database,DatabaseController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Database\DatabaseController.cs,GroupedVariableListenerOnVariablesModified,The length of the statement  "					Username = this.Shared.Variables.Get (VariableModel.NamespaceVariableName (databaseGroupName' CommonVariableNames.DatabaseUid)' String.Empty)' " is 142.
Long Statement,Potato.Core.Database,DatabaseController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Database\DatabaseController.cs,GroupedVariableListenerOnVariablesModified,The length of the statement  "					Password = this.Shared.Variables.Get (VariableModel.NamespaceVariableName (databaseGroupName' CommonVariableNames.DatabasePassword)' String.Empty)' " is 147.
Long Statement,Potato.Core.Database,DatabaseController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Database\DatabaseController.cs,GroupedVariableListenerOnVariablesModified,The length of the statement  "					Database = this.Shared.Variables.Get (VariableModel.NamespaceVariableName (databaseGroupName' CommonVariableNames.DatabaseName)' String.Empty)' " is 143.
Long Statement,Potato.Core.Database,DatabaseController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Database\DatabaseController.cs,GroupedVariableListenerOnVariablesModified,The length of the statement  "					Memory = this.Shared.Variables.Get (VariableModel.NamespaceVariableName (databaseGroupName' CommonVariableNames.DatabaseMemory)' false) " is 135.
Long Statement,Potato.Core.Database,DatabaseController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Database\DatabaseController.cs,GroupedVariableListenerOnVariablesModified,The length of the statement  "					Hostname = this.Shared.Variables.Get (VariableModel.NamespaceVariableName (databaseGroupName' CommonVariableNames.DatabaseHostname)' String.Empty)' " is 147.
Long Statement,Potato.Core.Database,DatabaseController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Database\DatabaseController.cs,GroupedVariableListenerOnVariablesModified,The length of the statement  "					Port = this.Shared.Variables.Get<ushort> (VariableModel.NamespaceVariableName (databaseGroupName' CommonVariableNames.DatabasePort))' " is 133.
Long Statement,Potato.Core.Database,DatabaseController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Database\DatabaseController.cs,GroupedVariableListenerOnVariablesModified,The length of the statement  "					Username = this.Shared.Variables.Get (VariableModel.NamespaceVariableName (databaseGroupName' CommonVariableNames.DatabaseUid)' String.Empty)' " is 142.
Long Statement,Potato.Core.Database,DatabaseController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Database\DatabaseController.cs,GroupedVariableListenerOnVariablesModified,The length of the statement  "					Password = this.Shared.Variables.Get (VariableModel.NamespaceVariableName (databaseGroupName' CommonVariableNames.DatabasePassword)' String.Empty)' " is 147.
Long Statement,Potato.Core.Database,DatabaseController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Database\DatabaseController.cs,GroupedVariableListenerOnVariablesModified,The length of the statement  "					Database = this.Shared.Variables.Get (VariableModel.NamespaceVariableName (databaseGroupName' CommonVariableNames.DatabaseName)' String.Empty)' " is 143.
Long Statement,Potato.Core.Database,DatabaseController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Database\DatabaseController.cs,GroupedVariableListenerOnVariablesModified,The length of the statement  "					Memory = this.Shared.Variables.Get (VariableModel.NamespaceVariableName (databaseGroupName' CommonVariableNames.DatabaseMemory)' false) " is 135.
Long Statement,Potato.Core.Database,DatabaseController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Database\DatabaseController.cs,Query,The length of the statement  "	return this.Shared.Security.DispatchPermissionsCheck (command' command.Name).Success == true ? this.ExecuteQueriesOnAllDrivers (parameters ["query"].All<IDatabaseObject> ()) : CommandResult.InsufficientPermissions; " is 214.
Long Statement,Potato.Core.Database,DatabaseController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Database\DatabaseController.cs,QueryDriver,The length of the statement  "	return this.Shared.Security.DispatchPermissionsCheck (command' command.Name).Success == true ? this.ExecuteQueriesOnGroupName (parameters ["driver"].First<String> ()' parameters ["query"].All<IDatabaseObject> ()) : CommandResult.InsufficientPermissions; " is 253.
Long Statement,Potato.Core.Variables,GroupedVariableListener,D:\newReposJune17\phogue_Potato\src\Potato.Core\Variables\GroupedVariableListener.cs,AssignEvents,The length of the statement  "			this.ListeningVariables.Add (this.Variables.Variable (VariableModel.NamespaceVariableName (groupName' listeningVariable))); " is 123.
Long Statement,Potato.Core.Variables,VariableController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Variables\VariableController.cs,Set,The length of the statement  "	if (command.Origin == CommandOrigin.Local || this.Shared.Security.DispatchPermissionsCheck (command' command.Name).Success == true) { " is 133.
Long Statement,Potato.Core.Variables,VariableController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Variables\VariableController.cs,Set,The length of the statement  "					Message = String.Format (@"Successfully set value of variable name ""{0}"" to ""{1}""."' variable.Name' variable.Value)' " is 120.
Long Statement,Potato.Core.Variables,VariableController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Variables\VariableController.cs,SetA,The length of the statement  "	if (command.Origin == CommandOrigin.Local || this.Shared.Security.DispatchPermissionsCheck (command' command.Name).Success == true) { " is 133.
Long Statement,Potato.Core.Variables,VariableController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Variables\VariableController.cs,SetA,The length of the statement  "				Message = String.Format (@"Successfully set value of variable name ""{0}"" to ""{1}""."' variable.Name' variable.Value)' " is 120.
Long Statement,Potato.Core.Variables,VariableController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Variables\VariableController.cs,SetF,The length of the statement  "	if (command.Origin == CommandOrigin.Local || this.Shared.Security.DispatchPermissionsCheck (command' command.Name).Success == true) { " is 133.
Long Statement,Potato.Core.Variables,VariableController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Variables\VariableController.cs,SetF,The length of the statement  "				Message = String.Format (@"Successfully set value of variable name ""{0}"" to ""{1}""."' variable.Name' variable.Value)' " is 120.
Long Statement,Potato.Core.Variables,VariableController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Variables\VariableController.cs,Get,The length of the statement  "	if (command.Origin == CommandOrigin.Local || this.Shared.Security.DispatchPermissionsCheck (command' command.Name).Success == true) { " is 133.
Long Statement,Potato.Core.Localization,LanguageController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Localization\LanguageController.cs,Execute,The length of the statement  "	var languageDirectories = new DirectoryInfo (Defines.PackagesDirectory.FullName).GetDirectories (Defines.LocalizationDirectoryName' SearchOption.AllDirectories).Union (new[] { " is 175.
Long Statement,Potato.Core.Localization,LanguageController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Localization\LanguageController.cs,AssignEvents,The length of the statement  "	this.Shared.Variables.Variable (CommonVariableNames.LocalizationDefaultLanguageCode).PropertyChanged += new System.ComponentModel.PropertyChangedEventHandler (LanguageController_PropertyChanged); " is 195.
Long Statement,Potato.Core.Localization,LanguageController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Localization\LanguageController.cs,UnassignEvents,The length of the statement  "	this.Shared.Variables.Variable (CommonVariableNames.LocalizationDefaultLanguageCode).PropertyChanged -= new System.ComponentModel.PropertyChangedEventHandler (LanguageController_PropertyChanged); " is 195.
Long Statement,Potato.Core.Localization,LanguageController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Localization\LanguageController.cs,LoadDefaultLanguage,The length of the statement  "	String languageCode = this.Shared.Variables.Variable (CommonVariableNames.LocalizationDefaultLanguageCode).ToType ("en-GB"); " is 124.
Long Statement,Potato.Core.Localization,LanguageController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Localization\LanguageController.cs,LoadDefaultLanguage,The length of the statement  "	LanguageConfig language = this.LoadedLanguageFiles.FirstOrDefault (lang => lang.LanguageModel.LanguageCode == languageCode); " is 124.
Long Statement,Potato.Core.Localization,LanguageController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Localization\LanguageController.cs,Localize,The length of the statement  "	if (command.Origin == CommandOrigin.Local || this.Shared.Security.DispatchPermissionsCheck (command' command.Name).Success == true) { " is 133.
Long Statement,Potato.Core.Localization,LanguageController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Localization\LanguageController.cs,Localize,The length of the statement  "		LanguageConfig language = this.LoadedLanguageFiles.FirstOrDefault (lang => lang.LanguageModel.LanguageCode == languageCode) ?? this.Default; " is 140.
Long Statement,Potato.Core.Localization,LanguageController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Localization\LanguageController.cs,Localize,The length of the statement  "				Message = String.Format (@"Language with the code ""{0}"" does not exist and no default language specified."' languageCode) " is 123.
Long Statement,Potato.Core.Localization,LanguageController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Localization\LanguageController.cs,FindOptimalLanguageConfig,The length of the statement  "	var found = this.LoadedLanguageFiles.Find (config => config.LanguageModel.LanguageCode.ToLowerInvariant () == languageCode.ToLowerInvariant ()); " is 144.
Long Statement,Potato.Core.Localization,LanguageConfig,D:\newReposJune17\phogue_Potato\src\Potato.Core\Localization\LanguageConfig.cs,Localize,The length of the statement  "		this.Cached.Add (@namespace' this.Config.RootOf (@namespace).Select (item => item.ToObject<LanguageEntryModel> ()).ToList ()); " is 126.
Long Statement,Potato.Core.Security,SecurityController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Security\SecurityController.cs,Poke,The length of the statement  "	var expiredThreshold = DateTime.Now.AddSeconds (-1 * Math.Abs (this.Shared.Variables.Get (CommonVariableNames.SecurityMaximumAccessTokenLastTouchedLengthSeconds' 172800))); " is 172.
Long Statement,Potato.Core.Security,SecurityController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Security\SecurityController.cs,Poke,The length of the statement  "		foreach (var tokenId in account.AccessTokens.Where (token => token.Value.LastTouched < expiredThreshold).Select (token => token.Key)) { " is 135.
Long Statement,Potato.Core.Security,SecurityController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Security\SecurityController.cs,WriteConfig,The length of the statement  "				config.Append (CommandBuilder.SecurityGroupSetPermission (group.Name' permission.Name' permission.Authority.Value).ToConfigCommand ()); " is 135.
Long Statement,Potato.Core.Security,SecurityController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Security\SecurityController.cs,WriteConfig,The length of the statement  "			config.Append (CommandBuilder.SecurityAccountSetPasswordHash (account.Username' account.PasswordHash).ToConfigCommand ()); " is 122.
Long Statement,Potato.Core.Security,SecurityController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Security\SecurityController.cs,WriteConfig,The length of the statement  "			config.Append (CommandBuilder.SecurityAccountSetPreferredLanguageCode (account.Username' account.PreferredLanguageCode).ToConfigCommand ()); " is 140.
Long Statement,Potato.Core.Security,SecurityController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Security\SecurityController.cs,WriteConfig,The length of the statement  "				config.Append (CommandBuilder.SecurityAccountAddPlayer (account.Username' assignment.ProtocolType' assignment.Uid).ToConfigCommand ()); " is 135.
Long Statement,Potato.Core.Security,SecurityController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Security\SecurityController.cs,WriteConfig,The length of the statement  "				config.Append (CommandBuilder.SecurityAccountAppendAccessToken (account.Username' token.Id' token.TokenHash' token.LastTouched).ToConfigCommand ()); " is 148.
Long Statement,Potato.Core.Security,SecurityController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Security\SecurityController.cs,SecurityRemoveAccount,The length of the statement  "				AccountModel account = this.Groups.SelectMany (group => @group.Accounts).FirstOrDefault (a => String.Compare (a.Username' username' StringComparison.OrdinalIgnoreCase) == 0); " is 174.
Long Statement,Potato.Core.Security,SecurityController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Security\SecurityController.cs,SecurityRemovePlayer,The length of the statement  "			AccountPlayerModel player = this.Groups.SelectMany (group => @group.Accounts).SelectMany (account => account.Players).FirstOrDefault (x => x.ProtocolType == gameType && x.Uid == uid); " is 183.
Long Statement,Potato.Core.Security,SecurityController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Security\SecurityController.cs,SecurityRemovePlayer,The length of the statement  "					Message = String.Format (@"Player with UID of ""{0}"" in game type ""{1}"" removed from account ""{2}""."' player.Uid' player.ProtocolType' player.Account.Username)' " is 165.
Long Statement,Potato.Core.Security,SecurityController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Security\SecurityController.cs,DispatchPermissionsCheck,The length of the statement  "	var guestAuthority = this.Groups.Where (group => group.IsGuest).SelectMany (group => group.Permissions).Where (permission => permission.Name == commandName).Select (permission => permission.Authority).FirstOrDefault (); " is 219.
Long Statement,Potato.Core.Security,SecurityController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Security\SecurityController.cs,DispatchPermissionsCheck,The length of the statement  "		if (command.Authentication.Username == null && command.Authentication.Uid == null && command.Authentication.GameType == CommonProtocolType.None) { " is 146.
Long Statement,Potato.Core.Security,SecurityController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Security\SecurityController.cs,DispatchPermissionsCheckByAccountPlayerDetails,The length of the statement  "	return this.DispatchPermissionsCheck (command' this.GetAccount (command)' commandName' this.GetAccount (targetGameType' targetUid)); " is 132.
Long Statement,Potato.Core.Security,SecurityController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Security\SecurityController.cs,DispatchPermissionsCheckByAccountDetails,The length of the statement  "	return this.DispatchPermissionsCheck (command' this.GetAccount (command)' commandName' this.GetAccount (targetAccountName)); " is 124.
Long Statement,Potato.Core.Security,SecurityController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Security\SecurityController.cs,HighestAuthority,The length of the statement  "	return account != null ? account.Group.Permissions.Where (perm => perm.Name == permission).Select (perm => perm.Authority).FirstOrDefault () : null; " is 148.
Long Statement,Potato.Core.Security,SecurityController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Security\SecurityController.cs,GetAccount,The length of the statement  "	return this.GetAccount (command.Authentication.Username) ?? this.GetAccount (command.Authentication.TokenId) ?? this.GetAccount (command.Authentication.GameType' command.Authentication.Uid); " is 190.
Long Statement,Potato.Core.Security,SecurityController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Security\SecurityController.cs,GetAccount,The length of the statement  "	return this.Groups.SelectMany (group => group.Accounts).SelectMany (account => account.Players).Where (player => player.ProtocolType == gameType).Where (player => player.Uid == uid).Select (player => player.Account).FirstOrDefault (); " is 234.
Long Statement,Potato.Core.Security,SecurityController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Security\SecurityController.cs,GetAccount,The length of the statement  "	return this.Groups.SelectMany (group => group.Accounts).FirstOrDefault (account => String.Compare (account.Username' username' StringComparison.OrdinalIgnoreCase) == 0); " is 169.
Long Statement,Potato.Core.Security,SecurityController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Security\SecurityController.cs,GetAccount,The length of the statement  "	return this.Groups.SelectMany (group => group.Accounts).FirstOrDefault (account => account.AccessTokens.ContainsKey (tokenId)); " is 127.
Long Statement,Potato.Core.Security,SecurityController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Security\SecurityController.cs,SecurityGroupSetPermission,The length of the statement  "		// If it's the users group AND (the permission to set permissions OR the permission is to authenticate) AND they are changing the permission to nothing " is 151.
Long Statement,Potato.Core.Security,SecurityController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Security\SecurityController.cs,SecurityGroupSetPermission,The length of the statement  "		bool willResultInSystemLockout = this.DispatchGroupCheck (command' groupName).Success == true && (permissionName == CommandType.SecurityGroupSetPermission.ToString () || permissionName == CommandType.SecurityAccountAuthenticate.ToString ()) && authority <= 0; " is 259.
Long Statement,Potato.Core.Security,SecurityController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Security\SecurityController.cs,SecurityGroupSetPermission,The length of the statement  "					this.Shared.Events.Log (GenericEvent.ConvertToGenericEvent (result' GenericEventType.SecurityGroupPermissionAuthorityChanged)); " is 127.
Long Statement,Potato.Core.Security,SecurityController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Security\SecurityController.cs,SecurityGroupAppendPermissionTrait,The length of the statement  "				this.Shared.Events.Log (GenericEvent.ConvertToGenericEvent (result' GenericEventType.SecurityGroupPermissionTraitAppended)); " is 124.
Long Statement,Potato.Core.Security,SecurityController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Security\SecurityController.cs,SecurityGroupRemovePermissionTrait,The length of the statement  "					this.Shared.Events.Log (GenericEvent.ConvertToGenericEvent (result' GenericEventType.SecurityGroupPermissionTraitRemoved)); " is 123.
Long Statement,Potato.Core.Security,SecurityController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Security\SecurityController.cs,SecurityGroupSetPermissionDescription,The length of the statement  "				this.Shared.Events.Log (GenericEvent.ConvertToGenericEvent (result' GenericEventType.SecurityGroupPermissionTraitAppended)); " is 124.
Long Statement,Potato.Core.Security,SecurityController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Security\SecurityController.cs,SecurityGroupCopyPermissions,The length of the statement  "					PermissionModel destinationPermission = destinationGroup.Permissions.FirstOrDefault (permission => sourcePermission.Name == permission.Name); " is 141.
Long Statement,Potato.Core.Security,SecurityController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Security\SecurityController.cs,SecurityGroupCopyPermissions,The length of the statement  "					Message = String.Format (@"Successfully copied permissions from group ""{0}"" to {1}."' sourceGroup.Name' destinationGroup.Name)' " is 129.
Long Statement,Potato.Core.Security,SecurityController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Security\SecurityController.cs,SecurityGroupAddAccount,The length of the statement  "					AccountModel account = this.Groups.SelectMany (g => g.Accounts).FirstOrDefault (a => String.Compare (a.Username' username' StringComparison.OrdinalIgnoreCase) == 0); " is 165.
Long Statement,Potato.Core.Security,SecurityController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Security\SecurityController.cs,SecurityAccountAddPlayer,The length of the statement  "		AccountModel account = this.Groups.SelectMany (g => g.Accounts).FirstOrDefault (a => String.Compare (a.Username' username' StringComparison.OrdinalIgnoreCase) == 0); " is 165.
Long Statement,Potato.Core.Security,SecurityController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Security\SecurityController.cs,SecurityAccountAddPlayer,The length of the statement  "				AccountPlayerModel player = this.Groups.SelectMany (group => @group.Accounts).SelectMany (a => a.Players).FirstOrDefault (x => x.ProtocolType == gameType && x.Uid == uid); " is 171.
Long Statement,Potato.Core.Security,SecurityController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Security\SecurityController.cs,SecurityAccountAddPlayer,The length of the statement  "						Message = String.Format (@"Player with UID of ""{0}"" in game type ""{1}"" added to account ""{2}""."' player.Uid' player.ProtocolType' account.Username)' " is 154.
Long Statement,Potato.Core.Security,SecurityController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Security\SecurityController.cs,SecurityAccountAddPlayer,The length of the statement  "						Message = String.Format (@"Player with UID of ""{0}"" in game type ""{1}"" added to account ""{2}""."' player.Uid' player.ProtocolType' account.Username)' " is 154.
Long Statement,Potato.Core.Security,SecurityController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Security\SecurityController.cs,SecurityAccountSetPassword,The length of the statement  "		AccountModel account = this.Groups.SelectMany (g => g.Accounts).FirstOrDefault (a => String.Compare (a.Username' username' StringComparison.OrdinalIgnoreCase) == 0); " is 165.
Long Statement,Potato.Core.Security,SecurityController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Security\SecurityController.cs,SecurityAccountSetPasswordHash,The length of the statement  "		AccountModel account = this.Groups.SelectMany (g => g.Accounts).FirstOrDefault (a => String.Compare (a.Username' username' StringComparison.OrdinalIgnoreCase) == 0); " is 165.
Long Statement,Potato.Core.Security,SecurityController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Security\SecurityController.cs,SecurityAccountAppendAccessToken,The length of the statement  "		AccountModel account = this.Groups.SelectMany (g => g.Accounts).FirstOrDefault (a => String.Compare (a.Username' username' StringComparison.OrdinalIgnoreCase) == 0); " is 165.
Long Statement,Potato.Core.Security,SecurityController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Security\SecurityController.cs,SecurityAccountAppendAccessToken,The length of the statement  "			if (id != Guid.Empty && tokenHash.Length > 0 && lastTouched > DateTime.Now.AddSeconds (-1 * Math.Abs (this.Shared.Variables.Get (CommonVariableNames.SecurityMaximumAccessTokenLastTouchedLengthSeconds' 172800)))) { " is 213.
Long Statement,Potato.Core.Security,SecurityController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Security\SecurityController.cs,SecurityAccountAppendAccessToken,The length of the statement  "					ExpiredWindowSeconds = this.Shared.Variables.Get (CommonVariableNames.SecurityMaximumAccessTokenLastTouchedLengthSeconds' 172800) " is 129.
Long Statement,Potato.Core.Security,SecurityController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Security\SecurityController.cs,SecurityAccountAppendAccessToken,The length of the statement  "				while (account.AccessTokens.Count > 0 && account.AccessTokens.Count > this.Shared.Variables.Get (CommonVariableNames.SecurityMaximumAccessTokensPerAccount' 5)) { " is 161.
Long Statement,Potato.Core.Security,SecurityController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Security\SecurityController.cs,GenerateAccessToken,The length of the statement  "		ExpiredWindowSeconds = this.Shared.Variables.Get (CommonVariableNames.SecurityMaximumAccessTokenLastTouchedLengthSeconds' 172800) " is 129.
Long Statement,Potato.Core.Security,SecurityController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Security\SecurityController.cs,GenerateAccessToken,The length of the statement  "		this.Tunnel (CommandBuilder.SecurityAccountAppendAccessToken (account.Username' accessToken.Id' accessToken.TokenHash' accessToken.LastTouched).SetOrigin (CommandOrigin.Local)); " is 177.
Long Statement,Potato.Core.Security,SecurityController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Security\SecurityController.cs,SecurityAccountAuthenticate,The length of the statement  "		AccountModel account = this.Groups.SelectMany (g => g.Accounts).FirstOrDefault (a => String.Compare (a.Username' username' StringComparison.OrdinalIgnoreCase) == 0); " is 165.
Long Statement,Potato.Core.Security,SecurityController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Security\SecurityController.cs,SecurityAccountAuthenticate,The length of the statement  "				if (String.CompareOrdinal (account.PasswordHash' BCrypt.Net.BCrypt.HashPassword (passwordPlainText' account.PasswordHash)) == 0) { " is 130.
Long Statement,Potato.Core.Security,SecurityController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Security\SecurityController.cs,SecurityAccountAuthenticateToken,The length of the statement  "		AccessTokenModel accountAccessToken = this.Groups.SelectMany (group => group.Accounts).Where (account => account.AccessTokens.ContainsKey (id)).SelectMany (account => account.AccessTokens).Where (accessToken => accessToken.Key == id).Select (accessToken => accessToken.Value).FirstOrDefault (); " is 294.
Long Statement,Potato.Core.Security,SecurityController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Security\SecurityController.cs,SecurityAccountAuthenticateToken,The length of the statement  "					Message = String.Format (@"Successfully authenticated against account with username ""{0}""."' accountAccessToken.Account.Username)' " is 132.
Long Statement,Potato.Core.Security,SecurityController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Security\SecurityController.cs,SecurityAccountAuthenticateToken,The length of the statement  "					this.Shared.Events.Log (GenericEvent.ConvertToGenericEvent (result' GenericEventType.SecurityAccountTokenAuthenticated)); " is 121.
Long Statement,Potato.Core.Security,SecurityController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Security\SecurityController.cs,SecurityAccountSetPreferredLanguageCode,The length of the statement  "	if (this.DispatchPermissionsCheck (command' command.Name).Success == true || this.DispatchIdentityCheck (command' username).Success == true) { " is 142.
Long Statement,Potato.Core.Security,SecurityController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Security\SecurityController.cs,SecurityAccountSetPreferredLanguageCode,The length of the statement  "		AccountModel account = this.Groups.SelectMany (g => g.Accounts).FirstOrDefault (a => String.Compare (a.Username' username' StringComparison.OrdinalIgnoreCase) == 0); " is 165.
Long Statement,Potato.Core.Security,SecurityController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Security\SecurityController.cs,SecurityAccountSetPreferredLanguageCode,The length of the statement  "			LanguageModel language = this.Shared.Languages.LoadedLanguageFiles.Where (l => l.LanguageModel.LanguageCode == languageCode).Select (l => l.LanguageModel).FirstOrDefault (); " is 173.
Long Statement,Potato.Core.Security,SecurityController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Security\SecurityController.cs,SecurityAccountSetPreferredLanguageCode,The length of the statement  "				Message = String.Format (@"Account with username ""{0}"" set preferred language to ""{1}""."' account.Username' languageCode) " is 125.
Complex Conditional,Potato.Core.Remote,CommandServerController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Remote\CommandServerController.cs,ExtractIdentifer,The conditional expression  "request != null && request.Packet != null && request.Packet.RemoteEndPoint != null && request.Packet.RemoteEndPoint.Address != null"  is complex.
Complex Conditional,Potato.Core,SharedReferences,D:\newReposJune17\phogue_Potato\src\Potato.Core\SharedReferences.cs,Setup,The conditional expression  "SharedReferences._masterVariables != null && SharedReferences._masterLanguages != null && SharedReferences._masterSecurity != null && SharedReferences._masterEvents != null"  is complex.
Magic Number,Potato.Core.Connections,ConnectionController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Connections\ConnectionController.cs,Protocol_ProtocolEvent,The following statement contains a magic number: if (e.ProtocolEventType == ProtocolEventType.ProtocolChat) {  	ChatModel chat = e.Now.Chats.First ();  	// At least has the first prefix character   	// and a little something-something to pass to  	// the parser.  	if (chat.Now.Content != null && chat.Now.Content.Count > 0 && chat.Now.Content.First ().Length >= 2) {  		String prefix = chat.Now.Content.First ().First ().ToString (CultureInfo.InvariantCulture);  		String text = chat.Now.Content.First ().Remove (0' 1);  		bool execute = prefix == this.Shared.Variables.Get<String> (CommonVariableNames.TextCommandPublicPrefix) || prefix == this.Shared.Variables.Get<String> (CommonVariableNames.TextCommandProtectedPrefix) || prefix == this.Shared.Variables.Get<String> (CommonVariableNames.TextCommandPrivatePrefix);  		if (execute == true) {  			this.Tunnel (new Command () {  				Origin = CommandOrigin.Plugin'  				Authentication =  {  					GameType = this.ConnectionModel.ProtocolType.Type'  					Uid = chat.Now.Players.First ().Uid  				}'  				CommandType = CommandType.TextCommandsExecute'  				Parameters = new List<ICommandParameter> () {  					new CommandParameter () {  						Data =  {  							Content = new List<String> () {  								text  							}  						}  					}  				}  			});  		}  	}  }  
Magic Number,Potato.Core.Connections,ConnectionController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Connections\ConnectionController.cs,Protocol_ProtocolEvent,The following statement contains a magic number: if (chat.Now.Content != null && chat.Now.Content.Count > 0 && chat.Now.Content.First ().Length >= 2) {  	String prefix = chat.Now.Content.First ().First ().ToString (CultureInfo.InvariantCulture);  	String text = chat.Now.Content.First ().Remove (0' 1);  	bool execute = prefix == this.Shared.Variables.Get<String> (CommonVariableNames.TextCommandPublicPrefix) || prefix == this.Shared.Variables.Get<String> (CommonVariableNames.TextCommandProtectedPrefix) || prefix == this.Shared.Variables.Get<String> (CommonVariableNames.TextCommandPrivatePrefix);  	if (execute == true) {  		this.Tunnel (new Command () {  			Origin = CommandOrigin.Plugin'  			Authentication =  {  				GameType = this.ConnectionModel.ProtocolType.Type'  				Uid = chat.Now.Players.First ().Uid  			}'  			CommandType = CommandType.TextCommandsExecute'  			Parameters = new List<ICommandParameter> () {  				new CommandParameter () {  					Data =  {  						Content = new List<String> () {  							text  						}  					}  				}  			}  		});  	}  }  
Magic Number,Potato.Core.Connections.Plugins,CorePluginController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Connections\Plugins\CorePluginController.cs,GetPluginAssemblies,The following statement contains a magic number: return Directory.GetFiles (Defines.PackagesDirectory.FullName' @"*.Plugins.*.dll"' SearchOption.AllDirectories).Select (path => new FileInfo (path)).Where (file => file.Name != Defines.PotatoCoreDll && file.Name != Defines.PotatoNetDll && file.Name != Defines.PotatoFuzzyDll && file.Name != Defines.NewtonsoftJsonDll && file.Name != Defines.PotatoCoreSharedDll && file.Name != Defines.PotatoDatabaseSharedDll && file.Name != Defines.PotatoNetSharedDll).Where (file => Regex.Matches (file.FullName' file.Name.Replace (file.Extension' String.Empty)).Cast<Match> ().Count () >= 2).ToList ();  
Magic Number,Potato.Core.Protocols,ProtocolController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Protocols\ProtocolController.cs,GetProtocolAssemblies,The following statement contains a magic number: return Directory.GetFiles (this.PackagesDirectory.FullName' @"*.Protocols.*.dll"' SearchOption.AllDirectories).Select (path => new FileInfo (path)).Where (file => Regex.Matches (file.FullName' file.Name.Replace (file.Extension' String.Empty)).Cast<Match> ().Count () >= 2).ToList ();  
Magic Number,Potato.Core.Connections.TextCommands.Parsers,RouteParser,D:\newReposJune17\phogue_Potato\src\Potato.Core\Connections\TextCommands\Parsers\RouteParser.cs,TryMatchPlayers,The following statement contains a magic number: for (var offset = 0; match.Groups ["player" + offset].Success == true && matching == true; offset++) {  	var text = match.Groups ["player" + offset].Value;  	PlayerModel player = this.Connection.ProtocolState.Players.Values.FirstOrDefault (p => Math.Max (p.NameStripped.DePluralStringSimularity (text)' p.Name.DePluralStringSimularity (text)) >= this.MinimumSimilarity (55' 70' maximumNameLength' p.Name.Length));  	if (player != null) {  		result.Players.Add (player);  	} else {  		matching = false;  	}  }  
Magic Number,Potato.Core.Connections.TextCommands.Parsers,RouteParser,D:\newReposJune17\phogue_Potato\src\Potato.Core\Connections\TextCommands\Parsers\RouteParser.cs,TryMatchPlayers,The following statement contains a magic number: for (var offset = 0; match.Groups ["player" + offset].Success == true && matching == true; offset++) {  	var text = match.Groups ["player" + offset].Value;  	PlayerModel player = this.Connection.ProtocolState.Players.Values.FirstOrDefault (p => Math.Max (p.NameStripped.DePluralStringSimularity (text)' p.Name.DePluralStringSimularity (text)) >= this.MinimumSimilarity (55' 70' maximumNameLength' p.Name.Length));  	if (player != null) {  		result.Players.Add (player);  	} else {  		matching = false;  	}  }  
Magic Number,Potato.Core.Connections.TextCommands.Parsers,RouteParser,D:\newReposJune17\phogue_Potato\src\Potato.Core\Connections\TextCommands\Parsers\RouteParser.cs,TryMatchMaps,The following statement contains a magic number: for (var offset = 0; match.Groups ["map" + offset].Success == true && matching == true; offset++) {  	var text = match.Groups ["map" + offset].Value;  	MapModel map = this.Connection.ProtocolState.MapPool.Values.FirstOrDefault (m => Math.Max (m.FriendlyName.DePluralStringSimularity (text)' m.Name.DePluralStringSimularity (text)) >= 60);  	if (map != null) {  		result.Maps.Add (map);  	} else {  		matching = false;  	}  }  
Magic Number,Potato.Core.Connections.TextCommands.Parsers,FuzzyParser,D:\newReposJune17\phogue_Potato\src\Potato.Core\Connections\TextCommands\Parsers\FuzzyParser.cs,ParseItemNames,The following statement contains a magic number: if (items.Any ()) {  	phrase.AppendDistinctRange (new List<Token> () {  		new ThingObjectToken () {  			Reference = new ItemThingReference () {  				Items = items.Select (item => item.item).ToList ()  			}'  			Text = phrase.Text'  			Similarity = items.Max (item => item.Similarity)'  			MinimumWeightedSimilarity = 60  		}  	});  }  
Magic Number,Potato.Core.Connections.TextCommands.Parsers,FuzzyParser,D:\newReposJune17\phogue_Potato\src\Potato.Core\Connections\TextCommands\Parsers\FuzzyParser.cs,ParseItemNames,The following statement contains a magic number: phrase.AppendDistinctRange (new List<Token> () {  	new ThingObjectToken () {  		Reference = new ItemThingReference () {  			Items = items.Select (item => item.item).ToList ()  		}'  		Text = phrase.Text'  		Similarity = items.Max (item => item.Similarity)'  		MinimumWeightedSimilarity = 60  	}  });  
Magic Number,Potato.Core.Connections.TextCommands.Parsers,FuzzyParser,D:\newReposJune17\phogue_Potato\src\Potato.Core\Connections\TextCommands\Parsers\FuzzyParser.cs,ExtractCommandList,The following statement contains a magic number: foreach (Phrase phrase in sentence) {  	if (phrase.Count > 0 && phrase [0] == mainMethod) {  		// Only bubble up very close matching arguments.  		phrase.RemoveAll (token => token.Similarity < 80);  	}  	// Select them as good alternatives   	resultMethodList.AddRange (phrase.OfType<MethodObjectToken> ().ToList ());  	// Then remove them for the remainder of the execution.  	phrase.RemoveAll (token => token is MethodObjectToken);  }  
Magic Number,Potato.Core.Connections.TextCommands.Parsers,FuzzyParser,D:\newReposJune17\phogue_Potato\src\Potato.Core\Connections\TextCommands\Parsers\FuzzyParser.cs,ExtractCommandList,The following statement contains a magic number: if (phrase.Count > 0 && phrase [0] == mainMethod) {  	// Only bubble up very close matching arguments.  	phrase.RemoveAll (token => token.Similarity < 80);  }  
Magic Number,Potato.Core.Connections.TextCommands.Parsers,FuzzyParser,D:\newReposJune17\phogue_Potato\src\Potato.Core\Connections\TextCommands\Parsers\FuzzyParser.cs,ExtractCommandList,The following statement contains a magic number: phrase.RemoveAll (token => token.Similarity < 80);  
Magic Number,Potato.Core.Events,EventsConsoleController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Events\EventsConsoleController.cs,FormatGuid,The following statement contains a magic number: return String.Format ("{0}..{1}"' new String (guid.ToString ().Take (5).ToArray ())' new String (guid.ToString ().Skip (Math.Max (0' guid.ToString ().Count () - 3)).Take (3).ToArray ()));  
Magic Number,Potato.Core.Events,EventsConsoleController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Events\EventsConsoleController.cs,FormatGuid,The following statement contains a magic number: return String.Format ("{0}..{1}"' new String (guid.ToString ().Take (5).ToArray ())' new String (guid.ToString ().Skip (Math.Max (0' guid.ToString ().Count () - 3)).Take (3).ToArray ()));  
Magic Number,Potato.Core.Events,EventsConsoleController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Events\EventsConsoleController.cs,FormatGuid,The following statement contains a magic number: return String.Format ("{0}..{1}"' new String (guid.ToString ().Take (5).ToArray ())' new String (guid.ToString ().Skip (Math.Max (0' guid.ToString ().Count () - 3)).Take (3).ToArray ()));  
Magic Number,Potato.Core.Events,EventsConsoleController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Events\EventsConsoleController.cs,FormatGuid,The following statement contains a magic number: return String.Format ("{0}..{1}"' new String (guid.Take (5).ToArray ())' new String (guid.Skip (Math.Max (0' guid.Count () - 3)).Take (3).ToArray ()));  
Magic Number,Potato.Core.Events,EventsConsoleController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Events\EventsConsoleController.cs,FormatGuid,The following statement contains a magic number: return String.Format ("{0}..{1}"' new String (guid.Take (5).ToArray ())' new String (guid.Skip (Math.Max (0' guid.Count () - 3)).Take (3).ToArray ()));  
Magic Number,Potato.Core.Events,EventsConsoleController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Events\EventsConsoleController.cs,FormatGuid,The following statement contains a magic number: return String.Format ("{0}..{1}"' new String (guid.Take (5).ToArray ())' new String (guid.Skip (Math.Max (0' guid.Count () - 3)).Take (3).ToArray ()));  
Magic Number,Potato.Core.Events,EventsController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Events\EventsController.cs,WriteEvents,The following statement contains a magic number: if (this.LoggedEvents != null) {  	List<IGenericEvent> flushEvents = null;  	DateTime before = now - TimeSpan.FromSeconds (this.Shared.Variables.Get (CommonVariableNames.MaximumEventsTimeSeconds' 30));  	lock (this.LoggedEvents) {  		// All events are appended to the Events list' so we  		// remove all events until we find one that isn't old enough.  		// Provided the event is not ignored (don't write ignored events)  		flushEvents = this.LoggedEvents.Where (e => e.Stamp < before).Where (e => this.Shared.Variables.Get (CommonVariableNames.EventsLogIgnoredNames' this.DefaultEventsLogIgnoredNames).Contains (e.Name) == false).ToList ();  	}  	// Don't hold up other threads attempting to log an event.  	this.WriteEventsList (flushEvents);  	// Now remove all old events. This differs from the events we wrote to disk' as we may  	// have ignored some of the events but we still need to get rid of old events.  	lock (this.LoggedEvents) {  		var flushed = this.LoggedEvents.Where (e => e.Stamp < before).ToList ();  		flushed.ForEach (e => {  			e.Dispose ();  			this.LoggedEvents.Remove (e);  		});  	}  }  
Magic Number,Potato.Core.Events,EventsController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Events\EventsController.cs,EventsFetchAfterEventId,The following statement contains a magic number: if (this.Shared.Security.DispatchPermissionsCheck (command' command.Name).Success == true) {  	List<IGenericEvent> events = null;  	lock (this.LoggedEvents) {  		events = this.LoggedEvents.Where (e => e.Stamp > DateTime.Now - TimeSpan.FromSeconds (this.Shared.Variables.Get (CommonVariableNames.MaximumEventsTimeSeconds' 300))).Where (e => e.Id > eventId).OrderBy (e => e.Id).ToList ();  	}  	result = new CommandResult () {  		Success = true'  		CommandResultType = CommandResultType.Success'  		Message = String.Format (@"Fetched {0} event(s)"' events.Count)'  		Now =  {  			Events = events  		}  	};  } else {  	result = CommandResult.InsufficientPermissions;  }  
Magic Number,Potato.Core.Events,EventsController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Events\EventsController.cs,EventsFetchAfterEventId,The following statement contains a magic number: lock (this.LoggedEvents) {  	events = this.LoggedEvents.Where (e => e.Stamp > DateTime.Now - TimeSpan.FromSeconds (this.Shared.Variables.Get (CommonVariableNames.MaximumEventsTimeSeconds' 300))).Where (e => e.Id > eventId).OrderBy (e => e.Id).ToList ();  }  
Magic Number,Potato.Core.Events,EventsController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Events\EventsController.cs,EventsFetchAfterEventId,The following statement contains a magic number: events = this.LoggedEvents.Where (e => e.Stamp > DateTime.Now - TimeSpan.FromSeconds (this.Shared.Variables.Get (CommonVariableNames.MaximumEventsTimeSeconds' 300))).Where (e => e.Id > eventId).OrderBy (e => e.Id).ToList ();  
Magic Number,Potato.Core.Packages,RepositoryCache,D:\newReposJune17\phogue_Potato\src\Potato.Core\Packages\RepositoryCache.cs,IsCacheBuildable,The following statement contains a magic number: return this.RebuiltTime.HasValue == false || DateTime.Now.AddSeconds (-20) > this.RebuiltTime;  
Magic Number,Potato.Core,PotatoController,D:\newReposJune17\phogue_Potato\src\Potato.Core\PotatoController.cs,PotatoController,The following statement contains a magic number: this.Tasks = new List<Timer> () {  	new Timer (Connection_Tick' this' TimeSpan.FromSeconds (15)' TimeSpan.FromSeconds (15))'  	new Timer (Events_Tick' this' TimeSpan.FromSeconds (60)' TimeSpan.FromSeconds (60))'  	new Timer (CommandServer_Tick' this' TimeSpan.FromSeconds (60)' TimeSpan.FromSeconds (60))'  	new Timer (Packages_Tick' this' TimeSpan.FromSeconds (5)' TimeSpan.FromMinutes (60))'  	new Timer (Security_Tick' this' TimeSpan.FromSeconds (60)' TimeSpan.FromSeconds (60))  };  
Magic Number,Potato.Core,PotatoController,D:\newReposJune17\phogue_Potato\src\Potato.Core\PotatoController.cs,PotatoController,The following statement contains a magic number: this.Tasks = new List<Timer> () {  	new Timer (Connection_Tick' this' TimeSpan.FromSeconds (15)' TimeSpan.FromSeconds (15))'  	new Timer (Events_Tick' this' TimeSpan.FromSeconds (60)' TimeSpan.FromSeconds (60))'  	new Timer (CommandServer_Tick' this' TimeSpan.FromSeconds (60)' TimeSpan.FromSeconds (60))'  	new Timer (Packages_Tick' this' TimeSpan.FromSeconds (5)' TimeSpan.FromMinutes (60))'  	new Timer (Security_Tick' this' TimeSpan.FromSeconds (60)' TimeSpan.FromSeconds (60))  };  
Magic Number,Potato.Core,PotatoController,D:\newReposJune17\phogue_Potato\src\Potato.Core\PotatoController.cs,PotatoController,The following statement contains a magic number: this.Tasks = new List<Timer> () {  	new Timer (Connection_Tick' this' TimeSpan.FromSeconds (15)' TimeSpan.FromSeconds (15))'  	new Timer (Events_Tick' this' TimeSpan.FromSeconds (60)' TimeSpan.FromSeconds (60))'  	new Timer (CommandServer_Tick' this' TimeSpan.FromSeconds (60)' TimeSpan.FromSeconds (60))'  	new Timer (Packages_Tick' this' TimeSpan.FromSeconds (5)' TimeSpan.FromMinutes (60))'  	new Timer (Security_Tick' this' TimeSpan.FromSeconds (60)' TimeSpan.FromSeconds (60))  };  
Magic Number,Potato.Core,PotatoController,D:\newReposJune17\phogue_Potato\src\Potato.Core\PotatoController.cs,PotatoController,The following statement contains a magic number: this.Tasks = new List<Timer> () {  	new Timer (Connection_Tick' this' TimeSpan.FromSeconds (15)' TimeSpan.FromSeconds (15))'  	new Timer (Events_Tick' this' TimeSpan.FromSeconds (60)' TimeSpan.FromSeconds (60))'  	new Timer (CommandServer_Tick' this' TimeSpan.FromSeconds (60)' TimeSpan.FromSeconds (60))'  	new Timer (Packages_Tick' this' TimeSpan.FromSeconds (5)' TimeSpan.FromMinutes (60))'  	new Timer (Security_Tick' this' TimeSpan.FromSeconds (60)' TimeSpan.FromSeconds (60))  };  
Magic Number,Potato.Core,PotatoController,D:\newReposJune17\phogue_Potato\src\Potato.Core\PotatoController.cs,PotatoController,The following statement contains a magic number: this.Tasks = new List<Timer> () {  	new Timer (Connection_Tick' this' TimeSpan.FromSeconds (15)' TimeSpan.FromSeconds (15))'  	new Timer (Events_Tick' this' TimeSpan.FromSeconds (60)' TimeSpan.FromSeconds (60))'  	new Timer (CommandServer_Tick' this' TimeSpan.FromSeconds (60)' TimeSpan.FromSeconds (60))'  	new Timer (Packages_Tick' this' TimeSpan.FromSeconds (5)' TimeSpan.FromMinutes (60))'  	new Timer (Security_Tick' this' TimeSpan.FromSeconds (60)' TimeSpan.FromSeconds (60))  };  
Magic Number,Potato.Core,PotatoController,D:\newReposJune17\phogue_Potato\src\Potato.Core\PotatoController.cs,PotatoController,The following statement contains a magic number: this.Tasks = new List<Timer> () {  	new Timer (Connection_Tick' this' TimeSpan.FromSeconds (15)' TimeSpan.FromSeconds (15))'  	new Timer (Events_Tick' this' TimeSpan.FromSeconds (60)' TimeSpan.FromSeconds (60))'  	new Timer (CommandServer_Tick' this' TimeSpan.FromSeconds (60)' TimeSpan.FromSeconds (60))'  	new Timer (Packages_Tick' this' TimeSpan.FromSeconds (5)' TimeSpan.FromMinutes (60))'  	new Timer (Security_Tick' this' TimeSpan.FromSeconds (60)' TimeSpan.FromSeconds (60))  };  
Magic Number,Potato.Core,PotatoController,D:\newReposJune17\phogue_Potato\src\Potato.Core\PotatoController.cs,PotatoController,The following statement contains a magic number: this.Tasks = new List<Timer> () {  	new Timer (Connection_Tick' this' TimeSpan.FromSeconds (15)' TimeSpan.FromSeconds (15))'  	new Timer (Events_Tick' this' TimeSpan.FromSeconds (60)' TimeSpan.FromSeconds (60))'  	new Timer (CommandServer_Tick' this' TimeSpan.FromSeconds (60)' TimeSpan.FromSeconds (60))'  	new Timer (Packages_Tick' this' TimeSpan.FromSeconds (5)' TimeSpan.FromMinutes (60))'  	new Timer (Security_Tick' this' TimeSpan.FromSeconds (60)' TimeSpan.FromSeconds (60))  };  
Magic Number,Potato.Core,PotatoController,D:\newReposJune17\phogue_Potato\src\Potato.Core\PotatoController.cs,PotatoController,The following statement contains a magic number: this.Tasks = new List<Timer> () {  	new Timer (Connection_Tick' this' TimeSpan.FromSeconds (15)' TimeSpan.FromSeconds (15))'  	new Timer (Events_Tick' this' TimeSpan.FromSeconds (60)' TimeSpan.FromSeconds (60))'  	new Timer (CommandServer_Tick' this' TimeSpan.FromSeconds (60)' TimeSpan.FromSeconds (60))'  	new Timer (Packages_Tick' this' TimeSpan.FromSeconds (5)' TimeSpan.FromMinutes (60))'  	new Timer (Security_Tick' this' TimeSpan.FromSeconds (60)' TimeSpan.FromSeconds (60))  };  
Magic Number,Potato.Core,PotatoController,D:\newReposJune17\phogue_Potato\src\Potato.Core\PotatoController.cs,PotatoController,The following statement contains a magic number: this.Tasks = new List<Timer> () {  	new Timer (Connection_Tick' this' TimeSpan.FromSeconds (15)' TimeSpan.FromSeconds (15))'  	new Timer (Events_Tick' this' TimeSpan.FromSeconds (60)' TimeSpan.FromSeconds (60))'  	new Timer (CommandServer_Tick' this' TimeSpan.FromSeconds (60)' TimeSpan.FromSeconds (60))'  	new Timer (Packages_Tick' this' TimeSpan.FromSeconds (5)' TimeSpan.FromMinutes (60))'  	new Timer (Security_Tick' this' TimeSpan.FromSeconds (60)' TimeSpan.FromSeconds (60))  };  
Magic Number,Potato.Core,PotatoController,D:\newReposJune17\phogue_Potato\src\Potato.Core\PotatoController.cs,PotatoController,The following statement contains a magic number: this.Tasks = new List<Timer> () {  	new Timer (Connection_Tick' this' TimeSpan.FromSeconds (15)' TimeSpan.FromSeconds (15))'  	new Timer (Events_Tick' this' TimeSpan.FromSeconds (60)' TimeSpan.FromSeconds (60))'  	new Timer (CommandServer_Tick' this' TimeSpan.FromSeconds (60)' TimeSpan.FromSeconds (60))'  	new Timer (Packages_Tick' this' TimeSpan.FromSeconds (5)' TimeSpan.FromMinutes (60))'  	new Timer (Security_Tick' this' TimeSpan.FromSeconds (60)' TimeSpan.FromSeconds (60))  };  
Magic Number,Potato.Core,PotatoController,D:\newReposJune17\phogue_Potato\src\Potato.Core\PotatoController.cs,PotatoAddConnection,The following statement contains a magic number: if (this.Shared.Security.DispatchPermissionsCheck (command' command.Name).Success == true) {  	// As long as we have less than the maximum amount of connections...  	if (this.Connections.Count < this.Shared.Variables.Get (CommonVariableNames.MaximumProtocolConnections' 9000)) {  		// As long as the connection for that specific game' hostname' and port does not exist...  		if (this.Connections.FirstOrDefault (c => c.ConnectionModel.ProtocolType.Type == protocolTypeType && c.ConnectionModel.Hostname == hostName && c.ConnectionModel.Port == port) == null) {  			// As long as the game type is defined...  			var supportCheckResult = this.Protocols.Tunnel (CommandBuilder.ProtocolsCheckSupportedProtocol (protocolTypeProvider' protocolTypeType).SetOrigin (CommandOrigin.Local));  			if (supportCheckResult.Success == true) {  				IProtocolAssemblyMetadata meta = supportCheckResult.Now.ProtocolAssemblyMetadatas.First ();  				ConnectionController connection = new ConnectionController () {  					Potato = this  				};  				connection.SetupProtocol (supportCheckResult.Now.ProtocolAssemblyMetadatas.First ()' supportCheckResult.Now.ProtocolTypes.First ()' new ProtocolSetup () {  					Hostname = hostName'  					Port = port'  					Password = password'  					Arguments = ArgumentHelper.ToArguments (additional.Wordify ())'  					ConfigDirectory = meta.Directory.GetDirectories (Defines.ProtocolsDirectoryName' SearchOption.AllDirectories).Select (directory => directory.FullName).FirstOrDefault ()  				});  				lock (this.Connections) {  					this.Connections.Add (connection);  				}  				connection.Execute ();  				connection.AttemptConnection ();  				result = new CommandResult () {  					Message = String.Format ("Successfully added {0} connection."' protocolTypeType)'  					CommandResultType = CommandResultType.Success'  					Success = true'  					Now =  {  						Connections = new List<ConnectionModel> () {  							connection.ConnectionModel  						}  					}  				};  				this.Shared.Events.Log (GenericEvent.ConvertToGenericEvent (result' GenericEventType.PotatoConnectionAdded));  			} else {  				result = new CommandResult () {  					Message = String.Format (@"Protocol type ""{0}"" is not supported."' protocolTypeType)'  					CommandResultType = CommandResultType.DoesNotExists'  					Success = false  				};  			}  		} else {  			result = new CommandResult () {  				Message = String.Format (@"Game type ""{0}"" with connection to {1}:{2} has already been added."' protocolTypeType' hostName' port)'  				CommandResultType = CommandResultType.AlreadyExists'  				Success = false  			};  		}  	} else {  		result = new CommandResult () {  			Message = String.Format (@"Maximum number of game connections exceeded.")'  			CommandResultType = CommandResultType.LimitExceeded'  			Success = false  		};  	}  } else {  	result = CommandResult.InsufficientPermissions;  }  
Magic Number,Potato.Core,PotatoController,D:\newReposJune17\phogue_Potato\src\Potato.Core\PotatoController.cs,PotatoAddConnection,The following statement contains a magic number: if (this.Connections.Count < this.Shared.Variables.Get (CommonVariableNames.MaximumProtocolConnections' 9000)) {  	// As long as the connection for that specific game' hostname' and port does not exist...  	if (this.Connections.FirstOrDefault (c => c.ConnectionModel.ProtocolType.Type == protocolTypeType && c.ConnectionModel.Hostname == hostName && c.ConnectionModel.Port == port) == null) {  		// As long as the game type is defined...  		var supportCheckResult = this.Protocols.Tunnel (CommandBuilder.ProtocolsCheckSupportedProtocol (protocolTypeProvider' protocolTypeType).SetOrigin (CommandOrigin.Local));  		if (supportCheckResult.Success == true) {  			IProtocolAssemblyMetadata meta = supportCheckResult.Now.ProtocolAssemblyMetadatas.First ();  			ConnectionController connection = new ConnectionController () {  				Potato = this  			};  			connection.SetupProtocol (supportCheckResult.Now.ProtocolAssemblyMetadatas.First ()' supportCheckResult.Now.ProtocolTypes.First ()' new ProtocolSetup () {  				Hostname = hostName'  				Port = port'  				Password = password'  				Arguments = ArgumentHelper.ToArguments (additional.Wordify ())'  				ConfigDirectory = meta.Directory.GetDirectories (Defines.ProtocolsDirectoryName' SearchOption.AllDirectories).Select (directory => directory.FullName).FirstOrDefault ()  			});  			lock (this.Connections) {  				this.Connections.Add (connection);  			}  			connection.Execute ();  			connection.AttemptConnection ();  			result = new CommandResult () {  				Message = String.Format ("Successfully added {0} connection."' protocolTypeType)'  				CommandResultType = CommandResultType.Success'  				Success = true'  				Now =  {  					Connections = new List<ConnectionModel> () {  						connection.ConnectionModel  					}  				}  			};  			this.Shared.Events.Log (GenericEvent.ConvertToGenericEvent (result' GenericEventType.PotatoConnectionAdded));  		} else {  			result = new CommandResult () {  				Message = String.Format (@"Protocol type ""{0}"" is not supported."' protocolTypeType)'  				CommandResultType = CommandResultType.DoesNotExists'  				Success = false  			};  		}  	} else {  		result = new CommandResult () {  			Message = String.Format (@"Game type ""{0}"" with connection to {1}:{2} has already been added."' protocolTypeType' hostName' port)'  			CommandResultType = CommandResultType.AlreadyExists'  			Success = false  		};  	}  } else {  	result = new CommandResult () {  		Message = String.Format (@"Maximum number of game connections exceeded.")'  		CommandResultType = CommandResultType.LimitExceeded'  		Success = false  	};  }  
Magic Number,Potato.Core.Variables,VariableController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Variables\VariableController.cs,SetupDefaultVariables,The following statement contains a magic number: this.Set (new Command () {  	Origin = CommandOrigin.Local  }' CommonVariableNames.DatabaseMaximumSelectedRows' 20);  
Magic Number,Potato.Core.Security,SecurityController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Security\SecurityController.cs,SecurityAccountAppendAccessToken,The following statement contains a magic number: if (this.DispatchPermissionsCheck (command' command.Name).Success == true) {  	AccountModel account = this.Groups.SelectMany (g => g.Accounts).FirstOrDefault (a => String.Compare (a.Username' username' StringComparison.OrdinalIgnoreCase) == 0);  	if (account != null) {  		if (id != Guid.Empty && tokenHash.Length > 0 && lastTouched > DateTime.Now.AddSeconds (-1 * Math.Abs (this.Shared.Variables.Get (CommonVariableNames.SecurityMaximumAccessTokenLastTouchedLengthSeconds' 172800)))) {  			// Upsert the token hash  			account.AccessTokens.AddOrUpdate (id' guid => new AccessTokenModel () {  				Id = id'  				Account = account'  				TokenHash = tokenHash'  				LastTouched = lastTouched'  				ExpiredWindowSeconds = this.Shared.Variables.Get (CommonVariableNames.SecurityMaximumAccessTokenLastTouchedLengthSeconds' 172800)  			}' (guid' model) => {  				model.TokenHash = tokenHash;  				model.LastTouched = lastTouched;  				return model;  			});  			// Keep removing token hashes if we've added too many  			while (account.AccessTokens.Count > 0 && account.AccessTokens.Count > this.Shared.Variables.Get (CommonVariableNames.SecurityMaximumAccessTokensPerAccount' 5)) {  				var oldestId = account.AccessTokens.OrderBy (accessToken => accessToken.Value.LastTouched).First ();  				// Remove the token that was touched the longest ago.  				AccessTokenModel removed;  				account.AccessTokens.TryRemove (oldestId.Key' out removed);  			}  			result = new CommandResult () {  				Success = true'  				CommandResultType = CommandResultType.Success'  				Message = String.Format (@"Successfully added token hash to account ""{0}""."' account.Username)  			};  		} else {  			result = new CommandResult () {  				Success = false'  				CommandResultType = CommandResultType.InvalidParameter'  				Message = "An id or tokenHash must not be empty and a lastTouched not expired"  			};  		}  	} else {  		result = new CommandResult () {  			Message = String.Format (@"Account with username ""{0}"" does not exists."' username)'  			Success = false'  			CommandResultType = CommandResultType.DoesNotExists  		};  	}  } else {  	result = CommandResult.InsufficientPermissions;  }  
Magic Number,Potato.Core.Security,SecurityController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Security\SecurityController.cs,SecurityAccountAppendAccessToken,The following statement contains a magic number: if (this.DispatchPermissionsCheck (command' command.Name).Success == true) {  	AccountModel account = this.Groups.SelectMany (g => g.Accounts).FirstOrDefault (a => String.Compare (a.Username' username' StringComparison.OrdinalIgnoreCase) == 0);  	if (account != null) {  		if (id != Guid.Empty && tokenHash.Length > 0 && lastTouched > DateTime.Now.AddSeconds (-1 * Math.Abs (this.Shared.Variables.Get (CommonVariableNames.SecurityMaximumAccessTokenLastTouchedLengthSeconds' 172800)))) {  			// Upsert the token hash  			account.AccessTokens.AddOrUpdate (id' guid => new AccessTokenModel () {  				Id = id'  				Account = account'  				TokenHash = tokenHash'  				LastTouched = lastTouched'  				ExpiredWindowSeconds = this.Shared.Variables.Get (CommonVariableNames.SecurityMaximumAccessTokenLastTouchedLengthSeconds' 172800)  			}' (guid' model) => {  				model.TokenHash = tokenHash;  				model.LastTouched = lastTouched;  				return model;  			});  			// Keep removing token hashes if we've added too many  			while (account.AccessTokens.Count > 0 && account.AccessTokens.Count > this.Shared.Variables.Get (CommonVariableNames.SecurityMaximumAccessTokensPerAccount' 5)) {  				var oldestId = account.AccessTokens.OrderBy (accessToken => accessToken.Value.LastTouched).First ();  				// Remove the token that was touched the longest ago.  				AccessTokenModel removed;  				account.AccessTokens.TryRemove (oldestId.Key' out removed);  			}  			result = new CommandResult () {  				Success = true'  				CommandResultType = CommandResultType.Success'  				Message = String.Format (@"Successfully added token hash to account ""{0}""."' account.Username)  			};  		} else {  			result = new CommandResult () {  				Success = false'  				CommandResultType = CommandResultType.InvalidParameter'  				Message = "An id or tokenHash must not be empty and a lastTouched not expired"  			};  		}  	} else {  		result = new CommandResult () {  			Message = String.Format (@"Account with username ""{0}"" does not exists."' username)'  			Success = false'  			CommandResultType = CommandResultType.DoesNotExists  		};  	}  } else {  	result = CommandResult.InsufficientPermissions;  }  
Magic Number,Potato.Core.Security,SecurityController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Security\SecurityController.cs,SecurityAccountAppendAccessToken,The following statement contains a magic number: if (this.DispatchPermissionsCheck (command' command.Name).Success == true) {  	AccountModel account = this.Groups.SelectMany (g => g.Accounts).FirstOrDefault (a => String.Compare (a.Username' username' StringComparison.OrdinalIgnoreCase) == 0);  	if (account != null) {  		if (id != Guid.Empty && tokenHash.Length > 0 && lastTouched > DateTime.Now.AddSeconds (-1 * Math.Abs (this.Shared.Variables.Get (CommonVariableNames.SecurityMaximumAccessTokenLastTouchedLengthSeconds' 172800)))) {  			// Upsert the token hash  			account.AccessTokens.AddOrUpdate (id' guid => new AccessTokenModel () {  				Id = id'  				Account = account'  				TokenHash = tokenHash'  				LastTouched = lastTouched'  				ExpiredWindowSeconds = this.Shared.Variables.Get (CommonVariableNames.SecurityMaximumAccessTokenLastTouchedLengthSeconds' 172800)  			}' (guid' model) => {  				model.TokenHash = tokenHash;  				model.LastTouched = lastTouched;  				return model;  			});  			// Keep removing token hashes if we've added too many  			while (account.AccessTokens.Count > 0 && account.AccessTokens.Count > this.Shared.Variables.Get (CommonVariableNames.SecurityMaximumAccessTokensPerAccount' 5)) {  				var oldestId = account.AccessTokens.OrderBy (accessToken => accessToken.Value.LastTouched).First ();  				// Remove the token that was touched the longest ago.  				AccessTokenModel removed;  				account.AccessTokens.TryRemove (oldestId.Key' out removed);  			}  			result = new CommandResult () {  				Success = true'  				CommandResultType = CommandResultType.Success'  				Message = String.Format (@"Successfully added token hash to account ""{0}""."' account.Username)  			};  		} else {  			result = new CommandResult () {  				Success = false'  				CommandResultType = CommandResultType.InvalidParameter'  				Message = "An id or tokenHash must not be empty and a lastTouched not expired"  			};  		}  	} else {  		result = new CommandResult () {  			Message = String.Format (@"Account with username ""{0}"" does not exists."' username)'  			Success = false'  			CommandResultType = CommandResultType.DoesNotExists  		};  	}  } else {  	result = CommandResult.InsufficientPermissions;  }  
Magic Number,Potato.Core.Security,SecurityController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Security\SecurityController.cs,SecurityAccountAppendAccessToken,The following statement contains a magic number: if (account != null) {  	if (id != Guid.Empty && tokenHash.Length > 0 && lastTouched > DateTime.Now.AddSeconds (-1 * Math.Abs (this.Shared.Variables.Get (CommonVariableNames.SecurityMaximumAccessTokenLastTouchedLengthSeconds' 172800)))) {  		// Upsert the token hash  		account.AccessTokens.AddOrUpdate (id' guid => new AccessTokenModel () {  			Id = id'  			Account = account'  			TokenHash = tokenHash'  			LastTouched = lastTouched'  			ExpiredWindowSeconds = this.Shared.Variables.Get (CommonVariableNames.SecurityMaximumAccessTokenLastTouchedLengthSeconds' 172800)  		}' (guid' model) => {  			model.TokenHash = tokenHash;  			model.LastTouched = lastTouched;  			return model;  		});  		// Keep removing token hashes if we've added too many  		while (account.AccessTokens.Count > 0 && account.AccessTokens.Count > this.Shared.Variables.Get (CommonVariableNames.SecurityMaximumAccessTokensPerAccount' 5)) {  			var oldestId = account.AccessTokens.OrderBy (accessToken => accessToken.Value.LastTouched).First ();  			// Remove the token that was touched the longest ago.  			AccessTokenModel removed;  			account.AccessTokens.TryRemove (oldestId.Key' out removed);  		}  		result = new CommandResult () {  			Success = true'  			CommandResultType = CommandResultType.Success'  			Message = String.Format (@"Successfully added token hash to account ""{0}""."' account.Username)  		};  	} else {  		result = new CommandResult () {  			Success = false'  			CommandResultType = CommandResultType.InvalidParameter'  			Message = "An id or tokenHash must not be empty and a lastTouched not expired"  		};  	}  } else {  	result = new CommandResult () {  		Message = String.Format (@"Account with username ""{0}"" does not exists."' username)'  		Success = false'  		CommandResultType = CommandResultType.DoesNotExists  	};  }  
Magic Number,Potato.Core.Security,SecurityController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Security\SecurityController.cs,SecurityAccountAppendAccessToken,The following statement contains a magic number: if (account != null) {  	if (id != Guid.Empty && tokenHash.Length > 0 && lastTouched > DateTime.Now.AddSeconds (-1 * Math.Abs (this.Shared.Variables.Get (CommonVariableNames.SecurityMaximumAccessTokenLastTouchedLengthSeconds' 172800)))) {  		// Upsert the token hash  		account.AccessTokens.AddOrUpdate (id' guid => new AccessTokenModel () {  			Id = id'  			Account = account'  			TokenHash = tokenHash'  			LastTouched = lastTouched'  			ExpiredWindowSeconds = this.Shared.Variables.Get (CommonVariableNames.SecurityMaximumAccessTokenLastTouchedLengthSeconds' 172800)  		}' (guid' model) => {  			model.TokenHash = tokenHash;  			model.LastTouched = lastTouched;  			return model;  		});  		// Keep removing token hashes if we've added too many  		while (account.AccessTokens.Count > 0 && account.AccessTokens.Count > this.Shared.Variables.Get (CommonVariableNames.SecurityMaximumAccessTokensPerAccount' 5)) {  			var oldestId = account.AccessTokens.OrderBy (accessToken => accessToken.Value.LastTouched).First ();  			// Remove the token that was touched the longest ago.  			AccessTokenModel removed;  			account.AccessTokens.TryRemove (oldestId.Key' out removed);  		}  		result = new CommandResult () {  			Success = true'  			CommandResultType = CommandResultType.Success'  			Message = String.Format (@"Successfully added token hash to account ""{0}""."' account.Username)  		};  	} else {  		result = new CommandResult () {  			Success = false'  			CommandResultType = CommandResultType.InvalidParameter'  			Message = "An id or tokenHash must not be empty and a lastTouched not expired"  		};  	}  } else {  	result = new CommandResult () {  		Message = String.Format (@"Account with username ""{0}"" does not exists."' username)'  		Success = false'  		CommandResultType = CommandResultType.DoesNotExists  	};  }  
Magic Number,Potato.Core.Security,SecurityController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Security\SecurityController.cs,SecurityAccountAppendAccessToken,The following statement contains a magic number: if (account != null) {  	if (id != Guid.Empty && tokenHash.Length > 0 && lastTouched > DateTime.Now.AddSeconds (-1 * Math.Abs (this.Shared.Variables.Get (CommonVariableNames.SecurityMaximumAccessTokenLastTouchedLengthSeconds' 172800)))) {  		// Upsert the token hash  		account.AccessTokens.AddOrUpdate (id' guid => new AccessTokenModel () {  			Id = id'  			Account = account'  			TokenHash = tokenHash'  			LastTouched = lastTouched'  			ExpiredWindowSeconds = this.Shared.Variables.Get (CommonVariableNames.SecurityMaximumAccessTokenLastTouchedLengthSeconds' 172800)  		}' (guid' model) => {  			model.TokenHash = tokenHash;  			model.LastTouched = lastTouched;  			return model;  		});  		// Keep removing token hashes if we've added too many  		while (account.AccessTokens.Count > 0 && account.AccessTokens.Count > this.Shared.Variables.Get (CommonVariableNames.SecurityMaximumAccessTokensPerAccount' 5)) {  			var oldestId = account.AccessTokens.OrderBy (accessToken => accessToken.Value.LastTouched).First ();  			// Remove the token that was touched the longest ago.  			AccessTokenModel removed;  			account.AccessTokens.TryRemove (oldestId.Key' out removed);  		}  		result = new CommandResult () {  			Success = true'  			CommandResultType = CommandResultType.Success'  			Message = String.Format (@"Successfully added token hash to account ""{0}""."' account.Username)  		};  	} else {  		result = new CommandResult () {  			Success = false'  			CommandResultType = CommandResultType.InvalidParameter'  			Message = "An id or tokenHash must not be empty and a lastTouched not expired"  		};  	}  } else {  	result = new CommandResult () {  		Message = String.Format (@"Account with username ""{0}"" does not exists."' username)'  		Success = false'  		CommandResultType = CommandResultType.DoesNotExists  	};  }  
Magic Number,Potato.Core.Security,SecurityController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Security\SecurityController.cs,SecurityAccountAppendAccessToken,The following statement contains a magic number: if (id != Guid.Empty && tokenHash.Length > 0 && lastTouched > DateTime.Now.AddSeconds (-1 * Math.Abs (this.Shared.Variables.Get (CommonVariableNames.SecurityMaximumAccessTokenLastTouchedLengthSeconds' 172800)))) {  	// Upsert the token hash  	account.AccessTokens.AddOrUpdate (id' guid => new AccessTokenModel () {  		Id = id'  		Account = account'  		TokenHash = tokenHash'  		LastTouched = lastTouched'  		ExpiredWindowSeconds = this.Shared.Variables.Get (CommonVariableNames.SecurityMaximumAccessTokenLastTouchedLengthSeconds' 172800)  	}' (guid' model) => {  		model.TokenHash = tokenHash;  		model.LastTouched = lastTouched;  		return model;  	});  	// Keep removing token hashes if we've added too many  	while (account.AccessTokens.Count > 0 && account.AccessTokens.Count > this.Shared.Variables.Get (CommonVariableNames.SecurityMaximumAccessTokensPerAccount' 5)) {  		var oldestId = account.AccessTokens.OrderBy (accessToken => accessToken.Value.LastTouched).First ();  		// Remove the token that was touched the longest ago.  		AccessTokenModel removed;  		account.AccessTokens.TryRemove (oldestId.Key' out removed);  	}  	result = new CommandResult () {  		Success = true'  		CommandResultType = CommandResultType.Success'  		Message = String.Format (@"Successfully added token hash to account ""{0}""."' account.Username)  	};  } else {  	result = new CommandResult () {  		Success = false'  		CommandResultType = CommandResultType.InvalidParameter'  		Message = "An id or tokenHash must not be empty and a lastTouched not expired"  	};  }  
Magic Number,Potato.Core.Security,SecurityController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Security\SecurityController.cs,SecurityAccountAppendAccessToken,The following statement contains a magic number: if (id != Guid.Empty && tokenHash.Length > 0 && lastTouched > DateTime.Now.AddSeconds (-1 * Math.Abs (this.Shared.Variables.Get (CommonVariableNames.SecurityMaximumAccessTokenLastTouchedLengthSeconds' 172800)))) {  	// Upsert the token hash  	account.AccessTokens.AddOrUpdate (id' guid => new AccessTokenModel () {  		Id = id'  		Account = account'  		TokenHash = tokenHash'  		LastTouched = lastTouched'  		ExpiredWindowSeconds = this.Shared.Variables.Get (CommonVariableNames.SecurityMaximumAccessTokenLastTouchedLengthSeconds' 172800)  	}' (guid' model) => {  		model.TokenHash = tokenHash;  		model.LastTouched = lastTouched;  		return model;  	});  	// Keep removing token hashes if we've added too many  	while (account.AccessTokens.Count > 0 && account.AccessTokens.Count > this.Shared.Variables.Get (CommonVariableNames.SecurityMaximumAccessTokensPerAccount' 5)) {  		var oldestId = account.AccessTokens.OrderBy (accessToken => accessToken.Value.LastTouched).First ();  		// Remove the token that was touched the longest ago.  		AccessTokenModel removed;  		account.AccessTokens.TryRemove (oldestId.Key' out removed);  	}  	result = new CommandResult () {  		Success = true'  		CommandResultType = CommandResultType.Success'  		Message = String.Format (@"Successfully added token hash to account ""{0}""."' account.Username)  	};  } else {  	result = new CommandResult () {  		Success = false'  		CommandResultType = CommandResultType.InvalidParameter'  		Message = "An id or tokenHash must not be empty and a lastTouched not expired"  	};  }  
Magic Number,Potato.Core.Security,SecurityController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Security\SecurityController.cs,SecurityAccountAppendAccessToken,The following statement contains a magic number: if (id != Guid.Empty && tokenHash.Length > 0 && lastTouched > DateTime.Now.AddSeconds (-1 * Math.Abs (this.Shared.Variables.Get (CommonVariableNames.SecurityMaximumAccessTokenLastTouchedLengthSeconds' 172800)))) {  	// Upsert the token hash  	account.AccessTokens.AddOrUpdate (id' guid => new AccessTokenModel () {  		Id = id'  		Account = account'  		TokenHash = tokenHash'  		LastTouched = lastTouched'  		ExpiredWindowSeconds = this.Shared.Variables.Get (CommonVariableNames.SecurityMaximumAccessTokenLastTouchedLengthSeconds' 172800)  	}' (guid' model) => {  		model.TokenHash = tokenHash;  		model.LastTouched = lastTouched;  		return model;  	});  	// Keep removing token hashes if we've added too many  	while (account.AccessTokens.Count > 0 && account.AccessTokens.Count > this.Shared.Variables.Get (CommonVariableNames.SecurityMaximumAccessTokensPerAccount' 5)) {  		var oldestId = account.AccessTokens.OrderBy (accessToken => accessToken.Value.LastTouched).First ();  		// Remove the token that was touched the longest ago.  		AccessTokenModel removed;  		account.AccessTokens.TryRemove (oldestId.Key' out removed);  	}  	result = new CommandResult () {  		Success = true'  		CommandResultType = CommandResultType.Success'  		Message = String.Format (@"Successfully added token hash to account ""{0}""."' account.Username)  	};  } else {  	result = new CommandResult () {  		Success = false'  		CommandResultType = CommandResultType.InvalidParameter'  		Message = "An id or tokenHash must not be empty and a lastTouched not expired"  	};  }  
Magic Number,Potato.Core.Security,SecurityController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Security\SecurityController.cs,SecurityAccountAppendAccessToken,The following statement contains a magic number: account.AccessTokens.AddOrUpdate (id' guid => new AccessTokenModel () {  	Id = id'  	Account = account'  	TokenHash = tokenHash'  	LastTouched = lastTouched'  	ExpiredWindowSeconds = this.Shared.Variables.Get (CommonVariableNames.SecurityMaximumAccessTokenLastTouchedLengthSeconds' 172800)  }' (guid' model) => {  	model.TokenHash = tokenHash;  	model.LastTouched = lastTouched;  	return model;  });  
Magic Number,Potato.Core.Security,SecurityController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Security\SecurityController.cs,SecurityAccountAppendAccessToken,The following statement contains a magic number: while (account.AccessTokens.Count > 0 && account.AccessTokens.Count > this.Shared.Variables.Get (CommonVariableNames.SecurityMaximumAccessTokensPerAccount' 5)) {  	var oldestId = account.AccessTokens.OrderBy (accessToken => accessToken.Value.LastTouched).First ();  	// Remove the token that was touched the longest ago.  	AccessTokenModel removed;  	account.AccessTokens.TryRemove (oldestId.Key' out removed);  }  
Magic Number,Potato.Core.Security,SecurityController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Security\SecurityController.cs,SecuritySetPredefinedAdministratorsPermissions,The following statement contains a magic number: if (this.DispatchPermissionsCheck (command' command.Name).Success == true) {  	GroupModel group = this.Groups.FirstOrDefault (g => g.Name == groupName);  	if (group != null) {  		if (group.IsGuest == false) {  			foreach (var permission in group.Permissions) {  				permission.Authority = 2;  			}  			result = new CommandResult () {  				Success = true'  				CommandResultType = CommandResultType.Success'  				Message = String.Format (@"Group with name ""{0}"" set permissions to predefined administrator setup."' group.Name)  			};  		} else {  			result = new CommandResult () {  				Success = false'  				CommandResultType = CommandResultType.InvalidParameter'  				Message = "Cannot add an account to a guest group"  			};  		}  	} else {  		result = new CommandResult () {  			Message = String.Format (@"Group with name ""{0}"" does not exists."' groupName)'  			Success = false'  			CommandResultType = CommandResultType.DoesNotExists  		};  	}  } else {  	result = CommandResult.InsufficientPermissions;  }  
Magic Number,Potato.Core.Security,SecurityController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Security\SecurityController.cs,SecuritySetPredefinedAdministratorsPermissions,The following statement contains a magic number: if (group != null) {  	if (group.IsGuest == false) {  		foreach (var permission in group.Permissions) {  			permission.Authority = 2;  		}  		result = new CommandResult () {  			Success = true'  			CommandResultType = CommandResultType.Success'  			Message = String.Format (@"Group with name ""{0}"" set permissions to predefined administrator setup."' group.Name)  		};  	} else {  		result = new CommandResult () {  			Success = false'  			CommandResultType = CommandResultType.InvalidParameter'  			Message = "Cannot add an account to a guest group"  		};  	}  } else {  	result = new CommandResult () {  		Message = String.Format (@"Group with name ""{0}"" does not exists."' groupName)'  		Success = false'  		CommandResultType = CommandResultType.DoesNotExists  	};  }  
Magic Number,Potato.Core.Security,SecurityController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Security\SecurityController.cs,SecuritySetPredefinedAdministratorsPermissions,The following statement contains a magic number: if (group.IsGuest == false) {  	foreach (var permission in group.Permissions) {  		permission.Authority = 2;  	}  	result = new CommandResult () {  		Success = true'  		CommandResultType = CommandResultType.Success'  		Message = String.Format (@"Group with name ""{0}"" set permissions to predefined administrator setup."' group.Name)  	};  } else {  	result = new CommandResult () {  		Success = false'  		CommandResultType = CommandResultType.InvalidParameter'  		Message = "Cannot add an account to a guest group"  	};  }  
Magic Number,Potato.Core.Security,SecurityController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Security\SecurityController.cs,SecuritySetPredefinedAdministratorsPermissions,The following statement contains a magic number: foreach (var permission in group.Permissions) {  	permission.Authority = 2;  }  
Magic Number,Potato.Core.Security,SecurityController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Security\SecurityController.cs,SecuritySetPredefinedAdministratorsPermissions,The following statement contains a magic number: permission.Authority = 2;  
Duplicate Code,Potato.Core.Events,PushEventsController,D:\newReposJune17\phogue_Potato\src\Potato.Core\Events\PushEventsController.cs,PushEventsController,The method contains a code clone-set at the following line numbers (starting from the method definition): ((6' 25)' (33' 52))
Missing Default,Potato.Core.Events,PushEventsEndPoint,D:\newReposJune17\phogue_Potato\src\Potato.Core\Events\PushEventsEndPoint.cs,WriteSerializedEventsRequest,The following switch statement is missing a default case: switch (contentType) {  case Mime.ApplicationJson:  	JsonSerializer serializer = new JsonSerializer {  		NullValueHandling = NullValueHandling.Ignore'  		ReferenceLoopHandling = ReferenceLoopHandling.Ignore  	};  	serializer.Serialize (writer' request);  	break;  }  
