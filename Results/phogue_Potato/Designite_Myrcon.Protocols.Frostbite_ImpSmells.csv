Implementation smell,Namespace,Class,File,Method,Description
Long Method,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,FrostbiteGame,The method has 276 lines of code.
Long Method,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,ActionMove,The method has 65 lines of code.
Complex Method,Myrcon.Protocols.Frostbite.Generations.First.Games,FirstGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Generations\First\Games\FirstGame.cs,ActionMap,Cyclomatic complexity of the method is 13
Complex Method,Myrcon.Protocols.Frostbite.Generations.Second.Games,SecondGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Generations\Second\Games\SecondGame.cs,BanListListDispatchHandler,Cyclomatic complexity of the method is 8
Complex Method,Myrcon.Protocols.Frostbite.Generations.Second.Games,SecondGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Generations\Second\Games\SecondGame.cs,ActionMap,Cyclomatic complexity of the method is 13
Complex Method,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,BanListListDispatchHandler,Cyclomatic complexity of the method is 7
Complex Method,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,PunkBusterOnMessageDispatchHandler,Cyclomatic complexity of the method is 7
Complex Method,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,ActionChat,Cyclomatic complexity of the method is 9
Complex Method,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,ActionBan,Cyclomatic complexity of the method is 11
Complex Method,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,ActionMove,Cyclomatic complexity of the method is 14
Complex Method,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,ActionMap,Cyclomatic complexity of the method is 12
Complex Method,Myrcon.Protocols.Frostbite.Objects,FrostbiteBan,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Objects\FrostbiteBan.cs,ParseBanAdd,Cyclomatic complexity of the method is 7
Complex Method,Myrcon.Protocols.Frostbite.Objects,FrostbiteChat,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Objects\FrostbiteChat.cs,Parse,Cyclomatic complexity of the method is 18
Complex Method,Myrcon.Protocols.Frostbite.Objects,FrostbitePlayer,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Objects\FrostbitePlayer.cs,Parse,Cyclomatic complexity of the method is 36
Complex Method,Myrcon.Protocols.Frostbite.Objects,FrostbiteGroupingList,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Objects\FrostbiteGroupingList.cs,Parse,Cyclomatic complexity of the method is 7
Complex Method,Myrcon.Protocols.Frostbite.Objects,FrostbiteServerInfo,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Objects\FrostbiteServerInfo.cs,Parse,Cyclomatic complexity of the method is 17
Long Statement,Myrcon.Protocols.Frostbite.Generations.First.Games,FirstGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Generations\First\Games\FirstGame.cs,ServerOnLevelLoadedDispatchHandler,The length of the statement  "		if (int.TryParse (request.Packet.Words [3]' out currentRound) == true && int.TryParse (request.Packet.Words [4]' out totalRounds) == true) { " is 140.
Long Statement,Myrcon.Protocols.Frostbite.Generations.First.Games,FirstGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Generations\First\Games\FirstGame.cs,PlayerOnKillDispatchHandler,The length of the statement  "			ItemModel item = this.State.Items.Select (i => i.Value).FirstOrDefault (i => i.Name == Regex.Replace (request.Packet.Words [3]' @"[^\w\/_-]+"' "")) ?? new ItemModel () { " is 169.
Long Statement,Myrcon.Protocols.Frostbite.Generations.First.Games,FirstGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Generations\First\Games\FirstGame.cs,ActionMap,The length of the statement  "				wrappers.Add (this.CreatePacket ("mapList.add \"{0}\" \"{1}\" {2} {3}"' map.Name' closureMap.GameMode.Name' map.Rounds' map.Index)); " is 132.
Long Statement,Myrcon.Protocols.Frostbite.Generations.First.Games,FirstGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Generations\First\Games\FirstGame.cs,ActionMap,The length of the statement  "		if (action.ActionType == NetworkActionType.NetworkMapRestart || action.ActionType == NetworkActionType.NetworkMapRoundRestart) { " is 128.
Long Statement,Myrcon.Protocols.Frostbite.Generations.First.Games,FirstGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Generations\First\Games\FirstGame.cs,ActionMap,The length of the statement  "		} else if (action.ActionType == NetworkActionType.NetworkMapNext || action.ActionType == NetworkActionType.NetworkMapRoundNext) { " is 129.
Long Statement,Myrcon.Protocols.Frostbite.Generations.First.Games,MedalOfHonorGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Generations\First\Games\MedalOfHonorGame.cs,ActionMove,The length of the statement  "	bool forceMove = (action.ActionType == NetworkActionType.NetworkPlayerMoveForce || action.ActionType == NetworkActionType.NetworkPlayerMoveRotateForce); " is 152.
Long Statement,Myrcon.Protocols.Frostbite.Generations.First.Games,MedalOfHonorGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Generations\First\Games\MedalOfHonorGame.cs,ActionMove,The length of the statement  "	MapModel selectedMap = this.State.MapPool.Values.FirstOrDefault (x => String.Compare (x.Name' this.State.Settings.Current.MapNameText' StringComparison.OrdinalIgnoreCase) == 0); " is 177.
Long Statement,Myrcon.Protocols.Frostbite.Generations.First.Games,MedalOfHonorGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Generations\First\Games\MedalOfHonorGame.cs,ActionMove,The length of the statement  "		if (action.ActionType == NetworkActionType.NetworkPlayerMoveRotate || action.ActionType == NetworkActionType.NetworkPlayerMoveRotateForce) { " is 140.
Long Statement,Myrcon.Protocols.Frostbite.Generations.First.Games,MedalOfHonorGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Generations\First\Games\MedalOfHonorGame.cs,ActionMove,The length of the statement  "	wrappers.Add (this.CreatePacket ("admin.movePlayer \"{0}\" {1} {2}"' movePlayer.Name' action.Now.Groups.First (group => group.Type == GroupModel.Team).Uid' FrostbiteConverter.BoolToString (forceMove))); " is 202.
Long Statement,Myrcon.Protocols.Frostbite.Generations.Second.Games,Battlefield3Game,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Generations\Second\Games\Battlefield3Game.cs,AdminListPlayersFinalize,The length of the statement  "			Players = new ConcurrentDictionary<String' PlayerModel> (this.State.Players.Where (existing => players.Select (current => current.Uid).Contains (existing.Key) == false).ToDictionary (item => item.Key' item => item.Value)) " is 221.
Long Statement,Myrcon.Protocols.Frostbite.Generations.Second.Games,SecondGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Generations\Second\Games\SecondGame.cs,ServerOnLevelLoadedDispatchHandler,The length of the statement  "		if (int.TryParse (request.Packet.Words [3]' out currentRound) == true && int.TryParse (request.Packet.Words [4]' out totalRounds) == true) { " is 140.
Long Statement,Myrcon.Protocols.Frostbite.Generations.Second.Games,SecondGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Generations\Second\Games\SecondGame.cs,PlayerOnKillDispatchHandler,The length of the statement  "			ItemModel item = this.State.Items.Select (i => i.Value).FirstOrDefault (i => i.Name == Regex.Replace (request.Packet.Words [3]' @"[^\w\/_-]+"' "")) ?? new ItemModel () { " is 169.
Long Statement,Myrcon.Protocols.Frostbite.Generations.Second.Games,SecondGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Generations\Second\Games\SecondGame.cs,BanListListDispatchHandler,The length of the statement  "		List<BanModel> banList = SecondFrostbiteBanList.Parse (response.Packet.Words.GetRange (1' response.Packet.Words.Count - 1)); " is 124.
Long Statement,Myrcon.Protocols.Frostbite.Generations.Second.Games,SecondGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Generations\Second\Games\SecondGame.cs,BanListListDispatchHandler,The length of the statement  "					var key = String.Format ("{0}/{1}"' ban.Scope.Times.First ().Context' ban.Scope.Players.First ().Uid ?? ban.Scope.Players.First ().Name ?? ban.Scope.Players.First ().Ip); " is 170.
Long Statement,Myrcon.Protocols.Frostbite.Generations.Second.Games,SecondGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Generations\Second\Games\SecondGame.cs,MapListListDispatchHandler,The length of the statement  "		List<MapModel> maps = SecondFrostbiteMapList.Parse (response.Packet.Words.GetRange (1' response.Packet.Words.Count - 1)); " is 121.
Long Statement,Myrcon.Protocols.Frostbite.Generations.Second.Games,SecondGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Generations\Second\Games\SecondGame.cs,MapListListDispatchHandler,The length of the statement  "			MapModel mapInfo = this.State.MapPool.Values.FirstOrDefault (m => String.Compare (m.Name' closureMap.Name' StringComparison.OrdinalIgnoreCase) == 0 && String.Compare (m.GameMode.Name' closureMap.GameMode.Name' StringComparison.OrdinalIgnoreCase) == 0); " is 252.
Long Statement,Myrcon.Protocols.Frostbite.Generations.Second.Games,SecondGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Generations\Second\Games\SecondGame.cs,MapListListDispatchHandler,The length of the statement  "			modified.AddOrUpdate (String.Format ("{0}/{1}"' closureMap.GameMode.Name' closureMap.Name)' id => closureMap' (id' model) => closureMap); " is 137.
Long Statement,Myrcon.Protocols.Frostbite.Generations.Second.Games,SecondGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Generations\Second\Games\SecondGame.cs,AdminListPlayersResponseDispatchHandler,The length of the statement  "	List<PlayerModel> players = SecondFrostbitePlayerList.Parse (response.Packet.Words.GetRange (1' response.Packet.Words.Count - 1)); " is 130.
Long Statement,Myrcon.Protocols.Frostbite.Generations.Second.Games,SecondGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Generations\Second\Games\SecondGame.cs,ActionMap,The length of the statement  "				wrappers.Add (this.CreatePacket ("mapList.add \"{0}\" \"{1}\" {2} {3}"' map.Name' closureMap.GameMode.Name' map.Rounds' map.Index)); " is 132.
Long Statement,Myrcon.Protocols.Frostbite.Generations.Second.Games,SecondGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Generations\Second\Games\SecondGame.cs,ActionMap,The length of the statement  "		if (action.ActionType == NetworkActionType.NetworkMapRestart || action.ActionType == NetworkActionType.NetworkMapRoundRestart) { " is 128.
Long Statement,Myrcon.Protocols.Frostbite.Generations.Second.Games,SecondGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Generations\Second\Games\SecondGame.cs,ActionMap,The length of the statement  "		} else if (action.ActionType == NetworkActionType.NetworkMapNext || action.ActionType == NetworkActionType.NetworkMapRoundNext) { " is 129.
Long Statement,Myrcon.Protocols.Frostbite.Generations.Second.Objects,SecondFrostbiteMapList,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Generations\Second\Objects\SecondFrostbiteMapList.cs,Parse,The length of the statement  "			for (int mapOffset = 0' wordIndex = 2; mapOffset < mapsCount && wordIndex < words.Count; mapOffset++' wordIndex += wordsPerMap) { " is 129.
Long Statement,Myrcon.Protocols.Frostbite.Generations.Second.Objects,SecondFrostbitePlayerList,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Generations\Second\Objects\SecondFrostbitePlayerList.cs,Parse,The length of the statement  "					players.Add (FrostbitePlayer.Parse (lstParameters' words.GetRange (currentOffset + i * parameterCount' parameterCount))); " is 121.
Long Statement,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,UpdateSettingsMap,The length of the statement  "	var modified = this.State.Settings.Current.MapNameText != name || this.State.Settings.Current.GameModeNameText != gameModeName; " is 127.
Long Statement,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,UpdateSettingsMap,The length of the statement  "		MapModel oldMap = this.State.MapPool.Select (m => m.Value).FirstOrDefault (map => String.Compare (map.Name' this.State.Settings.Current.MapNameText' StringComparison.OrdinalIgnoreCase) == 0 && String.Compare (map.GameMode.Name' this.State.Settings.Current.GameModeNameText' StringComparison.OrdinalIgnoreCase) == 0); " is 316.
Long Statement,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,UpdateSettingsMap,The length of the statement  "		MapModel currentMap = this.State.MapPool.Select (m => m.Value).FirstOrDefault (map => String.Compare (map.Name' this.State.Settings.Current.MapNameText' StringComparison.OrdinalIgnoreCase) == 0 && String.Compare (map.GameMode.Name' this.State.Settings.Current.GameModeNameText' StringComparison.OrdinalIgnoreCase) == 0); " is 320.
Long Statement,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,ServerInfoDispatchHandler,The length of the statement  "		FrostbiteServerInfo info = new FrostbiteServerInfo ().Parse (response.Packet.Words.GetRange (1' response.Packet.Words.Count - 1)' this.ServerInfoParameters); " is 157.
Long Statement,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,ServerInfoDispatchHandler,The length of the statement  "				config = ProtocolConfigLoader.Load<ProtocolConfigModel> (this.Options.ConfigDirectory' new ProtocolType (this.ProtocolType) { " is 125.
Long Statement,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,LoginHashedDispatchHandler,The length of the statement  "			this.SendRequest ("login.hashed"' this.GeneratePasswordHash (this.HashToByteArray (response.Packet.Words [1])' this.Options.Password)); " is 135.
Long Statement,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,AdminListPlayersFinalize,The length of the statement  "			Players = new ConcurrentDictionary<String' PlayerModel> (this.State.Players.Where (existing => players.Select (current => current.Uid).Contains (existing.Key) == false).ToDictionary (item => item.Key' item => item.Value)) " is 221.
Long Statement,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,AdminListPlayersResponseDispatchHandler,The length of the statement  "	List<PlayerModel> players = FrostbitePlayers.Parse (response.Packet.Words.GetRange (1' response.Packet.Words.Count - 1)); " is 121.
Long Statement,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,MapListListDispatchHandler,The length of the statement  "			MapModel mapInfo = this.State.MapPool.Values.FirstOrDefault (m => String.Compare (m.Name' closureMap.Name' StringComparison.OrdinalIgnoreCase) == 0 && String.Compare (m.GameMode.Name' closureMap.GameMode.Name' StringComparison.OrdinalIgnoreCase) == 0); " is 252.
Long Statement,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,MapListListDispatchHandler,The length of the statement  "			modified.AddOrUpdate (String.Format ("{0}/{1}"' closureMap.GameMode.Name' closureMap.Name)' id => closureMap' (id' model) => closureMap); " is 137.
Long Statement,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,BanListListDispatchHandler,The length of the statement  "				var key = String.Format ("{0}/{1}"' ban.Scope.Times.First ().Context' ban.Scope.Players.First ().Uid ?? ban.Scope.Players.First ().Name ?? ban.Scope.Players.First ().Ip); " is 170.
Long Statement,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,BanListAddDispatchHandler,The length of the statement  "						String.Format ("{0}/{1}"' ban.Scope.Times.First ().Context' ban.Scope.Players.First ().Uid ?? ban.Scope.Players.First ().Name ?? ban.Scope.Players.First ().Ip)' " is 160.
Long Statement,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,BanListRemoveDispatchHandler,The length of the statement  "						String.Format ("{0}/{1}"' ban.Scope.Times.First ().Context' ban.Scope.Players.First ().Uid ?? ban.Scope.Players.First ().Name ?? ban.Scope.Players.First ().Ip)' " is 160.
Long Statement,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,ServerOnLoadingLevelDispatchHandler,The length of the statement  "		if (int.TryParse (request.Packet.Words [2]' out currentRound) == true && int.TryParse (request.Packet.Words [3]' out totalRounds) == true) { " is 140.
Long Statement,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,ServerOnLoadingLevelDispatchHandler,The length of the statement  "			if (String.Compare (this.State.Settings.Current.MapNameText' request.Packet.Words [1]' StringComparison.OrdinalIgnoreCase) == 0) { " is 130.
Long Statement,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,ServerOnLoadingLevelDispatchHandler,The length of the statement  "				MapModel selectedMap = this.State.MapPool.Select (m => m.Value).FirstOrDefault (x => String.Compare (x.Name' request.Packet.Words [1]' StringComparison.OrdinalIgnoreCase) == 0); " is 177.
Long Statement,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,PlayerOnJoinDispatchHandler,The length of the statement  "		// todo this is blanked out to follow a "no unique id' no existence" type of policy instead of juggling different states of players " is 131.
Long Statement,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,PlayerOnLeaveDispatchHandler,The length of the statement  "		PlayerModel player = FrostbitePlayers.Parse (request.Packet.Words.GetRange (2' request.Packet.Words.Count - 2)).FirstOrDefault (); " is 130.
Long Statement,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,PlayerOnChatDispatchHandler,The length of the statement  "				this.State.Players.Select (p => p.Value).FirstOrDefault (player => player.Uid == chat.Scope.Groups.First (group => @group.Type == GroupModel.Player).Uid) " is 153.
Long Statement,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,PlayerOnChatDispatchHandler,The length of the statement  "		if (chat.Now.Players != null && chat.Now.Players.Count > 0 && this.State.Players.Select (p => p.Value).FirstOrDefault (p => p.Name == chat.Now.Players.First ().Name) != null) { " is 176.
Long Statement,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,PlayerOnAuthenticatedDispatchHandler,The length of the statement  "		PlayerModel statePlayer = this.State.Players.Select (p => p.Value).FirstOrDefault (p => p.Name == request.Packet.Words [1]); " is 124.
Long Statement,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,PlayerOnSquadChangeDispatchHandler,The length of the statement  "	if (player != null && int.TryParse (request.Packet.Words [2]' out teamId) == true && int.TryParse (request.Packet.Words [3]' out squadId) == true) { " is 148.
Long Statement,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,PlayerOnTeamChangeDispatchHandler,The length of the statement  "	if (player != null && int.TryParse (request.Packet.Words [2]' out teamId) == true && int.TryParse (request.Packet.Words [3]' out squadId) == true) { " is 148.
Long Statement,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,ActionChat,The length of the statement  "			} else if (action.Scope.Groups != null && action.Scope.Groups.Any (group => @group.Type == GroupModel.Team) == true && action.Scope.Groups.Any (group => @group.Type == GroupModel.Squad) == true) { " is 196.
Long Statement,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,ActionChat,The length of the statement  "				subset = String.Format ("squad {0} {1}"' action.Scope.Groups.First (group => @group.Type == GroupModel.Team).Uid' action.Scope.Groups.First (group => @group.Type == GroupModel.Squad).Uid); " is 188.
Long Statement,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,ActionChat,The length of the statement  "			} else if (action.ActionType == NetworkActionType.NetworkTextYell || action.ActionType == NetworkActionType.NetworkTextYellOnly) { " is 130.
Long Statement,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,ActionKick,The length of the statement  "		wrappers.Add (string.IsNullOrEmpty (reason) == false ? this.CreatePacket ("admin.kickPlayer \"{0}\" \"{1}\""' player.Name' reason) : this.CreatePacket ("admin.kickPlayer \"{0}\""' player.Name)); " is 194.
Long Statement,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,ActionBan,The length of the statement  "	TimeSubsetModel time = action.Scope.Times != null ? action.Scope.Times.FirstOrDefault () ?? new TimeSubsetModel () : new TimeSubsetModel (); " is 140.
Long Statement,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,ActionBan,The length of the statement  "				wrappers.Add (this.CreatePacket ("banList.add guid \"{0}\" seconds {1}"' action.Scope.Players.First ().Uid' time.Length.Value.TotalSeconds)); " is 141.
Long Statement,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,ActionBan,The length of the statement  "				wrappers.Add (this.CreatePacket ("banList.add guid \"{0}\" seconds {1} \"{2}\""' action.Scope.Players.First ().Uid' time.Length.Value.TotalSeconds' reason)); " is 157.
Long Statement,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,ActionMove,The length of the statement  "		bool forceMove = (action.ActionType == NetworkActionType.NetworkPlayerMoveForce || action.ActionType == NetworkActionType.NetworkPlayerMoveRotateForce); " is 152.
Long Statement,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,ActionMove,The length of the statement  "		MapModel selectedMap = this.State.MapPool.Select (m => m.Value).FirstOrDefault (map => String.Compare (map.Name' this.State.Settings.Current.MapNameText' StringComparison.OrdinalIgnoreCase) == 0 && map.GameMode != null && String.Compare (map.GameMode.Name' this.State.Settings.Current.GameModeNameText' StringComparison.OrdinalIgnoreCase) == 0); " is 345.
Long Statement,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,ActionMove,The length of the statement  "					if (action.ActionType == NetworkActionType.NetworkPlayerMoveRotate || action.ActionType == NetworkActionType.NetworkPlayerMoveRotateForce) { " is 140.
Long Statement,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,ActionMove,The length of the statement  "					if (selectedMap != null && selectedMap.GameMode != null && selectedMap.GameMode.DefaultGroups.FirstOrDefault (group => @group.Type == GroupModel.Squad) != null) { " is 162.
Long Statement,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,ActionMove,The length of the statement  "				wrappers.Add (this.CreatePacket ("admin.movePlayer \"{0}\" {1} {2} {3}"' stateMovePlayer.Name' action.Now.Groups.First (group => @group.Type == GroupModel.Team).Uid' action.Now.Groups.First (group => @group.Type == GroupModel.Squad).Uid' FrostbiteConverter.BoolToString (forceMove))); " is 284.
Long Statement,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,ActionMap,The length of the statement  "		} else if (action.ActionType == NetworkActionType.NetworkMapRestart || action.ActionType == NetworkActionType.NetworkMapRoundRestart) { " is 135.
Long Statement,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,ActionMap,The length of the statement  "		} else if (action.ActionType == NetworkActionType.NetworkMapNext || action.ActionType == NetworkActionType.NetworkMapRoundNext) { " is 129.
Long Statement,Myrcon.Protocols.Frostbite,FrostbitePacketDispatcher,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbitePacketDispatcher.cs,Dispatch,The length of the statement  "			if (wrapper.Packet.Words.Count >= 1 && String.CompareOrdinal (wrapper.Packet.Words [0]' FrostbitePacket.StringResponseOkay) == 0) { " is 131.
Long Statement,Myrcon.Protocols.Frostbite,FrostbitePacketDispatcher,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbitePacketDispatcher.cs,Dispatch,The length of the statement  "	} else if (wrapper.Packet.Words.Count >= 1 && wrapper.Packet.Origin == PacketOrigin.Server && wrapper.Packet.Type == PacketType.Request) { " is 138.
Long Statement,Myrcon.Protocols.Frostbite,FrostbitePacketSerializer,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbitePacketSerializer.cs,Serialize,The length of the statement  "		UInt32 header = frostbiteWrapper.Packet.RequestId != null ? (UInt32)frostbiteWrapper.Packet.RequestId & 0x3fffffff : 0x3fffffff; " is 128.
Long Statement,Myrcon.Protocols.Frostbite,FrostbitePacketSerializer,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbitePacketSerializer.cs,Serialize,The length of the statement  "			Encoding.GetEncoding (1252).GetBytes (convertedWord + Convert.ToChar (0x00)).CopyTo (appendEncodedWords' encodedWords.Length + 4); " is 130.
Long Statement,Myrcon.Protocols.Frostbite,FrostbitePacketSerializer,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbitePacketSerializer.cs,Serialize,The length of the statement  "		wrapper.Packet.DebugText = String.Join (" "' wrapper.Packet.Words.Select ((word' index) => String.Format ("[{0}-{1}]"' index' word))); " is 134.
Long Statement,Myrcon.Protocols.Frostbite,FrostbitePacketSerializer,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbitePacketSerializer.cs,Deserialize,The length of the statement  "		wrapper.Packet.Words.Add (Encoding.GetEncoding (1252).GetString (packetData' (int)this.PacketHeaderSize + wordOffset + 4' (int)wordLength)); " is 140.
Long Statement,Myrcon.Protocols.Frostbite,FrostbitePacketSerializer,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbitePacketSerializer.cs,Deserialize,The length of the statement  "	wrapper.Packet.DebugText = String.Join (" "' wrapper.Packet.Words.Select ((word' index) => String.Format ("[{0}-{1}]"' index' word))); " is 134.
Long Statement,Myrcon.Protocols.Frostbite.Objects,FrostbiteChat,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Objects\FrostbiteChat.cs,Parse,The length of the statement  "	for (int paramCount = 0' varCount = 0; paramCount < parameters.Count && varCount < words.Count; paramCount++' varCount++) { " is 123.
Long Statement,Myrcon.Protocols.Frostbite.Objects,FrostbitePlayers,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Objects\FrostbitePlayerList.cs,Parse,The length of the statement  "					players.Add (FrostbitePlayer.Parse (lstParameters' words.GetRange (currentOffset + i * parameterCount' parameterCount))); " is 121.
Long Statement,Myrcon.Protocols.Frostbite.Objects,FrostbiteGroupingList,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Objects\FrostbiteGroupingList.cs,Parse,The length of the statement  "				if (context == FrostbitePlayerSubsetContext.Squad && int.TryParse (words [1]' out parsedTeamId) == true && int.TryParse (words [2]' out parsedSquadId) == true) { " is 161.
Long Statement,Myrcon.Protocols.Frostbite.Objects,FrostbiteServerInfo,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Objects\FrostbiteServerInfo.cs,Parse,The length of the statement  "	for (int paramCount = 0' varCount = 0; paramCount < parameters.Count && varCount < words.Count; paramCount++' varCount++) { " is 123.
Long Statement,Myrcon.Protocols.Frostbite.Objects,FrostbiteTimeSubset,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Objects\FrostbiteTimeSubset.cs,Parse,The length of the statement  "	} else if (words.Count == 2 && String.CompareOrdinal (words [0]' "seconds") == 0 && int.TryParse (words [1]' out seconds) == true) { " is 132.
Empty Catch Block,Myrcon.Protocols.Frostbite.Objects,FrostbiteChat,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Objects\FrostbiteChat.cs,Parse,The method has an empty catch block.
Empty Catch Block,Myrcon.Protocols.Frostbite.Objects,FrostbiteServerInfo,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Objects\FrostbiteServerInfo.cs,Parse,The method has an empty catch block.
Magic Number,Myrcon.Protocols.Frostbite.Generations.First.Games,FirstGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Generations\First\Games\FirstGame.cs,ServerOnLevelLoadedDispatchHandler,The following statement contains a magic number: if (request.Packet.Words.Count >= 5) {  	int currentRound = 0' totalRounds = 0;  	if (int.TryParse (request.Packet.Words [3]' out currentRound) == true && int.TryParse (request.Packet.Words [4]' out totalRounds) == true) {  		this.UpdateSettingsMap (request.Packet.Words [1]' request.Packet.Words [2]);  		this.UpdateSettingsRound (currentRound' totalRounds);  	}  }  
Magic Number,Myrcon.Protocols.Frostbite.Generations.First.Games,FirstGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Generations\First\Games\FirstGame.cs,ServerOnLevelLoadedDispatchHandler,The following statement contains a magic number: if (request.Packet.Words.Count >= 5) {  	int currentRound = 0' totalRounds = 0;  	if (int.TryParse (request.Packet.Words [3]' out currentRound) == true && int.TryParse (request.Packet.Words [4]' out totalRounds) == true) {  		this.UpdateSettingsMap (request.Packet.Words [1]' request.Packet.Words [2]);  		this.UpdateSettingsRound (currentRound' totalRounds);  	}  }  
Magic Number,Myrcon.Protocols.Frostbite.Generations.First.Games,FirstGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Generations\First\Games\FirstGame.cs,ServerOnLevelLoadedDispatchHandler,The following statement contains a magic number: if (request.Packet.Words.Count >= 5) {  	int currentRound = 0' totalRounds = 0;  	if (int.TryParse (request.Packet.Words [3]' out currentRound) == true && int.TryParse (request.Packet.Words [4]' out totalRounds) == true) {  		this.UpdateSettingsMap (request.Packet.Words [1]' request.Packet.Words [2]);  		this.UpdateSettingsRound (currentRound' totalRounds);  	}  }  
Magic Number,Myrcon.Protocols.Frostbite.Generations.First.Games,FirstGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Generations\First\Games\FirstGame.cs,ServerOnLevelLoadedDispatchHandler,The following statement contains a magic number: if (request.Packet.Words.Count >= 5) {  	int currentRound = 0' totalRounds = 0;  	if (int.TryParse (request.Packet.Words [3]' out currentRound) == true && int.TryParse (request.Packet.Words [4]' out totalRounds) == true) {  		this.UpdateSettingsMap (request.Packet.Words [1]' request.Packet.Words [2]);  		this.UpdateSettingsRound (currentRound' totalRounds);  	}  }  
Magic Number,Myrcon.Protocols.Frostbite.Generations.First.Games,FirstGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Generations\First\Games\FirstGame.cs,ServerOnLevelLoadedDispatchHandler,The following statement contains a magic number: if (int.TryParse (request.Packet.Words [3]' out currentRound) == true && int.TryParse (request.Packet.Words [4]' out totalRounds) == true) {  	this.UpdateSettingsMap (request.Packet.Words [1]' request.Packet.Words [2]);  	this.UpdateSettingsRound (currentRound' totalRounds);  }  
Magic Number,Myrcon.Protocols.Frostbite.Generations.First.Games,FirstGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Generations\First\Games\FirstGame.cs,ServerOnLevelLoadedDispatchHandler,The following statement contains a magic number: if (int.TryParse (request.Packet.Words [3]' out currentRound) == true && int.TryParse (request.Packet.Words [4]' out totalRounds) == true) {  	this.UpdateSettingsMap (request.Packet.Words [1]' request.Packet.Words [2]);  	this.UpdateSettingsRound (currentRound' totalRounds);  }  
Magic Number,Myrcon.Protocols.Frostbite.Generations.First.Games,FirstGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Generations\First\Games\FirstGame.cs,ServerOnLevelLoadedDispatchHandler,The following statement contains a magic number: if (int.TryParse (request.Packet.Words [3]' out currentRound) == true && int.TryParse (request.Packet.Words [4]' out totalRounds) == true) {  	this.UpdateSettingsMap (request.Packet.Words [1]' request.Packet.Words [2]);  	this.UpdateSettingsRound (currentRound' totalRounds);  }  
Magic Number,Myrcon.Protocols.Frostbite.Generations.First.Games,FirstGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Generations\First\Games\FirstGame.cs,ServerOnLevelLoadedDispatchHandler,The following statement contains a magic number: this.UpdateSettingsMap (request.Packet.Words [1]' request.Packet.Words [2]);  
Magic Number,Myrcon.Protocols.Frostbite.Generations.First.Games,FirstGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Generations\First\Games\FirstGame.cs,PlayerOnKillDispatchHandler,The following statement contains a magic number: if (request.Packet.Words.Count >= 5) {  	bool headshot = false;  	if (bool.TryParse (request.Packet.Words [4]' out headshot) == true) {  		ItemModel item = this.State.Items.Select (i => i.Value).FirstOrDefault (i => i.Name == Regex.Replace (request.Packet.Words [3]' @"[^\w\/_-]+"' "")) ?? new ItemModel () {  			Name = request.Packet.Words [3]  		};  		var killer = this.State.Players.Select (p => p.Value).FirstOrDefault (p => p.Name == request.Packet.Words [1]);  		var victim = this.State.Players.Select (p => p.Value).FirstOrDefault (p => p.Name == request.Packet.Words [2]);  		if (killer != null && victim != null) {  			// Assign the item to the player' overwriting everything else attached to this killer.  			killer.Inventory.Now.Items.Clear ();  			killer.Inventory.Now.Items.Add (item);  			victim.Deaths++;  			// If this wasn't an inside job.  			if (killer.Uid != victim.Uid) {  				killer.Kills++;  			}  			var difference = new ProtocolStateDifference () {  				Modified =  {  					Players = new ConcurrentDictionary<String' PlayerModel> ()  				}  			};  			difference.Modified.Players.AddOrUpdate (killer.Uid' id => killer' (id' model) => killer);  			difference.Modified.Players.AddOrUpdate (victim.Uid' id => victim' (id' model) => victim);  			this.ApplyProtocolStateDifference (difference);  			// We've updated the state' now fetch the players from the state with all of the statistics information attached.  			PlayerModel stateKiller = null;  			PlayerModel stateVictim = null;  			this.State.Players.TryGetValue (killer.Uid' out stateKiller);  			this.State.Players.TryGetValue (victim.Uid' out stateVictim);  			this.OnProtocolEvent (ProtocolEventType.ProtocolPlayerKill' difference' new ProtocolEventData () {  				Kills = new List<KillModel> () {  					new KillModel () {  						Scope =  {  							Players = new List<PlayerModel> () {  								stateVictim  							}'  							Items = new List<ItemModel> () {  								item  							}'  							HumanHitLocations = new List<HumanHitLocation> () {  								headshot == true ? FrostbiteGame.Headshot : FrostbiteGame.Bodyshot  							}  						}'  						Now =  {  							Players = new List<PlayerModel> () {  								stateKiller  							}  						}  					}  				}  			});  		}  	}  }  
Magic Number,Myrcon.Protocols.Frostbite.Generations.First.Games,FirstGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Generations\First\Games\FirstGame.cs,PlayerOnKillDispatchHandler,The following statement contains a magic number: if (request.Packet.Words.Count >= 5) {  	bool headshot = false;  	if (bool.TryParse (request.Packet.Words [4]' out headshot) == true) {  		ItemModel item = this.State.Items.Select (i => i.Value).FirstOrDefault (i => i.Name == Regex.Replace (request.Packet.Words [3]' @"[^\w\/_-]+"' "")) ?? new ItemModel () {  			Name = request.Packet.Words [3]  		};  		var killer = this.State.Players.Select (p => p.Value).FirstOrDefault (p => p.Name == request.Packet.Words [1]);  		var victim = this.State.Players.Select (p => p.Value).FirstOrDefault (p => p.Name == request.Packet.Words [2]);  		if (killer != null && victim != null) {  			// Assign the item to the player' overwriting everything else attached to this killer.  			killer.Inventory.Now.Items.Clear ();  			killer.Inventory.Now.Items.Add (item);  			victim.Deaths++;  			// If this wasn't an inside job.  			if (killer.Uid != victim.Uid) {  				killer.Kills++;  			}  			var difference = new ProtocolStateDifference () {  				Modified =  {  					Players = new ConcurrentDictionary<String' PlayerModel> ()  				}  			};  			difference.Modified.Players.AddOrUpdate (killer.Uid' id => killer' (id' model) => killer);  			difference.Modified.Players.AddOrUpdate (victim.Uid' id => victim' (id' model) => victim);  			this.ApplyProtocolStateDifference (difference);  			// We've updated the state' now fetch the players from the state with all of the statistics information attached.  			PlayerModel stateKiller = null;  			PlayerModel stateVictim = null;  			this.State.Players.TryGetValue (killer.Uid' out stateKiller);  			this.State.Players.TryGetValue (victim.Uid' out stateVictim);  			this.OnProtocolEvent (ProtocolEventType.ProtocolPlayerKill' difference' new ProtocolEventData () {  				Kills = new List<KillModel> () {  					new KillModel () {  						Scope =  {  							Players = new List<PlayerModel> () {  								stateVictim  							}'  							Items = new List<ItemModel> () {  								item  							}'  							HumanHitLocations = new List<HumanHitLocation> () {  								headshot == true ? FrostbiteGame.Headshot : FrostbiteGame.Bodyshot  							}  						}'  						Now =  {  							Players = new List<PlayerModel> () {  								stateKiller  							}  						}  					}  				}  			});  		}  	}  }  
Magic Number,Myrcon.Protocols.Frostbite.Generations.First.Games,FirstGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Generations\First\Games\FirstGame.cs,PlayerOnKillDispatchHandler,The following statement contains a magic number: if (request.Packet.Words.Count >= 5) {  	bool headshot = false;  	if (bool.TryParse (request.Packet.Words [4]' out headshot) == true) {  		ItemModel item = this.State.Items.Select (i => i.Value).FirstOrDefault (i => i.Name == Regex.Replace (request.Packet.Words [3]' @"[^\w\/_-]+"' "")) ?? new ItemModel () {  			Name = request.Packet.Words [3]  		};  		var killer = this.State.Players.Select (p => p.Value).FirstOrDefault (p => p.Name == request.Packet.Words [1]);  		var victim = this.State.Players.Select (p => p.Value).FirstOrDefault (p => p.Name == request.Packet.Words [2]);  		if (killer != null && victim != null) {  			// Assign the item to the player' overwriting everything else attached to this killer.  			killer.Inventory.Now.Items.Clear ();  			killer.Inventory.Now.Items.Add (item);  			victim.Deaths++;  			// If this wasn't an inside job.  			if (killer.Uid != victim.Uid) {  				killer.Kills++;  			}  			var difference = new ProtocolStateDifference () {  				Modified =  {  					Players = new ConcurrentDictionary<String' PlayerModel> ()  				}  			};  			difference.Modified.Players.AddOrUpdate (killer.Uid' id => killer' (id' model) => killer);  			difference.Modified.Players.AddOrUpdate (victim.Uid' id => victim' (id' model) => victim);  			this.ApplyProtocolStateDifference (difference);  			// We've updated the state' now fetch the players from the state with all of the statistics information attached.  			PlayerModel stateKiller = null;  			PlayerModel stateVictim = null;  			this.State.Players.TryGetValue (killer.Uid' out stateKiller);  			this.State.Players.TryGetValue (victim.Uid' out stateVictim);  			this.OnProtocolEvent (ProtocolEventType.ProtocolPlayerKill' difference' new ProtocolEventData () {  				Kills = new List<KillModel> () {  					new KillModel () {  						Scope =  {  							Players = new List<PlayerModel> () {  								stateVictim  							}'  							Items = new List<ItemModel> () {  								item  							}'  							HumanHitLocations = new List<HumanHitLocation> () {  								headshot == true ? FrostbiteGame.Headshot : FrostbiteGame.Bodyshot  							}  						}'  						Now =  {  							Players = new List<PlayerModel> () {  								stateKiller  							}  						}  					}  				}  			});  		}  	}  }  
Magic Number,Myrcon.Protocols.Frostbite.Generations.First.Games,FirstGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Generations\First\Games\FirstGame.cs,PlayerOnKillDispatchHandler,The following statement contains a magic number: if (request.Packet.Words.Count >= 5) {  	bool headshot = false;  	if (bool.TryParse (request.Packet.Words [4]' out headshot) == true) {  		ItemModel item = this.State.Items.Select (i => i.Value).FirstOrDefault (i => i.Name == Regex.Replace (request.Packet.Words [3]' @"[^\w\/_-]+"' "")) ?? new ItemModel () {  			Name = request.Packet.Words [3]  		};  		var killer = this.State.Players.Select (p => p.Value).FirstOrDefault (p => p.Name == request.Packet.Words [1]);  		var victim = this.State.Players.Select (p => p.Value).FirstOrDefault (p => p.Name == request.Packet.Words [2]);  		if (killer != null && victim != null) {  			// Assign the item to the player' overwriting everything else attached to this killer.  			killer.Inventory.Now.Items.Clear ();  			killer.Inventory.Now.Items.Add (item);  			victim.Deaths++;  			// If this wasn't an inside job.  			if (killer.Uid != victim.Uid) {  				killer.Kills++;  			}  			var difference = new ProtocolStateDifference () {  				Modified =  {  					Players = new ConcurrentDictionary<String' PlayerModel> ()  				}  			};  			difference.Modified.Players.AddOrUpdate (killer.Uid' id => killer' (id' model) => killer);  			difference.Modified.Players.AddOrUpdate (victim.Uid' id => victim' (id' model) => victim);  			this.ApplyProtocolStateDifference (difference);  			// We've updated the state' now fetch the players from the state with all of the statistics information attached.  			PlayerModel stateKiller = null;  			PlayerModel stateVictim = null;  			this.State.Players.TryGetValue (killer.Uid' out stateKiller);  			this.State.Players.TryGetValue (victim.Uid' out stateVictim);  			this.OnProtocolEvent (ProtocolEventType.ProtocolPlayerKill' difference' new ProtocolEventData () {  				Kills = new List<KillModel> () {  					new KillModel () {  						Scope =  {  							Players = new List<PlayerModel> () {  								stateVictim  							}'  							Items = new List<ItemModel> () {  								item  							}'  							HumanHitLocations = new List<HumanHitLocation> () {  								headshot == true ? FrostbiteGame.Headshot : FrostbiteGame.Bodyshot  							}  						}'  						Now =  {  							Players = new List<PlayerModel> () {  								stateKiller  							}  						}  					}  				}  			});  		}  	}  }  
Magic Number,Myrcon.Protocols.Frostbite.Generations.First.Games,FirstGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Generations\First\Games\FirstGame.cs,PlayerOnKillDispatchHandler,The following statement contains a magic number: if (request.Packet.Words.Count >= 5) {  	bool headshot = false;  	if (bool.TryParse (request.Packet.Words [4]' out headshot) == true) {  		ItemModel item = this.State.Items.Select (i => i.Value).FirstOrDefault (i => i.Name == Regex.Replace (request.Packet.Words [3]' @"[^\w\/_-]+"' "")) ?? new ItemModel () {  			Name = request.Packet.Words [3]  		};  		var killer = this.State.Players.Select (p => p.Value).FirstOrDefault (p => p.Name == request.Packet.Words [1]);  		var victim = this.State.Players.Select (p => p.Value).FirstOrDefault (p => p.Name == request.Packet.Words [2]);  		if (killer != null && victim != null) {  			// Assign the item to the player' overwriting everything else attached to this killer.  			killer.Inventory.Now.Items.Clear ();  			killer.Inventory.Now.Items.Add (item);  			victim.Deaths++;  			// If this wasn't an inside job.  			if (killer.Uid != victim.Uid) {  				killer.Kills++;  			}  			var difference = new ProtocolStateDifference () {  				Modified =  {  					Players = new ConcurrentDictionary<String' PlayerModel> ()  				}  			};  			difference.Modified.Players.AddOrUpdate (killer.Uid' id => killer' (id' model) => killer);  			difference.Modified.Players.AddOrUpdate (victim.Uid' id => victim' (id' model) => victim);  			this.ApplyProtocolStateDifference (difference);  			// We've updated the state' now fetch the players from the state with all of the statistics information attached.  			PlayerModel stateKiller = null;  			PlayerModel stateVictim = null;  			this.State.Players.TryGetValue (killer.Uid' out stateKiller);  			this.State.Players.TryGetValue (victim.Uid' out stateVictim);  			this.OnProtocolEvent (ProtocolEventType.ProtocolPlayerKill' difference' new ProtocolEventData () {  				Kills = new List<KillModel> () {  					new KillModel () {  						Scope =  {  							Players = new List<PlayerModel> () {  								stateVictim  							}'  							Items = new List<ItemModel> () {  								item  							}'  							HumanHitLocations = new List<HumanHitLocation> () {  								headshot == true ? FrostbiteGame.Headshot : FrostbiteGame.Bodyshot  							}  						}'  						Now =  {  							Players = new List<PlayerModel> () {  								stateKiller  							}  						}  					}  				}  			});  		}  	}  }  
Magic Number,Myrcon.Protocols.Frostbite.Generations.First.Games,FirstGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Generations\First\Games\FirstGame.cs,PlayerOnKillDispatchHandler,The following statement contains a magic number: if (bool.TryParse (request.Packet.Words [4]' out headshot) == true) {  	ItemModel item = this.State.Items.Select (i => i.Value).FirstOrDefault (i => i.Name == Regex.Replace (request.Packet.Words [3]' @"[^\w\/_-]+"' "")) ?? new ItemModel () {  		Name = request.Packet.Words [3]  	};  	var killer = this.State.Players.Select (p => p.Value).FirstOrDefault (p => p.Name == request.Packet.Words [1]);  	var victim = this.State.Players.Select (p => p.Value).FirstOrDefault (p => p.Name == request.Packet.Words [2]);  	if (killer != null && victim != null) {  		// Assign the item to the player' overwriting everything else attached to this killer.  		killer.Inventory.Now.Items.Clear ();  		killer.Inventory.Now.Items.Add (item);  		victim.Deaths++;  		// If this wasn't an inside job.  		if (killer.Uid != victim.Uid) {  			killer.Kills++;  		}  		var difference = new ProtocolStateDifference () {  			Modified =  {  				Players = new ConcurrentDictionary<String' PlayerModel> ()  			}  		};  		difference.Modified.Players.AddOrUpdate (killer.Uid' id => killer' (id' model) => killer);  		difference.Modified.Players.AddOrUpdate (victim.Uid' id => victim' (id' model) => victim);  		this.ApplyProtocolStateDifference (difference);  		// We've updated the state' now fetch the players from the state with all of the statistics information attached.  		PlayerModel stateKiller = null;  		PlayerModel stateVictim = null;  		this.State.Players.TryGetValue (killer.Uid' out stateKiller);  		this.State.Players.TryGetValue (victim.Uid' out stateVictim);  		this.OnProtocolEvent (ProtocolEventType.ProtocolPlayerKill' difference' new ProtocolEventData () {  			Kills = new List<KillModel> () {  				new KillModel () {  					Scope =  {  						Players = new List<PlayerModel> () {  							stateVictim  						}'  						Items = new List<ItemModel> () {  							item  						}'  						HumanHitLocations = new List<HumanHitLocation> () {  							headshot == true ? FrostbiteGame.Headshot : FrostbiteGame.Bodyshot  						}  					}'  					Now =  {  						Players = new List<PlayerModel> () {  							stateKiller  						}  					}  				}  			}  		});  	}  }  
Magic Number,Myrcon.Protocols.Frostbite.Generations.First.Games,FirstGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Generations\First\Games\FirstGame.cs,PlayerOnKillDispatchHandler,The following statement contains a magic number: if (bool.TryParse (request.Packet.Words [4]' out headshot) == true) {  	ItemModel item = this.State.Items.Select (i => i.Value).FirstOrDefault (i => i.Name == Regex.Replace (request.Packet.Words [3]' @"[^\w\/_-]+"' "")) ?? new ItemModel () {  		Name = request.Packet.Words [3]  	};  	var killer = this.State.Players.Select (p => p.Value).FirstOrDefault (p => p.Name == request.Packet.Words [1]);  	var victim = this.State.Players.Select (p => p.Value).FirstOrDefault (p => p.Name == request.Packet.Words [2]);  	if (killer != null && victim != null) {  		// Assign the item to the player' overwriting everything else attached to this killer.  		killer.Inventory.Now.Items.Clear ();  		killer.Inventory.Now.Items.Add (item);  		victim.Deaths++;  		// If this wasn't an inside job.  		if (killer.Uid != victim.Uid) {  			killer.Kills++;  		}  		var difference = new ProtocolStateDifference () {  			Modified =  {  				Players = new ConcurrentDictionary<String' PlayerModel> ()  			}  		};  		difference.Modified.Players.AddOrUpdate (killer.Uid' id => killer' (id' model) => killer);  		difference.Modified.Players.AddOrUpdate (victim.Uid' id => victim' (id' model) => victim);  		this.ApplyProtocolStateDifference (difference);  		// We've updated the state' now fetch the players from the state with all of the statistics information attached.  		PlayerModel stateKiller = null;  		PlayerModel stateVictim = null;  		this.State.Players.TryGetValue (killer.Uid' out stateKiller);  		this.State.Players.TryGetValue (victim.Uid' out stateVictim);  		this.OnProtocolEvent (ProtocolEventType.ProtocolPlayerKill' difference' new ProtocolEventData () {  			Kills = new List<KillModel> () {  				new KillModel () {  					Scope =  {  						Players = new List<PlayerModel> () {  							stateVictim  						}'  						Items = new List<ItemModel> () {  							item  						}'  						HumanHitLocations = new List<HumanHitLocation> () {  							headshot == true ? FrostbiteGame.Headshot : FrostbiteGame.Bodyshot  						}  					}'  					Now =  {  						Players = new List<PlayerModel> () {  							stateKiller  						}  					}  				}  			}  		});  	}  }  
Magic Number,Myrcon.Protocols.Frostbite.Generations.First.Games,FirstGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Generations\First\Games\FirstGame.cs,PlayerOnKillDispatchHandler,The following statement contains a magic number: if (bool.TryParse (request.Packet.Words [4]' out headshot) == true) {  	ItemModel item = this.State.Items.Select (i => i.Value).FirstOrDefault (i => i.Name == Regex.Replace (request.Packet.Words [3]' @"[^\w\/_-]+"' "")) ?? new ItemModel () {  		Name = request.Packet.Words [3]  	};  	var killer = this.State.Players.Select (p => p.Value).FirstOrDefault (p => p.Name == request.Packet.Words [1]);  	var victim = this.State.Players.Select (p => p.Value).FirstOrDefault (p => p.Name == request.Packet.Words [2]);  	if (killer != null && victim != null) {  		// Assign the item to the player' overwriting everything else attached to this killer.  		killer.Inventory.Now.Items.Clear ();  		killer.Inventory.Now.Items.Add (item);  		victim.Deaths++;  		// If this wasn't an inside job.  		if (killer.Uid != victim.Uid) {  			killer.Kills++;  		}  		var difference = new ProtocolStateDifference () {  			Modified =  {  				Players = new ConcurrentDictionary<String' PlayerModel> ()  			}  		};  		difference.Modified.Players.AddOrUpdate (killer.Uid' id => killer' (id' model) => killer);  		difference.Modified.Players.AddOrUpdate (victim.Uid' id => victim' (id' model) => victim);  		this.ApplyProtocolStateDifference (difference);  		// We've updated the state' now fetch the players from the state with all of the statistics information attached.  		PlayerModel stateKiller = null;  		PlayerModel stateVictim = null;  		this.State.Players.TryGetValue (killer.Uid' out stateKiller);  		this.State.Players.TryGetValue (victim.Uid' out stateVictim);  		this.OnProtocolEvent (ProtocolEventType.ProtocolPlayerKill' difference' new ProtocolEventData () {  			Kills = new List<KillModel> () {  				new KillModel () {  					Scope =  {  						Players = new List<PlayerModel> () {  							stateVictim  						}'  						Items = new List<ItemModel> () {  							item  						}'  						HumanHitLocations = new List<HumanHitLocation> () {  							headshot == true ? FrostbiteGame.Headshot : FrostbiteGame.Bodyshot  						}  					}'  					Now =  {  						Players = new List<PlayerModel> () {  							stateKiller  						}  					}  				}  			}  		});  	}  }  
Magic Number,Myrcon.Protocols.Frostbite.Generations.First.Games,FirstGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Generations\First\Games\FirstGame.cs,PlayerOnKillDispatchHandler,The following statement contains a magic number: if (bool.TryParse (request.Packet.Words [4]' out headshot) == true) {  	ItemModel item = this.State.Items.Select (i => i.Value).FirstOrDefault (i => i.Name == Regex.Replace (request.Packet.Words [3]' @"[^\w\/_-]+"' "")) ?? new ItemModel () {  		Name = request.Packet.Words [3]  	};  	var killer = this.State.Players.Select (p => p.Value).FirstOrDefault (p => p.Name == request.Packet.Words [1]);  	var victim = this.State.Players.Select (p => p.Value).FirstOrDefault (p => p.Name == request.Packet.Words [2]);  	if (killer != null && victim != null) {  		// Assign the item to the player' overwriting everything else attached to this killer.  		killer.Inventory.Now.Items.Clear ();  		killer.Inventory.Now.Items.Add (item);  		victim.Deaths++;  		// If this wasn't an inside job.  		if (killer.Uid != victim.Uid) {  			killer.Kills++;  		}  		var difference = new ProtocolStateDifference () {  			Modified =  {  				Players = new ConcurrentDictionary<String' PlayerModel> ()  			}  		};  		difference.Modified.Players.AddOrUpdate (killer.Uid' id => killer' (id' model) => killer);  		difference.Modified.Players.AddOrUpdate (victim.Uid' id => victim' (id' model) => victim);  		this.ApplyProtocolStateDifference (difference);  		// We've updated the state' now fetch the players from the state with all of the statistics information attached.  		PlayerModel stateKiller = null;  		PlayerModel stateVictim = null;  		this.State.Players.TryGetValue (killer.Uid' out stateKiller);  		this.State.Players.TryGetValue (victim.Uid' out stateVictim);  		this.OnProtocolEvent (ProtocolEventType.ProtocolPlayerKill' difference' new ProtocolEventData () {  			Kills = new List<KillModel> () {  				new KillModel () {  					Scope =  {  						Players = new List<PlayerModel> () {  							stateVictim  						}'  						Items = new List<ItemModel> () {  							item  						}'  						HumanHitLocations = new List<HumanHitLocation> () {  							headshot == true ? FrostbiteGame.Headshot : FrostbiteGame.Bodyshot  						}  					}'  					Now =  {  						Players = new List<PlayerModel> () {  							stateKiller  						}  					}  				}  			}  		});  	}  }  
Magic Number,Myrcon.Protocols.Frostbite.Generations.Second.Games,Battlefield3Game,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Generations\Second\Games\Battlefield3Game.cs,PlayerPingResponseDispatchHandler,The following statement contains a magic number: if (request.Packet.Words.Count >= 2 && response != null && response.Packet.Words.Count >= 2) {  	PlayerModel player = this.State.Players.Select (p => p.Value).FirstOrDefault (p => p.Name == request.Packet.Words [1]);  	uint ping = 0;  	if (player != null && uint.TryParse (response.Packet.Words [1]' out ping) == true) {  		// Sometimes the protocol sends through the max value of uint. We ignore everything above 1000.  		player.Ping = ping > 1000 ? 0 : ping;  	}  }  
Magic Number,Myrcon.Protocols.Frostbite.Generations.Second.Games,Battlefield3Game,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Generations\Second\Games\Battlefield3Game.cs,PlayerPingResponseDispatchHandler,The following statement contains a magic number: if (request.Packet.Words.Count >= 2 && response != null && response.Packet.Words.Count >= 2) {  	PlayerModel player = this.State.Players.Select (p => p.Value).FirstOrDefault (p => p.Name == request.Packet.Words [1]);  	uint ping = 0;  	if (player != null && uint.TryParse (response.Packet.Words [1]' out ping) == true) {  		// Sometimes the protocol sends through the max value of uint. We ignore everything above 1000.  		player.Ping = ping > 1000 ? 0 : ping;  	}  }  
Magic Number,Myrcon.Protocols.Frostbite.Generations.Second.Games,Battlefield3Game,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Generations\Second\Games\Battlefield3Game.cs,PlayerPingResponseDispatchHandler,The following statement contains a magic number: if (request.Packet.Words.Count >= 2 && response != null && response.Packet.Words.Count >= 2) {  	PlayerModel player = this.State.Players.Select (p => p.Value).FirstOrDefault (p => p.Name == request.Packet.Words [1]);  	uint ping = 0;  	if (player != null && uint.TryParse (response.Packet.Words [1]' out ping) == true) {  		// Sometimes the protocol sends through the max value of uint. We ignore everything above 1000.  		player.Ping = ping > 1000 ? 0 : ping;  	}  }  
Magic Number,Myrcon.Protocols.Frostbite.Generations.Second.Games,Battlefield3Game,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Generations\Second\Games\Battlefield3Game.cs,PlayerPingResponseDispatchHandler,The following statement contains a magic number: if (player != null && uint.TryParse (response.Packet.Words [1]' out ping) == true) {  	// Sometimes the protocol sends through the max value of uint. We ignore everything above 1000.  	player.Ping = ping > 1000 ? 0 : ping;  }  
Magic Number,Myrcon.Protocols.Frostbite.Generations.Second.Games,Battlefield3Game,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Generations\Second\Games\Battlefield3Game.cs,PlayerPingResponseDispatchHandler,The following statement contains a magic number: player.Ping = ping > 1000 ? 0 : ping;  
Magic Number,Myrcon.Protocols.Frostbite.Generations.Second.Games,SecondGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Generations\Second\Games\SecondGame.cs,ServerOnLevelLoadedDispatchHandler,The following statement contains a magic number: if (request.Packet.Words.Count >= 5) {  	int currentRound = 0' totalRounds = 0;  	if (int.TryParse (request.Packet.Words [3]' out currentRound) == true && int.TryParse (request.Packet.Words [4]' out totalRounds) == true) {  		this.UpdateSettingsMap (request.Packet.Words [1]' request.Packet.Words [2]);  		this.UpdateSettingsRound (currentRound' totalRounds);  	}  }  
Magic Number,Myrcon.Protocols.Frostbite.Generations.Second.Games,SecondGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Generations\Second\Games\SecondGame.cs,ServerOnLevelLoadedDispatchHandler,The following statement contains a magic number: if (request.Packet.Words.Count >= 5) {  	int currentRound = 0' totalRounds = 0;  	if (int.TryParse (request.Packet.Words [3]' out currentRound) == true && int.TryParse (request.Packet.Words [4]' out totalRounds) == true) {  		this.UpdateSettingsMap (request.Packet.Words [1]' request.Packet.Words [2]);  		this.UpdateSettingsRound (currentRound' totalRounds);  	}  }  
Magic Number,Myrcon.Protocols.Frostbite.Generations.Second.Games,SecondGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Generations\Second\Games\SecondGame.cs,ServerOnLevelLoadedDispatchHandler,The following statement contains a magic number: if (request.Packet.Words.Count >= 5) {  	int currentRound = 0' totalRounds = 0;  	if (int.TryParse (request.Packet.Words [3]' out currentRound) == true && int.TryParse (request.Packet.Words [4]' out totalRounds) == true) {  		this.UpdateSettingsMap (request.Packet.Words [1]' request.Packet.Words [2]);  		this.UpdateSettingsRound (currentRound' totalRounds);  	}  }  
Magic Number,Myrcon.Protocols.Frostbite.Generations.Second.Games,SecondGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Generations\Second\Games\SecondGame.cs,ServerOnLevelLoadedDispatchHandler,The following statement contains a magic number: if (request.Packet.Words.Count >= 5) {  	int currentRound = 0' totalRounds = 0;  	if (int.TryParse (request.Packet.Words [3]' out currentRound) == true && int.TryParse (request.Packet.Words [4]' out totalRounds) == true) {  		this.UpdateSettingsMap (request.Packet.Words [1]' request.Packet.Words [2]);  		this.UpdateSettingsRound (currentRound' totalRounds);  	}  }  
Magic Number,Myrcon.Protocols.Frostbite.Generations.Second.Games,SecondGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Generations\Second\Games\SecondGame.cs,ServerOnLevelLoadedDispatchHandler,The following statement contains a magic number: if (int.TryParse (request.Packet.Words [3]' out currentRound) == true && int.TryParse (request.Packet.Words [4]' out totalRounds) == true) {  	this.UpdateSettingsMap (request.Packet.Words [1]' request.Packet.Words [2]);  	this.UpdateSettingsRound (currentRound' totalRounds);  }  
Magic Number,Myrcon.Protocols.Frostbite.Generations.Second.Games,SecondGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Generations\Second\Games\SecondGame.cs,ServerOnLevelLoadedDispatchHandler,The following statement contains a magic number: if (int.TryParse (request.Packet.Words [3]' out currentRound) == true && int.TryParse (request.Packet.Words [4]' out totalRounds) == true) {  	this.UpdateSettingsMap (request.Packet.Words [1]' request.Packet.Words [2]);  	this.UpdateSettingsRound (currentRound' totalRounds);  }  
Magic Number,Myrcon.Protocols.Frostbite.Generations.Second.Games,SecondGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Generations\Second\Games\SecondGame.cs,ServerOnLevelLoadedDispatchHandler,The following statement contains a magic number: if (int.TryParse (request.Packet.Words [3]' out currentRound) == true && int.TryParse (request.Packet.Words [4]' out totalRounds) == true) {  	this.UpdateSettingsMap (request.Packet.Words [1]' request.Packet.Words [2]);  	this.UpdateSettingsRound (currentRound' totalRounds);  }  
Magic Number,Myrcon.Protocols.Frostbite.Generations.Second.Games,SecondGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Generations\Second\Games\SecondGame.cs,ServerOnLevelLoadedDispatchHandler,The following statement contains a magic number: this.UpdateSettingsMap (request.Packet.Words [1]' request.Packet.Words [2]);  
Magic Number,Myrcon.Protocols.Frostbite.Generations.Second.Games,SecondGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Generations\Second\Games\SecondGame.cs,PlayerOnKillDispatchHandler,The following statement contains a magic number: if (request.Packet.Words.Count >= 5) {  	bool headshot = false;  	if (bool.TryParse (request.Packet.Words [4]' out headshot) == true) {  		ItemModel item = this.State.Items.Select (i => i.Value).FirstOrDefault (i => i.Name == Regex.Replace (request.Packet.Words [3]' @"[^\w\/_-]+"' "")) ?? new ItemModel () {  			Name = request.Packet.Words [3]  		};  		var killer = this.State.Players.Select (p => p.Value).FirstOrDefault (p => p.Name == request.Packet.Words [1]);  		var victim = this.State.Players.Select (p => p.Value).FirstOrDefault (p => p.Name == request.Packet.Words [2]);  		if (killer != null && victim != null) {  			// Assign the item to the player' overwriting everything else attached to this killer.  			killer.Inventory.Now.Items.Clear ();  			killer.Inventory.Now.Items.Add (item);  			victim.Deaths++;  			// If this wasn't an inside job.  			if (killer.Uid != victim.Uid) {  				killer.Kills++;  			}  			var difference = new ProtocolStateDifference () {  				Modified =  {  					Players = new ConcurrentDictionary<String' PlayerModel> ()  				}  			};  			difference.Modified.Players.AddOrUpdate (killer.Uid' id => killer' (id' model) => killer);  			difference.Modified.Players.AddOrUpdate (victim.Uid' id => victim' (id' model) => victim);  			this.ApplyProtocolStateDifference (difference);  			// We've updated the state' now fetch the players from the state with all of the statistics information attached.  			PlayerModel stateKiller = null;  			PlayerModel stateVictim = null;  			this.State.Players.TryGetValue (killer.Uid' out stateKiller);  			this.State.Players.TryGetValue (victim.Uid' out stateVictim);  			this.OnProtocolEvent (ProtocolEventType.ProtocolPlayerKill' difference' new ProtocolEventData () {  				Kills = new List<KillModel> () {  					new KillModel () {  						Scope =  {  							Players = new List<PlayerModel> () {  								stateVictim  							}'  							Items = new List<ItemModel> () {  								item  							}'  							HumanHitLocations = new List<HumanHitLocation> () {  								headshot == true ? FrostbiteGame.Headshot : FrostbiteGame.Bodyshot  							}  						}'  						Now =  {  							Players = new List<PlayerModel> () {  								stateKiller  							}  						}  					}  				}  			});  		}  	}  }  
Magic Number,Myrcon.Protocols.Frostbite.Generations.Second.Games,SecondGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Generations\Second\Games\SecondGame.cs,PlayerOnKillDispatchHandler,The following statement contains a magic number: if (request.Packet.Words.Count >= 5) {  	bool headshot = false;  	if (bool.TryParse (request.Packet.Words [4]' out headshot) == true) {  		ItemModel item = this.State.Items.Select (i => i.Value).FirstOrDefault (i => i.Name == Regex.Replace (request.Packet.Words [3]' @"[^\w\/_-]+"' "")) ?? new ItemModel () {  			Name = request.Packet.Words [3]  		};  		var killer = this.State.Players.Select (p => p.Value).FirstOrDefault (p => p.Name == request.Packet.Words [1]);  		var victim = this.State.Players.Select (p => p.Value).FirstOrDefault (p => p.Name == request.Packet.Words [2]);  		if (killer != null && victim != null) {  			// Assign the item to the player' overwriting everything else attached to this killer.  			killer.Inventory.Now.Items.Clear ();  			killer.Inventory.Now.Items.Add (item);  			victim.Deaths++;  			// If this wasn't an inside job.  			if (killer.Uid != victim.Uid) {  				killer.Kills++;  			}  			var difference = new ProtocolStateDifference () {  				Modified =  {  					Players = new ConcurrentDictionary<String' PlayerModel> ()  				}  			};  			difference.Modified.Players.AddOrUpdate (killer.Uid' id => killer' (id' model) => killer);  			difference.Modified.Players.AddOrUpdate (victim.Uid' id => victim' (id' model) => victim);  			this.ApplyProtocolStateDifference (difference);  			// We've updated the state' now fetch the players from the state with all of the statistics information attached.  			PlayerModel stateKiller = null;  			PlayerModel stateVictim = null;  			this.State.Players.TryGetValue (killer.Uid' out stateKiller);  			this.State.Players.TryGetValue (victim.Uid' out stateVictim);  			this.OnProtocolEvent (ProtocolEventType.ProtocolPlayerKill' difference' new ProtocolEventData () {  				Kills = new List<KillModel> () {  					new KillModel () {  						Scope =  {  							Players = new List<PlayerModel> () {  								stateVictim  							}'  							Items = new List<ItemModel> () {  								item  							}'  							HumanHitLocations = new List<HumanHitLocation> () {  								headshot == true ? FrostbiteGame.Headshot : FrostbiteGame.Bodyshot  							}  						}'  						Now =  {  							Players = new List<PlayerModel> () {  								stateKiller  							}  						}  					}  				}  			});  		}  	}  }  
Magic Number,Myrcon.Protocols.Frostbite.Generations.Second.Games,SecondGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Generations\Second\Games\SecondGame.cs,PlayerOnKillDispatchHandler,The following statement contains a magic number: if (request.Packet.Words.Count >= 5) {  	bool headshot = false;  	if (bool.TryParse (request.Packet.Words [4]' out headshot) == true) {  		ItemModel item = this.State.Items.Select (i => i.Value).FirstOrDefault (i => i.Name == Regex.Replace (request.Packet.Words [3]' @"[^\w\/_-]+"' "")) ?? new ItemModel () {  			Name = request.Packet.Words [3]  		};  		var killer = this.State.Players.Select (p => p.Value).FirstOrDefault (p => p.Name == request.Packet.Words [1]);  		var victim = this.State.Players.Select (p => p.Value).FirstOrDefault (p => p.Name == request.Packet.Words [2]);  		if (killer != null && victim != null) {  			// Assign the item to the player' overwriting everything else attached to this killer.  			killer.Inventory.Now.Items.Clear ();  			killer.Inventory.Now.Items.Add (item);  			victim.Deaths++;  			// If this wasn't an inside job.  			if (killer.Uid != victim.Uid) {  				killer.Kills++;  			}  			var difference = new ProtocolStateDifference () {  				Modified =  {  					Players = new ConcurrentDictionary<String' PlayerModel> ()  				}  			};  			difference.Modified.Players.AddOrUpdate (killer.Uid' id => killer' (id' model) => killer);  			difference.Modified.Players.AddOrUpdate (victim.Uid' id => victim' (id' model) => victim);  			this.ApplyProtocolStateDifference (difference);  			// We've updated the state' now fetch the players from the state with all of the statistics information attached.  			PlayerModel stateKiller = null;  			PlayerModel stateVictim = null;  			this.State.Players.TryGetValue (killer.Uid' out stateKiller);  			this.State.Players.TryGetValue (victim.Uid' out stateVictim);  			this.OnProtocolEvent (ProtocolEventType.ProtocolPlayerKill' difference' new ProtocolEventData () {  				Kills = new List<KillModel> () {  					new KillModel () {  						Scope =  {  							Players = new List<PlayerModel> () {  								stateVictim  							}'  							Items = new List<ItemModel> () {  								item  							}'  							HumanHitLocations = new List<HumanHitLocation> () {  								headshot == true ? FrostbiteGame.Headshot : FrostbiteGame.Bodyshot  							}  						}'  						Now =  {  							Players = new List<PlayerModel> () {  								stateKiller  							}  						}  					}  				}  			});  		}  	}  }  
Magic Number,Myrcon.Protocols.Frostbite.Generations.Second.Games,SecondGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Generations\Second\Games\SecondGame.cs,PlayerOnKillDispatchHandler,The following statement contains a magic number: if (request.Packet.Words.Count >= 5) {  	bool headshot = false;  	if (bool.TryParse (request.Packet.Words [4]' out headshot) == true) {  		ItemModel item = this.State.Items.Select (i => i.Value).FirstOrDefault (i => i.Name == Regex.Replace (request.Packet.Words [3]' @"[^\w\/_-]+"' "")) ?? new ItemModel () {  			Name = request.Packet.Words [3]  		};  		var killer = this.State.Players.Select (p => p.Value).FirstOrDefault (p => p.Name == request.Packet.Words [1]);  		var victim = this.State.Players.Select (p => p.Value).FirstOrDefault (p => p.Name == request.Packet.Words [2]);  		if (killer != null && victim != null) {  			// Assign the item to the player' overwriting everything else attached to this killer.  			killer.Inventory.Now.Items.Clear ();  			killer.Inventory.Now.Items.Add (item);  			victim.Deaths++;  			// If this wasn't an inside job.  			if (killer.Uid != victim.Uid) {  				killer.Kills++;  			}  			var difference = new ProtocolStateDifference () {  				Modified =  {  					Players = new ConcurrentDictionary<String' PlayerModel> ()  				}  			};  			difference.Modified.Players.AddOrUpdate (killer.Uid' id => killer' (id' model) => killer);  			difference.Modified.Players.AddOrUpdate (victim.Uid' id => victim' (id' model) => victim);  			this.ApplyProtocolStateDifference (difference);  			// We've updated the state' now fetch the players from the state with all of the statistics information attached.  			PlayerModel stateKiller = null;  			PlayerModel stateVictim = null;  			this.State.Players.TryGetValue (killer.Uid' out stateKiller);  			this.State.Players.TryGetValue (victim.Uid' out stateVictim);  			this.OnProtocolEvent (ProtocolEventType.ProtocolPlayerKill' difference' new ProtocolEventData () {  				Kills = new List<KillModel> () {  					new KillModel () {  						Scope =  {  							Players = new List<PlayerModel> () {  								stateVictim  							}'  							Items = new List<ItemModel> () {  								item  							}'  							HumanHitLocations = new List<HumanHitLocation> () {  								headshot == true ? FrostbiteGame.Headshot : FrostbiteGame.Bodyshot  							}  						}'  						Now =  {  							Players = new List<PlayerModel> () {  								stateKiller  							}  						}  					}  				}  			});  		}  	}  }  
Magic Number,Myrcon.Protocols.Frostbite.Generations.Second.Games,SecondGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Generations\Second\Games\SecondGame.cs,PlayerOnKillDispatchHandler,The following statement contains a magic number: if (request.Packet.Words.Count >= 5) {  	bool headshot = false;  	if (bool.TryParse (request.Packet.Words [4]' out headshot) == true) {  		ItemModel item = this.State.Items.Select (i => i.Value).FirstOrDefault (i => i.Name == Regex.Replace (request.Packet.Words [3]' @"[^\w\/_-]+"' "")) ?? new ItemModel () {  			Name = request.Packet.Words [3]  		};  		var killer = this.State.Players.Select (p => p.Value).FirstOrDefault (p => p.Name == request.Packet.Words [1]);  		var victim = this.State.Players.Select (p => p.Value).FirstOrDefault (p => p.Name == request.Packet.Words [2]);  		if (killer != null && victim != null) {  			// Assign the item to the player' overwriting everything else attached to this killer.  			killer.Inventory.Now.Items.Clear ();  			killer.Inventory.Now.Items.Add (item);  			victim.Deaths++;  			// If this wasn't an inside job.  			if (killer.Uid != victim.Uid) {  				killer.Kills++;  			}  			var difference = new ProtocolStateDifference () {  				Modified =  {  					Players = new ConcurrentDictionary<String' PlayerModel> ()  				}  			};  			difference.Modified.Players.AddOrUpdate (killer.Uid' id => killer' (id' model) => killer);  			difference.Modified.Players.AddOrUpdate (victim.Uid' id => victim' (id' model) => victim);  			this.ApplyProtocolStateDifference (difference);  			// We've updated the state' now fetch the players from the state with all of the statistics information attached.  			PlayerModel stateKiller = null;  			PlayerModel stateVictim = null;  			this.State.Players.TryGetValue (killer.Uid' out stateKiller);  			this.State.Players.TryGetValue (victim.Uid' out stateVictim);  			this.OnProtocolEvent (ProtocolEventType.ProtocolPlayerKill' difference' new ProtocolEventData () {  				Kills = new List<KillModel> () {  					new KillModel () {  						Scope =  {  							Players = new List<PlayerModel> () {  								stateVictim  							}'  							Items = new List<ItemModel> () {  								item  							}'  							HumanHitLocations = new List<HumanHitLocation> () {  								headshot == true ? FrostbiteGame.Headshot : FrostbiteGame.Bodyshot  							}  						}'  						Now =  {  							Players = new List<PlayerModel> () {  								stateKiller  							}  						}  					}  				}  			});  		}  	}  }  
Magic Number,Myrcon.Protocols.Frostbite.Generations.Second.Games,SecondGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Generations\Second\Games\SecondGame.cs,PlayerOnKillDispatchHandler,The following statement contains a magic number: if (bool.TryParse (request.Packet.Words [4]' out headshot) == true) {  	ItemModel item = this.State.Items.Select (i => i.Value).FirstOrDefault (i => i.Name == Regex.Replace (request.Packet.Words [3]' @"[^\w\/_-]+"' "")) ?? new ItemModel () {  		Name = request.Packet.Words [3]  	};  	var killer = this.State.Players.Select (p => p.Value).FirstOrDefault (p => p.Name == request.Packet.Words [1]);  	var victim = this.State.Players.Select (p => p.Value).FirstOrDefault (p => p.Name == request.Packet.Words [2]);  	if (killer != null && victim != null) {  		// Assign the item to the player' overwriting everything else attached to this killer.  		killer.Inventory.Now.Items.Clear ();  		killer.Inventory.Now.Items.Add (item);  		victim.Deaths++;  		// If this wasn't an inside job.  		if (killer.Uid != victim.Uid) {  			killer.Kills++;  		}  		var difference = new ProtocolStateDifference () {  			Modified =  {  				Players = new ConcurrentDictionary<String' PlayerModel> ()  			}  		};  		difference.Modified.Players.AddOrUpdate (killer.Uid' id => killer' (id' model) => killer);  		difference.Modified.Players.AddOrUpdate (victim.Uid' id => victim' (id' model) => victim);  		this.ApplyProtocolStateDifference (difference);  		// We've updated the state' now fetch the players from the state with all of the statistics information attached.  		PlayerModel stateKiller = null;  		PlayerModel stateVictim = null;  		this.State.Players.TryGetValue (killer.Uid' out stateKiller);  		this.State.Players.TryGetValue (victim.Uid' out stateVictim);  		this.OnProtocolEvent (ProtocolEventType.ProtocolPlayerKill' difference' new ProtocolEventData () {  			Kills = new List<KillModel> () {  				new KillModel () {  					Scope =  {  						Players = new List<PlayerModel> () {  							stateVictim  						}'  						Items = new List<ItemModel> () {  							item  						}'  						HumanHitLocations = new List<HumanHitLocation> () {  							headshot == true ? FrostbiteGame.Headshot : FrostbiteGame.Bodyshot  						}  					}'  					Now =  {  						Players = new List<PlayerModel> () {  							stateKiller  						}  					}  				}  			}  		});  	}  }  
Magic Number,Myrcon.Protocols.Frostbite.Generations.Second.Games,SecondGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Generations\Second\Games\SecondGame.cs,PlayerOnKillDispatchHandler,The following statement contains a magic number: if (bool.TryParse (request.Packet.Words [4]' out headshot) == true) {  	ItemModel item = this.State.Items.Select (i => i.Value).FirstOrDefault (i => i.Name == Regex.Replace (request.Packet.Words [3]' @"[^\w\/_-]+"' "")) ?? new ItemModel () {  		Name = request.Packet.Words [3]  	};  	var killer = this.State.Players.Select (p => p.Value).FirstOrDefault (p => p.Name == request.Packet.Words [1]);  	var victim = this.State.Players.Select (p => p.Value).FirstOrDefault (p => p.Name == request.Packet.Words [2]);  	if (killer != null && victim != null) {  		// Assign the item to the player' overwriting everything else attached to this killer.  		killer.Inventory.Now.Items.Clear ();  		killer.Inventory.Now.Items.Add (item);  		victim.Deaths++;  		// If this wasn't an inside job.  		if (killer.Uid != victim.Uid) {  			killer.Kills++;  		}  		var difference = new ProtocolStateDifference () {  			Modified =  {  				Players = new ConcurrentDictionary<String' PlayerModel> ()  			}  		};  		difference.Modified.Players.AddOrUpdate (killer.Uid' id => killer' (id' model) => killer);  		difference.Modified.Players.AddOrUpdate (victim.Uid' id => victim' (id' model) => victim);  		this.ApplyProtocolStateDifference (difference);  		// We've updated the state' now fetch the players from the state with all of the statistics information attached.  		PlayerModel stateKiller = null;  		PlayerModel stateVictim = null;  		this.State.Players.TryGetValue (killer.Uid' out stateKiller);  		this.State.Players.TryGetValue (victim.Uid' out stateVictim);  		this.OnProtocolEvent (ProtocolEventType.ProtocolPlayerKill' difference' new ProtocolEventData () {  			Kills = new List<KillModel> () {  				new KillModel () {  					Scope =  {  						Players = new List<PlayerModel> () {  							stateVictim  						}'  						Items = new List<ItemModel> () {  							item  						}'  						HumanHitLocations = new List<HumanHitLocation> () {  							headshot == true ? FrostbiteGame.Headshot : FrostbiteGame.Bodyshot  						}  					}'  					Now =  {  						Players = new List<PlayerModel> () {  							stateKiller  						}  					}  				}  			}  		});  	}  }  
Magic Number,Myrcon.Protocols.Frostbite.Generations.Second.Games,SecondGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Generations\Second\Games\SecondGame.cs,PlayerOnKillDispatchHandler,The following statement contains a magic number: if (bool.TryParse (request.Packet.Words [4]' out headshot) == true) {  	ItemModel item = this.State.Items.Select (i => i.Value).FirstOrDefault (i => i.Name == Regex.Replace (request.Packet.Words [3]' @"[^\w\/_-]+"' "")) ?? new ItemModel () {  		Name = request.Packet.Words [3]  	};  	var killer = this.State.Players.Select (p => p.Value).FirstOrDefault (p => p.Name == request.Packet.Words [1]);  	var victim = this.State.Players.Select (p => p.Value).FirstOrDefault (p => p.Name == request.Packet.Words [2]);  	if (killer != null && victim != null) {  		// Assign the item to the player' overwriting everything else attached to this killer.  		killer.Inventory.Now.Items.Clear ();  		killer.Inventory.Now.Items.Add (item);  		victim.Deaths++;  		// If this wasn't an inside job.  		if (killer.Uid != victim.Uid) {  			killer.Kills++;  		}  		var difference = new ProtocolStateDifference () {  			Modified =  {  				Players = new ConcurrentDictionary<String' PlayerModel> ()  			}  		};  		difference.Modified.Players.AddOrUpdate (killer.Uid' id => killer' (id' model) => killer);  		difference.Modified.Players.AddOrUpdate (victim.Uid' id => victim' (id' model) => victim);  		this.ApplyProtocolStateDifference (difference);  		// We've updated the state' now fetch the players from the state with all of the statistics information attached.  		PlayerModel stateKiller = null;  		PlayerModel stateVictim = null;  		this.State.Players.TryGetValue (killer.Uid' out stateKiller);  		this.State.Players.TryGetValue (victim.Uid' out stateVictim);  		this.OnProtocolEvent (ProtocolEventType.ProtocolPlayerKill' difference' new ProtocolEventData () {  			Kills = new List<KillModel> () {  				new KillModel () {  					Scope =  {  						Players = new List<PlayerModel> () {  							stateVictim  						}'  						Items = new List<ItemModel> () {  							item  						}'  						HumanHitLocations = new List<HumanHitLocation> () {  							headshot == true ? FrostbiteGame.Headshot : FrostbiteGame.Bodyshot  						}  					}'  					Now =  {  						Players = new List<PlayerModel> () {  							stateKiller  						}  					}  				}  			}  		});  	}  }  
Magic Number,Myrcon.Protocols.Frostbite.Generations.Second.Games,SecondGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Generations\Second\Games\SecondGame.cs,PlayerOnKillDispatchHandler,The following statement contains a magic number: if (bool.TryParse (request.Packet.Words [4]' out headshot) == true) {  	ItemModel item = this.State.Items.Select (i => i.Value).FirstOrDefault (i => i.Name == Regex.Replace (request.Packet.Words [3]' @"[^\w\/_-]+"' "")) ?? new ItemModel () {  		Name = request.Packet.Words [3]  	};  	var killer = this.State.Players.Select (p => p.Value).FirstOrDefault (p => p.Name == request.Packet.Words [1]);  	var victim = this.State.Players.Select (p => p.Value).FirstOrDefault (p => p.Name == request.Packet.Words [2]);  	if (killer != null && victim != null) {  		// Assign the item to the player' overwriting everything else attached to this killer.  		killer.Inventory.Now.Items.Clear ();  		killer.Inventory.Now.Items.Add (item);  		victim.Deaths++;  		// If this wasn't an inside job.  		if (killer.Uid != victim.Uid) {  			killer.Kills++;  		}  		var difference = new ProtocolStateDifference () {  			Modified =  {  				Players = new ConcurrentDictionary<String' PlayerModel> ()  			}  		};  		difference.Modified.Players.AddOrUpdate (killer.Uid' id => killer' (id' model) => killer);  		difference.Modified.Players.AddOrUpdate (victim.Uid' id => victim' (id' model) => victim);  		this.ApplyProtocolStateDifference (difference);  		// We've updated the state' now fetch the players from the state with all of the statistics information attached.  		PlayerModel stateKiller = null;  		PlayerModel stateVictim = null;  		this.State.Players.TryGetValue (killer.Uid' out stateKiller);  		this.State.Players.TryGetValue (victim.Uid' out stateVictim);  		this.OnProtocolEvent (ProtocolEventType.ProtocolPlayerKill' difference' new ProtocolEventData () {  			Kills = new List<KillModel> () {  				new KillModel () {  					Scope =  {  						Players = new List<PlayerModel> () {  							stateVictim  						}'  						Items = new List<ItemModel> () {  							item  						}'  						HumanHitLocations = new List<HumanHitLocation> () {  							headshot == true ? FrostbiteGame.Headshot : FrostbiteGame.Bodyshot  						}  					}'  					Now =  {  						Players = new List<PlayerModel> () {  							stateKiller  						}  					}  				}  			}  		});  	}  }  
Magic Number,Myrcon.Protocols.Frostbite.Generations.Second.Games,SecondGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Generations\Second\Games\SecondGame.cs,BanListListDispatchHandler,The following statement contains a magic number: if (request.Packet.Words.Count >= 1) {  	int startOffset = 0;  	if (request.Packet.Words.Count >= 2) {  		if (int.TryParse (request.Packet.Words [1]' out startOffset) == false) {  			startOffset = 0;  		}  	}  	// We've just started requesting the banlist' clear it.  	if (startOffset == 0) {  		this.State.Bans.Clear ();  	}  	List<BanModel> banList = SecondFrostbiteBanList.Parse (response.Packet.Words.GetRange (1' response.Packet.Words.Count - 1));  	if (banList.Count > 0) {  		foreach (BanModel ban in banList) {  			if (ban.Scope.Times.Count > 0 && ban.Scope.Players.Count > 0) {  				var closureBan = ban;  				var key = String.Format ("{0}/{1}"' ban.Scope.Times.First ().Context' ban.Scope.Players.First ().Uid ?? ban.Scope.Players.First ().Name ?? ban.Scope.Players.First ().Ip);  				this.State.Bans.AddOrUpdate (key' id => closureBan' (id' model) => closureBan);  			}  		}  		this.Send (this.CreatePacket ("banList.list {0}"' startOffset + 100));  	} else {  		IProtocolStateDifference difference = new ProtocolStateDifference () {  			Override = true'  			Modified =  {  				Bans = this.State.Bans  			}  		};  		this.ApplyProtocolStateDifference (difference);  		// We have recieved the whole banlist in 100 ban increments.. throw event.  		this.OnProtocolEvent (ProtocolEventType.ProtocolBanlistUpdated' difference);  	}  }  
Magic Number,Myrcon.Protocols.Frostbite.Generations.Second.Games,SecondGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Generations\Second\Games\SecondGame.cs,BanListListDispatchHandler,The following statement contains a magic number: if (request.Packet.Words.Count >= 1) {  	int startOffset = 0;  	if (request.Packet.Words.Count >= 2) {  		if (int.TryParse (request.Packet.Words [1]' out startOffset) == false) {  			startOffset = 0;  		}  	}  	// We've just started requesting the banlist' clear it.  	if (startOffset == 0) {  		this.State.Bans.Clear ();  	}  	List<BanModel> banList = SecondFrostbiteBanList.Parse (response.Packet.Words.GetRange (1' response.Packet.Words.Count - 1));  	if (banList.Count > 0) {  		foreach (BanModel ban in banList) {  			if (ban.Scope.Times.Count > 0 && ban.Scope.Players.Count > 0) {  				var closureBan = ban;  				var key = String.Format ("{0}/{1}"' ban.Scope.Times.First ().Context' ban.Scope.Players.First ().Uid ?? ban.Scope.Players.First ().Name ?? ban.Scope.Players.First ().Ip);  				this.State.Bans.AddOrUpdate (key' id => closureBan' (id' model) => closureBan);  			}  		}  		this.Send (this.CreatePacket ("banList.list {0}"' startOffset + 100));  	} else {  		IProtocolStateDifference difference = new ProtocolStateDifference () {  			Override = true'  			Modified =  {  				Bans = this.State.Bans  			}  		};  		this.ApplyProtocolStateDifference (difference);  		// We have recieved the whole banlist in 100 ban increments.. throw event.  		this.OnProtocolEvent (ProtocolEventType.ProtocolBanlistUpdated' difference);  	}  }  
Magic Number,Myrcon.Protocols.Frostbite.Generations.Second.Games,SecondGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Generations\Second\Games\SecondGame.cs,BanListListDispatchHandler,The following statement contains a magic number: if (request.Packet.Words.Count >= 2) {  	if (int.TryParse (request.Packet.Words [1]' out startOffset) == false) {  		startOffset = 0;  	}  }  
Magic Number,Myrcon.Protocols.Frostbite.Generations.Second.Games,SecondGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Generations\Second\Games\SecondGame.cs,BanListListDispatchHandler,The following statement contains a magic number: if (banList.Count > 0) {  	foreach (BanModel ban in banList) {  		if (ban.Scope.Times.Count > 0 && ban.Scope.Players.Count > 0) {  			var closureBan = ban;  			var key = String.Format ("{0}/{1}"' ban.Scope.Times.First ().Context' ban.Scope.Players.First ().Uid ?? ban.Scope.Players.First ().Name ?? ban.Scope.Players.First ().Ip);  			this.State.Bans.AddOrUpdate (key' id => closureBan' (id' model) => closureBan);  		}  	}  	this.Send (this.CreatePacket ("banList.list {0}"' startOffset + 100));  } else {  	IProtocolStateDifference difference = new ProtocolStateDifference () {  		Override = true'  		Modified =  {  			Bans = this.State.Bans  		}  	};  	this.ApplyProtocolStateDifference (difference);  	// We have recieved the whole banlist in 100 ban increments.. throw event.  	this.OnProtocolEvent (ProtocolEventType.ProtocolBanlistUpdated' difference);  }  
Magic Number,Myrcon.Protocols.Frostbite.Generations.Second.Games,SecondGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Generations\Second\Games\SecondGame.cs,BanListListDispatchHandler,The following statement contains a magic number: this.Send (this.CreatePacket ("banList.list {0}"' startOffset + 100));  
Magic Number,Myrcon.Protocols.Frostbite.Generations.Second.Games,SecondGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Generations\Second\Games\SecondGame.cs,PlayerOnJoinDispatchHandler,The following statement contains a magic number: if (request.Packet.Words.Count >= 2) {  	PlayerModel player = new PlayerModel () {  		Name = request.Packet.Words [1]'  		Uid = request.Packet.Words [2]  	};  	IProtocolStateDifference difference = new ProtocolStateDifference () {  		Modified =  {  			Players = new ConcurrentDictionary<String' PlayerModel> (new Dictionary<String' PlayerModel> () {  				{  					player.Uid'  					player  				}  			})  		}  	};  	this.ApplyProtocolStateDifference (difference);  	this.OnProtocolEvent (ProtocolEventType.ProtocolPlayerJoin' difference' new ProtocolEventData () {  		Players = new List<PlayerModel> () {  			player  		}  	});  }  
Magic Number,Myrcon.Protocols.Frostbite.Generations.Second.Games,SecondGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Generations\Second\Games\SecondGame.cs,PlayerOnJoinDispatchHandler,The following statement contains a magic number: if (request.Packet.Words.Count >= 2) {  	PlayerModel player = new PlayerModel () {  		Name = request.Packet.Words [1]'  		Uid = request.Packet.Words [2]  	};  	IProtocolStateDifference difference = new ProtocolStateDifference () {  		Modified =  {  			Players = new ConcurrentDictionary<String' PlayerModel> (new Dictionary<String' PlayerModel> () {  				{  					player.Uid'  					player  				}  			})  		}  	};  	this.ApplyProtocolStateDifference (difference);  	this.OnProtocolEvent (ProtocolEventType.ProtocolPlayerJoin' difference' new ProtocolEventData () {  		Players = new List<PlayerModel> () {  			player  		}  	});  }  
Magic Number,Myrcon.Protocols.Frostbite.Generations.Second.Objects,SecondFrostbiteBanList,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Generations\Second\Objects\SecondFrostbiteBanList.cs,Parse,The following statement contains a magic number: for (int i = 0; i < words.Count; i += 6) {  	List<string> banWords = words.GetRange (i' 6);  	banWords.RemoveAt (4);  	bans.Add (FrostbiteBan.ParseBanListItem (banWords));  }  
Magic Number,Myrcon.Protocols.Frostbite.Generations.Second.Objects,SecondFrostbiteBanList,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Generations\Second\Objects\SecondFrostbiteBanList.cs,Parse,The following statement contains a magic number: for (int i = 0; i < words.Count; i += 6) {  	List<string> banWords = words.GetRange (i' 6);  	banWords.RemoveAt (4);  	bans.Add (FrostbiteBan.ParseBanListItem (banWords));  }  
Magic Number,Myrcon.Protocols.Frostbite.Generations.Second.Objects,SecondFrostbiteBanList,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Generations\Second\Objects\SecondFrostbiteBanList.cs,Parse,The following statement contains a magic number: for (int i = 0; i < words.Count; i += 6) {  	List<string> banWords = words.GetRange (i' 6);  	banWords.RemoveAt (4);  	bans.Add (FrostbiteBan.ParseBanListItem (banWords));  }  
Magic Number,Myrcon.Protocols.Frostbite.Generations.Second.Objects,SecondFrostbiteBanList,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Generations\Second\Objects\SecondFrostbiteBanList.cs,Parse,The following statement contains a magic number: i += 6
Magic Number,Myrcon.Protocols.Frostbite.Generations.Second.Objects,SecondFrostbiteBanList,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Generations\Second\Objects\SecondFrostbiteBanList.cs,Parse,The following statement contains a magic number: banWords.RemoveAt (4);  
Magic Number,Myrcon.Protocols.Frostbite.Generations.Second.Objects,SecondFrostbiteMapList,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Generations\Second\Objects\SecondFrostbiteMapList.cs,Parse,The following statement contains a magic number: if (words.Count >= 2) {  	int mapsCount = 0' wordsPerMap = 0;  	if (int.TryParse (words [0]' out mapsCount) == true && int.TryParse (words [1]' out wordsPerMap) == true) {  		for (int mapOffset = 0' wordIndex = 2; mapOffset < mapsCount && wordIndex < words.Count; mapOffset++' wordIndex += wordsPerMap) {  			int rounds = 0;  			if (int.TryParse (words [wordIndex + 2]' out rounds) == true) {  				maps.Add (new MapModel () {  					Index = mapOffset'  					Rounds = rounds == 0 ? 2 : rounds'  					Name = words [wordIndex]'  					GameMode = new GameModeModel () {  						Name = words [wordIndex + 1]  					}  				});  			}  		}  	}  }  
Magic Number,Myrcon.Protocols.Frostbite.Generations.Second.Objects,SecondFrostbiteMapList,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Generations\Second\Objects\SecondFrostbiteMapList.cs,Parse,The following statement contains a magic number: if (words.Count >= 2) {  	int mapsCount = 0' wordsPerMap = 0;  	if (int.TryParse (words [0]' out mapsCount) == true && int.TryParse (words [1]' out wordsPerMap) == true) {  		for (int mapOffset = 0' wordIndex = 2; mapOffset < mapsCount && wordIndex < words.Count; mapOffset++' wordIndex += wordsPerMap) {  			int rounds = 0;  			if (int.TryParse (words [wordIndex + 2]' out rounds) == true) {  				maps.Add (new MapModel () {  					Index = mapOffset'  					Rounds = rounds == 0 ? 2 : rounds'  					Name = words [wordIndex]'  					GameMode = new GameModeModel () {  						Name = words [wordIndex + 1]  					}  				});  			}  		}  	}  }  
Magic Number,Myrcon.Protocols.Frostbite.Generations.Second.Objects,SecondFrostbiteMapList,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Generations\Second\Objects\SecondFrostbiteMapList.cs,Parse,The following statement contains a magic number: if (words.Count >= 2) {  	int mapsCount = 0' wordsPerMap = 0;  	if (int.TryParse (words [0]' out mapsCount) == true && int.TryParse (words [1]' out wordsPerMap) == true) {  		for (int mapOffset = 0' wordIndex = 2; mapOffset < mapsCount && wordIndex < words.Count; mapOffset++' wordIndex += wordsPerMap) {  			int rounds = 0;  			if (int.TryParse (words [wordIndex + 2]' out rounds) == true) {  				maps.Add (new MapModel () {  					Index = mapOffset'  					Rounds = rounds == 0 ? 2 : rounds'  					Name = words [wordIndex]'  					GameMode = new GameModeModel () {  						Name = words [wordIndex + 1]  					}  				});  			}  		}  	}  }  
Magic Number,Myrcon.Protocols.Frostbite.Generations.Second.Objects,SecondFrostbiteMapList,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Generations\Second\Objects\SecondFrostbiteMapList.cs,Parse,The following statement contains a magic number: if (words.Count >= 2) {  	int mapsCount = 0' wordsPerMap = 0;  	if (int.TryParse (words [0]' out mapsCount) == true && int.TryParse (words [1]' out wordsPerMap) == true) {  		for (int mapOffset = 0' wordIndex = 2; mapOffset < mapsCount && wordIndex < words.Count; mapOffset++' wordIndex += wordsPerMap) {  			int rounds = 0;  			if (int.TryParse (words [wordIndex + 2]' out rounds) == true) {  				maps.Add (new MapModel () {  					Index = mapOffset'  					Rounds = rounds == 0 ? 2 : rounds'  					Name = words [wordIndex]'  					GameMode = new GameModeModel () {  						Name = words [wordIndex + 1]  					}  				});  			}  		}  	}  }  
Magic Number,Myrcon.Protocols.Frostbite.Generations.Second.Objects,SecondFrostbiteMapList,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Generations\Second\Objects\SecondFrostbiteMapList.cs,Parse,The following statement contains a magic number: if (int.TryParse (words [0]' out mapsCount) == true && int.TryParse (words [1]' out wordsPerMap) == true) {  	for (int mapOffset = 0' wordIndex = 2; mapOffset < mapsCount && wordIndex < words.Count; mapOffset++' wordIndex += wordsPerMap) {  		int rounds = 0;  		if (int.TryParse (words [wordIndex + 2]' out rounds) == true) {  			maps.Add (new MapModel () {  				Index = mapOffset'  				Rounds = rounds == 0 ? 2 : rounds'  				Name = words [wordIndex]'  				GameMode = new GameModeModel () {  					Name = words [wordIndex + 1]  				}  			});  		}  	}  }  
Magic Number,Myrcon.Protocols.Frostbite.Generations.Second.Objects,SecondFrostbiteMapList,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Generations\Second\Objects\SecondFrostbiteMapList.cs,Parse,The following statement contains a magic number: if (int.TryParse (words [0]' out mapsCount) == true && int.TryParse (words [1]' out wordsPerMap) == true) {  	for (int mapOffset = 0' wordIndex = 2; mapOffset < mapsCount && wordIndex < words.Count; mapOffset++' wordIndex += wordsPerMap) {  		int rounds = 0;  		if (int.TryParse (words [wordIndex + 2]' out rounds) == true) {  			maps.Add (new MapModel () {  				Index = mapOffset'  				Rounds = rounds == 0 ? 2 : rounds'  				Name = words [wordIndex]'  				GameMode = new GameModeModel () {  					Name = words [wordIndex + 1]  				}  			});  		}  	}  }  
Magic Number,Myrcon.Protocols.Frostbite.Generations.Second.Objects,SecondFrostbiteMapList,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Generations\Second\Objects\SecondFrostbiteMapList.cs,Parse,The following statement contains a magic number: if (int.TryParse (words [0]' out mapsCount) == true && int.TryParse (words [1]' out wordsPerMap) == true) {  	for (int mapOffset = 0' wordIndex = 2; mapOffset < mapsCount && wordIndex < words.Count; mapOffset++' wordIndex += wordsPerMap) {  		int rounds = 0;  		if (int.TryParse (words [wordIndex + 2]' out rounds) == true) {  			maps.Add (new MapModel () {  				Index = mapOffset'  				Rounds = rounds == 0 ? 2 : rounds'  				Name = words [wordIndex]'  				GameMode = new GameModeModel () {  					Name = words [wordIndex + 1]  				}  			});  		}  	}  }  
Magic Number,Myrcon.Protocols.Frostbite.Generations.Second.Objects,SecondFrostbiteMapList,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Generations\Second\Objects\SecondFrostbiteMapList.cs,Parse,The following statement contains a magic number: for (int mapOffset = 0' wordIndex = 2; mapOffset < mapsCount && wordIndex < words.Count; mapOffset++' wordIndex += wordsPerMap) {  	int rounds = 0;  	if (int.TryParse (words [wordIndex + 2]' out rounds) == true) {  		maps.Add (new MapModel () {  			Index = mapOffset'  			Rounds = rounds == 0 ? 2 : rounds'  			Name = words [wordIndex]'  			GameMode = new GameModeModel () {  				Name = words [wordIndex + 1]  			}  		});  	}  }  
Magic Number,Myrcon.Protocols.Frostbite.Generations.Second.Objects,SecondFrostbiteMapList,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Generations\Second\Objects\SecondFrostbiteMapList.cs,Parse,The following statement contains a magic number: for (int mapOffset = 0' wordIndex = 2; mapOffset < mapsCount && wordIndex < words.Count; mapOffset++' wordIndex += wordsPerMap) {  	int rounds = 0;  	if (int.TryParse (words [wordIndex + 2]' out rounds) == true) {  		maps.Add (new MapModel () {  			Index = mapOffset'  			Rounds = rounds == 0 ? 2 : rounds'  			Name = words [wordIndex]'  			GameMode = new GameModeModel () {  				Name = words [wordIndex + 1]  			}  		});  	}  }  
Magic Number,Myrcon.Protocols.Frostbite.Generations.Second.Objects,SecondFrostbiteMapList,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Generations\Second\Objects\SecondFrostbiteMapList.cs,Parse,The following statement contains a magic number: for (int mapOffset = 0' wordIndex = 2; mapOffset < mapsCount && wordIndex < words.Count; mapOffset++' wordIndex += wordsPerMap) {  	int rounds = 0;  	if (int.TryParse (words [wordIndex + 2]' out rounds) == true) {  		maps.Add (new MapModel () {  			Index = mapOffset'  			Rounds = rounds == 0 ? 2 : rounds'  			Name = words [wordIndex]'  			GameMode = new GameModeModel () {  				Name = words [wordIndex + 1]  			}  		});  	}  }  
Magic Number,Myrcon.Protocols.Frostbite.Generations.Second.Objects,SecondFrostbiteMapList,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Generations\Second\Objects\SecondFrostbiteMapList.cs,Parse,The following statement contains a magic number: if (int.TryParse (words [wordIndex + 2]' out rounds) == true) {  	maps.Add (new MapModel () {  		Index = mapOffset'  		Rounds = rounds == 0 ? 2 : rounds'  		Name = words [wordIndex]'  		GameMode = new GameModeModel () {  			Name = words [wordIndex + 1]  		}  	});  }  
Magic Number,Myrcon.Protocols.Frostbite.Generations.Second.Objects,SecondFrostbiteMapList,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Generations\Second\Objects\SecondFrostbiteMapList.cs,Parse,The following statement contains a magic number: if (int.TryParse (words [wordIndex + 2]' out rounds) == true) {  	maps.Add (new MapModel () {  		Index = mapOffset'  		Rounds = rounds == 0 ? 2 : rounds'  		Name = words [wordIndex]'  		GameMode = new GameModeModel () {  			Name = words [wordIndex + 1]  		}  	});  }  
Magic Number,Myrcon.Protocols.Frostbite.Generations.Second.Objects,SecondFrostbiteMapList,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Generations\Second\Objects\SecondFrostbiteMapList.cs,Parse,The following statement contains a magic number: maps.Add (new MapModel () {  	Index = mapOffset'  	Rounds = rounds == 0 ? 2 : rounds'  	Name = words [wordIndex]'  	GameMode = new GameModeModel () {  		Name = words [wordIndex + 1]  	}  });  
Magic Number,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,FrostbiteGame,The following statement contains a magic number: this.State.Settings.Maximum.ChatLinesCount = 100;  
Magic Number,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,Synchronize,The following statement contains a magic number: if (this.Client.ConnectionState == ConnectionState.ConnectionLoggedIn) {  	this.Send (this.CreatePacket ("admin.listPlayers all"));  	this.Send (this.CreatePacket ("serverInfo"));  	if (DateTime.Now >= this.NextAuxiliarySynchronization) {  		this.AuxiliarySynchronize ();  		this.NextAuxiliarySynchronization = DateTime.Now.AddSeconds (120);  	}  }  
Magic Number,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,Synchronize,The following statement contains a magic number: if (DateTime.Now >= this.NextAuxiliarySynchronization) {  	this.AuxiliarySynchronize ();  	this.NextAuxiliarySynchronization = DateTime.Now.AddSeconds (120);  }  
Magic Number,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,Synchronize,The following statement contains a magic number: this.NextAuxiliarySynchronization = DateTime.Now.AddSeconds (120);  
Magic Number,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,HashToByteArray,The following statement contains a magic number: for (int i = 0; i < returnHash.Length; i++) {  	returnHash [i] = Convert.ToByte (hexString.Substring (i * 2' 2)' 16);  }  
Magic Number,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,HashToByteArray,The following statement contains a magic number: for (int i = 0; i < returnHash.Length; i++) {  	returnHash [i] = Convert.ToByte (hexString.Substring (i * 2' 2)' 16);  }  
Magic Number,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,HashToByteArray,The following statement contains a magic number: for (int i = 0; i < returnHash.Length; i++) {  	returnHash [i] = Convert.ToByte (hexString.Substring (i * 2' 2)' 16);  }  
Magic Number,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,HashToByteArray,The following statement contains a magic number: returnHash [i] = Convert.ToByte (hexString.Substring (i * 2' 2)' 16);  
Magic Number,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,HashToByteArray,The following statement contains a magic number: returnHash [i] = Convert.ToByte (hexString.Substring (i * 2' 2)' 16);  
Magic Number,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,HashToByteArray,The following statement contains a magic number: returnHash [i] = Convert.ToByte (hexString.Substring (i * 2' 2)' 16);  
Magic Number,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,ServerInfoDispatchHandler,The following statement contains a magic number: if (response != null) {  	IProtocolStateDifference difference = null;  	FrostbiteServerInfo info = new FrostbiteServerInfo ().Parse (response.Packet.Words.GetRange (1' response.Packet.Words.Count - 1)' this.ServerInfoParameters);  	this.UpdateSettingsMap (info.Map' info.GameMode);  	this.UpdateSettingsRound (info.CurrentRound' info.TotalRounds);  	this.State.Settings.Current.ServerNameText = info.ServerName;  	// this.State.Variables.ConnectionState = ConnectionState.Connected; String b = info.ConnectionState;  	this.State.Settings.Current.PlayerCount = info.PlayerCount;  	this.State.Settings.Maximum.PlayerCount = info.MaxPlayerCount;  	//this.State.Settings.RankedEnabled = info.Ranked;  	this.State.Settings.Current.AntiCheatEnabled = info.PunkBuster;  	this.State.Settings.Current.PasswordProtectionEnabled = info.Passworded;  	this.State.Settings.Current.UpTimeMilliseconds = info.ServerUptime * 1000;  	this.State.Settings.Current.RoundTimeMilliseconds = info.RoundTime * 1000;  	this.State.Settings.Current.ModNameText = info.GameMod.ToString ();  	if (this.State.MapPool.Count == 0) {  		ProtocolConfigModel config = null;  		if (info.GameMod == GameMods.None) {  			config = ProtocolConfigLoader.Load<ProtocolConfigModel> (this.Options.ConfigDirectory' this.ProtocolType);  		} else {  			config = ProtocolConfigLoader.Load<ProtocolConfigModel> (this.Options.ConfigDirectory' new ProtocolType (this.ProtocolType) {  				Type = String.Format ("{0}_{1}"' this.ProtocolType' info.GameMod)  			});  		}  		if (config != null) {  			config.Parse (this);  		}  		difference = new ProtocolStateDifference () {  			Override = true'  			Modified = this.State  		};  		this.ApplyProtocolStateDifference (difference);  		this.OnProtocolEvent (ProtocolEventType.ProtocolConfigExecuted' difference);  	}  	difference = new ProtocolStateDifference () {  		Modified =  {  			Settings = this.State.Settings  		}  	};  	this.ApplyProtocolStateDifference (difference);  	this.OnProtocolEvent (ProtocolEventType.ProtocolSettingsUpdated' difference' new ProtocolEventData () {  		Settings = new List<Settings> () {  			this.State.Settings  		}  	});  }  
Magic Number,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,ServerInfoDispatchHandler,The following statement contains a magic number: if (response != null) {  	IProtocolStateDifference difference = null;  	FrostbiteServerInfo info = new FrostbiteServerInfo ().Parse (response.Packet.Words.GetRange (1' response.Packet.Words.Count - 1)' this.ServerInfoParameters);  	this.UpdateSettingsMap (info.Map' info.GameMode);  	this.UpdateSettingsRound (info.CurrentRound' info.TotalRounds);  	this.State.Settings.Current.ServerNameText = info.ServerName;  	// this.State.Variables.ConnectionState = ConnectionState.Connected; String b = info.ConnectionState;  	this.State.Settings.Current.PlayerCount = info.PlayerCount;  	this.State.Settings.Maximum.PlayerCount = info.MaxPlayerCount;  	//this.State.Settings.RankedEnabled = info.Ranked;  	this.State.Settings.Current.AntiCheatEnabled = info.PunkBuster;  	this.State.Settings.Current.PasswordProtectionEnabled = info.Passworded;  	this.State.Settings.Current.UpTimeMilliseconds = info.ServerUptime * 1000;  	this.State.Settings.Current.RoundTimeMilliseconds = info.RoundTime * 1000;  	this.State.Settings.Current.ModNameText = info.GameMod.ToString ();  	if (this.State.MapPool.Count == 0) {  		ProtocolConfigModel config = null;  		if (info.GameMod == GameMods.None) {  			config = ProtocolConfigLoader.Load<ProtocolConfigModel> (this.Options.ConfigDirectory' this.ProtocolType);  		} else {  			config = ProtocolConfigLoader.Load<ProtocolConfigModel> (this.Options.ConfigDirectory' new ProtocolType (this.ProtocolType) {  				Type = String.Format ("{0}_{1}"' this.ProtocolType' info.GameMod)  			});  		}  		if (config != null) {  			config.Parse (this);  		}  		difference = new ProtocolStateDifference () {  			Override = true'  			Modified = this.State  		};  		this.ApplyProtocolStateDifference (difference);  		this.OnProtocolEvent (ProtocolEventType.ProtocolConfigExecuted' difference);  	}  	difference = new ProtocolStateDifference () {  		Modified =  {  			Settings = this.State.Settings  		}  	};  	this.ApplyProtocolStateDifference (difference);  	this.OnProtocolEvent (ProtocolEventType.ProtocolSettingsUpdated' difference' new ProtocolEventData () {  		Settings = new List<Settings> () {  			this.State.Settings  		}  	});  }  
Magic Number,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,ServerInfoDispatchHandler,The following statement contains a magic number: this.State.Settings.Current.UpTimeMilliseconds = info.ServerUptime * 1000;  
Magic Number,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,ServerInfoDispatchHandler,The following statement contains a magic number: this.State.Settings.Current.RoundTimeMilliseconds = info.RoundTime * 1000;  
Magic Number,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,LoginPlainTextDispatchHandler,The following statement contains a magic number: if (response != null) {  	if (request.Packet.Words.Count >= 2 && response.Packet.Words.Count == 1 && response.Packet.Words [0] == "OK") {  		// We logged in successfully. Make sure we have events enabled before we announce we are ready though.  		this.SendEventsEnabledPacket ();  		this.NextAuxiliarySynchronization = DateTime.Now;  		//this.Synchronize();  	}  }  
Magic Number,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,LoginPlainTextDispatchHandler,The following statement contains a magic number: if (request.Packet.Words.Count >= 2 && response.Packet.Words.Count == 1 && response.Packet.Words [0] == "OK") {  	// We logged in successfully. Make sure we have events enabled before we announce we are ready though.  	this.SendEventsEnabledPacket ();  	this.NextAuxiliarySynchronization = DateTime.Now;  	//this.Synchronize();  }  
Magic Number,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,LoginHashedDispatchHandler,The following statement contains a magic number: if (response != null) {  	if (request.Packet.Words.Count == 1 && response.Packet.Words.Count >= 2) {  		this.SendRequest ("login.hashed"' this.GeneratePasswordHash (this.HashToByteArray (response.Packet.Words [1])' this.Options.Password));  	} else if (request.Packet.Words.Count >= 2 && response.Packet.Words.Count == 1) {  		// We logged in successfully. Make sure we have events enabled before we announce we are ready though.  		this.SendEventsEnabledPacket ();  		this.NextAuxiliarySynchronization = DateTime.Now;  		//this.Synchronize();  	}  }  
Magic Number,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,LoginHashedDispatchHandler,The following statement contains a magic number: if (response != null) {  	if (request.Packet.Words.Count == 1 && response.Packet.Words.Count >= 2) {  		this.SendRequest ("login.hashed"' this.GeneratePasswordHash (this.HashToByteArray (response.Packet.Words [1])' this.Options.Password));  	} else if (request.Packet.Words.Count >= 2 && response.Packet.Words.Count == 1) {  		// We logged in successfully. Make sure we have events enabled before we announce we are ready though.  		this.SendEventsEnabledPacket ();  		this.NextAuxiliarySynchronization = DateTime.Now;  		//this.Synchronize();  	}  }  
Magic Number,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,LoginHashedDispatchHandler,The following statement contains a magic number: if (request.Packet.Words.Count == 1 && response.Packet.Words.Count >= 2) {  	this.SendRequest ("login.hashed"' this.GeneratePasswordHash (this.HashToByteArray (response.Packet.Words [1])' this.Options.Password));  } else if (request.Packet.Words.Count >= 2 && response.Packet.Words.Count == 1) {  	// We logged in successfully. Make sure we have events enabled before we announce we are ready though.  	this.SendEventsEnabledPacket ();  	this.NextAuxiliarySynchronization = DateTime.Now;  	//this.Synchronize();  }  
Magic Number,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,LoginHashedDispatchHandler,The following statement contains a magic number: if (request.Packet.Words.Count == 1 && response.Packet.Words.Count >= 2) {  	this.SendRequest ("login.hashed"' this.GeneratePasswordHash (this.HashToByteArray (response.Packet.Words [1])' this.Options.Password));  } else if (request.Packet.Words.Count >= 2 && response.Packet.Words.Count == 1) {  	// We logged in successfully. Make sure we have events enabled before we announce we are ready though.  	this.SendEventsEnabledPacket ();  	this.NextAuxiliarySynchronization = DateTime.Now;  	//this.Synchronize();  }  
Magic Number,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,LoginHashedDispatchHandler,The following statement contains a magic number: if (request.Packet.Words.Count >= 2 && response.Packet.Words.Count == 1) {  	// We logged in successfully. Make sure we have events enabled before we announce we are ready though.  	this.SendEventsEnabledPacket ();  	this.NextAuxiliarySynchronization = DateTime.Now;  	//this.Synchronize();  }  
Magic Number,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,AdminEventsEnabledDispatchHandler,The following statement contains a magic number: if (response != null) {  	if (request.Packet.Words.Count >= 2 && response.Packet.Words.Count == 1 && response.Packet.Words [0] == "OK") {  		// We logged in successfully and we have bilateral communication established. READY UP!  		this.Client.ConnectionState = ConnectionState.ConnectionLoggedIn;  	}  }  
Magic Number,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,AdminEventsEnabledDispatchHandler,The following statement contains a magic number: if (request.Packet.Words.Count >= 2 && response.Packet.Words.Count == 1 && response.Packet.Words [0] == "OK") {  	// We logged in successfully and we have bilateral communication established. READY UP!  	this.Client.ConnectionState = ConnectionState.ConnectionLoggedIn;  }  
Magic Number,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,AdminListPlayersFinalize,The following statement contains a magic number: foreach (PlayerModel player in players) {  	PlayerModel statePlayer;  	this.State.Players.TryGetValue (player.Uid' out statePlayer);  	player.Ping = player.Ping > 1000 ? 0 : player.Ping;  	if (statePlayer != null) {  		// Already exists' update with any new information we have.  		statePlayer.Kills = player.Kills;  		statePlayer.Score = player.Score;  		statePlayer.Deaths = player.Deaths;  		statePlayer.ClanTag = player.ClanTag;  		statePlayer.Ping = player.Ping;  		statePlayer.Uid = player.Uid;  		statePlayer.ModifyGroup (player.Groups.FirstOrDefault (group => group.Type == GroupModel.Team));  		statePlayer.ModifyGroup (player.Groups.FirstOrDefault (group => group.Type == GroupModel.Squad));  		modified.AddOrUpdate (player.Uid' id => statePlayer' (id' model) => statePlayer);  	} else {  		modified.TryAdd (player.Uid' player);  	}  }  
Magic Number,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,AdminListPlayersFinalize,The following statement contains a magic number: player.Ping = player.Ping > 1000 ? 0 : player.Ping;  
Magic Number,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,AdminSayDispatchHandler,The following statement contains a magic number: if (request.Packet.Words.Count >= 3) {  	this.OnProtocolEvent (ProtocolEventType.ProtocolChat' new ProtocolStateDifference ()' new ProtocolEventData () {  		Chats = new List<ChatModel> () {  			FrostbiteChat.ParseAdminSay (request.Packet.Words.GetRange (1' request.Packet.Words.Count - 1))  		}  	});  }  
Magic Number,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,VersionDispatchHandler,The following statement contains a magic number: if (request.Packet.Words.Count >= 3) {  	this.State.Settings.Current.ServerVersionText = request.Packet.Words [2];  }  
Magic Number,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,VersionDispatchHandler,The following statement contains a magic number: if (request.Packet.Words.Count >= 3) {  	this.State.Settings.Current.ServerVersionText = request.Packet.Words [2];  }  
Magic Number,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,VersionDispatchHandler,The following statement contains a magic number: this.State.Settings.Current.ServerVersionText = request.Packet.Words [2];  
Magic Number,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,BanListListDispatchHandler,The following statement contains a magic number: if (request.Packet.Words.Count >= 1) {  	int startOffset = 0;  	if (request.Packet.Words.Count >= 2) {  		if (int.TryParse (request.Packet.Words [1]' out startOffset) == false) {  			startOffset = 0;  		}  	}  	// We've just started requesting the banlist' clear it.  	if (startOffset == 0) {  		this.State.Bans.Clear ();  	}  	List<BanModel> banList = FrostbiteBanList.Parse (response.Packet.Words.GetRange (1' response.Packet.Words.Count - 1));  	if (banList.Count > 0) {  		foreach (BanModel ban in banList) {  			var closureBan = ban;  			var key = String.Format ("{0}/{1}"' ban.Scope.Times.First ().Context' ban.Scope.Players.First ().Uid ?? ban.Scope.Players.First ().Name ?? ban.Scope.Players.First ().Ip);  			this.State.Bans.AddOrUpdate (key' id => closureBan' (id' model) => closureBan);  		}  		this.Send (this.CreatePacket ("banList.list {0}"' startOffset + 100));  	} else {  		IProtocolStateDifference difference = new ProtocolStateDifference () {  			Override = true'  			Modified =  {  				Bans = this.State.Bans  			}  		};  		this.ApplyProtocolStateDifference (difference);  		// We have recieved the whole banlist in 100 ban increments.. throw event.  		this.OnProtocolEvent (ProtocolEventType.ProtocolBanlistUpdated' difference);  	}  }  
Magic Number,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,BanListListDispatchHandler,The following statement contains a magic number: if (request.Packet.Words.Count >= 1) {  	int startOffset = 0;  	if (request.Packet.Words.Count >= 2) {  		if (int.TryParse (request.Packet.Words [1]' out startOffset) == false) {  			startOffset = 0;  		}  	}  	// We've just started requesting the banlist' clear it.  	if (startOffset == 0) {  		this.State.Bans.Clear ();  	}  	List<BanModel> banList = FrostbiteBanList.Parse (response.Packet.Words.GetRange (1' response.Packet.Words.Count - 1));  	if (banList.Count > 0) {  		foreach (BanModel ban in banList) {  			var closureBan = ban;  			var key = String.Format ("{0}/{1}"' ban.Scope.Times.First ().Context' ban.Scope.Players.First ().Uid ?? ban.Scope.Players.First ().Name ?? ban.Scope.Players.First ().Ip);  			this.State.Bans.AddOrUpdate (key' id => closureBan' (id' model) => closureBan);  		}  		this.Send (this.CreatePacket ("banList.list {0}"' startOffset + 100));  	} else {  		IProtocolStateDifference difference = new ProtocolStateDifference () {  			Override = true'  			Modified =  {  				Bans = this.State.Bans  			}  		};  		this.ApplyProtocolStateDifference (difference);  		// We have recieved the whole banlist in 100 ban increments.. throw event.  		this.OnProtocolEvent (ProtocolEventType.ProtocolBanlistUpdated' difference);  	}  }  
Magic Number,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,BanListListDispatchHandler,The following statement contains a magic number: if (request.Packet.Words.Count >= 2) {  	if (int.TryParse (request.Packet.Words [1]' out startOffset) == false) {  		startOffset = 0;  	}  }  
Magic Number,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,BanListListDispatchHandler,The following statement contains a magic number: if (banList.Count > 0) {  	foreach (BanModel ban in banList) {  		var closureBan = ban;  		var key = String.Format ("{0}/{1}"' ban.Scope.Times.First ().Context' ban.Scope.Players.First ().Uid ?? ban.Scope.Players.First ().Name ?? ban.Scope.Players.First ().Ip);  		this.State.Bans.AddOrUpdate (key' id => closureBan' (id' model) => closureBan);  	}  	this.Send (this.CreatePacket ("banList.list {0}"' startOffset + 100));  } else {  	IProtocolStateDifference difference = new ProtocolStateDifference () {  		Override = true'  		Modified =  {  			Bans = this.State.Bans  		}  	};  	this.ApplyProtocolStateDifference (difference);  	// We have recieved the whole banlist in 100 ban increments.. throw event.  	this.OnProtocolEvent (ProtocolEventType.ProtocolBanlistUpdated' difference);  }  
Magic Number,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,BanListListDispatchHandler,The following statement contains a magic number: this.Send (this.CreatePacket ("banList.list {0}"' startOffset + 100));  
Magic Number,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,VarsServerNameDispatchHandler,The following statement contains a magic number: if (response.Packet.Words.Count >= 2) {  	this.State.Settings.Current.ServerNameText = response.Packet.Words [1];  }  
Magic Number,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,VarsGamePasswordDispatchHandler,The following statement contains a magic number: if (response.Packet.Words.Count >= 2) {  	this.State.Settings.Current.PasswordText = response.Packet.Words [1];  }  
Magic Number,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,VarsGamePunkbusterDispatchHandler,The following statement contains a magic number: if (response.Packet.Words.Count >= 2 && bool.TryParse (response.Packet.Words [1]' out boolOut)) {  	this.State.Settings.Current.AntiCheatEnabled = boolOut;  }  
Magic Number,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,VarsHardcoreDispatchHandler,The following statement contains a magic number: if (response.Packet.Words.Count >= 2 && bool.TryParse (response.Packet.Words [1]' out boolOut)) {  	this.State.Settings.Current.HardcoreEnabled = boolOut;  }  
Magic Number,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,VarsRankedDispatchHandler,The following statement contains a magic number: if (response.Packet.Words.Count >= 2 && bool.TryParse (response.Packet.Words [1]' out boolOut)) {  	//this.State.Settings.RankedEnabled = boolOut;  }  
Magic Number,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,VarsRankLimitDispatchHandler,The following statement contains a magic number: if (response.Packet.Words.Count >= 2 && int.TryParse (response.Packet.Words [1]' out intOut)) {  	this.State.Settings.Maximum.PlayerRank = intOut;  }  
Magic Number,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,VarsTeamBalanceDispatchHandler,The following statement contains a magic number: if (response.Packet.Words.Count >= 2 && bool.TryParse (response.Packet.Words [1]' out boolOut)) {  	this.State.Settings.Current.AutoBalanceEnabled = boolOut;  }  
Magic Number,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,VarsFriendlyFireDispatchHandler,The following statement contains a magic number: if (response.Packet.Words.Count >= 2 && bool.TryParse (response.Packet.Words [1]' out boolOut)) {  	this.State.Settings.Current.FriendlyFireEnabled = boolOut;  }  
Magic Number,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,VarsBannerUrlDispatchHandler,The following statement contains a magic number: if (response.Packet.Words.Count >= 2) {  	this.State.Settings.Current.ServerBannerUrlText = response.Packet.Words [1];  }  
Magic Number,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,VarsServerDescriptionDispatchHandler,The following statement contains a magic number: if (response.Packet.Words.Count >= 2) {  	this.State.Settings.Current.ServerDescriptionText = response.Packet.Words [1];  }  
Magic Number,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,VarsKillCamDispatchHandler,The following statement contains a magic number: if (response.Packet.Words.Count >= 2 && bool.TryParse (response.Packet.Words [1]' out boolOut)) {  	this.State.Settings.Current.KillCameraEnabled = boolOut;  }  
Magic Number,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,VarsMiniMapDispatchHandler,The following statement contains a magic number: if (response.Packet.Words.Count >= 2 && bool.TryParse (response.Packet.Words [1]' out boolOut)) {  	this.State.Settings.Current.MiniMapEnabled = boolOut;  }  
Magic Number,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,VarsCrossHairDispatchHandler,The following statement contains a magic number: if (response.Packet.Words.Count >= 2 && bool.TryParse (response.Packet.Words [1]' out boolOut)) {  	this.State.Settings.Current.CrossHairEnabled = boolOut;  }  
Magic Number,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,VarsIdleTimeoutDispatchHandler,The following statement contains a magic number: if (response.Packet.Words.Count >= 2 && int.TryParse (response.Packet.Words [1]' out intOut)) {  	this.State.Settings.Current.IdleTimeoutEnabled = intOut != -1;  	this.State.Settings.Maximum.IdleTimeoutMilliseconds = intOut * 1000;  }  
Magic Number,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,VarsIdleTimeoutDispatchHandler,The following statement contains a magic number: if (response.Packet.Words.Count >= 2 && int.TryParse (response.Packet.Words [1]' out intOut)) {  	this.State.Settings.Current.IdleTimeoutEnabled = intOut != -1;  	this.State.Settings.Maximum.IdleTimeoutMilliseconds = intOut * 1000;  }  
Magic Number,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,VarsIdleTimeoutDispatchHandler,The following statement contains a magic number: this.State.Settings.Maximum.IdleTimeoutMilliseconds = intOut * 1000;  
Magic Number,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,VarsProfanityFilterDispatchHandler,The following statement contains a magic number: if (response.Packet.Words.Count >= 2 && bool.TryParse (response.Packet.Words [1]' out boolOut)) {  	this.State.Settings.Current.ProfanityFilterEnabled = boolOut;  }  
Magic Number,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,PlayerOnKillDispatchHandler,The following statement contains a magic number: if (request.Packet.Words.Count >= 11) {  	bool headshot = false;  	if (bool.TryParse (request.Packet.Words [4]' out headshot) == true) {  		var killer = this.State.Players.Select (p => p.Value).FirstOrDefault (p => p.Name == request.Packet.Words [1]);  		var victim = this.State.Players.Select (p => p.Value).FirstOrDefault (p => p.Name == request.Packet.Words [2]);  		IProtocolStateDifference difference = new ProtocolStateDifference () {  			Modified =  {  				Players = new ConcurrentDictionary<String' PlayerModel> (new Dictionary<String' PlayerModel> () {  					{  						killer != null ? killer.Uid : ""'  						killer  					}'  					{  						victim != null ? victim.Uid : ""'  						victim  					}  				})  			}  		};  		this.ApplyProtocolStateDifference (difference);  		this.OnProtocolEvent (ProtocolEventType.ProtocolPlayerKill' difference' new ProtocolEventData () {  			Kills = new List<KillModel> () {  				new KillModel () {  					Scope =  {  						Players = new List<PlayerModel> () {  							victim  						}'  						Items = new List<ItemModel> () {  							new ItemModel () {  								Name = request.Packet.Words [3]  							}  						}'  						Points = new List<Point3DModel> () {  							new Point3DModel (request.Packet.Words [8]' request.Packet.Words [10]' request.Packet.Words [9])  						}'  						HumanHitLocations = new List<HumanHitLocation> () {  							headshot == true ? FrostbiteGame.Headshot : FrostbiteGame.Bodyshot  						}  					}'  					Now =  {  						Players = new List<PlayerModel> () {  							killer  						}'  						Points = new List<Point3DModel> () {  							new Point3DModel (request.Packet.Words [5]' request.Packet.Words [7]' request.Packet.Words [6])  						}  					}  				}  			}  		});  	}  }  
Magic Number,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,PlayerOnKillDispatchHandler,The following statement contains a magic number: if (request.Packet.Words.Count >= 11) {  	bool headshot = false;  	if (bool.TryParse (request.Packet.Words [4]' out headshot) == true) {  		var killer = this.State.Players.Select (p => p.Value).FirstOrDefault (p => p.Name == request.Packet.Words [1]);  		var victim = this.State.Players.Select (p => p.Value).FirstOrDefault (p => p.Name == request.Packet.Words [2]);  		IProtocolStateDifference difference = new ProtocolStateDifference () {  			Modified =  {  				Players = new ConcurrentDictionary<String' PlayerModel> (new Dictionary<String' PlayerModel> () {  					{  						killer != null ? killer.Uid : ""'  						killer  					}'  					{  						victim != null ? victim.Uid : ""'  						victim  					}  				})  			}  		};  		this.ApplyProtocolStateDifference (difference);  		this.OnProtocolEvent (ProtocolEventType.ProtocolPlayerKill' difference' new ProtocolEventData () {  			Kills = new List<KillModel> () {  				new KillModel () {  					Scope =  {  						Players = new List<PlayerModel> () {  							victim  						}'  						Items = new List<ItemModel> () {  							new ItemModel () {  								Name = request.Packet.Words [3]  							}  						}'  						Points = new List<Point3DModel> () {  							new Point3DModel (request.Packet.Words [8]' request.Packet.Words [10]' request.Packet.Words [9])  						}'  						HumanHitLocations = new List<HumanHitLocation> () {  							headshot == true ? FrostbiteGame.Headshot : FrostbiteGame.Bodyshot  						}  					}'  					Now =  {  						Players = new List<PlayerModel> () {  							killer  						}'  						Points = new List<Point3DModel> () {  							new Point3DModel (request.Packet.Words [5]' request.Packet.Words [7]' request.Packet.Words [6])  						}  					}  				}  			}  		});  	}  }  
Magic Number,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,PlayerOnKillDispatchHandler,The following statement contains a magic number: if (request.Packet.Words.Count >= 11) {  	bool headshot = false;  	if (bool.TryParse (request.Packet.Words [4]' out headshot) == true) {  		var killer = this.State.Players.Select (p => p.Value).FirstOrDefault (p => p.Name == request.Packet.Words [1]);  		var victim = this.State.Players.Select (p => p.Value).FirstOrDefault (p => p.Name == request.Packet.Words [2]);  		IProtocolStateDifference difference = new ProtocolStateDifference () {  			Modified =  {  				Players = new ConcurrentDictionary<String' PlayerModel> (new Dictionary<String' PlayerModel> () {  					{  						killer != null ? killer.Uid : ""'  						killer  					}'  					{  						victim != null ? victim.Uid : ""'  						victim  					}  				})  			}  		};  		this.ApplyProtocolStateDifference (difference);  		this.OnProtocolEvent (ProtocolEventType.ProtocolPlayerKill' difference' new ProtocolEventData () {  			Kills = new List<KillModel> () {  				new KillModel () {  					Scope =  {  						Players = new List<PlayerModel> () {  							victim  						}'  						Items = new List<ItemModel> () {  							new ItemModel () {  								Name = request.Packet.Words [3]  							}  						}'  						Points = new List<Point3DModel> () {  							new Point3DModel (request.Packet.Words [8]' request.Packet.Words [10]' request.Packet.Words [9])  						}'  						HumanHitLocations = new List<HumanHitLocation> () {  							headshot == true ? FrostbiteGame.Headshot : FrostbiteGame.Bodyshot  						}  					}'  					Now =  {  						Players = new List<PlayerModel> () {  							killer  						}'  						Points = new List<Point3DModel> () {  							new Point3DModel (request.Packet.Words [5]' request.Packet.Words [7]' request.Packet.Words [6])  						}  					}  				}  			}  		});  	}  }  
Magic Number,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,PlayerOnKillDispatchHandler,The following statement contains a magic number: if (request.Packet.Words.Count >= 11) {  	bool headshot = false;  	if (bool.TryParse (request.Packet.Words [4]' out headshot) == true) {  		var killer = this.State.Players.Select (p => p.Value).FirstOrDefault (p => p.Name == request.Packet.Words [1]);  		var victim = this.State.Players.Select (p => p.Value).FirstOrDefault (p => p.Name == request.Packet.Words [2]);  		IProtocolStateDifference difference = new ProtocolStateDifference () {  			Modified =  {  				Players = new ConcurrentDictionary<String' PlayerModel> (new Dictionary<String' PlayerModel> () {  					{  						killer != null ? killer.Uid : ""'  						killer  					}'  					{  						victim != null ? victim.Uid : ""'  						victim  					}  				})  			}  		};  		this.ApplyProtocolStateDifference (difference);  		this.OnProtocolEvent (ProtocolEventType.ProtocolPlayerKill' difference' new ProtocolEventData () {  			Kills = new List<KillModel> () {  				new KillModel () {  					Scope =  {  						Players = new List<PlayerModel> () {  							victim  						}'  						Items = new List<ItemModel> () {  							new ItemModel () {  								Name = request.Packet.Words [3]  							}  						}'  						Points = new List<Point3DModel> () {  							new Point3DModel (request.Packet.Words [8]' request.Packet.Words [10]' request.Packet.Words [9])  						}'  						HumanHitLocations = new List<HumanHitLocation> () {  							headshot == true ? FrostbiteGame.Headshot : FrostbiteGame.Bodyshot  						}  					}'  					Now =  {  						Players = new List<PlayerModel> () {  							killer  						}'  						Points = new List<Point3DModel> () {  							new Point3DModel (request.Packet.Words [5]' request.Packet.Words [7]' request.Packet.Words [6])  						}  					}  				}  			}  		});  	}  }  
Magic Number,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,PlayerOnKillDispatchHandler,The following statement contains a magic number: if (request.Packet.Words.Count >= 11) {  	bool headshot = false;  	if (bool.TryParse (request.Packet.Words [4]' out headshot) == true) {  		var killer = this.State.Players.Select (p => p.Value).FirstOrDefault (p => p.Name == request.Packet.Words [1]);  		var victim = this.State.Players.Select (p => p.Value).FirstOrDefault (p => p.Name == request.Packet.Words [2]);  		IProtocolStateDifference difference = new ProtocolStateDifference () {  			Modified =  {  				Players = new ConcurrentDictionary<String' PlayerModel> (new Dictionary<String' PlayerModel> () {  					{  						killer != null ? killer.Uid : ""'  						killer  					}'  					{  						victim != null ? victim.Uid : ""'  						victim  					}  				})  			}  		};  		this.ApplyProtocolStateDifference (difference);  		this.OnProtocolEvent (ProtocolEventType.ProtocolPlayerKill' difference' new ProtocolEventData () {  			Kills = new List<KillModel> () {  				new KillModel () {  					Scope =  {  						Players = new List<PlayerModel> () {  							victim  						}'  						Items = new List<ItemModel> () {  							new ItemModel () {  								Name = request.Packet.Words [3]  							}  						}'  						Points = new List<Point3DModel> () {  							new Point3DModel (request.Packet.Words [8]' request.Packet.Words [10]' request.Packet.Words [9])  						}'  						HumanHitLocations = new List<HumanHitLocation> () {  							headshot == true ? FrostbiteGame.Headshot : FrostbiteGame.Bodyshot  						}  					}'  					Now =  {  						Players = new List<PlayerModel> () {  							killer  						}'  						Points = new List<Point3DModel> () {  							new Point3DModel (request.Packet.Words [5]' request.Packet.Words [7]' request.Packet.Words [6])  						}  					}  				}  			}  		});  	}  }  
Magic Number,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,PlayerOnKillDispatchHandler,The following statement contains a magic number: if (request.Packet.Words.Count >= 11) {  	bool headshot = false;  	if (bool.TryParse (request.Packet.Words [4]' out headshot) == true) {  		var killer = this.State.Players.Select (p => p.Value).FirstOrDefault (p => p.Name == request.Packet.Words [1]);  		var victim = this.State.Players.Select (p => p.Value).FirstOrDefault (p => p.Name == request.Packet.Words [2]);  		IProtocolStateDifference difference = new ProtocolStateDifference () {  			Modified =  {  				Players = new ConcurrentDictionary<String' PlayerModel> (new Dictionary<String' PlayerModel> () {  					{  						killer != null ? killer.Uid : ""'  						killer  					}'  					{  						victim != null ? victim.Uid : ""'  						victim  					}  				})  			}  		};  		this.ApplyProtocolStateDifference (difference);  		this.OnProtocolEvent (ProtocolEventType.ProtocolPlayerKill' difference' new ProtocolEventData () {  			Kills = new List<KillModel> () {  				new KillModel () {  					Scope =  {  						Players = new List<PlayerModel> () {  							victim  						}'  						Items = new List<ItemModel> () {  							new ItemModel () {  								Name = request.Packet.Words [3]  							}  						}'  						Points = new List<Point3DModel> () {  							new Point3DModel (request.Packet.Words [8]' request.Packet.Words [10]' request.Packet.Words [9])  						}'  						HumanHitLocations = new List<HumanHitLocation> () {  							headshot == true ? FrostbiteGame.Headshot : FrostbiteGame.Bodyshot  						}  					}'  					Now =  {  						Players = new List<PlayerModel> () {  							killer  						}'  						Points = new List<Point3DModel> () {  							new Point3DModel (request.Packet.Words [5]' request.Packet.Words [7]' request.Packet.Words [6])  						}  					}  				}  			}  		});  	}  }  
Magic Number,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,PlayerOnKillDispatchHandler,The following statement contains a magic number: if (request.Packet.Words.Count >= 11) {  	bool headshot = false;  	if (bool.TryParse (request.Packet.Words [4]' out headshot) == true) {  		var killer = this.State.Players.Select (p => p.Value).FirstOrDefault (p => p.Name == request.Packet.Words [1]);  		var victim = this.State.Players.Select (p => p.Value).FirstOrDefault (p => p.Name == request.Packet.Words [2]);  		IProtocolStateDifference difference = new ProtocolStateDifference () {  			Modified =  {  				Players = new ConcurrentDictionary<String' PlayerModel> (new Dictionary<String' PlayerModel> () {  					{  						killer != null ? killer.Uid : ""'  						killer  					}'  					{  						victim != null ? victim.Uid : ""'  						victim  					}  				})  			}  		};  		this.ApplyProtocolStateDifference (difference);  		this.OnProtocolEvent (ProtocolEventType.ProtocolPlayerKill' difference' new ProtocolEventData () {  			Kills = new List<KillModel> () {  				new KillModel () {  					Scope =  {  						Players = new List<PlayerModel> () {  							victim  						}'  						Items = new List<ItemModel> () {  							new ItemModel () {  								Name = request.Packet.Words [3]  							}  						}'  						Points = new List<Point3DModel> () {  							new Point3DModel (request.Packet.Words [8]' request.Packet.Words [10]' request.Packet.Words [9])  						}'  						HumanHitLocations = new List<HumanHitLocation> () {  							headshot == true ? FrostbiteGame.Headshot : FrostbiteGame.Bodyshot  						}  					}'  					Now =  {  						Players = new List<PlayerModel> () {  							killer  						}'  						Points = new List<Point3DModel> () {  							new Point3DModel (request.Packet.Words [5]' request.Packet.Words [7]' request.Packet.Words [6])  						}  					}  				}  			}  		});  	}  }  
Magic Number,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,PlayerOnKillDispatchHandler,The following statement contains a magic number: if (request.Packet.Words.Count >= 11) {  	bool headshot = false;  	if (bool.TryParse (request.Packet.Words [4]' out headshot) == true) {  		var killer = this.State.Players.Select (p => p.Value).FirstOrDefault (p => p.Name == request.Packet.Words [1]);  		var victim = this.State.Players.Select (p => p.Value).FirstOrDefault (p => p.Name == request.Packet.Words [2]);  		IProtocolStateDifference difference = new ProtocolStateDifference () {  			Modified =  {  				Players = new ConcurrentDictionary<String' PlayerModel> (new Dictionary<String' PlayerModel> () {  					{  						killer != null ? killer.Uid : ""'  						killer  					}'  					{  						victim != null ? victim.Uid : ""'  						victim  					}  				})  			}  		};  		this.ApplyProtocolStateDifference (difference);  		this.OnProtocolEvent (ProtocolEventType.ProtocolPlayerKill' difference' new ProtocolEventData () {  			Kills = new List<KillModel> () {  				new KillModel () {  					Scope =  {  						Players = new List<PlayerModel> () {  							victim  						}'  						Items = new List<ItemModel> () {  							new ItemModel () {  								Name = request.Packet.Words [3]  							}  						}'  						Points = new List<Point3DModel> () {  							new Point3DModel (request.Packet.Words [8]' request.Packet.Words [10]' request.Packet.Words [9])  						}'  						HumanHitLocations = new List<HumanHitLocation> () {  							headshot == true ? FrostbiteGame.Headshot : FrostbiteGame.Bodyshot  						}  					}'  					Now =  {  						Players = new List<PlayerModel> () {  							killer  						}'  						Points = new List<Point3DModel> () {  							new Point3DModel (request.Packet.Words [5]' request.Packet.Words [7]' request.Packet.Words [6])  						}  					}  				}  			}  		});  	}  }  
Magic Number,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,PlayerOnKillDispatchHandler,The following statement contains a magic number: if (request.Packet.Words.Count >= 11) {  	bool headshot = false;  	if (bool.TryParse (request.Packet.Words [4]' out headshot) == true) {  		var killer = this.State.Players.Select (p => p.Value).FirstOrDefault (p => p.Name == request.Packet.Words [1]);  		var victim = this.State.Players.Select (p => p.Value).FirstOrDefault (p => p.Name == request.Packet.Words [2]);  		IProtocolStateDifference difference = new ProtocolStateDifference () {  			Modified =  {  				Players = new ConcurrentDictionary<String' PlayerModel> (new Dictionary<String' PlayerModel> () {  					{  						killer != null ? killer.Uid : ""'  						killer  					}'  					{  						victim != null ? victim.Uid : ""'  						victim  					}  				})  			}  		};  		this.ApplyProtocolStateDifference (difference);  		this.OnProtocolEvent (ProtocolEventType.ProtocolPlayerKill' difference' new ProtocolEventData () {  			Kills = new List<KillModel> () {  				new KillModel () {  					Scope =  {  						Players = new List<PlayerModel> () {  							victim  						}'  						Items = new List<ItemModel> () {  							new ItemModel () {  								Name = request.Packet.Words [3]  							}  						}'  						Points = new List<Point3DModel> () {  							new Point3DModel (request.Packet.Words [8]' request.Packet.Words [10]' request.Packet.Words [9])  						}'  						HumanHitLocations = new List<HumanHitLocation> () {  							headshot == true ? FrostbiteGame.Headshot : FrostbiteGame.Bodyshot  						}  					}'  					Now =  {  						Players = new List<PlayerModel> () {  							killer  						}'  						Points = new List<Point3DModel> () {  							new Point3DModel (request.Packet.Words [5]' request.Packet.Words [7]' request.Packet.Words [6])  						}  					}  				}  			}  		});  	}  }  
Magic Number,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,PlayerOnKillDispatchHandler,The following statement contains a magic number: if (request.Packet.Words.Count >= 11) {  	bool headshot = false;  	if (bool.TryParse (request.Packet.Words [4]' out headshot) == true) {  		var killer = this.State.Players.Select (p => p.Value).FirstOrDefault (p => p.Name == request.Packet.Words [1]);  		var victim = this.State.Players.Select (p => p.Value).FirstOrDefault (p => p.Name == request.Packet.Words [2]);  		IProtocolStateDifference difference = new ProtocolStateDifference () {  			Modified =  {  				Players = new ConcurrentDictionary<String' PlayerModel> (new Dictionary<String' PlayerModel> () {  					{  						killer != null ? killer.Uid : ""'  						killer  					}'  					{  						victim != null ? victim.Uid : ""'  						victim  					}  				})  			}  		};  		this.ApplyProtocolStateDifference (difference);  		this.OnProtocolEvent (ProtocolEventType.ProtocolPlayerKill' difference' new ProtocolEventData () {  			Kills = new List<KillModel> () {  				new KillModel () {  					Scope =  {  						Players = new List<PlayerModel> () {  							victim  						}'  						Items = new List<ItemModel> () {  							new ItemModel () {  								Name = request.Packet.Words [3]  							}  						}'  						Points = new List<Point3DModel> () {  							new Point3DModel (request.Packet.Words [8]' request.Packet.Words [10]' request.Packet.Words [9])  						}'  						HumanHitLocations = new List<HumanHitLocation> () {  							headshot == true ? FrostbiteGame.Headshot : FrostbiteGame.Bodyshot  						}  					}'  					Now =  {  						Players = new List<PlayerModel> () {  							killer  						}'  						Points = new List<Point3DModel> () {  							new Point3DModel (request.Packet.Words [5]' request.Packet.Words [7]' request.Packet.Words [6])  						}  					}  				}  			}  		});  	}  }  
Magic Number,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,PlayerOnKillDispatchHandler,The following statement contains a magic number: if (bool.TryParse (request.Packet.Words [4]' out headshot) == true) {  	var killer = this.State.Players.Select (p => p.Value).FirstOrDefault (p => p.Name == request.Packet.Words [1]);  	var victim = this.State.Players.Select (p => p.Value).FirstOrDefault (p => p.Name == request.Packet.Words [2]);  	IProtocolStateDifference difference = new ProtocolStateDifference () {  		Modified =  {  			Players = new ConcurrentDictionary<String' PlayerModel> (new Dictionary<String' PlayerModel> () {  				{  					killer != null ? killer.Uid : ""'  					killer  				}'  				{  					victim != null ? victim.Uid : ""'  					victim  				}  			})  		}  	};  	this.ApplyProtocolStateDifference (difference);  	this.OnProtocolEvent (ProtocolEventType.ProtocolPlayerKill' difference' new ProtocolEventData () {  		Kills = new List<KillModel> () {  			new KillModel () {  				Scope =  {  					Players = new List<PlayerModel> () {  						victim  					}'  					Items = new List<ItemModel> () {  						new ItemModel () {  							Name = request.Packet.Words [3]  						}  					}'  					Points = new List<Point3DModel> () {  						new Point3DModel (request.Packet.Words [8]' request.Packet.Words [10]' request.Packet.Words [9])  					}'  					HumanHitLocations = new List<HumanHitLocation> () {  						headshot == true ? FrostbiteGame.Headshot : FrostbiteGame.Bodyshot  					}  				}'  				Now =  {  					Players = new List<PlayerModel> () {  						killer  					}'  					Points = new List<Point3DModel> () {  						new Point3DModel (request.Packet.Words [5]' request.Packet.Words [7]' request.Packet.Words [6])  					}  				}  			}  		}  	});  }  
Magic Number,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,PlayerOnKillDispatchHandler,The following statement contains a magic number: if (bool.TryParse (request.Packet.Words [4]' out headshot) == true) {  	var killer = this.State.Players.Select (p => p.Value).FirstOrDefault (p => p.Name == request.Packet.Words [1]);  	var victim = this.State.Players.Select (p => p.Value).FirstOrDefault (p => p.Name == request.Packet.Words [2]);  	IProtocolStateDifference difference = new ProtocolStateDifference () {  		Modified =  {  			Players = new ConcurrentDictionary<String' PlayerModel> (new Dictionary<String' PlayerModel> () {  				{  					killer != null ? killer.Uid : ""'  					killer  				}'  				{  					victim != null ? victim.Uid : ""'  					victim  				}  			})  		}  	};  	this.ApplyProtocolStateDifference (difference);  	this.OnProtocolEvent (ProtocolEventType.ProtocolPlayerKill' difference' new ProtocolEventData () {  		Kills = new List<KillModel> () {  			new KillModel () {  				Scope =  {  					Players = new List<PlayerModel> () {  						victim  					}'  					Items = new List<ItemModel> () {  						new ItemModel () {  							Name = request.Packet.Words [3]  						}  					}'  					Points = new List<Point3DModel> () {  						new Point3DModel (request.Packet.Words [8]' request.Packet.Words [10]' request.Packet.Words [9])  					}'  					HumanHitLocations = new List<HumanHitLocation> () {  						headshot == true ? FrostbiteGame.Headshot : FrostbiteGame.Bodyshot  					}  				}'  				Now =  {  					Players = new List<PlayerModel> () {  						killer  					}'  					Points = new List<Point3DModel> () {  						new Point3DModel (request.Packet.Words [5]' request.Packet.Words [7]' request.Packet.Words [6])  					}  				}  			}  		}  	});  }  
Magic Number,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,PlayerOnKillDispatchHandler,The following statement contains a magic number: if (bool.TryParse (request.Packet.Words [4]' out headshot) == true) {  	var killer = this.State.Players.Select (p => p.Value).FirstOrDefault (p => p.Name == request.Packet.Words [1]);  	var victim = this.State.Players.Select (p => p.Value).FirstOrDefault (p => p.Name == request.Packet.Words [2]);  	IProtocolStateDifference difference = new ProtocolStateDifference () {  		Modified =  {  			Players = new ConcurrentDictionary<String' PlayerModel> (new Dictionary<String' PlayerModel> () {  				{  					killer != null ? killer.Uid : ""'  					killer  				}'  				{  					victim != null ? victim.Uid : ""'  					victim  				}  			})  		}  	};  	this.ApplyProtocolStateDifference (difference);  	this.OnProtocolEvent (ProtocolEventType.ProtocolPlayerKill' difference' new ProtocolEventData () {  		Kills = new List<KillModel> () {  			new KillModel () {  				Scope =  {  					Players = new List<PlayerModel> () {  						victim  					}'  					Items = new List<ItemModel> () {  						new ItemModel () {  							Name = request.Packet.Words [3]  						}  					}'  					Points = new List<Point3DModel> () {  						new Point3DModel (request.Packet.Words [8]' request.Packet.Words [10]' request.Packet.Words [9])  					}'  					HumanHitLocations = new List<HumanHitLocation> () {  						headshot == true ? FrostbiteGame.Headshot : FrostbiteGame.Bodyshot  					}  				}'  				Now =  {  					Players = new List<PlayerModel> () {  						killer  					}'  					Points = new List<Point3DModel> () {  						new Point3DModel (request.Packet.Words [5]' request.Packet.Words [7]' request.Packet.Words [6])  					}  				}  			}  		}  	});  }  
Magic Number,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,PlayerOnKillDispatchHandler,The following statement contains a magic number: if (bool.TryParse (request.Packet.Words [4]' out headshot) == true) {  	var killer = this.State.Players.Select (p => p.Value).FirstOrDefault (p => p.Name == request.Packet.Words [1]);  	var victim = this.State.Players.Select (p => p.Value).FirstOrDefault (p => p.Name == request.Packet.Words [2]);  	IProtocolStateDifference difference = new ProtocolStateDifference () {  		Modified =  {  			Players = new ConcurrentDictionary<String' PlayerModel> (new Dictionary<String' PlayerModel> () {  				{  					killer != null ? killer.Uid : ""'  					killer  				}'  				{  					victim != null ? victim.Uid : ""'  					victim  				}  			})  		}  	};  	this.ApplyProtocolStateDifference (difference);  	this.OnProtocolEvent (ProtocolEventType.ProtocolPlayerKill' difference' new ProtocolEventData () {  		Kills = new List<KillModel> () {  			new KillModel () {  				Scope =  {  					Players = new List<PlayerModel> () {  						victim  					}'  					Items = new List<ItemModel> () {  						new ItemModel () {  							Name = request.Packet.Words [3]  						}  					}'  					Points = new List<Point3DModel> () {  						new Point3DModel (request.Packet.Words [8]' request.Packet.Words [10]' request.Packet.Words [9])  					}'  					HumanHitLocations = new List<HumanHitLocation> () {  						headshot == true ? FrostbiteGame.Headshot : FrostbiteGame.Bodyshot  					}  				}'  				Now =  {  					Players = new List<PlayerModel> () {  						killer  					}'  					Points = new List<Point3DModel> () {  						new Point3DModel (request.Packet.Words [5]' request.Packet.Words [7]' request.Packet.Words [6])  					}  				}  			}  		}  	});  }  
Magic Number,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,PlayerOnKillDispatchHandler,The following statement contains a magic number: if (bool.TryParse (request.Packet.Words [4]' out headshot) == true) {  	var killer = this.State.Players.Select (p => p.Value).FirstOrDefault (p => p.Name == request.Packet.Words [1]);  	var victim = this.State.Players.Select (p => p.Value).FirstOrDefault (p => p.Name == request.Packet.Words [2]);  	IProtocolStateDifference difference = new ProtocolStateDifference () {  		Modified =  {  			Players = new ConcurrentDictionary<String' PlayerModel> (new Dictionary<String' PlayerModel> () {  				{  					killer != null ? killer.Uid : ""'  					killer  				}'  				{  					victim != null ? victim.Uid : ""'  					victim  				}  			})  		}  	};  	this.ApplyProtocolStateDifference (difference);  	this.OnProtocolEvent (ProtocolEventType.ProtocolPlayerKill' difference' new ProtocolEventData () {  		Kills = new List<KillModel> () {  			new KillModel () {  				Scope =  {  					Players = new List<PlayerModel> () {  						victim  					}'  					Items = new List<ItemModel> () {  						new ItemModel () {  							Name = request.Packet.Words [3]  						}  					}'  					Points = new List<Point3DModel> () {  						new Point3DModel (request.Packet.Words [8]' request.Packet.Words [10]' request.Packet.Words [9])  					}'  					HumanHitLocations = new List<HumanHitLocation> () {  						headshot == true ? FrostbiteGame.Headshot : FrostbiteGame.Bodyshot  					}  				}'  				Now =  {  					Players = new List<PlayerModel> () {  						killer  					}'  					Points = new List<Point3DModel> () {  						new Point3DModel (request.Packet.Words [5]' request.Packet.Words [7]' request.Packet.Words [6])  					}  				}  			}  		}  	});  }  
Magic Number,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,PlayerOnKillDispatchHandler,The following statement contains a magic number: if (bool.TryParse (request.Packet.Words [4]' out headshot) == true) {  	var killer = this.State.Players.Select (p => p.Value).FirstOrDefault (p => p.Name == request.Packet.Words [1]);  	var victim = this.State.Players.Select (p => p.Value).FirstOrDefault (p => p.Name == request.Packet.Words [2]);  	IProtocolStateDifference difference = new ProtocolStateDifference () {  		Modified =  {  			Players = new ConcurrentDictionary<String' PlayerModel> (new Dictionary<String' PlayerModel> () {  				{  					killer != null ? killer.Uid : ""'  					killer  				}'  				{  					victim != null ? victim.Uid : ""'  					victim  				}  			})  		}  	};  	this.ApplyProtocolStateDifference (difference);  	this.OnProtocolEvent (ProtocolEventType.ProtocolPlayerKill' difference' new ProtocolEventData () {  		Kills = new List<KillModel> () {  			new KillModel () {  				Scope =  {  					Players = new List<PlayerModel> () {  						victim  					}'  					Items = new List<ItemModel> () {  						new ItemModel () {  							Name = request.Packet.Words [3]  						}  					}'  					Points = new List<Point3DModel> () {  						new Point3DModel (request.Packet.Words [8]' request.Packet.Words [10]' request.Packet.Words [9])  					}'  					HumanHitLocations = new List<HumanHitLocation> () {  						headshot == true ? FrostbiteGame.Headshot : FrostbiteGame.Bodyshot  					}  				}'  				Now =  {  					Players = new List<PlayerModel> () {  						killer  					}'  					Points = new List<Point3DModel> () {  						new Point3DModel (request.Packet.Words [5]' request.Packet.Words [7]' request.Packet.Words [6])  					}  				}  			}  		}  	});  }  
Magic Number,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,PlayerOnKillDispatchHandler,The following statement contains a magic number: if (bool.TryParse (request.Packet.Words [4]' out headshot) == true) {  	var killer = this.State.Players.Select (p => p.Value).FirstOrDefault (p => p.Name == request.Packet.Words [1]);  	var victim = this.State.Players.Select (p => p.Value).FirstOrDefault (p => p.Name == request.Packet.Words [2]);  	IProtocolStateDifference difference = new ProtocolStateDifference () {  		Modified =  {  			Players = new ConcurrentDictionary<String' PlayerModel> (new Dictionary<String' PlayerModel> () {  				{  					killer != null ? killer.Uid : ""'  					killer  				}'  				{  					victim != null ? victim.Uid : ""'  					victim  				}  			})  		}  	};  	this.ApplyProtocolStateDifference (difference);  	this.OnProtocolEvent (ProtocolEventType.ProtocolPlayerKill' difference' new ProtocolEventData () {  		Kills = new List<KillModel> () {  			new KillModel () {  				Scope =  {  					Players = new List<PlayerModel> () {  						victim  					}'  					Items = new List<ItemModel> () {  						new ItemModel () {  							Name = request.Packet.Words [3]  						}  					}'  					Points = new List<Point3DModel> () {  						new Point3DModel (request.Packet.Words [8]' request.Packet.Words [10]' request.Packet.Words [9])  					}'  					HumanHitLocations = new List<HumanHitLocation> () {  						headshot == true ? FrostbiteGame.Headshot : FrostbiteGame.Bodyshot  					}  				}'  				Now =  {  					Players = new List<PlayerModel> () {  						killer  					}'  					Points = new List<Point3DModel> () {  						new Point3DModel (request.Packet.Words [5]' request.Packet.Words [7]' request.Packet.Words [6])  					}  				}  			}  		}  	});  }  
Magic Number,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,PlayerOnKillDispatchHandler,The following statement contains a magic number: if (bool.TryParse (request.Packet.Words [4]' out headshot) == true) {  	var killer = this.State.Players.Select (p => p.Value).FirstOrDefault (p => p.Name == request.Packet.Words [1]);  	var victim = this.State.Players.Select (p => p.Value).FirstOrDefault (p => p.Name == request.Packet.Words [2]);  	IProtocolStateDifference difference = new ProtocolStateDifference () {  		Modified =  {  			Players = new ConcurrentDictionary<String' PlayerModel> (new Dictionary<String' PlayerModel> () {  				{  					killer != null ? killer.Uid : ""'  					killer  				}'  				{  					victim != null ? victim.Uid : ""'  					victim  				}  			})  		}  	};  	this.ApplyProtocolStateDifference (difference);  	this.OnProtocolEvent (ProtocolEventType.ProtocolPlayerKill' difference' new ProtocolEventData () {  		Kills = new List<KillModel> () {  			new KillModel () {  				Scope =  {  					Players = new List<PlayerModel> () {  						victim  					}'  					Items = new List<ItemModel> () {  						new ItemModel () {  							Name = request.Packet.Words [3]  						}  					}'  					Points = new List<Point3DModel> () {  						new Point3DModel (request.Packet.Words [8]' request.Packet.Words [10]' request.Packet.Words [9])  					}'  					HumanHitLocations = new List<HumanHitLocation> () {  						headshot == true ? FrostbiteGame.Headshot : FrostbiteGame.Bodyshot  					}  				}'  				Now =  {  					Players = new List<PlayerModel> () {  						killer  					}'  					Points = new List<Point3DModel> () {  						new Point3DModel (request.Packet.Words [5]' request.Packet.Words [7]' request.Packet.Words [6])  					}  				}  			}  		}  	});  }  
Magic Number,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,PlayerOnKillDispatchHandler,The following statement contains a magic number: if (bool.TryParse (request.Packet.Words [4]' out headshot) == true) {  	var killer = this.State.Players.Select (p => p.Value).FirstOrDefault (p => p.Name == request.Packet.Words [1]);  	var victim = this.State.Players.Select (p => p.Value).FirstOrDefault (p => p.Name == request.Packet.Words [2]);  	IProtocolStateDifference difference = new ProtocolStateDifference () {  		Modified =  {  			Players = new ConcurrentDictionary<String' PlayerModel> (new Dictionary<String' PlayerModel> () {  				{  					killer != null ? killer.Uid : ""'  					killer  				}'  				{  					victim != null ? victim.Uid : ""'  					victim  				}  			})  		}  	};  	this.ApplyProtocolStateDifference (difference);  	this.OnProtocolEvent (ProtocolEventType.ProtocolPlayerKill' difference' new ProtocolEventData () {  		Kills = new List<KillModel> () {  			new KillModel () {  				Scope =  {  					Players = new List<PlayerModel> () {  						victim  					}'  					Items = new List<ItemModel> () {  						new ItemModel () {  							Name = request.Packet.Words [3]  						}  					}'  					Points = new List<Point3DModel> () {  						new Point3DModel (request.Packet.Words [8]' request.Packet.Words [10]' request.Packet.Words [9])  					}'  					HumanHitLocations = new List<HumanHitLocation> () {  						headshot == true ? FrostbiteGame.Headshot : FrostbiteGame.Bodyshot  					}  				}'  				Now =  {  					Players = new List<PlayerModel> () {  						killer  					}'  					Points = new List<Point3DModel> () {  						new Point3DModel (request.Packet.Words [5]' request.Packet.Words [7]' request.Packet.Words [6])  					}  				}  			}  		}  	});  }  
Magic Number,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,PlayerOnKillDispatchHandler,The following statement contains a magic number: this.OnProtocolEvent (ProtocolEventType.ProtocolPlayerKill' difference' new ProtocolEventData () {  	Kills = new List<KillModel> () {  		new KillModel () {  			Scope =  {  				Players = new List<PlayerModel> () {  					victim  				}'  				Items = new List<ItemModel> () {  					new ItemModel () {  						Name = request.Packet.Words [3]  					}  				}'  				Points = new List<Point3DModel> () {  					new Point3DModel (request.Packet.Words [8]' request.Packet.Words [10]' request.Packet.Words [9])  				}'  				HumanHitLocations = new List<HumanHitLocation> () {  					headshot == true ? FrostbiteGame.Headshot : FrostbiteGame.Bodyshot  				}  			}'  			Now =  {  				Players = new List<PlayerModel> () {  					killer  				}'  				Points = new List<Point3DModel> () {  					new Point3DModel (request.Packet.Words [5]' request.Packet.Words [7]' request.Packet.Words [6])  				}  			}  		}  	}  });  
Magic Number,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,PlayerOnKillDispatchHandler,The following statement contains a magic number: this.OnProtocolEvent (ProtocolEventType.ProtocolPlayerKill' difference' new ProtocolEventData () {  	Kills = new List<KillModel> () {  		new KillModel () {  			Scope =  {  				Players = new List<PlayerModel> () {  					victim  				}'  				Items = new List<ItemModel> () {  					new ItemModel () {  						Name = request.Packet.Words [3]  					}  				}'  				Points = new List<Point3DModel> () {  					new Point3DModel (request.Packet.Words [8]' request.Packet.Words [10]' request.Packet.Words [9])  				}'  				HumanHitLocations = new List<HumanHitLocation> () {  					headshot == true ? FrostbiteGame.Headshot : FrostbiteGame.Bodyshot  				}  			}'  			Now =  {  				Players = new List<PlayerModel> () {  					killer  				}'  				Points = new List<Point3DModel> () {  					new Point3DModel (request.Packet.Words [5]' request.Packet.Words [7]' request.Packet.Words [6])  				}  			}  		}  	}  });  
Magic Number,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,PlayerOnKillDispatchHandler,The following statement contains a magic number: this.OnProtocolEvent (ProtocolEventType.ProtocolPlayerKill' difference' new ProtocolEventData () {  	Kills = new List<KillModel> () {  		new KillModel () {  			Scope =  {  				Players = new List<PlayerModel> () {  					victim  				}'  				Items = new List<ItemModel> () {  					new ItemModel () {  						Name = request.Packet.Words [3]  					}  				}'  				Points = new List<Point3DModel> () {  					new Point3DModel (request.Packet.Words [8]' request.Packet.Words [10]' request.Packet.Words [9])  				}'  				HumanHitLocations = new List<HumanHitLocation> () {  					headshot == true ? FrostbiteGame.Headshot : FrostbiteGame.Bodyshot  				}  			}'  			Now =  {  				Players = new List<PlayerModel> () {  					killer  				}'  				Points = new List<Point3DModel> () {  					new Point3DModel (request.Packet.Words [5]' request.Packet.Words [7]' request.Packet.Words [6])  				}  			}  		}  	}  });  
Magic Number,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,PlayerOnKillDispatchHandler,The following statement contains a magic number: this.OnProtocolEvent (ProtocolEventType.ProtocolPlayerKill' difference' new ProtocolEventData () {  	Kills = new List<KillModel> () {  		new KillModel () {  			Scope =  {  				Players = new List<PlayerModel> () {  					victim  				}'  				Items = new List<ItemModel> () {  					new ItemModel () {  						Name = request.Packet.Words [3]  					}  				}'  				Points = new List<Point3DModel> () {  					new Point3DModel (request.Packet.Words [8]' request.Packet.Words [10]' request.Packet.Words [9])  				}'  				HumanHitLocations = new List<HumanHitLocation> () {  					headshot == true ? FrostbiteGame.Headshot : FrostbiteGame.Bodyshot  				}  			}'  			Now =  {  				Players = new List<PlayerModel> () {  					killer  				}'  				Points = new List<Point3DModel> () {  					new Point3DModel (request.Packet.Words [5]' request.Packet.Words [7]' request.Packet.Words [6])  				}  			}  		}  	}  });  
Magic Number,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,PlayerOnKillDispatchHandler,The following statement contains a magic number: this.OnProtocolEvent (ProtocolEventType.ProtocolPlayerKill' difference' new ProtocolEventData () {  	Kills = new List<KillModel> () {  		new KillModel () {  			Scope =  {  				Players = new List<PlayerModel> () {  					victim  				}'  				Items = new List<ItemModel> () {  					new ItemModel () {  						Name = request.Packet.Words [3]  					}  				}'  				Points = new List<Point3DModel> () {  					new Point3DModel (request.Packet.Words [8]' request.Packet.Words [10]' request.Packet.Words [9])  				}'  				HumanHitLocations = new List<HumanHitLocation> () {  					headshot == true ? FrostbiteGame.Headshot : FrostbiteGame.Bodyshot  				}  			}'  			Now =  {  				Players = new List<PlayerModel> () {  					killer  				}'  				Points = new List<Point3DModel> () {  					new Point3DModel (request.Packet.Words [5]' request.Packet.Words [7]' request.Packet.Words [6])  				}  			}  		}  	}  });  
Magic Number,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,PlayerOnKillDispatchHandler,The following statement contains a magic number: this.OnProtocolEvent (ProtocolEventType.ProtocolPlayerKill' difference' new ProtocolEventData () {  	Kills = new List<KillModel> () {  		new KillModel () {  			Scope =  {  				Players = new List<PlayerModel> () {  					victim  				}'  				Items = new List<ItemModel> () {  					new ItemModel () {  						Name = request.Packet.Words [3]  					}  				}'  				Points = new List<Point3DModel> () {  					new Point3DModel (request.Packet.Words [8]' request.Packet.Words [10]' request.Packet.Words [9])  				}'  				HumanHitLocations = new List<HumanHitLocation> () {  					headshot == true ? FrostbiteGame.Headshot : FrostbiteGame.Bodyshot  				}  			}'  			Now =  {  				Players = new List<PlayerModel> () {  					killer  				}'  				Points = new List<Point3DModel> () {  					new Point3DModel (request.Packet.Words [5]' request.Packet.Words [7]' request.Packet.Words [6])  				}  			}  		}  	}  });  
Magic Number,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,PlayerOnKillDispatchHandler,The following statement contains a magic number: this.OnProtocolEvent (ProtocolEventType.ProtocolPlayerKill' difference' new ProtocolEventData () {  	Kills = new List<KillModel> () {  		new KillModel () {  			Scope =  {  				Players = new List<PlayerModel> () {  					victim  				}'  				Items = new List<ItemModel> () {  					new ItemModel () {  						Name = request.Packet.Words [3]  					}  				}'  				Points = new List<Point3DModel> () {  					new Point3DModel (request.Packet.Words [8]' request.Packet.Words [10]' request.Packet.Words [9])  				}'  				HumanHitLocations = new List<HumanHitLocation> () {  					headshot == true ? FrostbiteGame.Headshot : FrostbiteGame.Bodyshot  				}  			}'  			Now =  {  				Players = new List<PlayerModel> () {  					killer  				}'  				Points = new List<Point3DModel> () {  					new Point3DModel (request.Packet.Words [5]' request.Packet.Words [7]' request.Packet.Words [6])  				}  			}  		}  	}  });  
Magic Number,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,ServerOnLoadingLevelDispatchHandler,The following statement contains a magic number: if (request.Packet.Words.Count >= 4) {  	int currentRound = 0' totalRounds = 0;  	if (int.TryParse (request.Packet.Words [2]' out currentRound) == true && int.TryParse (request.Packet.Words [3]' out totalRounds) == true) {  		this.State.Settings.Current.RoundIndex = currentRound;  		this.State.Settings.Maximum.RoundIndex = totalRounds;  		// Maps are the same' only a round change  		if (String.Compare (this.State.Settings.Current.MapNameText' request.Packet.Words [1]' StringComparison.OrdinalIgnoreCase) == 0) {  			IProtocolStateDifference difference = new ProtocolStateDifference () {  				Modified =  {  					Settings = this.State.Settings  				}  			};  			this.ApplyProtocolStateDifference (difference);  			this.OnProtocolEvent (ProtocolEventType.ProtocolRoundChanged' difference);  		} else {  			MapModel selectedMap = this.State.MapPool.Select (m => m.Value).FirstOrDefault (x => String.Compare (x.Name' request.Packet.Words [1]' StringComparison.OrdinalIgnoreCase) == 0);  			if (selectedMap != null) {  				this.State.Settings.Current.GameModeNameText = selectedMap.GameMode.Name;  				this.State.Settings.Current.FriendlyGameModeNameText = selectedMap.GameMode.FriendlyName;  				this.State.Settings.Current.FriendlyMapNameText = selectedMap.FriendlyName;  			}  			this.State.Settings.Current.MapNameText = request.Packet.Words [1];  			IProtocolStateDifference difference = new ProtocolStateDifference () {  				Modified =  {  					Settings = this.State.Settings  				}  			};  			this.ApplyProtocolStateDifference (difference);  			this.OnProtocolEvent (ProtocolEventType.ProtocolMapChanged' difference);  		}  	}  }  
Magic Number,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,ServerOnLoadingLevelDispatchHandler,The following statement contains a magic number: if (request.Packet.Words.Count >= 4) {  	int currentRound = 0' totalRounds = 0;  	if (int.TryParse (request.Packet.Words [2]' out currentRound) == true && int.TryParse (request.Packet.Words [3]' out totalRounds) == true) {  		this.State.Settings.Current.RoundIndex = currentRound;  		this.State.Settings.Maximum.RoundIndex = totalRounds;  		// Maps are the same' only a round change  		if (String.Compare (this.State.Settings.Current.MapNameText' request.Packet.Words [1]' StringComparison.OrdinalIgnoreCase) == 0) {  			IProtocolStateDifference difference = new ProtocolStateDifference () {  				Modified =  {  					Settings = this.State.Settings  				}  			};  			this.ApplyProtocolStateDifference (difference);  			this.OnProtocolEvent (ProtocolEventType.ProtocolRoundChanged' difference);  		} else {  			MapModel selectedMap = this.State.MapPool.Select (m => m.Value).FirstOrDefault (x => String.Compare (x.Name' request.Packet.Words [1]' StringComparison.OrdinalIgnoreCase) == 0);  			if (selectedMap != null) {  				this.State.Settings.Current.GameModeNameText = selectedMap.GameMode.Name;  				this.State.Settings.Current.FriendlyGameModeNameText = selectedMap.GameMode.FriendlyName;  				this.State.Settings.Current.FriendlyMapNameText = selectedMap.FriendlyName;  			}  			this.State.Settings.Current.MapNameText = request.Packet.Words [1];  			IProtocolStateDifference difference = new ProtocolStateDifference () {  				Modified =  {  					Settings = this.State.Settings  				}  			};  			this.ApplyProtocolStateDifference (difference);  			this.OnProtocolEvent (ProtocolEventType.ProtocolMapChanged' difference);  		}  	}  }  
Magic Number,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,ServerOnLoadingLevelDispatchHandler,The following statement contains a magic number: if (request.Packet.Words.Count >= 4) {  	int currentRound = 0' totalRounds = 0;  	if (int.TryParse (request.Packet.Words [2]' out currentRound) == true && int.TryParse (request.Packet.Words [3]' out totalRounds) == true) {  		this.State.Settings.Current.RoundIndex = currentRound;  		this.State.Settings.Maximum.RoundIndex = totalRounds;  		// Maps are the same' only a round change  		if (String.Compare (this.State.Settings.Current.MapNameText' request.Packet.Words [1]' StringComparison.OrdinalIgnoreCase) == 0) {  			IProtocolStateDifference difference = new ProtocolStateDifference () {  				Modified =  {  					Settings = this.State.Settings  				}  			};  			this.ApplyProtocolStateDifference (difference);  			this.OnProtocolEvent (ProtocolEventType.ProtocolRoundChanged' difference);  		} else {  			MapModel selectedMap = this.State.MapPool.Select (m => m.Value).FirstOrDefault (x => String.Compare (x.Name' request.Packet.Words [1]' StringComparison.OrdinalIgnoreCase) == 0);  			if (selectedMap != null) {  				this.State.Settings.Current.GameModeNameText = selectedMap.GameMode.Name;  				this.State.Settings.Current.FriendlyGameModeNameText = selectedMap.GameMode.FriendlyName;  				this.State.Settings.Current.FriendlyMapNameText = selectedMap.FriendlyName;  			}  			this.State.Settings.Current.MapNameText = request.Packet.Words [1];  			IProtocolStateDifference difference = new ProtocolStateDifference () {  				Modified =  {  					Settings = this.State.Settings  				}  			};  			this.ApplyProtocolStateDifference (difference);  			this.OnProtocolEvent (ProtocolEventType.ProtocolMapChanged' difference);  		}  	}  }  
Magic Number,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,ServerOnLoadingLevelDispatchHandler,The following statement contains a magic number: if (int.TryParse (request.Packet.Words [2]' out currentRound) == true && int.TryParse (request.Packet.Words [3]' out totalRounds) == true) {  	this.State.Settings.Current.RoundIndex = currentRound;  	this.State.Settings.Maximum.RoundIndex = totalRounds;  	// Maps are the same' only a round change  	if (String.Compare (this.State.Settings.Current.MapNameText' request.Packet.Words [1]' StringComparison.OrdinalIgnoreCase) == 0) {  		IProtocolStateDifference difference = new ProtocolStateDifference () {  			Modified =  {  				Settings = this.State.Settings  			}  		};  		this.ApplyProtocolStateDifference (difference);  		this.OnProtocolEvent (ProtocolEventType.ProtocolRoundChanged' difference);  	} else {  		MapModel selectedMap = this.State.MapPool.Select (m => m.Value).FirstOrDefault (x => String.Compare (x.Name' request.Packet.Words [1]' StringComparison.OrdinalIgnoreCase) == 0);  		if (selectedMap != null) {  			this.State.Settings.Current.GameModeNameText = selectedMap.GameMode.Name;  			this.State.Settings.Current.FriendlyGameModeNameText = selectedMap.GameMode.FriendlyName;  			this.State.Settings.Current.FriendlyMapNameText = selectedMap.FriendlyName;  		}  		this.State.Settings.Current.MapNameText = request.Packet.Words [1];  		IProtocolStateDifference difference = new ProtocolStateDifference () {  			Modified =  {  				Settings = this.State.Settings  			}  		};  		this.ApplyProtocolStateDifference (difference);  		this.OnProtocolEvent (ProtocolEventType.ProtocolMapChanged' difference);  	}  }  
Magic Number,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,ServerOnLoadingLevelDispatchHandler,The following statement contains a magic number: if (int.TryParse (request.Packet.Words [2]' out currentRound) == true && int.TryParse (request.Packet.Words [3]' out totalRounds) == true) {  	this.State.Settings.Current.RoundIndex = currentRound;  	this.State.Settings.Maximum.RoundIndex = totalRounds;  	// Maps are the same' only a round change  	if (String.Compare (this.State.Settings.Current.MapNameText' request.Packet.Words [1]' StringComparison.OrdinalIgnoreCase) == 0) {  		IProtocolStateDifference difference = new ProtocolStateDifference () {  			Modified =  {  				Settings = this.State.Settings  			}  		};  		this.ApplyProtocolStateDifference (difference);  		this.OnProtocolEvent (ProtocolEventType.ProtocolRoundChanged' difference);  	} else {  		MapModel selectedMap = this.State.MapPool.Select (m => m.Value).FirstOrDefault (x => String.Compare (x.Name' request.Packet.Words [1]' StringComparison.OrdinalIgnoreCase) == 0);  		if (selectedMap != null) {  			this.State.Settings.Current.GameModeNameText = selectedMap.GameMode.Name;  			this.State.Settings.Current.FriendlyGameModeNameText = selectedMap.GameMode.FriendlyName;  			this.State.Settings.Current.FriendlyMapNameText = selectedMap.FriendlyName;  		}  		this.State.Settings.Current.MapNameText = request.Packet.Words [1];  		IProtocolStateDifference difference = new ProtocolStateDifference () {  			Modified =  {  				Settings = this.State.Settings  			}  		};  		this.ApplyProtocolStateDifference (difference);  		this.OnProtocolEvent (ProtocolEventType.ProtocolMapChanged' difference);  	}  }  
Magic Number,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,PlayerOnJoinDispatchHandler,The following statement contains a magic number: if (request.Packet.Words.Count >= 2) {  	// todo this is blanked out to follow a "no unique id' no existence" type of policy instead of juggling different states of players  	// todo I need to look into older frostbite games to see if this will present a problem.  	/*                 PlayerModel player = new PlayerModel() {                     Name = request.Packet.Words[1]                 };                  if (this.State.Players.Find(x => x.Name == player.Name) == null) {                     this.State.Players.Add(player);                 }                 */}  
Magic Number,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,PlayerOnLeaveDispatchHandler,The following statement contains a magic number: if (request.Packet.Words.Count >= 2) {  	//request.Packet.Words.RemoveAt(1);  	PlayerModel player = FrostbitePlayers.Parse (request.Packet.Words.GetRange (2' request.Packet.Words.Count - 2)).FirstOrDefault ();  	if (player != null) {  		PlayerModel statePlayer = this.State.Players.Select (p => p.Value).FirstOrDefault (p => p.Name == player.Name);  		if (statePlayer != null) {  			// Already exists' update with any new information we have.  			// Note: We must keep the same Player object which is why we update and swap  			// instead of just assigning.  			statePlayer.Kills = player.Kills;  			statePlayer.Deaths = player.Deaths;  			statePlayer.ClanTag = player.ClanTag;  			statePlayer.Ping = player.Ping > 1000 ? 0 : player.Ping;  			statePlayer.Uid = player.Uid;  			statePlayer.ModifyGroup (player.Groups.FirstOrDefault (group => group.Type == GroupModel.Team));  			statePlayer.ModifyGroup (player.Groups.FirstOrDefault (group => group.Type == GroupModel.Squad));  			player = statePlayer;  		}  		IProtocolStateDifference difference = new ProtocolStateDifference () {  			Removed =  {  				Players = new ConcurrentDictionary<String' PlayerModel> (new Dictionary<String' PlayerModel> () {  					{  						player.Uid'  						player  					}  				})  			}  		};  		this.ApplyProtocolStateDifference (difference);  		this.OnProtocolEvent (ProtocolEventType.ProtocolPlayerLeave' difference' new ProtocolEventData () {  			Players = new List<PlayerModel> () {  				player  			}  		});  	}  }  
Magic Number,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,PlayerOnLeaveDispatchHandler,The following statement contains a magic number: if (request.Packet.Words.Count >= 2) {  	//request.Packet.Words.RemoveAt(1);  	PlayerModel player = FrostbitePlayers.Parse (request.Packet.Words.GetRange (2' request.Packet.Words.Count - 2)).FirstOrDefault ();  	if (player != null) {  		PlayerModel statePlayer = this.State.Players.Select (p => p.Value).FirstOrDefault (p => p.Name == player.Name);  		if (statePlayer != null) {  			// Already exists' update with any new information we have.  			// Note: We must keep the same Player object which is why we update and swap  			// instead of just assigning.  			statePlayer.Kills = player.Kills;  			statePlayer.Deaths = player.Deaths;  			statePlayer.ClanTag = player.ClanTag;  			statePlayer.Ping = player.Ping > 1000 ? 0 : player.Ping;  			statePlayer.Uid = player.Uid;  			statePlayer.ModifyGroup (player.Groups.FirstOrDefault (group => group.Type == GroupModel.Team));  			statePlayer.ModifyGroup (player.Groups.FirstOrDefault (group => group.Type == GroupModel.Squad));  			player = statePlayer;  		}  		IProtocolStateDifference difference = new ProtocolStateDifference () {  			Removed =  {  				Players = new ConcurrentDictionary<String' PlayerModel> (new Dictionary<String' PlayerModel> () {  					{  						player.Uid'  						player  					}  				})  			}  		};  		this.ApplyProtocolStateDifference (difference);  		this.OnProtocolEvent (ProtocolEventType.ProtocolPlayerLeave' difference' new ProtocolEventData () {  			Players = new List<PlayerModel> () {  				player  			}  		});  	}  }  
Magic Number,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,PlayerOnLeaveDispatchHandler,The following statement contains a magic number: if (request.Packet.Words.Count >= 2) {  	//request.Packet.Words.RemoveAt(1);  	PlayerModel player = FrostbitePlayers.Parse (request.Packet.Words.GetRange (2' request.Packet.Words.Count - 2)).FirstOrDefault ();  	if (player != null) {  		PlayerModel statePlayer = this.State.Players.Select (p => p.Value).FirstOrDefault (p => p.Name == player.Name);  		if (statePlayer != null) {  			// Already exists' update with any new information we have.  			// Note: We must keep the same Player object which is why we update and swap  			// instead of just assigning.  			statePlayer.Kills = player.Kills;  			statePlayer.Deaths = player.Deaths;  			statePlayer.ClanTag = player.ClanTag;  			statePlayer.Ping = player.Ping > 1000 ? 0 : player.Ping;  			statePlayer.Uid = player.Uid;  			statePlayer.ModifyGroup (player.Groups.FirstOrDefault (group => group.Type == GroupModel.Team));  			statePlayer.ModifyGroup (player.Groups.FirstOrDefault (group => group.Type == GroupModel.Squad));  			player = statePlayer;  		}  		IProtocolStateDifference difference = new ProtocolStateDifference () {  			Removed =  {  				Players = new ConcurrentDictionary<String' PlayerModel> (new Dictionary<String' PlayerModel> () {  					{  						player.Uid'  						player  					}  				})  			}  		};  		this.ApplyProtocolStateDifference (difference);  		this.OnProtocolEvent (ProtocolEventType.ProtocolPlayerLeave' difference' new ProtocolEventData () {  			Players = new List<PlayerModel> () {  				player  			}  		});  	}  }  
Magic Number,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,PlayerOnLeaveDispatchHandler,The following statement contains a magic number: if (request.Packet.Words.Count >= 2) {  	//request.Packet.Words.RemoveAt(1);  	PlayerModel player = FrostbitePlayers.Parse (request.Packet.Words.GetRange (2' request.Packet.Words.Count - 2)).FirstOrDefault ();  	if (player != null) {  		PlayerModel statePlayer = this.State.Players.Select (p => p.Value).FirstOrDefault (p => p.Name == player.Name);  		if (statePlayer != null) {  			// Already exists' update with any new information we have.  			// Note: We must keep the same Player object which is why we update and swap  			// instead of just assigning.  			statePlayer.Kills = player.Kills;  			statePlayer.Deaths = player.Deaths;  			statePlayer.ClanTag = player.ClanTag;  			statePlayer.Ping = player.Ping > 1000 ? 0 : player.Ping;  			statePlayer.Uid = player.Uid;  			statePlayer.ModifyGroup (player.Groups.FirstOrDefault (group => group.Type == GroupModel.Team));  			statePlayer.ModifyGroup (player.Groups.FirstOrDefault (group => group.Type == GroupModel.Squad));  			player = statePlayer;  		}  		IProtocolStateDifference difference = new ProtocolStateDifference () {  			Removed =  {  				Players = new ConcurrentDictionary<String' PlayerModel> (new Dictionary<String' PlayerModel> () {  					{  						player.Uid'  						player  					}  				})  			}  		};  		this.ApplyProtocolStateDifference (difference);  		this.OnProtocolEvent (ProtocolEventType.ProtocolPlayerLeave' difference' new ProtocolEventData () {  			Players = new List<PlayerModel> () {  				player  			}  		});  	}  }  
Magic Number,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,PlayerOnLeaveDispatchHandler,The following statement contains a magic number: if (player != null) {  	PlayerModel statePlayer = this.State.Players.Select (p => p.Value).FirstOrDefault (p => p.Name == player.Name);  	if (statePlayer != null) {  		// Already exists' update with any new information we have.  		// Note: We must keep the same Player object which is why we update and swap  		// instead of just assigning.  		statePlayer.Kills = player.Kills;  		statePlayer.Deaths = player.Deaths;  		statePlayer.ClanTag = player.ClanTag;  		statePlayer.Ping = player.Ping > 1000 ? 0 : player.Ping;  		statePlayer.Uid = player.Uid;  		statePlayer.ModifyGroup (player.Groups.FirstOrDefault (group => group.Type == GroupModel.Team));  		statePlayer.ModifyGroup (player.Groups.FirstOrDefault (group => group.Type == GroupModel.Squad));  		player = statePlayer;  	}  	IProtocolStateDifference difference = new ProtocolStateDifference () {  		Removed =  {  			Players = new ConcurrentDictionary<String' PlayerModel> (new Dictionary<String' PlayerModel> () {  				{  					player.Uid'  					player  				}  			})  		}  	};  	this.ApplyProtocolStateDifference (difference);  	this.OnProtocolEvent (ProtocolEventType.ProtocolPlayerLeave' difference' new ProtocolEventData () {  		Players = new List<PlayerModel> () {  			player  		}  	});  }  
Magic Number,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,PlayerOnLeaveDispatchHandler,The following statement contains a magic number: if (statePlayer != null) {  	// Already exists' update with any new information we have.  	// Note: We must keep the same Player object which is why we update and swap  	// instead of just assigning.  	statePlayer.Kills = player.Kills;  	statePlayer.Deaths = player.Deaths;  	statePlayer.ClanTag = player.ClanTag;  	statePlayer.Ping = player.Ping > 1000 ? 0 : player.Ping;  	statePlayer.Uid = player.Uid;  	statePlayer.ModifyGroup (player.Groups.FirstOrDefault (group => group.Type == GroupModel.Team));  	statePlayer.ModifyGroup (player.Groups.FirstOrDefault (group => group.Type == GroupModel.Squad));  	player = statePlayer;  }  
Magic Number,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,PlayerOnLeaveDispatchHandler,The following statement contains a magic number: statePlayer.Ping = player.Ping > 1000 ? 0 : player.Ping;  
Magic Number,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,PlayerOnChatDispatchHandler,The following statement contains a magic number: if (request.Packet.Words.Count >= 2) {  	ChatModel chat = FrostbiteChat.ParsePlayerChat (request.Packet.Words.GetRange (1' request.Packet.Words.Count - 1));  	// If it was directed towards a specific player.  	if (chat.Scope.Groups != null && chat.Scope.Groups.Any (group => group.Type == GroupModel.Player) == true) {  		chat.Scope.Players = new List<PlayerModel> () {  			this.State.Players.Select (p => p.Value).FirstOrDefault (player => player.Uid == chat.Scope.Groups.First (group => @group.Type == GroupModel.Player).Uid)  		};  	}  	if (chat.Now.Players != null && chat.Now.Players.Count > 0 && this.State.Players.Select (p => p.Value).FirstOrDefault (p => p.Name == chat.Now.Players.First ().Name) != null) {  		chat.Now.Players = new List<PlayerModel> () {  			this.State.Players.Select (p => p.Value).FirstOrDefault (p => p.Name == chat.Now.Players.First ().Name)  		};  	} else {  		// Couldn't find the player' must be from the server.  		chat.Origin = NetworkOrigin.Server;  	}  	this.OnProtocolEvent (ProtocolEventType.ProtocolChat' new ProtocolStateDifference ()' new ProtocolEventData () {  		Chats = new List<ChatModel> () {  			chat  		}  	});  }  
Magic Number,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,PlayerOnAuthenticatedDispatchHandler,The following statement contains a magic number: if (request.Packet.Words.Count >= 3) {  	PlayerModel statePlayer = this.State.Players.Select (p => p.Value).FirstOrDefault (p => p.Name == request.Packet.Words [1]);  	if (statePlayer != null) {  		statePlayer.Uid = request.Packet.Words [2];  	} else {  		statePlayer = new PlayerModel () {  			Name = request.Packet.Words [1]'  			Uid = request.Packet.Words [2]  		};  	}  	IProtocolStateDifference difference = new ProtocolStateDifference () {  		Modified =  {  			Players = new ConcurrentDictionary<String' PlayerModel> (new Dictionary<String' PlayerModel> () {  				{  					statePlayer.Uid'  					statePlayer  				}  			})  		}  	};  	this.ApplyProtocolStateDifference (difference);  	this.OnProtocolEvent (ProtocolEventType.ProtocolPlayerJoin' difference' new ProtocolEventData () {  		Players = new List<PlayerModel> () {  			statePlayer  		}  	});  }  
Magic Number,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,PlayerOnAuthenticatedDispatchHandler,The following statement contains a magic number: if (request.Packet.Words.Count >= 3) {  	PlayerModel statePlayer = this.State.Players.Select (p => p.Value).FirstOrDefault (p => p.Name == request.Packet.Words [1]);  	if (statePlayer != null) {  		statePlayer.Uid = request.Packet.Words [2];  	} else {  		statePlayer = new PlayerModel () {  			Name = request.Packet.Words [1]'  			Uid = request.Packet.Words [2]  		};  	}  	IProtocolStateDifference difference = new ProtocolStateDifference () {  		Modified =  {  			Players = new ConcurrentDictionary<String' PlayerModel> (new Dictionary<String' PlayerModel> () {  				{  					statePlayer.Uid'  					statePlayer  				}  			})  		}  	};  	this.ApplyProtocolStateDifference (difference);  	this.OnProtocolEvent (ProtocolEventType.ProtocolPlayerJoin' difference' new ProtocolEventData () {  		Players = new List<PlayerModel> () {  			statePlayer  		}  	});  }  
Magic Number,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,PlayerOnAuthenticatedDispatchHandler,The following statement contains a magic number: if (request.Packet.Words.Count >= 3) {  	PlayerModel statePlayer = this.State.Players.Select (p => p.Value).FirstOrDefault (p => p.Name == request.Packet.Words [1]);  	if (statePlayer != null) {  		statePlayer.Uid = request.Packet.Words [2];  	} else {  		statePlayer = new PlayerModel () {  			Name = request.Packet.Words [1]'  			Uid = request.Packet.Words [2]  		};  	}  	IProtocolStateDifference difference = new ProtocolStateDifference () {  		Modified =  {  			Players = new ConcurrentDictionary<String' PlayerModel> (new Dictionary<String' PlayerModel> () {  				{  					statePlayer.Uid'  					statePlayer  				}  			})  		}  	};  	this.ApplyProtocolStateDifference (difference);  	this.OnProtocolEvent (ProtocolEventType.ProtocolPlayerJoin' difference' new ProtocolEventData () {  		Players = new List<PlayerModel> () {  			statePlayer  		}  	});  }  
Magic Number,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,PlayerOnAuthenticatedDispatchHandler,The following statement contains a magic number: if (statePlayer != null) {  	statePlayer.Uid = request.Packet.Words [2];  } else {  	statePlayer = new PlayerModel () {  		Name = request.Packet.Words [1]'  		Uid = request.Packet.Words [2]  	};  }  
Magic Number,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,PlayerOnAuthenticatedDispatchHandler,The following statement contains a magic number: if (statePlayer != null) {  	statePlayer.Uid = request.Packet.Words [2];  } else {  	statePlayer = new PlayerModel () {  		Name = request.Packet.Words [1]'  		Uid = request.Packet.Words [2]  	};  }  
Magic Number,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,PlayerOnAuthenticatedDispatchHandler,The following statement contains a magic number: statePlayer.Uid = request.Packet.Words [2];  
Magic Number,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,PlayerOnAuthenticatedDispatchHandler,The following statement contains a magic number: statePlayer = new PlayerModel () {  	Name = request.Packet.Words [1]'  	Uid = request.Packet.Words [2]  };  
Magic Number,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,PlayerOnKickedDispatchHandler,The following statement contains a magic number: if (player != null) {  	// Note that this is removed when the player.OnLeave event is fired.  	//this.State.PlayerList.RemoveAll(x => x.Name == request.Packet.Words[1]);  	IProtocolStateDifference difference = new ProtocolStateDifference () {  		Removed =  {  			Players = new ConcurrentDictionary<String' PlayerModel> (new Dictionary<String' PlayerModel> () {  				{  					player.Uid'  					player  				}  			})  		}  	};  	this.ApplyProtocolStateDifference (difference);  	this.OnProtocolEvent (ProtocolEventType.ProtocolPlayerKicked' difference' new ProtocolEventData () {  		Kicks = new List<KickModel> () {  			new KickModel () {  				Now =  {  					Players = new List<PlayerModel> () {  						player  					}'  					Content = new List<String> () {  						request.Packet.Words [2]  					}  				}  			}  		}  	});  }  
Magic Number,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,PlayerOnKickedDispatchHandler,The following statement contains a magic number: this.OnProtocolEvent (ProtocolEventType.ProtocolPlayerKicked' difference' new ProtocolEventData () {  	Kicks = new List<KickModel> () {  		new KickModel () {  			Now =  {  				Players = new List<PlayerModel> () {  					player  				}'  				Content = new List<String> () {  					request.Packet.Words [2]  				}  			}  		}  	}  });  
Magic Number,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,PlayerOnSquadChangeDispatchHandler,The following statement contains a magic number: if (player != null && int.TryParse (request.Packet.Words [2]' out teamId) == true && int.TryParse (request.Packet.Words [3]' out squadId) == true) {  	player.ModifyGroup (new GroupModel () {  		Type = GroupModel.Squad'  		Uid = squadId.ToString (CultureInfo.InvariantCulture)  	});  	IProtocolStateDifference difference = new ProtocolStateDifference () {  		Modified =  {  			Players = new ConcurrentDictionary<String' PlayerModel> (new Dictionary<String' PlayerModel> () {  				{  					player.Uid'  					player  				}  			})  		}  	};  	this.ApplyProtocolStateDifference (difference);  	this.OnProtocolEvent (ProtocolEventType.ProtocolPlayerMoved' difference' new ProtocolEventData () {  		Players = new List<PlayerModel> () {  			player  		}  	});  }  
Magic Number,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,PlayerOnSquadChangeDispatchHandler,The following statement contains a magic number: if (player != null && int.TryParse (request.Packet.Words [2]' out teamId) == true && int.TryParse (request.Packet.Words [3]' out squadId) == true) {  	player.ModifyGroup (new GroupModel () {  		Type = GroupModel.Squad'  		Uid = squadId.ToString (CultureInfo.InvariantCulture)  	});  	IProtocolStateDifference difference = new ProtocolStateDifference () {  		Modified =  {  			Players = new ConcurrentDictionary<String' PlayerModel> (new Dictionary<String' PlayerModel> () {  				{  					player.Uid'  					player  				}  			})  		}  	};  	this.ApplyProtocolStateDifference (difference);  	this.OnProtocolEvent (ProtocolEventType.ProtocolPlayerMoved' difference' new ProtocolEventData () {  		Players = new List<PlayerModel> () {  			player  		}  	});  }  
Magic Number,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,PlayerOnTeamChangeDispatchHandler,The following statement contains a magic number: if (player != null && int.TryParse (request.Packet.Words [2]' out teamId) == true && int.TryParse (request.Packet.Words [3]' out squadId) == true) {  	player.ModifyGroup (new GroupModel () {  		Type = GroupModel.Team'  		Uid = teamId.ToString (CultureInfo.InvariantCulture)  	});  	player.ModifyGroup (new GroupModel () {  		Type = GroupModel.Squad'  		Uid = squadId.ToString (CultureInfo.InvariantCulture)  	});  	IProtocolStateDifference difference = new ProtocolStateDifference () {  		Modified =  {  			Players = new ConcurrentDictionary<String' PlayerModel> (new Dictionary<String' PlayerModel> () {  				{  					player.Uid'  					player  				}  			})  		}  	};  	this.ApplyProtocolStateDifference (difference);  	this.OnProtocolEvent (ProtocolEventType.ProtocolPlayerMoved' difference' new ProtocolEventData () {  		Players = new List<PlayerModel> () {  			player  		}  	});  }  
Magic Number,Myrcon.Protocols.Frostbite,FrostbiteGame,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbiteGame.cs,PlayerOnTeamChangeDispatchHandler,The following statement contains a magic number: if (player != null && int.TryParse (request.Packet.Words [2]' out teamId) == true && int.TryParse (request.Packet.Words [3]' out squadId) == true) {  	player.ModifyGroup (new GroupModel () {  		Type = GroupModel.Team'  		Uid = teamId.ToString (CultureInfo.InvariantCulture)  	});  	player.ModifyGroup (new GroupModel () {  		Type = GroupModel.Squad'  		Uid = squadId.ToString (CultureInfo.InvariantCulture)  	});  	IProtocolStateDifference difference = new ProtocolStateDifference () {  		Modified =  {  			Players = new ConcurrentDictionary<String' PlayerModel> (new Dictionary<String' PlayerModel> () {  				{  					player.Uid'  					player  				}  			})  		}  	};  	this.ApplyProtocolStateDifference (difference);  	this.OnProtocolEvent (ProtocolEventType.ProtocolPlayerMoved' difference' new ProtocolEventData () {  		Players = new List<PlayerModel> () {  			player  		}  	});  }  
Magic Number,Myrcon.Protocols.Frostbite,FrostbitePacketSerializer,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbitePacketSerializer.cs,FrostbitePacketSerializer,The following statement contains a magic number: this.PacketHeaderSize = 12;  
Magic Number,Myrcon.Protocols.Frostbite,FrostbitePacketSerializer,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbitePacketSerializer.cs,Serialize,The following statement contains a magic number: if (frostbiteWrapper != null) {  	// Construct the header uint32  	UInt32 header = frostbiteWrapper.Packet.RequestId != null ? (UInt32)frostbiteWrapper.Packet.RequestId & 0x3fffffff : 0x3fffffff;  	if (frostbiteWrapper.Packet.Origin == PacketOrigin.Server) {  		header |= 0x80000000;  	}  	if (frostbiteWrapper.Packet.Type == PacketType.Response) {  		header |= 0x40000000;  	}  	// Construct the remaining packet headers  	UInt32 packetSize = this.PacketHeaderSize;  	UInt32 wordCount = Convert.ToUInt32 (frostbiteWrapper.Packet.Words.Count);  	// Encode each word (WordLength' Word Bytes' Null Byte)  	byte[] encodedWords = new byte[] {    	};  	foreach (string word in frostbiteWrapper.Packet.Words) {  		string convertedWord = word;  		// Truncate words over 64 kbs (though the string is Unicode it gets converted below so this does make sense)  		if (convertedWord.Length > UInt16.MaxValue - 1) {  			convertedWord = convertedWord.Substring (0' UInt16.MaxValue - 1);  		}  		byte[] appendEncodedWords = new byte[encodedWords.Length + convertedWord.Length + 5];  		encodedWords.CopyTo (appendEncodedWords' 0);  		BitConverter.GetBytes (convertedWord.Length).CopyTo (appendEncodedWords' encodedWords.Length);  		Encoding.GetEncoding (1252).GetBytes (convertedWord + Convert.ToChar (0x00)).CopyTo (appendEncodedWords' encodedWords.Length + 4);  		encodedWords = appendEncodedWords;  	}  	// Get the full size of the packet.  	packetSize += Convert.ToUInt32 (encodedWords.Length);  	// Now compile the whole packet.  	serialized = new byte[packetSize];  	BitConverter.GetBytes (header).CopyTo (serialized' 0);  	BitConverter.GetBytes (packetSize).CopyTo (serialized' 4);  	BitConverter.GetBytes (wordCount).CopyTo (serialized' 8);  	encodedWords.CopyTo (serialized' this.PacketHeaderSize);  	wrapper.Packet.Data = serialized;  	wrapper.Packet.Text = String.Join (" "' wrapper.Packet.Words);  	wrapper.Packet.DebugText = String.Join (" "' wrapper.Packet.Words.Select ((word' index) => String.Format ("[{0}-{1}]"' index' word)));  }  
Magic Number,Myrcon.Protocols.Frostbite,FrostbitePacketSerializer,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbitePacketSerializer.cs,Serialize,The following statement contains a magic number: if (frostbiteWrapper != null) {  	// Construct the header uint32  	UInt32 header = frostbiteWrapper.Packet.RequestId != null ? (UInt32)frostbiteWrapper.Packet.RequestId & 0x3fffffff : 0x3fffffff;  	if (frostbiteWrapper.Packet.Origin == PacketOrigin.Server) {  		header |= 0x80000000;  	}  	if (frostbiteWrapper.Packet.Type == PacketType.Response) {  		header |= 0x40000000;  	}  	// Construct the remaining packet headers  	UInt32 packetSize = this.PacketHeaderSize;  	UInt32 wordCount = Convert.ToUInt32 (frostbiteWrapper.Packet.Words.Count);  	// Encode each word (WordLength' Word Bytes' Null Byte)  	byte[] encodedWords = new byte[] {    	};  	foreach (string word in frostbiteWrapper.Packet.Words) {  		string convertedWord = word;  		// Truncate words over 64 kbs (though the string is Unicode it gets converted below so this does make sense)  		if (convertedWord.Length > UInt16.MaxValue - 1) {  			convertedWord = convertedWord.Substring (0' UInt16.MaxValue - 1);  		}  		byte[] appendEncodedWords = new byte[encodedWords.Length + convertedWord.Length + 5];  		encodedWords.CopyTo (appendEncodedWords' 0);  		BitConverter.GetBytes (convertedWord.Length).CopyTo (appendEncodedWords' encodedWords.Length);  		Encoding.GetEncoding (1252).GetBytes (convertedWord + Convert.ToChar (0x00)).CopyTo (appendEncodedWords' encodedWords.Length + 4);  		encodedWords = appendEncodedWords;  	}  	// Get the full size of the packet.  	packetSize += Convert.ToUInt32 (encodedWords.Length);  	// Now compile the whole packet.  	serialized = new byte[packetSize];  	BitConverter.GetBytes (header).CopyTo (serialized' 0);  	BitConverter.GetBytes (packetSize).CopyTo (serialized' 4);  	BitConverter.GetBytes (wordCount).CopyTo (serialized' 8);  	encodedWords.CopyTo (serialized' this.PacketHeaderSize);  	wrapper.Packet.Data = serialized;  	wrapper.Packet.Text = String.Join (" "' wrapper.Packet.Words);  	wrapper.Packet.DebugText = String.Join (" "' wrapper.Packet.Words.Select ((word' index) => String.Format ("[{0}-{1}]"' index' word)));  }  
Magic Number,Myrcon.Protocols.Frostbite,FrostbitePacketSerializer,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbitePacketSerializer.cs,Serialize,The following statement contains a magic number: if (frostbiteWrapper != null) {  	// Construct the header uint32  	UInt32 header = frostbiteWrapper.Packet.RequestId != null ? (UInt32)frostbiteWrapper.Packet.RequestId & 0x3fffffff : 0x3fffffff;  	if (frostbiteWrapper.Packet.Origin == PacketOrigin.Server) {  		header |= 0x80000000;  	}  	if (frostbiteWrapper.Packet.Type == PacketType.Response) {  		header |= 0x40000000;  	}  	// Construct the remaining packet headers  	UInt32 packetSize = this.PacketHeaderSize;  	UInt32 wordCount = Convert.ToUInt32 (frostbiteWrapper.Packet.Words.Count);  	// Encode each word (WordLength' Word Bytes' Null Byte)  	byte[] encodedWords = new byte[] {    	};  	foreach (string word in frostbiteWrapper.Packet.Words) {  		string convertedWord = word;  		// Truncate words over 64 kbs (though the string is Unicode it gets converted below so this does make sense)  		if (convertedWord.Length > UInt16.MaxValue - 1) {  			convertedWord = convertedWord.Substring (0' UInt16.MaxValue - 1);  		}  		byte[] appendEncodedWords = new byte[encodedWords.Length + convertedWord.Length + 5];  		encodedWords.CopyTo (appendEncodedWords' 0);  		BitConverter.GetBytes (convertedWord.Length).CopyTo (appendEncodedWords' encodedWords.Length);  		Encoding.GetEncoding (1252).GetBytes (convertedWord + Convert.ToChar (0x00)).CopyTo (appendEncodedWords' encodedWords.Length + 4);  		encodedWords = appendEncodedWords;  	}  	// Get the full size of the packet.  	packetSize += Convert.ToUInt32 (encodedWords.Length);  	// Now compile the whole packet.  	serialized = new byte[packetSize];  	BitConverter.GetBytes (header).CopyTo (serialized' 0);  	BitConverter.GetBytes (packetSize).CopyTo (serialized' 4);  	BitConverter.GetBytes (wordCount).CopyTo (serialized' 8);  	encodedWords.CopyTo (serialized' this.PacketHeaderSize);  	wrapper.Packet.Data = serialized;  	wrapper.Packet.Text = String.Join (" "' wrapper.Packet.Words);  	wrapper.Packet.DebugText = String.Join (" "' wrapper.Packet.Words.Select ((word' index) => String.Format ("[{0}-{1}]"' index' word)));  }  
Magic Number,Myrcon.Protocols.Frostbite,FrostbitePacketSerializer,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbitePacketSerializer.cs,Serialize,The following statement contains a magic number: if (frostbiteWrapper != null) {  	// Construct the header uint32  	UInt32 header = frostbiteWrapper.Packet.RequestId != null ? (UInt32)frostbiteWrapper.Packet.RequestId & 0x3fffffff : 0x3fffffff;  	if (frostbiteWrapper.Packet.Origin == PacketOrigin.Server) {  		header |= 0x80000000;  	}  	if (frostbiteWrapper.Packet.Type == PacketType.Response) {  		header |= 0x40000000;  	}  	// Construct the remaining packet headers  	UInt32 packetSize = this.PacketHeaderSize;  	UInt32 wordCount = Convert.ToUInt32 (frostbiteWrapper.Packet.Words.Count);  	// Encode each word (WordLength' Word Bytes' Null Byte)  	byte[] encodedWords = new byte[] {    	};  	foreach (string word in frostbiteWrapper.Packet.Words) {  		string convertedWord = word;  		// Truncate words over 64 kbs (though the string is Unicode it gets converted below so this does make sense)  		if (convertedWord.Length > UInt16.MaxValue - 1) {  			convertedWord = convertedWord.Substring (0' UInt16.MaxValue - 1);  		}  		byte[] appendEncodedWords = new byte[encodedWords.Length + convertedWord.Length + 5];  		encodedWords.CopyTo (appendEncodedWords' 0);  		BitConverter.GetBytes (convertedWord.Length).CopyTo (appendEncodedWords' encodedWords.Length);  		Encoding.GetEncoding (1252).GetBytes (convertedWord + Convert.ToChar (0x00)).CopyTo (appendEncodedWords' encodedWords.Length + 4);  		encodedWords = appendEncodedWords;  	}  	// Get the full size of the packet.  	packetSize += Convert.ToUInt32 (encodedWords.Length);  	// Now compile the whole packet.  	serialized = new byte[packetSize];  	BitConverter.GetBytes (header).CopyTo (serialized' 0);  	BitConverter.GetBytes (packetSize).CopyTo (serialized' 4);  	BitConverter.GetBytes (wordCount).CopyTo (serialized' 8);  	encodedWords.CopyTo (serialized' this.PacketHeaderSize);  	wrapper.Packet.Data = serialized;  	wrapper.Packet.Text = String.Join (" "' wrapper.Packet.Words);  	wrapper.Packet.DebugText = String.Join (" "' wrapper.Packet.Words.Select ((word' index) => String.Format ("[{0}-{1}]"' index' word)));  }  
Magic Number,Myrcon.Protocols.Frostbite,FrostbitePacketSerializer,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbitePacketSerializer.cs,Serialize,The following statement contains a magic number: if (frostbiteWrapper != null) {  	// Construct the header uint32  	UInt32 header = frostbiteWrapper.Packet.RequestId != null ? (UInt32)frostbiteWrapper.Packet.RequestId & 0x3fffffff : 0x3fffffff;  	if (frostbiteWrapper.Packet.Origin == PacketOrigin.Server) {  		header |= 0x80000000;  	}  	if (frostbiteWrapper.Packet.Type == PacketType.Response) {  		header |= 0x40000000;  	}  	// Construct the remaining packet headers  	UInt32 packetSize = this.PacketHeaderSize;  	UInt32 wordCount = Convert.ToUInt32 (frostbiteWrapper.Packet.Words.Count);  	// Encode each word (WordLength' Word Bytes' Null Byte)  	byte[] encodedWords = new byte[] {    	};  	foreach (string word in frostbiteWrapper.Packet.Words) {  		string convertedWord = word;  		// Truncate words over 64 kbs (though the string is Unicode it gets converted below so this does make sense)  		if (convertedWord.Length > UInt16.MaxValue - 1) {  			convertedWord = convertedWord.Substring (0' UInt16.MaxValue - 1);  		}  		byte[] appendEncodedWords = new byte[encodedWords.Length + convertedWord.Length + 5];  		encodedWords.CopyTo (appendEncodedWords' 0);  		BitConverter.GetBytes (convertedWord.Length).CopyTo (appendEncodedWords' encodedWords.Length);  		Encoding.GetEncoding (1252).GetBytes (convertedWord + Convert.ToChar (0x00)).CopyTo (appendEncodedWords' encodedWords.Length + 4);  		encodedWords = appendEncodedWords;  	}  	// Get the full size of the packet.  	packetSize += Convert.ToUInt32 (encodedWords.Length);  	// Now compile the whole packet.  	serialized = new byte[packetSize];  	BitConverter.GetBytes (header).CopyTo (serialized' 0);  	BitConverter.GetBytes (packetSize).CopyTo (serialized' 4);  	BitConverter.GetBytes (wordCount).CopyTo (serialized' 8);  	encodedWords.CopyTo (serialized' this.PacketHeaderSize);  	wrapper.Packet.Data = serialized;  	wrapper.Packet.Text = String.Join (" "' wrapper.Packet.Words);  	wrapper.Packet.DebugText = String.Join (" "' wrapper.Packet.Words.Select ((word' index) => String.Format ("[{0}-{1}]"' index' word)));  }  
Magic Number,Myrcon.Protocols.Frostbite,FrostbitePacketSerializer,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbitePacketSerializer.cs,Serialize,The following statement contains a magic number: foreach (string word in frostbiteWrapper.Packet.Words) {  	string convertedWord = word;  	// Truncate words over 64 kbs (though the string is Unicode it gets converted below so this does make sense)  	if (convertedWord.Length > UInt16.MaxValue - 1) {  		convertedWord = convertedWord.Substring (0' UInt16.MaxValue - 1);  	}  	byte[] appendEncodedWords = new byte[encodedWords.Length + convertedWord.Length + 5];  	encodedWords.CopyTo (appendEncodedWords' 0);  	BitConverter.GetBytes (convertedWord.Length).CopyTo (appendEncodedWords' encodedWords.Length);  	Encoding.GetEncoding (1252).GetBytes (convertedWord + Convert.ToChar (0x00)).CopyTo (appendEncodedWords' encodedWords.Length + 4);  	encodedWords = appendEncodedWords;  }  
Magic Number,Myrcon.Protocols.Frostbite,FrostbitePacketSerializer,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbitePacketSerializer.cs,Serialize,The following statement contains a magic number: foreach (string word in frostbiteWrapper.Packet.Words) {  	string convertedWord = word;  	// Truncate words over 64 kbs (though the string is Unicode it gets converted below so this does make sense)  	if (convertedWord.Length > UInt16.MaxValue - 1) {  		convertedWord = convertedWord.Substring (0' UInt16.MaxValue - 1);  	}  	byte[] appendEncodedWords = new byte[encodedWords.Length + convertedWord.Length + 5];  	encodedWords.CopyTo (appendEncodedWords' 0);  	BitConverter.GetBytes (convertedWord.Length).CopyTo (appendEncodedWords' encodedWords.Length);  	Encoding.GetEncoding (1252).GetBytes (convertedWord + Convert.ToChar (0x00)).CopyTo (appendEncodedWords' encodedWords.Length + 4);  	encodedWords = appendEncodedWords;  }  
Magic Number,Myrcon.Protocols.Frostbite,FrostbitePacketSerializer,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbitePacketSerializer.cs,Serialize,The following statement contains a magic number: foreach (string word in frostbiteWrapper.Packet.Words) {  	string convertedWord = word;  	// Truncate words over 64 kbs (though the string is Unicode it gets converted below so this does make sense)  	if (convertedWord.Length > UInt16.MaxValue - 1) {  		convertedWord = convertedWord.Substring (0' UInt16.MaxValue - 1);  	}  	byte[] appendEncodedWords = new byte[encodedWords.Length + convertedWord.Length + 5];  	encodedWords.CopyTo (appendEncodedWords' 0);  	BitConverter.GetBytes (convertedWord.Length).CopyTo (appendEncodedWords' encodedWords.Length);  	Encoding.GetEncoding (1252).GetBytes (convertedWord + Convert.ToChar (0x00)).CopyTo (appendEncodedWords' encodedWords.Length + 4);  	encodedWords = appendEncodedWords;  }  
Magic Number,Myrcon.Protocols.Frostbite,FrostbitePacketSerializer,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbitePacketSerializer.cs,Serialize,The following statement contains a magic number: Encoding.GetEncoding (1252).GetBytes (convertedWord + Convert.ToChar (0x00)).CopyTo (appendEncodedWords' encodedWords.Length + 4);  
Magic Number,Myrcon.Protocols.Frostbite,FrostbitePacketSerializer,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbitePacketSerializer.cs,Serialize,The following statement contains a magic number: Encoding.GetEncoding (1252).GetBytes (convertedWord + Convert.ToChar (0x00)).CopyTo (appendEncodedWords' encodedWords.Length + 4);  
Magic Number,Myrcon.Protocols.Frostbite,FrostbitePacketSerializer,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbitePacketSerializer.cs,Serialize,The following statement contains a magic number: BitConverter.GetBytes (packetSize).CopyTo (serialized' 4);  
Magic Number,Myrcon.Protocols.Frostbite,FrostbitePacketSerializer,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbitePacketSerializer.cs,Serialize,The following statement contains a magic number: BitConverter.GetBytes (wordCount).CopyTo (serialized' 8);  
Magic Number,Myrcon.Protocols.Frostbite,FrostbitePacketSerializer,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbitePacketSerializer.cs,Deserialize,The following statement contains a magic number: for (UInt32 wordCount = 0; wordCount < wordsTotal; wordCount++) {  	UInt32 wordLength = BitConverter.ToUInt32 (packetData' (int)this.PacketHeaderSize + wordOffset);  	wrapper.Packet.Words.Add (Encoding.GetEncoding (1252).GetString (packetData' (int)this.PacketHeaderSize + wordOffset + 4' (int)wordLength));  	wordOffset += Convert.ToInt32 (wordLength) + 5;  	// WordLength + WordSize + NullByte  }  
Magic Number,Myrcon.Protocols.Frostbite,FrostbitePacketSerializer,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbitePacketSerializer.cs,Deserialize,The following statement contains a magic number: for (UInt32 wordCount = 0; wordCount < wordsTotal; wordCount++) {  	UInt32 wordLength = BitConverter.ToUInt32 (packetData' (int)this.PacketHeaderSize + wordOffset);  	wrapper.Packet.Words.Add (Encoding.GetEncoding (1252).GetString (packetData' (int)this.PacketHeaderSize + wordOffset + 4' (int)wordLength));  	wordOffset += Convert.ToInt32 (wordLength) + 5;  	// WordLength + WordSize + NullByte  }  
Magic Number,Myrcon.Protocols.Frostbite,FrostbitePacketSerializer,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbitePacketSerializer.cs,Deserialize,The following statement contains a magic number: for (UInt32 wordCount = 0; wordCount < wordsTotal; wordCount++) {  	UInt32 wordLength = BitConverter.ToUInt32 (packetData' (int)this.PacketHeaderSize + wordOffset);  	wrapper.Packet.Words.Add (Encoding.GetEncoding (1252).GetString (packetData' (int)this.PacketHeaderSize + wordOffset + 4' (int)wordLength));  	wordOffset += Convert.ToInt32 (wordLength) + 5;  	// WordLength + WordSize + NullByte  }  
Magic Number,Myrcon.Protocols.Frostbite,FrostbitePacketSerializer,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbitePacketSerializer.cs,Deserialize,The following statement contains a magic number: wrapper.Packet.Words.Add (Encoding.GetEncoding (1252).GetString (packetData' (int)this.PacketHeaderSize + wordOffset + 4' (int)wordLength));  
Magic Number,Myrcon.Protocols.Frostbite,FrostbitePacketSerializer,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbitePacketSerializer.cs,Deserialize,The following statement contains a magic number: wrapper.Packet.Words.Add (Encoding.GetEncoding (1252).GetString (packetData' (int)this.PacketHeaderSize + wordOffset + 4' (int)wordLength));  
Magic Number,Myrcon.Protocols.Frostbite,FrostbitePacketSerializer,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbitePacketSerializer.cs,Deserialize,The following statement contains a magic number: wordOffset += Convert.ToInt32 (wordLength) + 5;  
Magic Number,Myrcon.Protocols.Frostbite,FrostbitePacketSerializer,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbitePacketSerializer.cs,ReadPacketSize,The following statement contains a magic number: if (packetData.Length >= this.PacketHeaderSize) {  	length = BitConverter.ToUInt32 (packetData' 4);  }  
Magic Number,Myrcon.Protocols.Frostbite,FrostbitePacketSerializer,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\FrostbitePacketSerializer.cs,ReadPacketSize,The following statement contains a magic number: length = BitConverter.ToUInt32 (packetData' 4);  
Magic Number,Myrcon.Protocols.Frostbite.Objects,FrostbiteBan,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Objects\FrostbiteBan.cs,ParseBanListItem,The following statement contains a magic number: if (words.Count == 5) {  	ban.Scope.Times.Add (FrostbiteTimeSubset.Parse (words.GetRange (2' 2)));  	if (String.CompareOrdinal (words [0]' "name") == 0) {  		ban.Scope.Players.Add (new PlayerModel () {  			Name = words [1]  		});  	} // Potato 2.0 considers ip banning as obsolete  	//else if (String.Compare(words[0]' "ip") == 0) {  	//    this.IpAddress = words[1];  	//}  	else if (String.CompareOrdinal (words [0]' "guid") == 0) {  		ban.Scope.Players.Add (new PlayerModel () {  			Uid = words [1]  		});  	}  	ban.Scope.Content = new List<String> () {  		words [4]  	};  }  
Magic Number,Myrcon.Protocols.Frostbite.Objects,FrostbiteBan,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Objects\FrostbiteBan.cs,ParseBanListItem,The following statement contains a magic number: if (words.Count == 5) {  	ban.Scope.Times.Add (FrostbiteTimeSubset.Parse (words.GetRange (2' 2)));  	if (String.CompareOrdinal (words [0]' "name") == 0) {  		ban.Scope.Players.Add (new PlayerModel () {  			Name = words [1]  		});  	} // Potato 2.0 considers ip banning as obsolete  	//else if (String.Compare(words[0]' "ip") == 0) {  	//    this.IpAddress = words[1];  	//}  	else if (String.CompareOrdinal (words [0]' "guid") == 0) {  		ban.Scope.Players.Add (new PlayerModel () {  			Uid = words [1]  		});  	}  	ban.Scope.Content = new List<String> () {  		words [4]  	};  }  
Magic Number,Myrcon.Protocols.Frostbite.Objects,FrostbiteBan,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Objects\FrostbiteBan.cs,ParseBanListItem,The following statement contains a magic number: if (words.Count == 5) {  	ban.Scope.Times.Add (FrostbiteTimeSubset.Parse (words.GetRange (2' 2)));  	if (String.CompareOrdinal (words [0]' "name") == 0) {  		ban.Scope.Players.Add (new PlayerModel () {  			Name = words [1]  		});  	} // Potato 2.0 considers ip banning as obsolete  	//else if (String.Compare(words[0]' "ip") == 0) {  	//    this.IpAddress = words[1];  	//}  	else if (String.CompareOrdinal (words [0]' "guid") == 0) {  		ban.Scope.Players.Add (new PlayerModel () {  			Uid = words [1]  		});  	}  	ban.Scope.Content = new List<String> () {  		words [4]  	};  }  
Magic Number,Myrcon.Protocols.Frostbite.Objects,FrostbiteBan,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Objects\FrostbiteBan.cs,ParseBanListItem,The following statement contains a magic number: if (words.Count == 5) {  	ban.Scope.Times.Add (FrostbiteTimeSubset.Parse (words.GetRange (2' 2)));  	if (String.CompareOrdinal (words [0]' "name") == 0) {  		ban.Scope.Players.Add (new PlayerModel () {  			Name = words [1]  		});  	} // Potato 2.0 considers ip banning as obsolete  	//else if (String.Compare(words[0]' "ip") == 0) {  	//    this.IpAddress = words[1];  	//}  	else if (String.CompareOrdinal (words [0]' "guid") == 0) {  		ban.Scope.Players.Add (new PlayerModel () {  			Uid = words [1]  		});  	}  	ban.Scope.Content = new List<String> () {  		words [4]  	};  }  
Magic Number,Myrcon.Protocols.Frostbite.Objects,FrostbiteBan,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Objects\FrostbiteBan.cs,ParseBanListItem,The following statement contains a magic number: ban.Scope.Times.Add (FrostbiteTimeSubset.Parse (words.GetRange (2' 2)));  
Magic Number,Myrcon.Protocols.Frostbite.Objects,FrostbiteBan,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Objects\FrostbiteBan.cs,ParseBanListItem,The following statement contains a magic number: ban.Scope.Times.Add (FrostbiteTimeSubset.Parse (words.GetRange (2' 2)));  
Magic Number,Myrcon.Protocols.Frostbite.Objects,FrostbiteBan,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Objects\FrostbiteBan.cs,ParseBanListItem,The following statement contains a magic number: ban.Scope.Content = new List<String> () {  	words [4]  };  
Magic Number,Myrcon.Protocols.Frostbite.Objects,FrostbiteBan,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Objects\FrostbiteBan.cs,ParseBanAdd,The following statement contains a magic number: if (words.Count == 3) {  	ban.Scope.Times.Add (FrostbiteTimeSubset.Parse (words.GetRange (2' 1)));  } else if (words.Count == 4) {  	ban.Scope.Times.Add (FrostbiteTimeSubset.Parse (words.GetRange (2' 2)));  	// Time has a seconds parameter  	if (ban.Scope.Times.First ().Context != TimeSubsetContext.Time) {  		ban.Scope.Content = new List<String> () {  			words [3]  		};  	}  } else if (words.Count == 5) {  	ban.Scope.Times.Add (FrostbiteTimeSubset.Parse (words.GetRange (2' 2)));  	ban.Scope.Content = new List<String> () {  		words [4]  	};  }  
Magic Number,Myrcon.Protocols.Frostbite.Objects,FrostbiteBan,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Objects\FrostbiteBan.cs,ParseBanAdd,The following statement contains a magic number: if (words.Count == 3) {  	ban.Scope.Times.Add (FrostbiteTimeSubset.Parse (words.GetRange (2' 1)));  } else if (words.Count == 4) {  	ban.Scope.Times.Add (FrostbiteTimeSubset.Parse (words.GetRange (2' 2)));  	// Time has a seconds parameter  	if (ban.Scope.Times.First ().Context != TimeSubsetContext.Time) {  		ban.Scope.Content = new List<String> () {  			words [3]  		};  	}  } else if (words.Count == 5) {  	ban.Scope.Times.Add (FrostbiteTimeSubset.Parse (words.GetRange (2' 2)));  	ban.Scope.Content = new List<String> () {  		words [4]  	};  }  
Magic Number,Myrcon.Protocols.Frostbite.Objects,FrostbiteBan,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Objects\FrostbiteBan.cs,ParseBanAdd,The following statement contains a magic number: if (words.Count == 3) {  	ban.Scope.Times.Add (FrostbiteTimeSubset.Parse (words.GetRange (2' 1)));  } else if (words.Count == 4) {  	ban.Scope.Times.Add (FrostbiteTimeSubset.Parse (words.GetRange (2' 2)));  	// Time has a seconds parameter  	if (ban.Scope.Times.First ().Context != TimeSubsetContext.Time) {  		ban.Scope.Content = new List<String> () {  			words [3]  		};  	}  } else if (words.Count == 5) {  	ban.Scope.Times.Add (FrostbiteTimeSubset.Parse (words.GetRange (2' 2)));  	ban.Scope.Content = new List<String> () {  		words [4]  	};  }  
Magic Number,Myrcon.Protocols.Frostbite.Objects,FrostbiteBan,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Objects\FrostbiteBan.cs,ParseBanAdd,The following statement contains a magic number: if (words.Count == 3) {  	ban.Scope.Times.Add (FrostbiteTimeSubset.Parse (words.GetRange (2' 1)));  } else if (words.Count == 4) {  	ban.Scope.Times.Add (FrostbiteTimeSubset.Parse (words.GetRange (2' 2)));  	// Time has a seconds parameter  	if (ban.Scope.Times.First ().Context != TimeSubsetContext.Time) {  		ban.Scope.Content = new List<String> () {  			words [3]  		};  	}  } else if (words.Count == 5) {  	ban.Scope.Times.Add (FrostbiteTimeSubset.Parse (words.GetRange (2' 2)));  	ban.Scope.Content = new List<String> () {  		words [4]  	};  }  
Magic Number,Myrcon.Protocols.Frostbite.Objects,FrostbiteBan,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Objects\FrostbiteBan.cs,ParseBanAdd,The following statement contains a magic number: if (words.Count == 3) {  	ban.Scope.Times.Add (FrostbiteTimeSubset.Parse (words.GetRange (2' 1)));  } else if (words.Count == 4) {  	ban.Scope.Times.Add (FrostbiteTimeSubset.Parse (words.GetRange (2' 2)));  	// Time has a seconds parameter  	if (ban.Scope.Times.First ().Context != TimeSubsetContext.Time) {  		ban.Scope.Content = new List<String> () {  			words [3]  		};  	}  } else if (words.Count == 5) {  	ban.Scope.Times.Add (FrostbiteTimeSubset.Parse (words.GetRange (2' 2)));  	ban.Scope.Content = new List<String> () {  		words [4]  	};  }  
Magic Number,Myrcon.Protocols.Frostbite.Objects,FrostbiteBan,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Objects\FrostbiteBan.cs,ParseBanAdd,The following statement contains a magic number: if (words.Count == 3) {  	ban.Scope.Times.Add (FrostbiteTimeSubset.Parse (words.GetRange (2' 1)));  } else if (words.Count == 4) {  	ban.Scope.Times.Add (FrostbiteTimeSubset.Parse (words.GetRange (2' 2)));  	// Time has a seconds parameter  	if (ban.Scope.Times.First ().Context != TimeSubsetContext.Time) {  		ban.Scope.Content = new List<String> () {  			words [3]  		};  	}  } else if (words.Count == 5) {  	ban.Scope.Times.Add (FrostbiteTimeSubset.Parse (words.GetRange (2' 2)));  	ban.Scope.Content = new List<String> () {  		words [4]  	};  }  
Magic Number,Myrcon.Protocols.Frostbite.Objects,FrostbiteBan,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Objects\FrostbiteBan.cs,ParseBanAdd,The following statement contains a magic number: if (words.Count == 3) {  	ban.Scope.Times.Add (FrostbiteTimeSubset.Parse (words.GetRange (2' 1)));  } else if (words.Count == 4) {  	ban.Scope.Times.Add (FrostbiteTimeSubset.Parse (words.GetRange (2' 2)));  	// Time has a seconds parameter  	if (ban.Scope.Times.First ().Context != TimeSubsetContext.Time) {  		ban.Scope.Content = new List<String> () {  			words [3]  		};  	}  } else if (words.Count == 5) {  	ban.Scope.Times.Add (FrostbiteTimeSubset.Parse (words.GetRange (2' 2)));  	ban.Scope.Content = new List<String> () {  		words [4]  	};  }  
Magic Number,Myrcon.Protocols.Frostbite.Objects,FrostbiteBan,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Objects\FrostbiteBan.cs,ParseBanAdd,The following statement contains a magic number: if (words.Count == 3) {  	ban.Scope.Times.Add (FrostbiteTimeSubset.Parse (words.GetRange (2' 1)));  } else if (words.Count == 4) {  	ban.Scope.Times.Add (FrostbiteTimeSubset.Parse (words.GetRange (2' 2)));  	// Time has a seconds parameter  	if (ban.Scope.Times.First ().Context != TimeSubsetContext.Time) {  		ban.Scope.Content = new List<String> () {  			words [3]  		};  	}  } else if (words.Count == 5) {  	ban.Scope.Times.Add (FrostbiteTimeSubset.Parse (words.GetRange (2' 2)));  	ban.Scope.Content = new List<String> () {  		words [4]  	};  }  
Magic Number,Myrcon.Protocols.Frostbite.Objects,FrostbiteBan,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Objects\FrostbiteBan.cs,ParseBanAdd,The following statement contains a magic number: if (words.Count == 3) {  	ban.Scope.Times.Add (FrostbiteTimeSubset.Parse (words.GetRange (2' 1)));  } else if (words.Count == 4) {  	ban.Scope.Times.Add (FrostbiteTimeSubset.Parse (words.GetRange (2' 2)));  	// Time has a seconds parameter  	if (ban.Scope.Times.First ().Context != TimeSubsetContext.Time) {  		ban.Scope.Content = new List<String> () {  			words [3]  		};  	}  } else if (words.Count == 5) {  	ban.Scope.Times.Add (FrostbiteTimeSubset.Parse (words.GetRange (2' 2)));  	ban.Scope.Content = new List<String> () {  		words [4]  	};  }  
Magic Number,Myrcon.Protocols.Frostbite.Objects,FrostbiteBan,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Objects\FrostbiteBan.cs,ParseBanAdd,The following statement contains a magic number: if (words.Count == 3) {  	ban.Scope.Times.Add (FrostbiteTimeSubset.Parse (words.GetRange (2' 1)));  } else if (words.Count == 4) {  	ban.Scope.Times.Add (FrostbiteTimeSubset.Parse (words.GetRange (2' 2)));  	// Time has a seconds parameter  	if (ban.Scope.Times.First ().Context != TimeSubsetContext.Time) {  		ban.Scope.Content = new List<String> () {  			words [3]  		};  	}  } else if (words.Count == 5) {  	ban.Scope.Times.Add (FrostbiteTimeSubset.Parse (words.GetRange (2' 2)));  	ban.Scope.Content = new List<String> () {  		words [4]  	};  }  
Magic Number,Myrcon.Protocols.Frostbite.Objects,FrostbiteBan,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Objects\FrostbiteBan.cs,ParseBanAdd,The following statement contains a magic number: ban.Scope.Times.Add (FrostbiteTimeSubset.Parse (words.GetRange (2' 1)));  
Magic Number,Myrcon.Protocols.Frostbite.Objects,FrostbiteBan,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Objects\FrostbiteBan.cs,ParseBanAdd,The following statement contains a magic number: if (words.Count == 4) {  	ban.Scope.Times.Add (FrostbiteTimeSubset.Parse (words.GetRange (2' 2)));  	// Time has a seconds parameter  	if (ban.Scope.Times.First ().Context != TimeSubsetContext.Time) {  		ban.Scope.Content = new List<String> () {  			words [3]  		};  	}  } else if (words.Count == 5) {  	ban.Scope.Times.Add (FrostbiteTimeSubset.Parse (words.GetRange (2' 2)));  	ban.Scope.Content = new List<String> () {  		words [4]  	};  }  
Magic Number,Myrcon.Protocols.Frostbite.Objects,FrostbiteBan,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Objects\FrostbiteBan.cs,ParseBanAdd,The following statement contains a magic number: if (words.Count == 4) {  	ban.Scope.Times.Add (FrostbiteTimeSubset.Parse (words.GetRange (2' 2)));  	// Time has a seconds parameter  	if (ban.Scope.Times.First ().Context != TimeSubsetContext.Time) {  		ban.Scope.Content = new List<String> () {  			words [3]  		};  	}  } else if (words.Count == 5) {  	ban.Scope.Times.Add (FrostbiteTimeSubset.Parse (words.GetRange (2' 2)));  	ban.Scope.Content = new List<String> () {  		words [4]  	};  }  
Magic Number,Myrcon.Protocols.Frostbite.Objects,FrostbiteBan,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Objects\FrostbiteBan.cs,ParseBanAdd,The following statement contains a magic number: if (words.Count == 4) {  	ban.Scope.Times.Add (FrostbiteTimeSubset.Parse (words.GetRange (2' 2)));  	// Time has a seconds parameter  	if (ban.Scope.Times.First ().Context != TimeSubsetContext.Time) {  		ban.Scope.Content = new List<String> () {  			words [3]  		};  	}  } else if (words.Count == 5) {  	ban.Scope.Times.Add (FrostbiteTimeSubset.Parse (words.GetRange (2' 2)));  	ban.Scope.Content = new List<String> () {  		words [4]  	};  }  
Magic Number,Myrcon.Protocols.Frostbite.Objects,FrostbiteBan,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Objects\FrostbiteBan.cs,ParseBanAdd,The following statement contains a magic number: if (words.Count == 4) {  	ban.Scope.Times.Add (FrostbiteTimeSubset.Parse (words.GetRange (2' 2)));  	// Time has a seconds parameter  	if (ban.Scope.Times.First ().Context != TimeSubsetContext.Time) {  		ban.Scope.Content = new List<String> () {  			words [3]  		};  	}  } else if (words.Count == 5) {  	ban.Scope.Times.Add (FrostbiteTimeSubset.Parse (words.GetRange (2' 2)));  	ban.Scope.Content = new List<String> () {  		words [4]  	};  }  
Magic Number,Myrcon.Protocols.Frostbite.Objects,FrostbiteBan,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Objects\FrostbiteBan.cs,ParseBanAdd,The following statement contains a magic number: if (words.Count == 4) {  	ban.Scope.Times.Add (FrostbiteTimeSubset.Parse (words.GetRange (2' 2)));  	// Time has a seconds parameter  	if (ban.Scope.Times.First ().Context != TimeSubsetContext.Time) {  		ban.Scope.Content = new List<String> () {  			words [3]  		};  	}  } else if (words.Count == 5) {  	ban.Scope.Times.Add (FrostbiteTimeSubset.Parse (words.GetRange (2' 2)));  	ban.Scope.Content = new List<String> () {  		words [4]  	};  }  
Magic Number,Myrcon.Protocols.Frostbite.Objects,FrostbiteBan,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Objects\FrostbiteBan.cs,ParseBanAdd,The following statement contains a magic number: if (words.Count == 4) {  	ban.Scope.Times.Add (FrostbiteTimeSubset.Parse (words.GetRange (2' 2)));  	// Time has a seconds parameter  	if (ban.Scope.Times.First ().Context != TimeSubsetContext.Time) {  		ban.Scope.Content = new List<String> () {  			words [3]  		};  	}  } else if (words.Count == 5) {  	ban.Scope.Times.Add (FrostbiteTimeSubset.Parse (words.GetRange (2' 2)));  	ban.Scope.Content = new List<String> () {  		words [4]  	};  }  
Magic Number,Myrcon.Protocols.Frostbite.Objects,FrostbiteBan,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Objects\FrostbiteBan.cs,ParseBanAdd,The following statement contains a magic number: if (words.Count == 4) {  	ban.Scope.Times.Add (FrostbiteTimeSubset.Parse (words.GetRange (2' 2)));  	// Time has a seconds parameter  	if (ban.Scope.Times.First ().Context != TimeSubsetContext.Time) {  		ban.Scope.Content = new List<String> () {  			words [3]  		};  	}  } else if (words.Count == 5) {  	ban.Scope.Times.Add (FrostbiteTimeSubset.Parse (words.GetRange (2' 2)));  	ban.Scope.Content = new List<String> () {  		words [4]  	};  }  
Magic Number,Myrcon.Protocols.Frostbite.Objects,FrostbiteBan,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Objects\FrostbiteBan.cs,ParseBanAdd,The following statement contains a magic number: if (words.Count == 4) {  	ban.Scope.Times.Add (FrostbiteTimeSubset.Parse (words.GetRange (2' 2)));  	// Time has a seconds parameter  	if (ban.Scope.Times.First ().Context != TimeSubsetContext.Time) {  		ban.Scope.Content = new List<String> () {  			words [3]  		};  	}  } else if (words.Count == 5) {  	ban.Scope.Times.Add (FrostbiteTimeSubset.Parse (words.GetRange (2' 2)));  	ban.Scope.Content = new List<String> () {  		words [4]  	};  }  
Magic Number,Myrcon.Protocols.Frostbite.Objects,FrostbiteBan,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Objects\FrostbiteBan.cs,ParseBanAdd,The following statement contains a magic number: ban.Scope.Times.Add (FrostbiteTimeSubset.Parse (words.GetRange (2' 2)));  
Magic Number,Myrcon.Protocols.Frostbite.Objects,FrostbiteBan,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Objects\FrostbiteBan.cs,ParseBanAdd,The following statement contains a magic number: ban.Scope.Times.Add (FrostbiteTimeSubset.Parse (words.GetRange (2' 2)));  
Magic Number,Myrcon.Protocols.Frostbite.Objects,FrostbiteBan,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Objects\FrostbiteBan.cs,ParseBanAdd,The following statement contains a magic number: if (ban.Scope.Times.First ().Context != TimeSubsetContext.Time) {  	ban.Scope.Content = new List<String> () {  		words [3]  	};  }  
Magic Number,Myrcon.Protocols.Frostbite.Objects,FrostbiteBan,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Objects\FrostbiteBan.cs,ParseBanAdd,The following statement contains a magic number: ban.Scope.Content = new List<String> () {  	words [3]  };  
Magic Number,Myrcon.Protocols.Frostbite.Objects,FrostbiteBan,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Objects\FrostbiteBan.cs,ParseBanAdd,The following statement contains a magic number: if (words.Count == 5) {  	ban.Scope.Times.Add (FrostbiteTimeSubset.Parse (words.GetRange (2' 2)));  	ban.Scope.Content = new List<String> () {  		words [4]  	};  }  
Magic Number,Myrcon.Protocols.Frostbite.Objects,FrostbiteBan,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Objects\FrostbiteBan.cs,ParseBanAdd,The following statement contains a magic number: if (words.Count == 5) {  	ban.Scope.Times.Add (FrostbiteTimeSubset.Parse (words.GetRange (2' 2)));  	ban.Scope.Content = new List<String> () {  		words [4]  	};  }  
Magic Number,Myrcon.Protocols.Frostbite.Objects,FrostbiteBan,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Objects\FrostbiteBan.cs,ParseBanAdd,The following statement contains a magic number: if (words.Count == 5) {  	ban.Scope.Times.Add (FrostbiteTimeSubset.Parse (words.GetRange (2' 2)));  	ban.Scope.Content = new List<String> () {  		words [4]  	};  }  
Magic Number,Myrcon.Protocols.Frostbite.Objects,FrostbiteBan,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Objects\FrostbiteBan.cs,ParseBanAdd,The following statement contains a magic number: if (words.Count == 5) {  	ban.Scope.Times.Add (FrostbiteTimeSubset.Parse (words.GetRange (2' 2)));  	ban.Scope.Content = new List<String> () {  		words [4]  	};  }  
Magic Number,Myrcon.Protocols.Frostbite.Objects,FrostbiteBan,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Objects\FrostbiteBan.cs,ParseBanAdd,The following statement contains a magic number: ban.Scope.Times.Add (FrostbiteTimeSubset.Parse (words.GetRange (2' 2)));  
Magic Number,Myrcon.Protocols.Frostbite.Objects,FrostbiteBan,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Objects\FrostbiteBan.cs,ParseBanAdd,The following statement contains a magic number: ban.Scope.Times.Add (FrostbiteTimeSubset.Parse (words.GetRange (2' 2)));  
Magic Number,Myrcon.Protocols.Frostbite.Objects,FrostbiteBan,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Objects\FrostbiteBan.cs,ParseBanAdd,The following statement contains a magic number: ban.Scope.Content = new List<String> () {  	words [4]  };  
Magic Number,Myrcon.Protocols.Frostbite.Objects,FrostbiteBanList,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Objects\FrostbiteBanList.cs,Parse,The following statement contains a magic number: if (words.Count >= 1 && int.TryParse (words [0]' out count) == true) {  	words.RemoveAt (0);  	for (int i = 0; i < count; i++) {  		bans.Add (FrostbiteBan.ParseBanListItem (words.GetRange (i * 5' 5)));  	}  }  
Magic Number,Myrcon.Protocols.Frostbite.Objects,FrostbiteBanList,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Objects\FrostbiteBanList.cs,Parse,The following statement contains a magic number: if (words.Count >= 1 && int.TryParse (words [0]' out count) == true) {  	words.RemoveAt (0);  	for (int i = 0; i < count; i++) {  		bans.Add (FrostbiteBan.ParseBanListItem (words.GetRange (i * 5' 5)));  	}  }  
Magic Number,Myrcon.Protocols.Frostbite.Objects,FrostbiteBanList,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Objects\FrostbiteBanList.cs,Parse,The following statement contains a magic number: for (int i = 0; i < count; i++) {  	bans.Add (FrostbiteBan.ParseBanListItem (words.GetRange (i * 5' 5)));  }  
Magic Number,Myrcon.Protocols.Frostbite.Objects,FrostbiteBanList,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Objects\FrostbiteBanList.cs,Parse,The following statement contains a magic number: for (int i = 0; i < count; i++) {  	bans.Add (FrostbiteBan.ParseBanListItem (words.GetRange (i * 5' 5)));  }  
Magic Number,Myrcon.Protocols.Frostbite.Objects,FrostbiteBanList,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Objects\FrostbiteBanList.cs,Parse,The following statement contains a magic number: bans.Add (FrostbiteBan.ParseBanListItem (words.GetRange (i * 5' 5)));  
Magic Number,Myrcon.Protocols.Frostbite.Objects,FrostbiteBanList,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Objects\FrostbiteBanList.cs,Parse,The following statement contains a magic number: bans.Add (FrostbiteBan.ParseBanListItem (words.GetRange (i * 5' 5)));  
Magic Number,Myrcon.Protocols.Frostbite.Objects,FrostbiteMapList,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Objects\FrostbiteMapList.cs,Parse,The following statement contains a magic number: for (int i = 0; i + 1 < words.Count; i = i + 2) {  	int rounds = 0;  	if (int.TryParse (words [i + 1]' out rounds) == true) {  		maps.Add (new MapModel () {  			Index = i > 0 ? i / 2 : 0'  			Rounds = rounds == 0 ? 2 : rounds'  			Name = words [i]  		});  	}  }  
Magic Number,Myrcon.Protocols.Frostbite.Objects,FrostbiteMapList,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Objects\FrostbiteMapList.cs,Parse,The following statement contains a magic number: for (int i = 0; i + 1 < words.Count; i = i + 2) {  	int rounds = 0;  	if (int.TryParse (words [i + 1]' out rounds) == true) {  		maps.Add (new MapModel () {  			Index = i > 0 ? i / 2 : 0'  			Rounds = rounds == 0 ? 2 : rounds'  			Name = words [i]  		});  	}  }  
Magic Number,Myrcon.Protocols.Frostbite.Objects,FrostbiteMapList,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Objects\FrostbiteMapList.cs,Parse,The following statement contains a magic number: for (int i = 0; i + 1 < words.Count; i = i + 2) {  	int rounds = 0;  	if (int.TryParse (words [i + 1]' out rounds) == true) {  		maps.Add (new MapModel () {  			Index = i > 0 ? i / 2 : 0'  			Rounds = rounds == 0 ? 2 : rounds'  			Name = words [i]  		});  	}  }  
Magic Number,Myrcon.Protocols.Frostbite.Objects,FrostbiteMapList,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Objects\FrostbiteMapList.cs,Parse,The following statement contains a magic number: i = i + 2
Magic Number,Myrcon.Protocols.Frostbite.Objects,FrostbiteMapList,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Objects\FrostbiteMapList.cs,Parse,The following statement contains a magic number: if (int.TryParse (words [i + 1]' out rounds) == true) {  	maps.Add (new MapModel () {  		Index = i > 0 ? i / 2 : 0'  		Rounds = rounds == 0 ? 2 : rounds'  		Name = words [i]  	});  }  
Magic Number,Myrcon.Protocols.Frostbite.Objects,FrostbiteMapList,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Objects\FrostbiteMapList.cs,Parse,The following statement contains a magic number: if (int.TryParse (words [i + 1]' out rounds) == true) {  	maps.Add (new MapModel () {  		Index = i > 0 ? i / 2 : 0'  		Rounds = rounds == 0 ? 2 : rounds'  		Name = words [i]  	});  }  
Magic Number,Myrcon.Protocols.Frostbite.Objects,FrostbiteMapList,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Objects\FrostbiteMapList.cs,Parse,The following statement contains a magic number: maps.Add (new MapModel () {  	Index = i > 0 ? i / 2 : 0'  	Rounds = rounds == 0 ? 2 : rounds'  	Name = words [i]  });  
Magic Number,Myrcon.Protocols.Frostbite.Objects,FrostbiteMapList,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Objects\FrostbiteMapList.cs,Parse,The following statement contains a magic number: maps.Add (new MapModel () {  	Index = i > 0 ? i / 2 : 0'  	Rounds = rounds == 0 ? 2 : rounds'  	Name = words [i]  });  
Magic Number,Myrcon.Protocols.Frostbite.Objects,FrostbiteGroupingList,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Objects\FrostbiteGroupingList.cs,Parse,The following statement contains a magic number: if (words.Count >= 1) {  	FrostbitePlayerSubsetContext context = FrostbiteGroupingList.GetSubsetContext (words [0]);  	if (words.Count >= 2) {  		int parsedTeamId = 0;  		if (context == FrostbitePlayerSubsetContext.Player) {  			groups.Add (new GroupModel () {  				Type = GroupModel.Player'  				Uid = words [1]  			});  		} else if (context == FrostbitePlayerSubsetContext.Team && int.TryParse (words [1]' out parsedTeamId) == true) {  			groups.Add (new GroupModel () {  				Type = GroupModel.Team'  				Uid = parsedTeamId.ToString (CultureInfo.InvariantCulture)  			});  		} else if (words.Count >= 3) {  			int parsedSquadId = 0;  			if (context == FrostbitePlayerSubsetContext.Squad && int.TryParse (words [1]' out parsedTeamId) == true && int.TryParse (words [2]' out parsedSquadId) == true) {  				groups.Add (new GroupModel () {  					Type = GroupModel.Team'  					Uid = parsedTeamId.ToString (CultureInfo.InvariantCulture)  				});  				groups.Add (new GroupModel () {  					Type = GroupModel.Squad'  					Uid = parsedSquadId.ToString (CultureInfo.InvariantCulture)  				});  			}  		}  	}  }  
Magic Number,Myrcon.Protocols.Frostbite.Objects,FrostbiteGroupingList,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Objects\FrostbiteGroupingList.cs,Parse,The following statement contains a magic number: if (words.Count >= 1) {  	FrostbitePlayerSubsetContext context = FrostbiteGroupingList.GetSubsetContext (words [0]);  	if (words.Count >= 2) {  		int parsedTeamId = 0;  		if (context == FrostbitePlayerSubsetContext.Player) {  			groups.Add (new GroupModel () {  				Type = GroupModel.Player'  				Uid = words [1]  			});  		} else if (context == FrostbitePlayerSubsetContext.Team && int.TryParse (words [1]' out parsedTeamId) == true) {  			groups.Add (new GroupModel () {  				Type = GroupModel.Team'  				Uid = parsedTeamId.ToString (CultureInfo.InvariantCulture)  			});  		} else if (words.Count >= 3) {  			int parsedSquadId = 0;  			if (context == FrostbitePlayerSubsetContext.Squad && int.TryParse (words [1]' out parsedTeamId) == true && int.TryParse (words [2]' out parsedSquadId) == true) {  				groups.Add (new GroupModel () {  					Type = GroupModel.Team'  					Uid = parsedTeamId.ToString (CultureInfo.InvariantCulture)  				});  				groups.Add (new GroupModel () {  					Type = GroupModel.Squad'  					Uid = parsedSquadId.ToString (CultureInfo.InvariantCulture)  				});  			}  		}  	}  }  
Magic Number,Myrcon.Protocols.Frostbite.Objects,FrostbiteGroupingList,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Objects\FrostbiteGroupingList.cs,Parse,The following statement contains a magic number: if (words.Count >= 1) {  	FrostbitePlayerSubsetContext context = FrostbiteGroupingList.GetSubsetContext (words [0]);  	if (words.Count >= 2) {  		int parsedTeamId = 0;  		if (context == FrostbitePlayerSubsetContext.Player) {  			groups.Add (new GroupModel () {  				Type = GroupModel.Player'  				Uid = words [1]  			});  		} else if (context == FrostbitePlayerSubsetContext.Team && int.TryParse (words [1]' out parsedTeamId) == true) {  			groups.Add (new GroupModel () {  				Type = GroupModel.Team'  				Uid = parsedTeamId.ToString (CultureInfo.InvariantCulture)  			});  		} else if (words.Count >= 3) {  			int parsedSquadId = 0;  			if (context == FrostbitePlayerSubsetContext.Squad && int.TryParse (words [1]' out parsedTeamId) == true && int.TryParse (words [2]' out parsedSquadId) == true) {  				groups.Add (new GroupModel () {  					Type = GroupModel.Team'  					Uid = parsedTeamId.ToString (CultureInfo.InvariantCulture)  				});  				groups.Add (new GroupModel () {  					Type = GroupModel.Squad'  					Uid = parsedSquadId.ToString (CultureInfo.InvariantCulture)  				});  			}  		}  	}  }  
Magic Number,Myrcon.Protocols.Frostbite.Objects,FrostbiteGroupingList,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Objects\FrostbiteGroupingList.cs,Parse,The following statement contains a magic number: if (words.Count >= 2) {  	int parsedTeamId = 0;  	if (context == FrostbitePlayerSubsetContext.Player) {  		groups.Add (new GroupModel () {  			Type = GroupModel.Player'  			Uid = words [1]  		});  	} else if (context == FrostbitePlayerSubsetContext.Team && int.TryParse (words [1]' out parsedTeamId) == true) {  		groups.Add (new GroupModel () {  			Type = GroupModel.Team'  			Uid = parsedTeamId.ToString (CultureInfo.InvariantCulture)  		});  	} else if (words.Count >= 3) {  		int parsedSquadId = 0;  		if (context == FrostbitePlayerSubsetContext.Squad && int.TryParse (words [1]' out parsedTeamId) == true && int.TryParse (words [2]' out parsedSquadId) == true) {  			groups.Add (new GroupModel () {  				Type = GroupModel.Team'  				Uid = parsedTeamId.ToString (CultureInfo.InvariantCulture)  			});  			groups.Add (new GroupModel () {  				Type = GroupModel.Squad'  				Uid = parsedSquadId.ToString (CultureInfo.InvariantCulture)  			});  		}  	}  }  
Magic Number,Myrcon.Protocols.Frostbite.Objects,FrostbiteGroupingList,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Objects\FrostbiteGroupingList.cs,Parse,The following statement contains a magic number: if (words.Count >= 2) {  	int parsedTeamId = 0;  	if (context == FrostbitePlayerSubsetContext.Player) {  		groups.Add (new GroupModel () {  			Type = GroupModel.Player'  			Uid = words [1]  		});  	} else if (context == FrostbitePlayerSubsetContext.Team && int.TryParse (words [1]' out parsedTeamId) == true) {  		groups.Add (new GroupModel () {  			Type = GroupModel.Team'  			Uid = parsedTeamId.ToString (CultureInfo.InvariantCulture)  		});  	} else if (words.Count >= 3) {  		int parsedSquadId = 0;  		if (context == FrostbitePlayerSubsetContext.Squad && int.TryParse (words [1]' out parsedTeamId) == true && int.TryParse (words [2]' out parsedSquadId) == true) {  			groups.Add (new GroupModel () {  				Type = GroupModel.Team'  				Uid = parsedTeamId.ToString (CultureInfo.InvariantCulture)  			});  			groups.Add (new GroupModel () {  				Type = GroupModel.Squad'  				Uid = parsedSquadId.ToString (CultureInfo.InvariantCulture)  			});  		}  	}  }  
Magic Number,Myrcon.Protocols.Frostbite.Objects,FrostbiteGroupingList,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Objects\FrostbiteGroupingList.cs,Parse,The following statement contains a magic number: if (words.Count >= 2) {  	int parsedTeamId = 0;  	if (context == FrostbitePlayerSubsetContext.Player) {  		groups.Add (new GroupModel () {  			Type = GroupModel.Player'  			Uid = words [1]  		});  	} else if (context == FrostbitePlayerSubsetContext.Team && int.TryParse (words [1]' out parsedTeamId) == true) {  		groups.Add (new GroupModel () {  			Type = GroupModel.Team'  			Uid = parsedTeamId.ToString (CultureInfo.InvariantCulture)  		});  	} else if (words.Count >= 3) {  		int parsedSquadId = 0;  		if (context == FrostbitePlayerSubsetContext.Squad && int.TryParse (words [1]' out parsedTeamId) == true && int.TryParse (words [2]' out parsedSquadId) == true) {  			groups.Add (new GroupModel () {  				Type = GroupModel.Team'  				Uid = parsedTeamId.ToString (CultureInfo.InvariantCulture)  			});  			groups.Add (new GroupModel () {  				Type = GroupModel.Squad'  				Uid = parsedSquadId.ToString (CultureInfo.InvariantCulture)  			});  		}  	}  }  
Magic Number,Myrcon.Protocols.Frostbite.Objects,FrostbiteGroupingList,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Objects\FrostbiteGroupingList.cs,Parse,The following statement contains a magic number: if (context == FrostbitePlayerSubsetContext.Player) {  	groups.Add (new GroupModel () {  		Type = GroupModel.Player'  		Uid = words [1]  	});  } else if (context == FrostbitePlayerSubsetContext.Team && int.TryParse (words [1]' out parsedTeamId) == true) {  	groups.Add (new GroupModel () {  		Type = GroupModel.Team'  		Uid = parsedTeamId.ToString (CultureInfo.InvariantCulture)  	});  } else if (words.Count >= 3) {  	int parsedSquadId = 0;  	if (context == FrostbitePlayerSubsetContext.Squad && int.TryParse (words [1]' out parsedTeamId) == true && int.TryParse (words [2]' out parsedSquadId) == true) {  		groups.Add (new GroupModel () {  			Type = GroupModel.Team'  			Uid = parsedTeamId.ToString (CultureInfo.InvariantCulture)  		});  		groups.Add (new GroupModel () {  			Type = GroupModel.Squad'  			Uid = parsedSquadId.ToString (CultureInfo.InvariantCulture)  		});  	}  }  
Magic Number,Myrcon.Protocols.Frostbite.Objects,FrostbiteGroupingList,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Objects\FrostbiteGroupingList.cs,Parse,The following statement contains a magic number: if (context == FrostbitePlayerSubsetContext.Player) {  	groups.Add (new GroupModel () {  		Type = GroupModel.Player'  		Uid = words [1]  	});  } else if (context == FrostbitePlayerSubsetContext.Team && int.TryParse (words [1]' out parsedTeamId) == true) {  	groups.Add (new GroupModel () {  		Type = GroupModel.Team'  		Uid = parsedTeamId.ToString (CultureInfo.InvariantCulture)  	});  } else if (words.Count >= 3) {  	int parsedSquadId = 0;  	if (context == FrostbitePlayerSubsetContext.Squad && int.TryParse (words [1]' out parsedTeamId) == true && int.TryParse (words [2]' out parsedSquadId) == true) {  		groups.Add (new GroupModel () {  			Type = GroupModel.Team'  			Uid = parsedTeamId.ToString (CultureInfo.InvariantCulture)  		});  		groups.Add (new GroupModel () {  			Type = GroupModel.Squad'  			Uid = parsedSquadId.ToString (CultureInfo.InvariantCulture)  		});  	}  }  
Magic Number,Myrcon.Protocols.Frostbite.Objects,FrostbiteGroupingList,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Objects\FrostbiteGroupingList.cs,Parse,The following statement contains a magic number: if (context == FrostbitePlayerSubsetContext.Team && int.TryParse (words [1]' out parsedTeamId) == true) {  	groups.Add (new GroupModel () {  		Type = GroupModel.Team'  		Uid = parsedTeamId.ToString (CultureInfo.InvariantCulture)  	});  } else if (words.Count >= 3) {  	int parsedSquadId = 0;  	if (context == FrostbitePlayerSubsetContext.Squad && int.TryParse (words [1]' out parsedTeamId) == true && int.TryParse (words [2]' out parsedSquadId) == true) {  		groups.Add (new GroupModel () {  			Type = GroupModel.Team'  			Uid = parsedTeamId.ToString (CultureInfo.InvariantCulture)  		});  		groups.Add (new GroupModel () {  			Type = GroupModel.Squad'  			Uid = parsedSquadId.ToString (CultureInfo.InvariantCulture)  		});  	}  }  
Magic Number,Myrcon.Protocols.Frostbite.Objects,FrostbiteGroupingList,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Objects\FrostbiteGroupingList.cs,Parse,The following statement contains a magic number: if (context == FrostbitePlayerSubsetContext.Team && int.TryParse (words [1]' out parsedTeamId) == true) {  	groups.Add (new GroupModel () {  		Type = GroupModel.Team'  		Uid = parsedTeamId.ToString (CultureInfo.InvariantCulture)  	});  } else if (words.Count >= 3) {  	int parsedSquadId = 0;  	if (context == FrostbitePlayerSubsetContext.Squad && int.TryParse (words [1]' out parsedTeamId) == true && int.TryParse (words [2]' out parsedSquadId) == true) {  		groups.Add (new GroupModel () {  			Type = GroupModel.Team'  			Uid = parsedTeamId.ToString (CultureInfo.InvariantCulture)  		});  		groups.Add (new GroupModel () {  			Type = GroupModel.Squad'  			Uid = parsedSquadId.ToString (CultureInfo.InvariantCulture)  		});  	}  }  
Magic Number,Myrcon.Protocols.Frostbite.Objects,FrostbiteGroupingList,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Objects\FrostbiteGroupingList.cs,Parse,The following statement contains a magic number: if (words.Count >= 3) {  	int parsedSquadId = 0;  	if (context == FrostbitePlayerSubsetContext.Squad && int.TryParse (words [1]' out parsedTeamId) == true && int.TryParse (words [2]' out parsedSquadId) == true) {  		groups.Add (new GroupModel () {  			Type = GroupModel.Team'  			Uid = parsedTeamId.ToString (CultureInfo.InvariantCulture)  		});  		groups.Add (new GroupModel () {  			Type = GroupModel.Squad'  			Uid = parsedSquadId.ToString (CultureInfo.InvariantCulture)  		});  	}  }  
Magic Number,Myrcon.Protocols.Frostbite.Objects,FrostbiteGroupingList,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Objects\FrostbiteGroupingList.cs,Parse,The following statement contains a magic number: if (words.Count >= 3) {  	int parsedSquadId = 0;  	if (context == FrostbitePlayerSubsetContext.Squad && int.TryParse (words [1]' out parsedTeamId) == true && int.TryParse (words [2]' out parsedSquadId) == true) {  		groups.Add (new GroupModel () {  			Type = GroupModel.Team'  			Uid = parsedTeamId.ToString (CultureInfo.InvariantCulture)  		});  		groups.Add (new GroupModel () {  			Type = GroupModel.Squad'  			Uid = parsedSquadId.ToString (CultureInfo.InvariantCulture)  		});  	}  }  
Magic Number,Myrcon.Protocols.Frostbite.Objects,FrostbiteGroupingList,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Objects\FrostbiteGroupingList.cs,Parse,The following statement contains a magic number: if (context == FrostbitePlayerSubsetContext.Squad && int.TryParse (words [1]' out parsedTeamId) == true && int.TryParse (words [2]' out parsedSquadId) == true) {  	groups.Add (new GroupModel () {  		Type = GroupModel.Team'  		Uid = parsedTeamId.ToString (CultureInfo.InvariantCulture)  	});  	groups.Add (new GroupModel () {  		Type = GroupModel.Squad'  		Uid = parsedSquadId.ToString (CultureInfo.InvariantCulture)  	});  }  
Magic Number,Myrcon.Protocols.Frostbite.Objects,FrostbiteSpawn,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Objects\FrostbiteSpawn.cs,Parse,The following statement contains a magic number: return new SpawnModel {  	Player = new PlayerModel () {  		Name = words [0]  	}'  	Role = new RoleModel () {  		Name = words [1]  	}'  	Inventory = new InventoryModel () {  		Now =  {  			Items = new List<ItemModel> (words.GetRange (2' words.Count - 2).Select (x => new ItemModel () {  				Name = x  			}))  		}  	}  };  
Magic Number,Myrcon.Protocols.Frostbite.Objects,FrostbiteSpawn,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Objects\FrostbiteSpawn.cs,Parse,The following statement contains a magic number: return new SpawnModel {  	Player = new PlayerModel () {  		Name = words [0]  	}'  	Role = new RoleModel () {  		Name = words [1]  	}'  	Inventory = new InventoryModel () {  		Now =  {  			Items = new List<ItemModel> (words.GetRange (2' words.Count - 2).Select (x => new ItemModel () {  				Name = x  			}))  		}  	}  };  
Magic Number,Myrcon.Protocols.Frostbite.Objects,FrostbiteTimeSubset,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Objects\FrostbiteTimeSubset.cs,Parse,The following statement contains a magic number: if (String.CompareOrdinal (words [0]' "perm") == 0) {  	timeSubset.Context = TimeSubsetContext.Permanent;  } else if (String.CompareOrdinal (words [0]' "round") == 0) {  	timeSubset.Context = TimeSubsetContext.Round;  } else if (words.Count == 2 && String.CompareOrdinal (words [0]' "seconds") == 0 && int.TryParse (words [1]' out seconds) == true) {  	timeSubset.Context = TimeSubsetContext.Time;  	timeSubset.Length = TimeSpan.FromSeconds (seconds);  }  
Magic Number,Myrcon.Protocols.Frostbite.Objects,FrostbiteTimeSubset,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Objects\FrostbiteTimeSubset.cs,Parse,The following statement contains a magic number: if (String.CompareOrdinal (words [0]' "round") == 0) {  	timeSubset.Context = TimeSubsetContext.Round;  } else if (words.Count == 2 && String.CompareOrdinal (words [0]' "seconds") == 0 && int.TryParse (words [1]' out seconds) == true) {  	timeSubset.Context = TimeSubsetContext.Time;  	timeSubset.Length = TimeSpan.FromSeconds (seconds);  }  
Magic Number,Myrcon.Protocols.Frostbite.Objects,FrostbiteTimeSubset,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Objects\FrostbiteTimeSubset.cs,Parse,The following statement contains a magic number: if (words.Count == 2 && String.CompareOrdinal (words [0]' "seconds") == 0 && int.TryParse (words [1]' out seconds) == true) {  	timeSubset.Context = TimeSubsetContext.Time;  	timeSubset.Length = TimeSpan.FromSeconds (seconds);  }  
Missing Default,Myrcon.Protocols.Frostbite.Objects,FrostbitePlayer,D:\newReposJune17\phogue_Potato\src\Myrcon.Protocols.Frostbite\Objects\FrostbitePlayer.cs,Parse,The following switch statement is missing a default case: switch (parameters [i].ToLower ()) {  case "guid":  	player.Uid = variables [i];  	break;  case "name":  	player.Name = variables [i];  	break;  case "clantag":  	player.ClanTag = variables [i];  	break;  case "teamid":  	if (int.TryParse (variables [i]' out intValue)) {  		player.Groups.Add (new GroupModel () {  			Type = GroupModel.Team'  			Uid = intValue.ToString (CultureInfo.InvariantCulture)  		});  	}  	break;  case "squadid":  	if (int.TryParse (variables [i]' out intValue)) {  		player.Groups.Add (new GroupModel () {  			Type = GroupModel.Squad'  			Uid = intValue.ToString (CultureInfo.InvariantCulture)  		});  	}  	break;  case "kills":  	if (int.TryParse (variables [i]' out intValue))  		player.Kills = intValue;  	break;  case "deaths":  	if (int.TryParse (variables [i]' out intValue))  		player.Deaths = intValue;  	break;  case "score":  	if (int.TryParse (variables [i]' out intValue))  		player.Score = intValue;  	break;  case "ping":  	uint uintValue = 0;  	if (uint.TryParse (variables [i]' out uintValue))  		player.Ping = uintValue;  	break;  }  
