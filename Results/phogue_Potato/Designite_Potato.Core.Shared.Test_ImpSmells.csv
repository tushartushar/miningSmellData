Implementation smell,Namespace,Class,File,Method,Description
Long Identifier,Potato.Core.Shared.Test.Database,TestDatabaseModel,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\Database\TestDatabaseModel.cs,TestComplexToSaveQuery,The length of the parameter collectionValueFirstDocumentValueDoubleValue is 44.
Long Identifier,Potato.Core.Shared.Test.Database,TestDatabaseModel,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\Database\TestDatabaseModel.cs,TestComplexToSaveQuery,The length of the parameter collectionValueFirstDocumentValueStringValue is 44.
Long Identifier,Potato.Core.Shared.Test.Database,TestDatabaseModel,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\Database\TestDatabaseModel.cs,TestComplexToSaveQuery,The length of the parameter collectionValueLastDocumentValueDoubleValue is 43.
Long Identifier,Potato.Core.Shared.Test.Database,TestDatabaseModel,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\Database\TestDatabaseModel.cs,TestComplexToSaveQuery,The length of the parameter collectionValueLastDocumentValueStringValue is 43.
Long Statement,Potato.Core.Shared.Test.Database,TestDatabaseModel,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\Database\TestDatabaseModel.cs,TestComplexFromQuerySingle,The length of the statement  "                new DocumentValue().Set("IntegerValue"' 1).Set("LongValue"' 2).Set("DoubleValue"' 3.5).Set("StringValue"' "Phogue").Set("DateTimeValue"' new DateTime(2013' 12' 19' 13' 38' 0)).Set("SingleMockSimpleModel"' new Dictionary<String' Object>() {" is 239.
Long Statement,Potato.Core.Shared.Test.Database,TestDatabaseModel,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\Database\TestDatabaseModel.cs,TestComplexToSaveQuery,The length of the statement  "            var collectionValueFirstDocumentValueDoubleValue = collectionValue.ElementAt(0).ElementAt(0).First(value => value is NumericValue) as NumericValue;" is 147.
Long Statement,Potato.Core.Shared.Test.Database,TestDatabaseModel,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\Database\TestDatabaseModel.cs,TestComplexToSaveQuery,The length of the statement  "            var collectionValueFirstDocumentValueStringValue = collectionValue.ElementAt(0).ElementAt(1).First(value => value is StringValue) as StringValue;" is 145.
Long Statement,Potato.Core.Shared.Test.Database,TestDatabaseModel,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\Database\TestDatabaseModel.cs,TestComplexToSaveQuery,The length of the statement  "            var collectionValueLastDocumentValueDoubleValue = collectionValue.ElementAt(1).ElementAt(0).First(value => value is NumericValue) as NumericValue;" is 146.
Long Statement,Potato.Core.Shared.Test.Database,TestDatabaseModel,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\Database\TestDatabaseModel.cs,TestComplexToSaveQuery,The length of the statement  "            var collectionValueLastDocumentValueStringValue = collectionValue.ElementAt(1).ElementAt(1).First(value => value is StringValue) as StringValue;" is 144.
Long Statement,Potato.Core.Shared.Test.ExecutableCommands,TestExecutableBasic,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\ExecutableCommands\TestExecutableBasic.cs,TestExecutableBasicGet,The length of the statement  "            // ICommandResult result = tester.Execute(Command.Local' new CommandExecutableAttribute() { CommandType = CommandType.VariablesGet });" is 134.
Long Statement,Potato.Core.Shared.Test.TestConfig,TestLoadDirectoryInfo,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\TestConfig\TestLoadDirectoryInfo.cs,TestSingleDocumentNotNull,The length of the statement  "            File.WriteAllText(this.ConfigFileA.FullName' @"{ ""Potato.Core.Shared.Test.TestConfig.Mocks.MockSimpleConcrete"": [ { ""Name"":""Phogue""' ""Age"": 100  } ] }");" is 161.
Long Statement,Potato.Core.Shared.Test.TestConfig,TestLoadDirectoryInfo,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\TestConfig\TestLoadDirectoryInfo.cs,TestSingleRootNotNull,The length of the statement  "            File.WriteAllText(this.ConfigFileA.FullName' @"{ ""Potato.Core.Shared.Test.TestConfig.Mocks.MockSimpleConcrete"": [ { ""Name"":""Phogue""' ""Age"": 100  } ] }");" is 161.
Long Statement,Potato.Core.Shared.Test.TestConfig,TestLoadDirectoryInfo,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\TestConfig\TestLoadDirectoryInfo.cs,TestSingleRootSetToFilePath,The length of the statement  "            File.WriteAllText(this.ConfigFileA.FullName' @"{ ""Potato.Core.Shared.Test.TestConfig.Mocks.MockSimpleConcrete"": [ { ""Name"":""Phogue""' ""Age"": 100  } ] }");" is 161.
Long Statement,Potato.Core.Shared.Test.TestConfig,TestLoadDirectoryInfo,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\TestConfig\TestLoadDirectoryInfo.cs,TestUnionedDocumentNotNull,The length of the statement  "            File.WriteAllText(this.ConfigFileA.FullName' @"{ ""Potato.Core.Shared.Test.TestConfig.Mocks.MockSimpleConcrete"": [ { ""Name"":""Phogue""' ""Age"": 100  } ] }");" is 161.
Long Statement,Potato.Core.Shared.Test.TestConfig,TestLoadDirectoryInfo,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\TestConfig\TestLoadDirectoryInfo.cs,TestUnionedDocumentNotNull,The length of the statement  "            File.WriteAllText(this.ConfigFileB.FullName' @"{ ""Potato.Core.Shared.Test.TestConfig.Mocks.AlternativeName"": [ { ""Name"":""Ike""' ""Age"": 10  } ] }");" is 154.
Long Statement,Potato.Core.Shared.Test.TestConfig,TestLoadDirectoryInfo,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\TestConfig\TestLoadDirectoryInfo.cs,TestUnionedRootNotNull,The length of the statement  "            File.WriteAllText(this.ConfigFileA.FullName' @"{ ""Potato.Core.Shared.Test.TestConfig.Mocks.MockSimpleConcrete"": [ { ""Name"":""Phogue""' ""Age"": 100  } ] }");" is 161.
Long Statement,Potato.Core.Shared.Test.TestConfig,TestLoadDirectoryInfo,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\TestConfig\TestLoadDirectoryInfo.cs,TestUnionedRootNotNull,The length of the statement  "            File.WriteAllText(this.ConfigFileB.FullName' @"{ ""Potato.Core.Shared.Test.TestConfig.Mocks.AlternativeName"": [ { ""Name"":""Ike""' ""Age"": 10  } ] }");" is 154.
Long Statement,Potato.Core.Shared.Test.TestConfig,TestLoadDirectoryInfo,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\TestConfig\TestLoadDirectoryInfo.cs,TestUnionedRootSetToFirstFilePath,The length of the statement  "            File.WriteAllText(this.ConfigFileA.FullName' @"{ ""Potato.Core.Shared.Test.TestConfig.Mocks.MockSimpleConcrete"": [ { ""Name"":""Phogue""' ""Age"": 100  } ] }");" is 161.
Long Statement,Potato.Core.Shared.Test.TestConfig,TestLoadDirectoryInfo,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\TestConfig\TestLoadDirectoryInfo.cs,TestUnionedRootSetToFirstFilePath,The length of the statement  "            File.WriteAllText(this.ConfigFileB.FullName' @"{ ""Potato.Core.Shared.Test.TestConfig.Mocks.AlternativeName"": [ { ""Name"":""Ike""' ""Age"": 10  } ] }");" is 154.
Long Statement,Potato.Core.Shared.Test.TestConfig,TestLoadDirectoryInfo,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\TestConfig\TestLoadDirectoryInfo.cs,TestUnionedDocumentContainsAlternativeToRoot,The length of the statement  "            File.WriteAllText(this.ConfigFileA.FullName' @"{ ""Potato.Core.Shared.Test.TestConfig.Mocks.MockSimpleConcrete"": [ { ""Name"":""Phogue""' ""Age"": 100  } ] }");" is 161.
Long Statement,Potato.Core.Shared.Test.TestConfig,TestLoadDirectoryInfo,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\TestConfig\TestLoadDirectoryInfo.cs,TestUnionedDocumentContainsAlternativeToRoot,The length of the statement  "            File.WriteAllText(this.ConfigFileB.FullName' @"{ ""Potato.Core.Shared.Test.TestConfig.Mocks.AlternativeName"": [ { ""Name"":""Ike""' ""Age"": 10  } ] }");" is 154.
Long Statement,Potato.Core.Shared.Test.TestConfig,TestLoadDirectoryInfo,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\TestConfig\TestLoadDirectoryInfo.cs,TestUnionedDocumentContainsAlternativeToRoot,The length of the statement  "            Assert.AreEqual("Phogue"' config.Document["Potato.Core.Shared.Test.TestConfig.Mocks.MockSimpleConcrete"].First["Name"].Value<String>());" is 136.
Long Statement,Potato.Core.Shared.Test.TestConfig,TestLoadDirectoryInfo,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\TestConfig\TestLoadDirectoryInfo.cs,TestUnionedDocumentContainsAlternativeToRoot,The length of the statement  "            Assert.AreEqual(100' config.Document["Potato.Core.Shared.Test.TestConfig.Mocks.MockSimpleConcrete"].First["Age"].Value<int>());" is 127.
Long Statement,Potato.Core.Shared.Test.TestConfig,TestLoadDirectoryInfo,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\TestConfig\TestLoadDirectoryInfo.cs,TestUnionedWithIdenticalNamespaces,The length of the statement  "            File.WriteAllText(this.ConfigFileA.FullName' @"{ ""Potato.Core.Shared.Test.TestConfig.Mocks.MockSimpleConcrete"": [ { ""Name"":""Phogue""' ""Age"": 100  } ] }");" is 161.
Long Statement,Potato.Core.Shared.Test.TestConfig,TestLoadDirectoryInfo,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\TestConfig\TestLoadDirectoryInfo.cs,TestUnionedWithIdenticalNamespaces,The length of the statement  "            File.WriteAllText(this.ConfigFileB.FullName' @"{ ""Potato.Core.Shared.Test.TestConfig.Mocks.MockSimpleConcrete"": [ { ""Name"":""Ike""' ""Age"": 10  } ] }");" is 157.
Long Statement,Potato.Core.Shared.Test.TestConfig,TestLoadFileInfo,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\TestConfig\TestLoadFileInfo.cs,TestDocumentNotNull,The length of the statement  "            File.WriteAllText(this.ConfigFileA.FullName' @"{ ""Potato.Core.Shared.Test.TestConfig.Mocks.MockSimpleConcrete"": [ { ""Name"":""Phogue""' ""Age"": 100  } ] }");" is 161.
Long Statement,Potato.Core.Shared.Test.TestConfig,TestLoadFileInfo,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\TestConfig\TestLoadFileInfo.cs,TestRootNotNullWithMatchingProperty,The length of the statement  "            File.WriteAllText(this.ConfigFileA.FullName' @"{ ""Potato.Core.Shared.Test.TestConfig.Mocks.MockSimpleConcrete"": [ { ""Name"":""Phogue""' ""Age"": 100  } ] }");" is 161.
Long Statement,Potato.Core.Shared.Test.TestConfig,TestLoadFileInfo,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\TestConfig\TestLoadFileInfo.cs,TestRootNotNullWithoutMatchingProperty,The length of the statement  "            File.WriteAllText(this.ConfigFileA.FullName' @"{ ""This.Type.Does.Not.Exist"": [ { ""Name"":""Phogue""' ""Age"": 100  } ] }");" is 126.
Long Statement,Potato.Core.Shared.Test.TestConfig,TestLoadFileInfo,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\TestConfig\TestLoadFileInfo.cs,TestRootNotNullNotArray,The length of the statement  "            File.WriteAllText(this.ConfigFileA.FullName' @"{ ""This.Type.Does.Not.Exist"": { ""Name"":""Phogue""' ""Age"": 100  } }");" is 122.
Long Statement,Potato.Core.Shared.Test.TestConfig,TestLoadFileInfo,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\TestConfig\TestLoadFileInfo.cs,TestRootSetToFilePath,The length of the statement  "            File.WriteAllText(this.ConfigFileA.FullName' @"{ ""Potato.Core.Shared.Test.TestConfig.Mocks.MockSimpleConcrete"": [ { ""Name"":""Phogue""' ""Age"": 100  } ] }");" is 161.
Long Statement,Potato.Core.Shared.Test.TestConfig,TestLoadFileInfo,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\TestConfig\TestLoadFileInfo.cs,TestInvalidJsonParsingNotNullRoot,The length of the statement  "            File.WriteAllText(this.ConfigFileA.FullName' @"{ ""Potato.Core.Shared.Test.TestConfig.Mocks.MockSimpleConcrete"": [ { ""N 100  } ] }");" is 135.
Long Statement,Potato.Core.Shared.Test.TestConfig,TestLoadFileInfo,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\TestConfig\TestLoadFileInfo.cs,TestInvalidJsonParsingNotNullDocument,The length of the statement  "            File.WriteAllText(this.ConfigFileA.FullName' @"{ ""Potato.Core.Shared.Test.TestConfig.Mocks.MockSimpleConcrete"": [ { ""N 100  } ] }");" is 135.
Magic Number,Potato.Core.Shared.Test.AsynchronousExecutableCommands,TestAsynchronousCoreController,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\AsynchronousExecutableCommands\TestAsynchronousCoreController.cs,TestAsyncBubbleCommand,The following statement contains a magic number: Assert.IsTrue(resultWait.WaitOne(1000));
Magic Number,Potato.Core.Shared.Test.AsynchronousExecutableCommands,TestAsynchronousCoreController,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\AsynchronousExecutableCommands\TestAsynchronousCoreController.cs,TestAsyncTunnelCommand,The following statement contains a magic number: Assert.IsTrue(resultWait.WaitOne(1000));
Magic Number,Potato.Core.Shared.Test.AsynchronousExecutableCommands,TestAsynchronousCoreController,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\AsynchronousExecutableCommands\TestAsynchronousCoreController.cs,TestChainedAsyncBubbleCommand,The following statement contains a magic number: Assert.IsTrue(resultWait.WaitOne(1000));
Magic Number,Potato.Core.Shared.Test.AsynchronousExecutableCommands,TestAsynchronousCoreController,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\AsynchronousExecutableCommands\TestAsynchronousCoreController.cs,TestChainedAsyncTunnelCommand,The following statement contains a magic number: Assert.IsTrue(resultWait.WaitOne(1000));
Magic Number,Potato.Core.Shared.Test.AsynchronousExecutableCommands,TestAsynchronousCoreController,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\AsynchronousExecutableCommands\TestAsynchronousCoreController.cs,TestAsyncDispose,The following statement contains a magic number: Assert.IsTrue(disposeWait.WaitOne(10000));
Magic Number,Potato.Core.Shared.Test.Database,TestDatabaseModel,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\Database\TestDatabaseModel.cs,TestComplexFromQuerySingle,The following statement contains a magic number: var item = new CollectionValue() {                 new DocumentValue().Set("IntegerValue"' 1).Set("LongValue"' 2).Set("DoubleValue"' 3.5).Set("StringValue"' "Phogue").Set("DateTimeValue"' new DateTime(2013' 12' 19' 13' 38' 0)).Set("SingleMockSimpleModel"' new Dictionary<String' Object>() {                     {"Id"' 10}'                     {"Name"' "Zaeed"}                 }).Set("MultipleMockSimpleModel"' new List<Object>() {                     new Dictionary<String' Object>() {                         {"Id"' 20}'                         {"Name"' "Ike"}                     }'                     new Dictionary<String' Object>() {                         {"Id"' 30}'                         {"Name"' "Phil"}                     }                 })             };
Magic Number,Potato.Core.Shared.Test.Database,TestDatabaseModel,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\Database\TestDatabaseModel.cs,TestComplexFromQuerySingle,The following statement contains a magic number: var item = new CollectionValue() {                 new DocumentValue().Set("IntegerValue"' 1).Set("LongValue"' 2).Set("DoubleValue"' 3.5).Set("StringValue"' "Phogue").Set("DateTimeValue"' new DateTime(2013' 12' 19' 13' 38' 0)).Set("SingleMockSimpleModel"' new Dictionary<String' Object>() {                     {"Id"' 10}'                     {"Name"' "Zaeed"}                 }).Set("MultipleMockSimpleModel"' new List<Object>() {                     new Dictionary<String' Object>() {                         {"Id"' 20}'                         {"Name"' "Ike"}                     }'                     new Dictionary<String' Object>() {                         {"Id"' 30}'                         {"Name"' "Phil"}                     }                 })             };
Magic Number,Potato.Core.Shared.Test.Database,TestDatabaseModel,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\Database\TestDatabaseModel.cs,TestComplexFromQuerySingle,The following statement contains a magic number: var item = new CollectionValue() {                 new DocumentValue().Set("IntegerValue"' 1).Set("LongValue"' 2).Set("DoubleValue"' 3.5).Set("StringValue"' "Phogue").Set("DateTimeValue"' new DateTime(2013' 12' 19' 13' 38' 0)).Set("SingleMockSimpleModel"' new Dictionary<String' Object>() {                     {"Id"' 10}'                     {"Name"' "Zaeed"}                 }).Set("MultipleMockSimpleModel"' new List<Object>() {                     new Dictionary<String' Object>() {                         {"Id"' 20}'                         {"Name"' "Ike"}                     }'                     new Dictionary<String' Object>() {                         {"Id"' 30}'                         {"Name"' "Phil"}                     }                 })             };
Magic Number,Potato.Core.Shared.Test.Database,TestDatabaseModel,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\Database\TestDatabaseModel.cs,TestComplexFromQuerySingle,The following statement contains a magic number: var item = new CollectionValue() {                 new DocumentValue().Set("IntegerValue"' 1).Set("LongValue"' 2).Set("DoubleValue"' 3.5).Set("StringValue"' "Phogue").Set("DateTimeValue"' new DateTime(2013' 12' 19' 13' 38' 0)).Set("SingleMockSimpleModel"' new Dictionary<String' Object>() {                     {"Id"' 10}'                     {"Name"' "Zaeed"}                 }).Set("MultipleMockSimpleModel"' new List<Object>() {                     new Dictionary<String' Object>() {                         {"Id"' 20}'                         {"Name"' "Ike"}                     }'                     new Dictionary<String' Object>() {                         {"Id"' 30}'                         {"Name"' "Phil"}                     }                 })             };
Magic Number,Potato.Core.Shared.Test.Database,TestDatabaseModel,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\Database\TestDatabaseModel.cs,TestComplexFromQuerySingle,The following statement contains a magic number: var item = new CollectionValue() {                 new DocumentValue().Set("IntegerValue"' 1).Set("LongValue"' 2).Set("DoubleValue"' 3.5).Set("StringValue"' "Phogue").Set("DateTimeValue"' new DateTime(2013' 12' 19' 13' 38' 0)).Set("SingleMockSimpleModel"' new Dictionary<String' Object>() {                     {"Id"' 10}'                     {"Name"' "Zaeed"}                 }).Set("MultipleMockSimpleModel"' new List<Object>() {                     new Dictionary<String' Object>() {                         {"Id"' 20}'                         {"Name"' "Ike"}                     }'                     new Dictionary<String' Object>() {                         {"Id"' 30}'                         {"Name"' "Phil"}                     }                 })             };
Magic Number,Potato.Core.Shared.Test.Database,TestDatabaseModel,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\Database\TestDatabaseModel.cs,TestComplexFromQuerySingle,The following statement contains a magic number: var item = new CollectionValue() {                 new DocumentValue().Set("IntegerValue"' 1).Set("LongValue"' 2).Set("DoubleValue"' 3.5).Set("StringValue"' "Phogue").Set("DateTimeValue"' new DateTime(2013' 12' 19' 13' 38' 0)).Set("SingleMockSimpleModel"' new Dictionary<String' Object>() {                     {"Id"' 10}'                     {"Name"' "Zaeed"}                 }).Set("MultipleMockSimpleModel"' new List<Object>() {                     new Dictionary<String' Object>() {                         {"Id"' 20}'                         {"Name"' "Ike"}                     }'                     new Dictionary<String' Object>() {                         {"Id"' 30}'                         {"Name"' "Phil"}                     }                 })             };
Magic Number,Potato.Core.Shared.Test.Database,TestDatabaseModel,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\Database\TestDatabaseModel.cs,TestComplexFromQuerySingle,The following statement contains a magic number: var item = new CollectionValue() {                 new DocumentValue().Set("IntegerValue"' 1).Set("LongValue"' 2).Set("DoubleValue"' 3.5).Set("StringValue"' "Phogue").Set("DateTimeValue"' new DateTime(2013' 12' 19' 13' 38' 0)).Set("SingleMockSimpleModel"' new Dictionary<String' Object>() {                     {"Id"' 10}'                     {"Name"' "Zaeed"}                 }).Set("MultipleMockSimpleModel"' new List<Object>() {                     new Dictionary<String' Object>() {                         {"Id"' 20}'                         {"Name"' "Ike"}                     }'                     new Dictionary<String' Object>() {                         {"Id"' 30}'                         {"Name"' "Phil"}                     }                 })             };
Magic Number,Potato.Core.Shared.Test.Database,TestDatabaseModel,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\Database\TestDatabaseModel.cs,TestComplexFromQuerySingle,The following statement contains a magic number: var item = new CollectionValue() {                 new DocumentValue().Set("IntegerValue"' 1).Set("LongValue"' 2).Set("DoubleValue"' 3.5).Set("StringValue"' "Phogue").Set("DateTimeValue"' new DateTime(2013' 12' 19' 13' 38' 0)).Set("SingleMockSimpleModel"' new Dictionary<String' Object>() {                     {"Id"' 10}'                     {"Name"' "Zaeed"}                 }).Set("MultipleMockSimpleModel"' new List<Object>() {                     new Dictionary<String' Object>() {                         {"Id"' 20}'                         {"Name"' "Ike"}                     }'                     new Dictionary<String' Object>() {                         {"Id"' 30}'                         {"Name"' "Phil"}                     }                 })             };
Magic Number,Potato.Core.Shared.Test.Database,TestDatabaseModel,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\Database\TestDatabaseModel.cs,TestComplexFromQuerySingle,The following statement contains a magic number: var item = new CollectionValue() {                 new DocumentValue().Set("IntegerValue"' 1).Set("LongValue"' 2).Set("DoubleValue"' 3.5).Set("StringValue"' "Phogue").Set("DateTimeValue"' new DateTime(2013' 12' 19' 13' 38' 0)).Set("SingleMockSimpleModel"' new Dictionary<String' Object>() {                     {"Id"' 10}'                     {"Name"' "Zaeed"}                 }).Set("MultipleMockSimpleModel"' new List<Object>() {                     new Dictionary<String' Object>() {                         {"Id"' 20}'                         {"Name"' "Ike"}                     }'                     new Dictionary<String' Object>() {                         {"Id"' 30}'                         {"Name"' "Phil"}                     }                 })             };
Magic Number,Potato.Core.Shared.Test.Database,TestDatabaseModel,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\Database\TestDatabaseModel.cs,TestComplexFromQuerySingle,The following statement contains a magic number: var item = new CollectionValue() {                 new DocumentValue().Set("IntegerValue"' 1).Set("LongValue"' 2).Set("DoubleValue"' 3.5).Set("StringValue"' "Phogue").Set("DateTimeValue"' new DateTime(2013' 12' 19' 13' 38' 0)).Set("SingleMockSimpleModel"' new Dictionary<String' Object>() {                     {"Id"' 10}'                     {"Name"' "Zaeed"}                 }).Set("MultipleMockSimpleModel"' new List<Object>() {                     new Dictionary<String' Object>() {                         {"Id"' 20}'                         {"Name"' "Ike"}                     }'                     new Dictionary<String' Object>() {                         {"Id"' 30}'                         {"Name"' "Phil"}                     }                 })             };
Magic Number,Potato.Core.Shared.Test.Database,TestDatabaseModel,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\Database\TestDatabaseModel.cs,TestComplexFromQuerySingle,The following statement contains a magic number: Assert.AreEqual(2' models.First().LongValue);
Magic Number,Potato.Core.Shared.Test.Database,TestDatabaseModel,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\Database\TestDatabaseModel.cs,TestComplexFromQuerySingle,The following statement contains a magic number: Assert.AreEqual(3.5D' models.First().DoubleValue);
Magic Number,Potato.Core.Shared.Test.Database,TestDatabaseModel,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\Database\TestDatabaseModel.cs,TestComplexFromQuerySingle,The following statement contains a magic number: Assert.AreEqual(new DateTime(2013' 12' 19' 13' 38' 0)' models.First().DateTimeValue);
Magic Number,Potato.Core.Shared.Test.Database,TestDatabaseModel,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\Database\TestDatabaseModel.cs,TestComplexFromQuerySingle,The following statement contains a magic number: Assert.AreEqual(new DateTime(2013' 12' 19' 13' 38' 0)' models.First().DateTimeValue);
Magic Number,Potato.Core.Shared.Test.Database,TestDatabaseModel,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\Database\TestDatabaseModel.cs,TestComplexFromQuerySingle,The following statement contains a magic number: Assert.AreEqual(new DateTime(2013' 12' 19' 13' 38' 0)' models.First().DateTimeValue);
Magic Number,Potato.Core.Shared.Test.Database,TestDatabaseModel,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\Database\TestDatabaseModel.cs,TestComplexFromQuerySingle,The following statement contains a magic number: Assert.AreEqual(new DateTime(2013' 12' 19' 13' 38' 0)' models.First().DateTimeValue);
Magic Number,Potato.Core.Shared.Test.Database,TestDatabaseModel,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\Database\TestDatabaseModel.cs,TestComplexFromQuerySingle,The following statement contains a magic number: Assert.AreEqual(new DateTime(2013' 12' 19' 13' 38' 0)' models.First().DateTimeValue);
Magic Number,Potato.Core.Shared.Test.Database,TestDatabaseModel,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\Database\TestDatabaseModel.cs,TestComplexFromQuerySingle,The following statement contains a magic number: Assert.AreEqual(10' models.First().SingleMockSimpleModel.Id);
Magic Number,Potato.Core.Shared.Test.Database,TestDatabaseModel,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\Database\TestDatabaseModel.cs,TestComplexFromQuerySingle,The following statement contains a magic number: Assert.AreEqual(20' models.First().MultipleMockSimpleModel.First().Id);
Magic Number,Potato.Core.Shared.Test.Database,TestDatabaseModel,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\Database\TestDatabaseModel.cs,TestComplexFromQuerySingle,The following statement contains a magic number: Assert.AreEqual(30' models.First().MultipleMockSimpleModel.Last().Id);
Magic Number,Potato.Core.Shared.Test.Database,TestDatabaseModel,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\Database\TestDatabaseModel.cs,TestComplexToSaveQuery,The following statement contains a magic number: Save save = new MockComplexModel() {                 IntegerValue = 1'                 LongValue = 2'                 DoubleValue = 3.5D'                 StringValue = "Phogue"'                 DateTimeValue = new DateTime(2013' 12' 19' 14' 14' 0)'                 SingleMockSimpleModel = new MockSimpleModel() {                     Id = 10'                     Name = "Zaeed"                 }'                 MultipleMockSimpleModel = new List<MockSimpleModel>() {                     new MockSimpleModel() {                         Id = 20'                         Name = "Ike"                     }'                     new MockSimpleModel() {                         Id = 30'                         Name = "Phil"                     }                 }             }.ToSaveQuery();
Magic Number,Potato.Core.Shared.Test.Database,TestDatabaseModel,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\Database\TestDatabaseModel.cs,TestComplexToSaveQuery,The following statement contains a magic number: Save save = new MockComplexModel() {                 IntegerValue = 1'                 LongValue = 2'                 DoubleValue = 3.5D'                 StringValue = "Phogue"'                 DateTimeValue = new DateTime(2013' 12' 19' 14' 14' 0)'                 SingleMockSimpleModel = new MockSimpleModel() {                     Id = 10'                     Name = "Zaeed"                 }'                 MultipleMockSimpleModel = new List<MockSimpleModel>() {                     new MockSimpleModel() {                         Id = 20'                         Name = "Ike"                     }'                     new MockSimpleModel() {                         Id = 30'                         Name = "Phil"                     }                 }             }.ToSaveQuery();
Magic Number,Potato.Core.Shared.Test.Database,TestDatabaseModel,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\Database\TestDatabaseModel.cs,TestComplexToSaveQuery,The following statement contains a magic number: Save save = new MockComplexModel() {                 IntegerValue = 1'                 LongValue = 2'                 DoubleValue = 3.5D'                 StringValue = "Phogue"'                 DateTimeValue = new DateTime(2013' 12' 19' 14' 14' 0)'                 SingleMockSimpleModel = new MockSimpleModel() {                     Id = 10'                     Name = "Zaeed"                 }'                 MultipleMockSimpleModel = new List<MockSimpleModel>() {                     new MockSimpleModel() {                         Id = 20'                         Name = "Ike"                     }'                     new MockSimpleModel() {                         Id = 30'                         Name = "Phil"                     }                 }             }.ToSaveQuery();
Magic Number,Potato.Core.Shared.Test.Database,TestDatabaseModel,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\Database\TestDatabaseModel.cs,TestComplexToSaveQuery,The following statement contains a magic number: Save save = new MockComplexModel() {                 IntegerValue = 1'                 LongValue = 2'                 DoubleValue = 3.5D'                 StringValue = "Phogue"'                 DateTimeValue = new DateTime(2013' 12' 19' 14' 14' 0)'                 SingleMockSimpleModel = new MockSimpleModel() {                     Id = 10'                     Name = "Zaeed"                 }'                 MultipleMockSimpleModel = new List<MockSimpleModel>() {                     new MockSimpleModel() {                         Id = 20'                         Name = "Ike"                     }'                     new MockSimpleModel() {                         Id = 30'                         Name = "Phil"                     }                 }             }.ToSaveQuery();
Magic Number,Potato.Core.Shared.Test.Database,TestDatabaseModel,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\Database\TestDatabaseModel.cs,TestComplexToSaveQuery,The following statement contains a magic number: Save save = new MockComplexModel() {                 IntegerValue = 1'                 LongValue = 2'                 DoubleValue = 3.5D'                 StringValue = "Phogue"'                 DateTimeValue = new DateTime(2013' 12' 19' 14' 14' 0)'                 SingleMockSimpleModel = new MockSimpleModel() {                     Id = 10'                     Name = "Zaeed"                 }'                 MultipleMockSimpleModel = new List<MockSimpleModel>() {                     new MockSimpleModel() {                         Id = 20'                         Name = "Ike"                     }'                     new MockSimpleModel() {                         Id = 30'                         Name = "Phil"                     }                 }             }.ToSaveQuery();
Magic Number,Potato.Core.Shared.Test.Database,TestDatabaseModel,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\Database\TestDatabaseModel.cs,TestComplexToSaveQuery,The following statement contains a magic number: Save save = new MockComplexModel() {                 IntegerValue = 1'                 LongValue = 2'                 DoubleValue = 3.5D'                 StringValue = "Phogue"'                 DateTimeValue = new DateTime(2013' 12' 19' 14' 14' 0)'                 SingleMockSimpleModel = new MockSimpleModel() {                     Id = 10'                     Name = "Zaeed"                 }'                 MultipleMockSimpleModel = new List<MockSimpleModel>() {                     new MockSimpleModel() {                         Id = 20'                         Name = "Ike"                     }'                     new MockSimpleModel() {                         Id = 30'                         Name = "Phil"                     }                 }             }.ToSaveQuery();
Magic Number,Potato.Core.Shared.Test.Database,TestDatabaseModel,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\Database\TestDatabaseModel.cs,TestComplexToSaveQuery,The following statement contains a magic number: Save save = new MockComplexModel() {                 IntegerValue = 1'                 LongValue = 2'                 DoubleValue = 3.5D'                 StringValue = "Phogue"'                 DateTimeValue = new DateTime(2013' 12' 19' 14' 14' 0)'                 SingleMockSimpleModel = new MockSimpleModel() {                     Id = 10'                     Name = "Zaeed"                 }'                 MultipleMockSimpleModel = new List<MockSimpleModel>() {                     new MockSimpleModel() {                         Id = 20'                         Name = "Ike"                     }'                     new MockSimpleModel() {                         Id = 30'                         Name = "Phil"                     }                 }             }.ToSaveQuery();
Magic Number,Potato.Core.Shared.Test.Database,TestDatabaseModel,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\Database\TestDatabaseModel.cs,TestComplexToSaveQuery,The following statement contains a magic number: Save save = new MockComplexModel() {                 IntegerValue = 1'                 LongValue = 2'                 DoubleValue = 3.5D'                 StringValue = "Phogue"'                 DateTimeValue = new DateTime(2013' 12' 19' 14' 14' 0)'                 SingleMockSimpleModel = new MockSimpleModel() {                     Id = 10'                     Name = "Zaeed"                 }'                 MultipleMockSimpleModel = new List<MockSimpleModel>() {                     new MockSimpleModel() {                         Id = 20'                         Name = "Ike"                     }'                     new MockSimpleModel() {                         Id = 30'                         Name = "Phil"                     }                 }             }.ToSaveQuery();
Magic Number,Potato.Core.Shared.Test.Database,TestDatabaseModel,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\Database\TestDatabaseModel.cs,TestComplexToSaveQuery,The following statement contains a magic number: Save save = new MockComplexModel() {                 IntegerValue = 1'                 LongValue = 2'                 DoubleValue = 3.5D'                 StringValue = "Phogue"'                 DateTimeValue = new DateTime(2013' 12' 19' 14' 14' 0)'                 SingleMockSimpleModel = new MockSimpleModel() {                     Id = 10'                     Name = "Zaeed"                 }'                 MultipleMockSimpleModel = new List<MockSimpleModel>() {                     new MockSimpleModel() {                         Id = 20'                         Name = "Ike"                     }'                     new MockSimpleModel() {                         Id = 30'                         Name = "Phil"                     }                 }             }.ToSaveQuery();
Magic Number,Potato.Core.Shared.Test.Database,TestDatabaseModel,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\Database\TestDatabaseModel.cs,TestComplexToSaveQuery,The following statement contains a magic number: Save save = new MockComplexModel() {                 IntegerValue = 1'                 LongValue = 2'                 DoubleValue = 3.5D'                 StringValue = "Phogue"'                 DateTimeValue = new DateTime(2013' 12' 19' 14' 14' 0)'                 SingleMockSimpleModel = new MockSimpleModel() {                     Id = 10'                     Name = "Zaeed"                 }'                 MultipleMockSimpleModel = new List<MockSimpleModel>() {                     new MockSimpleModel() {                         Id = 20'                         Name = "Ike"                     }'                     new MockSimpleModel() {                         Id = 30'                         Name = "Phil"                     }                 }             }.ToSaveQuery();
Magic Number,Potato.Core.Shared.Test.Database,TestDatabaseModel,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\Database\TestDatabaseModel.cs,TestComplexToSaveQuery,The following statement contains a magic number: var doubleValue = save.ElementAt(2).First(value => value is NumericValue) as NumericValue;
Magic Number,Potato.Core.Shared.Test.Database,TestDatabaseModel,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\Database\TestDatabaseModel.cs,TestComplexToSaveQuery,The following statement contains a magic number: var stringValue = save.ElementAt(3).First(value => value is StringValue) as StringValue;
Magic Number,Potato.Core.Shared.Test.Database,TestDatabaseModel,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\Database\TestDatabaseModel.cs,TestComplexToSaveQuery,The following statement contains a magic number: var dateTimeValue = save.ElementAt(4).First(value => value is DateTimeValue) as DateTimeValue;
Magic Number,Potato.Core.Shared.Test.Database,TestDatabaseModel,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\Database\TestDatabaseModel.cs,TestComplexToSaveQuery,The following statement contains a magic number: var documentValue = save.ElementAt(5).First(value => value is DocumentValue) as DocumentValue;
Magic Number,Potato.Core.Shared.Test.Database,TestDatabaseModel,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\Database\TestDatabaseModel.cs,TestComplexToSaveQuery,The following statement contains a magic number: var collectionValue = save.ElementAt(6).First(value => value is CollectionValue) as CollectionValue;
Magic Number,Potato.Core.Shared.Test.Database,TestDatabaseModel,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\Database\TestDatabaseModel.cs,TestComplexToSaveQuery,The following statement contains a magic number: Assert.AreEqual(2' longValue.Long);
Magic Number,Potato.Core.Shared.Test.Database,TestDatabaseModel,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\Database\TestDatabaseModel.cs,TestComplexToSaveQuery,The following statement contains a magic number: Assert.AreEqual(3.5D' doubleValue.Double);
Magic Number,Potato.Core.Shared.Test.Database,TestDatabaseModel,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\Database\TestDatabaseModel.cs,TestComplexToSaveQuery,The following statement contains a magic number: Assert.AreEqual(new DateTime(2013' 12' 19' 14' 14' 0)' dateTimeValue.Data);
Magic Number,Potato.Core.Shared.Test.Database,TestDatabaseModel,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\Database\TestDatabaseModel.cs,TestComplexToSaveQuery,The following statement contains a magic number: Assert.AreEqual(new DateTime(2013' 12' 19' 14' 14' 0)' dateTimeValue.Data);
Magic Number,Potato.Core.Shared.Test.Database,TestDatabaseModel,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\Database\TestDatabaseModel.cs,TestComplexToSaveQuery,The following statement contains a magic number: Assert.AreEqual(new DateTime(2013' 12' 19' 14' 14' 0)' dateTimeValue.Data);
Magic Number,Potato.Core.Shared.Test.Database,TestDatabaseModel,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\Database\TestDatabaseModel.cs,TestComplexToSaveQuery,The following statement contains a magic number: Assert.AreEqual(new DateTime(2013' 12' 19' 14' 14' 0)' dateTimeValue.Data);
Magic Number,Potato.Core.Shared.Test.Database,TestDatabaseModel,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\Database\TestDatabaseModel.cs,TestComplexToSaveQuery,The following statement contains a magic number: Assert.AreEqual(new DateTime(2013' 12' 19' 14' 14' 0)' dateTimeValue.Data);
Magic Number,Potato.Core.Shared.Test.Database,TestDatabaseModel,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\Database\TestDatabaseModel.cs,TestComplexToSaveQuery,The following statement contains a magic number: Assert.AreEqual(10.0D' documentValueDoubleValue.Double);
Magic Number,Potato.Core.Shared.Test.Database,TestDatabaseModel,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\Database\TestDatabaseModel.cs,TestComplexToSaveQuery,The following statement contains a magic number: Assert.AreEqual(20.0D' collectionValueFirstDocumentValueDoubleValue.Double);
Magic Number,Potato.Core.Shared.Test.Database,TestDatabaseModel,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\Database\TestDatabaseModel.cs,TestComplexToSaveQuery,The following statement contains a magic number: Assert.AreEqual(30.0D' collectionValueLastDocumentValueDoubleValue.Double);
Magic Number,Potato.Core.Shared.Test.Database,TestDatabaseModel,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\Database\TestDatabaseModel.cs,TestSimpleFromQueryMultiple,The following statement contains a magic number: var item = new CollectionValue() {                 new DocumentValue().Set("Id"' 50).Set("Name"' "Phogue")'                 new DocumentValue().Set("Id"' 100).Set("Name"' "Zaeed")             };
Magic Number,Potato.Core.Shared.Test.Database,TestDatabaseModel,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\Database\TestDatabaseModel.cs,TestSimpleFromQueryMultiple,The following statement contains a magic number: var item = new CollectionValue() {                 new DocumentValue().Set("Id"' 50).Set("Name"' "Phogue")'                 new DocumentValue().Set("Id"' 100).Set("Name"' "Zaeed")             };
Magic Number,Potato.Core.Shared.Test.Database,TestDatabaseModel,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\Database\TestDatabaseModel.cs,TestSimpleFromQueryMultiple,The following statement contains a magic number: Assert.AreEqual(50' models.First().Id);
Magic Number,Potato.Core.Shared.Test.Database,TestDatabaseModel,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\Database\TestDatabaseModel.cs,TestSimpleFromQueryMultiple,The following statement contains a magic number: Assert.AreEqual(100' models.Last().Id);
Magic Number,Potato.Core.Shared.Test.Database,TestDatabaseModel,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\Database\TestDatabaseModel.cs,TestSimpleFromQuerySingle,The following statement contains a magic number: var item = new CollectionValue() {                 new DocumentValue().Set("Id"' 50).Set("Name"' "Phogue")             };
Magic Number,Potato.Core.Shared.Test.Database,TestDatabaseModel,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\Database\TestDatabaseModel.cs,TestSimpleFromQuerySingle,The following statement contains a magic number: Assert.AreEqual(50' models.First().Id);
Magic Number,Potato.Core.Shared.Test.Database,TestDatabaseModel,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\Database\TestDatabaseModel.cs,TestSimpleToModifyQuery,The following statement contains a magic number: Modify modify = new MockSimpleModel() {                 Name = "Phogue"'                 Id = 10             }.ToModifyQuery();
Magic Number,Potato.Core.Shared.Test.Database,TestDatabaseModel,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\Database\TestDatabaseModel.cs,TestSimpleToModifyQuery,The following statement contains a magic number: Assert.AreEqual(10' playerId.Long);
Magic Number,Potato.Core.Shared.Test.Database,TestDatabaseModel,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\Database\TestDatabaseModel.cs,TestSimpleToSaveQuery,The following statement contains a magic number: Save save = new MockSimpleModel() {                 Name = "Phogue"'                 Id = 10             }.ToSaveQuery();
Magic Number,Potato.Core.Shared.Test.Database,TestDatabaseModel,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\Database\TestDatabaseModel.cs,TestSimpleToSaveQuery,The following statement contains a magic number: Assert.AreEqual(10' playerId.Long);
Magic Number,Potato.Core.Shared.Test.ExecutableCommands.Objects,ExecutableExecutedTester,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\ExecutableCommands\Objects\ExecutableExecutedTester.cs,SetTestFlagPreview,The following statement contains a magic number: ExecutedTestValue = TestNumber * 2;
Magic Number,Potato.Core.Shared.Test.ExecutableCommands.Objects,ExecutablePreviewTester,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\ExecutableCommands\Objects\ExecutablePreviewTester.cs,SetTestFlagPreview,The following statement contains a magic number: value == 10
Magic Number,Potato.Core.Shared.Test.ExecutableCommands,TestExecutableBasic,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\ExecutableCommands\TestExecutableBasic.cs,TestExecutableBasicCustomSet,The following statement contains a magic number: tester.Tunnel(new Command() {                 Origin = CommandOrigin.Local'                 Name = "CustomSet"'                 Parameters = new List<ICommandParameter>() {                     new CommandParameter() {                         Data = {                             Content = new List<string>() {                                 50.ToString(CultureInfo.InvariantCulture)                             }                         }                     }                 }             });
Magic Number,Potato.Core.Shared.Test.ExecutableCommands,TestExecutableBasic,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\ExecutableCommands\TestExecutableBasic.cs,TestExecutableBasicCustomSet,The following statement contains a magic number: Assert.AreEqual(tester.TestNumber' 50);
Magic Number,Potato.Core.Shared.Test.ExecutableCommands,TestExecutableBasic,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\ExecutableCommands\TestExecutableBasic.cs,TestExecutableBasicCustomSetValidTypeCast,The following statement contains a magic number: Assert.AreEqual(tester.TestNumber' 50);
Magic Number,Potato.Core.Shared.Test.ExecutableCommands,TestExecutableBasic,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\ExecutableCommands\TestExecutableBasic.cs,TestExecutableBasicGet,The following statement contains a magic number: var tester = new ExecutableBasicTester() {                 TestNumber = 33             };
Magic Number,Potato.Core.Shared.Test.ExecutableCommands,TestExecutableBasic,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\ExecutableCommands\TestExecutableBasic.cs,TestExecutableBasicSet,The following statement contains a magic number: tester.Tunnel(new Command() {                 Origin = CommandOrigin.Local'                 CommandType = CommandType.VariablesSet'                 Parameters = new List<ICommandParameter>() {                     new CommandParameter() {                         Data = {                             Content = new List<string>() {                                 50.ToString(CultureInfo.InvariantCulture)                             }                         }                     }                 }             });
Magic Number,Potato.Core.Shared.Test.ExecutableCommands,TestExecutableBasic,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\ExecutableCommands\TestExecutableBasic.cs,TestExecutableBasicSet,The following statement contains a magic number: Assert.AreEqual(tester.TestNumber' 50);
Magic Number,Potato.Core.Shared.Test.ExecutableCommands,TestExecutableBasic,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\ExecutableCommands\TestExecutableBasic.cs,TestExecutableBasicSetValidTypeCast,The following statement contains a magic number: Assert.AreEqual(tester.TestNumber' 50);
Magic Number,Potato.Core.Shared.Test.ExecutableCommands,TestExecutableBasic,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\ExecutableCommands\TestExecutableBasic.cs,TestExecutableDisposedEvent,The following statement contains a magic number: Assert.IsTrue(requestWait.WaitOne(60000));
Magic Number,Potato.Core.Shared.Test.ExecutableCommands,TestExecutableExecuted,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\ExecutableCommands\TestExecutableExecuted.cs,TestExecutablePreviewSetPassThrough,The following statement contains a magic number: tester.Tunnel(new Command() {                 Origin = CommandOrigin.Local'                 CommandType = CommandType.VariablesSet'                 Parameters = new List<ICommandParameter>() {                     new CommandParameter() {                         Data = {                             Content = new List<string>() {                                 50.ToString(CultureInfo.InvariantCulture)                             }                         }                     }                 }             });
Magic Number,Potato.Core.Shared.Test.ExecutableCommands,TestExecutableExecuted,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\ExecutableCommands\TestExecutableExecuted.cs,TestExecutablePreviewSetPassThrough,The following statement contains a magic number: Assert.AreEqual(tester.TestNumber' 50);
Magic Number,Potato.Core.Shared.Test.ExecutableCommands,TestExecutableExecuted,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\ExecutableCommands\TestExecutableExecuted.cs,TestExecutablePreviewSetPassThrough,The following statement contains a magic number: Assert.AreEqual(tester.ExecutedTestValue' 100);
Magic Number,Potato.Core.Shared.Test.ExecutableCommands,TestExecutableOverride,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\ExecutableCommands\TestExecutableOverride.cs,TestExecutableOverrideSetObject,The following statement contains a magic number: Assert.AreEqual(166' tester.TestNumber);
Magic Number,Potato.Core.Shared.Test.ExecutableCommands,TestExecutableOverride,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\ExecutableCommands\TestExecutableOverride.cs,TestExecutableOverrideSetPrimitive,The following statement contains a magic number: tester.Tunnel(new Command() {                 Origin = CommandOrigin.Local'                 CommandType = CommandType.VariablesSet'                 Parameters = new List<ICommandParameter>() {                     new CommandParameter() {                         Data = {                             Content = new List<string>() {                                 50.ToString(CultureInfo.InvariantCulture)                             }                         }                     }                 }             });
Magic Number,Potato.Core.Shared.Test.ExecutableCommands,TestExecutableOverride,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\ExecutableCommands\TestExecutableOverride.cs,TestExecutableOverrideSetPrimitive,The following statement contains a magic number: Assert.AreEqual(50' tester.TestNumber);
Magic Number,Potato.Core.Shared.Test.ExecutableCommands,TestExecutablePreview,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\ExecutableCommands\TestExecutablePreview.cs,TestExecutablePreviewSetCancel,The following statement contains a magic number: tester.Tunnel(new Command() {                 Origin = CommandOrigin.Local'                 CommandType = CommandType.VariablesSet'                 Parameters = new List<ICommandParameter>() {                     new CommandParameter() {                         Data = {                             Content = new List<string>() {                                 10.ToString(CultureInfo.InvariantCulture)                             }                         }                     }                 }             });
Magic Number,Potato.Core.Shared.Test.ExecutableCommands,TestExecutablePreview,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\ExecutableCommands\TestExecutablePreview.cs,TestExecutablePreviewSetPassThrough,The following statement contains a magic number: tester.Tunnel(new Command() {                 Origin = CommandOrigin.Local'                 CommandType = CommandType.VariablesSet'                 Parameters = new List<ICommandParameter>() {                     new CommandParameter() {                         Data = {                             Content = new List<string>() {                                 50.ToString(CultureInfo.InvariantCulture)                             }                         }                     }                 }             });
Magic Number,Potato.Core.Shared.Test.ExecutableCommands,TestExecutablePreview,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\ExecutableCommands\TestExecutablePreview.cs,TestExecutablePreviewSetPassThrough,The following statement contains a magic number: Assert.AreEqual(tester.TestNumber' 50);
Magic Number,Potato.Core.Shared.Test.ExecutableCommands,TestExecutableProperties,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\ExecutableCommands\TestExecutableProperties.cs,TestExecutablePropertiesEvent,The following statement contains a magic number: tester.TestNumber = 10;
Magic Number,Potato.Core.Shared.Test.TestCommandParameter,TestDateTimeConversion,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\TestCommandParameter\TestDateTimeConversion.cs,TestAllDateTimeConversionSuccess,The following statement contains a magic number: Assert.AreEqual(DateTime.Parse("2014-04-10 03:23:13")' list[2]);
Magic Number,Potato.Core.Shared.Test.TestCommandParameter,TestStringConversion,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\TestCommandParameter\TestStringConversion.cs,TestAllKnownTypeSuccess,The following statement contains a magic number: Assert.AreEqual("Nothing"' items[2]);
Magic Number,Potato.Core.Shared.Test.TestCommandParameter,TestIntegerConversion,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\TestCommandParameter\TestIntegerConversion.cs,TestAllIntegerConversionSuccess,The following statement contains a magic number: Assert.AreEqual(2' list[1]);
Magic Number,Potato.Core.Shared.Test.TestCommandParameter,TestIntegerConversion,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\TestCommandParameter\TestIntegerConversion.cs,TestAllIntegerConversionSuccess,The following statement contains a magic number: Assert.AreEqual(3' list[2]);
Magic Number,Potato.Core.Shared.Test.TestCommandParameter,TestIntegerConversion,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\TestCommandParameter\TestIntegerConversion.cs,TestAllIntegerConversionSuccess,The following statement contains a magic number: Assert.AreEqual(3' list[2]);
Magic Number,Potato.Core.Shared.Test.TestCommandParameter,TestGuidConversion,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\TestCommandParameter\TestGuidConversion.cs,TestAllGuidConversionSuccess,The following statement contains a magic number: Assert.AreEqual(new Guid("76268850-2029-4b5f-b421-5b5ee4f17b6b")' list[2]);
Magic Number,Potato.Core.Shared.Test.TestConfig,TestAppend,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\TestConfig\TestAppend.cs,TestAppendedToRoot,The following statement contains a magic number: config.Append(new MockSimpleConcrete() {                 Name = "Phogue"'                 Age = 100             });
Magic Number,Potato.Core.Shared.Test.TestConfig,TestAppend,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\TestConfig\TestAppend.cs,TestAppendedToRoot,The following statement contains a magic number: Assert.AreEqual(100' config.Root.First["Age"].Value<int>());
Magic Number,Potato.Core.Shared.Test.TestConfig,TestLoadDirectoryInfo,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\TestConfig\TestLoadDirectoryInfo.cs,TestSingleRootSetToFilePath,The following statement contains a magic number: Assert.AreEqual(100' config.Root.First["Age"].Value<int>());
Magic Number,Potato.Core.Shared.Test.TestConfig,TestLoadDirectoryInfo,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\TestConfig\TestLoadDirectoryInfo.cs,TestUnionedRootSetToFirstFilePath,The following statement contains a magic number: Assert.AreEqual(10' config.Root.First["Age"].Value<int>());
Magic Number,Potato.Core.Shared.Test.TestConfig,TestLoadDirectoryInfo,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\TestConfig\TestLoadDirectoryInfo.cs,TestUnionedDocumentContainsAlternativeToRoot,The following statement contains a magic number: Assert.AreEqual(100' config.Document["Potato.Core.Shared.Test.TestConfig.Mocks.MockSimpleConcrete"].First["Age"].Value<int>());
Magic Number,Potato.Core.Shared.Test.TestConfig,TestLoadDirectoryInfo,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\TestConfig\TestLoadDirectoryInfo.cs,TestUnionedWithIdenticalNamespaces,The following statement contains a magic number: Assert.AreEqual(10' config.Root.First["Age"].Value<int>());
Magic Number,Potato.Core.Shared.Test.TestConfig,TestLoadDirectoryInfo,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\TestConfig\TestLoadDirectoryInfo.cs,TestUnionedWithIdenticalNamespaces,The following statement contains a magic number: Assert.AreEqual(100' config.Root.Last["Age"].Value<int>());
Magic Number,Potato.Core.Shared.Test.TestConfig,TestLoadFileInfo,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\TestConfig\TestLoadFileInfo.cs,TestRootSetToFilePath,The following statement contains a magic number: Assert.AreEqual(100' config.Root.First["Age"].Value<int>());
Magic Number,Potato.Core.Shared.Test.TestModels.TestAccountAccessToken,TestAuthenticate,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\TestModels\TestAccountAccessToken\TestAuthenticate.cs,TestExpiredAccessTokenDenied,The following statement contains a magic number: this.Valid.LastTouched = DateTime.Now.AddDays(-3);
Magic Number,Potato.Core.Shared.Test,TestThrottledStream,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\TestThrottledStream.cs,TestFlushToIsCalled,The following statement contains a magic number: ThrottledStream<int> stream = new ThrottledStream<int>() {                 Interval = new TimeSpan(0' 0' 0' 0' 10)'                 FlushTo = items => {                     isFlushToCalled = true;                     reset.Set();                 }             };
Magic Number,Potato.Core.Shared.Test,TestThrottledStream,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\TestThrottledStream.cs,TestFlushToIsCalled,The following statement contains a magic number: Assert.IsTrue(reset.WaitOne(500));
Magic Number,Potato.Core.Shared.Test,TestThrottledStream,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\TestThrottledStream.cs,TestFlushToCorrectOrder,The following statement contains a magic number: ThrottledStream<int> stream = new ThrottledStream<int>() {                 Interval = new TimeSpan(0' 0' 0' 0' 100)'                 FlushTo = items => {                     flushedItems = items;                     reset.Set();                 }             };
Magic Number,Potato.Core.Shared.Test,TestThrottledStream,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\TestThrottledStream.cs,TestFlushToCorrectOrder,The following statement contains a magic number: stream.Call(2);
Magic Number,Potato.Core.Shared.Test,TestThrottledStream,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\TestThrottledStream.cs,TestFlushToCorrectOrder,The following statement contains a magic number: stream.Call(3);
Magic Number,Potato.Core.Shared.Test,TestThrottledStream,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\TestThrottledStream.cs,TestFlushToCorrectOrder,The following statement contains a magic number: Assert.IsTrue(reset.WaitOne(500));
Magic Number,Potato.Core.Shared.Test,TestThrottledStream,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\TestThrottledStream.cs,TestFlushToCorrectOrder,The following statement contains a magic number: Assert.AreEqual(new List<int>() { 1' 2' 3 }' flushedItems);
Magic Number,Potato.Core.Shared.Test,TestThrottledStream,C:\research\architectureSmells\repos\phogue_Potato\src\Potato.Core.Shared.Test\TestThrottledStream.cs,TestFlushToCorrectOrder,The following statement contains a magic number: Assert.AreEqual(new List<int>() { 1' 2' 3 }' flushedItems);
