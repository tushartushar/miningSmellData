Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Potato.Net.Shared,Protocol,D:\newReposJune17\phogue_Potato\src\Potato.Net.Shared\Protocol.cs,DispatchAction,Cyclomatic complexity of the method is 40
Complex Method,Potato.Net.Shared,ProtocolConfigLoader,D:\newReposJune17\phogue_Potato\src\Potato.Net.Shared\ProtocolConfigLoader.cs,Load,Cyclomatic complexity of the method is 7
Complex Method,Potato.Net.Shared,ProtocolAssemblyMetadata,D:\newReposJune17\phogue_Potato\src\Potato.Net.Shared\ProtocolAssemblyMetadata.cs,Load,Cyclomatic complexity of the method is 7
Complex Method,Potato.Net.Shared,ProtocolState,D:\newReposJune17\phogue_Potato\src\Potato.Net.Shared\ProtocolState.cs,Set,Cyclomatic complexity of the method is 10
Complex Method,Potato.Net.Shared,TcpClient,D:\newReposJune17\phogue_Potato\src\Potato.Net.Shared\TCPClient.cs,ReadCallback,Cyclomatic complexity of the method is 8
Complex Method,Potato.Net.Shared.Geolocation.Maxmind,CountryLookup,D:\newReposJune17\phogue_Potato\src\Potato.Net.Shared\Geolocation\Maxmind\CountryLookup.cs,seekCountry,Cyclomatic complexity of the method is 9
Complex Method,Potato.Net.Shared.Utils,StringExtensions,D:\newReposJune17\phogue_Potato\src\Potato.Net.Shared\Utils\StringExtensions.cs,Wordify,Cyclomatic complexity of the method is 12
Long Parameter List,Potato.Net.Shared,Protocol,D:\newReposJune17\phogue_Potato\src\Potato.Net.Shared\Protocol.cs,OnProtocolEvent,The method has 4 parameters.
Long Parameter List,Potato.Net.Shared.Serialization,InterfaceJsonConverter,D:\newReposJune17\phogue_Potato\src\Potato.Net.Shared\Serialization\InterfaceJsonConverter.cs,ReadJson,The method has 4 parameters.
Long Statement,Potato.Net.Shared,Client,D:\newReposJune17\phogue_Potato\src\Potato.Net.Shared\Client.cs,Poke,The length of the statement  "	bool downstreamDead = this.LastPacketReceived == null || this.LastPacketReceived.Packet.Stamp < DateTime.Now.AddMinutes (-5); " is 125.
Long Statement,Potato.Net.Shared,PacketDispatcher,D:\newReposJune17\phogue_Potato\src\Potato.Net.Shared\PacketDispatcher.cs,Dispatch,The length of the statement  "	var dispatchMethods = this.Handlers.Where (dispatcher => dispatcher.Key.Name == identifer.Name).Where (dispatcher => dispatcher.Key.Origin == PacketOrigin.None || dispatcher.Key.Origin == identifer.Origin).Select (dispatcher => dispatcher.Value).ToList (); " is 256.
Long Statement,Potato.Net.Shared,PacketQueue,D:\newReposJune17\phogue_Potato\src\Potato.Net.Shared\PacketQueue.cs,RestartConnectionOnQueueFailure,The length of the statement  "	if (this.OutgoingPackets.Any (outgoingPacket => outgoingPacket.Value.Packet.Stamp < DateTime.Now.AddMinutes (-2)) == true) { " is 124.
Long Statement,Potato.Net.Shared,PacketQueue,D:\newReposJune17\phogue_Potato\src\Potato.Net.Shared\PacketQueue.cs,GetRequestPacket,The length of the statement  "	if (recievedWrapper.Packet.RequestId != null && this.OutgoingPackets.ContainsKey (recievedWrapper.Packet.RequestId) == true) { " is 126.
Long Statement,Potato.Net.Shared,PacketQueue,D:\newReposJune17\phogue_Potato\src\Potato.Net.Shared\PacketQueue.cs,PacketSend,The length of the statement  "		if (wrapper.Packet.RequestId != null && wrapper.Packet.Origin == PacketOrigin.Client && wrapper.Packet.Type == PacketType.Request && this.OutgoingPackets.ContainsKey (wrapper.Packet.RequestId) == false) { " is 204.
Long Statement,Potato.Net.Shared,Protocol,D:\newReposJune17\phogue_Potato\src\Potato.Net.Shared\Protocol.cs,Send,The length of the statement  "		if (this.Client != null && (this.Client.ConnectionState == ConnectionState.ConnectionReady || this.Client.ConnectionState == ConnectionState.ConnectionLoggedIn)) { " is 163.
Long Statement,Potato.Net.Shared,Protocol,D:\newReposJune17\phogue_Potato\src\Potato.Net.Shared\Protocol.cs,Setup,The length of the statement  "	this.Client.PacketSent += (sender' wrapper) => this.OnClientEvent (ClientEventType.ClientPacketSent' new ClientEventData () { " is 125.
Long Statement,Potato.Net.Shared,Protocol,D:\newReposJune17\phogue_Potato\src\Potato.Net.Shared\Protocol.cs,Setup,The length of the statement  "	this.Client.SocketException += (sender' se) => this.OnClientEvent (ClientEventType.ClientSocketException' new ClientEventData () { " is 130.
Long Statement,Potato.Net.Shared,Protocol,D:\newReposJune17\phogue_Potato\src\Potato.Net.Shared\Protocol.cs,Setup,The length of the statement  "	this.Client.ConnectionFailure += (sender' exception) => this.OnClientEvent (ClientEventType.ClientConnectionFailure' new ClientEventData () { " is 141.
Long Statement,Potato.Net.Shared,ProtocolConfigLoader,D:\newReposJune17\phogue_Potato\src\Potato.Net.Shared\ProtocolConfigLoader.cs,Populate,The length of the statement  "			mode.DefaultGroups = config.Groups.Where (known => mode.DefaultGroups.Any (group => group.Uid == known.Uid && group.Type == known.Type)).ToList (); " is 147.
Long Statement,Potato.Net.Shared,ProtocolConfigLoader,D:\newReposJune17\phogue_Potato\src\Potato.Net.Shared\ProtocolConfigLoader.cs,Populate,The length of the statement  "				map.Groups = map.Groups.Union (config.Groups.Where (existing => map.Groups.Any (group => group.Uid == existing.Uid && group.Type == existing.Type) == false)).ToList (); " is 168.
Long Statement,Potato.Net.Shared,ProtocolConfigLoader,D:\newReposJune17\phogue_Potato\src\Potato.Net.Shared\ProtocolConfigLoader.cs,Path,The length of the statement  "		configPath = System.IO.Path.Combine (System.IO.Path.Combine (gameConfigPath' protocolProvider)' protocolName + ".json"); " is 120.
Long Statement,Potato.Net.Shared,TcpClient,D:\newReposJune17\phogue_Potato\src\Potato.Net.Shared\TCPClient.cs,BeginRead,The length of the statement  "	return this.Stream != null ? this.Stream.BeginRead (this.ReceivedBuffer' 0' this.ReceivedBuffer.Length' this.ReadCallback' this) : null; " is 136.
Long Statement,Potato.Net.Shared.Models,ProtocolConfigModel,D:\newReposJune17\phogue_Potato\src\Potato.Net.Shared\Models\ProtocolConfigModel.cs,Parse,The length of the statement  "	(this.MapPool ?? new List<MapModel> ()).ForEach (map => game.State.MapPool.TryAdd (map.GameMode.Name + "/" + map.Name' map)); " is 125.
Long Statement,Potato.Net.Shared.Models,ProtocolConfigModel,D:\newReposJune17\phogue_Potato\src\Potato.Net.Shared\Models\ProtocolConfigModel.cs,Parse,The length of the statement  "	(this.GameModes ?? new List<GameModeModel> ()).ForEach (gameMode => game.State.GameModePool.TryAdd (gameMode.Name' gameMode)); " is 126.
Long Statement,Potato.Net.Shared.Models,ProtocolConfigModel,D:\newReposJune17\phogue_Potato\src\Potato.Net.Shared\Models\ProtocolConfigModel.cs,Parse,The length of the statement  "	(this.Groups ?? new List<GroupModel> ()).ForEach (group => game.State.Groups.TryAdd (group.Type + "/" + group.Uid' group)); " is 123.
Long Statement,Potato.Net.Shared.Actions.Deferred,WaitingActions,D:\newReposJune17\phogue_Potato\src\Potato.Net.Shared\Actions\Deferred\WaitingActions.cs,Mark,The length of the statement  "	var waiting = this.Waiting.FirstOrDefault (on => on.Value.Requests.Any (packet => packet.RequestId == response.RequestId) == true && on.Value.Responses.Any (packet => packet.RequestId == response.RequestId) == false); " is 217.
Long Statement,Potato.Net.Shared.Sandbox,SandboxProtocolController,D:\newReposJune17\phogue_Potato\src\Potato.Net.Shared\Sandbox\SandboxProtocolController.cs,Create,The length of the statement  "		var protocolType = loaded.GetTypes ().Where (loadedType => typeof(IProtocol).IsAssignableFrom (loadedType)).First (loadedType => { " is 130.
Long Statement,Potato.Net.Shared.Sandbox,SandboxProtocolController,D:\newReposJune17\phogue_Potato\src\Potato.Net.Shared\Sandbox\SandboxProtocolController.cs,Create,The length of the statement  "			var firstOrDefault = loadedType.GetCustomAttributes (typeof(IProtocolType)' false).Cast<IProtocolType> ().FirstOrDefault (); " is 124.
Long Statement,Potato.Net.Shared.Sandbox,SandboxProtocolController,D:\newReposJune17\phogue_Potato\src\Potato.Net.Shared\Sandbox\SandboxProtocolController.cs,Create,The length of the statement  "			return firstOrDefault != null && String.Equals (firstOrDefault.Provider' type.Provider) && String.Equals (firstOrDefault.Type' type.Type); " is 138.
Long Statement,Potato.Net.Shared.Utils,StringExtensions,D:\newReposJune17\phogue_Potato\src\Potato.Net.Shared\Utils\StringExtensions.cs,RemoveDiacritics,The length of the statement  "	foreach (char t in normalizedString.Where (t => CharUnicodeInfo.GetUnicodeCategory (t) != UnicodeCategory.NonSpacingMark)) { " is 124.
Complex Conditional,Potato.Net.Shared,PacketQueue,D:\newReposJune17\phogue_Potato\src\Potato.Net.Shared\PacketQueue.cs,PacketSend,The conditional expression  "wrapper.Packet.RequestId != null && wrapper.Packet.Origin == PacketOrigin.Client && wrapper.Packet.Type == PacketType.Request && this.OutgoingPackets.ContainsKey (wrapper.Packet.RequestId) == false"  is complex.
Complex Conditional,Potato.Net.Shared,ProtocolAssemblyMetadata,D:\newReposJune17\phogue_Potato\src\Potato.Net.Shared\ProtocolAssemblyMetadata.cs,Load,The conditional expression  "this.Assembly != null && this.Assembly.Exists == true && this.Meta != null && this.Meta.Exists == true"  is complex.
Empty Catch Block,Potato.Net.Shared,UdpClient,D:\newReposJune17\phogue_Potato\src\Potato.Net.Shared\UDPClient.cs,ShutdownConnection,The method has an empty catch block.
Magic Number,Potato.Net.Shared,MarkManager,D:\newReposJune17\phogue_Potato\src\Potato.Net.Shared\MarkManager.cs,MarkManager,The following statement contains a magic number: this.MaximumMarkAge = 600;  
Magic Number,Potato.Net.Shared,MarkManager,D:\newReposJune17\phogue_Potato\src\Potato.Net.Shared\MarkManager.cs,IsValidMarkWindow,The following statement contains a magic number: if (this.Marks.Count > 0) {  	DateTime recentAttempt;  	lock (this.MarkListLock) {  		recentAttempt = this.Marks.OrderByDescending (time => time).First ();  	}  	valid = recentAttempt < DateTime.Now.AddSeconds (Math.Pow (2' this.Marks.Count) * -1);  }  
Magic Number,Potato.Net.Shared,MarkManager,D:\newReposJune17\phogue_Potato\src\Potato.Net.Shared\MarkManager.cs,IsValidMarkWindow,The following statement contains a magic number: valid = recentAttempt < DateTime.Now.AddSeconds (Math.Pow (2' this.Marks.Count) * -1);  
Magic Number,Potato.Net.Shared,PacketDispatch,D:\newReposJune17\phogue_Potato\src\Potato.Net.Shared\PacketDispatch.cs,GetHashCode,The following statement contains a magic number: unchecked {  	return ((Name != null ? Name.GetHashCode () : 0) * 397) ^ (int)Origin;  }  
Magic Number,Potato.Net.Shared,PacketDispatch,D:\newReposJune17\phogue_Potato\src\Potato.Net.Shared\PacketDispatch.cs,GetHashCode,The following statement contains a magic number: return ((Name != null ? Name.GetHashCode () : 0) * 397) ^ (int)Origin;  
Magic Number,Potato.Net.Shared,PacketQueue,D:\newReposJune17\phogue_Potato\src\Potato.Net.Shared\PacketQueue.cs,RestartConnectionOnQueueFailure,The following statement contains a magic number: if (this.OutgoingPackets.Any (outgoingPacket => outgoingPacket.Value.Packet.Stamp < DateTime.Now.AddMinutes (-2)) == true) {  	this.Clear ();  	failed = true;  }  
Magic Number,Potato.Net.Shared.Actions.Deferred,WaitingAction,D:\newReposJune17\phogue_Potato\src\Potato.Net.Shared\Actions\Deferred\WaitingAction.cs,WaitingAction,The following statement contains a magic number: this.Expiration = DateTime.Now.AddSeconds (10);  
Magic Number,Potato.Net.Shared.Actions.Deferred,WaitingActions,D:\newReposJune17\phogue_Potato\src\Potato.Net.Shared\Actions\Deferred\WaitingActions.cs,Wait,The following statement contains a magic number: this.Waiting.TryAdd (action.Uid' new WaitingAction () {  	Action = action'  	Requests = new List<IPacket> (requests)'  	Expiration = expiration ?? DateTime.Now.AddSeconds (10)  });  
Magic Number,Potato.Net.Shared.Geolocation.Maxmind,CountryLookup,D:\newReposJune17\phogue_Potato\src\Potato.Net.Shared\Geolocation\Maxmind\CountryLookup.cs,addrToNum,The following statement contains a magic number: for (int i = 0; i < 4; ++i) {  	long y = b [i];  	if (y < 0) {  		y += 256;  	}  	ipnum += y << ((3 - i) * 8);  }  
Magic Number,Potato.Net.Shared.Geolocation.Maxmind,CountryLookup,D:\newReposJune17\phogue_Potato\src\Potato.Net.Shared\Geolocation\Maxmind\CountryLookup.cs,addrToNum,The following statement contains a magic number: for (int i = 0; i < 4; ++i) {  	long y = b [i];  	if (y < 0) {  		y += 256;  	}  	ipnum += y << ((3 - i) * 8);  }  
Magic Number,Potato.Net.Shared.Geolocation.Maxmind,CountryLookup,D:\newReposJune17\phogue_Potato\src\Potato.Net.Shared\Geolocation\Maxmind\CountryLookup.cs,addrToNum,The following statement contains a magic number: for (int i = 0; i < 4; ++i) {  	long y = b [i];  	if (y < 0) {  		y += 256;  	}  	ipnum += y << ((3 - i) * 8);  }  
Magic Number,Potato.Net.Shared.Geolocation.Maxmind,CountryLookup,D:\newReposJune17\phogue_Potato\src\Potato.Net.Shared\Geolocation\Maxmind\CountryLookup.cs,addrToNum,The following statement contains a magic number: for (int i = 0; i < 4; ++i) {  	long y = b [i];  	if (y < 0) {  		y += 256;  	}  	ipnum += y << ((3 - i) * 8);  }  
Magic Number,Potato.Net.Shared.Geolocation.Maxmind,CountryLookup,D:\newReposJune17\phogue_Potato\src\Potato.Net.Shared\Geolocation\Maxmind\CountryLookup.cs,addrToNum,The following statement contains a magic number: if (y < 0) {  	y += 256;  }  
Magic Number,Potato.Net.Shared.Geolocation.Maxmind,CountryLookup,D:\newReposJune17\phogue_Potato\src\Potato.Net.Shared\Geolocation\Maxmind\CountryLookup.cs,addrToNum,The following statement contains a magic number: y += 256;  
Magic Number,Potato.Net.Shared.Geolocation.Maxmind,CountryLookup,D:\newReposJune17\phogue_Potato\src\Potato.Net.Shared\Geolocation\Maxmind\CountryLookup.cs,addrToNum,The following statement contains a magic number: ipnum += y << ((3 - i) * 8);  
Magic Number,Potato.Net.Shared.Geolocation.Maxmind,CountryLookup,D:\newReposJune17\phogue_Potato\src\Potato.Net.Shared\Geolocation\Maxmind\CountryLookup.cs,addrToNum,The following statement contains a magic number: ipnum += y << ((3 - i) * 8);  
Magic Number,Potato.Net.Shared.Geolocation.Maxmind,CountryLookup,D:\newReposJune17\phogue_Potato\src\Potato.Net.Shared\Geolocation\Maxmind\CountryLookup.cs,lookupCountryCode,The following statement contains a magic number: lock (this) {  	lookupCountryCode = "" + (countryCode [(int)seekCountry (0' addrToNum (addr)' 31)]);  }  
Magic Number,Potato.Net.Shared.Geolocation.Maxmind,CountryLookup,D:\newReposJune17\phogue_Potato\src\Potato.Net.Shared\Geolocation\Maxmind\CountryLookup.cs,lookupCountryCode,The following statement contains a magic number: lookupCountryCode = "" + (countryCode [(int)seekCountry (0' addrToNum (addr)' 31)]);  
Magic Number,Potato.Net.Shared.Geolocation.Maxmind,CountryLookup,D:\newReposJune17\phogue_Potato\src\Potato.Net.Shared\Geolocation\Maxmind\CountryLookup.cs,lookupCountryName,The following statement contains a magic number: return (countryName [(int)seekCountry (0' addrToNum (addr)' 31)]);  
Magic Number,Potato.Net.Shared.Geolocation.Maxmind,CountryLookup,D:\newReposJune17\phogue_Potato\src\Potato.Net.Shared\Geolocation\Maxmind\CountryLookup.cs,seekCountry,The following statement contains a magic number: try {  	fileInput.Seek (6 * offset' 0);  	fileInput.Read (buf' 0' 6);  } catch (IOException e) {  	Console.WriteLine ("IO Exception");  }  
Magic Number,Potato.Net.Shared.Geolocation.Maxmind,CountryLookup,D:\newReposJune17\phogue_Potato\src\Potato.Net.Shared\Geolocation\Maxmind\CountryLookup.cs,seekCountry,The following statement contains a magic number: try {  	fileInput.Seek (6 * offset' 0);  	fileInput.Read (buf' 0' 6);  } catch (IOException e) {  	Console.WriteLine ("IO Exception");  }  
Magic Number,Potato.Net.Shared.Geolocation.Maxmind,CountryLookup,D:\newReposJune17\phogue_Potato\src\Potato.Net.Shared\Geolocation\Maxmind\CountryLookup.cs,seekCountry,The following statement contains a magic number: fileInput.Seek (6 * offset' 0);  
Magic Number,Potato.Net.Shared.Geolocation.Maxmind,CountryLookup,D:\newReposJune17\phogue_Potato\src\Potato.Net.Shared\Geolocation\Maxmind\CountryLookup.cs,seekCountry,The following statement contains a magic number: fileInput.Read (buf' 0' 6);  
Magic Number,Potato.Net.Shared.Geolocation.Maxmind,CountryLookup,D:\newReposJune17\phogue_Potato\src\Potato.Net.Shared\Geolocation\Maxmind\CountryLookup.cs,seekCountry,The following statement contains a magic number: for (int i = 0; i < 2; i++) {  	x [i] = 0;  	for (int j = 0; j < 3; j++) {  		int y = buf [i * 3 + j];  		if (y < 0) {  			y += 256;  		}  		x [i] += (y << (j * 8));  	}  }  
Magic Number,Potato.Net.Shared.Geolocation.Maxmind,CountryLookup,D:\newReposJune17\phogue_Potato\src\Potato.Net.Shared\Geolocation\Maxmind\CountryLookup.cs,seekCountry,The following statement contains a magic number: for (int i = 0; i < 2; i++) {  	x [i] = 0;  	for (int j = 0; j < 3; j++) {  		int y = buf [i * 3 + j];  		if (y < 0) {  			y += 256;  		}  		x [i] += (y << (j * 8));  	}  }  
Magic Number,Potato.Net.Shared.Geolocation.Maxmind,CountryLookup,D:\newReposJune17\phogue_Potato\src\Potato.Net.Shared\Geolocation\Maxmind\CountryLookup.cs,seekCountry,The following statement contains a magic number: for (int i = 0; i < 2; i++) {  	x [i] = 0;  	for (int j = 0; j < 3; j++) {  		int y = buf [i * 3 + j];  		if (y < 0) {  			y += 256;  		}  		x [i] += (y << (j * 8));  	}  }  
Magic Number,Potato.Net.Shared.Geolocation.Maxmind,CountryLookup,D:\newReposJune17\phogue_Potato\src\Potato.Net.Shared\Geolocation\Maxmind\CountryLookup.cs,seekCountry,The following statement contains a magic number: for (int i = 0; i < 2; i++) {  	x [i] = 0;  	for (int j = 0; j < 3; j++) {  		int y = buf [i * 3 + j];  		if (y < 0) {  			y += 256;  		}  		x [i] += (y << (j * 8));  	}  }  
Magic Number,Potato.Net.Shared.Geolocation.Maxmind,CountryLookup,D:\newReposJune17\phogue_Potato\src\Potato.Net.Shared\Geolocation\Maxmind\CountryLookup.cs,seekCountry,The following statement contains a magic number: for (int i = 0; i < 2; i++) {  	x [i] = 0;  	for (int j = 0; j < 3; j++) {  		int y = buf [i * 3 + j];  		if (y < 0) {  			y += 256;  		}  		x [i] += (y << (j * 8));  	}  }  
Magic Number,Potato.Net.Shared.Geolocation.Maxmind,CountryLookup,D:\newReposJune17\phogue_Potato\src\Potato.Net.Shared\Geolocation\Maxmind\CountryLookup.cs,seekCountry,The following statement contains a magic number: for (int j = 0; j < 3; j++) {  	int y = buf [i * 3 + j];  	if (y < 0) {  		y += 256;  	}  	x [i] += (y << (j * 8));  }  
Magic Number,Potato.Net.Shared.Geolocation.Maxmind,CountryLookup,D:\newReposJune17\phogue_Potato\src\Potato.Net.Shared\Geolocation\Maxmind\CountryLookup.cs,seekCountry,The following statement contains a magic number: for (int j = 0; j < 3; j++) {  	int y = buf [i * 3 + j];  	if (y < 0) {  		y += 256;  	}  	x [i] += (y << (j * 8));  }  
Magic Number,Potato.Net.Shared.Geolocation.Maxmind,CountryLookup,D:\newReposJune17\phogue_Potato\src\Potato.Net.Shared\Geolocation\Maxmind\CountryLookup.cs,seekCountry,The following statement contains a magic number: for (int j = 0; j < 3; j++) {  	int y = buf [i * 3 + j];  	if (y < 0) {  		y += 256;  	}  	x [i] += (y << (j * 8));  }  
Magic Number,Potato.Net.Shared.Geolocation.Maxmind,CountryLookup,D:\newReposJune17\phogue_Potato\src\Potato.Net.Shared\Geolocation\Maxmind\CountryLookup.cs,seekCountry,The following statement contains a magic number: for (int j = 0; j < 3; j++) {  	int y = buf [i * 3 + j];  	if (y < 0) {  		y += 256;  	}  	x [i] += (y << (j * 8));  }  
Magic Number,Potato.Net.Shared.Geolocation.Maxmind,CountryLookup,D:\newReposJune17\phogue_Potato\src\Potato.Net.Shared\Geolocation\Maxmind\CountryLookup.cs,seekCountry,The following statement contains a magic number: if (y < 0) {  	y += 256;  }  
Magic Number,Potato.Net.Shared.Geolocation.Maxmind,CountryLookup,D:\newReposJune17\phogue_Potato\src\Potato.Net.Shared\Geolocation\Maxmind\CountryLookup.cs,seekCountry,The following statement contains a magic number: y += 256;  
Magic Number,Potato.Net.Shared.Geolocation.Maxmind,CountryLookup,D:\newReposJune17\phogue_Potato\src\Potato.Net.Shared\Geolocation\Maxmind\CountryLookup.cs,seekCountry,The following statement contains a magic number: x [i] += (y << (j * 8));  
Missing Default,Potato.Net.Shared,Protocol,D:\newReposJune17\phogue_Potato\src\Potato.Net.Shared\Protocol.cs,DispatchAction,The following switch statement is missing a default case: switch (action.ActionType) {  case NetworkActionType.NetworkTextSay:  case NetworkActionType.NetworkTextYell:  case NetworkActionType.NetworkTextYellOnly:  	wrappers = this.ActionChat (action);  	break;  case NetworkActionType.NetworkPlayerKill:  	wrappers = this.ActionKill (action);  	break;  case NetworkActionType.NetworkPlayerKick:  	wrappers = this.ActionKick (action);  	break;  case NetworkActionType.NetworkPlayerBan:  case NetworkActionType.NetworkPlayerUnban:  	wrappers = this.ActionBan (action);  	break;  case NetworkActionType.NetworkMapAppend:  case NetworkActionType.NetworkMapChangeMode:  case NetworkActionType.NetworkMapClear:  case NetworkActionType.NetworkMapInsert:  case NetworkActionType.NetworkMapNext:  case NetworkActionType.NetworkMapNextIndex:  case NetworkActionType.NetworkMapRemove:  case NetworkActionType.NetworkMapRemoveIndex:  case NetworkActionType.NetworkMapRestart:  case NetworkActionType.NetworkMapRoundNext:  case NetworkActionType.NetworkMapRoundRestart:  	wrappers = this.ActionMap (action);  	break;  case NetworkActionType.NetworkPlayerMoveRotate:  case NetworkActionType.NetworkPlayerMoveRotateForce:  case NetworkActionType.NetworkPlayerMove:  case NetworkActionType.NetworkPlayerMoveForce:  	wrappers = this.ActionMove (action);  	break;  case NetworkActionType.NetworkPacketSend:  	if (action.Now.Content != null) {  		wrappers.AddRange (action.Now.Content.Select (text => this.CreatePacket (text)));  	}  	if (action.Now.Packets != null) {  		wrappers.AddRange (action.Now.Packets.Select (this.WrapPacket));  	}  	break;  }  
