Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Torch.Core.Dependencies,DirectoryDependency,C:\repos\AK1986_Torch\Torch.Core.Dependencies\DirectoryDependency.cs,Check,Cyclomatic complexity of the method is 12
Complex Method,Torch.Core.Dependencies,FileDependency,C:\repos\AK1986_Torch\Torch.Core.Dependencies\FileDependency.cs,Check,Cyclomatic complexity of the method is 13
Complex Method,Torch.Core.Dependencies,NetFrameworkDepedency,C:\repos\AK1986_Torch\Torch.Core.Dependencies\NetFrameworkDepedency.cs,GetVersionFromRegistry,Cyclomatic complexity of the method is 15
Complex Method,Torch.Core.Dependencies,NetFrameworkDepedency,C:\repos\AK1986_Torch\Torch.Core.Dependencies\NetFrameworkDepedency.cs,Check,Cyclomatic complexity of the method is 8
Complex Method,Torch.Core.Dependencies,WindowsServiceDependency,C:\repos\AK1986_Torch\Torch.Core.Dependencies\WindowsServiceDependency.cs,Check,Cyclomatic complexity of the method is 32
Complex Method,Torch.Core.Dependencies,WindowsServiceDependency,C:\repos\AK1986_Torch\Torch.Core.Dependencies\WindowsServiceDependency.cs,getMappedStatus,Cyclomatic complexity of the method is 15
Long Parameter List,Torch.Core.Dependencies,WindowsServiceDependency,C:\repos\AK1986_Torch\Torch.Core.Dependencies\WindowsServiceDependency.cs,WindowsServiceDependency,The method has 5 parameters.
Long Statement,Torch.Core.Dependencies,InternetConnectionDepedency,C:\repos\AK1986_Torch\Torch.Core.Dependencies\InternetConnectionDepedency.cs,Check,The length of the statement  "		bool success = google.Check ().Status == DependencyStatus.Success && yahoo.Check ().Status == DependencyStatus.Success && microsoft.Check ().Status == DependencyStatus.Success; " is 176.
Long Statement,Torch.Core.Dependencies,NetFrameworkDepedency,C:\repos\AK1986_Torch\Torch.Core.Dependencies\NetFrameworkDepedency.cs,GetVersionFromRegistry,The length of the statement  "	using (RegistryKey ndpKey = RegistryKey.OpenRemoteBaseKey (RegistryHive.LocalMachine' "").OpenSubKey (@"SOFTWARE\Microsoft\NET Framework Setup\NDP\")) { " is 152.
Long Statement,Torch.Core.Dependencies,PowerShellDependency,C:\repos\AK1986_Torch\Torch.Core.Dependencies\PowerShellDependency.cs,PowershellExists,The length of the statement  "	string regval = Microsoft.Win32.Registry.GetValue (@"HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\PowerShell\1"' "Install"' null).ToString (); " is 135.
Long Statement,Torch.Core.Dependencies,PowerShellDependency,C:\repos\AK1986_Torch\Torch.Core.Dependencies\PowerShellDependency.cs,PowershellExists,The length of the statement  "		version = Microsoft.Win32.Registry.GetValue (@"HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\PowerShell\1\PowerShellEngine"' "PowerShellVersion"' null).ToString (); " is 156.
Magic Number,Torch.Core.Dependencies,WebResourceDependency,C:\repos\AK1986_Torch\Torch.Core.Dependencies\WebResourceDependency.cs,Check,The following statement contains a magic number: try {  	var request = WebRequest.Create (_url);  	request.Timeout = _timeout * 1000;  	var response = request.GetResponse () as HttpWebResponse;  	if (response != null) {  		if (predicate == null) {  			result.Status = response.StatusCode == HttpStatusCode.OK ? DependencyStatus.Success : DependencyStatus.Failure;  		}  		else {  			var streamReader = new StreamReader (response.GetResponseStream ());  			var content = streamReader.ReadToEnd ();  			if (predicate (content)) {  				result.Status = DependencyStatus.Success;  			}  			else {  				result.Status = DependencyStatus.Failure;  				result.Message = "Expected content not found in web resource";  			}  		}  	}  }  catch (Exception ex) {  	result.Status = DependencyStatus.Failure;  	result.Message = ex.Message;  	result.Exception = ex;  }  
Magic Number,Torch.Core.Dependencies,WebResourceDependency,C:\repos\AK1986_Torch\Torch.Core.Dependencies\WebResourceDependency.cs,Check,The following statement contains a magic number: request.Timeout = _timeout * 1000;  
Missing Default,Torch.Core.Dependencies,WindowsServiceDependency,C:\repos\AK1986_Torch\Torch.Core.Dependencies\WindowsServiceDependency.cs,getMappedStatus,The following switch statement is missing a default case: switch (status) {  case WindowsServiceStatus.Paused:  	result = ServiceControllerStatus.Paused;  	break;  case WindowsServiceStatus.Running:  	result = ServiceControllerStatus.Running;  	break;  case WindowsServiceStatus.Starting:  	result = ServiceControllerStatus.StartPending;  	break;  case WindowsServiceStatus.Stopped:  	result = ServiceControllerStatus.Stopped;  	break;  case WindowsServiceStatus.Stopping:  	result = ServiceControllerStatus.StopPending;  	break;  }  
