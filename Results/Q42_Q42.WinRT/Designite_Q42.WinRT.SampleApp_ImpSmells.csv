Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Q42.WinRT.SampleApp.Common,RichTextColumns,C:\repos\Q42_Q42.WinRT\Q42.WinRT.SampleApp\Common\RichTextColumns.cs,MeasureOverride,Cyclomatic complexity of the method is 8
Long Statement,Q42.WinRT.SampleApp.Common,SuspensionManager,C:\repos\Q42_Q42.WinRT\Q42.WinRT.SampleApp\Common\SuspensionManager.cs,SaveAsync,The length of the statement  "            StorageFile file = await ApplicationData.Current.LocalFolder.CreateFileAsync(sessionStateFilename' CreationCollisionOption.ReplaceExisting); " is 140.
Long Statement,Q42.WinRT.SampleApp.Common,SuspensionManager,C:\repos\Q42_Q42.WinRT\Q42.WinRT.SampleApp\Common\SuspensionManager.cs,RegisterFrame,The length of the statement  "                throw new InvalidOperationException("Frames must be either be registered before accessing frame session state' or not registered at all"); " is 138.
Long Statement,Q42.WinRT.SampleApp.ViewModel,DataExampleViewModel,C:\repos\Q42_Q42.WinRT\Q42.WinRT.SampleApp\ViewModel\DataExampleViewModel.cs,CacheWithExceptionAction,The length of the statement  "            string result = await CacheWithExceptionDataLoader.LoadAsync(() => DataCache.GetAsync("samplekey_exception"' () => LongRunningOperationWithException()' expireDate: DateTime.Now.AddDays(1))); " is 190.
Long Statement,Q42.WinRT.SampleApp.ViewModel,DataExampleViewModel,C:\repos\Q42_Q42.WinRT\Q42.WinRT.SampleApp\ViewModel\DataExampleViewModel.cs,SourceABAction,The length of the statement  "            SourceABDataLoader.LoadCacheThenRefreshAsync(() => LongRunningOperation("first result")' () => LongRunningOperation("refresh result")' x => " is 139.
Long Statement,Q42.WinRT.SampleApp.ViewModel,DataExampleViewModel,C:\repos\Q42_Q42.WinRT\Q42.WinRT.SampleApp\ViewModel\DataExampleViewModel.cs,FailCacheAction,The length of the statement  "            FailCacheDataLoader.LoadFallbackToCacheAsync(() => LongRunningOperationWithException()' () => LongRunningOperation("source B result")' x => " is 139.
Long Statement,Q42.WinRT.SampleApp.ViewModel,DataExampleViewModel,C:\repos\Q42_Q42.WinRT\Q42.WinRT.SampleApp\ViewModel\DataExampleViewModel.cs,FailCacheSuccessAction,The length of the statement  "            FailCacheSuccessDataLoader.LoadFallbackToCacheAsync(() => LongRunningOperation("source A result")' () => LongRunningOperation("source B result")' x => " is 150.
Long Statement,Q42.WinRT.SampleApp.ViewModel,DataExampleViewModel,C:\repos\Q42_Q42.WinRT\Q42.WinRT.SampleApp\ViewModel\DataExampleViewModel.cs,CacheRefreshAction,The length of the statement  "            CacheRefreshDataLoader.LoadCacheThenRefreshAsync(() => DataCache.GetFromCache<string>("key6")' () => DataCache.GetAsync("key6"' () => LongRunningOperation(DateTime.Now.Second.ToString())' expireDate: DateTime.Now.AddDays(1)' forceRefresh: true)' x => " is 250.
Complex Conditional,Q42.WinRT.SampleApp.Common,LayoutAwarePage,C:\repos\Q42_Q42.WinRT\Q42.WinRT.SampleApp\Common\LayoutAwarePage.cs,CoreDispatcher_AcceleratorKeyActivated,The conditional expression  "(args.EventType == CoreAcceleratorKeyEventType.SystemKeyDown ||                  args.EventType == CoreAcceleratorKeyEventType.KeyDown) &&                  (virtualKey == VirtualKey.Left || virtualKey == VirtualKey.Right ||                  (int)virtualKey == 166 || (int)virtualKey == 167)"  is complex.
Complex Conditional,Q42.WinRT.SampleApp.Common,LayoutAwarePage,C:\repos\Q42_Q42.WinRT\Q42.WinRT.SampleApp\Common\LayoutAwarePage.cs,CoreDispatcher_AcceleratorKeyActivated,The conditional expression  "((int)virtualKey == 166 && noModifiers) ||                      (virtualKey == VirtualKey.Left && onlyAlt)"  is complex.
Complex Conditional,Q42.WinRT.SampleApp.Common,LayoutAwarePage,C:\repos\Q42_Q42.WinRT\Q42.WinRT.SampleApp\Common\LayoutAwarePage.cs,CoreDispatcher_AcceleratorKeyActivated,The conditional expression  "((int)virtualKey == 167 && noModifiers) ||                      (virtualKey == VirtualKey.Right && onlyAlt)"  is complex.
Magic Number,Q42.WinRT.SampleApp.Common,LayoutAwarePage,C:\repos\Q42_Q42.WinRT\Q42.WinRT.SampleApp\Common\LayoutAwarePage.cs,CoreDispatcher_AcceleratorKeyActivated,The following statement contains a magic number: if ((args.EventType == CoreAcceleratorKeyEventType.SystemKeyDown ||                  args.EventType == CoreAcceleratorKeyEventType.KeyDown) &&                  (virtualKey == VirtualKey.Left || virtualKey == VirtualKey.Right ||                  (int)virtualKey == 166 || (int)virtualKey == 167))              {                  var coreWindow = Window.Current.CoreWindow;                  var downState = CoreVirtualKeyStates.Down;                  bool menuKey = (coreWindow.GetKeyState(VirtualKey.Menu) & downState) == downState;                  bool controlKey = (coreWindow.GetKeyState(VirtualKey.Control) & downState) == downState;                  bool shiftKey = (coreWindow.GetKeyState(VirtualKey.Shift) & downState) == downState;                  bool noModifiers = !menuKey && !controlKey && !shiftKey;                  bool onlyAlt = menuKey && !controlKey && !shiftKey;                    if (((int)virtualKey == 166 && noModifiers) ||                      (virtualKey == VirtualKey.Left && onlyAlt))                  {                      // When the previous key or Alt+Left are pressed navigate back                      args.Handled = true;                      this.GoBack(this' new RoutedEventArgs());                  }                  else if (((int)virtualKey == 167 && noModifiers) ||                      (virtualKey == VirtualKey.Right && onlyAlt))                  {                      // When the next key or Alt+Right are pressed navigate forward                      args.Handled = true;                      this.GoForward(this' new RoutedEventArgs());                  }              }
Magic Number,Q42.WinRT.SampleApp.Common,LayoutAwarePage,C:\repos\Q42_Q42.WinRT\Q42.WinRT.SampleApp\Common\LayoutAwarePage.cs,CoreDispatcher_AcceleratorKeyActivated,The following statement contains a magic number: if ((args.EventType == CoreAcceleratorKeyEventType.SystemKeyDown ||                  args.EventType == CoreAcceleratorKeyEventType.KeyDown) &&                  (virtualKey == VirtualKey.Left || virtualKey == VirtualKey.Right ||                  (int)virtualKey == 166 || (int)virtualKey == 167))              {                  var coreWindow = Window.Current.CoreWindow;                  var downState = CoreVirtualKeyStates.Down;                  bool menuKey = (coreWindow.GetKeyState(VirtualKey.Menu) & downState) == downState;                  bool controlKey = (coreWindow.GetKeyState(VirtualKey.Control) & downState) == downState;                  bool shiftKey = (coreWindow.GetKeyState(VirtualKey.Shift) & downState) == downState;                  bool noModifiers = !menuKey && !controlKey && !shiftKey;                  bool onlyAlt = menuKey && !controlKey && !shiftKey;                    if (((int)virtualKey == 166 && noModifiers) ||                      (virtualKey == VirtualKey.Left && onlyAlt))                  {                      // When the previous key or Alt+Left are pressed navigate back                      args.Handled = true;                      this.GoBack(this' new RoutedEventArgs());                  }                  else if (((int)virtualKey == 167 && noModifiers) ||                      (virtualKey == VirtualKey.Right && onlyAlt))                  {                      // When the next key or Alt+Right are pressed navigate forward                      args.Handled = true;                      this.GoForward(this' new RoutedEventArgs());                  }              }
Magic Number,Q42.WinRT.SampleApp.Common,LayoutAwarePage,C:\repos\Q42_Q42.WinRT\Q42.WinRT.SampleApp\Common\LayoutAwarePage.cs,CoreDispatcher_AcceleratorKeyActivated,The following statement contains a magic number: if ((args.EventType == CoreAcceleratorKeyEventType.SystemKeyDown ||                  args.EventType == CoreAcceleratorKeyEventType.KeyDown) &&                  (virtualKey == VirtualKey.Left || virtualKey == VirtualKey.Right ||                  (int)virtualKey == 166 || (int)virtualKey == 167))              {                  var coreWindow = Window.Current.CoreWindow;                  var downState = CoreVirtualKeyStates.Down;                  bool menuKey = (coreWindow.GetKeyState(VirtualKey.Menu) & downState) == downState;                  bool controlKey = (coreWindow.GetKeyState(VirtualKey.Control) & downState) == downState;                  bool shiftKey = (coreWindow.GetKeyState(VirtualKey.Shift) & downState) == downState;                  bool noModifiers = !menuKey && !controlKey && !shiftKey;                  bool onlyAlt = menuKey && !controlKey && !shiftKey;                    if (((int)virtualKey == 166 && noModifiers) ||                      (virtualKey == VirtualKey.Left && onlyAlt))                  {                      // When the previous key or Alt+Left are pressed navigate back                      args.Handled = true;                      this.GoBack(this' new RoutedEventArgs());                  }                  else if (((int)virtualKey == 167 && noModifiers) ||                      (virtualKey == VirtualKey.Right && onlyAlt))                  {                      // When the next key or Alt+Right are pressed navigate forward                      args.Handled = true;                      this.GoForward(this' new RoutedEventArgs());                  }              }
Magic Number,Q42.WinRT.SampleApp.Common,LayoutAwarePage,C:\repos\Q42_Q42.WinRT\Q42.WinRT.SampleApp\Common\LayoutAwarePage.cs,CoreDispatcher_AcceleratorKeyActivated,The following statement contains a magic number: if ((args.EventType == CoreAcceleratorKeyEventType.SystemKeyDown ||                  args.EventType == CoreAcceleratorKeyEventType.KeyDown) &&                  (virtualKey == VirtualKey.Left || virtualKey == VirtualKey.Right ||                  (int)virtualKey == 166 || (int)virtualKey == 167))              {                  var coreWindow = Window.Current.CoreWindow;                  var downState = CoreVirtualKeyStates.Down;                  bool menuKey = (coreWindow.GetKeyState(VirtualKey.Menu) & downState) == downState;                  bool controlKey = (coreWindow.GetKeyState(VirtualKey.Control) & downState) == downState;                  bool shiftKey = (coreWindow.GetKeyState(VirtualKey.Shift) & downState) == downState;                  bool noModifiers = !menuKey && !controlKey && !shiftKey;                  bool onlyAlt = menuKey && !controlKey && !shiftKey;                    if (((int)virtualKey == 166 && noModifiers) ||                      (virtualKey == VirtualKey.Left && onlyAlt))                  {                      // When the previous key or Alt+Left are pressed navigate back                      args.Handled = true;                      this.GoBack(this' new RoutedEventArgs());                  }                  else if (((int)virtualKey == 167 && noModifiers) ||                      (virtualKey == VirtualKey.Right && onlyAlt))                  {                      // When the next key or Alt+Right are pressed navigate forward                      args.Handled = true;                      this.GoForward(this' new RoutedEventArgs());                  }              }
Magic Number,Q42.WinRT.SampleApp.ViewModel,ConvertersExampleViewModel,C:\repos\Q42_Q42.WinRT\Q42.WinRT.SampleApp\ViewModel\ConvertersExampleViewModel.cs,ToggleCommandAction,The following statement contains a magic number: if (BoolProp)              {                  BoolProp = false;                  ObjectProp = null;                  StringProp = string.Empty;                  IntProp = 0;              }              else              {                  BoolProp = true;                  ObjectProp = new object();                  StringProp = "test";                  IntProp = 5;              }
Magic Number,Q42.WinRT.SampleApp.ViewModel,DataExampleViewModel,C:\repos\Q42_Q42.WinRT\Q42.WinRT.SampleApp\ViewModel\DataExampleViewModel.cs,LongRunningOperation,The following statement contains a magic number: await Task.Delay(2000);
Magic Number,Q42.WinRT.SampleApp.ViewModel,DataExampleViewModel,C:\repos\Q42_Q42.WinRT\Q42.WinRT.SampleApp\ViewModel\DataExampleViewModel.cs,LongRunningOperation,The following statement contains a magic number: await Task.Delay(2000);
Magic Number,Q42.WinRT.SampleApp.ViewModel,DataExampleViewModel,C:\repos\Q42_Q42.WinRT\Q42.WinRT.SampleApp\ViewModel\DataExampleViewModel.cs,LongRunningOperationWithException,The following statement contains a magic number: await Task.Delay(2000);
Magic Number,Q42.WinRT.SampleApp.ViewModel,StorageExampleViewModel,C:\repos\Q42_Q42.WinRT\Q42.WinRT.SampleApp\ViewModel\StorageExampleViewModel.cs,StorageExampleViewModel,The following statement contains a magic number: _myList.Add(new MyModel() { Name = "Michiel"' Age = 29 });
Magic Number,Q42.WinRT.SampleApp.ViewModel,StorageExampleViewModel,C:\repos\Q42_Q42.WinRT\Q42.WinRT.SampleApp\ViewModel\StorageExampleViewModel.cs,StorageExampleViewModel,The following statement contains a magic number: _myList.Add(new MyModel() { Name = "Aa"' Age = 3 });
Magic Number,Q42.WinRT.SampleApp.ViewModel,StorageExampleViewModel,C:\repos\Q42_Q42.WinRT\Q42.WinRT.SampleApp\ViewModel\StorageExampleViewModel.cs,StorageExampleViewModel,The following statement contains a magic number: _myList.Add(new MyModel() { Name = "Bb"' Age = 4 });
Magic Number,Q42.WinRT.SampleApp.ViewModel,StorageExampleViewModel,C:\repos\Q42_Q42.WinRT\Q42.WinRT.SampleApp\ViewModel\StorageExampleViewModel.cs,StorageExampleViewModel,The following statement contains a magic number: _myList.Add(new MyModel() { Name = "CC"' Age = 6 });
Magic Number,Q42.WinRT.SampleApp.ViewModel,StorageExampleViewModel,C:\repos\Q42_Q42.WinRT\Q42.WinRT.SampleApp\ViewModel\StorageExampleViewModel.cs,StorageExampleViewModel,The following statement contains a magic number: _myList.Add(new MyModel() { Name = "dd"' Age = 88 });
Magic Number,Q42.WinRT.SampleApp.ViewModel,StorageExampleViewModel,C:\repos\Q42_Q42.WinRT\Q42.WinRT.SampleApp\ViewModel\StorageExampleViewModel.cs,StorageExampleViewModel,The following statement contains a magic number: _myList.Add(new MyModel() { Name = "ee"' Age = 50 });
Magic Number,Q42.WinRT.SampleApp.ViewModel,StorageExampleViewModel,C:\repos\Q42_Q42.WinRT\Q42.WinRT.SampleApp\ViewModel\StorageExampleViewModel.cs,StorageExampleViewModel,The following statement contains a magic number: _myList.Add(new MyModel() { Name = "ff"' Age = 15 });
Magic Number,Q42.WinRT.SampleApp.Views,ControlsExamplePage,C:\repos\Q42_Q42.WinRT\Q42.WinRT.SampleApp\Views\ControlsExamplePage.xaml.cs,AddButton_Click_1,The following statement contains a magic number: border.Margin = new Thickness(5);
Magic Number,Q42.WinRT.SampleApp.Views,ControlsExamplePage,C:\repos\Q42_Q42.WinRT\Q42.WinRT.SampleApp\Views\ControlsExamplePage.xaml.cs,RandomSize,The following statement contains a magic number: int size = _random.Next(100);
Magic Number,Q42.WinRT.SampleApp.Views,ControlsExamplePage,C:\repos\Q42_Q42.WinRT\Q42.WinRT.SampleApp\Views\ControlsExamplePage.xaml.cs,RandomSize,The following statement contains a magic number: return 40 + size;
