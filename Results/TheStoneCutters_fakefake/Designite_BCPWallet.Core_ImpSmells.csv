Implementation smell,Namespace,Class,File,Method,Description
Complex Method,BCPWallet.Core.Models.Services,ServiceOfProducts,C:\repos\TheStoneCutters_fakefake\BCPWallet.Core\Models\Services\ServiceOfProducts.cs,GetProduts,Cyclomatic complexity of the method is 23
Long Statement,BCPWallet.Core.Models.Services,ServiceOfProducts,C:\repos\TheStoneCutters_fakefake\BCPWallet.Core\Models\Services\ServiceOfProducts.cs,GetProduts,The length of the statement  "	url = URLS.base_url + type + Parameters.auth_token_parameters + Claves.auth_token + Parameters.private_token_parameter + Claves.private_token + extra_parameter + extra_card; " is 173.
Long Statement,BCPWallet.Core.Models.Services,ServiceOfUser,C:\repos\TheStoneCutters_fakefake\BCPWallet.Core\Models\Services\ServiceOfUser.cs,GetUser,The length of the statement  "	url = URLS.base_url + URLS.user_info_url + Parameters.auth_token_parameters + Claves.auth_token + Parameters.user_parameter + user + Parameters.pwd_parameter + pwd; " is 164.
Empty Catch Block,BCPWallet.Core.Models.Common.ClassesStatics,Estados,C:\repos\TheStoneCutters_fakefake\BCPWallet.Core\Models\Common\ClassesStatics\Estados.cs,Mensaje,The method has an empty catch block.
Empty Catch Block,BCPWallet.Core.Models.Common.ClassesStatics,Estados,C:\repos\TheStoneCutters_fakefake\BCPWallet.Core\Models\Common\ClassesStatics\Estados.cs,Mensaje,The method has an empty catch block.
Magic Number,BCPWallet.Core.Models.Common.ClassesStatics,Manager,C:\repos\TheStoneCutters_fakefake\BCPWallet.Core\Models\Common\ClassesStatics\Manager.cs,GetAccounts,The following statement contains a magic number: try {  	ObservableCollection<Product> prod = new ObservableCollection<Product> ();  	var xcuentas = await ServiceOfProducts.GetProduts (6' "");  	Claves.Ctas = new ObservableCollection<Product> ();  	Claves.Ctas = xcuentas;  	foreach (var item in xcuentas) {  		if (item.account_type.Equals ("CC")) {  			item.type = "Cuenta Corriente";  		}  		else {  			item.type = "Cuenta de Ahorro";  		}  		prod.Add (item);  	}  	return prod;  }  catch (Exception) {  	return null;  }  
Magic Number,BCPWallet.Core.Models.Services,ServiceOfProducts,C:\repos\TheStoneCutters_fakefake\BCPWallet.Core\Models\Services\ServiceOfProducts.cs,GetProduts,The following statement contains a magic number: switch (i) {  case 0:  	type += "checking_accounts";  	break;  case 1:  	type += "saving_accounts";  	break;  case 2:  	type += "favourite_accounts";  	break;  case 3:  	type += "credit_cards";  	break;  case 4:  	type += "loans";  	break;  case 5:  	type += "cards";  	extra_parameter = "&action_type=";  	extra_card = action;  	break;  default:  	type = "/user/accounts";  	break;  }  
Magic Number,BCPWallet.Core.Models.Services,ServiceOfProducts,C:\repos\TheStoneCutters_fakefake\BCPWallet.Core\Models\Services\ServiceOfProducts.cs,GetProduts,The following statement contains a magic number: switch (i) {  case 0:  	type += "checking_accounts";  	break;  case 1:  	type += "saving_accounts";  	break;  case 2:  	type += "favourite_accounts";  	break;  case 3:  	type += "credit_cards";  	break;  case 4:  	type += "loans";  	break;  case 5:  	type += "cards";  	extra_parameter = "&action_type=";  	extra_card = action;  	break;  default:  	type = "/user/accounts";  	break;  }  
Magic Number,BCPWallet.Core.Models.Services,ServiceOfProducts,C:\repos\TheStoneCutters_fakefake\BCPWallet.Core\Models\Services\ServiceOfProducts.cs,GetProduts,The following statement contains a magic number: switch (i) {  case 0:  	type += "checking_accounts";  	break;  case 1:  	type += "saving_accounts";  	break;  case 2:  	type += "favourite_accounts";  	break;  case 3:  	type += "credit_cards";  	break;  case 4:  	type += "loans";  	break;  case 5:  	type += "cards";  	extra_parameter = "&action_type=";  	extra_card = action;  	break;  default:  	type = "/user/accounts";  	break;  }  
Magic Number,BCPWallet.Core.Models.Services,ServiceOfProducts,C:\repos\TheStoneCutters_fakefake\BCPWallet.Core\Models\Services\ServiceOfProducts.cs,GetProduts,The following statement contains a magic number: switch (i) {  case 0:  	type += "checking_accounts";  	break;  case 1:  	type += "saving_accounts";  	break;  case 2:  	type += "favourite_accounts";  	break;  case 3:  	type += "credit_cards";  	break;  case 4:  	type += "loans";  	break;  case 5:  	type += "cards";  	extra_parameter = "&action_type=";  	extra_card = action;  	break;  default:  	type = "/user/accounts";  	break;  }  
