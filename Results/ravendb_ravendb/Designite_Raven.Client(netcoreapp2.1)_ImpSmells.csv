Implementation smell,Namespace,Class,File,Method,Description
Long Method,Raven.Client.Documents.BulkInsert,BulkInsertOperation,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\BulkInsert\BulkInsertOperation.cs,StoreAsync,The method has 100 lines of code.
Long Method,Raven.Client.Documents.Indexes,ExpressionStringBuilder,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\ExpressionStringBuilder.cs,VisitBinary,The method has 226 lines of code.
Long Method,Raven.Client.Documents.Indexes,ExpressionStringBuilder,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\ExpressionStringBuilder.cs,ConvertTypeToCSharpKeyword,The method has 118 lines of code.
Long Method,Raven.Client.Documents.Indexes,ExpressionStringBuilder,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\ExpressionStringBuilder.cs,VisitMethodCall,The method has 291 lines of code.
Long Method,Raven.Client.Documents.Indexes,ExpressionStringBuilder,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\ExpressionStringBuilder.cs,VisitUnary,The method has 104 lines of code.
Long Method,Raven.Client.Documents.Indexes,JSBeautify,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\JSBeautify.cs,get_next_token,The method has 247 lines of code.
Long Method,Raven.Client.Documents.Indexes,JSBeautify,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\JSBeautify.cs,JSBeautify,The method has 420 lines of code.
Long Method,Raven.Client.Documents.Linq,RavenQueryProviderProcessor<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,VisitLinqExtensionsMethodCall,The method has 139 lines of code.
Long Method,Raven.Client.Documents.Linq,RavenQueryProviderProcessor<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,VisitQueryableMethodCall,The method has 215 lines of code.
Long Method,Raven.Client.Documents.Linq,RavenQueryProviderProcessor<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,VisitGroupBy,The method has 122 lines of code.
Long Method,Raven.Client.Documents.Linq,RavenQueryProviderProcessor<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,VisitSelect,The method has 158 lines of code.
Long Method,Raven.Client.Documents.Operations.ETL,Transformation,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Operations\ETL\Transformation.cs,Validate,The method has 160 lines of code.
Long Method,Raven.Client.Documents.Subscriptions,SubscriptionWorker<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Subscriptions\SubscriptionWorker.cs,ProcessSubscriptionAsync,The method has 103 lines of code.
Long Method,Raven.Client.Util,DictionarySupport,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Util\JavascriptConversionExtensions.cs,ConvertToJavascript,The method has 113 lines of code.
Long Method,Raven.Client.Util,LinqMethodsSupport,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Util\JavascriptConversionExtensions.cs,ConvertToJavascript,The method has 363 lines of code.
Long Method,Raven.Client.Util,DateTimeSupport,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Util\JavascriptConversionExtensions.cs,ConvertToJavascript,The method has 130 lines of code.
Long Method,Raven.Client.Util,NewSupport,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Util\JavascriptConversionExtensions.cs,ConvertToJavascript,The method has 115 lines of code.
Long Method,Raven.Client.Util,StringSupport,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Util\JavascriptConversionExtensions.cs,ConvertToJavascript,The method has 184 lines of code.
Complex Method,Raven.Client.Documents.BulkInsert,BulkInsertOperation,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\BulkInsert\BulkInsertOperation.cs,StoreAsync,Cyclomatic complexity of the method is 12
Complex Method,Raven.Client.Documents.Changes,DatabaseChanges,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Changes\DatabaseChanges.cs,ProcessChanges,Cyclomatic complexity of the method is 12
Complex Method,Raven.Client.Documents.Changes,DatabaseChanges,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Changes\DatabaseChanges.cs,NotifySubscribers,Cyclomatic complexity of the method is 10
Complex Method,Raven.Client.Documents.Commands.Batches,SingleNodeBatchCommand,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Commands\Batches\BatchCommand.cs,SingleNodeBatchCommand,Cyclomatic complexity of the method is 8
Complex Method,Raven.Client.Documents.Commands,GetDocumentsCommand,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Commands\GetDocumentsCommand.cs,CreateRequest,Cyclomatic complexity of the method is 15
Complex Method,Raven.Client.Documents.Commands,GetRevisionsCommand,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Commands\GetRevisionsCommand.cs,CreateRequest,Cyclomatic complexity of the method is 9
Complex Method,Raven.Client.Documents.Commands.MultiGet,MultiGetCommand,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Commands\MultiGet\MultiGetCommand.cs,ReadResponse,Cyclomatic complexity of the method is 18
Complex Method,Raven.Client.Documents.Conventions,DocumentConventions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Conventions\DocumentConventions.cs,DefaultGetCollectionName,Cyclomatic complexity of the method is 9
Complex Method,Raven.Client.Documents.Indexes,ExpressionStringBuilder,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\ExpressionStringBuilder.cs,OutMember,Cyclomatic complexity of the method is 13
Complex Method,Raven.Client.Documents.Indexes,ExpressionStringBuilder,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\ExpressionStringBuilder.cs,TranslateToDocumentId,Cyclomatic complexity of the method is 11
Complex Method,Raven.Client.Documents.Indexes,ExpressionStringBuilder,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\ExpressionStringBuilder.cs,GetPropertyName,Cyclomatic complexity of the method is 8
Complex Method,Raven.Client.Documents.Indexes,ExpressionStringBuilder,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\ExpressionStringBuilder.cs,VisitBinary,Cyclomatic complexity of the method is 44
Complex Method,Raven.Client.Documents.Indexes,ExpressionStringBuilder,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\ExpressionStringBuilder.cs,FixupEnumBinaryExpression,Cyclomatic complexity of the method is 8
Complex Method,Raven.Client.Documents.Indexes,ExpressionStringBuilder,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\ExpressionStringBuilder.cs,VisitConstant,Cyclomatic complexity of the method is 10
Complex Method,Raven.Client.Documents.Indexes,ExpressionStringBuilder,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\ExpressionStringBuilder.cs,ConvertTypeToCSharpKeyword,Cyclomatic complexity of the method is 27
Complex Method,Raven.Client.Documents.Indexes,ExpressionStringBuilder,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\ExpressionStringBuilder.cs,VisitMethodCall,Cyclomatic complexity of the method is 50
Complex Method,Raven.Client.Documents.Indexes,ExpressionStringBuilder,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\ExpressionStringBuilder.cs,VisitUnary,Cyclomatic complexity of the method is 24
Complex Method,Raven.Client.Documents.Indexes,IndexDefinition,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\IndexDefinition.cs,Compare,Cyclomatic complexity of the method is 18
Complex Method,Raven.Client.Documents.Indexes,IndexDefinition,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\IndexDefinition.cs,RemoveDefaultValues,Cyclomatic complexity of the method is 15
Complex Method,Raven.Client.Documents.Indexes,IndexDefinitionBuilder<TDocument;TReduceResult>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\IndexDefinitionBuilder.cs,ToIndexDefinition,Cyclomatic complexity of the method is 16
Complex Method,Raven.Client.Documents.Indexes,IndexDefinitionBuilder<TDocument;TReduceResult>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\IndexDefinitionBuilder.cs,ConvertPatternForOutputReduceToCollectionReferencesToString,Cyclomatic complexity of the method is 9
Complex Method,Raven.Client.Documents.Indexes,IndexDefinitionHelper,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\IndexDefinitionHelper.cs,ReplaceAnonymousTypeBraces,Cyclomatic complexity of the method is 8
Complex Method,Raven.Client.Documents.Indexes,IndexDefinitionHelper,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\IndexDefinitionHelper.cs,ValidateReduce,Cyclomatic complexity of the method is 8
Complex Method,Raven.Client.Documents.Indexes,IndexFailureInformation,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\IndexFailureInformation.cs,CheckIndexInvalid,Cyclomatic complexity of the method is 10
Complex Method,Raven.Client.Documents.Indexes,JSBeautify,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\JSBeautify.cs,is_ternary_op,Cyclomatic complexity of the method is 10
Complex Method,Raven.Client.Documents.Indexes,JSBeautify,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\JSBeautify.cs,get_next_token,Cyclomatic complexity of the method is 51
Complex Method,Raven.Client.Documents.Indexes,JSBeautify,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\JSBeautify.cs,JSBeautify,Cyclomatic complexity of the method is 71
Complex Method,Raven.Client.Documents.Linq,LinqPathProvider,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\LinqPathProvider.cs,GetPath,Cyclomatic complexity of the method is 10
Complex Method,Raven.Client.Documents.Linq,LinqPathProvider,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\LinqPathProvider.cs,GetValueFromExpressionWithoutConversion,Cyclomatic complexity of the method is 17
Complex Method,Raven.Client.Documents.Linq,LinqPathProvider,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\LinqPathProvider.cs,GetMemberValue,Cyclomatic complexity of the method is 9
Complex Method,Raven.Client.Documents.Linq,RavenQueryProviderProcessor<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,VisitExpression,Cyclomatic complexity of the method is 11
Complex Method,Raven.Client.Documents.Linq,RavenQueryProviderProcessor<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,VisitBinaryExpression,Cyclomatic complexity of the method is 9
Complex Method,Raven.Client.Documents.Linq,RavenQueryProviderProcessor<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,VisitEquals,Cyclomatic complexity of the method is 12
Complex Method,Raven.Client.Documents.Linq,RavenQueryProviderProcessor<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,VisitMethodCall,Cyclomatic complexity of the method is 14
Complex Method,Raven.Client.Documents.Linq,RavenQueryProviderProcessor<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,VisitLinqExtensionsMethodCall,Cyclomatic complexity of the method is 30
Complex Method,Raven.Client.Documents.Linq,RavenQueryProviderProcessor<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,VisitOrderByDistance,Cyclomatic complexity of the method is 12
Complex Method,Raven.Client.Documents.Linq,RavenQueryProviderProcessor<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,VisitSearch,Cyclomatic complexity of the method is 18
Complex Method,Raven.Client.Documents.Linq,RavenQueryProviderProcessor<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,VisitQueryableMethodCall,Cyclomatic complexity of the method is 45
Complex Method,Raven.Client.Documents.Linq,RavenQueryProviderProcessor<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,VisitGroupBy,Cyclomatic complexity of the method is 21
Complex Method,Raven.Client.Documents.Linq,RavenQueryProviderProcessor<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,VisitSelect,Cyclomatic complexity of the method is 30
Complex Method,Raven.Client.Documents.Linq,RavenQueryProviderProcessor<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,HandleLoad,Cyclomatic complexity of the method is 10
Complex Method,Raven.Client.Documents.Linq,RavenQueryProviderProcessor<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,HandleOutputFieldOfDynamicMapReduce,Cyclomatic complexity of the method is 10
Complex Method,Raven.Client.Documents.Linq,RavenQueryProviderProcessor<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,AddMapReduceField,Cyclomatic complexity of the method is 18
Complex Method,Raven.Client.Documents.Linq,RavenQueryProviderProcessor<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,GetQueryResult,Cyclomatic complexity of the method is 8
Complex Method,Raven.Client.Documents.Operations.CompareExchange,CompareExchangeValueResultParser<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Operations\CompareExchange\CompareExchangeValueResultParser.cs,GetValues,Cyclomatic complexity of the method is 10
Complex Method,Raven.Client.Documents.Operations.ETL,Transformation,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Operations\ETL\Transformation.cs,Validate,Cyclomatic complexity of the method is 30
Complex Method,Raven.Client.Documents.Operations.ETL.SQL,SqlConnectionStringParser,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Operations\ETL\SQL\SqlConnectionStringParser.cs,GetDatabaseAndServerFromConnectionString,Cyclomatic complexity of the method is 15
Complex Method,Raven.Client.Documents.Operations.ETL.SQL,SqlEtlConfiguration,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Operations\ETL\SQL\SqlEtlConfiguration.cs,UsingEncryptedCommunicationChannel,Cyclomatic complexity of the method is 13
Complex Method,Raven.Client.Documents.Operations.ETL.SQL,SqlProviderParser,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Operations\ETL\SQL\SqlProviderParser.cs,GetSupportedProvider,Cyclomatic complexity of the method is 8
Complex Method,Raven.Client.Documents.Operations.OngoingTasks,GetOngoingTaskInfoCommand,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Operations\OngoingTasks\GetOngoingTaskInfoOperation.cs,SetResponse,Cyclomatic complexity of the method is 8
Complex Method,Raven.Client.Documents.Queries.Facets,RangeFacet<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Queries\Facets\RangeFacet.cs,Parse,Cyclomatic complexity of the method is 10
Complex Method,Raven.Client.Documents.Queries.Facets,RangeFacet<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Queries\Facets\RangeFacet.cs,DefaultGetStringValue,Cyclomatic complexity of the method is 10
Complex Method,Raven.Client.Documents.Queries,HashCalculator,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Queries\HashCalculator.cs,WriteParameterValue,Cyclomatic complexity of the method is 12
Complex Method,Raven.Client.Documents.Queries,QueryFieldUtil,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Queries\QueryFieldUtil.cs,EscapeIfNecessary,Cyclomatic complexity of the method is 8
Complex Method,Raven.Client.Documents.Session,AbstractDocumentQuery<T;TSelf>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\AbstractDocumentQuery.CounterIncludes.cs,BuildInclude,Cyclomatic complexity of the method is 14
Complex Method,Raven.Client.Documents.Session,AbstractDocumentQuery<T;TSelf>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\AbstractDocumentQuery.CounterIncludes.cs,TransformValue,Cyclomatic complexity of the method is 19
Complex Method,Raven.Client.Documents.Session,AsyncSessionDocumentCounters,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\AsyncSessionDocumentCounters.cs,GetAllAsync,Cyclomatic complexity of the method is 10
Complex Method,Raven.Client.Documents.Session,DocumentSessionAttachmentsBase,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\DocumentSessionAttachmentsBase.cs,Store,Cyclomatic complexity of the method is 8
Complex Method,Raven.Client.Documents.Session,DocumentSessionAttachmentsBase,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\DocumentSessionAttachmentsBase.cs,Move,Cyclomatic complexity of the method is 12
Complex Method,Raven.Client.Documents.Session,DocumentSessionAttachmentsBase,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\DocumentSessionAttachmentsBase.cs,Copy,Cyclomatic complexity of the method is 12
Complex Method,Raven.Client.Documents.Session,EntityToBlittable,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\EntityToBlittable.cs,TrySimplifyJson,Cyclomatic complexity of the method is 10
Complex Method,Raven.Client.Documents.Session,IncludesUtil,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\IncludesUtil.cs,ExecuteInternal,Cyclomatic complexity of the method is 9
Complex Method,Raven.Client.Documents.Session,InMemoryDocumentSessionOperations,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\InMemoryDocumentSessionOperations.cs,TrackEntity,Cyclomatic complexity of the method is 10
Complex Method,Raven.Client.Documents.Session,InMemoryDocumentSessionOperations,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\InMemoryDocumentSessionOperations.cs,StoreInternal,Cyclomatic complexity of the method is 11
Complex Method,Raven.Client.Documents.Session,InMemoryDocumentSessionOperations,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\InMemoryDocumentSessionOperations.cs,PrepareForEntitiesDeletion,Cyclomatic complexity of the method is 9
Complex Method,Raven.Client.Documents.Session,InMemoryDocumentSessionOperations,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\InMemoryDocumentSessionOperations.cs,PrepareForEntitiesPuts,Cyclomatic complexity of the method is 17
Complex Method,Raven.Client.Documents.Session,InMemoryDocumentSessionOperations,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\InMemoryDocumentSessionOperations.cs,RegisterCountersInternal,Cyclomatic complexity of the method is 8
Complex Method,Raven.Client.Documents.Session,InMemoryDocumentSessionOperations,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\InMemoryDocumentSessionOperations.cs,CheckIfIdAlreadyIncluded,Cyclomatic complexity of the method is 8
Complex Method,Raven.Client.Documents.Session.Operations,BatchOperation,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\Operations\BatchOperation.cs,SetResult,Cyclomatic complexity of the method is 22
Complex Method,Raven.Client.Documents.Session.Operations,LoadOperation,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\Operations\LoadOperation.cs,GetDocuments,Cyclomatic complexity of the method is 8
Complex Method,Raven.Client.Documents.Session.Operations,QueryOperation,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\Operations\QueryOperation.cs,Deserialize,Cyclomatic complexity of the method is 15
Complex Method,Raven.Client.Documents.Session.Operations,YieldStreamResults,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\Operations\StreamOperation.cs,HandleStreamQueryStats,Cyclomatic complexity of the method is 10
Complex Method,Raven.Client.Documents.Session.Tokens,FacetToken,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\Tokens\FacetToken.cs,WriteTo,Cyclomatic complexity of the method is 10
Complex Method,Raven.Client.Documents.Session.Tokens,WhereToken,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\Tokens\WhereToken.cs,WriteTo,Cyclomatic complexity of the method is 18
Complex Method,Raven.Client.Documents.Session.Tokens,WhereToken,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\Tokens\WhereToken.cs,WriteInnerWhere,Cyclomatic complexity of the method is 8
Complex Method,Raven.Client.Documents.Session.Tokens,WhereToken,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\Tokens\WhereToken.cs,SpecialOperator,Cyclomatic complexity of the method is 10
Complex Method,Raven.Client.Documents.Smuggler,DatabaseRecordProgress,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Smuggler\SmugglerResult.cs,ToJson,Cyclomatic complexity of the method is 15
Complex Method,Raven.Client.Documents.Smuggler,DatabaseRecordProgress,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Smuggler\SmugglerResult.cs,ToString,Cyclomatic complexity of the method is 16
Complex Method,Raven.Client.Documents.Subscriptions,DocumentSubscriptions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Subscriptions\DocumentSubscriptions.cs,EnsureCriteria,Cyclomatic complexity of the method is 11
Complex Method,Raven.Client.Documents.Subscriptions,SubscriptionBatch<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Subscriptions\SubscriptionBatch.cs,Initialize,Cyclomatic complexity of the method is 9
Complex Method,Raven.Client.Documents.Subscriptions,SubscriptionWorker<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Subscriptions\SubscriptionWorker.cs,AssertConnectionState,Cyclomatic complexity of the method is 15
Complex Method,Raven.Client.Documents.Subscriptions,SubscriptionWorker<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Subscriptions\SubscriptionWorker.cs,ReadSingleSubscriptionBatchFromServer,Cyclomatic complexity of the method is 10
Complex Method,Raven.Client.Extensions,BlittableJsonTextWriterExtensions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Extensions\BlittableJsonTextWriterExtensions.cs,WriteIndexQuery,Cyclomatic complexity of the method is 8
Complex Method,Raven.Client.Extensions,ReflectionExtensions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Extensions\ReflectionExtensions.cs,FindIEnumerable,Cyclomatic complexity of the method is 10
Complex Method,Raven.Client.Extensions,WhoIsLocking,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Extensions\WhoIsLocking.cs,GetProcessesUsingFile,Cyclomatic complexity of the method is 8
Complex Method,Raven.Client.Http,ClusterRequestExecutor,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Http\ClusterRequestExecutor.cs,UpdateTopologyAsync,Cyclomatic complexity of the method is 8
Complex Method,Raven.Client.Http,HttpCache,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Http\HttpCache.cs,FreeSpace,Cyclomatic complexity of the method is 10
Complex Method,Raven.Client.Http,RequestExecutor,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Http\RequestExecutor.cs,UpdateTopologyAsync,Cyclomatic complexity of the method is 9
Complex Method,Raven.Client.Http,RequestExecutor,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Http\RequestExecutor.cs,ExecuteAsync,Cyclomatic complexity of the method is 12
Complex Method,Raven.Client.Http,RequestExecutor,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Http\RequestExecutor.cs,HandleUnsuccessfulResponse,Cyclomatic complexity of the method is 14
Complex Method,Raven.Client.Http,RequestExecutor,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Http\RequestExecutor.cs,HandleServerDown,Cyclomatic complexity of the method is 8
Complex Method,Raven.Client.Http,RequestExecutor,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Http\RequestExecutor.cs,ValidateClientKeyUsages,Cyclomatic complexity of the method is 8
Complex Method,Raven.Client.Json,BlittableExtensions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Json\BlittableExtensions.cs,SelectTokenWithRavenSyntaxReturningFlatStructure,Cyclomatic complexity of the method is 11
Complex Method,Raven.Client.Json,BlittableJsonReader,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Json\BlittableJsonReader.cs,Read,Cyclomatic complexity of the method is 12
Complex Method,Raven.Client.Json,BlittableJsonReader,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Json\BlittableJsonReader.cs,GetTokenFromType,Cyclomatic complexity of the method is 9
Complex Method,Raven.Client.Json,BlittableJsonReader,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Json\BlittableJsonReader.cs,SetToken,Cyclomatic complexity of the method is 12
Complex Method,Raven.Client.Json,BlittableJsonWriter,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Json\BlittableJsonWriter.cs,WriteMetadata,Cyclomatic complexity of the method is 13
Complex Method,Raven.Client.Json,BlittableJsonWriter,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Json\BlittableJsonWriter.cs,WritePropertyValue,Cyclomatic complexity of the method is 15
Complex Method,Raven.Client.Json,BlittableJsonWriter,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Json\BlittableJsonWriter.cs,WritePropertyValue,Cyclomatic complexity of the method is 28
Complex Method,Raven.Client.Json,BlittableOperation,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Json\BlittableOperation.cs,CompareBlittable,Cyclomatic complexity of the method is 24
Complex Method,Raven.Client.Json,BlittableOperation,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Json\BlittableOperation.cs,CompareBlittableArray,Cyclomatic complexity of the method is 17
Complex Method,Raven.Client.Json,BlittablePath,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Json\BlittablePath.cs,ParseMain,Cyclomatic complexity of the method is 13
Complex Method,Raven.Client.Json,BlittablePath,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Json\BlittablePath.cs,Evaluate,Cyclomatic complexity of the method is 10
Complex Method,Raven.Client.Json,MetadataAsDictionary,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Json\MetadataAsDictionary.cs,ConvertValue,Cyclomatic complexity of the method is 9
Complex Method,Raven.Client.Json,TypeConverter,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Json\TypeConverter.cs,ToBlittableSupportedType,Cyclomatic complexity of the method is 19
Complex Method,Raven.Client.Json.Converters,DateTools,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Json\Converters\DateTools.cs,TimeToString,Cyclomatic complexity of the method is 8
Complex Method,Raven.Client.Json.Converters,DateTools,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Json\Converters\DateTools.cs,StringToDate,Cyclomatic complexity of the method is 8
Complex Method,Raven.Client.Json.Converters,DateTools,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Json\Converters\DateTools.cs,Round,Cyclomatic complexity of the method is 8
Complex Method,Raven.Client.Json.Converters,JsonLinqEnumerableConverter,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Json\Converters\JsonLinqEnumerableConverter.cs,CanConvert,Cyclomatic complexity of the method is 8
Complex Method,Raven.Client.Json.Converters,ParametersConverter,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Json\Converters\ParametersConverter.cs,WriteJson,Cyclomatic complexity of the method is 8
Complex Method,Raven.Client.ServerWide,DatabaseRecord,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\ServerWide\DatabaseRecord.cs,AddIndex,Cyclomatic complexity of the method is 14
Complex Method,Raven.Client.ServerWide,DatabaseRecord,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\ServerWide\DatabaseRecord.cs,EnsureTaskNameIsNotUsed,Cyclomatic complexity of the method is 9
Complex Method,Raven.Client.ServerWide,DatabaseTopology,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\ServerWide\DatabaseTopology.cs,GetDestinations,Cyclomatic complexity of the method is 9
Complex Method,Raven.Client.ServerWide.Tcp,TcpConnectionHeaderMessage,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\ServerWide\Tcp\TcpConnectionHeader.cs,TcpConnectionHeaderMessage,Cyclomatic complexity of the method is 27
Complex Method,Raven.Client.ServerWide.Tcp,TcpNegotiation,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\ServerWide\Tcp\TcpNegotiation.cs,NegotiateProtocolVersion,Cyclomatic complexity of the method is 10
Complex Method,Raven.Client.Util,CustomMethods,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Util\JavascriptConversionExtensions.cs,ConvertToJavascript,Cyclomatic complexity of the method is 15
Complex Method,Raven.Client.Util,DictionarySupport,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Util\JavascriptConversionExtensions.cs,ConvertToJavascript,Cyclomatic complexity of the method is 14
Complex Method,Raven.Client.Util,LinqMethodsSupport,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Util\JavascriptConversionExtensions.cs,ConvertToJavascript,Cyclomatic complexity of the method is 45
Complex Method,Raven.Client.Util,TransparentIdentifierSupport,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Util\JavascriptConversionExtensions.cs,ConvertToJavascript,Cyclomatic complexity of the method is 14
Complex Method,Raven.Client.Util,DateTimeSupport,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Util\JavascriptConversionExtensions.cs,ConvertToJavascript,Cyclomatic complexity of the method is 23
Complex Method,Raven.Client.Util,SubscriptionsWrappedConstantSupport,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Util\JavascriptConversionExtensions.cs,ConvertToJavascript,Cyclomatic complexity of the method is 12
Complex Method,Raven.Client.Util,ConstSupport,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Util\JavascriptConversionExtensions.cs,ConvertToJavascript,Cyclomatic complexity of the method is 9
Complex Method,Raven.Client.Util,NewSupport,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Util\JavascriptConversionExtensions.cs,ConvertToJavascript,Cyclomatic complexity of the method is 21
Complex Method,Raven.Client.Util,StringSupport,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Util\JavascriptConversionExtensions.cs,ConvertToJavascript,Cyclomatic complexity of the method is 37
Complex Method,Raven.Client.Util,ResourceNameValidator,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Util\ResourceNameValidator.cs,IsValidResourceName,Cyclomatic complexity of the method is 9
Long Parameter List,Raven.Client.Documents.Changes,DatabaseChanges,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Changes\DatabaseChanges.cs,GetOrAddConnectionState,The method has 5 parameters. Parameters: name' watchCommand' unwatchCommand' value' values
Long Parameter List,Raven.Client.Documents.Commands.Batches,SingleNodeBatchCommand,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Commands\Batches\BatchCommand.cs,SingleNodeBatchCommand,The method has 5 parameters. Parameters: conventions' context' commands' options' mode
Long Parameter List,Raven.Client.Documents.Commands.Batches,BatchCommand,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Commands\Batches\BatchCommand.cs,BatchCommand,The method has 5 parameters. Parameters: conventions' context' commands' options' mode
Long Parameter List,Raven.Client.Documents.Commands.Batches,CopyAttachmentCommandData,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Commands\Batches\CopyAttachmentCommandData.cs,CopyAttachmentCommandData,The method has 5 parameters. Parameters: sourceDocumentId' sourceName' destinationDocumentId' destinationName' changeVector
Long Parameter List,Raven.Client.Documents.Commands.Batches,MoveAttachmentCommandData,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Commands\Batches\MoveAttachmentCommandData.cs,MoveAttachmentCommandData,The method has 5 parameters. Parameters: documentId' name' destinationDocumentId' destinationName' changeVector
Long Parameter List,Raven.Client.Documents.Commands.Batches,PutAttachmentCommandData,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Commands\Batches\PutAttachmentCommandData.cs,PutAttachmentCommandData,The method has 5 parameters. Parameters: documentId' name' stream' contentType' changeVector
Long Parameter List,Raven.Client.Documents.Commands,GetDocumentsCommand,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Commands\GetDocumentsCommand.cs,GetDocumentsCommand,The method has 7 parameters. Parameters: startWith' startAfter' matches' exclude' start' pageSize' metadataOnly
Long Parameter List,Raven.Client.Documents.Commands,NextHiLoCommand,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Commands\NextHiLoCommand.cs,NextHiLoCommand,The method has 5 parameters. Parameters: tag' lastBatchSize' lastRangeAt' identityPartsSeparator' lastRangeMax
Long Parameter List,Raven.Client.Documents.Commands.MultiGet,MultiGetCommand,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Commands\MultiGet\MultiGetCommand.cs,ReadResponses,The method has 5 parameters. Parameters: context' peepingTomStream' parser' state' buffer
Long Parameter List,Raven.Client.Documents.Commands.MultiGet,MultiGetCommand,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Commands\MultiGet\MultiGetCommand.cs,ReadResponse,The method has 5 parameters. Parameters: context' peepingTomStream' parser' state' buffer
Long Parameter List,System.Linq,DocumentQueryExtensions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\DocumentQueryExtensions.cs,Join,The method has 5 parameters. Parameters: outer' inner' outerKeySelector' innerKeySelector' resultSelector
Long Parameter List,System.Linq,DocumentQueryExtensions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\DocumentQueryExtensions.cs,Join,The method has 5 parameters. Parameters: outer' inner' outerKeySelector' innerKeySelector' resultSelector
Long Parameter List,System.Linq,DocumentQueryExtensions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\DocumentQueryExtensions.cs,Join,The method has 6 parameters. Parameters: outer' inner' outerKeySelector' innerKeySelector' resultSelector' comparer
Long Parameter List,System.Linq,DocumentQueryExtensions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\DocumentQueryExtensions.cs,Join,The method has 6 parameters. Parameters: outer' inner' outerKeySelector' innerKeySelector' resultSelector' comparer
Long Parameter List,System.Linq,DocumentQueryExtensions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\DocumentQueryExtensions.cs,GroupBy,The method has 5 parameters. Parameters: source' keySelector' elementSelector' resultSelector' comparer
Long Parameter List,System.Linq,DocumentQueryExtensions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\DocumentQueryExtensions.cs,GroupBy,The method has 5 parameters. Parameters: source' keySelector' elementSelector' resultSelector' comparer
Long Parameter List,System.Linq,DocumentQueryExtensions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\DocumentQueryExtensions.cs,GroupJoin,The method has 5 parameters. Parameters: outer' inner' outerKeySelector' innerKeySelector' resultSelector
Long Parameter List,System.Linq,DocumentQueryExtensions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\DocumentQueryExtensions.cs,GroupJoin,The method has 5 parameters. Parameters: outer' inner' outerKeySelector' innerKeySelector' resultSelector
Long Parameter List,System.Linq,DocumentQueryExtensions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\DocumentQueryExtensions.cs,GroupJoin,The method has 6 parameters. Parameters: outer' inner' outerKeySelector' innerKeySelector' resultSelector' comparer
Long Parameter List,System.Linq,DocumentQueryExtensions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\DocumentQueryExtensions.cs,GroupJoin,The method has 6 parameters. Parameters: outer' inner' outerKeySelector' innerKeySelector' resultSelector' comparer
Long Parameter List,Raven.Client.Documents,LinqExtensions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\LinqExtensions.cs,Search,The method has 6 parameters. Parameters: self' fieldSelector' searchTerms' boost' options' operator
Long Parameter List,Raven.Client.Documents,LinqExtensions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\LinqExtensions.cs,Search,The method has 6 parameters. Parameters: self' fieldSelector' searchTerms' boost' options' operator
Long Parameter List,Raven.Client.Documents,LinqExtensions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\LinqExtensions.cs,OrderByDistance,The method has 5 parameters. Parameters: source' path' latitude' longitude' roundFactor
Long Parameter List,Raven.Client.Documents,LinqExtensions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\LinqExtensions.cs,OrderByDistance,The method has 5 parameters. Parameters: source' fieldName' latitude' longitude' roundFactor
Long Parameter List,Raven.Client.Documents,LinqExtensions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\LinqExtensions.cs,OrderByDistanceDescending,The method has 5 parameters. Parameters: source' path' latitude' longitude' roundFactor
Long Parameter List,Raven.Client.Documents,LinqExtensions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\LinqExtensions.cs,OrderByDistanceDescending,The method has 5 parameters. Parameters: source' fieldName' latitude' longitude' roundFactor
Long Parameter List,Raven.Client.Documents.Indexes,ExpressionStringBuilder,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\ExpressionStringBuilder.cs,ExpressionToString,The method has 5 parameters. Parameters: conventions' translateIdentityProperty' queryRoot' queryRootName' node
Long Parameter List,Raven.Client.Documents.Indexes,IndexCreation,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\IndexCreation.cs,CreateIndexesAsync,The method has 5 parameters. Parameters: assemblyToScan' store' conventions' database' token
Long Parameter List,Raven.Client.Documents.Indexes,IndexCreation,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\IndexCreation.cs,CreateIndexesAsync,The method has 5 parameters. Parameters: indexes' store' conventions' database' token
Long Parameter List,Raven.Client.Documents.Indexes,IndexFailureInformation,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\IndexFailureInformation.cs,CheckIndexInvalid,The method has 7 parameters. Parameters: mapAttempts' mapErrors' mapReferenceAttempts' mapReferenceErrors' reduceAttempts' reduceErrors' isStale
Long Parameter List,Raven.Client.Documents.Linq,IRavenQueryable,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\IRavenQueryable.cs,Highlight,The method has 5 parameters. Parameters: fieldName' fragmentLength' fragmentCount' options' highlightings
Long Parameter List,Raven.Client.Documents.Linq,IRavenQueryable,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\IRavenQueryable.cs,Highlight,The method has 5 parameters. Parameters: path' fragmentLength' fragmentCount' options' highlightings
Long Parameter List,Raven.Client.Documents.Linq,RavenQueryInspector<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryInspector.cs,Init,The method has 8 parameters. Parameters: provider' queryStats' highlightings' indexName' collectionName' expression' session' isMapReduce
Long Parameter List,Raven.Client.Documents.Linq,RavenQueryInspector<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryInspector.cs,Highlight,The method has 5 parameters. Parameters: fieldName' fragmentLength' fragmentCount' options' highlightings
Long Parameter List,Raven.Client.Documents.Linq,RavenQueryInspector<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryInspector.cs,Highlight,The method has 5 parameters. Parameters: path' fragmentLength' fragmentCount' options' highlightings
Long Parameter List,Raven.Client.Documents.Linq,RavenQueryProvider<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProvider.cs,RavenQueryProvider,The method has 8 parameters. Parameters: queryGenerator' indexName' collectionName' originalQueryType' queryStatistics' highlightings' isMapReduce' conventions
Long Parameter List,Raven.Client.Documents.Linq,RavenQueryProviderProcessor<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,RavenQueryProviderProcessor,The method has 11 parameters. Parameters: queryGenerator' customizeQuery' afterQueryExecuted' highlightings' indexName' collectionName' fieldsToFetch' isMapReduce' originalType' conventions' isProjectInto
Long Parameter List,Raven.Client.Documents.Operations.Attachments,GetAttachmentCommand,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Operations\Attachments\GetAttachmentOperation.cs,GetAttachmentCommand,The method has 5 parameters. Parameters: context' documentId' name' type' changeVector
Long Parameter List,Raven.Client.Documents.Operations.Attachments,PutAttachmentOperation,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Operations\Attachments\PutAttachmentOperation.cs,PutAttachmentOperation,The method has 5 parameters. Parameters: documentId' name' stream' contentType' changeVector
Long Parameter List,Raven.Client.Documents.Operations.Attachments,PutAttachmentCommand,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Operations\Attachments\PutAttachmentOperation.cs,PutAttachmentCommand,The method has 5 parameters. Parameters: documentId' name' stream' contentType' changeVector
Long Parameter List,Raven.Client.Documents.Operations,Operation,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Operations\Operation.cs,Operation,The method has 5 parameters. Parameters: requestExecutor' changes' conventions' id' nodeTag
Long Parameter List,Raven.Client.Documents.Operations,Operation,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Operations\Operation.cs,Operation,The method has 6 parameters. Parameters: requestExecutor' changes' conventions' id' nodeTag' additionalTask
Long Parameter List,Raven.Client.Documents.Operations,PatchOperation<TEntity>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Operations\PatchOperation.cs,PatchOperation,The method has 5 parameters. Parameters: id' changeVector' patch' patchIfMissing' skipPatchIfChangeVectorMismatch
Long Parameter List,Raven.Client.Documents.Operations,PatchOperation,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Operations\PatchOperation.cs,PatchOperation,The method has 5 parameters. Parameters: id' changeVector' patch' patchIfMissing' skipPatchIfChangeVectorMismatch
Long Parameter List,Raven.Client.Documents.Operations,PatchOperation,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Operations\PatchOperation.cs,GetCommand,The method has 6 parameters. Parameters: store' conventions' context' cache' returnDebugInformation' test
Long Parameter List,Raven.Client.Documents.Operations,PatchCommand,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Operations\PatchOperation.cs,PatchCommand,The method has 9 parameters. Parameters: conventions' context' id' changeVector' patch' patchIfMissing' skipPatchIfChangeVectorMismatch' returnDebugInformation' test
Long Parameter List,Raven.Client.Documents.Queries.Facets,RangeFacet<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Queries\Facets\RangeFacet.cs,GetStringRepresentation,The method has 6 parameters. Parameters: fieldName' leftOp' rightOp' lValue' rValue' addQueryParameter
Long Parameter List,Raven.Client.Documents.Queries,QueryData,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Queries\QueryData.cs,QueryData,The method has 6 parameters. Parameters: fields' projections' fromAlias' declareToken' loadTokens' isCustomFunction
Long Parameter List,Raven.Client.Documents.Queries.Spatial,CircleCriteria,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Queries\Spatial\SpatialCriteria.cs,CircleCriteria,The method has 6 parameters. Parameters: radius' latitude' longitude' radiusUnits' relation' distErrorPercent
Long Parameter List,Raven.Client.Documents.Queries.Spatial,SpatialCriteriaFactory,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Queries\Spatial\SpatialCriteriaFactory.cs,WithinRadius,The method has 5 parameters. Parameters: radius' latitude' longitude' radiusUnits' distErrorPercent
Long Parameter List,Raven.Client.Documents.Session,AbstractDocumentQuery<T;TSelf>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\AbstractDocumentQuery.CounterIncludes.cs,AbstractDocumentQuery,The method has 8 parameters. Parameters: session' indexName' collectionName' isGroupBy' declareToken' loadTokens' fromAlias' isProjectInto
Long Parameter List,Raven.Client.Documents.Session,AbstractDocumentQuery<T;TSelf>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\AbstractDocumentQuery.CounterIncludes.cs,Highlight,The method has 5 parameters. Parameters: fieldName' fragmentLength' fragmentCount' options' highlightings
Long Parameter List,Raven.Client.Documents.Session,AbstractDocumentQuery<T;TSelf>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\AbstractDocumentQuery.CounterIncludes.cs,WithinRadiusOf,The method has 6 parameters. Parameters: fieldName' radius' latitude' longitude' radiusUnits' distErrorPercent
Long Parameter List,Raven.Client.Documents.Session,AbstractDocumentQuery<T;TSelf>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\AbstractDocumentQuery.CounterIncludes.cs,Spatial,The method has 5 parameters. Parameters: fieldName' shapeWkt' relation' units' distErrorPercent
Long Parameter List,Raven.Client.Documents.Session,AsyncDocumentQuery<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\AsyncDocumentQuery.cs,AsyncDocumentQuery,The method has 8 parameters. Parameters: session' indexName' collectionName' isGroupBy' declareToken' loadTokens' fromAlias' isProjectInfo
Long Parameter List,Raven.Client.Documents.Session,AsyncDocumentQuery<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\AsyncDocumentQuery.cs,Highlight,The method has 5 parameters. Parameters: fieldName' fragmentLength' fragmentCount' options' highlightings
Long Parameter List,Raven.Client.Documents.Session,AsyncDocumentQuery<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\AsyncDocumentQuery.cs,Highlight,The method has 5 parameters. Parameters: path' fragmentLength' fragmentCount' options' highlightings
Long Parameter List,Raven.Client.Documents.Session,AsyncDocumentQuery<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\AsyncDocumentQuery.cs,WithinRadiusOf,The method has 6 parameters. Parameters: propertySelector' radius' latitude' longitude' radiusUnits' distanceErrorPct
Long Parameter List,Raven.Client.Documents.Session,AsyncDocumentQuery<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\AsyncDocumentQuery.cs,WithinRadiusOf,The method has 6 parameters. Parameters: fieldName' radius' latitude' longitude' radiusUnits' distanceErrorPct
Long Parameter List,Raven.Client.Documents.Session,AsyncDocumentQuery<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\AsyncDocumentQuery.cs,RelatesToShape,The method has 5 parameters. Parameters: propertySelector' shapeWkt' relation' units' distanceErrorPct
Long Parameter List,Raven.Client.Documents.Session,AsyncDocumentQuery<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\AsyncDocumentQuery.cs,RelatesToShape,The method has 5 parameters. Parameters: fieldName' shapeWkt' relation' units' distanceErrorPct
Long Parameter List,Raven.Client.Documents.Session,AsyncDocumentSession,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\AsyncDocumentSession.CountersFor.cs,LoadStartingWithAsync,The method has 7 parameters. Parameters: idPrefix' matches' start' pageSize' exclude' startAfter' token
Long Parameter List,Raven.Client.Documents.Session,AsyncDocumentSession,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\AsyncDocumentSession.CountersFor.cs,LoadAsyncInternal,The method has 5 parameters. Parameters: ids' includes' counterIncludes' includeAllCounters' token
Long Parameter List,Raven.Client.Documents.Session,AsyncDocumentSession,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\AsyncDocumentSession.CountersFor.cs,LoadStartingWithAsync,The method has 7 parameters. Parameters: idPrefix' matches' start' pageSize' exclude' startAfter' token
Long Parameter List,Raven.Client.Documents.Session,AsyncDocumentSession,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\AsyncDocumentSession.CountersFor.cs,LoadStartingWithIntoStreamAsync,The method has 8 parameters. Parameters: idPrefix' output' matches' start' pageSize' exclude' startAfter' token
Long Parameter List,Raven.Client.Documents.Session,AsyncDocumentSession,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\AsyncDocumentSession.CountersFor.cs,LoadStartingWithInternal,The method has 9 parameters. Parameters: idPrefix' operation' stream' matches' start' pageSize' exclude' startAfter' token
Long Parameter List,Raven.Client.Documents.Session,AsyncDocumentSession,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\AsyncDocumentSession.CountersFor.cs,StreamAsync,The method has 6 parameters. Parameters: startsWith' matches' start' pageSize' startAfter' token
Long Parameter List,Raven.Client.Documents.Session,YieldStream<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\AsyncDocumentSession.Stream.cs,YieldStream,The method has 5 parameters. Parameters: parent' query' fieldsToFetch' enumerator' token
Long Parameter List,Raven.Client.Documents.Session,DocumentQuery<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\DocumentQuery.cs,DocumentQuery,The method has 8 parameters. Parameters: session' indexName' collectionName' isGroupBy' declareToken' loadTokens' fromAlias' isProjectInto
Long Parameter List,Raven.Client.Documents.Session,DocumentQuery<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\DocumentQuery.cs,Highlight,The method has 5 parameters. Parameters: fieldName' fragmentLength' fragmentCount' options' highlightings
Long Parameter List,Raven.Client.Documents.Session,DocumentQuery<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\DocumentQuery.cs,Highlight,The method has 5 parameters. Parameters: path' fragmentLength' fragmentCount' options' highlightings
Long Parameter List,Raven.Client.Documents.Session,DocumentQuery<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\DocumentQuery.cs,WithinRadiusOf,The method has 6 parameters. Parameters: propertySelector' radius' latitude' longitude' radiusUnits' distanceErrorPct
Long Parameter List,Raven.Client.Documents.Session,DocumentQuery<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\DocumentQuery.cs,WithinRadiusOf,The method has 6 parameters. Parameters: fieldName' radius' latitude' longitude' radiusUnits' distanceErrorPct
Long Parameter List,Raven.Client.Documents.Session,DocumentQuery<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\DocumentQuery.cs,RelatesToShape,The method has 5 parameters. Parameters: propertySelector' shapeWkt' relation' units' distanceErrorPct
Long Parameter List,Raven.Client.Documents.Session,DocumentQuery<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\DocumentQuery.cs,RelatesToShape,The method has 5 parameters. Parameters: fieldName' shapeWkt' relation' units' distanceErrorPct
Long Parameter List,Raven.Client.Documents.Session,DocumentSession,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\DocumentSession.CountersFor.cs,LoadStartingWith,The method has 6 parameters. Parameters: idPrefix' matches' start' pageSize' exclude' startAfter
Long Parameter List,Raven.Client.Documents.Session,DocumentSession,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\DocumentSession.CountersFor.cs,LoadStartingWith,The method has 6 parameters. Parameters: idPrefix' matches' start' pageSize' exclude' startAfter
Long Parameter List,Raven.Client.Documents.Session,DocumentSession,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\DocumentSession.CountersFor.cs,LoadStartingWithIntoStream,The method has 7 parameters. Parameters: idPrefix' output' matches' start' pageSize' exclude' startAfter
Long Parameter List,Raven.Client.Documents.Session,DocumentSession,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\DocumentSession.CountersFor.cs,LoadStartingWithInternal,The method has 8 parameters. Parameters: idPrefix' operation' stream' matches' start' pageSize' exclude' startAfter
Long Parameter List,Raven.Client.Documents.Session,DocumentSession,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\DocumentSession.CountersFor.cs,Stream,The method has 5 parameters. Parameters: startsWith' matches' start' pageSize' startAfter
Long Parameter List,Raven.Client.Documents.Session,DocumentSessionAttachmentsBase,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\DocumentSessionAttachmentsBase.cs,ThrowDocumentAlreadyDeleted,The method has 5 parameters. Parameters: documentId' name' operation' destinationDocumentId' deletedDocumentId
Long Parameter List,Raven.Client.Documents.Session,EntityToBlittable,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\EntityToBlittable.cs,ConvertToBlittableForCompareExchangeIfNeeded,The method has 6 parameters. Parameters: value' conventions' context' serializer' documentInfo' removeIdentityProperty
Long Parameter List,Raven.Client.Documents.Session,EntityToBlittable,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\EntityToBlittable.cs,ConvertEntityToBlittable,The method has 5 parameters. Parameters: entity' conventions' context' serializer' documentInfo
Long Parameter List,Raven.Client.Documents.Session,EntityToBlittable,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\EntityToBlittable.cs,ConvertEntityToBlittableInternal,The method has 6 parameters. Parameters: entity' conventions' context' serializer' writer' removeIdentityProperty
Long Parameter List,Raven.Client.Documents.Session,IAbstractDocumentQuery,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\IAbstractDocumentQuery.cs,Highlight,The method has 5 parameters. Parameters: fieldName' fragmentLength' fragmentCount' options' highlightings
Long Parameter List,Raven.Client.Documents.Session,IAdvancedSessionOperations,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\IAdvancedSessionOperations.cs,LoadStartingWith,The method has 6 parameters. Parameters: idPrefix' matches' start' pageSize' exclude' startAfter
Long Parameter List,Raven.Client.Documents.Session,IAdvancedSessionOperations,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\IAdvancedSessionOperations.cs,LoadStartingWithIntoStream,The method has 7 parameters. Parameters: idPrefix' output' matches' start' pageSize' exclude' startAfter
Long Parameter List,Raven.Client.Documents.Session,IAdvancedSessionOperations,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\IAdvancedSessionOperations.cs,Stream,The method has 5 parameters. Parameters: startsWith' matches' start' pageSize' startAfter
Long Parameter List,Raven.Client.Documents.Session,IAsyncAdvancedSessionOperations,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\IAsyncAdvancedSessionOperations.cs,LoadStartingWithAsync,The method has 7 parameters. Parameters: idPrefix' matches' start' pageSize' exclude' startAfter' token
Long Parameter List,Raven.Client.Documents.Session,IAsyncAdvancedSessionOperations,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\IAsyncAdvancedSessionOperations.cs,LoadStartingWithIntoStreamAsync,The method has 8 parameters. Parameters: idPrefix' output' matches' start' pageSize' exclude' startAfter' token
Long Parameter List,Raven.Client.Documents.Session,IAsyncAdvancedSessionOperations,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\IAsyncAdvancedSessionOperations.cs,StreamAsync,The method has 6 parameters. Parameters: startsWith' matches' start' pageSize' startAfter' token
Long Parameter List,Raven.Client.Documents.Session,IAsyncDocumentSessionImpl,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\IAsyncDocumentSessionImpl.cs,LoadAsyncInternal,The method has 5 parameters. Parameters: ids' includes' counterIncludes' includeAllCounters' token
Long Parameter List,Raven.Client.Documents.Session,IDocumentQueryBase,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\IDocumentQuery.cs,Highlight,The method has 5 parameters. Parameters: fieldName' fragmentLength' fragmentCount' options' highlightings
Long Parameter List,Raven.Client.Documents.Session,IDocumentQueryBase,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\IDocumentQuery.cs,Highlight,The method has 5 parameters. Parameters: path' fragmentLength' fragmentCount' options' highlightings
Long Parameter List,Raven.Client.Documents.Session,IFilterDocumentQueryBase,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\IDocumentQueryBase.cs,WithinRadiusOf,The method has 6 parameters. Parameters: propertySelector' radius' latitude' longitude' radiusUnits' distanceErrorPct
Long Parameter List,Raven.Client.Documents.Session,IFilterDocumentQueryBase,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\IDocumentQueryBase.cs,WithinRadiusOf,The method has 6 parameters. Parameters: fieldName' radius' latitude' longitude' radiusUnits' distanceErrorPct
Long Parameter List,Raven.Client.Documents.Session,IFilterDocumentQueryBase,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\IDocumentQueryBase.cs,RelatesToShape,The method has 5 parameters. Parameters: propertySelector' shapeWkt' relation' units' distanceErrorPct
Long Parameter List,Raven.Client.Documents.Session,IFilterDocumentQueryBase,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\IDocumentQueryBase.cs,RelatesToShape,The method has 5 parameters. Parameters: fieldName' shapeWkt' relation' units' distanceErrorPct
Long Parameter List,Raven.Client.Documents.Session,InMemoryDocumentSessionOperations,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\InMemoryDocumentSessionOperations.cs,TrackEntity,The method has 5 parameters. Parameters: entityType' id' document' metadata' noTracking
Long Parameter List,Raven.Client.Documents.Session,InMemoryDocumentSessionOperations,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\InMemoryDocumentSessionOperations.cs,StoreAsyncInternal,The method has 5 parameters. Parameters: entity' changeVector' id' forceConcurrencyCheck' token
Long Parameter List,Raven.Client.Documents.Session,InMemoryDocumentSessionOperations,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\InMemoryDocumentSessionOperations.cs,StoreEntityInUnitOfWork,The method has 5 parameters. Parameters: id' entity' changeVector' metadata' forceConcurrencyCheck
Long Parameter List,Raven.Client.Documents.Session.Operations,BatchOperation,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\Operations\BatchOperation.cs,HandleAttachmentDeleteInternal,The method has 5 parameters. Parameters: batchResult' type' idFieldName' attachmentNameFieldName' documentChangeVectorFieldName
Long Parameter List,Raven.Client.Documents.Session.Operations,BatchOperation,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\Operations\BatchOperation.cs,HandleAttachmentPutInternal,The method has 5 parameters. Parameters: batchResult' type' idFieldName' attachmentNameFieldName' documentChangeVectorFieldName
Long Parameter List,Raven.Client.Documents.Session.Operations,GetRevisionOperation,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\Operations\GetRevisionOperation.cs,GetRevisionOperation,The method has 5 parameters. Parameters: session' id' start' pageSize' metadataOnly
Long Parameter List,Raven.Client.Documents.Session.Operations,LoadStartingWithOperation,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\Operations\LoadStartingWithOperation.cs,WithStartWith,The method has 6 parameters. Parameters: idPrefix' matches' start' pageSize' exclude' startAfter
Long Parameter List,Raven.Client.Documents.Session.Operations,QueryOperation,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\Operations\QueryOperation.cs,QueryOperation,The method has 8 parameters. Parameters: session' indexName' indexQuery' fieldsToFetch' disableEntitiesTracking' metadataOnly' indexEntriesOnly' isProjectInto
Long Parameter List,Raven.Client.Documents.Session.Operations,QueryOperation,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\Operations\QueryOperation.cs,Deserialize,The method has 7 parameters. Parameters: id' document' metadata' fieldsToFetch' disableEntitiesTracking' session' isProjectInto
Long Parameter List,Raven.Client.Documents.Session.Operations,StreamOperation,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\Operations\StreamOperation.cs,CreateRequest,The method has 6 parameters. Parameters: startsWith' matches' start' pageSize' exclude' startAfter
Long Parameter List,Raven.Client.Documents.Session.Operations,YieldStreamResults,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\Operations\StreamOperation.cs,YieldStreamResults,The method has 5 parameters. Parameters: session' response' isQueryStream' isAsync' streamQueryStatistics
Long Parameter List,Raven.Client.Documents.Session.Operations,YieldStreamResults,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\Operations\StreamOperation.cs,HandleStreamQueryStats,The method has 6 parameters. Parameters: context' response' parser' state' buffer' streamQueryStatistics
Long Parameter List,Raven.Client.Documents.Session.Operations.Lazy,ILazySessionOperations,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\Operations\Lazy\ILazySessionOperations.cs,LoadStartingWith,The method has 6 parameters. Parameters: idPrefix' matches' start' pageSize' exclude' startAfter
Long Parameter List,Raven.Client.Documents.Session.Operations.Lazy,IAsyncLazySessionOperations,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\Operations\Lazy\ILazySessionOperations.cs,LoadStartingWithAsync,The method has 7 parameters. Parameters: idPrefix' matches' start' pageSize' exclude' startAfter' token
Long Parameter List,Raven.Client.Documents.Session.Operations.Lazy,LazyStartsWithOperation<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\Operations\Lazy\LazyStartsWithOperation.cs,LazyStartsWithOperation,The method has 7 parameters. Parameters: idPrefix' matches' exclude' start' pageSize' sessionOperations' startAfter
Long Parameter List,Raven.Client.Documents.Smuggler,ExportCommand,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Smuggler\DatabaseSmuggler.cs,ExportCommand,The method has 6 parameters. Parameters: conventions' context' options' handleStreamResponse' operationId' tcs
Long Parameter List,Raven.Client.Documents.Smuggler,ImportCommand,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Smuggler\DatabaseSmuggler.cs,ImportCommand,The method has 6 parameters. Parameters: conventions' context' options' stream' operationId' tcs
Long Parameter List,Raven.Client.Exceptions.Documents.Counters,CounterOverflowException,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Exceptions\Documents\Counters\CounterOverflowException.cs,ThrowFor,The method has 5 parameters. Parameters: docId' counterName' value' delta' inner
Long Parameter List,Raven.Client.Extensions,WhoIsLocking,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Extensions\WhoIsLocking.cs,RmRegisterResources,The method has 7 parameters. Parameters: pSessionHandle' nFiles' rgsFilenames' nApplications' rgApplications' nServices' rgsServiceNames
Long Parameter List,Raven.Client.Extensions,WhoIsLocking,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Extensions\WhoIsLocking.cs,RmGetList,The method has 5 parameters. Parameters: dwSessionHandle' pnProcInfoNeeded' pnProcInfo' rgAffectedApps' lpdwRebootReasons
Long Parameter List,Raven.Client.Http,ClusterTopology,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Http\ClusterTopology.cs,ClusterTopology,The method has 6 parameters. Parameters: topologyId' members' promotables' watchers' lastNodeId' index
Long Parameter List,Raven.Client.Http,DatabaseTopologyLocalCache,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Http\DatabaseTopologyLocalCache.cs,TrySaving,The method has 5 parameters. Parameters: databaseName' topologyHash' topology' conventions' context
Long Parameter List,Raven.Client.Http,RequestExecutor,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Http\RequestExecutor.cs,UnlikelyExecuteAsync,The method has 5 parameters. Parameters: command' context' topologyUpdate' sessionInfo' token
Long Parameter List,Raven.Client.Http,RequestExecutor,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Http\RequestExecutor.cs,ExecuteAsync,The method has 7 parameters. Parameters: chosenNode' nodeIndex' context' command' shouldRetry' sessionInfo' token
Long Parameter List,Raven.Client.Http,RequestExecutor,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Http\RequestExecutor.cs,SendRequestToServer,The method has 9 parameters. Parameters: chosenNode' nodeIndex' context' command' shouldRetry' sessionInfo' request' url' token
Long Parameter List,Raven.Client.Http,RequestExecutor,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Http\RequestExecutor.cs,SendAsync,The method has 5 parameters. Parameters: chosenNode' command' sessionInfo' request' token
Long Parameter List,Raven.Client.Http,RequestExecutor,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Http\RequestExecutor.cs,GetFromCache,The method has 6 parameters. Parameters: context' command' useCache' url' cachedChangeVector' cachedValue
Long Parameter List,Raven.Client.Http,RequestExecutor,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Http\RequestExecutor.cs,HandleUnsuccessfulResponse,The method has 10 parameters. Parameters: chosenNode' nodeIndex' context' command' request' response' url' sessionInfo' shouldRetry' token
Long Parameter List,Raven.Client.Http,RequestExecutor,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Http\RequestExecutor.cs,HandleServerDown,The method has 12 parameters. Parameters: url' chosenNode' nodeIndex' context' command' request' response' e' sessionInfo' shouldRetry' requestContext' token
Long Parameter List,Raven.Client.Json,BlittableOperation,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Json\BlittableOperation.cs,CompareBlittable,The method has 6 parameters. Parameters: fieldPath' id' originalBlittable' newBlittable' changes' docChanges
Long Parameter List,Raven.Client.Json,BlittableOperation,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Json\BlittableOperation.cs,CompareBlittableArray,The method has 7 parameters. Parameters: fieldPath' id' oldArray' newArray' changes' docChanges' propName
Long Parameter List,Raven.Client.Json,BlittableOperation,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Json\BlittableOperation.cs,NewChange,The method has 6 parameters. Parameters: fieldPath' name' newValue' oldValue' docChanges' change
Long Parameter List,Raven.Client.ServerWide,DatabaseTopology,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\ServerWide\DatabaseTopology.cs,GetDestinations,The method has 5 parameters. Parameters: myTag' databaseName' deletionInProgress' clusterTopology' state
Long Identifier,Raven.Client,Headers,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Constants.cs,,The length of the parameter LastKnownClusterTransactionIndex is 32.
Long Identifier,Raven.Client,Encryption,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Constants.cs,,The length of the parameter DefaultGeneratedEncryptionKeyLength is 35.
Long Identifier,Raven.Client,PeriodicBackup,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Constants.cs,,The length of the parameter EncryptedIncrementalBackupExtension is 35.
Long Identifier,Raven.Client,CommandData,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Constants.cs,,The length of the parameter DestinationDocumentChangeVector is 31.
Long Identifier,Raven.Client.Documents.Conventions,DocumentConventions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Conventions\DocumentConventions.cs,,The length of the parameter _cachedDefaultTypeCollectionNames is 33.
Long Identifier,Raven.Client.Documents.Conventions,DocumentConventions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Conventions\DocumentConventions.cs,,The length of the parameter _listOfQueryValueToObjectConverters is 35.
Long Identifier,Raven.Client.Documents.Conventions,DocumentConventions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Conventions\DocumentConventions.cs,,The length of the parameter _listOfRegisteredIdConventionsAsync is 35.
Long Identifier,Raven.Client.Documents.Conventions,DocumentConventions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Conventions\DocumentConventions.cs,,The length of the parameter _prettifyGeneratedLinqExpressions is 33.
Long Identifier,Raven.Client.Documents.Conventions,DocumentConventions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Conventions\DocumentConventions.cs,,The length of the parameter _transformTypeCollectionNameToDocumentIdPrefix is 46.
Long Identifier,Raven.Client.Documents.Conventions,DocumentConventions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Conventions\DocumentConventions.cs,,The length of the parameter _findIdentityPropertyNameFromCollectionName is 43.
Long Identifier,Raven.Client.Documents.Conventions,DocumentConventions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Conventions\DocumentConventions.cs,,The length of the parameter _findPropertyNameForDynamicIndex is 32.
Long Identifier,Raven.Client.Documents.Conventions,DocumentConventions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Conventions\DocumentConventions.cs,,The length of the parameter _findProjectedPropertyNameForIndex is 34.
Long Identifier,Raven.Client.Documents.Conventions,DocumentConventions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Conventions\DocumentConventions.cs,,The length of the parameter _maxNumberOfRequestsPerSession is 30.
Long Identifier,Raven.Client.Documents.Conventions,DocumentConventions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Conventions\DocumentConventions.cs,,The length of the parameter _secondBroadcastAttemptTimeout is 30.
Long Identifier,Raven.Client.Documents.Conventions,DocumentConventions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Conventions\DocumentConventions.cs,,The length of the parameter _deserializeEntityFromBlittable is 31.
Long Identifier,Raven.Client.Documents.Conventions,DocumentConventions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Conventions\DocumentConventions.cs,,The length of the parameter _preserveDocumentPropertiesNotFoundOnModel is 42.
Long Identifier,Raven.Client.Documents.Conventions,BulkInsertConventions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Conventions\DocumentConventions.cs,,The length of the parameter _trySerializeEntityToJsonStream is 31.
Long Identifier,Raven.Client.Documents.Indexes,IndexFailureInformation,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\IndexFailureInformation.cs,,The length of the parameter SufficientNumberOfAttemptsToCheckFailureRate is 44.
Long Identifier,Raven.Client.Documents.Indexes,IndexFailureInformation,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\IndexFailureInformation.cs,,The length of the parameter MinimalNumberOfAttemptsToCheckFailureRate is 41.
Long Identifier,Raven.Client.Documents.Linq,RavenQueryProviderProcessor<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,VisitAndAlso,The length of the parameter isNotEqualCheckBoundsToAndAlsoLeft is 34.
Long Identifier,Raven.Client.Documents.Linq,RavenQueryProviderProcessor<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,VisitAndAlso,The length of the parameter isNotEqualCheckBoundsToAndAlsoRight is 35.
Long Identifier,Raven.Client.Documents.Linq,RavenQueryProviderProcessor<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,Execute,The length of the parameter executeQueryWithProjectionType is 30.
Long Identifier,Raven.Client.Documents.Linq,RavenQueryProviderProcessor<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,,The length of the parameter _loadAliasesMovedToOutputFunction is 33.
Long Identifier,Raven.Client.Documents.Operations,PatchOperation<TEntity>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Operations\PatchOperation.cs,PatchOperation,The length of the parameter skipPatchIfChangeVectorMismatch is 31.
Long Identifier,Raven.Client.Documents.Operations,PatchOperation,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Operations\PatchOperation.cs,PatchOperation,The length of the parameter skipPatchIfChangeVectorMismatch is 31.
Long Identifier,Raven.Client.Documents.Operations,PatchOperation,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Operations\PatchOperation.cs,,The length of the parameter _skipPatchIfChangeVectorMismatch is 32.
Long Identifier,Raven.Client.Documents.Operations,PatchCommand,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Operations\PatchOperation.cs,PatchCommand,The length of the parameter skipPatchIfChangeVectorMismatch is 31.
Long Identifier,Raven.Client.Documents.Operations,PatchCommand,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Operations\PatchOperation.cs,,The length of the parameter _skipPatchIfChangeVectorMismatch is 32.
Long Identifier,Raven.Client.Documents.Operations.ETL,Transformation,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Operations\ETL\Transformation.cs,,The length of the parameter GenericDeleteDocumentsBehaviorFunctionKey is 41.
Long Identifier,Raven.Client.Documents.Operations.ETL,Transformation,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Operations\ETL\Transformation.cs,,The length of the parameter GenericDeleteDocumentsBehaviorFunctionName is 42.
Long Identifier,Raven.Client.Documents.Operations.ETL,Transformation,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Operations\ETL\Transformation.cs,,The length of the parameter LoadCountersBehaviorMethodRegex is 31.
Long Identifier,Raven.Client.Documents.Operations.ETL,Transformation,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Operations\ETL\Transformation.cs,,The length of the parameter LoadCountersBehaviorMethodNameRegex is 35.
Long Identifier,Raven.Client.Documents.Operations.ETL,Transformation,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Operations\ETL\Transformation.cs,,The length of the parameter ParametersAndFunctionBodyRegex is 30.
Long Identifier,Raven.Client.Documents.Operations.ETL,Transformation,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Operations\ETL\Transformation.cs,,The length of the parameter DeleteDocumentsBehaviorMethodRegex is 34.
Long Identifier,Raven.Client.Documents.Operations.ETL,Transformation,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Operations\ETL\Transformation.cs,,The length of the parameter DeleteDocumentsBehaviorMethodNameRegex is 38.
Long Identifier,Raven.Client.Documents.Operations.ETL,Transformation,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Operations\ETL\Transformation.cs,,The length of the parameter GenericDeleteDocumentsBehaviorMethodRegex is 41.
Long Identifier,Raven.Client.Documents.Queries.MoreLikeThis,MoreLikeThisOptions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Queries\MoreLikeThis\MoreLikeThisOptions.cs,,The length of the parameter DefaultMaximumNumberOfTokensParsed is 34.
Long Identifier,Raven.Client.Documents.Queries.MoreLikeThis,MoreLikeThisOptions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Queries\MoreLikeThis\MoreLikeThisOptions.cs,,The length of the parameter DefaultMinimumDocumentFrequency is 31.
Long Identifier,Raven.Client.Documents.Queries.MoreLikeThis,MoreLikeThisOptions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Queries\MoreLikeThis\MoreLikeThisOptions.cs,,The length of the parameter DefaultMaximumDocumentFrequency is 31.
Long Identifier,Raven.Client.Documents.Session,DocumentsByEntityHolder,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\InMemoryDocumentSessionOperations.cs,,The length of the parameter _onBeforeStoreDocumentsByEntity is 31.
Long Identifier,Raven.Client.Documents.Session.Operations,YieldStreamResults,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\Operations\StreamOperation.cs,,The length of the parameter _docsCountOnCachedRenewSession is 30.
Long Identifier,Raven.Client.Documents.Smuggler,BackupUtils,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Smuggler\BackupUtils.cs,,The length of the parameter LegacyIncrementalBackupExtension is 32.
Long Identifier,Raven.Client.Documents.Smuggler,DatabaseSmugglerOptions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Smuggler\DatabaseSmugglerOptions.cs,,The length of the parameter DefaultOperateOnDatabaseRecordTypes is 35.
Long Identifier,Raven.Client.Documents.Smuggler,DatabaseSmugglerOptions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Smuggler\DatabaseSmugglerOptions.cs,,The length of the parameter DefaultMaxStepsForTransformScript is 33.
Long Identifier,Raven.Client.Documents.Subscriptions,SubscriptionWorker<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Subscriptions\SubscriptionWorker.cs,,The length of the parameter _subscriptionLocalRequestExecutor is 33.
Long Identifier,Raven.Client.Documents.Subscriptions,SubscriptionWorkerOptions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Subscriptions\SubscriptionWorkerOptions.cs,,The length of the parameter DefaultReceiveBufferSizeInBytes is 31.
Long Identifier,Raven.Client.Http,RequestExecutor,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Http\RequestExecutor.cs,UpdateClientConfigurationAsync,The length of the parameter oldDisableClientConfigurationUpdates is 36.
Long Identifier,Raven.Client.Http,RequestExecutor,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Http\RequestExecutor.cs,CreateHttpMessageHandler,The length of the parameter hasExplicitlySetCompressionUsage is 32.
Long Identifier,Raven.Client.Http,RequestExecutor,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Http\RequestExecutor.cs,OnServerCertificateCustomValidationCallback,The length of the parameter onServerCertificateCustomValidationCallback is 43.
Long Identifier,Raven.Client.Http,RequestExecutor,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Http\RequestExecutor.cs,,The length of the parameter GlobalHttpClientWithCompression is 31.
Long Identifier,Raven.Client.Http,RequestExecutor,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Http\RequestExecutor.cs,,The length of the parameter GlobalHttpClientWithoutCompression is 34.
Long Identifier,Raven.Client.Http,RequestExecutor,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Http\RequestExecutor.cs,,The length of the parameter _updateDatabaseTopologySemaphore is 32.
Long Identifier,Raven.Client.Http,RequestExecutor,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Http\RequestExecutor.cs,,The length of the parameter _updateClientConfigurationSemaphore is 35.
Long Identifier,Raven.Client.Http,RequestExecutor,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Http\RequestExecutor.cs,,The length of the parameter _disableClientConfigurationUpdates is 34.
Long Identifier,Raven.Client.Http,RequestExecutor,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Http\RequestExecutor.cs,,The length of the parameter _secondBroadcastAttemptTimeout is 30.
Long Identifier,Raven.Client.Http,RequestExecutor,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Http\RequestExecutor.cs,,The length of the parameter ServerCertificateCustomValidationCallbackRegistrationException is 62.
Long Identifier,Raven.Client.Http,RequestExecutor,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Http\RequestExecutor.cs,,The length of the parameter _serverCertificateCustomValidationCallback is 42.
Long Identifier,Raven.Client.Json,BlittableJsonWriter,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Json\BlittableJsonWriter.cs,,The length of the parameter _manualBlittableJsonDocumentBuilder is 35.
Long Identifier,Raven.Client.Json.Converters,JsonDeserializationClient,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Json\Converters\JsonDeserializationClient.cs,,The length of the parameter CountsWithSkippedCountAndLastEtag is 33.
Long Identifier,Raven.Client.Json.Converters,JsonDeserializationClient,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Json\Converters\JsonDeserializationClient.cs,,The length of the parameter GetOngoingTaskSubscriptionResult is 32.
Long Identifier,Raven.Client.Json.Converters,JsonDeserializationClient,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Json\Converters\JsonDeserializationClient.cs,,The length of the parameter OngoingTaskPullReplicationAsSinkResult is 38.
Long Identifier,Raven.Client.Json.Converters,JsonDeserializationClient,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Json\Converters\JsonDeserializationClient.cs,,The length of the parameter OngoingTaskPullReplicationAsHubResult is 37.
Long Identifier,Raven.Client.Json.Converters,JsonDeserializationClient,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Json\Converters\JsonDeserializationClient.cs,,The length of the parameter PullReplicationDefinitionAndCurrentConnectionsResult is 52.
Long Identifier,Raven.Client.Json.Converters,JsonDeserializationClient,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Json\Converters\JsonDeserializationClient.cs,,The length of the parameter GetOngoingTaskReplicationResult is 31.
Long Identifier,Raven.Client.Json.Converters,JsonDeserializationClient,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Json\Converters\JsonDeserializationClient.cs,,The length of the parameter ConfigureExpirationOperationResult is 34.
Long Identifier,Raven.Client.Json.Converters,JsonDeserializationClient,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Json\Converters\JsonDeserializationClient.cs,,The length of the parameter ConfigRevisionsOnConflictOperationResult is 40.
Long Identifier,Raven.Client.Json.Converters,JsonDeserializationClient,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Json\Converters\JsonDeserializationClient.cs,,The length of the parameter ConfigureRefreshOperationResult is 31.
Long Identifier,Raven.Client.Json.Converters,JsonDeserializationClient,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Json\Converters\JsonDeserializationClient.cs,,The length of the parameter ConfigurePeriodicBackupOperationResult is 38.
Long Identifier,Raven.Client.Json.Converters,JsonDeserializationClient,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Json\Converters\JsonDeserializationClient.cs,,The length of the parameter GetPeriodicBackupStatusOperationResult is 38.
Long Identifier,Raven.Client.Json.Converters,JsonDeserializationClient,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Json\Converters\JsonDeserializationClient.cs,,The length of the parameter ConfigureRevisionsOperationResult is 33.
Long Identifier,Raven.Client.Json.Converters,JsonDeserializationClient,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Json\Converters\JsonDeserializationClient.cs,,The length of the parameter PutServerWideBackupConfigurationResponse is 40.
Long Identifier,Raven.Client.Json.Converters,JsonDeserializationClient,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Json\Converters\JsonDeserializationClient.cs,,The length of the parameter GetServerWideBackupConfigurationsResponse is 41.
Long Identifier,Raven.Client.ServerWide,DatabaseRecord,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\ServerWide\DatabaseRecord.cs,,The length of the parameter TruncatedClusterTransactionCommandsCount is 40.
Long Identifier,Raven.Client.ServerWide.Tcp,TcpConnectionHeaderMessage,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\ServerWide\Tcp\TcpConnectionHeader.cs,,The length of the parameter ReplicationAttachmentMissingVersion41 is 37.
Long Identifier,Raven.Client.ServerWide.Tcp,TcpConnectionHeaderMessage,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\ServerWide\Tcp\TcpConnectionHeader.cs,,The length of the parameter OperationsToSupportedProtocolVersions is 37.
Long Identifier,Raven.Client.Util,ResourceNameValidator,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Util\ResourceNameValidator.cs,,The length of the parameter ValidResourceNameCharactersRegex is 32.
Long Identifier,Raven.Client.Util,ResourceNameValidator,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Util\ResourceNameValidator.cs,,The length of the parameter NameStartsOrEndsWithDotOrContainsConsecutiveDotsRegex is 53.
Long Statement,Raven.Client.Documents.BulkInsert,BulkInsertOperation,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\BulkInsert\BulkInsertOperation.cs,WaitForId,The length of the statement  "            await _requestExecutor.ExecuteAsync(bulkInsertGetIdRequest' _context' sessionInfo: null' token: _token).ConfigureAwait(false); " is 126.
Long Statement,Raven.Client.Documents.BulkInsert,BulkInsertOperation,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\BulkInsert\BulkInsertOperation.cs,AbortAsync,The length of the statement  "                await _requestExecutor.ExecuteAsync(new KillOperationCommand(_operationId)' _context' sessionInfo: null' token: _token).ConfigureAwait(false); " is 142.
Long Statement,Raven.Client.Documents.BulkInsert,BulkInsertOperation,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\BulkInsert\BulkInsertOperation.cs,AbortAsync,The length of the statement  "                throw new BulkInsertAbortedException("Unable to kill this bulk insert operation' because it was not found on the server."); " is 123.
Long Statement,Raven.Client.Documents.Changes,DatabaseChanges,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Changes\DatabaseChanges.cs,CreateClientWebSocket,The length of the statement  "                clientWebSocket.Options.RemoteCertificateValidationCallback += RequestExecutor.OnServerCertificateCustomValidationCallback; " is 123.
Long Statement,Raven.Client.Documents.Changes,DatabaseChanges,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Changes\DatabaseChanges.cs,ForOperationId,The length of the statement  "            var counter = GetOrAddConnectionState("operations/" + operationId' "watch-operation"' "unwatch-operation"' operationId.ToString()); " is 131.
Long Statement,Raven.Client.Documents.Changes,DatabaseChanges,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Changes\DatabaseChanges.cs,ForDocumentsStartingWith,The length of the statement  "                notification => notification.Id != null && notification.Id.StartsWith(docIdPrefix' StringComparison.OrdinalIgnoreCase)); " is 120.
Long Statement,Raven.Client.Documents.Changes,DatabaseChanges,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Changes\DatabaseChanges.cs,ForDocumentsInCollection,The length of the statement  "            var counter = GetOrAddConnectionState("collections/" + collectionName' "watch-collection"' "unwatch-collection"' collectionName); " is 129.
Long Statement,Raven.Client.Documents.Changes,DatabaseChanges,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Changes\DatabaseChanges.cs,ForCounterOfDocument,The length of the statement  "            var counter = GetOrAddConnectionState($"document/{documentId}/counter/{counterName}"' "watch-document-counter"' "unwatch-document-counter"' value: null' values: new[] { documentId' counterName }); " is 196.
Long Statement,Raven.Client.Documents.Changes,DatabaseChanges,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Changes\DatabaseChanges.cs,ForCounterOfDocument,The length of the statement  "                notification => string.Equals(counterName' notification.Name' StringComparison.OrdinalIgnoreCase) && string.Equals(documentId' notification.DocumentId' StringComparison.OrdinalIgnoreCase)); " is 189.
Long Statement,Raven.Client.Documents.Changes,DatabaseChanges,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Changes\DatabaseChanges.cs,ForCountersOfDocument,The length of the statement  "            var counter = GetOrAddConnectionState($"document/{documentId}/counter"' "watch-document-counters"' "unwatch-document-counters"' documentId); " is 140.
Long Statement,Raven.Client.Documents.Changes,DatabaseChanges,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Changes\DatabaseChanges.cs,Send,The length of the statement  "                await _client.SendAsync(buffer' WebSocketMessageType.Text' endOfMessage: true' cancellationToken: _cts.Token).ConfigureAwait(false); " is 132.
Long Statement,Raven.Client.Documents.Changes,DatabaseChanges,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Changes\DatabaseChanges.cs,DoWork,The length of the statement  "                            _serverNode = await _requestExecutor.HandleServerNotResponsive(_url.AbsoluteUri' _serverNode' _nodeIndex' e).ConfigureAwait(false); " is 131.
Long Statement,Raven.Client.Documents.Changes,DatabaseChanges,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Changes\DatabaseChanges.cs,ProcessChanges,The length of the statement  "                    using (var builder = new BlittableJsonDocumentBuilder(context' BlittableJsonDocumentBuilder.UsageMode.None' "readArray/singleResult"' parser' state)) " is 149.
Long Statement,Raven.Client.Documents.Changes,DatabaseChanges,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Changes\DatabaseChanges.cs,ProcessChanges,The length of the statement  "                                        await _requestExecutor.UpdateTopologyAsync(_serverNode' 0' true' debugTag: "watch-topology-change").ConfigureAwait(false); " is 122.
Long Statement,Raven.Client.Documents.Changes,DatabaseChangesOptions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Changes\DatabaseChangesOptions.cs,Equals,The length of the statement  "            return string.Equals(DatabaseName' other.DatabaseName' StringComparison.OrdinalIgnoreCase) && string.Equals(NodeTag' other.NodeTag' StringComparison.OrdinalIgnoreCase); " is 168.
Long Statement,Raven.Client.Documents.Changes,DatabaseChangesOptions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Changes\DatabaseChangesOptions.cs,GetHashCode,The length of the statement  "                return ((DatabaseName != null ? StringComparer.OrdinalIgnoreCase.GetHashCode(DatabaseName) : 0) * 397) ^ (NodeTag != null ? StringComparer.OrdinalIgnoreCase.GetHashCode(NodeTag) : 0); " is 183.
Long Statement,Raven.Client.Documents.Commands.Batches,SingleNodeBatchCommand,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Commands\Batches\BatchCommand.cs,SetResponse,The length of the statement  "                throw new InvalidOperationException("Got null response from the server after doing a batch' something is very wrong. Probably a garbled response."); " is 148.
Long Statement,Raven.Client.Documents.Commands.Batches,PutAttachmentCommandHelper,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Commands\Batches\PutAttachmentCommandHelper.cs,ThrowStreamWasAlreadyUsed,The length of the statement  "            throw new InvalidOperationException("It is forbidden to re-use the same stream for more than one attachment. Use a unique stream per put attachment command."); " is 159.
Long Statement,Raven.Client.Documents.Commands.Batches,PutAttachmentCommandHelper,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Commands\Batches\PutAttachmentCommandHelper.cs,ThrowPositionNotZero,The length of the statement  "            throw new InvalidOperationException($"Cannot put an attachment with a stream that have position which isn't zero (The position is: {streamPosition}) " + " is 152.
Long Statement,Raven.Client.Documents.Commands.Batches,PutAttachmentCommandHelper,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Commands\Batches\PutAttachmentCommandHelper.cs,ThrowNotSeekableStream,The length of the statement  "                "We require a seekable stream because we might failover to a different node if the current one is unavailable during the operation."); " is 134.
Long Statement,Raven.Client.Documents.Commands,HeadAttachmentCommand,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Commands\HeadAttachmentCommand.cs,CreateRequest,The length of the statement  "            url = $"{node.Url}/databases/{node.Database}/attachments?id={Uri.EscapeDataString(_documentId)}&name={Uri.EscapeDataString(_name)}"; " is 132.
Long Statement,Raven.Client.Documents.Commands,NextHiLoCommand,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Commands\NextHiLoCommand.cs,CreateRequest,The length of the statement  "            var path = $"hilo/next?tag={_tag}&lastBatchSize={_lastBatchSize}&lastRangeAt={_lastRangeAt:o}&identityPartsSeparator={_identityPartsSeparator}&lastMax={_lastRangeMax}"; " is 168.
Long Statement,Raven.Client.Documents.Commands.MultiGet,MultiGetCommand,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Commands\MultiGet\MultiGetCommand.cs,ReadResponse,The length of the statement  "                        using (var builder = new BlittableJsonDocumentBuilder(context' BlittableJsonDocumentBuilder.UsageMode.None' "multi_get/result"' parser' state)) " is 143.
Long Statement,Raven.Client.Documents.Commands.MultiGet,MultiGetCommand,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Commands\MultiGet\MultiGetCommand.cs,ReadResponse,The length of the statement  "                        using (var builder = new BlittableJsonDocumentBuilder(context' BlittableJsonDocumentBuilder.UsageMode.None' "multi_get/result"' parser' state)) " is 143.
Long Statement,Raven.Client.Documents.Conventions,DocumentConventions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Conventions\DocumentConventions.cs,RegisterCustomQueryTranslator,The length of the statement  "                throw new NotSupportedException("A custom query translator can only be used to evaluate a simple member access or method call."); " is 129.
Long Statement,Raven.Client.Documents.Conventions,DocumentConventions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Conventions\DocumentConventions.cs,RegisterAsyncIdConvention,The length of the statement  "            var item = new Tuple<Type' Func<string' object' Task<string>>>(typeof(TEntity)' (dbName' o) => func(dbName' (TEntity)o)); " is 121.
Long Statement,Raven.Client.Documents.Conventions,DocumentConventions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Conventions\DocumentConventions.cs,UpdateFrom,The length of the statement  "                _maxNumberOfRequestsPerSession = configuration.MaxNumberOfRequestsPerSession ?? _originalConfiguration.MaxNumberOfRequestsPerSession.Value; " is 139.
Long Statement,Raven.Client.Documents.Conventions,DocumentConventions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Conventions\DocumentConventions.cs,UpdateFrom,The length of the statement  "                _prettifyGeneratedLinqExpressions = configuration.PrettifyGeneratedLinqExpressions ?? _originalConfiguration.PrettifyGeneratedLinqExpressions.Value; " is 148.
Long Statement,Raven.Client.Documents.Conventions,DocumentConventions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Conventions\DocumentConventions.cs,GetPropertiesForType,The length of the statement  "            foreach (var propertyInfo in ReflectionUtil.GetPropertiesAndFieldsFor(type' BindingFlags.Public | BindingFlags.Instance | BindingFlags.NonPublic)) " is 146.
Long Statement,Raven.Client.Documents.Conventions,DocumentConventions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Conventions\DocumentConventions.cs,GetMemberInfoFromExpression,The length of the statement  "            throw new NotSupportedException("A custom query translator can only be used to evaluate a simple member access or method call."); " is 129.
Long Statement,Raven.Client.Documents.Conventions,DocumentConventions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Conventions\DocumentConventions.cs,AssertNotFrozen,The length of the statement  "                    $"Conventions has frozen after '{nameof(DocumentStore)}.{nameof(DocumentStore.Initialize)}()' and no changes can be applied to them."); " is 135.
Long Statement,System.Linq,DocumentQueryExtensions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\DocumentQueryExtensions.cs,Join,The length of the statement  "            return Enumerable.Join<TOuter' TInner' TKey' TResult>(outer' inner' outerKeySelector' innerKeySelector' resultSelector); " is 120.
Long Statement,System.Linq,DocumentQueryExtensions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\DocumentQueryExtensions.cs,Join,The length of the statement  "            return Enumerable.Join<TOuter' TInner' TKey' TResult>(outer' inner' outerKeySelector' innerKeySelector' resultSelector); " is 120.
Long Statement,System.Linq,DocumentQueryExtensions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\DocumentQueryExtensions.cs,Join,The length of the statement  "            return Enumerable.Join<TOuter' TInner' TKey' TResult>(outer' inner' outerKeySelector' innerKeySelector' resultSelector' comparer); " is 130.
Long Statement,System.Linq,DocumentQueryExtensions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\DocumentQueryExtensions.cs,Join,The length of the statement  "            return Enumerable.Join<TOuter' TInner' TKey' TResult>(outer' inner' outerKeySelector' innerKeySelector' resultSelector' comparer); " is 130.
Long Statement,System.Linq,DocumentQueryExtensions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\DocumentQueryExtensions.cs,GroupBy,The length of the statement  "            return Enumerable.GroupBy<TSource' TKey' TElement' TResult>(source' keySelector' elementSelector' resultSelector' comparer); " is 124.
Long Statement,System.Linq,DocumentQueryExtensions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\DocumentQueryExtensions.cs,GroupBy,The length of the statement  "            return Enumerable.GroupBy<TSource' TKey' TElement' TResult>(source' keySelector' elementSelector' resultSelector' comparer); " is 124.
Long Statement,System.Linq,DocumentQueryExtensions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\DocumentQueryExtensions.cs,GroupJoin,The length of the statement  "            return Enumerable.GroupJoin<TOuter' TInner' TKey' TResult>(outer' inner' outerKeySelector' innerKeySelector' resultSelector); " is 125.
Long Statement,System.Linq,DocumentQueryExtensions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\DocumentQueryExtensions.cs,GroupJoin,The length of the statement  "            return Enumerable.GroupJoin<TOuter' TInner' TKey' TResult>(outer' inner' outerKeySelector' innerKeySelector' resultSelector); " is 125.
Long Statement,System.Linq,DocumentQueryExtensions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\DocumentQueryExtensions.cs,GroupJoin,The length of the statement  "            return Enumerable.GroupJoin<TOuter' TInner' TKey' TResult>(outer' inner' outerKeySelector' innerKeySelector' resultSelector' comparer); " is 135.
Long Statement,System.Linq,DocumentQueryExtensions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\DocumentQueryExtensions.cs,GroupJoin,The length of the statement  "            return Enumerable.GroupJoin<TOuter' TInner' TKey' TResult>(outer' inner' outerKeySelector' innerKeySelector' resultSelector' comparer); " is 135.
Long Statement,Raven.Client.Documents,DocumentStore,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\DocumentStore.cs,GetRequestExecutor,The length of the statement  "                var forSingleNode = RequestExecutor.CreateForSingleNodeWithConfigurationUpdates(Urls[0]' database' Certificate' Conventions); " is 125.
Long Statement,Raven.Client.Documents,DocumentStore,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\DocumentStore.cs,SetRequestTimeout,The length of the statement  "            database = (database ?? Database) ?? throw new InvalidOperationException("Cannot use SetRequestTimeout without a default database defined " + " is 141.
Long Statement,Raven.Client.Documents,DocumentStore,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\DocumentStore.cs,DisableAggressiveCaching,The length of the statement  "            database = (database ?? Database) ?? throw new InvalidOperationException("Cannot use DisableAggressiveCaching without a default database defined " + " is 148.
Long Statement,Raven.Client.Documents,DocumentStore,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\DocumentStore.cs,CreateDatabaseChanges,The length of the statement  "            return new DatabaseChanges(GetRequestExecutor(node.DatabaseName)' node.DatabaseName' () => _databaseChanges.TryRemove(node' out var _)' node.NodeTag); " is 150.
Long Statement,Raven.Client.Documents,DocumentStore,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\DocumentStore.cs,AggressivelyCacheFor,The length of the statement  "            database = (database ?? Database) ?? throw new InvalidOperationException("Cannot use AggressivelyCache and AggressivelyCacheFor without a default database defined " + " is 166.
Long Statement,Raven.Client.Documents,DocumentStoreBase,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\DocumentStoreBase.cs,AssertInitialized,The length of the statement  "                throw new InvalidOperationException("You cannot open a session or access the database commands before initializing the document store. Did you forget calling Initialize()?"); " is 174.
Long Statement,Raven.Client.Documents,LinqExtensions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\LinqExtensions.cs,Include,The length of the statement  "            var queryable = source.Provider.CreateQuery(Expression.Call(null' currentMethod' expression' Expression.Constant(path))); " is 121.
Long Statement,Raven.Client.Documents,LinqExtensions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\LinqExtensions.cs,Include,The length of the statement  "            var queryable = source.Provider.CreateQuery(Expression.Call(null' currentMethod' expression' Expression.Constant(includes))); " is 125.
Long Statement,Raven.Client.Documents,LinqExtensions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\LinqExtensions.cs,AggregateUsing,The length of the statement  "            source = source.Provider.CreateQuery<T>(Expression.Call(null' currentMethod' expression' Expression.Constant(facetSetupDocumentId))); " is 133.
Long Statement,Raven.Client.Documents,LinqExtensions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\LinqExtensions.cs,ProjectInto,The length of the statement  "            var membersList = ReflectionUtil.GetPropertiesAndFieldsFor<TResult>(BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic).ToList(); " is 147.
Long Statement,Raven.Client.Documents,LinqExtensions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\LinqExtensions.cs,SuggestUsing,The length of the statement  "            source = source.Provider.CreateQuery<T>(Expression.Call(null' currentMethod' expression' Expression.Constant(suggestion))); " is 123.
Long Statement,Raven.Client.Documents,LinqExtensions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\LinqExtensions.cs,Where,The length of the statement  "            var queryable = source.Provider.CreateQuery(Expression.Call(null' currentMethod' expression' predicate' Expression.Constant(exact))); " is 133.
Long Statement,Raven.Client.Documents,LinqExtensions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\LinqExtensions.cs,Where,The length of the statement  "            var queryable = source.Provider.CreateQuery(Expression.Call(null' currentMethod' expression' predicate' Expression.Constant(exact))); " is 133.
Long Statement,Raven.Client.Documents,LinqExtensions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\LinqExtensions.cs,Spatial,The length of the statement  "            var queryable = source.Provider.CreateQuery(Expression.Call(null' currentMethod' expression' Expression.Constant(fieldName)' Expression.Constant(clause))); " is 155.
Long Statement,Raven.Client.Documents,LinqExtensions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\LinqExtensions.cs,Spatial,The length of the statement  "            var queryable = source.Provider.CreateQuery(Expression.Call(null' currentMethod' expression' Expression.Constant(field)' Expression.Constant(clause))); " is 151.
Long Statement,Raven.Client.Documents,LinqExtensions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\LinqExtensions.cs,OrderByDistance,The length of the statement  "            var queryable = source.Provider.CreateQuery(Expression.Call(null' currentMethod' expression' Expression.Constant(field)' Expression.Constant(latitude)' Expression.Constant(longitude))); " is 185.
Long Statement,Raven.Client.Documents,LinqExtensions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\LinqExtensions.cs,OrderByDistance,The length of the statement  "            var queryable = source.Provider.CreateQuery(Expression.Call(null' currentMethod' expression' Expression.Constant(field)' Expression.Constant(shapeWkt))); " is 153.
Long Statement,Raven.Client.Documents,LinqExtensions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\LinqExtensions.cs,OrderByDistance,The length of the statement  "            var queryable = source.Provider.CreateQuery(Expression.Call(null' currentMethod' expression' Expression.Constant(fieldName)' Expression.Constant(shapeWkt))); " is 157.
Long Statement,Raven.Client.Documents,LinqExtensions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\LinqExtensions.cs,OrderByDistanceDescending,The length of the statement  "            var queryable = source.Provider.CreateQuery(Expression.Call(null' currentMethod' expression' Expression.Constant(field)' Expression.Constant(shapeWkt))); " is 153.
Long Statement,Raven.Client.Documents,LinqExtensions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\LinqExtensions.cs,OrderBy,The length of the statement  "            var queryable = source.Provider.CreateQuery(Expression.Call(null' currentMethod' expression' Expression.Constant(path)' Expression.Constant(sorterName))); " is 154.
Long Statement,Raven.Client.Documents,LinqExtensions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\LinqExtensions.cs,OrderBy,The length of the statement  "            var queryable = source.Provider.CreateQuery(Expression.Call(null' currentMethod' expression' Expression.Constant(path)' Expression.Constant(ordering))); " is 152.
Long Statement,Raven.Client.Documents,LinqExtensions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\LinqExtensions.cs,OrderByDescending,The length of the statement  "            var queryable = source.Provider.CreateQuery(Expression.Call(null' currentMethod' expression' Expression.Constant(path)' Expression.Constant(sorterName))); " is 154.
Long Statement,Raven.Client.Documents,LinqExtensions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\LinqExtensions.cs,OrderByDescending,The length of the statement  "            var queryable = source.Provider.CreateQuery(Expression.Call(null' currentMethod' expression' Expression.Constant(path)' Expression.Constant(ordering))); " is 152.
Long Statement,Raven.Client.Documents,LinqExtensions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\LinqExtensions.cs,ThenBy,The length of the statement  "            var queryable = source.Provider.CreateQuery(Expression.Call(null' currentMethod' expression' Expression.Constant(path)' Expression.Constant(sorterName))); " is 154.
Long Statement,Raven.Client.Documents,LinqExtensions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\LinqExtensions.cs,ThenBy,The length of the statement  "            var queryable = source.Provider.CreateQuery(Expression.Call(null' currentMethod' expression' Expression.Constant(path)' Expression.Constant(ordering))); " is 152.
Long Statement,Raven.Client.Documents,LinqExtensions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\LinqExtensions.cs,ThenByDescending,The length of the statement  "            var queryable = source.Provider.CreateQuery(Expression.Call(null' currentMethod' expression' Expression.Constant(path)' Expression.Constant(sorterName))); " is 154.
Long Statement,Raven.Client.Documents,LinqExtensions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\LinqExtensions.cs,ThenByDescending,The length of the statement  "            var queryable = source.Provider.CreateQuery(Expression.Call(null' currentMethod' expression' Expression.Constant(path)' Expression.Constant(ordering))); " is 152.
Long Statement,Raven.Client.Documents,LinqExtensions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\LinqExtensions.cs,MoreLikeThis,The length of the statement  "            var queryable = source.Provider.CreateQuery(Expression.Call(null' currentMethod' expression' Expression.Constant(moreLikeThis))); " is 129.
Long Statement,Raven.Client.Documents.Identity,GenerateEntityIdOnTheClient,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Identity\GenerateEntityIdOnTheClient.cs,SetPropertyOrField,The length of the statement  "                throw new NotSupportedException($"Cannot set identity value '{id}' on {name} '{memberInfo.Name}' for type '{entity.GetType().FullName}' because {name} type is not a string."); " is 175.
Long Statement,Raven.Client.Documents.Indexes,AbstractIndexCreationTask,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\AbstractIndexCreationTask.cs,ExecuteAsync,The length of the statement  "                return store.Maintenance.ForDatabase(database ?? store.Database).SendAsync(new PutIndexesOperation(indexDefinition)' token); " is 124.
Long Statement,Raven.Client.Documents.Indexes,AbstractJavaScriptIndexCreationTask,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\AbstractJavaScriptIndexCreationTask.cs,CreateIndexDefinition,The length of the statement  "            _definition.AdditionalSources = AdditionalSources ?? (_definition.AdditionalSources = new Dictionary<string' string>()); " is 120.
Long Statement,Raven.Client.Documents.Indexes,AbstractMultiMapIndexCreationTask<TReduceResult>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\AbstractMultiMapIndexCreationTask.cs,AddMap,The length of the statement  "                string querySource = typeof(TSource) == typeof(object) ? "docs" : IndexDefinitionHelper.GetQuerySource(Conventions' typeof(TSource)); " is 133.
Long Statement,Raven.Client.Documents.Indexes,AbstractMultiMapIndexCreationTask<TReduceResult>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\AbstractMultiMapIndexCreationTask.cs,AddMap,The length of the statement  "                return IndexDefinitionHelper.PruneToFailureLinqQueryAsStringToWorkableCode<TSource' TReduceResult>(expression' Conventions' querySource' translateIdentityProperty: true); " is 170.
Long Statement,Raven.Client.Documents.Indexes,AbstractMultiMapIndexCreationTask<TReduceResult>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\AbstractMultiMapIndexCreationTask.cs,AddMapForAll,The length of the statement  "                var lambdaExpression = Expression.Lambda(delegateType' expr.Body' Expression.Parameter(genericEnumerable' expr.Parameters[0].Name)); " is 132.
Long Statement,Raven.Client.Documents.Indexes,AutoIndexDefinition,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\AutoIndexDefinition.cs,Compare,The length of the statement  "            if (string.Equals(Collection' other.Collection) == false || DictionaryExtensions.ContentEquals(MapFields' other.MapFields) == false) " is 132.
Long Statement,Raven.Client.Documents.Indexes,ExpressionOperatorPrecedenceExtension,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\ExpressionOperatorPrecedenceExtension.cs,NeedsParenthesisFor,The length of the statement  "            if (outer == ExpressionOperatorPrecedence.ParenthesisNotNeeded || inner == ExpressionOperatorPrecedence.ParenthesisNotNeeded) " is 125.
Long Statement,Raven.Client.Documents.Indexes,ExpressionStringBuilder,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\ExpressionStringBuilder.cs,GetPropertyName,The length of the statement  "            var memberInfo = (MemberInfo)exprType.GetProperty(name' BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly) ?? " is 156.
Long Statement,Raven.Client.Documents.Indexes,ExpressionStringBuilder,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\ExpressionStringBuilder.cs,GetPropertyName,The length of the statement  "                exprType.GetField(name' BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly); " is 122.
Long Statement,Raven.Client.Documents.Indexes,ExpressionStringBuilder,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\ExpressionStringBuilder.cs,GetPropertyName,The length of the statement  "                memberInfo = ReflectionUtil.GetPropertiesAndFieldsFor(exprType' BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance) " is 133.
Long Statement,Raven.Client.Documents.Indexes,ExpressionStringBuilder,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\ExpressionStringBuilder.cs,ConvertTypeToCSharpKeyword,The length of the statement  "                    throw new InvalidOperationException("Cannot make use of type " + type + " because it is a generic type that doesn't exists on the server"); " is 139.
Long Statement,Raven.Client.Documents.Indexes,ExpressionStringBuilder,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\ExpressionStringBuilder.cs,VisitDebugInfo,The length of the statement  "            var s = string.Format(CultureInfo.CurrentCulture' "<DebugInfo({0}: {1}' {2}' {3}' {4})>"' node.Document.FileName' node.StartLine' node.StartColumn' node.EndLine' node.EndColumn); " is 178.
Long Statement,Raven.Client.Documents.Indexes,ExpressionStringBuilder,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\ExpressionStringBuilder.cs,VisitMethodCall,The length of the statement  "                if (node.Object.Type.GetInterfaces().Any(i => i.IsGenericType && i.GetGenericTypeDefinition() == typeof(IDictionary<'>))) " is 121.
Long Statement,Raven.Client.Documents.Indexes,ExpressionStringBuilder,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\ExpressionStringBuilder.cs,VisitMethodCall,The length of the statement  "                if (node.Arguments[0].Type.GetInterfaces().Any(i => i.IsGenericType && i.GetGenericTypeDefinition() == typeof(IDictionary<'>))) " is 127.
Long Statement,Raven.Client.Documents.Indexes,ExpressionStringBuilder,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\ExpressionStringBuilder.cs,VisitMethodCall,The length of the statement  "                if (node.Method.ReturnType.GetInterfaces().Any(i => i.IsGenericType && i.GetGenericTypeDefinition() == typeof(IDictionary<'>))) " is 127.
Long Statement,Raven.Client.Documents.Indexes,ExpressionStringBuilder,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\ExpressionStringBuilder.cs,ShouldConvert,The length of the statement  "            return nonNullableType.GetTypeInfo().Assembly == typeof(string).GetTypeInfo().Assembly && (nonNullableType.GetTypeInfo().IsGenericType == false); " is 145.
Long Statement,Raven.Client.Documents.Indexes,FieldUtil,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\FieldUtil.cs,GetRangeTypeFromFieldName,The length of the statement  "                        throw new InvalidOperationException($"Client does not support '{Constants.Documents.Indexing.Fields.RangeFieldSuffix}' suffix any longer. Please use '{Constants.Documents.Indexing.Fields.RangeFieldSuffixLong}' or '{Constants.Documents.Indexing.Fields.RangeFieldSuffixDouble}' suffixes."); " is 288.
Long Statement,Raven.Client.Documents.Indexes,FieldUtil,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\FieldUtil.cs,ApplyRangeSuffixIfNecessary,The length of the statement  "                throw new InvalidOperationException($"Client does not support '{Constants.Documents.Indexing.Fields.RangeFieldSuffix}' suffix any longer. Please use '{Constants.Documents.Indexing.Fields.RangeFieldSuffixLong}' or '{Constants.Documents.Indexing.Fields.RangeFieldSuffixDouble}' suffixes."); " is 288.
Long Statement,Raven.Client.Documents.Indexes,IndexCreation,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\IndexCreation.cs,CreateIndexesAsync,The length of the statement  "                await store.Maintenance.ForDatabase(database ?? store.Database).SendAsync(new PutIndexesOperation(indexesToAdd)' token).ConfigureAwait(false); " is 142.
Long Statement,Raven.Client.Documents.Indexes,IndexCreation,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\IndexCreation.cs,CreateIndexesAsync,The length of the statement  "                throw new AggregateException("Failed to create one or more indexes. Please see inner exceptions for more details."' indexCompilationExceptions); " is 144.
Long Statement,Raven.Client.Documents.Indexes,IndexDefinition,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\IndexDefinition.cs,Compare,The length of the statement  "            if (string.Equals(OutputReduceToCollection' other.OutputReduceToCollection' StringComparison.OrdinalIgnoreCase) == false) " is 121.
Long Statement,Raven.Client.Documents.Indexes,IndexDefinition,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\IndexDefinition.cs,Compare,The length of the statement  "            if (string.Equals(PatternForOutputReduceToCollectionReferences' other.PatternForOutputReduceToCollectionReferences' StringComparison.OrdinalIgnoreCase) == false) " is 161.
Long Statement,Raven.Client.Documents.Indexes,IndexDefinition,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\IndexDefinition.cs,Compare,The length of the statement  "                if ((LockMode == null && other.LockMode == IndexLockMode.Unlock) || (LockMode == IndexLockMode.Unlock && other.LockMode == null)) " is 129.
Long Statement,Raven.Client.Documents.Indexes,IndexDefinition,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\IndexDefinition.cs,Compare,The length of the statement  "                if ((Priority == null && other.Priority == IndexPriority.Normal) || (Priority == IndexPriority.Normal && other.Priority == null)) " is 129.
Long Statement,Raven.Client.Documents.Indexes,IndexDefinition,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\IndexDefinition.cs,Equals,The length of the statement  "                ? result.HasFlag(IndexDefinitionCompareDifferences.MapsFormatting) == false && result.HasFlag(IndexDefinitionCompareDifferences.ReduceFormatting) == false " is 154.
Long Statement,Raven.Client.Documents.Indexes,IndexDefinition,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\IndexDefinition.cs,Equals,The length of the statement  "                : result.HasFlag(IndexDefinitionCompareDifferences.Maps) == false && result.HasFlag(IndexDefinitionCompareDifferences.Reduce) == false; " is 135.
Long Statement,Raven.Client.Documents.Indexes,IndexDefinitionBuilder<TDocument;TReduceResult>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\IndexDefinitionBuilder.cs,ToIndexDefinition,The length of the statement  "                    string.Format("Map is required to generate an index' you cannot create an index without a valid Map property (in index {0})."' _indexName)); " is 140.
Long Statement,Raven.Client.Documents.Indexes,IndexDefinitionBuilder<TDocument;TReduceResult>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\IndexDefinitionBuilder.cs,ToIndexDefinition,The length of the statement  "                string querySource = (typeof(TDocument) == typeof(object) || ContainsWhereEntityIs()) ? "docs" : IndexDefinitionHelper.GetQuerySource(conventions' typeof(TDocument)); " is 166.
Long Statement,Raven.Client.Documents.Indexes,IndexDefinitionBuilder<TDocument;TReduceResult>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\IndexDefinitionBuilder.cs,ToIndexDefinition,The length of the statement  "                    Reduce = IndexDefinitionHelper.PruneToFailureLinqQueryAsStringToWorkableCode<TDocument' TReduceResult>(Reduce' conventions' "results"' translateIdentityProperty: false)' " is 169.
Long Statement,Raven.Client.Documents.Indexes,IndexDefinitionBuilder<TDocument;TReduceResult>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\IndexDefinitionBuilder.cs,ToIndexDefinition,The length of the statement  "                    indexDefinition.PatternForOutputReduceToCollectionReferences = ConvertPatternForOutputReduceToCollectionReferencesToString(PatternForOutputReduceToCollectionReferences); " is 169.
Long Statement,Raven.Client.Documents.Indexes,IndexDefinitionBuilder<TDocument;TReduceResult>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\IndexDefinitionBuilder.cs,ConvertPatternForOutputReduceToCollectionReferencesToString,The length of the statement  "                        $"{nameof(MethodCallExpression)} of {nameof(PatternForOutputReduceToCollectionReferences)} expression must have at least 1 argument"); " is 134.
Long Statement,Raven.Client.Documents.Indexes,IndexDefinitionBuilder<TDocument;TReduceResult>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\IndexDefinitionBuilder.cs,ConvertPatternForOutputReduceToCollectionReferencesToString,The length of the statement  "                    throw new InvalidOperationException($"First argument of {nameof(MethodCallExpression)} of {nameof(PatternForOutputReduceToCollectionReferences)} expression must be {nameof(ConstantExpression)}"); " is 195.
Long Statement,Raven.Client.Documents.Indexes,IndexDefinitionBuilder<TDocument;TReduceResult>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\IndexDefinitionBuilder.cs,ConvertPatternForOutputReduceToCollectionReferencesToString,The length of the statement  "                            throw new InvalidOperationException($"Properties provided in {nameof(PatternForOutputReduceToCollectionReferences)} expression must be {nameof(MemberAccessException)}"); " is 169.
Long Statement,Raven.Client.Documents.Indexes,IndexDefinitionBuilder<TDocument;TReduceResult>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\IndexDefinitionBuilder.cs,ConvertPatternForOutputReduceToCollectionReferencesToString,The length of the statement  "                        throw new NotSupportedException($"Unsupported expression in {nameof(PatternForOutputReduceToCollectionReferences)}: '{expression}'"); " is 133.
Long Statement,Raven.Client.Documents.Indexes,IndexDefinitionBuilder<TDocument;TReduceResult>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\IndexDefinitionBuilder.cs,ConvertPatternForOutputReduceToCollectionReferencesToString,The length of the statement  "                            throw new InvalidOperationException($"Properties provided in {nameof(PatternForOutputReduceToCollectionReferences)} expression must be {nameof(MemberAccessException)}"); " is 169.
Long Statement,Raven.Client.Documents.Indexes,IndexDefinitionBuilder<TDocument;TReduceResult>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\IndexDefinitionBuilder.cs,ConvertPatternForOutputReduceToCollectionReferencesToString,The length of the statement  "                    throw new NotSupportedException($"Unsupported expression in {nameof(PatternForOutputReduceToCollectionReferences)}: '{expr}'"); " is 127.
Long Statement,Raven.Client.Documents.Indexes,IndexDefinitionBuilder<TDocument;TReduceResult>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\IndexDefinitionBuilder.cs,ConvertPatternForOutputReduceToCollectionReferencesToString,The length of the statement  "            throw new InvalidOperationException($"Body of {nameof(PatternForOutputReduceToCollectionReferences)} expression must be {nameof(MethodCallExpression)}"); " is 153.
Long Statement,Raven.Client.Documents.Indexes,IndexDefinitionHelper,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\IndexDefinitionHelper.cs,PruneToFailureLinqQueryAsStringToWorkableCode,The length of the statement  "                            queryRootName = TryCaptureQueryRoot(methodCallExpression.Arguments.FirstOrDefault(x => x.NodeType == ExpressionType.Call || x.NodeType == ExpressionType.Lambda) ?? methodCallExpression.Arguments[0]); " is 199.
Long Statement,Raven.Client.Documents.Indexes,IndexDefinitionHelper,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\IndexDefinitionHelper.cs,PruneToFailureLinqQueryAsStringToWorkableCode,The length of the statement  "            var linqQuery = ExpressionStringBuilder.ExpressionToString(conventions' translateIdentityProperty' typeof(TQueryRoot)' queryRootName' expression); " is 146.
Long Statement,Raven.Client.Documents.Indexes,IndexFailureInformation,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\IndexFailureInformation.cs,GetErrorMessage,The length of the statement  "                return $"Index {Name} is invalid' out of {MapAttempts} map attempts' {MapErrors} has failed. Error rate of {FailureRate:#.##%} exceeds allowed 15% error rate"; " is 159.
Long Statement,Raven.Client.Documents.Indexes,IndexFailureInformation,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\IndexFailureInformation.cs,GetErrorMessage,The length of the statement  "            return $"Index {Name} is invalid' out of {MapAttempts} map attempts and {ReduceAttempts} reduce attempts' {MapErrors} and {ReduceErrors} has failed respectively. Error rate of {FailureRate:#.##%} exceeds allowed 15% error rate"; " is 228.
Long Statement,Raven.Client.Documents.Indexes,IndexTypeExtensions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\IndexType.cs,IsStatic,The length of the statement  "            return self == IndexType.Map || self == IndexType.MapReduce || self == IndexType.JavaScriptMap || self == IndexType.JavaScriptMapReduce; " is 136.
Long Statement,Raven.Client.Documents.Indexes,JSBeautify,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\JSBeautify.cs,trim_output,The length of the statement  "            while ((output.Length > 0) && ((output[output.Length - 1] == ' ') || (output[output.Length - 1].ToString() == indent_string))) " is 126.
Long Statement,Raven.Client.Documents.Indexes,JSBeautify,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\JSBeautify.cs,get_next_token,The length of the statement  "                if ((parser_pos != input.Length) && (Regex.IsMatch(c' "^[0-9]+[Ee]$")) && ((input[parser_pos] == '-') || (input[parser_pos] == '+'))) " is 133.
Long Statement,Raven.Client.Documents.Indexes,JSBeautify,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\JSBeautify.cs,get_next_token,The length of the statement  "                        while (!((input[parser_pos] == '*') && (input[parser_pos + 1] > '\0') && (input[parser_pos + 1] == '/') && (parser_pos < input.Length))) " is 136.
Long Statement,Raven.Client.Documents.Indexes,JSBeautify,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\JSBeautify.cs,get_next_token,The length of the statement  "                                              && ((last_type == "TK_WORD" && last_text == "return") || ((last_type == "TK_START_EXPR") || (last_type == "TK_START_BLOCK") || (last_type == "TK_END_BLOCK") " is 156.
Long Statement,Raven.Client.Documents.Linq,LinqPathProvider,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\LinqPathProvider.cs,GetPath,The length of the statement  "                    var itemKey = GetValueFromExpression(callExpression.Arguments[0]' callExpression.Method.GetParameters()[0].ParameterType).ToString(); " is 133.
Long Statement,Raven.Client.Documents.Linq,LinqPathProvider,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\LinqPathProvider.cs,CreateCounterResult,The length of the statement  "            var counterName = (callExpression.Arguments[callExpression.Arguments.Count - 1] as ConstantExpression)?.Value.ToString(); " is 121.
Long Statement,Raven.Client.Documents.Linq,LinqPathProvider,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\LinqPathProvider.cs,GetMemberExpression,The length of the statement  "                                                    "RavenDB doesn't allow computation during the query' computation is only allowed during index. Consider moving the operation to an index."); " is 140.
Long Statement,Raven.Client.Documents.Linq,LinqPathProvider,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\LinqPathProvider.cs,GetMemberValue,The length of the statement  "            else if (memberExpression.Expression is MethodCallExpression && GetValueFromExpressionWithoutConversion(memberExpression.Expression' out var value) && " is 150.
Long Statement,Raven.Client.Documents.Linq,RavenQueryProvider<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProvider.cs,ThrowQueryGeneratorCastIsNotSupported,The length of the statement  "            throw new NotSupportedException($"Current operation is not supported' please use another query cast. {_queryGenerator?.GetType()?.FullName} cannot be casted to IDocumentSession"); " is 179.
Long Statement,Raven.Client.Documents.Linq,RavenQueryProviderProcessor<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,VisitExpression,The length of the statement  "                                throw new NotSupportedException("Invocation expressions such as Where(x => SomeFunction(x)) are not supported in RavenDB queries"); " is 131.
Long Statement,Raven.Client.Documents.Linq,RavenQueryProviderProcessor<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,VisitAndAlso,The length of the statement  "            // negate optimization : (RavenDB-3973).  in order to disable you may just set isNotEqualCheckBoundsToAndAlsoLeft & Right to "false"  " is 132.
Long Statement,Raven.Client.Documents.Linq,RavenQueryProviderProcessor<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,TryHandleBetween,The length of the statement  "                (andAlso.Left.NodeType == ExpressionType.GreaterThanOrEqual && andAlso.Right.NodeType == ExpressionType.LessThanOrEqual) || " is 123.
Long Statement,Raven.Client.Documents.Linq,RavenQueryProviderProcessor<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,TryHandleBetween,The length of the statement  "                (andAlso.Left.NodeType == ExpressionType.LessThanOrEqual && andAlso.Right.NodeType == ExpressionType.GreaterThanOrEqual); " is 121.
Long Statement,Raven.Client.Documents.Linq,RavenQueryProviderProcessor<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,TryHandleBetween,The length of the statement  "            if (andAlso.Left.NodeType == ExpressionType.GreaterThanOrEqual || andAlso.Left.NodeType == ExpressionType.LessThanOrEqual) " is 122.
Long Statement,Raven.Client.Documents.Linq,RavenQueryProviderProcessor<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,VisitEquals,The length of the statement  "                        throw new NotSupportedException("Nodes of type + " + expression.Object.NodeType + " are not understood in this context"); " is 121.
Long Statement,Raven.Client.Documents.Linq,RavenQueryProviderProcessor<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,VisitEquals,The length of the statement  "                            "RavenDB queries case sensitivity is dependent on the index' not the query. If you need case sensitive queries' use a static index and an NotAnalyzed field for that."); " is 168.
Long Statement,Raven.Client.Documents.Linq,RavenQueryProviderProcessor<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,VisitStringContains,The length of the statement  "            throw new NotSupportedException(@"Contains is not supported' doing a substring match over a text field is a very slow operation' and is not allowed using the Linq API. " is 167.
Long Statement,Raven.Client.Documents.Linq,RavenQueryProviderProcessor<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,VisitStringContains,The length of the statement  "The recommended method is to use full text search (mark the field as Analyzed and use the Search() method to query it."); " is 121.
Long Statement,Raven.Client.Documents.Linq,RavenQueryProviderProcessor<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,VisitRegexMethodCall,The length of the statement  "                throw new NotSupportedException(string.Format("Method not supported: Regex.{0}. Expression: {1}."' expression.Method.Name' expression)); " is 136.
Long Statement,Raven.Client.Documents.Linq,RavenQueryProviderProcessor<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,VisitLinqExtensionsMethodCall,The length of the statement  "                    LinqPathProvider.GetValueFromExpressionWithoutConversion(expression.Arguments[2]' out var orderByOrderingTypeOrSorterName); " is 123.
Long Statement,Raven.Client.Documents.Linq,RavenQueryProviderProcessor<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,VisitLinqExtensionsMethodCall,The length of the statement  "                    LinqPathProvider.GetValueFromExpressionWithoutConversion(expression.Arguments[2]' out var orderByDescendingOrderingTypeOrSorterName); " is 133.
Long Statement,Raven.Client.Documents.Linq,RavenQueryProviderProcessor<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,VisitLinqExtensionsMethodCall,The length of the statement  "                        _documentQuery.OrderByDescending((string)orderByDescendingPath' (OrderingType)orderByDescendingOrderingTypeOrSorterName); " is 121.
Long Statement,Raven.Client.Documents.Linq,RavenQueryProviderProcessor<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,VisitQueryableMethodCall,The length of the statement  "                    if (expression.Arguments.Count == 5) // GroupBy(x => keySelector' x => elementSelector' x => resultSelector' IEqualityComparer) " is 127.
Long Statement,Raven.Client.Documents.Linq,RavenQueryProviderProcessor<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,VisitGroupBy,The length of the statement  "                            throw new InvalidOperationException($"We expected MemberAssignment expression while got {memberInitExpression.Bindings[index].GetType().FullName} in GroupBy"); " is 159.
Long Statement,Raven.Client.Documents.Linq,RavenQueryProviderProcessor<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,VisitGroupBy,The length of the statement  "                    _documentQuery.GroupBy((string.Join("."' parts)' arrayBehavior == GroupByArrayBehavior.ByContent ? GroupByMethod.Array : GroupByMethod.None)); " is 142.
Long Statement,Raven.Client.Documents.Linq,RavenQueryProviderProcessor<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,VisitSelect,The length of the statement  "                //Anonymous types come through here .Select(x => new { x.Cost } ) doesn't use a member initializer' even though it looks like it does " is 133.
Long Statement,Raven.Client.Documents.Linq,RavenQueryProviderProcessor<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,HandleLoad,The length of the statement  "                if (param == "<>h__TransparentIdentifier0" || _fromAlias.StartsWith(DefaultAliasPrefix) || _aliasKeywords.Contains(param)) " is 122.
Long Statement,Raven.Client.Documents.Linq,RavenQueryProviderProcessor<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,AppendLineToOutputFunction,The length of the statement  "            _declareBuilder.Append("\t").Append("var ").Append(name).Append(" = ").Append(js).Append(";").Append(Environment.NewLine); " is 122.
Long Statement,Raven.Client.Documents.Linq,RavenQueryProviderProcessor<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,ToJs,The length of the statement  "                extensions[extensions.Length - 1] = new JavascriptConversionExtensions.IdentityPropertySupport(_documentQuery.Conventions); " is 123.
Long Statement,Raven.Client.Documents.Linq,RavenQueryProviderProcessor<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,VisitSelectAfterGroupBy,The length of the statement  "                //Anonymous types come through here .Select(x => new { x.Cost } ) doesn't use a member initializer' even though it looks like it does " is 133.
Long Statement,Raven.Client.Documents.Linq,RavenQueryProviderProcessor<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,VisitSelectAfterGroupBy,The length of the statement  "                        HandleOutputFieldOfDynamicMapReduce(lambdaExpression' newExpression.Arguments[index]' newExpression.Members[index]' elementSelectorPath); " is 137.
Long Statement,Raven.Client.Documents.Linq,RavenQueryProviderProcessor<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,HandleOutputFieldOfDynamicMapReduce,The length of the statement  "                    var parameterExpression = (ParameterExpression)fieldExpression; // GroupBy(x => key' x => element' (parameter' g) => new { Name = parameter' ... }) " is 147.
Long Statement,Raven.Client.Documents.Linq,RavenQueryProviderProcessor<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,HandleOutputFieldOfDynamicMapReduce,The length of the statement  "                        throw new NotSupportedException($"Lambda with {entireExpression.Parameters.Count} parameters is not supported inside GroupBy"); " is 127.
Long Statement,Raven.Client.Documents.Linq,RavenQueryProviderProcessor<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,AddMapReduceField,The length of the statement  "                throw new NotSupportedException($"Unsupported method in select of dynamic map reduce query: {mapReduceOperationCall.Method.Name} of type {mapReduceOperationCall.Method.DeclaringType}"); " is 185.
Long Statement,Raven.Client.Documents.Linq,RavenQueryProviderProcessor<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,AddMapReduceField,The length of the statement  "                                        throw new NotSupportedException($"Incompatible number of arguments of Sum function: {methodCallExpression.Arguments.Count}"); " is 125.
Long Statement,Raven.Client.Documents.Linq,RavenQueryProviderProcessor<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,AddMapReduceField,The length of the statement  "            throw new NotSupportedException($"Map-Reduce operation '{mapReduceOperation}' in '{mapReduceOperationCall}' is not supported."); " is 128.
Long Statement,Raven.Client.Documents.Linq,RavenQueryProviderProcessor<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,GetFieldNameForRangeQuery,The length of the statement  "                    throw new NotSupportedException("You cannot issue range queries on a identity property that is of a numeric type." + Environment.NewLine + " is 138.
Long Statement,Raven.Client.Documents.Linq,RavenQueryProviderProcessor<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,GetDocumentQueryFor,The length of the statement  "                    _documentQuery.Highlight(highlighting.FieldName' highlighting.FragmentLength' highlighting.FragmentCount' highlighting.Options' out _); " is 135.
Long Statement,Raven.Client.Documents.Linq,RavenQueryProviderProcessor<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,GetDocumentQueryFor,The length of the statement  "                return documentQuery.CreateDocumentQueryInternal<T>(new QueryData(new[] { _jsSelectBody }' _jsProjectionNames' _fromAlias' _declareToken' _loadTokens' true)); " is 158.
Long Statement,Raven.Client.Documents.Linq,RavenQueryProviderProcessor<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,GetAsyncDocumentQueryFor,The length of the statement  "                    _documentQuery.Highlight(highlighting.FieldName' highlighting.FragmentLength' highlighting.FragmentCount' highlighting.Options' out _); " is 135.
Long Statement,Raven.Client.Documents.Linq,RavenQueryProviderProcessor<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,GetAsyncDocumentQueryFor,The length of the statement  "                return asyncDocumentQuery.CreateDocumentQueryInternal<T>(new QueryData(new[] { _jsSelectBody }' _jsProjectionNames' _fromAlias' _declareToken' _loadTokens' true)); " is 163.
Long Statement,Raven.Client.Documents.Linq,RavenQueryProviderProcessor<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,GetAsyncDocumentQueryFor,The length of the statement  "            return asyncDocumentQuery.CreateDocumentQueryInternal<T>(new QueryData(fields' projections' _fromAlias' null' _loadTokens) " is 122.
Long Statement,Raven.Client.Documents.Linq,RavenQueryProviderProcessor<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,Execute,The length of the statement  "            var genericExecuteQuery = typeof(RavenQueryProviderProcessor<T>).GetMethod("ExecuteQuery"' BindingFlags.Instance | BindingFlags.NonPublic); " is 139.
Long Statement,Raven.Client.Documents.Linq,RavenQueryProviderProcessor<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,ExecuteQuery,The length of the statement  "                new QueryData(fields' projections' _fromAlias' _declareToken' _loadTokens' _declareToken != null || _jsSelectBody != null) " is 122.
Long Statement,Raven.Client.Documents.Linq,FieldToFetch,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,Equals,The length of the statement  "            return string.Equals(Name' other.Name' StringComparison.OrdinalIgnoreCase) && string.Equals(Alias' other.Alias' StringComparison.Ordinal); " is 138.
Long Statement,Raven.Client.Documents.Linq,FieldToFetch,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,GetHashCode,The length of the statement  "                return ((Name != null ? StringComparer.OrdinalIgnoreCase.GetHashCode(Name) : 0) * 397) ^ (Alias != null ? StringComparer.Ordinal.GetHashCode(Alias) : 0); " is 153.
Long Statement,Raven.Client.Documents.Operations.Attachments,DeleteAttachmentCommand,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Operations\Attachments\DeleteAttachmentOperation.cs,CreateRequest,The length of the statement  "                url = $"{node.Url}/databases/{node.Database}/attachments?id={Uri.EscapeDataString(_documentId)}&name={Uri.EscapeDataString(_name)}"; " is 132.
Long Statement,Raven.Client.Documents.Operations.Attachments,GetAttachmentCommand,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Operations\Attachments\GetAttachmentOperation.cs,CreateRequest,The length of the statement  "                url = $"{node.Url}/databases/{node.Database}/attachments?id={Uri.EscapeDataString(_documentId)}&name={Uri.EscapeDataString(_name)}"; " is 132.
Long Statement,Raven.Client.Documents.Operations.Attachments,GetAttachmentCommand,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Operations\Attachments\GetAttachmentOperation.cs,ProcessResponse,The length of the statement  "                var contentType = response.Content.Headers.TryGetValues("Content-Type"' out IEnumerable<string> contentTypeVale) ? contentTypeVale.First() : null; " is 146.
Long Statement,Raven.Client.Documents.Operations.Attachments,PutAttachmentCommand,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Operations\Attachments\PutAttachmentOperation.cs,CreateRequest,The length of the statement  "                url = $"{node.Url}/databases/{node.Database}/attachments?id={Uri.EscapeDataString(_documentId)}&name={Uri.EscapeDataString(_name)}"; " is 132.
Long Statement,Raven.Client.Documents.Operations,MaintenanceOperationExecutor,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Operations\MaintenanceOperationExecutor.cs,SendAsync,The length of the statement  "                return new Operation(RequestExecutor' () => _store.Changes(_databaseName)' RequestExecutor.Conventions' command.Result.OperationId' command.SelectedNodeTag ?? command.Result.OperationNodeTag); " is 192.
Long Statement,Raven.Client.Documents.Operations,MaintenanceOperationExecutor,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Operations\MaintenanceOperationExecutor.cs,GetContext,The length of the statement  "                throw new InvalidOperationException("Cannot use Maintenance without a database defined' did you forget to call ForDatabase?"); " is 126.
Long Statement,Raven.Client.Documents.Operations,Operation,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Operations\Operation.cs,FetchOperationStatus,The length of the statement  "                    await _requestExecutor.ExecuteAsync(command' _context' sessionInfo: null' token: CancellationToken.None).ConfigureAwait(false); " is 127.
Long Statement,Raven.Client.Documents.Operations,Operation,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Operations\Operation.cs,WaitForCompletionAsync,The length of the statement  "                return (TResult)await _result.Task.ConfigureAwait(false); // already done waiting but in failure we want the exception itself and not AggregateException  " is 152.
Long Statement,Raven.Client.Documents.Operations,OperationExecutor,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Operations\OperationExecutor.cs,GetContext,The length of the statement  "                throw new InvalidOperationException("Cannot use Operations without a database defined' did you forget to call ForDatabase?"); " is 125.
Long Statement,Raven.Client.Documents.Operations,OperationExecutor,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Operations\OperationExecutor.cs,SendAsync,The length of the statement  "                return new Operation(_requestExecutor' () => _store.Changes(_databaseName)' _requestExecutor.Conventions' command.Result.OperationId' command.SelectedNodeTag ?? command.Result.OperationNodeTag); " is 194.
Long Statement,Raven.Client.Documents.Operations,OperationExecutor,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Operations\OperationExecutor.cs,SendAsync,The length of the statement  "                result.Document = (TEntity)_requestExecutor.Conventions.DeserializeEntityFromBlittable(typeof(TEntity)' command.Result.ModifiedDocument); " is 137.
Long Statement,Raven.Client.Documents.Operations,PatchOperation,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Operations\PatchOperation.cs,GetCommand,The length of the statement  "            return new PatchCommand(conventions' context' _id' _changeVector' _patch' _patchIfMissing' _skipPatchIfChangeVectorMismatch' returnDebugInformation:false' test: false); " is 168.
Long Statement,Raven.Client.Documents.Operations,PatchOperation,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Operations\PatchOperation.cs,GetCommand,The length of the statement  "            return new PatchCommand(conventions' context' _id' _changeVector' _patch' _patchIfMissing' _skipPatchIfChangeVectorMismatch' returnDebugInformation' test); " is 155.
Long Statement,Raven.Client.Documents.Operations.CompareExchange,PutCompareExchangeValueCommand,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Operations\CompareExchange\PutCompareExchangeValueOperation.cs,CreateRequest,The length of the statement  "                    ["Object"] = EntityToBlittable.ConvertToBlittableForCompareExchangeIfNeeded(_value' _conventions' ctx' _conventions.CreateSerializer()' documentInfo: null' removeIdentityProperty: false) " is 186.
Long Statement,Raven.Client.Documents.Operations.ConnectionStrings,RemoveConnectionStringCommand,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Operations\ConnectionStrings\RemoveConnectionStringOperation.cs,CreateRequest,The length of the statement  "                url = $"{node.Url}/databases/{node.Database}/admin/connection-strings?connectionString={_connectionString.Name}&type={_connectionString.Type}"; " is 143.
Long Statement,Raven.Client.Documents.Operations.Counters,DocumentCountersOperation,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Operations\Counters\CounterBatch.cs,ThrowNotBlittableJsonReaderObjectOperation,The length of the statement  "            throw new InvalidDataException($"input.Operations should contain items of type BlittableJsonReaderObject only' but got {op.GetType()}"); " is 136.
Long Statement,Raven.Client.Documents.Operations.ETL,EtlConfiguration<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Operations\ETL\EtlConfiguration.cs,GetEtlType,The length of the statement  "                throw new InvalidOperationException($"ETL configuration must have {nameof(EtlConfiguration<ConnectionString>.EtlType)} field"); " is 127.
Long Statement,Raven.Client.Documents.Operations.ETL,ResetEtlCommand,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Operations\ETL\ResetEtlOperation.cs,CreateRequest,The length of the statement  "                url = $"{node.Url}/databases/{node.Database}/admin/etl?configurationName={_configurationName}&transformationName={_transformationName}"; " is 136.
Long Statement,Raven.Client.Documents.Operations.ETL,Transformation,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Operations\ETL\Transformation.cs,Validate,The length of the statement  "                    errors.Add($"{nameof(Collections)} cannot be specified when {nameof(ApplyToAllDocuments)} is set. Script name: '{Name}'"); " is 122.
Long Statement,Raven.Client.Documents.Operations.ETL,Transformation,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Operations\ETL\Transformation.cs,Validate,The length of the statement  "                    errors.Add($"{nameof(Collections)} need be specified or {nameof(ApplyToAllDocuments)} has to be set. Script name: '{Name}'"); " is 125.
Long Statement,Raven.Client.Documents.Operations.ETL,Transformation,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Operations\ETL\Transformation.cs,Validate,The length of the statement  "                                    "loadCountersOf<CollectionName>Behavior(docId' counterName) and return 'true' if counter should be loaded to a destination"); " is 125.
Long Statement,Raven.Client.Documents.Operations.ETL,Transformation,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Operations\ETL\Transformation.cs,Validate,The length of the statement  "                                    "loadCountersOf<CollectionName>Behavior() function is meant to be defined only for counters of docs from collections that " + " is 125.
Long Statement,Raven.Client.Documents.Operations.ETL,Transformation,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Operations\ETL\Transformation.cs,Validate,The length of the statement  "                                    "deleteDocumentsOf<CollectionName>Behavior(docId) and return 'true' if document deletion should be sent to a destination"); " is 123.
Long Statement,Raven.Client.Documents.Operations.ETL,Transformation,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Operations\ETL\Transformation.cs,Validate,The length of the statement  "                                    "deleteDocumentsOf<CollectionName>Behavior() function is meant to be defined only for documents from collections that " + " is 121.
Long Statement,Raven.Client.Documents.Operations.ETL,Transformation,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Operations\ETL\Transformation.cs,Validate,The length of the statement  "                            CollectionToDeleteDocumentsBehaviorFunction[GenericDeleteDocumentsBehaviorFunctionKey] = GenericDeleteDocumentsBehaviorFunctionName; " is 132.
Long Statement,Raven.Client.Documents.Operations.ETL.SQL,SqlConnectionStringParser,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Operations\ETL\SQL\SqlConnectionStringParser.cs,GetDatabaseAndServerFromConnectionString,The length of the statement  "                    server = GetConnectionStringValue(connectionString' new[] { "Data Source"' "Server"' "Address"' "Addr"' "Network Address" }); " is 125.
Long Statement,Raven.Client.Documents.Operations.ETL.SQL,SqlConnectionStringParser,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Operations\ETL\SQL\SqlConnectionStringParser.cs,GetDatabaseAndServerFromConnectionString,The length of the statement  "                    server = GetConnectionStringValue(connectionString' new[] { "Host"' "Server"' "Data Source"' "DataSource"' "Address"' "Addr"' "Network Address" }); " is 147.
Long Statement,Raven.Client.Documents.Operations.ETL.SQL,SqlEtlConfiguration,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Operations\ETL\SQL\SqlEtlConfiguration.cs,GetFactoryName,The length of the statement  "            return Connection.FactoryName ?? FactoryName; // legacy configs from RavenDB 4.0 don't have SqlConnectionString.FactoryName field " is 129.
Long Statement,Raven.Client.Documents.Operations.ETL.SQL,SqlEtlConfiguration,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Operations\ETL\SQL\SqlEtlConfiguration.cs,GetDestination,The length of the statement  "            var (database' server) = SqlConnectionStringParser.GetDatabaseAndServerFromConnectionString(GetFactoryName()' Connection.ConnectionString); " is 139.
Long Statement,Raven.Client.Documents.Operations.ETL.SQL,SqlEtlConfiguration,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Operations\ETL\SQL\SqlEtlConfiguration.cs,UsingEncryptedCommunicationChannel,The length of the statement  "                    encrypt = SqlConnectionStringParser.GetConnectionStringValue(Connection.ConnectionString' new[] { "Encrypt"' "UseSSL" }); " is 121.
Long Statement,Raven.Client.Documents.Operations.ETL.SQL,SqlEtlConfiguration,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Operations\ETL\SQL\SqlEtlConfiguration.cs,UsingEncryptedCommunicationChannel,The length of the statement  "                        sslMode = SqlConnectionStringParser.GetConnectionStringValue(Connection.ConnectionString' new[] { "SSL Mode"' "SslMode"' "Ssl-Mode" }); " is 135.
Long Statement,Raven.Client.Documents.Operations.ETL.SQL,SqlEtlConfiguration,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Operations\ETL\SQL\SqlEtlConfiguration.cs,UsingEncryptedCommunicationChannel,The length of the statement  "                    var dataSource = SqlConnectionStringParser.GetConnectionStringValue(Connection.ConnectionString' new[] { "Data Source" }); " is 122.
Long Statement,Raven.Client.Documents.Operations.ETL.SQL,SqlEtlTable,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Operations\ETL\SQL\SqlEtlConfiguration.cs,Equals,The length of the statement  "            return string.Equals(TableName' other.TableName) && string.Equals(DocumentIdColumn' other.DocumentIdColumn' StringComparison.OrdinalIgnoreCase) && " is 146.
Long Statement,Raven.Client.Documents.Operations.Indexes,GetIndexPerformanceStatisticsCommand,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Operations\Indexes\GetIndexPerformanceStatisticsOperation.cs,SetResponse,The length of the statement  "                    stats[i] = (IndexPerformanceStats)_conventions.DeserializeEntityFromBlittable(typeof(IndexPerformanceStats)' (BlittableJsonReaderObject)results[i]); " is 148.
Long Statement,Raven.Client.Documents.Operations.Indexes,GetTermsCommand,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Operations\Indexes\GetTermsOperation.cs,CreateRequest,The length of the statement  "                url = $"{node.Url}/databases/{node.Database}/indexes/terms?name={Uri.EscapeDataString(_indexName)}&field={Uri.EscapeDataString(_field)}&fromValue={_fromValue}&pageSize={_pageSize}"; " is 181.
Long Statement,Raven.Client.Documents.Operations.Replication,ExternalReplicationBase,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Operations\Replication\ExternalReplicationBase.cs,IsEqualTo,The length of the statement  "                return string.Equals(ConnectionStringName' externalReplication.ConnectionStringName' StringComparison.OrdinalIgnoreCase) && " is 123.
Long Statement,Raven.Client.Documents.Operations.Replication,FeatureTaskDefinition,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Operations\Replication\FeatureTaskDefinition.cs,Validate,The length of the statement  "                    throw new InvalidOperationException("Your server is unsecured and therefore you can't define pull replication with a certificate."); " is 132.
Long Statement,Raven.Client.Documents.Operations.Replication,GetReplicationPerformanceStatisticsCommand,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Operations\Replication\GetReplicationPerformanceStatisticsOperation.cs,SetResponse,The length of the statement  "                Result = (ReplicationPerformance)EntityToBlittable.ConvertToEntity(typeof(ReplicationPerformance)' "replication/performance"' response' _conventions); " is 150.
Long Statement,Raven.Client.Documents.Queries.Facets,AggregationQueryBase,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Queries\Facets\AggregationQuery.cs,ExecuteAsync,The length of the statement  "                await _session.RequestExecutor.ExecuteAsync(command' _session.Context' _session.SessionInfo' token).ConfigureAwait(false); " is 122.
Long Statement,Raven.Client.Documents.Queries.Facets,AggregationQueryBase,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Queries\Facets\AggregationQuery.cs,ExecuteLazy,The length of the statement  "            return ((DocumentSession)_session).AddLazyOperation(new LazyAggregationQueryOperation(_session.Conventions' _query' InvokeAfterQueryExecuted' ProcessResults)' onEval); " is 167.
Long Statement,Raven.Client.Documents.Queries.Facets,AggregationQueryBase,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Queries\Facets\AggregationQuery.cs,ExecuteLazyAsync,The length of the statement  "            return ((AsyncDocumentSession)_session).AddLazyOperation(new LazyAggregationQueryOperation(_session.Conventions' _query' InvokeAfterQueryExecuted' ProcessResults)' onEval' token); " is 179.
Long Statement,Raven.Client.Documents.Queries.Facets,AggregationQueryBase,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Queries\Facets\AggregationQuery.cs,ProcessResults,The length of the statement  "                var facetResult = (FacetResult)EntityToBlittable.ConvertToEntity(typeof(FacetResult)' "facet/result"' result' conventions); " is 123.
Long Statement,Raven.Client.Documents.Queries.Facets,RangeFacet<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Queries\Facets\RangeFacet.cs,Parse,The length of the statement  "                throw new InvalidOperationException("Expressions on both sides of '&&' must point to range field. E.g. x => x.Age > 18 && x.Age < 99"); " is 135.
Long Statement,Raven.Client.Documents.Queries.Facets,RangeFacet<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Queries\Facets\RangeFacet.cs,Parse,The length of the statement  "                return GetStringRepresentation(leftFieldName' left.NodeType' right.NodeType' ParseSubExpression(left)' ParseSubExpression(right)' addQueryParameter); " is 149.
Long Statement,Raven.Client.Documents.Queries.Facets,RangeFacet<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Queries\Facets\RangeFacet.cs,Parse,The length of the statement  "                return GetStringRepresentation(leftFieldName' right.NodeType' left.NodeType' ParseSubExpression(right)' ParseSubExpression(left)' addQueryParameter); " is 149.
Long Statement,Raven.Client.Documents.Queries.Facets,RangeFacet<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Queries\Facets\RangeFacet.cs,Parse,The length of the statement  "            throw new InvalidOperationException("Members in sub-expression(s) are not the correct types (expected '<'' '<='' '>' or '>=')"); " is 128.
Long Statement,Raven.Client.Documents.Queries.Facets,RangeFacet<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Queries\Facets\RangeFacet.cs,GetStringRepresentation,The length of the statement  "                    return $"{fieldName} between {GetStringValue(lValue' addQueryParameter)} and {GetStringValue(rValue' addQueryParameter)}"; " is 122.
Long Statement,Raven.Client.Documents.Queries.Facets,RangeFacet<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Queries\Facets\RangeFacet.cs,GetStringRepresentation,The length of the statement  "                return $"{GetStringRepresentation(fieldName' leftOp' lValue' addQueryParameter)} and {GetStringRepresentation(fieldName' rightOp' rValue' addQueryParameter)}"; " is 159.
Long Statement,Raven.Client.Documents.Queries,IndexQueryBase<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Queries\IndexQuery.cs,GetHashCode,The length of the statement  "                hashCode = (hashCode * 397) ^ (WaitForNonStaleResultsTimeout != null ? WaitForNonStaleResultsTimeout.GetHashCode() : 0); " is 120.
Long Statement,Raven.Client.Documents.Queries,QueryFieldUtil,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Queries\QueryFieldUtil.cs,EscapeIfNecessary,The length of the statement  "                    if (char.IsLetterOrDigit(c) == false && c != '_' && c != '-' && c != '@' && c != '.' && c != '[' && c != ']' && insideEscaped == false) " is 135.
Long Statement,Raven.Client.Documents.Queries,RavenQuery,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Queries\RavenQuery.cs,Load,The length of the statement  "            throw new NotSupportedException("This method is here for strongly type support of server side call during Linq queries and should never be directly called"); " is 157.
Long Statement,Raven.Client.Documents.Queries,RavenQuery,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Queries\RavenQuery.cs,Load,The length of the statement  "            throw new NotSupportedException("This method is here for strongly type support of server side call during Linq queries and should never be directly called"); " is 157.
Long Statement,Raven.Client.Documents.Queries,RavenQuery,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Queries\RavenQuery.cs,Raw,The length of the statement  "            throw new NotSupportedException("This method is here for strongly type support of server side call during Linq queries and should never be directly called"); " is 157.
Long Statement,Raven.Client.Documents.Queries,RavenQuery,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Queries\RavenQuery.cs,Raw,The length of the statement  "            throw new NotSupportedException("This method is here for strongly type support of server side call during Linq queries and should never be directly called"); " is 157.
Long Statement,Raven.Client.Documents.Queries,RavenQuery,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Queries\RavenQuery.cs,Metadata,The length of the statement  "            throw new NotSupportedException("This method is here for strongly type support of server side call during Linq queries and should never be directly called"); " is 157.
Long Statement,Raven.Client.Documents.Queries,RavenQuery,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Queries\RavenQuery.cs,CmpXchg,The length of the statement  "            throw new NotSupportedException("This method is here for strongly type support of server side call during Linq queries and should never be directly called"); " is 157.
Long Statement,Raven.Client.Documents.Queries,RavenQuery,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Queries\RavenQuery.cs,Counter,The length of the statement  "            throw new NotSupportedException("This method is here for strongly type support of server side call during Linq queries and should never be directly called"); " is 157.
Long Statement,Raven.Client.Documents.Queries,RavenQuery,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Queries\RavenQuery.cs,Counter,The length of the statement  "            throw new NotSupportedException("This method is here for strongly type support of server side call during Linq queries and should never be directly called"); " is 157.
Long Statement,Raven.Client.Documents.Queries,RavenQuery,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Queries\RavenQuery.cs,Counter,The length of the statement  "            throw new NotSupportedException("This method is here for strongly type support of server side call during Linq queries and should never be directly called"); " is 157.
Long Statement,Raven.Client.Documents.Queries.Spatial,CircleCriteria,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Queries\Spatial\SpatialCriteria.cs,GetShapeToken,The length of the statement  "            return ShapeToken.Circle(addQueryParameter(_radius)' addQueryParameter(_latitude)' addQueryParameter(_longitude)' _radiusUnits); " is 128.
Long Statement,Raven.Client.Documents.Queries.Suggestions,SuggestionQueryBase,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Queries\Suggestions\SuggestionQuery.cs,ExecuteAsync,The length of the statement  "                await _session.RequestExecutor.ExecuteAsync(command' _session.Context' _session.SessionInfo' token).ConfigureAwait(false); " is 122.
Long Statement,Raven.Client.Documents.Queries.Suggestions,SuggestionQueryBase,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Queries\Suggestions\SuggestionQuery.cs,ProcessResults,The length of the statement  "                var suggestionResult = (SuggestionResult)EntityToBlittable.ConvertToEntity(typeof(SuggestionResult)' "suggestion/result"' result' conventions); " is 143.
Long Statement,Raven.Client.Documents.Queries.Suggestions,SuggestionQueryBase,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Queries\Suggestions\SuggestionQuery.cs,ExecuteLazy,The length of the statement  "            return ((DocumentSession)_session).AddLazyOperation(new LazySuggestionQueryOperation(_session.Conventions' _query' InvokeAfterQueryExecuted' ProcessResults)' onEval); " is 166.
Long Statement,Raven.Client.Documents.Queries.Suggestions,SuggestionQueryBase,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Queries\Suggestions\SuggestionQuery.cs,ExecuteLazyAsync,The length of the statement  "            return ((AsyncDocumentSession)_session).AddLazyOperation(new LazySuggestionQueryOperation(_session.Conventions' _query' InvokeAfterQueryExecuted' ProcessResults)' onEval' token); " is 178.
Long Statement,Raven.Client.Documents.Queries.Timings,QueryTimings,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Queries\Timings\QueryTimings.cs,FillFromBlittableJson,The length of the statement  "            var timings = (QueryTimings)EntityToBlittable.ConvertToEntity(typeof(QueryTimings)' "query/timings"' json' DocumentConventions.Default); " is 136.
Long Statement,Raven.Client.Documents.Replication,ReplicationNode,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Replication\ReplicationNode.cs,GetHashCode,The length of the statement  "                "Derived classes of 'ReplicationNode' must override 'GetHashCode' and set 'HashCodeSealed' at the end' if you see this error it is likley a bug."); " is 147.
Long Statement,Raven.Client.Documents.Session,AbstractDocumentQuery<T;TSelf>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\AbstractDocumentQuery.CounterIncludes.cs,AssertNoRawQuery,The length of the statement  "                    "RawQuery was called' cannot modify this query by calling on operations that would modify the query (such as Where' Select' OrderBy' GroupBy' etc)"); " is 149.
Long Statement,Raven.Client.Documents.Session,AbstractDocumentQuery<T;TSelf>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\AbstractDocumentQuery.CounterIncludes.cs,RawQuery,The length of the statement  "                throw new InvalidOperationException("You can only use RawQuery on a new query' without applying any operations (such as Where' Select' OrderBy' GroupBy' etc)"); " is 160.
Long Statement,Raven.Client.Documents.Session,AbstractDocumentQuery<T;TSelf>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\AbstractDocumentQuery.CounterIncludes.cs,WhereNotEquals,The length of the statement  "            var whereToken = WhereToken.Create(WhereOperator.NotEquals' whereParams.FieldName' AddQueryParameter(transformToEqualValue)' " is 124.
Long Statement,Raven.Client.Documents.Session,AbstractDocumentQuery<T;TSelf>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\AbstractDocumentQuery.CounterIncludes.cs,WhereIn,The length of the statement  "            var whereToken = WhereToken.Create(WhereOperator.In' fieldName' AddQueryParameter(TransformEnumerable(fieldName' UnpackEnumerable(values)).ToArray())' " is 150.
Long Statement,Raven.Client.Documents.Session,AbstractDocumentQuery<T;TSelf>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\AbstractDocumentQuery.CounterIncludes.cs,WhereStartsWith,The length of the statement  "            var whereToken = WhereToken.Create(WhereOperator.StartsWith' whereParams.FieldName' AddQueryParameter(transformToEqualValue)' new WhereToken.WhereOptions(exact)); " is 162.
Long Statement,Raven.Client.Documents.Session,AbstractDocumentQuery<T;TSelf>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\AbstractDocumentQuery.CounterIncludes.cs,WhereEndsWith,The length of the statement  "            var whereToken = WhereToken.Create(WhereOperator.EndsWith' whereParams.FieldName' AddQueryParameter(transformToEqualValue)' new WhereToken.WhereOptions(exact)); " is 160.
Long Statement,Raven.Client.Documents.Session,AbstractDocumentQuery<T;TSelf>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\AbstractDocumentQuery.CounterIncludes.cs,WhereBetween,The length of the statement  "            var fromParameterName = AddQueryParameter(start == null ? "*" : TransformValue(new WhereParams { Value = start' FieldName = fieldName }' forRange: true)); " is 154.
Long Statement,Raven.Client.Documents.Session,AbstractDocumentQuery<T;TSelf>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\AbstractDocumentQuery.CounterIncludes.cs,WhereBetween,The length of the statement  "            var toParameterName = AddQueryParameter(end == null ? "NULL" : TransformValue(new WhereParams { Value = end' FieldName = fieldName }' forRange: true)); " is 151.
Long Statement,Raven.Client.Documents.Session,AbstractDocumentQuery<T;TSelf>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\AbstractDocumentQuery.CounterIncludes.cs,WhereBetween,The length of the statement  "            var whereToken = WhereToken.Create(WhereOperator.Between' fieldName' null' new WhereToken.WhereOptions(exact' fromParameterName' toParameterName)); " is 147.
Long Statement,Raven.Client.Documents.Session,AbstractDocumentQuery<T;TSelf>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\AbstractDocumentQuery.CounterIncludes.cs,WhereGreaterThan,The length of the statement  "            var whereToken = WhereToken.Create(WhereOperator.GreaterThan' fieldName' parameter' new WhereToken.WhereOptions(exact)); " is 120.
Long Statement,Raven.Client.Documents.Session,AbstractDocumentQuery<T;TSelf>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\AbstractDocumentQuery.CounterIncludes.cs,WhereGreaterThanOrEqual,The length of the statement  "            var whereToken = WhereToken.Create(WhereOperator.GreaterThanOrEqual' fieldName' parameter' new WhereToken.WhereOptions(exact)); " is 127.
Long Statement,Raven.Client.Documents.Session,AbstractDocumentQuery<T;TSelf>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\AbstractDocumentQuery.CounterIncludes.cs,WhereLessThanOrEqual,The length of the statement  "            var whereToken = WhereToken.Create(WhereOperator.LessThanOrEqual' fieldName' parameter' new WhereToken.WhereOptions(exact)); " is 124.
Long Statement,Raven.Client.Documents.Session,AbstractDocumentQuery<T;TSelf>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\AbstractDocumentQuery.CounterIncludes.cs,Search,The length of the statement  "            var whereToken = WhereToken.Create(WhereOperator.Search' fieldName' AddQueryParameter(searchTerms)' new WhereToken.WhereOptions(@operator)); " is 140.
Long Statement,Raven.Client.Documents.Session,AbstractDocumentQuery<T;TSelf>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\AbstractDocumentQuery.CounterIncludes.cs,ToString,The length of the statement  "                throw new InvalidOperationException(string.Format("A clause was not closed correctly within this query' current clause depth = {0}"' _currentClauseDepth)); " is 155.
Long Statement,Raven.Client.Documents.Session,AbstractDocumentQuery<T;TSelf>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\AbstractDocumentQuery.CounterIncludes.cs,BuildWith,The length of the statement  "            //TODO: need to aggragate with parameters into this instance parameter list' assert and strip parameters from with clauses " is 122.
Long Statement,Raven.Client.Documents.Session,AbstractDocumentQuery<T;TSelf>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\AbstractDocumentQuery.CounterIncludes.cs,ContainsAny,The length of the statement  "            var whereToken = WhereToken.Create(WhereOperator.In' fieldName' AddQueryParameter(array)' new WhereToken.WhereOptions(false)); " is 126.
Long Statement,Raven.Client.Documents.Session,AbstractDocumentQuery<T;TSelf>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\AbstractDocumentQuery.CounterIncludes.cs,GetImplicitStringConversion,The length of the statement  "            var func = (Func<object' string>)Expression.Lambda(Expression.Call(methodInfo' Expression.Convert(arg' type))' arg).Compile(); " is 126.
Long Statement,Raven.Client.Documents.Session,AbstractDocumentQuery<T;TSelf>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\AbstractDocumentQuery.CounterIncludes.cs,GetCurrentWhereTokens,The length of the statement  "                throw new InvalidOperationException($"Cannot get '{nameof(MoreLikeThisToken)}' because there are no where tokens specified."); " is 126.
Long Statement,Raven.Client.Documents.Session,AbstractDocumentQuery<T;TSelf>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\AbstractDocumentQuery.CounterIncludes.cs,AggregateBy,The length of the statement  "                throw new InvalidOperationException($"Aggregation query can select only facets while it got {token.GetType().Name} token"); " is 123.
Long Statement,Raven.Client.Documents.Session,AbstractDocumentQuery<T;TSelf>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\AbstractDocumentQuery.CounterIncludes.cs,WithinRadiusOf,The length of the statement  "                new WhereToken.WhereOptions(ShapeToken.Circle(AddQueryParameter(radius)' AddQueryParameter(latitude)' AddQueryParameter(longitude)' radiusUnits)' " is 145.
Long Statement,Raven.Client.Documents.Session,AbstractDocumentQuery<T;TSelf>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\AbstractDocumentQuery.CounterIncludes.cs,Spatial,The length of the statement  "            tokens.AddLast(WhereToken.Create(whereOperator'fieldName' null' new WhereToken.WhereOptions(wktToken' distErrorPercent))); " is 122.
Long Statement,Raven.Client.Documents.Session,AbstractDocumentQuery<T;TSelf>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\AbstractDocumentQuery.CounterIncludes.cs,OrderByDistance,The length of the statement  "            OrderByTokens.AddLast(OrderByToken.CreateDistanceAscending(fieldName' AddQueryParameter(latitude)' AddQueryParameter(longitude)' roundFactorParameterName)); " is 156.
Long Statement,Raven.Client.Documents.Session,AbstractDocumentQuery<T;TSelf>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\AbstractDocumentQuery.CounterIncludes.cs,OrderByDistance,The length of the statement  "            OrderByTokens.AddLast(OrderByToken.CreateDistanceAscending(fieldName' AddQueryParameter(shapeWkt)' roundFactorParameterName)); " is 126.
Long Statement,Raven.Client.Documents.Session,AbstractDocumentQuery<T;TSelf>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\AbstractDocumentQuery.CounterIncludes.cs,OrderByDistanceDescending,The length of the statement  "            OrderByTokens.AddLast(OrderByToken.CreateDistanceDescending(fieldName' AddQueryParameter(latitude)' AddQueryParameter(longitude)' roundFactorParameterName)); " is 157.
Long Statement,Raven.Client.Documents.Session,AbstractDocumentQuery<T;TSelf>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\AbstractDocumentQuery.CounterIncludes.cs,AssertIsDynamicQuery,The length of the statement  "                throw new InvalidOperationException($"Cannot execute query method '{methodName}'. Field '{dynamicField.ToField(EnsureValidFieldName)}' cannot be used when static index '{FromToken.IndexName}' is queried. Dynamic spatial fields can only be used with dynamic queries' for static index queries please use valid spatial fields defined in index definition."); " is 354.
Long Statement,Raven.Client.Documents.Session,AbstractDocumentQuery<T;TSelf>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\AbstractDocumentQuery.CounterIncludes.cs,SuggestUsing,The length of the statement  "                    token = SuggestToken.Create(term.Field' term.DisplayField' AddQueryParameter(term.Term)' GetOptionsParameterName(term.Options)); " is 128.
Long Statement,Raven.Client.Documents.Session,AbstractDocumentQuery<T;TSelf>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\AbstractDocumentQuery.CounterIncludes.cs,SuggestUsing,The length of the statement  "                    token = SuggestToken.Create(terms.Field' terms.DisplayField' AddQueryParameter(terms.Terms)' GetOptionsParameterName(terms.Options)); " is 133.
Long Statement,Raven.Client.Documents.Session,AsyncDocumentQuery<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\AsyncDocumentQuery.cs,SelectFields,The length of the statement  "            var propertyInfos = ReflectionUtil.GetPropertiesAndFieldsFor<TProjection>(BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance).ToList(); " is 153.
Long Statement,Raven.Client.Documents.Session,AsyncDocumentQuery<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\AsyncDocumentQuery.cs,ExecuteActualQueryAsync,The length of the statement  "                    await TheSession.RequestExecutor.ExecuteAsync(command' TheSession.Context' TheSession.SessionInfo' token).ConfigureAwait(false); " is 128.
Long Statement,Raven.Client.Documents.Session,AsyncDocumentQuery<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\AsyncDocumentQuery.cs,CreateDocumentQueryInternal,The length of the statement  "                newFieldsToFetch = FieldsToFetchToken.Create(fields' queryData.Projections.ToArray()' queryData.IsCustomFunction' sourceAlias); " is 127.
Long Statement,Raven.Client.Documents.Session,AsyncDocumentQuery<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\AsyncDocumentQuery.cs,Query,The length of the statement  "            throw new NotSupportedException("Cannot create an sync LINQ query from AsyncDocumentQuery' you need to use DocumentQuery for that"); " is 132.
Long Statement,Raven.Client.Documents.Session,AsyncDocumentQuery<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\AsyncDocumentQuery.cs,AsyncQuery,The length of the statement  "                    $"AsyncDocumentQuery source has (index name: {IndexName}' collection: {CollectionName})' but got request for (index name: {indexName}' collection: {collectionName})' you cannot change the index name / collection when using AsyncDocumentQuery as the source"); " is 258.
Long Statement,Raven.Client.Documents.Session,AsyncDocumentQuery<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\AsyncDocumentQuery.cs,With,The length of the statement  "            var docQuery = (AsyncDocumentQuery<TOther>)queryInspector.GetAsyncDocumentQuery(x => x.ParameterPrefix = $"w{WithTokens.Count}p"); " is 130.
Long Statement,Raven.Client.Documents.Session,AsyncDocumentQuery<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\AsyncDocumentQuery.cs,With,The length of the statement  "            var docQuery = (AsyncDocumentQuery<TOther>)queryFactory(new AsyncDocumentQueryBuilder(AsyncSession' $"w{WithTokens.Count}p")); " is 126.
Long Statement,Raven.Client.Documents.Session,AsyncDocumentSession,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\AsyncDocumentSession.CountersFor.cs,EnsureAsyncDocumentIdGeneration,The length of the statement  "            _asyncDocumentIdGeneration = new AsyncDocumentIdGeneration(this' DocumentsByEntity.TryGetValue' (id' entity' metadata) => id); " is 126.
Long Statement,Raven.Client.Documents.Session,AsyncDocumentSession,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\AsyncDocumentSession.CountersFor.cs,SaveChangesAsync,The length of the statement  "                        throw new InvalidOperationException($"Cannot execute '{nameof(SaveChangesAsync)}' when entity tracking is disabled in session."); " is 129.
Long Statement,Raven.Client.Documents.Session,AsyncDocumentSession,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\AsyncDocumentSession.CountersFor.cs,ExecuteLazyOperationsSingleStep,The length of the statement  "            await RequestExecutor.ExecuteAsync(multiGetCommand' Context' sessionInfo: SessionInfo' token: token).ConfigureAwait(false); " is 123.
Long Statement,Raven.Client.Documents.Session,AsyncDocumentSession,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\AsyncDocumentSession.CountersFor.cs,ExecuteLazyOperationsSingleStep,The length of the statement  "                    throw new InvalidOperationException("Got an error from server' status code: " + (int)response.StatusCode + Environment.NewLine + response.Result); " is 146.
Long Statement,Raven.Client.Documents.Session,AsyncDocumentSession,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\AsyncDocumentSession.CountersFor.cs,LoadStartingWithIntoStreamAsync,The length of the statement  "            await LoadStartingWithInternal(idPrefix' new LoadStartingWithOperation(this)' output' matches' start' pageSize' exclude' startAfter' token).ConfigureAwait(false); " is 162.
Long Statement,Raven.Client.Documents.Session,AsyncSessionDocumentCounters,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\AsyncSessionDocumentCounters.cs,GetAsync,The length of the statement  "                    var details = await Session.Operations.SendAsync(new GetCountersOperation(DocId' countersArray)' Session.SessionInfo' token: token) " is 131.
Long Statement,Raven.Client.Documents.Session,ClusterTransactionOperationsBase,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\ClusterTransactionSession.cs,GetCompareExchangeValueAsyncInternal,The length of the statement  "                return await _session.Operations.SendAsync(new GetCompareExchangeValueOperation<T>(key)' sessionInfo: _session.SessionInfo' token: token).ConfigureAwait(false); " is 160.
Long Statement,Raven.Client.Documents.Session,ClusterTransactionOperationsBase,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\ClusterTransactionSession.cs,GetCompareExchangeValuesInternal,The length of the statement  "                return await _session.Operations.SendAsync(new GetCompareExchangeValuesOperation<T>(keys)' sessionInfo: _session.SessionInfo' token: token).ConfigureAwait(false); " is 162.
Long Statement,Raven.Client.Documents.Session,DocumentQuery<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\DocumentQuery.cs,SelectFields,The length of the statement  "            var propertyInfos = ReflectionUtil.GetPropertiesAndFieldsFor<TProjection>(BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance).ToList(); " is 153.
Long Statement,Raven.Client.Documents.Session,DocumentQuery<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\DocumentQuery.cs,With,The length of the statement  "            var docQuery = (DocumentQuery<TOther>)queryInspector.GetDocumentQuery(x => x.ParameterPrefix = $"w{WithTokens.Count}p"); " is 120.
Long Statement,Raven.Client.Documents.Session,DocumentQuery<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\DocumentQuery.cs,CreateDocumentQueryInternal,The length of the statement  "                newFieldsToFetch = FieldsToFetchToken.Create(fields' queryData.Projections.ToArray()' queryData.IsCustomFunction' sourceAlias); " is 127.
Long Statement,Raven.Client.Documents.Session,DocumentQuery<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\DocumentQuery.cs,Query,The length of the statement  "                    $"DocumentQuery source has (index name: {IndexName}' collection: {CollectionName})' but got request for (index name: {indexName}' collection: {collectionName})' you cannot change the index name / collection when using DocumentQuery as the source"); " is 248.
Long Statement,Raven.Client.Documents.Session,DocumentQuery<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\DocumentQuery.cs,AsyncQuery,The length of the statement  "            throw new NotSupportedException("Cannot create an async LINQ query from DocumentQuery' you need to use AsyncDocumentQuery for that"); " is 133.
Long Statement,Raven.Client.Documents.Session,DocumentSession,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\DocumentSession.CountersFor.cs,SaveChanges,The length of the statement  "                    throw new InvalidOperationException($"Cannot execute '{nameof(SaveChanges)}' when entity tracking is disabled in session."); " is 124.
Long Statement,Raven.Client.Documents.Session,DocumentSession,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\DocumentSession.CountersFor.cs,ExecuteLazyOperationsSingleStep,The length of the statement  "                    throw new InvalidOperationException("Got an error from server' status code: " + (int)response.StatusCode + Environment.NewLine + response.Result); " is 146.
Long Statement,Raven.Client.Documents.Session,DocumentSession,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\DocumentSession.CountersFor.cs,LoadStartingWithIntoStream,The length of the statement  "            LoadStartingWithInternal(idPrefix' new LoadStartingWithOperation(this)' output' matches' start' pageSize' exclude' startAfter); " is 127.
Long Statement,Raven.Client.Documents.Session,DocumentSessionAttachmentsBase,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\DocumentSessionAttachmentsBase.cs,GetNames,The length of the statement  "                throw new ArgumentException($"{nameof(GetNames)} requires a tracked entity object' other types such as documentId are not valid."' nameof(entity)); " is 147.
Long Statement,Raven.Client.Documents.Session,DocumentSessionAttachmentsBase,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\DocumentSessionAttachmentsBase.cs,GetNames,The length of the statement  "            if (document.Metadata.TryGet(Constants.Documents.Metadata.Attachments' out BlittableJsonReaderArray attachments) == false) " is 122.
Long Statement,Raven.Client.Documents.Session,DocumentSessionAttachmentsBase,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\DocumentSessionAttachmentsBase.cs,ThrowEntityNotInSessionOrMissingId,The length of the statement  "            throw new ArgumentException($"{entity} is not associated with the session. Use documentId instead or track the entity in the session."' nameof(entity)); " is 152.
Long Statement,Raven.Client.Documents.Session,DocumentSessionAttachmentsBase,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\DocumentSessionAttachmentsBase.cs,ThrowEntityNotInSession,The length of the statement  "            throw new ArgumentException($"{entity} is not associated with the session. You need to track the entity in the session."' nameof(entity)); " is 138.
Long Statement,Raven.Client.Documents.Session,DocumentSessionAttachmentsBase,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\DocumentSessionAttachmentsBase.cs,Move,The length of the statement  "            if (string.Equals(sourceDocumentId' destinationDocumentId' StringComparison.OrdinalIgnoreCase) && sourceName == destinationName) " is 128.
Long Statement,Raven.Client.Documents.Session,DocumentSessionAttachmentsBase,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\DocumentSessionAttachmentsBase.cs,Move,The length of the statement  "            if (DocumentsById.TryGetValue(sourceDocumentId' out DocumentInfo sourceDocument) && Session.DeletedEntities.Contains(sourceDocument.Entity)) " is 140.
Long Statement,Raven.Client.Documents.Session,DocumentSessionAttachmentsBase,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\DocumentSessionAttachmentsBase.cs,Move,The length of the statement  "            if (DocumentsById.TryGetValue(destinationDocumentId' out DocumentInfo destinationDocument) && Session.DeletedEntities.Contains(destinationDocument.Entity)) " is 155.
Long Statement,Raven.Client.Documents.Session,DocumentSessionAttachmentsBase,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\DocumentSessionAttachmentsBase.cs,Copy,The length of the statement  "            if (DocumentsById.TryGetValue(sourceDocumentId' out DocumentInfo sourceDocument) && Session.DeletedEntities.Contains(sourceDocument.Entity)) " is 140.
Long Statement,Raven.Client.Documents.Session,DocumentSessionAttachmentsBase,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\DocumentSessionAttachmentsBase.cs,Copy,The length of the statement  "            if (DocumentsById.TryGetValue(destinationDocumentId' out DocumentInfo destinationDocument) && Session.DeletedEntities.Contains(destinationDocument.Entity)) " is 155.
Long Statement,Raven.Client.Documents.Session,DocumentSessionAttachmentsBase,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\DocumentSessionAttachmentsBase.cs,ThrowDocumentAlreadyDeleted,The length of the statement  "            throw new InvalidOperationException($"Can't {operation} attachment '{name}' of document '{documentId}'{(destinationDocumentId != null ? $" to '{destinationDocumentId}'" : string.Empty)}'' the document '{deletedDocumentId}' was already deleted in this session."); " is 262.
Long Statement,Raven.Client.Documents.Session,DocumentSessionAttachmentsBase,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\DocumentSessionAttachmentsBase.cs,ThrowOtherDeferredCommandException,The length of the statement  "            throw new InvalidOperationException($"Can't {operation} attachment '{name}' of document '{documentId}'' there is a deferred command registered to {previousOperation} an attachment with '{name}' name."); " is 202.
Long Statement,Raven.Client.Documents.Session,DocumentSessionRevisions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\DocumentSessionRevisions.cs,ForceRevisionCreationFor,The length of the statement  "                throw new InvalidOperationException("Cannot create a revision for the requested entity because it is Not tracked by the session"); " is 130.
Long Statement,Raven.Client.Documents.Session,DocumentSessionRevisions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\DocumentSessionRevisions.cs,AddIdToList,The length of the statement  "                throw new InvalidOperationException($"A request for creating a revision was already made for document {id} in the current session but with a different force strategy." +  " is 169.
Long Statement,Raven.Client.Documents.Session,EntityToBlittable,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\EntityToBlittable.cs,ConvertEntityToBlittable,The length of the statement  "                var document = ConvertEntityToBlittableInternal(entity' _session.Conventions' _session.Context' _session.JsonSerializer' writer); " is 129.
Long Statement,Raven.Client.Documents.Session,EntityToBlittable,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\EntityToBlittable.cs,ConvertToBlittableForCompareExchangeIfNeeded,The length of the statement  "                    .Select(v => ConvertToBlittableForCompareExchangeIfNeeded(v' conventions' context' serializer' documentInfo' removeIdentityProperty)); " is 134.
Long Statement,Raven.Client.Documents.Session,EntityToBlittable,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\EntityToBlittable.cs,GetPropertyType,The length of the statement  "                memberInfo = ReflectionUtil.GetPropertyOrFieldFor(rootType' BindingFlags.Public | BindingFlags.Instance | BindingFlags.NonPublic' propertyName); " is 144.
Long Statement,Raven.Client.Documents.Session,EntityToBlittable,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\EntityToBlittable.cs,GetPropertyType,The length of the statement  "                var memberInfos = ReflectionUtil.GetPropertiesAndFieldsFor(rootType' BindingFlags.Public | BindingFlags.Instance | BindingFlags.NonPublic) " is 138.
Long Statement,Raven.Client.Documents.Session,InMemoryDocumentSessionOperations,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\InMemoryDocumentSessionOperations.cs,GetDocumentInfo,The length of the statement  "                (instance is IDynamicMetaObjectProvider == false || GenerateEntityIdOnTheClient.TryGetIdFromDynamic(instance' out id) == false)) " is 128.
Long Statement,Raven.Client.Documents.Session,InMemoryDocumentSessionOperations,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\InMemoryDocumentSessionOperations.cs,IsLoadedOrDeleted,The length of the statement  "            return DocumentsById.TryGetValue(id' out DocumentInfo documentInfo) && (documentInfo.Document != null || documentInfo.Entity != null) || " is 136.
Long Statement,Raven.Client.Documents.Session,InMemoryDocumentSessionOperations,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\InMemoryDocumentSessionOperations.cs,IncrementRequestCount,The length of the statement  "                throw new InvalidOperationException($@"The maximum number of requests ({MaxNumberOfRequestsPerSession}) allowed for this session has been reached. " is 146.
Long Statement,Raven.Client.Documents.Session,InMemoryDocumentSessionOperations,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\InMemoryDocumentSessionOperations.cs,IncrementRequestCount,The length of the statement  "Raven limits the number of remote calls that a session is allowed to make as an early warning system. Sessions are expected to be short lived' and  " is 146.
Long Statement,Raven.Client.Documents.Session,InMemoryDocumentSessionOperations,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\InMemoryDocumentSessionOperations.cs,IncrementRequestCount,The length of the statement  "Raven provides facilities like Load(string[] ids) to load multiple documents at once and batch saves (call SaveChanges() only once). " is 132.
Long Statement,Raven.Client.Documents.Session,InMemoryDocumentSessionOperations,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\InMemoryDocumentSessionOperations.cs,IncrementRequestCount,The length of the statement  "You can increase the limit by setting DocumentConventions.MaxNumberOfRequestsPerSession or MaxNumberOfRequestsPerSession' but it is " is 131.
Long Statement,Raven.Client.Documents.Session,InMemoryDocumentSessionOperations,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\InMemoryDocumentSessionOperations.cs,IncrementRequestCount,The length of the statement  "advisable that you'll look into reducing the number of remote calls first' since that will speed up your application significantly and result in a  " is 146.
Long Statement,Raven.Client.Documents.Session,InMemoryDocumentSessionOperations,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\InMemoryDocumentSessionOperations.cs,TrackEntity,The length of the statement  "                                            "If you want to return a projection' you should use .ProjectInto<{1}>() (for Query) or .SelectFields<{1}>() (for DocumentQuery) before calling to .ToList()."' " is 158.
Long Statement,Raven.Client.Documents.Session,InMemoryDocumentSessionOperations,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\InMemoryDocumentSessionOperations.cs,TrackEntity,The length of the statement  "            return TrackEntity(entityType' documentFound.Id' documentFound.Document' documentFound.Metadata' noTracking: NoTracking); " is 121.
Long Statement,Raven.Client.Documents.Session,InMemoryDocumentSessionOperations,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\InMemoryDocumentSessionOperations.cs,RegisterExternalLoadedIntoTheSession,The length of the statement  "                throw new InvalidOperationException("The document " + info.Id + " is already in the session with a different entity instance"); " is 127.
Long Statement,Raven.Client.Documents.Session,InMemoryDocumentSessionOperations,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\InMemoryDocumentSessionOperations.cs,RegisterExternalLoadedIntoTheSession,The length of the statement  "                throw new InvalidOperationException("Attempted to load an entity with id " + info.Id + "' but the entity instance already exists in the session with id: " + existing.Id); " is 170.
Long Statement,Raven.Client.Documents.Session,InMemoryDocumentSessionOperations,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\InMemoryDocumentSessionOperations.cs,Delete,The length of the statement  "                throw new InvalidOperationException(entity + " is not associated with the session' cannot delete unknown entity instance"); " is 123.
Long Statement,Raven.Client.Documents.Session,InMemoryDocumentSessionOperations,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\InMemoryDocumentSessionOperations.cs,Store,The length of the statement  "            StoreInternal(entity' changeVector' id' changeVector == null ? ConcurrencyCheckMode.Disabled : ConcurrencyCheckMode.Forced); " is 124.
Long Statement,Raven.Client.Documents.Session,InMemoryDocumentSessionOperations,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\InMemoryDocumentSessionOperations.cs,StoreInternal,The length of the statement  "                throw new InvalidOperationException("Can't store document' there is a deferred command registered for this document in the session. Document id: " + id); " is 153.
Long Statement,Raven.Client.Documents.Session,InMemoryDocumentSessionOperations,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\InMemoryDocumentSessionOperations.cs,StoreAsync,The length of the statement  "            return StoreAsyncInternal(entity' null' null' hasId == false ? ConcurrencyCheckMode.Forced : ConcurrencyCheckMode.Auto' token: token); " is 134.
Long Statement,Raven.Client.Documents.Session,InMemoryDocumentSessionOperations,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\InMemoryDocumentSessionOperations.cs,StoreAsync,The length of the statement  "            return StoreAsyncInternal(entity' changeVector' id' changeVector == null ? ConcurrencyCheckMode.Disabled : ConcurrencyCheckMode.Forced' token: token); " is 150.
Long Statement,Raven.Client.Documents.Session,InMemoryDocumentSessionOperations,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\InMemoryDocumentSessionOperations.cs,RememberEntityForDocumentIdGeneration,The length of the statement  "            throw new NotImplementedException("You cannot set GenerateDocumentIdsOnStore to false without implementing RememberEntityForDocumentIdGeneration"); " is 147.
Long Statement,Raven.Client.Documents.Session,InMemoryDocumentSessionOperations,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\InMemoryDocumentSessionOperations.cs,ValidateClusterTransaction,The length of the statement  "                    $"{nameof(UseOptimisticConcurrency)} is not supported with {nameof(TransactionMode)} set to {nameof(TransactionMode.ClusterWide)}"); " is 132.
Long Statement,Raven.Client.Documents.Session,InMemoryDocumentSessionOperations,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\InMemoryDocumentSessionOperations.cs,ValidateClusterTransaction,The length of the statement  "                            throw new NotSupportedException($"Optimistic concurrency for '{command.Id}' is not supported when using a cluster transaction."); " is 129.
Long Statement,Raven.Client.Documents.Session,InMemoryDocumentSessionOperations,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\InMemoryDocumentSessionOperations.cs,PrepareCompareExchangeEntities,The length of the statement  "                throw new InvalidOperationException($"Performing cluster transaction operations require the '{nameof(TransactionMode)}' to be set to '{nameof(TransactionMode.ClusterWide)}'."); " is 176.
Long Statement,Raven.Client.Documents.Session,InMemoryDocumentSessionOperations,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\InMemoryDocumentSessionOperations.cs,PrepareCompareExchangeEntities,The length of the statement  "                        ["Object"] = EntityToBlittable.ConvertToBlittableForCompareExchangeIfNeeded(item.Value.Entity' Conventions' Context' JsonSerializer' documentInfo: null' removeIdentityProperty: false) " is 183.
Long Statement,Raven.Client.Documents.Session,InMemoryDocumentSessionOperations,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\InMemoryDocumentSessionOperations.cs,PrepareForCreatingRevisionsFromIds,The length of the statement  "            // Note: here there is no point checking 'Before' or 'After' because if there were changes then forced revision is done from the PUT command.... " is 144.
Long Statement,Raven.Client.Documents.Session,InMemoryDocumentSessionOperations,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\InMemoryDocumentSessionOperations.cs,PrepareForEntitiesDeletion,The length of the statement  "                        if (result.DeferredCommandsDictionary.TryGetValue((documentInfo.Id' CommandType.ClientAnyCommand' null)' out ICommandData command)) " is 131.
Long Statement,Raven.Client.Documents.Session,InMemoryDocumentSessionOperations,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\InMemoryDocumentSessionOperations.cs,PrepareForEntitiesPuts,The length of the statement  "                    if (result.DeferredCommandsDictionary.TryGetValue((entity.Value.Id' CommandType.ClientModifyDocumentCommand' null)' out ICommandData command)) " is 142.
Long Statement,Raven.Client.Documents.Session,InMemoryDocumentSessionOperations,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\InMemoryDocumentSessionOperations.cs,PrepareForEntitiesPuts,The length of the statement  "                    result.SessionCommands.Add(new PutCommandDataWithBlittableJson(entity.Value.Id' changeVector' document' forceRevisionCreationStrategy)); " is 136.
Long Statement,Raven.Client.Documents.Session,InMemoryDocumentSessionOperations,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\InMemoryDocumentSessionOperations.cs,ThrowMissingDocumentMetadata,The length of the statement  "            throw new InvalidOperationException("Missing metadata in document. Unable to find " + Constants.Documents.Metadata.Key + " in " + document); " is 140.
Long Statement,Raven.Client.Documents.Session,InMemoryDocumentSessionOperations,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\InMemoryDocumentSessionOperations.cs,ThrowInvalidDeletedDocumentWithDeferredCommand,The length of the statement  "                $"Cannot perform save because document {resultCommand.Id} has been deleted by the session and is also taking part in deferred {resultCommand.Type} command"); " is 157.
Long Statement,Raven.Client.Documents.Session,InMemoryDocumentSessionOperations,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\InMemoryDocumentSessionOperations.cs,ThrowInvalidModifiedDocumentWithDeferredCommand,The length of the statement  "                $"Cannot perform save because document {resultCommand.Id} has been modified by the session and is also taking part in deferred {resultCommand.Type} command"); " is 158.
Long Statement,Raven.Client.Documents.Session,InMemoryDocumentSessionOperations,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\InMemoryDocumentSessionOperations.cs,ThrowNoDatabase,The length of the statement  "                $"Cannot open a Session without specifying a name of a database to operate on. Database name can be passed as an argument when Session is being opened or default database can be defined using '{nameof(DocumentStore)}.{nameof(IDocumentStore.Database)}' property."); " is 264.
Long Statement,Raven.Client.Documents.Session,InMemoryDocumentSessionOperations,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\InMemoryDocumentSessionOperations.cs,Dispose,The length of the statement  "                throw new InvalidOperationException($"Disposing session with active async task is forbidden' please make sure that all asynchronous session methods returning Task are awaited. Number of active async tasks: {asyncTasksCounter}"); " is 228.
Long Statement,Raven.Client.Documents.Session,InMemoryDocumentSessionOperations,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\InMemoryDocumentSessionOperations.cs,Dispose,The length of the statement  "                // when we are disposed from the finalizer then we have to dispose the context immediately instead of returning it to the pool because " is 134.
Long Statement,Raven.Client.Documents.Session,InMemoryDocumentSessionOperations,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\InMemoryDocumentSessionOperations.cs,Dispose,The length of the statement  "                // the finalizer of ArenaMemoryAllocator could be already called so we cannot return such context to the pool (RavenDB-7571) " is 124.
Long Statement,Raven.Client.Documents.Session,InMemoryDocumentSessionOperations,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\InMemoryDocumentSessionOperations.cs,RefreshInternal,The length of the statement  "            foreach (var property in ReflectionUtil.GetPropertiesAndFieldsFor(type' BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic)) " is 142.
Long Statement,Raven.Client.Documents.Session,InMemoryDocumentSessionOperations,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\InMemoryDocumentSessionOperations.cs,RefreshInternal,The length of the statement  "                    prop = prop.DeclaringType.GetProperty(prop.Name' BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic) ?? property; " is 131.
Long Statement,Raven.Client.Documents.Session,InMemoryDocumentSessionOperations,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\InMemoryDocumentSessionOperations.cs,ProcessQueryParameters,The length of the statement  "                    $"Parameters '{nameof(indexName)}' and '{nameof(collectionName)}' are mutually exclusive. Please specify only one of them."); " is 125.
Long Statement,Raven.Client.Documents.Session,DocumentsByEntityHolder,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\InMemoryDocumentSessionOperations.cs,CreateOnBeforeStoreDocumentsByEntityIfNeeded,The length of the statement  "            _onBeforeStoreDocumentsByEntity = new Dictionary<object' DocumentInfo>(ObjectReferenceEqualityComparer<object>.Default); " is 120.
Long Statement,Raven.Client.Documents.Session,DocumentsByEntityHolder,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\InMemoryDocumentSessionOperations.cs,TryGetValue,The length of the statement  "            return _onBeforeStoreDocumentsByEntity != null && _onBeforeStoreDocumentsByEntity.TryGetValue(entity' out documentInfo); " is 120.
Long Statement,Raven.Client.Documents.Session,SessionCountersBase,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\SessionCountersBase.cs,ThrowIncrementCounterAfterDeleteAttempt,The length of the statement  "                $"Can't increment counter {counter} of document {documentId}' there is a deferred command registered to delete a counter with the same name."); " is 143.
Long Statement,Raven.Client.Documents.Session,SessionCountersBase,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\SessionCountersBase.cs,ThrowDeleteCounterAfterIncrementAttempt,The length of the statement  "                $"Can't delete counter {counter} of document {documentId}' there is a deferred command registered to increment a counter with the same name."); " is 143.
Long Statement,Raven.Client.Documents.Session,SessionCountersBase,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\SessionCountersBase.cs,ThrowDocumentAlreadyDeletedInSession,The length of the statement  "            throw new InvalidOperationException($"Can't increment counter {counter} of document {documentId}' the document was already deleted in this session."); " is 150.
Long Statement,Raven.Client.Documents.Session.Loaders,AsyncMultiLoaderWithInclude<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\Loaders\AsyncMultiLoaderWithInclude.cs,LoadAsync,The length of the statement  "            return _session.LoadAsyncInternal<T>(new[] { id }' _includes.ToArray()' token: token).ContinueWith(x => x.Result.Values.FirstOrDefault()' token); " is 145.
Long Statement,Raven.Client.Documents.Session.Operations,BatchOperation,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\Operations\BatchOperation.cs,SetResult,The length of the statement  "                        $"Cluster transaction was send to a node that is not supporting it. So it was executed ONLY on the requested node on {_session.RequestExecutor.Url}."); " is 151.
Long Statement,Raven.Client.Documents.Session.Operations,BatchOperation,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\Operations\BatchOperation.cs,HandleAttachmentCopy,The length of the statement  "            HandleAttachmentPutInternal(batchResult' CommandType.AttachmentCOPY' nameof(CopyAttachmentCommandData.Id)' nameof(CopyAttachmentCommandData.Name)' nameof(Constants.Fields.CommandData.DocumentChangeVector)); " is 206.
Long Statement,Raven.Client.Documents.Session.Operations,BatchOperation,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\Operations\BatchOperation.cs,HandleAttachmentMove,The length of the statement  "            HandleAttachmentDeleteInternal(batchResult' CommandType.AttachmentMOVE' nameof(MoveAttachmentCommandData.Id)' nameof(MoveAttachmentCommandData.Name)' nameof(Constants.Fields.CommandData.DocumentChangeVector)); " is 209.
Long Statement,Raven.Client.Documents.Session.Operations,BatchOperation,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\Operations\BatchOperation.cs,HandleAttachmentMove,The length of the statement  "            HandleAttachmentPutInternal(batchResult' CommandType.AttachmentMOVE' nameof(MoveAttachmentCommandData.DestinationId)' nameof(MoveAttachmentCommandData.DestinationName)' nameof(Constants.Fields.CommandData.DestinationDocumentChangeVector)); " is 239.
Long Statement,Raven.Client.Documents.Session.Operations,BatchOperation,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\Operations\BatchOperation.cs,HandleAttachmentDelete,The length of the statement  "            HandleAttachmentDeleteInternal(batchResult' CommandType.AttachmentDELETE' Constants.Documents.Metadata.Id' nameof(DeleteAttachmentCommandData.Name)' nameof(Constants.Fields.CommandData.DocumentChangeVector)); " is 208.
Long Statement,Raven.Client.Documents.Session.Operations,BatchOperation,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\Operations\BatchOperation.cs,HandleAttachmentDeleteInternal,The length of the statement  "            if (documentInfo.Metadata.TryGet(Constants.Documents.Metadata.Attachments' out BlittableJsonReaderArray attachmentsJson) == false || attachmentsJson == null || " is 159.
Long Statement,Raven.Client.Documents.Session.Operations,BatchOperation,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\Operations\BatchOperation.cs,HandleAttachmentPut,The length of the statement  "            HandleAttachmentPutInternal(batchResult' CommandType.AttachmentPUT' nameof(PutAttachmentCommandData.Id)' nameof(PutAttachmentCommandData.Name)' nameof(Constants.Fields.CommandData.DocumentChangeVector)); " is 203.
Long Statement,Raven.Client.Documents.Session.Operations,BatchOperation,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\Operations\BatchOperation.cs,HandleAttachmentPutInternal,The length of the statement  "                attachments = documentInfo.Metadata.TryGet(Constants.Documents.Metadata.Attachments' out BlittableJsonReaderArray attachmentsJson) " is 130.
Long Statement,Raven.Client.Documents.Session.Operations,BatchOperation,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\Operations\BatchOperation.cs,HandleAttachmentPutInternal,The length of the statement  "                [nameof(AttachmentDetails.ChangeVector)] = GetLazyStringField(batchResult' type' nameof(AttachmentDetails.ChangeVector))' " is 121.
Long Statement,Raven.Client.Documents.Session.Operations,BatchOperation,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\Operations\BatchOperation.cs,HandlePatch,The length of the statement  "                    var changeVector = GetLazyStringField(batchResult' CommandType.PATCH' nameof(Constants.Documents.Metadata.ChangeVector)); " is 121.
Long Statement,Raven.Client.Documents.Session.Operations,BatchOperation,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\Operations\BatchOperation.cs,HandlePatch,The length of the statement  "                    var lastModified = GetLazyStringField(batchResult' CommandType.PATCH' nameof(Constants.Documents.Metadata.LastModified)); " is 121.
Long Statement,Raven.Client.Documents.Session.Operations,BatchOperation,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\Operations\BatchOperation.cs,HandleForceRevisionCreation,The length of the statement  "            // When forcing a revision for a document that does Not have any revisions yet then the HasRevisions flag is added to the document. " is 131.
Long Statement,Raven.Client.Documents.Session.Operations,BatchOperation,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\Operations\BatchOperation.cs,HandleForceRevisionCreation,The length of the statement  "            var changeVector = GetLazyStringField(batchResult' CommandType.ForceRevisionCreation' Constants.Documents.Metadata.ChangeVector); " is 129.
Long Statement,Raven.Client.Documents.Session.Operations,BatchOperation,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\Operations\BatchOperation.cs,HandleCounters,The length of the statement  "            var changeVector = GetLazyStringField(batchResult' CommandType.Counters' nameof(Constants.Fields.CommandData.DocumentChangeVector)' throwOnMissing: false); " is 155.
Long Statement,Raven.Client.Documents.Session.Operations,BatchOperation,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\Operations\BatchOperation.cs,ThrowOnNullResults,The length of the statement  "            throw new InvalidOperationException("Received empty response from the server. This is not supposed to happen and is likely a bug."); " is 132.
Long Statement,Raven.Client.Documents.Session.Operations,QueryOperation,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\Operations\QueryOperation.cs,AssertPageSizeSet,The length of the statement  "            throw new InvalidOperationException("Attempt to query without explicitly specifying a page size. You can use .Take() methods to set maximum number of results. By default the page size is set to int.MaxValue and can cause severe performance degradation."); " is 255.
Long Statement,Raven.Client.Documents.Session.Operations,QueryOperation,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\Operations\QueryOperation.cs,Deserialize,The length of the statement  "                if (identityProperty != null && (document.TryGetMember(identityProperty.Name' out object value) == false || value == null)) " is 123.
Long Statement,Raven.Client.Documents.Session.Operations,QueryOperation,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\Operations\QueryOperation.cs,SaveQueryResult,The length of the statement  "                Logger.Info($"Query '{_indexQuery.Query}' {parameters}returned {result.Results.Items.Count()} {isStale}results (total index results: {result.TotalResults})"); " is 158.
Long Statement,Raven.Client.Documents.Session.Operations,StreamOperation,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\Operations\StreamOperation.cs,CreateRequest,The length of the statement  "                    "Since Stream() does not wait for indexing (by design)' streaming query with WaitForNonStaleResults is not supported."); " is 120.
Long Statement,Raven.Client.Documents.Session.Operations,YieldStreamResults,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\Operations\StreamOperation.cs,MoveNext,The length of the statement  "                using (var builder = new BlittableJsonDocumentBuilder(_session.Context' BlittableJsonDocumentBuilder.UsageMode.ToDisk' "readArray/singleResult"' _parser' _state)) " is 162.
Long Statement,Raven.Client.Documents.Session.Operations,YieldStreamResults,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\Operations\StreamOperation.cs,MoveNextAsync,The length of the statement  "                if (await UnmanagedJsonParserHelper.ReadAsync(_peepingTomStream' _parser' _state' _buffer).ConfigureAwait(false) == false) " is 122.
Long Statement,Raven.Client.Documents.Session.Operations,YieldStreamResults,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\Operations\StreamOperation.cs,MoveNextAsync,The length of the statement  "                    if (await UnmanagedJsonParserHelper.ReadAsync(_peepingTomStream' _parser' _state' _buffer).ConfigureAwait(false) == false) " is 122.
Long Statement,Raven.Client.Documents.Session.Operations,YieldStreamResults,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\Operations\StreamOperation.cs,MoveNextAsync,The length of the statement  "                using (var builder = new BlittableJsonDocumentBuilder(_session.Context' BlittableJsonDocumentBuilder.UsageMode.ToDisk' "readArray/singleResult"' _parser' _state)) " is 162.
Long Statement,Raven.Client.Documents.Session.Operations,YieldStreamResults,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\Operations\StreamOperation.cs,InitializeAsync,The length of the statement  "                    if (await UnmanagedJsonParserHelper.ReadAsync(_peepingTomStream' _parser' _state' _buffer).ConfigureAwait(false) == false) " is 122.
Long Statement,Raven.Client.Documents.Session.Operations,YieldStreamResults,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\Operations\StreamOperation.cs,InitializeAsync,The length of the statement  "                    if (await UnmanagedJsonParserHelper.ReadAsync(_peepingTomStream' _parser' _state' _buffer).ConfigureAwait(false) == false) " is 122.
Long Statement,Raven.Client.Documents.Session.Tokens,FacetToken,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\Tokens\FacetToken.cs,Create,The length of the statement  "            var token = new FacetToken(QueryFieldUtil.EscapeIfNecessary(facet.FieldName)' QueryFieldUtil.EscapeIfNecessary(facet.DisplayFieldName)' null' optionsParameterName); " is 164.
Long Statement,Raven.Client.Documents.Session.Tokens,FacetToken,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\Tokens\FacetToken.cs,Create,The length of the statement  "            var token = new FacetToken(null' QueryFieldUtil.EscapeIfNecessary(facet.DisplayFieldName)' facet.Ranges' optionsParameterName); " is 127.
Long Statement,Raven.Client.Documents.Session.Tokens,FacetToken,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\Tokens\FacetToken.cs,Create,The length of the statement  "            var token = new FacetToken(null' QueryFieldUtil.EscapeIfNecessary(facet.DisplayFieldName)' ranges' optionsParameterName); " is 121.
Long Statement,Raven.Client.Documents.Session.Tokens,FieldsToFetchToken,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\Tokens\FieldsToFetchToken.cs,Create,The length of the statement  "                throw new ArgumentNullException(nameof(projections)' "Length of projections must be the same as length of fields to fetch."); " is 125.
Long Statement,Raven.Client.Documents.Session.Tokens,ShapeToken,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\Tokens\ShapeToken.cs,Circle,The length of the statement  "                return new ShapeToken($"spatial.circle(${radiusParameterName}' ${latitudeParameterName}' ${longitudeParameterName}' '{nameof(SpatialUnits.Kilometers)}')"); " is 155.
Long Statement,Raven.Client.Documents.Session.Tokens,ShapeToken,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\Tokens\ShapeToken.cs,Circle,The length of the statement  "            return new ShapeToken($"spatial.circle(${radiusParameterName}' ${latitudeParameterName}' ${longitudeParameterName}' '{nameof(SpatialUnits.Miles)}')"); " is 150.
Long Statement,Raven.Client.Documents.Smuggler,BackupUtils,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Smuggler\BackupUtils.cs,IsBackupFile,The length of the statement  "                Constants.Documents.PeriodicBackup.EncryptedIncrementalBackupExtension.Equals(extension' StringComparison.OrdinalIgnoreCase) || " is 127.
Long Statement,Raven.Client.Documents.Smuggler,BackupUtils,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Smuggler\BackupUtils.cs,IsBackupFile,The length of the statement  "                Constants.Documents.PeriodicBackup.EncryptedFullBackupExtension.Equals(extension' StringComparison.OrdinalIgnoreCase) || " is 120.
Long Statement,Raven.Client.Documents.Smuggler,BackupUtils,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Smuggler\BackupUtils.cs,IsIncrementalBackupFile,The length of the statement  "                Constants.Documents.PeriodicBackup.EncryptedIncrementalBackupExtension.Equals(extension' StringComparison.OrdinalIgnoreCase) || " is 127.
Long Statement,Raven.Client.Documents.Smuggler,DatabaseSmuggler,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Smuggler\DatabaseSmuggler.cs,ExportAsync,The length of the statement  "                        throw new InvalidOperationException($"Cannot export to selected path {toFile}' please ensure you selected proper filename."' e); " is 128.
Long Statement,Raven.Client.Documents.Smuggler,DatabaseSmuggler,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Smuggler\DatabaseSmuggler.cs,ExportAsync,The length of the statement  "                throw new InvalidOperationException("Cannot use Smuggler without a database defined' did you forget to call ForDatabase?"); " is 123.
Long Statement,Raven.Client.Documents.Smuggler,DatabaseSmuggler,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Smuggler\DatabaseSmuggler.cs,ExportAsync,The length of the statement  "                await _requestExecutor.ExecuteAsync(getOperationIdCommand' context' sessionInfo: null' token: token).ConfigureAwait(false); " is 123.
Long Statement,Raven.Client.Documents.Smuggler,DatabaseSmuggler,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Smuggler\DatabaseSmuggler.cs,ExportAsync,The length of the statement  "                var command = new ExportCommand(_requestExecutor.Conventions' context' options' handleStreamResponse' operationId' tcs); " is 120.
Long Statement,Raven.Client.Documents.Smuggler,DatabaseSmuggler,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Smuggler\DatabaseSmuggler.cs,ImportInternalAsync,The length of the statement  "                    throw new InvalidOperationException("Cannot use Smuggler without a database defined' did you forget to call ForDatabase?"); " is 123.
Long Statement,Raven.Client.Documents.Smuggler,DatabaseSmuggler,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Smuggler\DatabaseSmuggler.cs,ImportInternalAsync,The length of the statement  "                    await _requestExecutor.ExecuteAsync(getOperationIdCommand' context' sessionInfo: null' token: token).ConfigureAwait(false); " is 123.
Long Statement,Raven.Client.Documents.Smuggler,PeriodicBackupFileExtensionComparer,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Smuggler\PeriodicBackupFileExtensionComparer.cs,Compare,The length of the statement  "            if (string.Equals(x' Constants.Documents.PeriodicBackup.EncryptedSnapshotExtension' StringComparison.OrdinalIgnoreCase) || " is 122.
Long Statement,Raven.Client.Documents.Subscriptions,DocumentSubscriptions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Subscriptions\DocumentSubscriptions.cs,GetSubscriptionsAsync,The length of the statement  "                await requestExecutor.ExecuteAsync(command' jsonOperationContext' sessionInfo: null' token: token).ConfigureAwait(false); " is 121.
Long Statement,Raven.Client.Documents.Subscriptions,DocumentSubscriptions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Subscriptions\DocumentSubscriptions.cs,DeleteAsync,The length of the statement  "                await requestExecutor.ExecuteAsync(command' jsonOperationContext' sessionInfo: null' token: token).ConfigureAwait(false); " is 121.
Long Statement,Raven.Client.Documents.Subscriptions,DocumentSubscriptions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Subscriptions\DocumentSubscriptions.cs,DropConnectionAsync,The length of the statement  "                await requestExecutor.ExecuteAsync(command' jsonOperationContext' sessionInfo: null' token: token).ConfigureAwait(false); " is 121.
Long Statement,Raven.Client.Documents.Subscriptions,SubscriptionBatch<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Subscriptions\SubscriptionBatch.cs,ValidateSessionOptions,The length of the statement  "                throw new InvalidOperationException($"Cannot set '{nameof(options.Database)}' when session is opened in subscription."); " is 120.
Long Statement,Raven.Client.Documents.Subscriptions,SubscriptionBatch<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Subscriptions\SubscriptionBatch.cs,ValidateSessionOptions,The length of the statement  "                throw new InvalidOperationException($"Cannot set '{nameof(options.RequestExecutor)}' when session is opened in subscription."); " is 127.
Long Statement,Raven.Client.Documents.Subscriptions,SubscriptionBatch<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Subscriptions\SubscriptionBatch.cs,ValidateSessionOptions,The length of the statement  "                throw new InvalidOperationException($"Cannot set '{nameof(options.TransactionMode)}' when session is opened in subscription. Only '{nameof(TransactionMode.SingleNode)}' mode is supported."); " is 190.
Long Statement,Raven.Client.Documents.Subscriptions,Item,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Subscriptions\SubscriptionBatch.cs,ThrowItemProcessException,The length of the statement  "                throw new InvalidOperationException($"Failed to process document {Id} with Change Vector {ChangeVector} because:{Environment.NewLine}{ExceptionMessage}"); " is 154.
Long Statement,Raven.Client.Documents.Subscriptions,SubscriptionWorker<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Subscriptions\SubscriptionWorker.cs,ConnectToServer,The length of the statement  "            var command = new GetTcpInfoForRemoteTaskCommand("Subscription/" + _dbName' _dbName' _options?.SubscriptionName' verifyDatabase: true); " is 135.
Long Statement,Raven.Client.Documents.Subscriptions,SubscriptionWorker<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Subscriptions\SubscriptionWorker.cs,ConnectToServer,The length of the statement  "                        await requestExecutor.ExecuteAsync(_redirectNode' null' context' command' shouldRetry: false' sessionInfo: null' token: token) " is 126.
Long Statement,Raven.Client.Documents.Subscriptions,SubscriptionWorker<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Subscriptions\SubscriptionWorker.cs,ConnectToServer,The length of the statement  "                (_tcpClient' chosenUrl) = await TcpUtils.ConnectAsyncWithPriority(tcpInfo' requestExecutor.DefaultTimeout).ConfigureAwait(false); " is 129.
Long Statement,Raven.Client.Documents.Subscriptions,SubscriptionWorker<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Subscriptions\SubscriptionWorker.cs,ConnectToServer,The length of the statement  "                _tcpClient.ReceiveBufferSize = _options?.ReceiveBufferSizeInBytes ?? SubscriptionWorkerOptions.DefaultReceiveBufferSizeInBytes; " is 127.
Long Statement,Raven.Client.Documents.Subscriptions,SubscriptionWorker<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Subscriptions\SubscriptionWorker.cs,ConnectToServer,The length of the statement  "                _stream = await TcpUtils.WrapStreamWithSslAsync(_tcpClient' tcpInfo' _store.Certificate' requestExecutor.DefaultTimeout).ConfigureAwait(false); " is 143.
Long Statement,Raven.Client.Documents.Subscriptions,SubscriptionWorker<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Subscriptions\SubscriptionWorker.cs,ConnectToServer,The length of the statement  "                        $"{_options.SubscriptionName}: TCP negotiation resulted with an invalid protocol version:{_supportedFeatures.ProtocolVersion}"); " is 128.
Long Statement,Raven.Client.Documents.Subscriptions,SubscriptionWorker<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Subscriptions\SubscriptionWorker.cs,ConnectToServer,The length of the statement  "                _subscriptionLocalRequestExecutor = RequestExecutor.CreateForSingleNodeWithoutConfigurationUpdates(command.RequestedNode.Url' _dbName' requestExecutor.Certificate' _store.Conventions); " is 184.
Long Statement,Raven.Client.Documents.Subscriptions,SubscriptionWorker<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Subscriptions\SubscriptionWorker.cs,LegacyTryGetTcpInfo,The length of the statement  "                await requestExecutor.ExecuteAsync(node' null' context' tcpCommand' shouldRetry: false' sessionInfo: null' token: token) " is 120.
Long Statement,Raven.Client.Documents.Subscriptions,SubscriptionWorker<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Subscriptions\SubscriptionWorker.cs,SendDropMessage,The length of the statement  "                [nameof(TcpConnectionHeaderMessage.OperationVersion)] = TcpConnectionHeaderMessage.GetOperationTcpVersion(TcpConnectionHeaderMessage.OperationTypes.Drop)' " is 154.
Long Statement,Raven.Client.Documents.Subscriptions,SubscriptionWorker<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Subscriptions\SubscriptionWorker.cs,SendDropMessage,The length of the statement  "                    $"Couldn't agree on subscription TCP version ours:{TcpConnectionHeaderMessage.SubscriptionTcpVersion} theirs:{reply.Version}" " is 125.
Long Statement,Raven.Client.Documents.Subscriptions,SubscriptionWorker<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Subscriptions\SubscriptionWorker.cs,AssertConnectionState,The length of the statement  "                        $"Subscription With Id '{_options.SubscriptionName}' cannot be opened' because it's in use and the connection strategy is {_options.Strategy}"); " is 144.
Long Statement,Raven.Client.Documents.Subscriptions,SubscriptionWorker<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Subscriptions\SubscriptionWorker.cs,AssertConnectionState,The length of the statement  "                        $"Subscription With Id '{_options.SubscriptionName}' cannot be opened' because it is in invalid state. " + connectionStatus.Exception); " is 135.
Long Statement,Raven.Client.Documents.Subscriptions,SubscriptionWorker<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Subscriptions\SubscriptionWorker.cs,AssertConnectionState,The length of the statement  "                        $"Subscription With Id '{_options.SubscriptionName}' cannot be opened' because it does not exist. " + connectionStatus.Exception); " is 130.
Long Statement,Raven.Client.Documents.Subscriptions,SubscriptionWorker<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Subscriptions\SubscriptionWorker.cs,AssertConnectionState,The length of the statement  "                    var appropriateNode = connectionStatus.Data?[nameof(SubscriptionConnectionServerMessage.SubscriptionRedirectData.RedirectedTag)]?.ToString(); " is 141.
Long Statement,Raven.Client.Documents.Subscriptions,SubscriptionWorker<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Subscriptions\SubscriptionWorker.cs,AssertConnectionState,The length of the statement  "                        $"Subscription With Id '{_options.SubscriptionName}' cannot be processed by current node' it will be redirected to {appropriateNode}]{Environment.NewLine}Reasons:{string.Join(Environment.NewLine'reasonsDictionary.Select(x=>$"{x.Key}:{x.Value}"))}"' " is 248.
Long Statement,Raven.Client.Documents.Subscriptions,SubscriptionWorker<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Subscriptions\SubscriptionWorker.cs,ReadSingleSubscriptionBatchFromServer,The length of the statement  "                SubscriptionConnectionServerMessage receivedMessage = await ReadNextObject(context' tcpStream' buffer).ConfigureAwait(false); " is 125.
Long Statement,Raven.Client.Documents.Subscriptions,SubscriptionWorker<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Subscriptions\SubscriptionWorker.cs,ReadNextObject,The length of the statement  "                var blittable = await context.ParseToMemoryAsync(stream' "Subscription/next/object"' BlittableJsonDocumentBuilder.UsageMode.None' buffer) " is 137.
Long Statement,Raven.Client.Documents.Subscriptions,SubscriptionWorker<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Subscriptions\SubscriptionWorker.cs,AssertLastConnectionFailure,The length of the statement  "                    $"Subscription connection was in invalid state for more than {_options.MaxErroneousPeriod} and therefore will be terminated"); " is 126.
Long Statement,Raven.Client.Documents.Subscriptions,SubscriptionWorker<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Subscriptions\SubscriptionWorker.cs,ShouldTryToReconnect,The length of the statement  "                                        new InvalidOperationException($"Could not redirect to {se.AppropriateNode}' because it was not found in local topology' even after retrying")); " is 143.
Long Statement,Raven.Client.Exceptions,ExceptionDispatcher,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Exceptions\ExceptionDispatcher.cs,Get,The length of the statement  "                exception = (Exception)Activator.CreateInstance(type' BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public' null' new[] { error }' null' null); " is 159.
Long Statement,Raven.Client.Exceptions,ExceptionDispatcher,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Exceptions\ExceptionDispatcher.cs,Throw,The length of the statement  "                    exception = (Exception)Activator.CreateInstance(type' BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public' null' new[] { message }' null' null); " is 161.
Long Statement,Raven.Client.Exceptions,ExceptionDispatcher,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Exceptions\ExceptionDispatcher.cs,Throw,The length of the statement  "                    json.TryGet(nameof(IndexCompilationException.IndexDefinitionProperty)' out indexCompilationException.IndexDefinitionProperty); " is 126.
Long Statement,Raven.Client.Exceptions,ExceptionDispatcher,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Exceptions\ExceptionDispatcher.cs,GetExceptionSchema,The length of the statement  "                throw new BadResponseException($"After deserialization the {response.StatusCode} response property '{nameof(schema.Message)}' is null. JSON: {json}"); " is 150.
Long Statement,Raven.Client.Exceptions,ExceptionDispatcher,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Exceptions\ExceptionDispatcher.cs,GetExceptionSchema,The length of the statement  "                throw new BadResponseException($"After deserialization the {response.StatusCode} response property '{nameof(schema.Error)}' is null. JSON: {json}"); " is 148.
Long Statement,Raven.Client.Exceptions,ExceptionDispatcher,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Exceptions\ExceptionDispatcher.cs,GetExceptionSchema,The length of the statement  "                throw new BadResponseException($"After deserialization the {response.StatusCode} response property '{nameof(schema.Type)}' is null. JSON: {json}"); " is 147.
Long Statement,Raven.Client.Exceptions,ExceptionDispatcher,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Exceptions\ExceptionDispatcher.cs,GetJson,The length of the statement  "                    using (var reader = new StreamReader(stream' Encoding.UTF8' detectEncodingFromByteOrderMarks: true' bufferSize: 4096' leaveOpen: true)) " is 135.
Long Statement,Raven.Client.Exceptions,UnsuccessfulFileAccessException,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Exceptions\UnsuccessfulFileAccessException.cs,GetMessage,The length of the statement  "            var msg = $@"Failed to get {accessType} access a file at <{filePath}>.{Environment.NewLine}Possible reasons:{Environment.NewLine}"; " is 131.
Long Statement,Raven.Client.Exceptions,UnsuccessfulFileAccessException,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Exceptions\UnsuccessfulFileAccessException.cs,GetMessage,The length of the statement  "                msg += $"* The file may be locked by another process that has it opened. The 'lslk' utility can help list locking processes. Please refer to man pages for more information{Environment.NewLine}"; " is 194.
Long Statement,Raven.Client.Exceptions,UnsuccessfulFileAccessException,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Exceptions\UnsuccessfulFileAccessException.cs,GetMessage,The length of the statement  "                    msg += $@"* The file is being used by the following process(es): {string.Join("'"' whoIsLocking)}. {Environment.NewLine}"; " is 122.
Long Statement,Raven.Client.Exceptions.Documents.Indexes,AttachmentDoesNotExistException,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Exceptions\Documents\Attachments\AttachmentDoesNotExistException.cs,ThrowFor,The length of the statement  "            throw new AttachmentDoesNotExistException($"There is no attachment with '{attachmentName}' name for document '{documentId}'."); " is 127.
Long Statement,Raven.Client.Exceptions.Documents.Compilation,IndexCompilationException,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Exceptions\Documents\Compilation\IndexCompilationException.cs,ToString,The length of the statement  "            return this.ExceptionToString(description => description.AppendFormat("' IndexDefinitionProperty='{0}'' ProblematicText='{1}'"' IndexDefinitionProperty' ProblematicText)); " is 171.
Long Statement,Raven.Client.Exceptions.Documents.Counters,CounterOverflowException,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Exceptions\Documents\Counters\CounterOverflowException.cs,ThrowFor,The length of the statement  "            throw new CounterOverflowException($"Could not increment counter '{counterName}' from document '{docId}' with value '{value}' by '{delta}'."' inner); " is 149.
Long Statement,Raven.Client.Exceptions.Documents,DocumentConflictException,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Exceptions\Documents\DocumentConflictException.cs,From,The length of the statement  "                throw new InvalidDataException("Expected to find property named " + nameof(DocId) + " in the exception received from the server' but didn't find it. This is probably a bug and should be reported."); " is 198.
Long Statement,Raven.Client.Exceptions.Documents,DocumentConflictException,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Exceptions\Documents\DocumentConflictException.cs,From,The length of the statement  "                throw new InvalidDataException("Expected to find property named " + nameof(Message) + " in the exception received from the server' but didn't find it. This is probably a bug and should be reported."); " is 200.
Long Statement,Raven.Client.Exceptions.Documents,DocumentConflictException,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Exceptions\Documents\DocumentConflictException.cs,From,The length of the statement  "                throw new InvalidDataException("Expected to find property named " + nameof(LargestEtag) + " in the exception received from the server' but didn't find it. This is probably a bug and should be reported."); " is 204.
Long Statement,Raven.Client.Extensions,BlittableJsonExtensions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Extensions\BlittableJsonExtensions.cs,GetMetadata,The length of the statement  "            if (document.TryGet(Constants.Documents.Metadata.Key' out BlittableJsonReaderObject metadata) == false || metadata == null) " is 123.
Long Statement,Raven.Client.Extensions,BlittableJsonTextWriterExtensions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Extensions\BlittableJsonTextWriterExtensions.cs,WriteIndexQuery,The length of the statement  "                writer.WriteObject(EntityToBlittable.ConvertEntityToBlittable(query.QueryParameters' conventions' context' conventions.CreateSerializer()' documentInfo: null)); " is 160.
Long Statement,Raven.Client.Extensions,EnumerableExtension,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Extensions\EnumerableExtension.cs,ForceEnumerateInThreadSafeManner,The length of the statement  "            // thanks to: https://stackoverflow.com/questions/47630824/is-c-sharp-linq-orderby-threadsafe-when-used-with-concurrentdictionarytkey-tva# " is 138.
Long Statement,Raven.Client.Extensions,ExpressionExtensions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Extensions\ExpressionExtensions.cs,ToPropertyPath,The length of the statement  "            var propertyPathExpressionVisitor = new PropertyPathExpressionVisitor(propertySeparator.ToString()' collectionSeparator); " is 121.
Long Statement,Raven.Client.Extensions,ExpressionExtensions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Extensions\ExpressionExtensions.cs,ToPropertyPath,The length of the statement  "                    if (nextVal.Length == collectionSeparator.Length && nextVal.Equals(collectionSeparator' StringComparison.OrdinalIgnoreCase)) " is 124.
Long Statement,Raven.Client.Extensions,ExpressionExtensions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Extensions\ExpressionExtensions.cs,ToPropertyPath,The length of the statement  "            return builder.ToString().Trim(propertySeparator' collectionSeparator[0]' collectionSeparator[1]' collectionSeparator[2]); " is 122.
Long Statement,Raven.Client.Extensions,TaskExtensions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Extensions\TaskExtensions.cs,IgnoreUnobservedExceptions,The length of the statement  "            return task.ContinueWith(t => GC.KeepAlive(t.Exception)' TaskContinuationOptions.ExecuteSynchronously | TaskContinuationOptions.OnlyOnFaulted); " is 143.
Long Statement,Raven.Client.Extensions,WhoIsLocking,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Extensions\WhoIsLocking.cs,GetProcessesUsingFile,The length of the statement  "                    throw new Win32Exception(Marshal.GetLastWin32Error()' $"Failed to RmRegisterResources for file '{filePath}' with error {rv} (sessionHandle={sessionHandle})"); " is 158.
Long Statement,Raven.Client.Extensions,WhoIsLocking,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Extensions\WhoIsLocking.cs,GetProcessesUsingFile,The length of the statement  "                        throw new Win32Exception(Marshal.GetLastWin32Error()' $"Failed to RmGetList for file '{filePath}' with error {rv} (sessionHandle={sessionHandle})"); " is 148.
Long Statement,Raven.Client.Extensions,WhoIsLocking,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Extensions\WhoIsLocking.cs,GetProcessesUsingFile,The length of the statement  "                    throw new Win32Exception(Marshal.GetLastWin32Error()' $"Failed to RmGetList for file '{filePath}' with error {rv} (sessionHandle={sessionHandle})"); " is 148.
Long Statement,Raven.Client.Http,ClusterRequestExecutor,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Http\ClusterRequestExecutor.cs,PerformHealthCheck,The length of the statement  "            return ExecuteAsync(serverNode' nodeIndex' context' new GetTcpInfoCommand("health-check")' shouldRetry: false' sessionInfo: null' token: CancellationToken.None); " is 161.
Long Statement,Raven.Client.Http,ClusterRequestExecutor,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Http\ClusterRequestExecutor.cs,UpdateTopologyAsync,The length of the statement  "                    await ExecuteAsync(node' null' context' command' shouldRetry: false' sessionInfo: null' token: CancellationToken.None).ConfigureAwait(false); " is 141.
Long Statement,Raven.Client.Http,NodeStatus,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Http\ClusterTopology.cs,TimerCallback,The length of the statement  "#pragma warning disable CS4014 // Because this call is not awaited' execution of the current method continues before the call is completed " is 138.
Long Statement,Raven.Client.Http,HttpCache,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Http\HttpCache.cs,Set,The length of the statement  "            //We need to check if the cache is been disposed after the item was added otherwise we will run into another race condition " is 123.
Long Statement,Raven.Client.Http,HttpCache,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Http\HttpCache.cs,SetNotFound,The length of the statement  "            //We need to check if the cache is been disposed after the item was added otherwise we will run into another race condition " is 123.
Long Statement,Raven.Client.Http,NodeSelector,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Http\NodeSelector.cs,GetRequestedNode,The length of the statement  "                    throw new RequestedNodeUnavailableException($"Requested node {nodeTag} currently unavailable' please try again later."); " is 120.
Long Statement,Raven.Client.Http,RavenCommand<TResult>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Http\RavenCommand.cs,SetResponse,The length of the statement  "            throw new InvalidOperationException($"'{GetType()}' command must override the SetResponse method which expects response with the following type: {ResponseType}."); " is 163.
Long Statement,Raven.Client.Http,RavenCommand<TResult>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Http\RavenCommand.cs,SetResponseRaw,The length of the statement  "            throw new NotSupportedException($"When {nameof(ResponseType)} is set to Raw then please override this method to handle the response."); " is 135.
Long Statement,Raven.Client.Http,RequestExecutor,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Http\RequestExecutor.cs,UpdateClientConfigurationAsync,The length of the statement  "                    await ExecuteAsync(currentNode' currentIndex' context' command' shouldRetry: false' sessionInfo: null' token: CancellationToken.None).ConfigureAwait(false); " is 156.
Long Statement,Raven.Client.Http,RequestExecutor,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Http\RequestExecutor.cs,UpdateTopologyAsync,The length of the statement  "                    await ExecuteAsync(node' null' context' command' shouldRetry: false' sessionInfo: null' token: CancellationToken.None).ConfigureAwait(false); " is 141.
Long Statement,Raven.Client.Http,RequestExecutor,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Http\RequestExecutor.cs,ExecuteAsync,The length of the statement  "                return ExecuteAsync(chosenNode' nodeIndex' context' command' shouldRetry: true' sessionInfo: sessionInfo' token: token); " is 120.
Long Statement,Raven.Client.Http,RequestExecutor,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Http\RequestExecutor.cs,ValidateUrls,The length of the statement  "                    throw new InvalidOperationException("The url " + url + " is using HTTP' but a certificate is specified' which require us to use HTTPS"); " is 136.
Long Statement,Raven.Client.Http,RequestExecutor,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Http\RequestExecutor.cs,ValidateUrls,The length of the statement  "                throw new InvalidOperationException("The url " + url + " is using HTTP' but other urls are using HTTPS' and mixing of HTTP and HTTPS is not allowed"); " is 150.
Long Statement,Raven.Client.Http,RequestExecutor,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Http\RequestExecutor.cs,ExecuteAsync,The length of the statement  "            using (var cachedItem = GetFromCache(context' command' !noCaching' url' out string cachedChangeVector' out BlittableJsonReaderObject cachedValue)) " is 146.
Long Statement,Raven.Client.Http,RequestExecutor,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Http\RequestExecutor.cs,ExecuteAsync,The length of the statement  "                var response = await SendRequestToServer(chosenNode' nodeIndex' context' command' shouldRetry' sessionInfo' request' url' token).ConfigureAwait(false); " is 151.
Long Statement,Raven.Client.Http,RequestExecutor,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Http\RequestExecutor.cs,ExecuteAsync,The length of the statement  "                        if (await HandleUnsuccessfulResponse(chosenNode' nodeIndex' context' command' request' response' url' sessionInfo' shouldRetry' token).ConfigureAwait(false) == false) " is 166.
Long Statement,Raven.Client.Http,RequestExecutor,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Http\RequestExecutor.cs,RefreshIfNeeded,The length of the statement  "                        debugTag: refreshTopology ? "refresh-topology-header" : refreshClientConfiguration ? "refresh-client-configuration-header" : null) " is 130.
Long Statement,Raven.Client.Http,RequestExecutor,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Http\RequestExecutor.cs,SendRequestToServer,The length of the statement  "                                var timeoutException = new TimeoutException($"The request for {request.RequestUri} failed with timeout after {timeout}"' e); " is 124.
Long Statement,Raven.Client.Http,RequestExecutor,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Http\RequestExecutor.cs,SendRequestToServer,The length of the statement  "                                if (await HandleServerDown(url' chosenNode' nodeIndex' context' command' request' null' timeoutException' sessionInfo' shouldRetry' " is 131.
Long Statement,Raven.Client.Http,RequestExecutor,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Http\RequestExecutor.cs,SendRequestToServer,The length of the statement  "                    if (await HandleServerDown(url' chosenNode' nodeIndex' context' command' request' null' e' sessionInfo' shouldRetry' requestContext' token) " is 139.
Long Statement,Raven.Client.Http,RequestExecutor,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Http\RequestExecutor.cs,SetRequestHeaders,The length of the statement  "                request.Headers.TryAddWithoutValidation(Constants.Headers.ClientConfigurationEtag' $"\"{ClientConfigurationEtag.ToInvariantString()}\""); " is 137.
Long Statement,Raven.Client.Http,RequestExecutor,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Http\RequestExecutor.cs,SetRequestHeaders,The length of the statement  "                request.Headers.TryAddWithoutValidation(Constants.Headers.LastKnownClusterTransactionIndex' sessionInfo.LastClusterTransactionIndex.ToString()); " is 144.
Long Statement,Raven.Client.Http,RequestExecutor,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Http\RequestExecutor.cs,ThrowFailedToContactAllNodes,The length of the statement  "                throw new InvalidOperationException("Received unsuccessful response and couldn't recover from it. Also' no record of exceptions per failed nodes. " + " is 149.
Long Statement,Raven.Client.Http,RequestExecutor,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Http\RequestExecutor.cs,ThrowFailedToContactAllNodes,The length of the statement  "            var message = $"Tried to send '{command.GetType().Name}' request via `{request.Method} {request.RequestUri.PathAndQuery}` " + " is 125.
Long Statement,Raven.Client.Http,RequestExecutor,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Http\RequestExecutor.cs,ThrowFailedToContactAllNodes,The length of the statement  "                message += $"I was able to fetch {_topologyTakenFromNode.Database} topology from {_topologyTakenFromNode.Url}.{Environment.NewLine}"; " is 133.
Long Statement,Raven.Client.Http,RequestExecutor,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Http\RequestExecutor.cs,ThrowInvalidConcurrentSessionUsage,The length of the statement  "            throw new InvalidOperationException($"Cannot execute async command {command} while another async command is running in the same session {sessionInfo.SessionId}"); " is 162.
Long Statement,Raven.Client.Http,RequestExecutor,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Http\RequestExecutor.cs,ThrowTimeoutTooLarge,The length of the statement  "            throw new InvalidOperationException($"Maximum request timeout is set to '{GlobalHttpClientTimeout}' but was '{timeout}'."); " is 123.
Long Statement,Raven.Client.Http,RequestExecutor,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Http\RequestExecutor.cs,HandleUnsuccessfulResponse,The length of the statement  "                        (Certificate == null ? "a certificate is required. " : Certificate.FriendlyName + " does not have permission to access it or is unknown. ") + " is 141.
Long Statement,Raven.Client.Http,RequestExecutor,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Http\RequestExecutor.cs,HandleUnsuccessfulResponse,The length of the statement  "                        command.FailedNodes[chosenNode] = new UnsuccessfulRequestException($"Request to '{request.RequestUri}' ({request.Method}) is not relevant for this node anymore."); " is 163.
Long Statement,Raven.Client.Http,RequestExecutor,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Http\RequestExecutor.cs,HandleUnsuccessfulResponse,The length of the statement  "                        var success = await UpdateTopologyAsync(chosenNode' 60 * 1000' forceUpdate: true' debugTag: "handle-unsuccessful-response").ConfigureAwait(false); " is 146.
Long Statement,Raven.Client.Http,RequestExecutor,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Http\RequestExecutor.cs,HandleUnsuccessfulResponse,The length of the statement  "                        await ExecuteAsync(node' index' context' command' shouldRetry: false' sessionInfo: sessionInfo' token: token).ConfigureAwait(false); " is 132.
Long Statement,Raven.Client.Http,RequestExecutor,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Http\RequestExecutor.cs,HandleUnsuccessfulResponse,The length of the statement  "                    await ExecuteAsync(node' index' context' command' shouldRetry: true' sessionInfo: sessionInfo' token: token).ConfigureAwait(false); " is 131.
Long Statement,Raven.Client.Http,RequestExecutor,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Http\RequestExecutor.cs,HandleUnsuccessfulResponse,The length of the statement  "                    return await HandleServerDown(url' chosenNode' nodeIndex' context' command' request' response' null' sessionInfo' shouldRetry' requestContext: null' token: token).ConfigureAwait(false); " is 185.
Long Statement,Raven.Client.Http,RequestExecutor,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Http\RequestExecutor.cs,HandleServerDown,The length of the statement  "            await ExecuteAsync(currentNode' currentIndex' context' command' shouldRetry' sessionInfo: sessionInfo' token: token).ConfigureAwait(false); " is 139.
Long Statement,Raven.Client.Http,RequestExecutor,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Http\RequestExecutor.cs,Broadcast,The length of the statement  "                        // we can't dispose it right away' we need for the task to be completed in order not to have a concurrent usage of the context. " is 127.
Long Statement,Raven.Client.Http,RequestExecutor,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Http\RequestExecutor.cs,Broadcast,The length of the statement  "                        broadcastState.Key?.ContinueWith(_=> broadcastState.Value.ReturnContext.Dispose()' TaskContinuationOptions.ExecuteSynchronously); " is 129.
Long Statement,Raven.Client.Http,RequestExecutor,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Http\RequestExecutor.cs,WaitForBroadcastResult,The length of the statement  "                    command.FailedNodes[node] = completed.Exception?.ExtractSingleInnerException() ?? new UnsuccessfulRequestException(failed.Node.Url); " is 132.
Long Statement,Raven.Client.Http,RequestExecutor,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Http\RequestExecutor.cs,PerformHealthCheck,The length of the statement  "            return ExecuteAsync(serverNode' nodeIndex' context' FailureCheckOperation.GetCommand(Conventions' context)' shouldRetry: false' sessionInfo: null' token: CancellationToken.None); " is 178.
Long Statement,Raven.Client.Http,RequestExecutor,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Http\RequestExecutor.cs,CreateHttpMessageHandler,The length of the statement  "                throw new NotSupportedException("HttpClient implementation for the current platform does not support request compression."); " is 124.
Long Statement,Raven.Client.Http,RequestExecutor,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Http\RequestExecutor.cs,ValidateClientKeyUsages,The length of the statement  "                throw new InvalidOperationException("Client certificate " + certificate.FriendlyName + " must be defined with the following 'Enhanced Key Usage': Client Authentication (Oid 1.3.6.1.5.5.7.3.2)"); " is 194.
Long Statement,Raven.Client.Http,RequestExecutor,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Http\RequestExecutor.cs,ThrowRemoteCertificateValidationCallbackRegistrationException,The length of the statement  "                $"Cannot register {nameof(RemoteCertificateValidationCallback)}. {ServerCertificateCustomValidationCallbackRegistrationException.Message}"' " is 139.
Long Statement,Raven.Client.Http,RequestExecutor,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Http\RequestExecutor.cs,ThrowCertificateNameMismatchException,The length of the statement  "            // The sender parameter passed to the RemoteCertificateValidationCallback can be a host string name or an object derived " is 120.
Long Statement,Raven.Client.Http,RequestExecutor,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Http\RequestExecutor.cs,ThrowCertificateNameMismatchException,The length of the statement  "                    throw new CertificateNameMismatchException($"The hostname of the server URL must match one of the CN or SAN properties of the server certificate: {cn}' {string.Join("' "' san)}"); " is 179.
Long Statement,Raven.Client.Http,RequestExecutor,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Http\RequestExecutor.cs,ThrowCertificateNameMismatchException,The length of the statement  "            throw new CertificateNameMismatchException($"You are trying to contact host {hostname} but the hostname must match one of the CN or SAN properties of the server certificate: {cn}' {string.Join("' "' san)}"); " is 207.
Long Statement,Raven.Client.Json,BlittableExtensions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Json\BlittableExtensions.cs,SelectTokenWithRavenSyntaxReturningFlatStructure,The length of the statement  "                        foreach (var subItem in itemAsBlittable.SelectTokenWithRavenSyntaxReturningFlatStructure(string.Join("[]."' pathParts.Skip(1).ToArray()))) " is 138.
Long Statement,Raven.Client.Json,BlittableExtensions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Json\BlittableExtensions.cs,SelectTokenWithRavenSyntaxReturningFlatStructure,The length of the statement  "                        foreach (var subItem in itemAsBlittable.SelectTokenWithRavenSyntaxReturningFlatStructure(string.Join("[]."' pathParts.Skip(1).ToArray()))) " is 138.
Long Statement,Raven.Client.Json,BlittableExtensions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Json\BlittableExtensions.cs,SelectTokenWithRavenSyntaxReturningFlatStructure,The length of the statement  "                throw new ArgumentException($"Illegal path ('{path}')' cannot understand how to get tokens from: {result} <{result.GetType().FullName}>"); " is 138.
Long Statement,Raven.Client.Json,BlittableJsonReader,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Json\BlittableJsonReader.cs,ReadAsDateTime,The length of the statement  "            return DateTime.ParseExact(str' DefaultFormat.DateTimeFormatsToRead' CultureInfo.InvariantCulture' DateTimeStyles.RoundtripKind); " is 129.
Long Statement,Raven.Client.Json,BlittableJsonReader,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Json\BlittableJsonReader.cs,ReadAsDateTimeOffset,The length of the statement  "            return DateTimeOffset.ParseExact(str' DefaultFormat.DateTimeFormatsToRead' CultureInfo.InvariantCulture' DateTimeStyles.RoundtripKind); " is 135.
Long Statement,Raven.Client.Json,BlittableJsonWriter,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Json\BlittableJsonWriter.cs,WritePropertyValue,The length of the statement  "                    throw new NotSupportedException($"The value type {value.GetType().FullName} of key {propName} is not supported in the metadata"); " is 129.
Long Statement,Raven.Client.Json,BlittableJsonWriter,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Json\BlittableJsonWriter.cs,WriteValue,The length of the statement  "                _manualBlittableJsonDocumentBuilder.WriteValue(value.Value.GetDefaultRavenFormat(isUtc: value.Value.Kind == DateTimeKind.Utc)); " is 127.
Long Statement,Raven.Client.Json,BlittableOperation,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Json\BlittableOperation.cs,CompareBlittable,The length of the statement  "                        var changed = CompareBlittableArray(FieldPathCombine(fieldPath' newProp.Name)' id' oldArray' newArray' changes' docChanges' newProp.Name); " is 138.
Long Statement,Raven.Client.Json,BlittableOperation,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Json\BlittableOperation.cs,CompareBlittableArray,The length of the statement  "                            changed |= CompareBlittableArray(AddIndexFieldPath(fieldPath' position)' id' bjra1' bjra2' changes' docChanges' propName); " is 122.
Long Statement,Raven.Client.Json,BlittablePath,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Json\BlittablePath.cs,ParseMain,The length of the statement  "                            string member = GetEscapedMember(_expression' currentPartStartIndex' _currentIndex - currentPartStartIndex' escapePositions.Value); " is 131.
Long Statement,Raven.Client.Json,BlittablePath,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Json\BlittablePath.cs,ParseMain,The length of the statement  "                            string member = GetEscapedMember(_expression'currentPartStartIndex' _currentIndex - currentPartStartIndex' escapePositions.Value); " is 130.
Long Statement,Raven.Client.Json,BlittablePath,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Json\BlittablePath.cs,ParseMain,The length of the statement  "                string member = GetEscapedMember(_expression' currentPartStartIndex' _currentIndex - currentPartStartIndex' escapePositions.Value); " is 131.
Long Statement,Raven.Client.Json.Converters,JsonDateTimeISO8601Converter,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Json\Converters\JsonDateTimeISO8601Converter.cs,ReadJson,The length of the statement  "                    if (DateTime.TryParseExact(s' DefaultFormat.DateTimeFormatsToRead' CultureInfo.InvariantCulture' DateTimeStyles.RoundtripKind' out time)) " is 137.
Long Statement,Raven.Client.Json.Converters,JsonDateTimeISO8601Converter,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Json\Converters\JsonDateTimeISO8601Converter.cs,ReadJson,The length of the statement  "                    if (DateTimeOffset.TryParseExact(s' DefaultFormat.DateTimeFormatsToRead' CultureInfo.InvariantCulture' DateTimeStyles.RoundtripKind' out time)) " is 143.
Long Statement,Raven.Client.Json.Converters,JsonLinqEnumerableConverter,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Json\Converters\JsonLinqEnumerableConverter.cs,ReadJson,The length of the statement  "            throw new NotSupportedException($@"{nameof(JsonLinqEnumerableConverter)} should not be used to deserialize collections from json - if this exception gets thrown' it is probably a bug."); " is 186.
Long Statement,Raven.Client.Json.Converters,JsonObjectConverter,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Json\Converters\JsonObjectConverter.cs,WriteJson,The length of the statement  "            throw new NotSupportedException($"We only support deserialization to '{nameof(JsonObject)}' or '{nameof(JsonObject.Metadata)}'."); " is 130.
Long Statement,Raven.Client.Json.Converters,JsonObjectConverter,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Json\Converters\JsonObjectConverter.cs,ReadJson,The length of the statement  "            throw new NotSupportedException($"We only support deserialization to '{nameof(JsonObject)}' or '{nameof(JsonObject.Metadata)}'."); " is 130.
Long Statement,Raven.Client.ServerWide,ScriptResolver,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\ServerWide\ConflictSolver.cs,Equals,The length of the statement  "            return string.Equals(Script' resolver.Script' StringComparison.OrdinalIgnoreCase) && LastModifiedTime == resolver.LastModifiedTime; " is 131.
Long Statement,Raven.Client.ServerWide,DatabaseRecord,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\ServerWide\DatabaseRecord.cs,EnsureTaskNameIsNotUsed,The length of the statement  "                throw new InvalidOperationException($"Task name '{taskName}' cannot start with: {ServerWideBackupConfiguration.NamePrefix} because it's a prefix for server-wide backup tasks"); " is 176.
Long Statement,Raven.Client.ServerWide,DatabaseRecord,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\ServerWide\DatabaseRecord.cs,EnsureTaskNameIsNotUsed,The length of the statement  "                throw new InvalidOperationException($"Can't use task name '{taskName}'' there is already an External Replications task with that name"); " is 136.
Long Statement,Raven.Client.ServerWide,DatabaseRecord,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\ServerWide\DatabaseRecord.cs,EnsureTaskNameIsNotUsed,The length of the statement  "                throw new InvalidOperationException($"Can't use task name '{taskName}'' there is already a Sink Pull Replications task with that name"); " is 136.
Long Statement,Raven.Client.ServerWide,DatabaseRecord,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\ServerWide\DatabaseRecord.cs,EnsureTaskNameIsNotUsed,The length of the statement  "                throw new InvalidOperationException($"Can't use task name '{taskName}'' there is already a Hub Pull Replications with that name"); " is 130.
Long Statement,Raven.Client.ServerWide,DatabaseRecord,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\ServerWide\DatabaseRecord.cs,EnsureTaskNameIsNotUsed,The length of the statement  "                throw new InvalidOperationException($"Can't use task name '{taskName}'' there is already a SQL ETL task with that name"); " is 121.
Long Statement,Raven.Client.ServerWide,DatabaseRecord,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\ServerWide\DatabaseRecord.cs,EnsureTaskNameIsNotUsed,The length of the statement  "                throw new InvalidOperationException($"Can't use task name '{taskName}'' there is already a Periodic Backup task with that name"); " is 129.
Long Statement,Raven.Client.ServerWide.Operations,GetDatabaseRecordCommand,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\ServerWide\Operations\GetDatabaseRecordOperation.cs,SetResponse,The length of the statement  "                Result = (DatabaseRecordWithEtag)EntityToBlittable.ConvertToEntity(typeof(DatabaseRecordWithEtag)' "database-record"' response' _conventions); " is 142.
Long Statement,Raven.Client.ServerWide.Operations,ServerOperationExecutor,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\ServerWide\Operations\ServerOperationExecutor.cs,SendAsync,The length of the statement  "                return new ServerWideOperation(_requestExecutor' _requestExecutor.Conventions' command.Result.OperationId' command.SelectedNodeTag ?? command.Result.OperationNodeTag); " is 167.
Long Statement,Raven.Client.ServerWide.Operations.Migration,OfflineMigrationConfiguration,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\ServerWide\Operations\Migration\OfflineMigrationConfiguration.cs,ValidateDataDirectory,The length of the statement  "            if (!File.Exists(esentDataDbFile) && !File.Exists(esentDataFsFile) && !File.Exists(voronDataFile) && File.Exists(voronBackupFile) == false && File.Exists(esentBackupFile) == false) " is 180.
Long Statement,Raven.Client.ServerWide.Operations.Migration,OfflineMigrationConfiguration,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\ServerWide\Operations\Migration\OfflineMigrationConfiguration.cs,ValidateDataDirectory,The length of the statement  "                throw new FileNotFoundException($"Data directory should contain file '{EsentDBDataFile}'' '{EsentFSDataFile}' or '{VoronDataFile}' or '{VoronBackupFile}' or '{EsentBackupFile}'"); " is 179.
Long Statement,Raven.Client.ServerWide.Operations.Migration,OfflineMigrationConfiguration,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\ServerWide\Operations\Migration\OfflineMigrationConfiguration.cs,GenerateExporterCommandLine,The length of the statement  "                OutputFilePath = tmpFile = Path.Combine(rempDir' $"export-{DatabaseRecord.DatabaseName}-{SystemTime.UtcNow:yyyyMMdd_HHmmss}.ravendump"); " is 136.
Long Statement,Raven.Client.ServerWide.Operations.Migration,OfflineMigrationConfiguration,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\ServerWide\Operations\Migration\OfflineMigrationConfiguration.cs,GenerateExporterCommandLine,The length of the statement  "            if (string.IsNullOrEmpty(EncryptionKey) == false && string.IsNullOrEmpty(EncryptionAlgorithm) == false && EncryptionKeyBitsSize.HasValue) " is 137.
Long Statement,Raven.Client.ServerWide.Operations.Migration,OfflineMigrationConfiguration,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\ServerWide\Operations\Migration\OfflineMigrationConfiguration.cs,GenerateExporterCommandLine,The length of the statement  "                sb.Append($" -Encryption {EnsureStringsAreQuoted(EncryptionKey)} {EnsureStringsAreQuoted(EncryptionAlgorithm)} {EncryptionKeyBitsSize.Value}"); " is 143.
Long Statement,Raven.Client.ServerWide.Tcp,TcpNegotiation,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\ServerWide\Tcp\TcpNegotiation.cs,NegotiateProtocolVersion,The length of the statement  "                Log.Info($"Start negotiation for {parameters.Operation} operation with {parameters.DestinationNodeTag ?? parameters.DestinationUrl}"); " is 134.
Long Statement,Raven.Client.ServerWide.Tcp,TcpNegotiation,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\ServerWide\Tcp\TcpNegotiation.cs,NegotiateProtocolVersion,The length of the statement  "                        throw new OperationCanceledException($"Stopped TCP negotiation for {parameters.Operation} because of cancellation request"); " is 124.
Long Statement,Raven.Client.ServerWide.Tcp,TcpNegotiation,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\ServerWide\Tcp\TcpNegotiation.cs,NegotiateProtocolVersion,The length of the statement  "                        Log.Info($"Read response from {parameters.SourceNodeTag ?? parameters.DestinationUrl} for '{parameters.Operation}'' received version is '{version}'"); " is 150.
Long Statement,Raven.Client.ServerWide.Tcp,TcpNegotiation,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\ServerWide\Tcp\TcpNegotiation.cs,NegotiateProtocolVersion,The length of the statement  "                        return TcpConnectionHeaderMessage.GetSupportedFeaturesFor(TcpConnectionHeaderMessage.OperationTypes.Drop' TcpConnectionHeaderMessage.DropBaseLine); " is 147.
Long Statement,Raven.Client.ServerWide.Tcp,TcpNegotiation,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\ServerWide\Tcp\TcpNegotiation.cs,NegotiateProtocolVersion,The length of the statement  "                        throw new ArgumentException($"The {parameters.Operation} version {parameters.Version} is out of range' our lowest version is {current}"); " is 137.
Long Statement,Raven.Client.ServerWide.Tcp,TcpNegotiation,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\ServerWide\Tcp\TcpNegotiation.cs,NegotiateProtocolVersion,The length of the statement  "                        Log.Info($"The version {version} is {status}' will try to agree on '{current}' for {parameters.Operation} with {parameters.DestinationNodeTag ?? parameters.DestinationUrl}."); " is 175.
Long Statement,Raven.Client.ServerWide.Tcp,TcpNegotiation,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\ServerWide\Tcp\TcpNegotiation.cs,NegotiateProtocolVersion,The length of the statement  "                    Log.Info($"{parameters.DestinationNodeTag ?? parameters.DestinationUrl} agreed on version '{current}' for {parameters.Operation}."); " is 132.
Long Statement,Raven.Client.Util,LinqMethodsSupport,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Util\JavascriptConversionExtensions.cs,ConvertToJavascript,The length of the statement  "                        var count = Expression.Call(typeof(Enumerable)' "Count"' new Type[] { typeArguments }' methodCallExpression.Arguments[0]); " is 122.
Long Statement,Raven.Client.Util,LinqMethodsSupport,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Util\JavascriptConversionExtensions.cs,ConvertToJavascript,The length of the statement  "                        throw new NotSupportedException($"Unable to translate '{methodName}' to RQL operation because this method is not familiar to the RavenDB query provider.") " is 154.
Long Statement,Raven.Client.Util,LoadSupport,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Util\JavascriptConversionExtensions.cs,ConvertToJavascript,The length of the statement  "                    throw new NotSupportedException("Using IDocumentSession.Load(IEnumerable<string> ids) inside a query is not supported. " + " is 122.
Long Statement,Raven.Client.Util,ReservedWordsSupport,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Util\JavascriptConversionExtensions.cs,ConvertToJavascript,The length of the statement  "                if (!(context.Node is ParameterExpression parameterExpression) || JsReservedWords.Contains(parameterExpression.Name) == false) " is 126.
Long Statement,Raven.Client.Util,DateTimeSupport,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Util\JavascriptConversionExtensions.cs,ConvertToJavascript,The length of the statement  "                                    @"(function (date) { return new Date(date.getUTCFullYear()' date.getUTCMonth()' date.getUTCDate()' date.getUTCHours()' date.getUTCMinutes()' date.getUTCSeconds()' date.getUTCMilliseconds());})(new Date())"); " is 207.
Long Statement,Raven.Client.Util,StringSupport,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Util\JavascriptConversionExtensions.cs,ConvertToJavascript,The length of the statement  "                                            throw new InvalidOperationException("Unable to understand how to convert " + value + " to RQL (" + value?.GetType() ?? "null" + ")"); " is 133.
Long Statement,Raven.Client.Util,ResourceNameValidator,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Util\ResourceNameValidator.cs,IsValidResourceName,The length of the statement  "                errorMessage = $"The name '{name}' is not permitted. Only letters' digits and characters {allowedCharacters} are allowed."; " is 123.
Long Statement,Raven.Client.Util,ResourceNameValidator,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Util\ResourceNameValidator.cs,IsValidResourceName,The length of the statement  "                errorMessage = $"The name '{name}' is not permitted. If a name contains '.' character then it must be surrounded by other allowed characters."; " is 143.
Long Statement,Raven.Client.Util,ResourceNameValidator,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Util\ResourceNameValidator.cs,IsValidResourceName,The length of the statement  "                int maxfileNameLength = theoreticalMaxFileNameLength > Constants.Platform.Linux.MaxFileNameLength ? Constants.Platform.Linux.MaxFileNameLength : theoreticalMaxFileNameLength; " is 174.
Long Statement,Raven.Client.Util,TcpUtils,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Util\TcpUtils.cs,ConnectSocketAsync,The length of the statement  "                        $"Failed to connect to remote replication destination {connection.Url}. Socket Error Code = {((SocketException)ae.InnerException).SocketErrorCode}"' " is 148.
Long Statement,Raven.Client.Util,TcpUtils,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Util\TcpUtils.cs,WrapStreamWithSslAsync,The length of the statement  "            var expectedCert = new X509Certificate2(Convert.FromBase64String(info.Certificate)' (string)null' X509KeyStorageFlags.MachineKeySet); " is 133.
Long Statement,Raven.Client.Util,TcpUtils,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Util\TcpUtils.cs,WrapStreamWithSslAsync,The length of the statement  "            await sslStream.AuthenticateAsClientAsync(new Uri(info.Url).Host' new X509CertificateCollection(new X509Certificate[]{storeCertificate})' SslProtocols.Tls12' false).ConfigureAwait(false); " is 187.
Complex Conditional,Raven.Client.Documents.Conventions,DocumentConventions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Conventions\DocumentConventions.cs,GetRangeType,The conditional expression  "type == typeof(int) || type == typeof(long) || type == typeof(short) || type == typeof(TimeSpan)"  is complex.
Complex Conditional,Raven.Client.Documents.Indexes,ExpressionStringBuilder,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\ExpressionStringBuilder.cs,EscapeChar,The conditional expression  "!char.IsLetterOrDigit(c) && !char.IsWhiteSpace(c) && !char.IsSymbol(c) && !char.IsPunctuation(c)"  is complex.
Complex Conditional,Raven.Client.Documents.Indexes,IndexDefinition,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\IndexDefinition.cs,Compare,The conditional expression  "(LockMode == null && other.LockMode == IndexLockMode.Unlock) || (LockMode == IndexLockMode.Unlock && other.LockMode == null)"  is complex.
Complex Conditional,Raven.Client.Documents.Indexes,IndexDefinition,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\IndexDefinition.cs,Compare,The conditional expression  "(Priority == null && other.Priority == IndexPriority.Normal) || (Priority == IndexPriority.Normal && other.Priority == null)"  is complex.
Complex Conditional,Raven.Client.Documents.Indexes,JSBeautify,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\JSBeautify.cs,get_next_token,The conditional expression  "(parser_pos != input.Length) && (Regex.IsMatch(c' "^[0-9]+[Ee]$")) && ((input[parser_pos] == '-') || (input[parser_pos] == '+'))"  is complex.
Complex Conditional,Raven.Client.Documents.Indexes,JSBeautify,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\JSBeautify.cs,get_next_token,The conditional expression  "!((input[parser_pos] == '*') && (input[parser_pos + 1] > '\0') && (input[parser_pos + 1] == '/') && (parser_pos < input.Length))"  is complex.
Complex Conditional,Raven.Client.Documents.Indexes,JSBeautify,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\JSBeautify.cs,get_next_token,The conditional expression  "(c == "'") || (c == "\"") || ((c == "/")                                                && ((last_type == "TK_WORD" && last_text == "return") || ((last_type == "TK_START_EXPR") || (last_type == "TK_START_BLOCK") || (last_type == "TK_END_BLOCK")                                                                                                          || (last_type == "TK_OPERATOR") || (last_type == "TK_EOF") || (last_type == "TK_SEMICOLON"))))"  is complex.
Complex Conditional,Raven.Client.Documents.Indexes,JSBeautify,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\JSBeautify.cs,JSBeautify,The conditional expression  "((last_type == "TK_START_EXPR") || (last_text == "=") || (last_text == "'")) && (token_text == "function")"  is complex.
Complex Conditional,Raven.Client.Documents.Indexes,JSBeautify,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\JSBeautify.cs,JSBeautify,The conditional expression  "((token_text == "!") || (token_text == "+") || (token_text == "-")) && ((last_text == "return") || (last_text == "case"))"  is complex.
Complex Conditional,Raven.Client.Documents.Indexes,JSBeautify,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\JSBeautify.cs,JSBeautify,The conditional expression  "((token_text == "!") || (token_text == "+") || (token_text == "-")) && (last_type == "TK_START_EXPR")"  is complex.
Complex Conditional,Raven.Client.Documents.Linq,RavenQueryProviderProcessor<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,VisitEquals,The conditional expression  "methodCallExpression != null && methodCallExpression.Method.Name == "CompareString" &&                  expression.Right.NodeType == ExpressionType.Constant &&                  Equals(((ConstantExpression)expression.Right).Value' 0)"  is complex.
Complex Conditional,Raven.Client.Documents.Linq,RavenQueryProviderProcessor<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,VisitNotEquals,The conditional expression  "methodCallExpression != null && methodCallExpression.Method.Name == "CompareString" &&                  expression.Right.NodeType == ExpressionType.Constant &&                  Equals(((ConstantExpression)expression.Right).Value' 0)"  is complex.
Complex Conditional,Raven.Client.Documents.Linq,RavenQueryProviderProcessor<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,AddAliasToPathIfNeeded,The conditional expression  "alias != null &&                  (alias == _fromAlias ||                   _loadAliases != null &&                   _loadAliases.Contains(alias))"  is complex.
Complex Conditional,Raven.Client.Documents.Linq,RavenQueryProviderProcessor<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,VisitMethodCall,The conditional expression  "genericTypeDefinition == typeof(ICollection<>) ||                      genericTypeDefinition == typeof(List<>) ||                      genericTypeDefinition == typeof(IList<>) ||                      genericTypeDefinition == typeof(HashSet<>) ||                      genericTypeDefinition == typeof(Array)"  is complex.
Complex Conditional,Raven.Client.Documents.Linq,RavenQueryProviderProcessor<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,VisitQueryableMethodCall,The conditional expression  "expression.Arguments[0].Type.GetTypeInfo().IsGenericType &&                              (expression.Arguments[0].Type.GetGenericTypeDefinition() == typeof(IQueryable<>) ||                              expression.Arguments[0].Type.GetGenericTypeDefinition() == typeof(IOrderedQueryable<>) ||                              expression.Arguments[0].Type.GetGenericTypeDefinition() == typeof(IRavenQueryable<>)) &&                              expression.Arguments[0].Type != expression.Arguments[1].Type"  is complex.
Complex Conditional,Raven.Client.Documents.Linq,RavenQueryProviderProcessor<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,CheckForLetOrLoadFromSelect,The conditional expression  "expression.Arguments[0] is MethodCallExpression mce &&                  mce.Method.Name == "Select" &&                  ExpressionHasNestedLambda(mce' out var innerLambda) &&                  innerLambda.Body is MethodCallExpression innerMce &&                  CheckForLoad(innerMce)"  is complex.
Complex Conditional,Raven.Client.Documents.Linq,RavenQueryProviderProcessor<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,ExpressionHasNestedLambda,The conditional expression  "expression.Arguments.Count > 1 &&                  expression.Arguments[1] is UnaryExpression unaryExpression &&                  unaryExpression.Operand is LambdaExpression lambda &&                  lambda.Parameters[0] != null"  is complex.
Complex Conditional,Raven.Client.Documents.Linq,RavenQueryProviderProcessor<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,GetFieldNameForRangeQuery,The conditional expression  "identityProperty.Type() == typeof(int) ||                      identityProperty.Type() == typeof(long) ||                      identityProperty.Type() == typeof(double) ||                      identityProperty.Type() == typeof(float) ||                      identityProperty.Type() == typeof(Guid) ||                      identityProperty.Type() == typeof(decimal)"  is complex.
Complex Conditional,Raven.Client.Documents.Queries,QueryFieldUtil,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Queries\QueryFieldUtil.cs,EscapeIfNecessary,The conditional expression  "string.IsNullOrEmpty(name) ||                   name == Constants.Documents.Indexing.Fields.DocumentIdFieldName ||                   name == Constants.Documents.Indexing.Fields.ReduceKeyHashFieldName ||                   name == Constants.Documents.Indexing.Fields.ReduceKeyValueFieldName ||                   name == Constants.Documents.Indexing.Fields.SpatialShapeFieldName"  is complex.
Complex Conditional,Raven.Client.Documents.Queries,QueryFieldUtil,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Queries\QueryFieldUtil.cs,EscapeIfNecessary,The conditional expression  "char.IsLetter(c) == false && c != '_' && c != '@' && insideEscaped == false"  is complex.
Complex Conditional,Raven.Client.Documents.Queries,QueryFieldUtil,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Queries\QueryFieldUtil.cs,EscapeIfNecessary,The conditional expression  "char.IsLetterOrDigit(c) == false && c != '_' && c != '-' && c != '@' && c != '.' && c != '[' && c != ']' && insideEscaped == false"  is complex.
Complex Conditional,Raven.Client.Documents.Session,AbstractDocumentQuery<T;TSelf>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\AbstractDocumentQuery.CounterIncludes.cs,RawQuery,The conditional expression  "SelectTokens.Count != 0 ||                  WhereTokens.Count != 0 ||                  OrderByTokens.Count != 0 ||                  GroupByTokens.Count != 0"  is complex.
Complex Conditional,Raven.Client.Documents.Session,AbstractDocumentQuery<T;TSelf>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\AbstractDocumentQuery.CounterIncludes.cs,BuildInclude,The conditional expression  "DocumentIncludes.Count == 0 &&                  HighlightingTokens.Count == 0 &&                  ExplanationToken == null &&                  QueryTimings == null &&                  CounterIncludesTokens == null"  is complex.
Complex Conditional,Raven.Client.Documents.Session,AsyncSessionDocumentCounters,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\AsyncSessionDocumentCounters.cs,GetAsync,The conditional expression  "(Session.DocumentsById.TryGetValue(DocId' out var document) == false && cache.GotAll == false) ||                      (document != null && document.Metadata.TryGet(Constants.Documents.Metadata.Counters'                           out BlittableJsonReaderArray metadataCounters) &&                       metadataCounters.BinarySearch(counter' StringComparison.Ordinal) >= 0)"  is complex.
Complex Conditional,Raven.Client.Documents.Session,AsyncSessionDocumentCounters,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\AsyncSessionDocumentCounters.cs,GetAsync,The conditional expression  "cache.Values.TryGetValue(counter' out var val) ||                          (document != null &&                           metadataCounters?.BinarySearch(counter' StringComparison.Ordinal) < 0) ||                          cache.GotAll"  is complex.
Complex Conditional,Raven.Client.Documents.Session,EntityToBlittable,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\EntityToBlittable.cs,ConvertToBlittableIfNeeded,The conditional expression  "value is ValueType ||                    value is string ||                    value is BlittableJsonReaderObject ||                    value is BlittableJsonReaderArray"  is complex.
Complex Conditional,Raven.Client.Documents.Session,InMemoryDocumentSessionOperations,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\InMemoryDocumentSessionOperations.cs,AssertNoNonUniqueInstance,The conditional expression  "string.IsNullOrEmpty(id) ||                  id[id.Length - 1] == '|' ||                  id[id.Length - 1] == '/' ||                  DocumentsById.TryGetValue(id' out info) == false ||                  ReferenceEquals(info.Entity' entity)"  is complex.
Complex Conditional,Raven.Client.Documents.Session,InMemoryDocumentSessionOperations,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\InMemoryDocumentSessionOperations.cs,UpdateMetadataModifications,The conditional expression  "(documentInfo.MetadataInstance == null ||                  ((MetadataAsDictionary)documentInfo.MetadataInstance).Changed == false) &&                  (documentInfo.Metadata.Modifications == null ||                  documentInfo.Metadata.Modifications.Properties.Count == 0)"  is complex.
Complex Conditional,Raven.Client.Documents.Session,InMemoryDocumentSessionOperations,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\InMemoryDocumentSessionOperations.cs,DeferInternal,The conditional expression  "commandType != CommandType.AttachmentPUT &&                      commandType != CommandType.AttachmentDELETE &&                      commandType != CommandType.AttachmentCOPY &&                      commandType != CommandType.AttachmentMOVE &&                      commandType != CommandType.Counters"  is complex.
Complex Conditional,Raven.Client.Http,RequestExecutor,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Http\RequestExecutor.cs,TryGetFromCache,The conditional expression  "aggressiveCacheOptions != null &&                  cachedItem.Age < aggressiveCacheOptions.Duration &&                  (cachedItem.MightHaveBeenModified == false || aggressiveCacheOptions.Mode != AggressiveCacheMode.TrackChanges) &&                  command.CanCacheAggressively"  is complex.
Complex Conditional,Raven.Client.Http,RequestExecutor,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Http\RequestExecutor.cs,GetFromCache,The conditional expression  "useCache && command.CanCache && command.IsReadRequest && command.ResponseType == RavenCommandResponseType.Object"  is complex.
Complex Conditional,Raven.Client.Json,BlittableJsonWriter,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Json\BlittableJsonWriter.cs,WriteMetadata,The conditional expression  "prop.Name != Constants.Documents.Metadata.Collection &&                               prop.Name != Constants.Documents.Metadata.Expires &&                              prop.Name != Constants.Documents.Metadata.Refresh &&                              prop.Name != Constants.Documents.Metadata.Edges"  is complex.
Complex Conditional,Raven.Client.Json,BlittableOperation,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Json\BlittableOperation.cs,CompareBlittable,The conditional expression  "newProp.Name.Equals(LastModified) ||                      newProp.Name.Equals(Collection) ||                      newProp.Name.Equals(ChangeVector) ||                      newProp.Name.Equals(Id)"  is complex.
Complex Conditional,Raven.Client.Json,TypeConverter,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Json\TypeConverter.cs,ToBlittableSupportedType,The conditional expression  "type == typeof(int) || type == typeof(uint) ||                  type == typeof(decimal) || type == typeof(double) || type == typeof(float) ||                  type == typeof(long) || type == typeof(ulong) ||                  type == typeof(short) || type == typeof(ushort) ||                  type == typeof(byte) || type == typeof(sbyte)"  is complex.
Complex Conditional,Raven.Client.ServerWide,DatabaseRecord,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\ServerWide\DatabaseRecord.cs,AddIndex,The conditional expression  "differences.Value.HasFlag(IndexDefinitionCompareDifferences.Maps) == false &&                           differences.Value.HasFlag(IndexDefinitionCompareDifferences.Reduce) == false &&                          differences.Value.HasFlag(IndexDefinitionCompareDifferences.Fields) == false &&                          differences.Value.HasFlag(IndexDefinitionCompareDifferences.AdditionalSources) == false"  is complex.
Complex Conditional,Raven.Client.ServerWide.Operations.Migration,OfflineMigrationConfiguration,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\ServerWide\Operations\Migration\OfflineMigrationConfiguration.cs,ValidateDataDirectory,The conditional expression  "!File.Exists(esentDataDbFile) && !File.Exists(esentDataFsFile) && !File.Exists(voronDataFile) && File.Exists(voronBackupFile) == false && File.Exists(esentBackupFile) == false"  is complex.
Complex Conditional,Raven.Client.Util,DictionarySupport,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Util\JavascriptConversionExtensions.cs,ConvertToJavascript,The conditional expression  "hasInternalKeyOrValue == false                           && p?.Name == _paramName                          && p?.Type.GenericTypeArguments.Length > 0                            && p.Type.GetGenericTypeDefinition() == typeof(KeyValuePair<'>)"  is complex.
Complex Conditional,Raven.Client.Util,LinqMethodsSupport,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Util\JavascriptConversionExtensions.cs,ConvertToJavascript,The conditional expression  "!(methodCallExpression.Arguments[1] is LambdaExpression lambda) ||                                          !(lambda.Body is MemberExpression member) ||                                          member.Member.Name != "Key" && member.Member.Name != "Value""  is complex.
Complex Conditional,Raven.Client.Util,NullableSupport,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Util\JavascriptConversionExtensions.cs,ConvertToJavascript,The conditional expression  "context.Node is BinaryExpression binaryExpression &&                      (binaryExpression.NodeType == ExpressionType.GreaterThanOrEqual ||                       binaryExpression.NodeType == ExpressionType.LessThanOrEqual) &&                      (binaryExpression.Left.Type.IsNullableType() ||                       binaryExpression.Right.Type.IsNullableType())"  is complex.
Complex Conditional,Raven.Client.Util,ResourceNameValidator,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Util\ResourceNameValidator.cs,IsValidResourceName,The conditional expression  "(RuntimeInformation.IsOSPlatform(OSPlatform.Linux) || RuntimeInformation.IsOSPlatform(OSPlatform.OSX)) &&                  ((name.Length > Constants.Platform.Linux.MaxFileNameLength) ||                  (dataDirectory.Length + name.Length > Constants.Platform.Linux.MaxPath))"  is complex.
Virtual Method Call from Constructor,Raven.Client.Documents.Session,InMemoryDocumentSessionOperations,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\InMemoryDocumentSessionOperations.cs,InMemoryDocumentSessionOperations,The constructor "InMemoryDocumentSessionOperations" calls a virtual method "GetRequestExecutor".
Virtual Method Call from Constructor,Raven.Client.ServerWide.Operations,ServerOperationExecutor,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\ServerWide\Operations\ServerOperationExecutor.cs,ServerOperationExecutor,The constructor "ServerOperationExecutor" calls a virtual method "Dispose".
Empty Catch Block,Raven.Client.Documents.Changes,DatabaseChanges,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Changes\DatabaseChanges.cs,Dispose,The method has an empty catch block.
Empty Catch Block,Raven.Client.Documents.Changes,DatabaseChanges,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Changes\DatabaseChanges.cs,GetOrAddConnectionState,The method has an empty catch block.
Empty Catch Block,Raven.Client.Documents.Changes,DatabaseChanges,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Changes\DatabaseChanges.cs,DoWork,The method has an empty catch block.
Empty Catch Block,Raven.Client.Documents.Conventions,DocumentConventions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Conventions\DocumentConventions.cs,GetCollectionName,The method has an empty catch block.
Empty Catch Block,Raven.Client.Documents,DocumentStore,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\DocumentStore.cs,Dispose,The method has an empty catch block.
Empty Catch Block,Raven.Client.Documents.Identity,AsyncHiLoIdGenerator,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Identity\AsyncHiLoIdGenerator.cs,NextIdAsync,The method has an empty catch block.
Empty Catch Block,Raven.Client.Documents.Identity,AsyncHiLoIdGenerator,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Identity\AsyncHiLoIdGenerator.cs,NextIdAsync,The method has an empty catch block.
Empty Catch Block,Raven.Client.Documents.Identity,GenerateEntityIdOnTheClient,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Identity\GenerateEntityIdOnTheClient.cs,TrySetIdOnDynamic,The method has an empty catch block.
Empty Catch Block,Raven.Client.Documents.Operations,Operation,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Operations\Operation.cs,Initialize,The method has an empty catch block.
Empty Catch Block,Raven.Client.Documents.Operations,Operation,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Operations\Operation.cs,OnConnectionStatusChangedAsync,The method has an empty catch block.
Empty Catch Block,Raven.Client.Documents.Operations,Operation,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Operations\Operation.cs,WaitForCompletionAsync,The method has an empty catch block.
Empty Catch Block,Raven.Client.Documents.Subscriptions,SubscriptionWorker<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Subscriptions\SubscriptionWorker.cs,DisposeAsync,The method has an empty catch block.
Empty Catch Block,Raven.Client.Documents.Subscriptions,SubscriptionWorker<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Subscriptions\SubscriptionWorker.cs,ProcessSubscriptionAsync,The method has an empty catch block.
Empty Catch Block,Raven.Client.Documents.Subscriptions,SubscriptionWorker<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Subscriptions\SubscriptionWorker.cs,ProcessSubscriptionAsync,The method has an empty catch block.
Empty Catch Block,Raven.Client.Documents.Subscriptions,SubscriptionWorker<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Subscriptions\SubscriptionWorker.cs,CloseTcpClient,The method has an empty catch block.
Empty Catch Block,Raven.Client.Documents.Subscriptions,SubscriptionWorker<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Subscriptions\SubscriptionWorker.cs,CloseTcpClient,The method has an empty catch block.
Empty Catch Block,Raven.Client.Extensions,WhoIsLocking,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Extensions\WhoIsLocking.cs,GetProcessesUsingFile,The method has an empty catch block.
Empty Catch Block,Raven.Client.Http,RequestExecutor,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Http\RequestExecutor.cs,ExecuteOnAllToFigureOutTheFastest,The method has an empty catch block.
Empty Catch Block,Raven.Client.Http,RequestExecutor,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Http\RequestExecutor.cs,CreateHttpMessageHandler,The method has an empty catch block.
Empty Catch Block,Raven.Client.Util,TcpUtils,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Util\TcpUtils.cs,ConnectAsyncWithPriority,The method has an empty catch block.
Empty Catch Block,Raven.Client.Util.RateLimiting,RateGate,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Util\RateLimiting\RateGate.cs,ExitTimerCallback,The method has an empty catch block.
Magic Number,Raven.Client.Documents.BulkInsert,BulkInsertOperation,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\BulkInsert\BulkInsertOperation.cs,ThrowBulkInsertAborted,The following statement contains a magic number: var errors = new List<Exception>(3);
Magic Number,Raven.Client.Documents.BulkInsert,BulkInsertCommand,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\BulkInsert\BulkInsertOperation.cs,BulkInsertCommand,The following statement contains a magic number: Timeout = TimeSpan.FromHours(12);
Magic Number,Raven.Client.Documents.Changes,DatabaseChanges,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Changes\DatabaseChanges.cs,Send,The following statement contains a magic number: await taskCompletionSource.Task.WaitWithTimeout(TimeSpan.FromSeconds(15)).ConfigureAwait(false) == false
Magic Number,Raven.Client.Documents.Changes,DatabaseChangesOptions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Changes\DatabaseChangesOptions.cs,GetHashCode,The following statement contains a magic number: return ((DatabaseName != null ? StringComparer.OrdinalIgnoreCase.GetHashCode(DatabaseName) : 0) * 397) ^ (NodeTag != null ? StringComparer.OrdinalIgnoreCase.GetHashCode(NodeTag) : 0);
Magic Number,Raven.Client.Documents.Commands,GetDocumentsCommand,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Commands\GetDocumentsCommand.cs,PrepareRequestWithMultipleIds,The following statement contains a magic number: var isGet = uniqueIds.Sum(x => x.Length) < 1024;
Magic Number,Raven.Client.Documents.Conventions,DocumentConventions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Conventions\DocumentConventions.cs,DocumentConventions,The following statement contains a magic number: MaxNumberOfRequestsPerSession = 30;
Magic Number,Raven.Client.Documents.Conventions,DocumentConventions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Conventions\DocumentConventions.cs,DocumentConventions,The following statement contains a magic number: var httpCacheSizeInMb = PlatformDetails.Is32Bits ? 32 : 128;
Magic Number,Raven.Client.Documents.Conventions,DocumentConventions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Conventions\DocumentConventions.cs,DocumentConventions,The following statement contains a magic number: var httpCacheSizeInMb = PlatformDetails.Is32Bits ? 32 : 128;
Magic Number,Raven.Client.Documents.Conventions,DocumentConventions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Conventions\DocumentConventions.cs,DocumentConventions,The following statement contains a magic number: _firstBroadcastAttemptTimeout = TimeSpan.FromSeconds(5);
Magic Number,Raven.Client.Documents.Conventions,DocumentConventions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Conventions\DocumentConventions.cs,DocumentConventions,The following statement contains a magic number: _secondBroadcastAttemptTimeout = TimeSpan.FromSeconds(30);
Magic Number,Raven.Client.Documents,DocumentStore,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\DocumentStore.cs,Dispose,The following statement contains a magic number: Task.WaitAll(tasks.ToArray()' TimeSpan.FromSeconds(3));
Magic Number,Raven.Client.Documents.Indexes,AutoIndexFieldOptions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\AutoIndexDefinition.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ Indexing.GetHashCode();
Magic Number,Raven.Client.Documents.Indexes,AutoIndexFieldOptions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\AutoIndexDefinition.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (int)Aggregation;
Magic Number,Raven.Client.Documents.Indexes,AutoIndexFieldOptions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\AutoIndexDefinition.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (Spatial != null ? Spatial.GetHashCode() : 0);
Magic Number,Raven.Client.Documents.Indexes,AutoIndexFieldOptions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\AutoIndexDefinition.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (int)GroupByArrayBehavior;
Magic Number,Raven.Client.Documents.Indexes,AutoIndexFieldOptions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\AutoIndexDefinition.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ Suggestions.GetHashCode();
Magic Number,Raven.Client.Documents.Indexes,AutoIndexFieldOptions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\AutoIndexDefinition.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ IsNameQuoted.GetHashCode();
Magic Number,Raven.Client.Documents.Indexes,ExpressionStringBuilder,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\ExpressionStringBuilder.cs,ValidCSharpName,The following statement contains a magic number: name.Length > 512 || name.Length <= 0
Magic Number,Raven.Client.Documents.Indexes,ExpressionStringBuilder,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\ExpressionStringBuilder.cs,VisitParameter,The following statement contains a magic number: name = name.StartsWith("$VB$") ? name.Substring(4) : name;
Magic Number,Raven.Client.Documents.Indexes,IndexDefinition,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\IndexDefinition.cs,DictionaryHashCode,The following statement contains a magic number: result = (result * 397) ^ kvp.Key.GetHashCode();
Magic Number,Raven.Client.Documents.Indexes,IndexDefinition,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\IndexDefinition.cs,DictionaryHashCode,The following statement contains a magic number: result = (result * 397) ^ (!Equals(kvp.Value' default(TValue)) ? kvp.Value.GetHashCode() : 0);
Magic Number,Raven.Client.Documents.Indexes,IndexDefinition,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\IndexDefinition.cs,GetHashCode,The following statement contains a magic number: int result = Maps.Where(x => x != null).Aggregate(0' (acc' val) => acc * 397 ^ val.GetHashCode());
Magic Number,Raven.Client.Documents.Indexes,IndexDefinition,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\IndexDefinition.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ Maps.Count;
Magic Number,Raven.Client.Documents.Indexes,IndexDefinition,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\IndexDefinition.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ (Reduce?.GetHashCode() ?? 0);
Magic Number,Raven.Client.Documents.Indexes,IndexDefinition,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\IndexDefinition.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ DictionaryHashCode(Fields);
Magic Number,Raven.Client.Documents.Indexes,IndexDefinition,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\IndexDefinition.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ (OutputReduceToCollection?.GetHashCode() ?? 0);
Magic Number,Raven.Client.Documents.Indexes,IndexDefinitionBuilder<TDocument;TReduceResult>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\IndexDefinitionBuilder.cs,IndexDefinitionBuilder,The following statement contains a magic number: _indexName.Length > 256
Magic Number,Raven.Client.Documents.Indexes,IndexFieldOptions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\IndexFieldOptions.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ Indexing.GetHashCode();
Magic Number,Raven.Client.Documents.Indexes,IndexFieldOptions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\IndexFieldOptions.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ TermVector.GetHashCode();
Magic Number,Raven.Client.Documents.Indexes,IndexFieldOptions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\IndexFieldOptions.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (Spatial?.GetHashCode() ?? 0);
Magic Number,Raven.Client.Documents.Indexes,IndexFieldOptions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\IndexFieldOptions.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (Analyzer != null ? StringComparer.OrdinalIgnoreCase.GetHashCode(Analyzer) : 0);
Magic Number,Raven.Client.Documents.Indexes,IndexFieldOptions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\IndexFieldOptions.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ Suggestions.GetHashCode();
Magic Number,Raven.Client.Documents.Indexes,IndexingPerformanceOperation,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\IndexingPerformanceOperation.cs,IndexingPerformanceOperation,The following statement contains a magic number: DurationInMs = Math.Round(duration.TotalMilliseconds' 2);
Magic Number,Raven.Client.Documents.Indexes,IndexingPerformanceBasicStats,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\IndexingPerformanceStats.cs,IndexingPerformanceBasicStats,The following statement contains a magic number: DurationInMs = Math.Round(duration.TotalMilliseconds' 2);
Magic Number,Raven.Client.Documents.Indexes,JSBeautify,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\JSBeautify.cs,get_next_token,The following statement contains a magic number: i < 2
Magic Number,Raven.Client.Documents.Indexes,JSBeautify,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\JSBeautify.cs,get_next_token,The following statement contains a magic number: parser_pos += 2;
Magic Number,Raven.Client.Documents.Indexes,JSBeautify,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\JSBeautify.cs,get_next_token,The following statement contains a magic number: parser_pos += 3;
Magic Number,Raven.Client.Documents.Indexes,JSBeautify,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\JSBeautify.cs,get_next_token,The following statement contains a magic number: (c == "<") && (input.Substring(parser_pos - 1' 3) == "<!--")
Magic Number,Raven.Client.Documents.Indexes,JSBeautify,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\JSBeautify.cs,get_next_token,The following statement contains a magic number: parser_pos += 2;
Magic Number,Raven.Client.Documents.Indexes,JSBeautify,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\JSBeautify.cs,get_next_token,The following statement contains a magic number: (c == "-") && (input.Substring(parser_pos - 1' 2) == "-->")
Magic Number,Raven.Client.Documents.Indexes,JSBeautify,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\JSBeautify.cs,JSBeautify,The following statement contains a magic number: opt_indent_size = options.indent_size ?? 4;
Magic Number,Raven.Client.Documents.Indexes.Spatial,AutoSpatialOptions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\Spatial\SpatialOptions.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (int)MethodType;
Magic Number,Raven.Client.Documents.Indexes.Spatial,AutoSpatialOptions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\Spatial\SpatialOptions.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (MethodArguments != null ? MethodArguments.GetHashCode() : 0);
Magic Number,Raven.Client.Documents.Indexes.Spatial,SpatialOptions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\Spatial\SpatialOptions.cs,SpatialOptions,The following statement contains a magic number: MinX = -180;
Magic Number,Raven.Client.Documents.Indexes.Spatial,SpatialOptions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\Spatial\SpatialOptions.cs,SpatialOptions,The following statement contains a magic number: MaxX = 180;
Magic Number,Raven.Client.Documents.Indexes.Spatial,SpatialOptions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\Spatial\SpatialOptions.cs,SpatialOptions,The following statement contains a magic number: MinY = -90;
Magic Number,Raven.Client.Documents.Indexes.Spatial,SpatialOptions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\Spatial\SpatialOptions.cs,SpatialOptions,The following statement contains a magic number: MaxY = 90;
Magic Number,Raven.Client.Documents.Indexes.Spatial,SpatialOptions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\Spatial\SpatialOptions.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (int)Strategy;
Magic Number,Raven.Client.Documents.Indexes.Spatial,SpatialOptions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\Spatial\SpatialOptions.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ Units.GetHashCode();
Magic Number,Raven.Client.Documents.Indexes.Spatial,SpatialOptions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\Spatial\SpatialOptions.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ MaxTreeLevel;
Magic Number,Raven.Client.Documents.Indexes.Spatial,SpatialOptions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\Spatial\SpatialOptions.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ MinX.GetHashCode();
Magic Number,Raven.Client.Documents.Indexes.Spatial,SpatialOptions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\Spatial\SpatialOptions.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ MaxX.GetHashCode();
Magic Number,Raven.Client.Documents.Indexes.Spatial,SpatialOptions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\Spatial\SpatialOptions.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ MinY.GetHashCode();
Magic Number,Raven.Client.Documents.Indexes.Spatial,SpatialOptions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\Spatial\SpatialOptions.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ MaxY.GetHashCode();
Magic Number,Raven.Client.Documents.Indexes.Spatial,SpatialBounds,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\Spatial\SpatialOptionsFactory.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ MaxX.GetHashCode();
Magic Number,Raven.Client.Documents.Indexes.Spatial,SpatialBounds,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\Spatial\SpatialOptionsFactory.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ MinY.GetHashCode();
Magic Number,Raven.Client.Documents.Indexes.Spatial,SpatialBounds,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\Spatial\SpatialOptionsFactory.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ MaxY.GetHashCode();
Magic Number,Raven.Client.Documents.Indexes.Suggestions,SuggestionOptions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\Suggestions\SuggestionOptions.cs,GetHashCode,The following statement contains a magic number: return ((int)Distance * 397) ^ Accuracy.GetHashCode();
Magic Number,Raven.Client.Documents.Linq,RavenQueryProviderProcessor<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,GetMember,The following statement contains a magic number: _currentPath = _currentPath.Substring(0' _currentPath.Length - 3);
Magic Number,Raven.Client.Documents.Linq,RavenQueryProviderProcessor<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,GetMemberDirect,The following statement contains a magic number: result.Path = result.Path.Replace(convertMatch.Groups[1].Value' convertMatch.Groups[2].Value);
Magic Number,Raven.Client.Documents.Linq,RavenQueryProviderProcessor<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,VisitEquals,The following statement contains a magic number: comparisonType = ((ConstantExpression)expression.Arguments[2]).Value;
Magic Number,Raven.Client.Documents.Linq,RavenQueryProviderProcessor<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,VisitEquals,The following statement contains a magic number: expression.Arguments.Count == 3 &&                      expression.Arguments[2].NodeType == ExpressionType.Constant &&                      expression.Arguments[2].Type == typeof(StringComparison)
Magic Number,Raven.Client.Documents.Linq,RavenQueryProviderProcessor<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,VisitEquals,The following statement contains a magic number: expression.Arguments.Count == 3 &&                      expression.Arguments[2].NodeType == ExpressionType.Constant &&                      expression.Arguments[2].Type == typeof(StringComparison)
Magic Number,Raven.Client.Documents.Linq,RavenQueryProviderProcessor<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,VisitEquals,The following statement contains a magic number: expression.Arguments.Count == 3 &&                      expression.Arguments[2].NodeType == ExpressionType.Constant &&                      expression.Arguments[2].Type == typeof(StringComparison)
Magic Number,Raven.Client.Documents.Linq,RavenQueryProviderProcessor<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,VisitAny,The following statement contains a magic number: expression.Arguments.Count >= 2
Magic Number,Raven.Client.Documents.Linq,RavenQueryProviderProcessor<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,VisitMethodCall,The following statement contains a magic number: switch (expression.Arguments.Count)                  {                      case 1:                          VisitEquals(Expression.MakeBinary(ExpressionType.Equal' expression.Object' expression.Arguments[0]));                          break;                      case 2:                          VisitEquals(Expression.MakeBinary(ExpressionType.Equal' expression.Arguments[0]' expression.Arguments[1]));                          break;                      default:                          throw new ArgumentException("Can't understand Equals with " + expression.Arguments.Count + " arguments");                  }
Magic Number,Raven.Client.Documents.Linq,RavenQueryProviderProcessor<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,VisitRegexMethodCall,The following statement contains a magic number: expression.Arguments.Count != 2
Magic Number,Raven.Client.Documents.Linq,RavenQueryProviderProcessor<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,VisitLinqExtensionsMethodCall,The following statement contains a magic number: switch (expression.Method.Name)              {                  case nameof(LinqExtensions.Search):                      VisitSearch(expression);                      break;                  case nameof(LinqExtensions.OrderByScore):                      _documentQuery.OrderByScore();                      VisitExpression(expression.Arguments[0]);                      break;                  case nameof(LinqExtensions.ThenByScore):                      VisitExpression(expression.Arguments[0]);                      _documentQuery.OrderByScore();                      break;                  case nameof(LinqExtensions.OrderByScoreDescending):                      _documentQuery.OrderByScoreDescending();                      VisitExpression(expression.Arguments[0]);                      break;                  case nameof(LinqExtensions.ThenByScoreDescending):                      VisitExpression(expression.Arguments[0]);                      _documentQuery.OrderByScoreDescending();                      break;                  case nameof(LinqExtensions.Intersect):                      VisitExpression(expression.Arguments[0]);                      _documentQuery.Intersect();                      _chainedWhere = false;                      break;                  case nameof(RavenQueryableExtensions.In):                      var memberInfo = GetMember(expression.Arguments[0]);                      var objects = GetValueFromExpression(expression.Arguments[1]' GetMemberType(memberInfo));                      _documentQuery.WhereIn(memberInfo.Path' ((IEnumerable)objects).Cast<object>()' _insideExact);                      break;                  case nameof(RavenQueryableExtensions.ContainsAny):                      memberInfo = GetMember(expression.Arguments[0]);                      objects = GetValueFromExpression(expression.Arguments[1]' GetMemberType(memberInfo));                      _documentQuery.ContainsAny(memberInfo.Path' ((IEnumerable)objects).Cast<object>());                      break;                  case nameof(RavenQueryableExtensions.ContainsAll):                      memberInfo = GetMember(expression.Arguments[0]);                      objects = GetValueFromExpression(expression.Arguments[1]' GetMemberType(memberInfo));                      _documentQuery.ContainsAll(memberInfo.Path' ((IEnumerable)objects).Cast<object>());                      break;                  case nameof(LinqExtensions.Where):                      VisitQueryableMethodCall(expression);                      break;                  case nameof(LinqExtensions.Spatial):                      VisitExpression(expression.Arguments[0]);                        LinqPathProvider.GetValueFromExpressionWithoutConversion(expression.Arguments[1]' out var spatialFieldName);                      LinqPathProvider.GetValueFromExpressionWithoutConversion(expression.Arguments[2]' out var spatialCriteria);                        var spatialCriteriaFunc = (Func<SpatialCriteriaFactory' SpatialCriteria>)spatialCriteria;                      var spatialCriteriaInstance = spatialCriteriaFunc.Invoke(SpatialCriteriaFactory.Instance);                        if (spatialFieldName is string spatialFieldNameAsString)                      {                          _documentQuery.Spatial(spatialFieldNameAsString' spatialCriteriaInstance);                      }                      else if (spatialFieldName is DynamicSpatialField spatialDynamicField)                      {                          _documentQuery.Spatial(spatialDynamicField' spatialCriteriaInstance);                      }                      break;                  case nameof(LinqExtensions.OrderByDistance):                      VisitOrderByDistance(expression.Arguments' descending: false);                      break;                  case nameof(LinqExtensions.OrderByDistanceDescending):                      VisitOrderByDistance(expression.Arguments' descending: true);                      break;                  case nameof(LinqExtensions.Include):                      VisitExpression(expression.Arguments[0]);                        LinqPathProvider.GetValueFromExpressionWithoutConversion(expression.Arguments[1]' out var includeArg);                        if (includeArg is IncludeBuilder includeBuilder)                      {                          _documentQuery.Include(includeBuilder);                      }                      else if (includeArg is string str)                      {                          _documentQuery.Include(str);                      }                      break;                  case nameof(LinqExtensions.OrderBy):                  case nameof(LinqExtensions.ThenBy):                      VisitExpression(expression.Arguments[0]);                        LinqPathProvider.GetValueFromExpressionWithoutConversion(expression.Arguments[1]' out var orderByPath);                      LinqPathProvider.GetValueFromExpressionWithoutConversion(expression.Arguments[2]' out var orderByOrderingTypeOrSorterName);                        if (orderByOrderingTypeOrSorterName is string orderBySorterName)                          _documentQuery.OrderBy((string)orderByPath' orderBySorterName);                      else                          _documentQuery.OrderBy((string)orderByPath' (OrderingType)orderByOrderingTypeOrSorterName);                      break;                  case nameof(LinqExtensions.OrderByDescending):                  case nameof(LinqExtensions.ThenByDescending):                      VisitExpression(expression.Arguments[0]);                        LinqPathProvider.GetValueFromExpressionWithoutConversion(expression.Arguments[1]' out var orderByDescendingPath);                      LinqPathProvider.GetValueFromExpressionWithoutConversion(expression.Arguments[2]' out var orderByDescendingOrderingTypeOrSorterName);                        if (orderByDescendingOrderingTypeOrSorterName is string orderByDescendingSorterName)                          _documentQuery.OrderByDescending((string)orderByDescendingPath' orderByDescendingSorterName);                      else                          _documentQuery.OrderByDescending((string)orderByDescendingPath' (OrderingType)orderByDescendingOrderingTypeOrSorterName);                        break;                  case nameof(LinqExtensions.MoreLikeThis):                      VisitExpression(expression.Arguments[0]);                        LinqPathProvider.GetValueFromExpressionWithoutConversion(expression.Arguments.Last()' out var moreLikeThisAsObject);                        using (var mlt = _documentQuery.MoreLikeThis())                      {                          var moreLikeThis = (MoreLikeThisBase)moreLikeThisAsObject;                            mlt.WithOptions(moreLikeThis.Options);                            if (moreLikeThis is MoreLikeThisUsingDocumentForQuery<T> mltQuery)                              VisitExpression(mltQuery.ForQuery);                          else if (moreLikeThis is MoreLikeThisUsingDocument mltDocument)                              mlt.WithDocument(mltDocument.DocumentJson);                      }                      break;                  case nameof(LinqExtensions.AggregateBy):                      VisitExpression(expression.Arguments[0]);                        LinqPathProvider.GetValueFromExpressionWithoutConversion(expression.Arguments[1]' out var aggregateFacet);                        _documentQuery.AggregateBy(aggregateFacet as FacetBase);                      break;                  case nameof(LinqExtensions.AggregateUsing):                      VisitExpression(expression.Arguments[0]);                        LinqPathProvider.GetValueFromExpressionWithoutConversion(expression.Arguments[1]' out var aggregateDocumentKey);                        _documentQuery.AggregateUsing(aggregateDocumentKey as string);                      break;                  case nameof(LinqExtensions.GroupByArrayValues):                  case nameof(LinqExtensions.GroupByArrayContent):                      EnsureValidDynamicGroupByMethod(expression.Method.Name);                        VisitExpression(expression.Arguments[0]);                        var behavior = expression.Method.Name == nameof(LinqExtensions.GroupByArrayValues)                          ? GroupByArrayBehavior.ByIndividualValues                          : GroupByArrayBehavior.ByContent;                        VisitGroupBy(((UnaryExpression)expression.Arguments[1]).Operand' behavior);                      break;                  case nameof(LinqExtensions.SuggestUsing):                      VisitExpression(expression.Arguments[0]);                        LinqPathProvider.GetValueFromExpressionWithoutConversion(expression.Arguments[1]' out var suggestionAsObject);                        _documentQuery.SuggestUsing(suggestionAsObject as SuggestionBase);                      break;                  default:                      throw new NotSupportedException("Method not supported: " + expression.Method.Name);              }
Magic Number,Raven.Client.Documents.Linq,RavenQueryProviderProcessor<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,VisitLinqExtensionsMethodCall,The following statement contains a magic number: switch (expression.Method.Name)              {                  case nameof(LinqExtensions.Search):                      VisitSearch(expression);                      break;                  case nameof(LinqExtensions.OrderByScore):                      _documentQuery.OrderByScore();                      VisitExpression(expression.Arguments[0]);                      break;                  case nameof(LinqExtensions.ThenByScore):                      VisitExpression(expression.Arguments[0]);                      _documentQuery.OrderByScore();                      break;                  case nameof(LinqExtensions.OrderByScoreDescending):                      _documentQuery.OrderByScoreDescending();                      VisitExpression(expression.Arguments[0]);                      break;                  case nameof(LinqExtensions.ThenByScoreDescending):                      VisitExpression(expression.Arguments[0]);                      _documentQuery.OrderByScoreDescending();                      break;                  case nameof(LinqExtensions.Intersect):                      VisitExpression(expression.Arguments[0]);                      _documentQuery.Intersect();                      _chainedWhere = false;                      break;                  case nameof(RavenQueryableExtensions.In):                      var memberInfo = GetMember(expression.Arguments[0]);                      var objects = GetValueFromExpression(expression.Arguments[1]' GetMemberType(memberInfo));                      _documentQuery.WhereIn(memberInfo.Path' ((IEnumerable)objects).Cast<object>()' _insideExact);                      break;                  case nameof(RavenQueryableExtensions.ContainsAny):                      memberInfo = GetMember(expression.Arguments[0]);                      objects = GetValueFromExpression(expression.Arguments[1]' GetMemberType(memberInfo));                      _documentQuery.ContainsAny(memberInfo.Path' ((IEnumerable)objects).Cast<object>());                      break;                  case nameof(RavenQueryableExtensions.ContainsAll):                      memberInfo = GetMember(expression.Arguments[0]);                      objects = GetValueFromExpression(expression.Arguments[1]' GetMemberType(memberInfo));                      _documentQuery.ContainsAll(memberInfo.Path' ((IEnumerable)objects).Cast<object>());                      break;                  case nameof(LinqExtensions.Where):                      VisitQueryableMethodCall(expression);                      break;                  case nameof(LinqExtensions.Spatial):                      VisitExpression(expression.Arguments[0]);                        LinqPathProvider.GetValueFromExpressionWithoutConversion(expression.Arguments[1]' out var spatialFieldName);                      LinqPathProvider.GetValueFromExpressionWithoutConversion(expression.Arguments[2]' out var spatialCriteria);                        var spatialCriteriaFunc = (Func<SpatialCriteriaFactory' SpatialCriteria>)spatialCriteria;                      var spatialCriteriaInstance = spatialCriteriaFunc.Invoke(SpatialCriteriaFactory.Instance);                        if (spatialFieldName is string spatialFieldNameAsString)                      {                          _documentQuery.Spatial(spatialFieldNameAsString' spatialCriteriaInstance);                      }                      else if (spatialFieldName is DynamicSpatialField spatialDynamicField)                      {                          _documentQuery.Spatial(spatialDynamicField' spatialCriteriaInstance);                      }                      break;                  case nameof(LinqExtensions.OrderByDistance):                      VisitOrderByDistance(expression.Arguments' descending: false);                      break;                  case nameof(LinqExtensions.OrderByDistanceDescending):                      VisitOrderByDistance(expression.Arguments' descending: true);                      break;                  case nameof(LinqExtensions.Include):                      VisitExpression(expression.Arguments[0]);                        LinqPathProvider.GetValueFromExpressionWithoutConversion(expression.Arguments[1]' out var includeArg);                        if (includeArg is IncludeBuilder includeBuilder)                      {                          _documentQuery.Include(includeBuilder);                      }                      else if (includeArg is string str)                      {                          _documentQuery.Include(str);                      }                      break;                  case nameof(LinqExtensions.OrderBy):                  case nameof(LinqExtensions.ThenBy):                      VisitExpression(expression.Arguments[0]);                        LinqPathProvider.GetValueFromExpressionWithoutConversion(expression.Arguments[1]' out var orderByPath);                      LinqPathProvider.GetValueFromExpressionWithoutConversion(expression.Arguments[2]' out var orderByOrderingTypeOrSorterName);                        if (orderByOrderingTypeOrSorterName is string orderBySorterName)                          _documentQuery.OrderBy((string)orderByPath' orderBySorterName);                      else                          _documentQuery.OrderBy((string)orderByPath' (OrderingType)orderByOrderingTypeOrSorterName);                      break;                  case nameof(LinqExtensions.OrderByDescending):                  case nameof(LinqExtensions.ThenByDescending):                      VisitExpression(expression.Arguments[0]);                        LinqPathProvider.GetValueFromExpressionWithoutConversion(expression.Arguments[1]' out var orderByDescendingPath);                      LinqPathProvider.GetValueFromExpressionWithoutConversion(expression.Arguments[2]' out var orderByDescendingOrderingTypeOrSorterName);                        if (orderByDescendingOrderingTypeOrSorterName is string orderByDescendingSorterName)                          _documentQuery.OrderByDescending((string)orderByDescendingPath' orderByDescendingSorterName);                      else                          _documentQuery.OrderByDescending((string)orderByDescendingPath' (OrderingType)orderByDescendingOrderingTypeOrSorterName);                        break;                  case nameof(LinqExtensions.MoreLikeThis):                      VisitExpression(expression.Arguments[0]);                        LinqPathProvider.GetValueFromExpressionWithoutConversion(expression.Arguments.Last()' out var moreLikeThisAsObject);                        using (var mlt = _documentQuery.MoreLikeThis())                      {                          var moreLikeThis = (MoreLikeThisBase)moreLikeThisAsObject;                            mlt.WithOptions(moreLikeThis.Options);                            if (moreLikeThis is MoreLikeThisUsingDocumentForQuery<T> mltQuery)                              VisitExpression(mltQuery.ForQuery);                          else if (moreLikeThis is MoreLikeThisUsingDocument mltDocument)                              mlt.WithDocument(mltDocument.DocumentJson);                      }                      break;                  case nameof(LinqExtensions.AggregateBy):                      VisitExpression(expression.Arguments[0]);                        LinqPathProvider.GetValueFromExpressionWithoutConversion(expression.Arguments[1]' out var aggregateFacet);                        _documentQuery.AggregateBy(aggregateFacet as FacetBase);                      break;                  case nameof(LinqExtensions.AggregateUsing):                      VisitExpression(expression.Arguments[0]);                        LinqPathProvider.GetValueFromExpressionWithoutConversion(expression.Arguments[1]' out var aggregateDocumentKey);                        _documentQuery.AggregateUsing(aggregateDocumentKey as string);                      break;                  case nameof(LinqExtensions.GroupByArrayValues):                  case nameof(LinqExtensions.GroupByArrayContent):                      EnsureValidDynamicGroupByMethod(expression.Method.Name);                        VisitExpression(expression.Arguments[0]);                        var behavior = expression.Method.Name == nameof(LinqExtensions.GroupByArrayValues)                          ? GroupByArrayBehavior.ByIndividualValues                          : GroupByArrayBehavior.ByContent;                        VisitGroupBy(((UnaryExpression)expression.Arguments[1]).Operand' behavior);                      break;                  case nameof(LinqExtensions.SuggestUsing):                      VisitExpression(expression.Arguments[0]);                        LinqPathProvider.GetValueFromExpressionWithoutConversion(expression.Arguments[1]' out var suggestionAsObject);                        _documentQuery.SuggestUsing(suggestionAsObject as SuggestionBase);                      break;                  default:                      throw new NotSupportedException("Method not supported: " + expression.Method.Name);              }
Magic Number,Raven.Client.Documents.Linq,RavenQueryProviderProcessor<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,VisitLinqExtensionsMethodCall,The following statement contains a magic number: switch (expression.Method.Name)              {                  case nameof(LinqExtensions.Search):                      VisitSearch(expression);                      break;                  case nameof(LinqExtensions.OrderByScore):                      _documentQuery.OrderByScore();                      VisitExpression(expression.Arguments[0]);                      break;                  case nameof(LinqExtensions.ThenByScore):                      VisitExpression(expression.Arguments[0]);                      _documentQuery.OrderByScore();                      break;                  case nameof(LinqExtensions.OrderByScoreDescending):                      _documentQuery.OrderByScoreDescending();                      VisitExpression(expression.Arguments[0]);                      break;                  case nameof(LinqExtensions.ThenByScoreDescending):                      VisitExpression(expression.Arguments[0]);                      _documentQuery.OrderByScoreDescending();                      break;                  case nameof(LinqExtensions.Intersect):                      VisitExpression(expression.Arguments[0]);                      _documentQuery.Intersect();                      _chainedWhere = false;                      break;                  case nameof(RavenQueryableExtensions.In):                      var memberInfo = GetMember(expression.Arguments[0]);                      var objects = GetValueFromExpression(expression.Arguments[1]' GetMemberType(memberInfo));                      _documentQuery.WhereIn(memberInfo.Path' ((IEnumerable)objects).Cast<object>()' _insideExact);                      break;                  case nameof(RavenQueryableExtensions.ContainsAny):                      memberInfo = GetMember(expression.Arguments[0]);                      objects = GetValueFromExpression(expression.Arguments[1]' GetMemberType(memberInfo));                      _documentQuery.ContainsAny(memberInfo.Path' ((IEnumerable)objects).Cast<object>());                      break;                  case nameof(RavenQueryableExtensions.ContainsAll):                      memberInfo = GetMember(expression.Arguments[0]);                      objects = GetValueFromExpression(expression.Arguments[1]' GetMemberType(memberInfo));                      _documentQuery.ContainsAll(memberInfo.Path' ((IEnumerable)objects).Cast<object>());                      break;                  case nameof(LinqExtensions.Where):                      VisitQueryableMethodCall(expression);                      break;                  case nameof(LinqExtensions.Spatial):                      VisitExpression(expression.Arguments[0]);                        LinqPathProvider.GetValueFromExpressionWithoutConversion(expression.Arguments[1]' out var spatialFieldName);                      LinqPathProvider.GetValueFromExpressionWithoutConversion(expression.Arguments[2]' out var spatialCriteria);                        var spatialCriteriaFunc = (Func<SpatialCriteriaFactory' SpatialCriteria>)spatialCriteria;                      var spatialCriteriaInstance = spatialCriteriaFunc.Invoke(SpatialCriteriaFactory.Instance);                        if (spatialFieldName is string spatialFieldNameAsString)                      {                          _documentQuery.Spatial(spatialFieldNameAsString' spatialCriteriaInstance);                      }                      else if (spatialFieldName is DynamicSpatialField spatialDynamicField)                      {                          _documentQuery.Spatial(spatialDynamicField' spatialCriteriaInstance);                      }                      break;                  case nameof(LinqExtensions.OrderByDistance):                      VisitOrderByDistance(expression.Arguments' descending: false);                      break;                  case nameof(LinqExtensions.OrderByDistanceDescending):                      VisitOrderByDistance(expression.Arguments' descending: true);                      break;                  case nameof(LinqExtensions.Include):                      VisitExpression(expression.Arguments[0]);                        LinqPathProvider.GetValueFromExpressionWithoutConversion(expression.Arguments[1]' out var includeArg);                        if (includeArg is IncludeBuilder includeBuilder)                      {                          _documentQuery.Include(includeBuilder);                      }                      else if (includeArg is string str)                      {                          _documentQuery.Include(str);                      }                      break;                  case nameof(LinqExtensions.OrderBy):                  case nameof(LinqExtensions.ThenBy):                      VisitExpression(expression.Arguments[0]);                        LinqPathProvider.GetValueFromExpressionWithoutConversion(expression.Arguments[1]' out var orderByPath);                      LinqPathProvider.GetValueFromExpressionWithoutConversion(expression.Arguments[2]' out var orderByOrderingTypeOrSorterName);                        if (orderByOrderingTypeOrSorterName is string orderBySorterName)                          _documentQuery.OrderBy((string)orderByPath' orderBySorterName);                      else                          _documentQuery.OrderBy((string)orderByPath' (OrderingType)orderByOrderingTypeOrSorterName);                      break;                  case nameof(LinqExtensions.OrderByDescending):                  case nameof(LinqExtensions.ThenByDescending):                      VisitExpression(expression.Arguments[0]);                        LinqPathProvider.GetValueFromExpressionWithoutConversion(expression.Arguments[1]' out var orderByDescendingPath);                      LinqPathProvider.GetValueFromExpressionWithoutConversion(expression.Arguments[2]' out var orderByDescendingOrderingTypeOrSorterName);                        if (orderByDescendingOrderingTypeOrSorterName is string orderByDescendingSorterName)                          _documentQuery.OrderByDescending((string)orderByDescendingPath' orderByDescendingSorterName);                      else                          _documentQuery.OrderByDescending((string)orderByDescendingPath' (OrderingType)orderByDescendingOrderingTypeOrSorterName);                        break;                  case nameof(LinqExtensions.MoreLikeThis):                      VisitExpression(expression.Arguments[0]);                        LinqPathProvider.GetValueFromExpressionWithoutConversion(expression.Arguments.Last()' out var moreLikeThisAsObject);                        using (var mlt = _documentQuery.MoreLikeThis())                      {                          var moreLikeThis = (MoreLikeThisBase)moreLikeThisAsObject;                            mlt.WithOptions(moreLikeThis.Options);                            if (moreLikeThis is MoreLikeThisUsingDocumentForQuery<T> mltQuery)                              VisitExpression(mltQuery.ForQuery);                          else if (moreLikeThis is MoreLikeThisUsingDocument mltDocument)                              mlt.WithDocument(mltDocument.DocumentJson);                      }                      break;                  case nameof(LinqExtensions.AggregateBy):                      VisitExpression(expression.Arguments[0]);                        LinqPathProvider.GetValueFromExpressionWithoutConversion(expression.Arguments[1]' out var aggregateFacet);                        _documentQuery.AggregateBy(aggregateFacet as FacetBase);                      break;                  case nameof(LinqExtensions.AggregateUsing):                      VisitExpression(expression.Arguments[0]);                        LinqPathProvider.GetValueFromExpressionWithoutConversion(expression.Arguments[1]' out var aggregateDocumentKey);                        _documentQuery.AggregateUsing(aggregateDocumentKey as string);                      break;                  case nameof(LinqExtensions.GroupByArrayValues):                  case nameof(LinqExtensions.GroupByArrayContent):                      EnsureValidDynamicGroupByMethod(expression.Method.Name);                        VisitExpression(expression.Arguments[0]);                        var behavior = expression.Method.Name == nameof(LinqExtensions.GroupByArrayValues)                          ? GroupByArrayBehavior.ByIndividualValues                          : GroupByArrayBehavior.ByContent;                        VisitGroupBy(((UnaryExpression)expression.Arguments[1]).Operand' behavior);                      break;                  case nameof(LinqExtensions.SuggestUsing):                      VisitExpression(expression.Arguments[0]);                        LinqPathProvider.GetValueFromExpressionWithoutConversion(expression.Arguments[1]' out var suggestionAsObject);                        _documentQuery.SuggestUsing(suggestionAsObject as SuggestionBase);                      break;                  default:                      throw new NotSupportedException("Method not supported: " + expression.Method.Name);              }
Magic Number,Raven.Client.Documents.Linq,RavenQueryProviderProcessor<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,VisitOrderByDistance,The following statement contains a magic number: LinqPathProvider.GetValueFromExpressionWithoutConversion(arguments[2]' out var sndArgObj);
Magic Number,Raven.Client.Documents.Linq,RavenQueryProviderProcessor<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,VisitOrderByDistance,The following statement contains a magic number: LinqPathProvider.GetValueFromExpressionWithoutConversion(arguments[3]' out var distanceLongitude);
Magic Number,Raven.Client.Documents.Linq,RavenQueryProviderProcessor<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,VisitOrderByDistance,The following statement contains a magic number: LinqPathProvider.GetValueFromExpressionWithoutConversion(arguments[4]' out var roundFactorObj);
Magic Number,Raven.Client.Documents.Linq,RavenQueryProviderProcessor<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,VisitOrderByDistance,The following statement contains a magic number: arguments.Count > 4
Magic Number,Raven.Client.Documents.Linq,RavenQueryProviderProcessor<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,VisitSearch,The following statement contains a magic number: LinqPathProvider.GetValueFromExpressionWithoutConversion(search.Arguments[4]' out value) == false
Magic Number,Raven.Client.Documents.Linq,RavenQueryProviderProcessor<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,VisitSearch,The following statement contains a magic number: LinqPathProvider.GetValueFromExpressionWithoutConversion(expression.Arguments[2]' out value) == false
Magic Number,Raven.Client.Documents.Linq,RavenQueryProviderProcessor<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,VisitSearch,The following statement contains a magic number: LinqPathProvider.GetValueFromExpressionWithoutConversion(expression.Arguments[3]' out value) == false
Magic Number,Raven.Client.Documents.Linq,RavenQueryProviderProcessor<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,VisitSearch,The following statement contains a magic number: LinqPathProvider.GetValueFromExpressionWithoutConversion(expression.Arguments[4]' out value) == false
Magic Number,Raven.Client.Documents.Linq,RavenQueryProviderProcessor<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,VisitSearch,The following statement contains a magic number: LinqPathProvider.GetValueFromExpressionWithoutConversion(expression.Arguments[5]' out value) == false
Magic Number,Raven.Client.Documents.Linq,RavenQueryProviderProcessor<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,VisitSearch,The following statement contains a magic number: LinqPathProvider.GetValueFromExpressionWithoutConversion(searchExpression.Arguments[4]' out value) == false
Magic Number,Raven.Client.Documents.Linq,RavenQueryProviderProcessor<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,VisitQueryableMethodCall,The following statement contains a magic number: switch (expression.Method.Name)              {                  case "OfType":                      if (expression.Arguments[0].Type.GetTypeInfo().IsGenericType)                      {                          var type = expression.Arguments[0].Type.GetGenericArguments()[0];                          _documentQuery.AddRootType(type);                      }                        //set the _ofType variable only if OfType call precedes the projection                      if (_isSelectArg && expression.Type.GetTypeInfo().IsGenericType)                      {                          _ofType = expression.Type.GetGenericArguments()[0];                      }                        VisitExpression(expression.Arguments[0]);                      break;                  case "Where":                      {                          _insideWhere++;                          VisitExpression(expression.Arguments[0]);                          if (_chainedWhere)                          {                              _documentQuery.AndAlso();                              _documentQuery.OpenSubclause();                          }                          if (_chainedWhere == false && _insideWhere > 1)                              _documentQuery.OpenSubclause();                            if (expression.Arguments.Count == 3)                              _insideExact = (bool)GetValueFromExpression(expression.Arguments[2]' typeof(bool));                            VisitExpression(((UnaryExpression)expression.Arguments[1]).Operand);                            _insideExact = false;                            if (_chainedWhere == false && _insideWhere > 1)                              _documentQuery.CloseSubclause();                          if (_chainedWhere)                              _documentQuery.CloseSubclause();                          _chainedWhere = true;                          _insideWhere--;                          break;                      }                  case "Select":                      {                          if (expression.Arguments[0].Type.GetTypeInfo().IsGenericType &&                              (expression.Arguments[0].Type.GetGenericTypeDefinition() == typeof(IQueryable<>) ||                              expression.Arguments[0].Type.GetGenericTypeDefinition() == typeof(IOrderedQueryable<>) ||                              expression.Arguments[0].Type.GetGenericTypeDefinition() == typeof(IRavenQueryable<>)) &&                              expression.Arguments[0].Type != expression.Arguments[1].Type)                          {                              _documentQuery.AddRootType(expression.Arguments[0].Type.GetGenericArguments()[0]);                          }                            if (ExpressionHasNestedLambda(expression' out var lambdaExpression))                          {                              CheckForLetOrLoadFromSelect(expression' lambdaExpression);                          }                            _isSelectArg = true;                          VisitExpression(expression.Arguments[0]);                            _isSelectArg = false;                            var operand = ((UnaryExpression)expression.Arguments[1]).Operand;                            if (_documentQuery.IsDynamicMapReduce)                          {                              VisitSelectAfterGroupBy(operand' _groupByElementSelector);                              _groupByElementSelector = null;                          }                          else if (_selectLoad)                          {                              AddFromAlias(lambdaExpression.Parameters[0].Name);                              _selectLoad = false;                          }                            else                          {                              _insideSelect++;                              VisitSelect(operand);                              _insideSelect--;                          }                          break;                      }                  case "Skip":                      {                          VisitExpression(expression.Arguments[0]);                          VisitSkip(((ConstantExpression)expression.Arguments[1]));                          break;                      }                  case "Take":                      {                          VisitExpression(expression.Arguments[0]);                          VisitTake(((ConstantExpression)expression.Arguments[1]));                          break;                      }                  case "First":                  case "FirstOrDefault":                      {                          VisitExpression(expression.Arguments[0]);                          if (expression.Arguments.Count == 2)                          {                              if (_chainedWhere)                                  _documentQuery.AndAlso();                              VisitExpression(((UnaryExpression)expression.Arguments[1]).Operand);                          }                            if (expression.Method.Name == "First")                          {                              VisitFirst();                          }                          else                          {                              VisitFirstOrDefault();                          }                          _chainedWhere = _chainedWhere || expression.Arguments.Count == 2;                          break;                      }                  case "Single":                  case "SingleOrDefault":                      {                          VisitExpression(expression.Arguments[0]);                          if (expression.Arguments.Count == 2)                          {                              if (_chainedWhere)                                  _documentQuery.AndAlso();                                VisitExpression(((UnaryExpression)expression.Arguments[1]).Operand);                          }                            if (expression.Method.Name == "Single")                          {                              VisitSingle();                          }                          else                          {                              VisitSingleOrDefault();                          }                          _chainedWhere = _chainedWhere || expression.Arguments.Count == 2;                          break;                      }                  case "All":                      {                          VisitExpression(expression.Arguments[0]);                          VisitAll((Expression<Func<T' bool>>)((UnaryExpression)expression.Arguments[1]).Operand);                          break;                      }                  case "Any":                      {                          VisitExpression(expression.Arguments[0]);                          if (expression.Arguments.Count == 2)                          {                              if (_chainedWhere)                                  _documentQuery.AndAlso();                              VisitExpression(((UnaryExpression)expression.Arguments[1]).Operand);                          }                            VisitAny();                          break;                      }                  case "Count":                      {                          VisitExpression(expression.Arguments[0]);                          if (expression.Arguments.Count == 2)                          {                              if (_chainedWhere)                                  _documentQuery.AndAlso();                              VisitExpression(((UnaryExpression)expression.Arguments[1]).Operand);                          }                            VisitCount();                          break;                      }                  case "LongCount":                      {                          VisitExpression(expression.Arguments[0]);                          if (expression.Arguments.Count == 2)                          {                              if (_chainedWhere)                                  _documentQuery.AndAlso();                              VisitExpression(((UnaryExpression)expression.Arguments[1]).Operand);                          }                            VisitLongCount();                          break;                      }                  case "Distinct":                      if (expression.Arguments.Count == 1)                      {                          _documentQuery.Distinct();                          VisitExpression(expression.Arguments[0]);                          break;                      }                      throw new NotSupportedException("Method not supported: Distinct(IEqualityComparer<T>)");                  case "OrderBy":                  case "ThenBy":                  case "ThenByDescending":                  case "OrderByDescending":                      VisitExpression(expression.Arguments[0]);                      VisitOrderBy((LambdaExpression)((UnaryExpression)expression.Arguments[1]).Operand'                                   expression.Method.Name.EndsWith("Descending"));                      break;                  case "GroupBy":                      EnsureValidDynamicGroupByMethod("GroupBy");                        if (expression.Arguments.Count == 5) // GroupBy(x => keySelector' x => elementSelector' x => resultSelector' IEqualityComparer)                          throw new NotSupportedException("Dynamic map-reduce queries does not support a custom equality comparer");                        VisitExpression(expression.Arguments[0]);                      VisitGroupBy(((UnaryExpression)expression.Arguments[1]).Operand' GroupByArrayBehavior.NotApplicable);                        if (expression.Arguments.Count >= 3)                      {                          var lambdaExpression = ((UnaryExpression)expression.Arguments[2]).Operand as LambdaExpression;                            if (lambdaExpression == null)                              throw new NotSupportedException("Expected lambda expression as a element selector in GroupBy statement");                            Expression elementSelector = lambdaExpression.Body as MemberExpression; // x => x.Property                            if (elementSelector == null)                              elementSelector = lambdaExpression.Body as MethodCallExpression; // x.Collection.AggregatingFunction(y => y.Property)                            if (expression.Arguments.Count == 3) // GroupBy(x => keySelector' x => elementSelector)                              _groupByElementSelector = elementSelector;                          else if (expression.Arguments.Count == 4) // GroupBy(x => keySelector' x => elementSelector' x => resultSelector)                              VisitSelectAfterGroupBy(((UnaryExpression)expression.Arguments[3]).Operand' elementSelector);                          else                              throw new NotSupportedException($"Not supported syntax of GroupBy. Number of arguments: {expression.Arguments.Count}");                      }                        break;                  default:                      {                          throw new NotSupportedException("Method not supported: " + expression.Method.Name);                      }              }
Magic Number,Raven.Client.Documents.Linq,RavenQueryProviderProcessor<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,VisitQueryableMethodCall,The following statement contains a magic number: switch (expression.Method.Name)              {                  case "OfType":                      if (expression.Arguments[0].Type.GetTypeInfo().IsGenericType)                      {                          var type = expression.Arguments[0].Type.GetGenericArguments()[0];                          _documentQuery.AddRootType(type);                      }                        //set the _ofType variable only if OfType call precedes the projection                      if (_isSelectArg && expression.Type.GetTypeInfo().IsGenericType)                      {                          _ofType = expression.Type.GetGenericArguments()[0];                      }                        VisitExpression(expression.Arguments[0]);                      break;                  case "Where":                      {                          _insideWhere++;                          VisitExpression(expression.Arguments[0]);                          if (_chainedWhere)                          {                              _documentQuery.AndAlso();                              _documentQuery.OpenSubclause();                          }                          if (_chainedWhere == false && _insideWhere > 1)                              _documentQuery.OpenSubclause();                            if (expression.Arguments.Count == 3)                              _insideExact = (bool)GetValueFromExpression(expression.Arguments[2]' typeof(bool));                            VisitExpression(((UnaryExpression)expression.Arguments[1]).Operand);                            _insideExact = false;                            if (_chainedWhere == false && _insideWhere > 1)                              _documentQuery.CloseSubclause();                          if (_chainedWhere)                              _documentQuery.CloseSubclause();                          _chainedWhere = true;                          _insideWhere--;                          break;                      }                  case "Select":                      {                          if (expression.Arguments[0].Type.GetTypeInfo().IsGenericType &&                              (expression.Arguments[0].Type.GetGenericTypeDefinition() == typeof(IQueryable<>) ||                              expression.Arguments[0].Type.GetGenericTypeDefinition() == typeof(IOrderedQueryable<>) ||                              expression.Arguments[0].Type.GetGenericTypeDefinition() == typeof(IRavenQueryable<>)) &&                              expression.Arguments[0].Type != expression.Arguments[1].Type)                          {                              _documentQuery.AddRootType(expression.Arguments[0].Type.GetGenericArguments()[0]);                          }                            if (ExpressionHasNestedLambda(expression' out var lambdaExpression))                          {                              CheckForLetOrLoadFromSelect(expression' lambdaExpression);                          }                            _isSelectArg = true;                          VisitExpression(expression.Arguments[0]);                            _isSelectArg = false;                            var operand = ((UnaryExpression)expression.Arguments[1]).Operand;                            if (_documentQuery.IsDynamicMapReduce)                          {                              VisitSelectAfterGroupBy(operand' _groupByElementSelector);                              _groupByElementSelector = null;                          }                          else if (_selectLoad)                          {                              AddFromAlias(lambdaExpression.Parameters[0].Name);                              _selectLoad = false;                          }                            else                          {                              _insideSelect++;                              VisitSelect(operand);                              _insideSelect--;                          }                          break;                      }                  case "Skip":                      {                          VisitExpression(expression.Arguments[0]);                          VisitSkip(((ConstantExpression)expression.Arguments[1]));                          break;                      }                  case "Take":                      {                          VisitExpression(expression.Arguments[0]);                          VisitTake(((ConstantExpression)expression.Arguments[1]));                          break;                      }                  case "First":                  case "FirstOrDefault":                      {                          VisitExpression(expression.Arguments[0]);                          if (expression.Arguments.Count == 2)                          {                              if (_chainedWhere)                                  _documentQuery.AndAlso();                              VisitExpression(((UnaryExpression)expression.Arguments[1]).Operand);                          }                            if (expression.Method.Name == "First")                          {                              VisitFirst();                          }                          else                          {                              VisitFirstOrDefault();                          }                          _chainedWhere = _chainedWhere || expression.Arguments.Count == 2;                          break;                      }                  case "Single":                  case "SingleOrDefault":                      {                          VisitExpression(expression.Arguments[0]);                          if (expression.Arguments.Count == 2)                          {                              if (_chainedWhere)                                  _documentQuery.AndAlso();                                VisitExpression(((UnaryExpression)expression.Arguments[1]).Operand);                          }                            if (expression.Method.Name == "Single")                          {                              VisitSingle();                          }                          else                          {                              VisitSingleOrDefault();                          }                          _chainedWhere = _chainedWhere || expression.Arguments.Count == 2;                          break;                      }                  case "All":                      {                          VisitExpression(expression.Arguments[0]);                          VisitAll((Expression<Func<T' bool>>)((UnaryExpression)expression.Arguments[1]).Operand);                          break;                      }                  case "Any":                      {                          VisitExpression(expression.Arguments[0]);                          if (expression.Arguments.Count == 2)                          {                              if (_chainedWhere)                                  _documentQuery.AndAlso();                              VisitExpression(((UnaryExpression)expression.Arguments[1]).Operand);                          }                            VisitAny();                          break;                      }                  case "Count":                      {                          VisitExpression(expression.Arguments[0]);                          if (expression.Arguments.Count == 2)                          {                              if (_chainedWhere)                                  _documentQuery.AndAlso();                              VisitExpression(((UnaryExpression)expression.Arguments[1]).Operand);                          }                            VisitCount();                          break;                      }                  case "LongCount":                      {                          VisitExpression(expression.Arguments[0]);                          if (expression.Arguments.Count == 2)                          {                              if (_chainedWhere)                                  _documentQuery.AndAlso();                              VisitExpression(((UnaryExpression)expression.Arguments[1]).Operand);                          }                            VisitLongCount();                          break;                      }                  case "Distinct":                      if (expression.Arguments.Count == 1)                      {                          _documentQuery.Distinct();                          VisitExpression(expression.Arguments[0]);                          break;                      }                      throw new NotSupportedException("Method not supported: Distinct(IEqualityComparer<T>)");                  case "OrderBy":                  case "ThenBy":                  case "ThenByDescending":                  case "OrderByDescending":                      VisitExpression(expression.Arguments[0]);                      VisitOrderBy((LambdaExpression)((UnaryExpression)expression.Arguments[1]).Operand'                                   expression.Method.Name.EndsWith("Descending"));                      break;                  case "GroupBy":                      EnsureValidDynamicGroupByMethod("GroupBy");                        if (expression.Arguments.Count == 5) // GroupBy(x => keySelector' x => elementSelector' x => resultSelector' IEqualityComparer)                          throw new NotSupportedException("Dynamic map-reduce queries does not support a custom equality comparer");                        VisitExpression(expression.Arguments[0]);                      VisitGroupBy(((UnaryExpression)expression.Arguments[1]).Operand' GroupByArrayBehavior.NotApplicable);                        if (expression.Arguments.Count >= 3)                      {                          var lambdaExpression = ((UnaryExpression)expression.Arguments[2]).Operand as LambdaExpression;                            if (lambdaExpression == null)                              throw new NotSupportedException("Expected lambda expression as a element selector in GroupBy statement");                            Expression elementSelector = lambdaExpression.Body as MemberExpression; // x => x.Property                            if (elementSelector == null)                              elementSelector = lambdaExpression.Body as MethodCallExpression; // x.Collection.AggregatingFunction(y => y.Property)                            if (expression.Arguments.Count == 3) // GroupBy(x => keySelector' x => elementSelector)                              _groupByElementSelector = elementSelector;                          else if (expression.Arguments.Count == 4) // GroupBy(x => keySelector' x => elementSelector' x => resultSelector)                              VisitSelectAfterGroupBy(((UnaryExpression)expression.Arguments[3]).Operand' elementSelector);                          else                              throw new NotSupportedException($"Not supported syntax of GroupBy. Number of arguments: {expression.Arguments.Count}");                      }                        break;                  default:                      {                          throw new NotSupportedException("Method not supported: " + expression.Method.Name);                      }              }
Magic Number,Raven.Client.Documents.Linq,RavenQueryProviderProcessor<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,VisitQueryableMethodCall,The following statement contains a magic number: switch (expression.Method.Name)              {                  case "OfType":                      if (expression.Arguments[0].Type.GetTypeInfo().IsGenericType)                      {                          var type = expression.Arguments[0].Type.GetGenericArguments()[0];                          _documentQuery.AddRootType(type);                      }                        //set the _ofType variable only if OfType call precedes the projection                      if (_isSelectArg && expression.Type.GetTypeInfo().IsGenericType)                      {                          _ofType = expression.Type.GetGenericArguments()[0];                      }                        VisitExpression(expression.Arguments[0]);                      break;                  case "Where":                      {                          _insideWhere++;                          VisitExpression(expression.Arguments[0]);                          if (_chainedWhere)                          {                              _documentQuery.AndAlso();                              _documentQuery.OpenSubclause();                          }                          if (_chainedWhere == false && _insideWhere > 1)                              _documentQuery.OpenSubclause();                            if (expression.Arguments.Count == 3)                              _insideExact = (bool)GetValueFromExpression(expression.Arguments[2]' typeof(bool));                            VisitExpression(((UnaryExpression)expression.Arguments[1]).Operand);                            _insideExact = false;                            if (_chainedWhere == false && _insideWhere > 1)                              _documentQuery.CloseSubclause();                          if (_chainedWhere)                              _documentQuery.CloseSubclause();                          _chainedWhere = true;                          _insideWhere--;                          break;                      }                  case "Select":                      {                          if (expression.Arguments[0].Type.GetTypeInfo().IsGenericType &&                              (expression.Arguments[0].Type.GetGenericTypeDefinition() == typeof(IQueryable<>) ||                              expression.Arguments[0].Type.GetGenericTypeDefinition() == typeof(IOrderedQueryable<>) ||                              expression.Arguments[0].Type.GetGenericTypeDefinition() == typeof(IRavenQueryable<>)) &&                              expression.Arguments[0].Type != expression.Arguments[1].Type)                          {                              _documentQuery.AddRootType(expression.Arguments[0].Type.GetGenericArguments()[0]);                          }                            if (ExpressionHasNestedLambda(expression' out var lambdaExpression))                          {                              CheckForLetOrLoadFromSelect(expression' lambdaExpression);                          }                            _isSelectArg = true;                          VisitExpression(expression.Arguments[0]);                            _isSelectArg = false;                            var operand = ((UnaryExpression)expression.Arguments[1]).Operand;                            if (_documentQuery.IsDynamicMapReduce)                          {                              VisitSelectAfterGroupBy(operand' _groupByElementSelector);                              _groupByElementSelector = null;                          }                          else if (_selectLoad)                          {                              AddFromAlias(lambdaExpression.Parameters[0].Name);                              _selectLoad = false;                          }                            else                          {                              _insideSelect++;                              VisitSelect(operand);                              _insideSelect--;                          }                          break;                      }                  case "Skip":                      {                          VisitExpression(expression.Arguments[0]);                          VisitSkip(((ConstantExpression)expression.Arguments[1]));                          break;                      }                  case "Take":                      {                          VisitExpression(expression.Arguments[0]);                          VisitTake(((ConstantExpression)expression.Arguments[1]));                          break;                      }                  case "First":                  case "FirstOrDefault":                      {                          VisitExpression(expression.Arguments[0]);                          if (expression.Arguments.Count == 2)                          {                              if (_chainedWhere)                                  _documentQuery.AndAlso();                              VisitExpression(((UnaryExpression)expression.Arguments[1]).Operand);                          }                            if (expression.Method.Name == "First")                          {                              VisitFirst();                          }                          else                          {                              VisitFirstOrDefault();                          }                          _chainedWhere = _chainedWhere || expression.Arguments.Count == 2;                          break;                      }                  case "Single":                  case "SingleOrDefault":                      {                          VisitExpression(expression.Arguments[0]);                          if (expression.Arguments.Count == 2)                          {                              if (_chainedWhere)                                  _documentQuery.AndAlso();                                VisitExpression(((UnaryExpression)expression.Arguments[1]).Operand);                          }                            if (expression.Method.Name == "Single")                          {                              VisitSingle();                          }                          else                          {                              VisitSingleOrDefault();                          }                          _chainedWhere = _chainedWhere || expression.Arguments.Count == 2;                          break;                      }                  case "All":                      {                          VisitExpression(expression.Arguments[0]);                          VisitAll((Expression<Func<T' bool>>)((UnaryExpression)expression.Arguments[1]).Operand);                          break;                      }                  case "Any":                      {                          VisitExpression(expression.Arguments[0]);                          if (expression.Arguments.Count == 2)                          {                              if (_chainedWhere)                                  _documentQuery.AndAlso();                              VisitExpression(((UnaryExpression)expression.Arguments[1]).Operand);                          }                            VisitAny();                          break;                      }                  case "Count":                      {                          VisitExpression(expression.Arguments[0]);                          if (expression.Arguments.Count == 2)                          {                              if (_chainedWhere)                                  _documentQuery.AndAlso();                              VisitExpression(((UnaryExpression)expression.Arguments[1]).Operand);                          }                            VisitCount();                          break;                      }                  case "LongCount":                      {                          VisitExpression(expression.Arguments[0]);                          if (expression.Arguments.Count == 2)                          {                              if (_chainedWhere)                                  _documentQuery.AndAlso();                              VisitExpression(((UnaryExpression)expression.Arguments[1]).Operand);                          }                            VisitLongCount();                          break;                      }                  case "Distinct":                      if (expression.Arguments.Count == 1)                      {                          _documentQuery.Distinct();                          VisitExpression(expression.Arguments[0]);                          break;                      }                      throw new NotSupportedException("Method not supported: Distinct(IEqualityComparer<T>)");                  case "OrderBy":                  case "ThenBy":                  case "ThenByDescending":                  case "OrderByDescending":                      VisitExpression(expression.Arguments[0]);                      VisitOrderBy((LambdaExpression)((UnaryExpression)expression.Arguments[1]).Operand'                                   expression.Method.Name.EndsWith("Descending"));                      break;                  case "GroupBy":                      EnsureValidDynamicGroupByMethod("GroupBy");                        if (expression.Arguments.Count == 5) // GroupBy(x => keySelector' x => elementSelector' x => resultSelector' IEqualityComparer)                          throw new NotSupportedException("Dynamic map-reduce queries does not support a custom equality comparer");                        VisitExpression(expression.Arguments[0]);                      VisitGroupBy(((UnaryExpression)expression.Arguments[1]).Operand' GroupByArrayBehavior.NotApplicable);                        if (expression.Arguments.Count >= 3)                      {                          var lambdaExpression = ((UnaryExpression)expression.Arguments[2]).Operand as LambdaExpression;                            if (lambdaExpression == null)                              throw new NotSupportedException("Expected lambda expression as a element selector in GroupBy statement");                            Expression elementSelector = lambdaExpression.Body as MemberExpression; // x => x.Property                            if (elementSelector == null)                              elementSelector = lambdaExpression.Body as MethodCallExpression; // x.Collection.AggregatingFunction(y => y.Property)                            if (expression.Arguments.Count == 3) // GroupBy(x => keySelector' x => elementSelector)                              _groupByElementSelector = elementSelector;                          else if (expression.Arguments.Count == 4) // GroupBy(x => keySelector' x => elementSelector' x => resultSelector)                              VisitSelectAfterGroupBy(((UnaryExpression)expression.Arguments[3]).Operand' elementSelector);                          else                              throw new NotSupportedException($"Not supported syntax of GroupBy. Number of arguments: {expression.Arguments.Count}");                      }                        break;                  default:                      {                          throw new NotSupportedException("Method not supported: " + expression.Method.Name);                      }              }
Magic Number,Raven.Client.Documents.Linq,RavenQueryProviderProcessor<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,VisitQueryableMethodCall,The following statement contains a magic number: switch (expression.Method.Name)              {                  case "OfType":                      if (expression.Arguments[0].Type.GetTypeInfo().IsGenericType)                      {                          var type = expression.Arguments[0].Type.GetGenericArguments()[0];                          _documentQuery.AddRootType(type);                      }                        //set the _ofType variable only if OfType call precedes the projection                      if (_isSelectArg && expression.Type.GetTypeInfo().IsGenericType)                      {                          _ofType = expression.Type.GetGenericArguments()[0];                      }                        VisitExpression(expression.Arguments[0]);                      break;                  case "Where":                      {                          _insideWhere++;                          VisitExpression(expression.Arguments[0]);                          if (_chainedWhere)                          {                              _documentQuery.AndAlso();                              _documentQuery.OpenSubclause();                          }                          if (_chainedWhere == false && _insideWhere > 1)                              _documentQuery.OpenSubclause();                            if (expression.Arguments.Count == 3)                              _insideExact = (bool)GetValueFromExpression(expression.Arguments[2]' typeof(bool));                            VisitExpression(((UnaryExpression)expression.Arguments[1]).Operand);                            _insideExact = false;                            if (_chainedWhere == false && _insideWhere > 1)                              _documentQuery.CloseSubclause();                          if (_chainedWhere)                              _documentQuery.CloseSubclause();                          _chainedWhere = true;                          _insideWhere--;                          break;                      }                  case "Select":                      {                          if (expression.Arguments[0].Type.GetTypeInfo().IsGenericType &&                              (expression.Arguments[0].Type.GetGenericTypeDefinition() == typeof(IQueryable<>) ||                              expression.Arguments[0].Type.GetGenericTypeDefinition() == typeof(IOrderedQueryable<>) ||                              expression.Arguments[0].Type.GetGenericTypeDefinition() == typeof(IRavenQueryable<>)) &&                              expression.Arguments[0].Type != expression.Arguments[1].Type)                          {                              _documentQuery.AddRootType(expression.Arguments[0].Type.GetGenericArguments()[0]);                          }                            if (ExpressionHasNestedLambda(expression' out var lambdaExpression))                          {                              CheckForLetOrLoadFromSelect(expression' lambdaExpression);                          }                            _isSelectArg = true;                          VisitExpression(expression.Arguments[0]);                            _isSelectArg = false;                            var operand = ((UnaryExpression)expression.Arguments[1]).Operand;                            if (_documentQuery.IsDynamicMapReduce)                          {                              VisitSelectAfterGroupBy(operand' _groupByElementSelector);                              _groupByElementSelector = null;                          }                          else if (_selectLoad)                          {                              AddFromAlias(lambdaExpression.Parameters[0].Name);                              _selectLoad = false;                          }                            else                          {                              _insideSelect++;                              VisitSelect(operand);                              _insideSelect--;                          }                          break;                      }                  case "Skip":                      {                          VisitExpression(expression.Arguments[0]);                          VisitSkip(((ConstantExpression)expression.Arguments[1]));                          break;                      }                  case "Take":                      {                          VisitExpression(expression.Arguments[0]);                          VisitTake(((ConstantExpression)expression.Arguments[1]));                          break;                      }                  case "First":                  case "FirstOrDefault":                      {                          VisitExpression(expression.Arguments[0]);                          if (expression.Arguments.Count == 2)                          {                              if (_chainedWhere)                                  _documentQuery.AndAlso();                              VisitExpression(((UnaryExpression)expression.Arguments[1]).Operand);                          }                            if (expression.Method.Name == "First")                          {                              VisitFirst();                          }                          else                          {                              VisitFirstOrDefault();                          }                          _chainedWhere = _chainedWhere || expression.Arguments.Count == 2;                          break;                      }                  case "Single":                  case "SingleOrDefault":                      {                          VisitExpression(expression.Arguments[0]);                          if (expression.Arguments.Count == 2)                          {                              if (_chainedWhere)                                  _documentQuery.AndAlso();                                VisitExpression(((UnaryExpression)expression.Arguments[1]).Operand);                          }                            if (expression.Method.Name == "Single")                          {                              VisitSingle();                          }                          else                          {                              VisitSingleOrDefault();                          }                          _chainedWhere = _chainedWhere || expression.Arguments.Count == 2;                          break;                      }                  case "All":                      {                          VisitExpression(expression.Arguments[0]);                          VisitAll((Expression<Func<T' bool>>)((UnaryExpression)expression.Arguments[1]).Operand);                          break;                      }                  case "Any":                      {                          VisitExpression(expression.Arguments[0]);                          if (expression.Arguments.Count == 2)                          {                              if (_chainedWhere)                                  _documentQuery.AndAlso();                              VisitExpression(((UnaryExpression)expression.Arguments[1]).Operand);                          }                            VisitAny();                          break;                      }                  case "Count":                      {                          VisitExpression(expression.Arguments[0]);                          if (expression.Arguments.Count == 2)                          {                              if (_chainedWhere)                                  _documentQuery.AndAlso();                              VisitExpression(((UnaryExpression)expression.Arguments[1]).Operand);                          }                            VisitCount();                          break;                      }                  case "LongCount":                      {                          VisitExpression(expression.Arguments[0]);                          if (expression.Arguments.Count == 2)                          {                              if (_chainedWhere)                                  _documentQuery.AndAlso();                              VisitExpression(((UnaryExpression)expression.Arguments[1]).Operand);                          }                            VisitLongCount();                          break;                      }                  case "Distinct":                      if (expression.Arguments.Count == 1)                      {                          _documentQuery.Distinct();                          VisitExpression(expression.Arguments[0]);                          break;                      }                      throw new NotSupportedException("Method not supported: Distinct(IEqualityComparer<T>)");                  case "OrderBy":                  case "ThenBy":                  case "ThenByDescending":                  case "OrderByDescending":                      VisitExpression(expression.Arguments[0]);                      VisitOrderBy((LambdaExpression)((UnaryExpression)expression.Arguments[1]).Operand'                                   expression.Method.Name.EndsWith("Descending"));                      break;                  case "GroupBy":                      EnsureValidDynamicGroupByMethod("GroupBy");                        if (expression.Arguments.Count == 5) // GroupBy(x => keySelector' x => elementSelector' x => resultSelector' IEqualityComparer)                          throw new NotSupportedException("Dynamic map-reduce queries does not support a custom equality comparer");                        VisitExpression(expression.Arguments[0]);                      VisitGroupBy(((UnaryExpression)expression.Arguments[1]).Operand' GroupByArrayBehavior.NotApplicable);                        if (expression.Arguments.Count >= 3)                      {                          var lambdaExpression = ((UnaryExpression)expression.Arguments[2]).Operand as LambdaExpression;                            if (lambdaExpression == null)                              throw new NotSupportedException("Expected lambda expression as a element selector in GroupBy statement");                            Expression elementSelector = lambdaExpression.Body as MemberExpression; // x => x.Property                            if (elementSelector == null)                              elementSelector = lambdaExpression.Body as MethodCallExpression; // x.Collection.AggregatingFunction(y => y.Property)                            if (expression.Arguments.Count == 3) // GroupBy(x => keySelector' x => elementSelector)                              _groupByElementSelector = elementSelector;                          else if (expression.Arguments.Count == 4) // GroupBy(x => keySelector' x => elementSelector' x => resultSelector)                              VisitSelectAfterGroupBy(((UnaryExpression)expression.Arguments[3]).Operand' elementSelector);                          else                              throw new NotSupportedException($"Not supported syntax of GroupBy. Number of arguments: {expression.Arguments.Count}");                      }                        break;                  default:                      {                          throw new NotSupportedException("Method not supported: " + expression.Method.Name);                      }              }
Magic Number,Raven.Client.Documents.Linq,RavenQueryProviderProcessor<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,VisitQueryableMethodCall,The following statement contains a magic number: switch (expression.Method.Name)              {                  case "OfType":                      if (expression.Arguments[0].Type.GetTypeInfo().IsGenericType)                      {                          var type = expression.Arguments[0].Type.GetGenericArguments()[0];                          _documentQuery.AddRootType(type);                      }                        //set the _ofType variable only if OfType call precedes the projection                      if (_isSelectArg && expression.Type.GetTypeInfo().IsGenericType)                      {                          _ofType = expression.Type.GetGenericArguments()[0];                      }                        VisitExpression(expression.Arguments[0]);                      break;                  case "Where":                      {                          _insideWhere++;                          VisitExpression(expression.Arguments[0]);                          if (_chainedWhere)                          {                              _documentQuery.AndAlso();                              _documentQuery.OpenSubclause();                          }                          if (_chainedWhere == false && _insideWhere > 1)                              _documentQuery.OpenSubclause();                            if (expression.Arguments.Count == 3)                              _insideExact = (bool)GetValueFromExpression(expression.Arguments[2]' typeof(bool));                            VisitExpression(((UnaryExpression)expression.Arguments[1]).Operand);                            _insideExact = false;                            if (_chainedWhere == false && _insideWhere > 1)                              _documentQuery.CloseSubclause();                          if (_chainedWhere)                              _documentQuery.CloseSubclause();                          _chainedWhere = true;                          _insideWhere--;                          break;                      }                  case "Select":                      {                          if (expression.Arguments[0].Type.GetTypeInfo().IsGenericType &&                              (expression.Arguments[0].Type.GetGenericTypeDefinition() == typeof(IQueryable<>) ||                              expression.Arguments[0].Type.GetGenericTypeDefinition() == typeof(IOrderedQueryable<>) ||                              expression.Arguments[0].Type.GetGenericTypeDefinition() == typeof(IRavenQueryable<>)) &&                              expression.Arguments[0].Type != expression.Arguments[1].Type)                          {                              _documentQuery.AddRootType(expression.Arguments[0].Type.GetGenericArguments()[0]);                          }                            if (ExpressionHasNestedLambda(expression' out var lambdaExpression))                          {                              CheckForLetOrLoadFromSelect(expression' lambdaExpression);                          }                            _isSelectArg = true;                          VisitExpression(expression.Arguments[0]);                            _isSelectArg = false;                            var operand = ((UnaryExpression)expression.Arguments[1]).Operand;                            if (_documentQuery.IsDynamicMapReduce)                          {                              VisitSelectAfterGroupBy(operand' _groupByElementSelector);                              _groupByElementSelector = null;                          }                          else if (_selectLoad)                          {                              AddFromAlias(lambdaExpression.Parameters[0].Name);                              _selectLoad = false;                          }                            else                          {                              _insideSelect++;                              VisitSelect(operand);                              _insideSelect--;                          }                          break;                      }                  case "Skip":                      {                          VisitExpression(expression.Arguments[0]);                          VisitSkip(((ConstantExpression)expression.Arguments[1]));                          break;                      }                  case "Take":                      {                          VisitExpression(expression.Arguments[0]);                          VisitTake(((ConstantExpression)expression.Arguments[1]));                          break;                      }                  case "First":                  case "FirstOrDefault":                      {                          VisitExpression(expression.Arguments[0]);                          if (expression.Arguments.Count == 2)                          {                              if (_chainedWhere)                                  _documentQuery.AndAlso();                              VisitExpression(((UnaryExpression)expression.Arguments[1]).Operand);                          }                            if (expression.Method.Name == "First")                          {                              VisitFirst();                          }                          else                          {                              VisitFirstOrDefault();                          }                          _chainedWhere = _chainedWhere || expression.Arguments.Count == 2;                          break;                      }                  case "Single":                  case "SingleOrDefault":                      {                          VisitExpression(expression.Arguments[0]);                          if (expression.Arguments.Count == 2)                          {                              if (_chainedWhere)                                  _documentQuery.AndAlso();                                VisitExpression(((UnaryExpression)expression.Arguments[1]).Operand);                          }                            if (expression.Method.Name == "Single")                          {                              VisitSingle();                          }                          else                          {                              VisitSingleOrDefault();                          }                          _chainedWhere = _chainedWhere || expression.Arguments.Count == 2;                          break;                      }                  case "All":                      {                          VisitExpression(expression.Arguments[0]);                          VisitAll((Expression<Func<T' bool>>)((UnaryExpression)expression.Arguments[1]).Operand);                          break;                      }                  case "Any":                      {                          VisitExpression(expression.Arguments[0]);                          if (expression.Arguments.Count == 2)                          {                              if (_chainedWhere)                                  _documentQuery.AndAlso();                              VisitExpression(((UnaryExpression)expression.Arguments[1]).Operand);                          }                            VisitAny();                          break;                      }                  case "Count":                      {                          VisitExpression(expression.Arguments[0]);                          if (expression.Arguments.Count == 2)                          {                              if (_chainedWhere)                                  _documentQuery.AndAlso();                              VisitExpression(((UnaryExpression)expression.Arguments[1]).Operand);                          }                            VisitCount();                          break;                      }                  case "LongCount":                      {                          VisitExpression(expression.Arguments[0]);                          if (expression.Arguments.Count == 2)                          {                              if (_chainedWhere)                                  _documentQuery.AndAlso();                              VisitExpression(((UnaryExpression)expression.Arguments[1]).Operand);                          }                            VisitLongCount();                          break;                      }                  case "Distinct":                      if (expression.Arguments.Count == 1)                      {                          _documentQuery.Distinct();                          VisitExpression(expression.Arguments[0]);                          break;                      }                      throw new NotSupportedException("Method not supported: Distinct(IEqualityComparer<T>)");                  case "OrderBy":                  case "ThenBy":                  case "ThenByDescending":                  case "OrderByDescending":                      VisitExpression(expression.Arguments[0]);                      VisitOrderBy((LambdaExpression)((UnaryExpression)expression.Arguments[1]).Operand'                                   expression.Method.Name.EndsWith("Descending"));                      break;                  case "GroupBy":                      EnsureValidDynamicGroupByMethod("GroupBy");                        if (expression.Arguments.Count == 5) // GroupBy(x => keySelector' x => elementSelector' x => resultSelector' IEqualityComparer)                          throw new NotSupportedException("Dynamic map-reduce queries does not support a custom equality comparer");                        VisitExpression(expression.Arguments[0]);                      VisitGroupBy(((UnaryExpression)expression.Arguments[1]).Operand' GroupByArrayBehavior.NotApplicable);                        if (expression.Arguments.Count >= 3)                      {                          var lambdaExpression = ((UnaryExpression)expression.Arguments[2]).Operand as LambdaExpression;                            if (lambdaExpression == null)                              throw new NotSupportedException("Expected lambda expression as a element selector in GroupBy statement");                            Expression elementSelector = lambdaExpression.Body as MemberExpression; // x => x.Property                            if (elementSelector == null)                              elementSelector = lambdaExpression.Body as MethodCallExpression; // x.Collection.AggregatingFunction(y => y.Property)                            if (expression.Arguments.Count == 3) // GroupBy(x => keySelector' x => elementSelector)                              _groupByElementSelector = elementSelector;                          else if (expression.Arguments.Count == 4) // GroupBy(x => keySelector' x => elementSelector' x => resultSelector)                              VisitSelectAfterGroupBy(((UnaryExpression)expression.Arguments[3]).Operand' elementSelector);                          else                              throw new NotSupportedException($"Not supported syntax of GroupBy. Number of arguments: {expression.Arguments.Count}");                      }                        break;                  default:                      {                          throw new NotSupportedException("Method not supported: " + expression.Method.Name);                      }              }
Magic Number,Raven.Client.Documents.Linq,RavenQueryProviderProcessor<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,VisitQueryableMethodCall,The following statement contains a magic number: switch (expression.Method.Name)              {                  case "OfType":                      if (expression.Arguments[0].Type.GetTypeInfo().IsGenericType)                      {                          var type = expression.Arguments[0].Type.GetGenericArguments()[0];                          _documentQuery.AddRootType(type);                      }                        //set the _ofType variable only if OfType call precedes the projection                      if (_isSelectArg && expression.Type.GetTypeInfo().IsGenericType)                      {                          _ofType = expression.Type.GetGenericArguments()[0];                      }                        VisitExpression(expression.Arguments[0]);                      break;                  case "Where":                      {                          _insideWhere++;                          VisitExpression(expression.Arguments[0]);                          if (_chainedWhere)                          {                              _documentQuery.AndAlso();                              _documentQuery.OpenSubclause();                          }                          if (_chainedWhere == false && _insideWhere > 1)                              _documentQuery.OpenSubclause();                            if (expression.Arguments.Count == 3)                              _insideExact = (bool)GetValueFromExpression(expression.Arguments[2]' typeof(bool));                            VisitExpression(((UnaryExpression)expression.Arguments[1]).Operand);                            _insideExact = false;                            if (_chainedWhere == false && _insideWhere > 1)                              _documentQuery.CloseSubclause();                          if (_chainedWhere)                              _documentQuery.CloseSubclause();                          _chainedWhere = true;                          _insideWhere--;                          break;                      }                  case "Select":                      {                          if (expression.Arguments[0].Type.GetTypeInfo().IsGenericType &&                              (expression.Arguments[0].Type.GetGenericTypeDefinition() == typeof(IQueryable<>) ||                              expression.Arguments[0].Type.GetGenericTypeDefinition() == typeof(IOrderedQueryable<>) ||                              expression.Arguments[0].Type.GetGenericTypeDefinition() == typeof(IRavenQueryable<>)) &&                              expression.Arguments[0].Type != expression.Arguments[1].Type)                          {                              _documentQuery.AddRootType(expression.Arguments[0].Type.GetGenericArguments()[0]);                          }                            if (ExpressionHasNestedLambda(expression' out var lambdaExpression))                          {                              CheckForLetOrLoadFromSelect(expression' lambdaExpression);                          }                            _isSelectArg = true;                          VisitExpression(expression.Arguments[0]);                            _isSelectArg = false;                            var operand = ((UnaryExpression)expression.Arguments[1]).Operand;                            if (_documentQuery.IsDynamicMapReduce)                          {                              VisitSelectAfterGroupBy(operand' _groupByElementSelector);                              _groupByElementSelector = null;                          }                          else if (_selectLoad)                          {                              AddFromAlias(lambdaExpression.Parameters[0].Name);                              _selectLoad = false;                          }                            else                          {                              _insideSelect++;                              VisitSelect(operand);                              _insideSelect--;                          }                          break;                      }                  case "Skip":                      {                          VisitExpression(expression.Arguments[0]);                          VisitSkip(((ConstantExpression)expression.Arguments[1]));                          break;                      }                  case "Take":                      {                          VisitExpression(expression.Arguments[0]);                          VisitTake(((ConstantExpression)expression.Arguments[1]));                          break;                      }                  case "First":                  case "FirstOrDefault":                      {                          VisitExpression(expression.Arguments[0]);                          if (expression.Arguments.Count == 2)                          {                              if (_chainedWhere)                                  _documentQuery.AndAlso();                              VisitExpression(((UnaryExpression)expression.Arguments[1]).Operand);                          }                            if (expression.Method.Name == "First")                          {                              VisitFirst();                          }                          else                          {                              VisitFirstOrDefault();                          }                          _chainedWhere = _chainedWhere || expression.Arguments.Count == 2;                          break;                      }                  case "Single":                  case "SingleOrDefault":                      {                          VisitExpression(expression.Arguments[0]);                          if (expression.Arguments.Count == 2)                          {                              if (_chainedWhere)                                  _documentQuery.AndAlso();                                VisitExpression(((UnaryExpression)expression.Arguments[1]).Operand);                          }                            if (expression.Method.Name == "Single")                          {                              VisitSingle();                          }                          else                          {                              VisitSingleOrDefault();                          }                          _chainedWhere = _chainedWhere || expression.Arguments.Count == 2;                          break;                      }                  case "All":                      {                          VisitExpression(expression.Arguments[0]);                          VisitAll((Expression<Func<T' bool>>)((UnaryExpression)expression.Arguments[1]).Operand);                          break;                      }                  case "Any":                      {                          VisitExpression(expression.Arguments[0]);                          if (expression.Arguments.Count == 2)                          {                              if (_chainedWhere)                                  _documentQuery.AndAlso();                              VisitExpression(((UnaryExpression)expression.Arguments[1]).Operand);                          }                            VisitAny();                          break;                      }                  case "Count":                      {                          VisitExpression(expression.Arguments[0]);                          if (expression.Arguments.Count == 2)                          {                              if (_chainedWhere)                                  _documentQuery.AndAlso();                              VisitExpression(((UnaryExpression)expression.Arguments[1]).Operand);                          }                            VisitCount();                          break;                      }                  case "LongCount":                      {                          VisitExpression(expression.Arguments[0]);                          if (expression.Arguments.Count == 2)                          {                              if (_chainedWhere)                                  _documentQuery.AndAlso();                              VisitExpression(((UnaryExpression)expression.Arguments[1]).Operand);                          }                            VisitLongCount();                          break;                      }                  case "Distinct":                      if (expression.Arguments.Count == 1)                      {                          _documentQuery.Distinct();                          VisitExpression(expression.Arguments[0]);                          break;                      }                      throw new NotSupportedException("Method not supported: Distinct(IEqualityComparer<T>)");                  case "OrderBy":                  case "ThenBy":                  case "ThenByDescending":                  case "OrderByDescending":                      VisitExpression(expression.Arguments[0]);                      VisitOrderBy((LambdaExpression)((UnaryExpression)expression.Arguments[1]).Operand'                                   expression.Method.Name.EndsWith("Descending"));                      break;                  case "GroupBy":                      EnsureValidDynamicGroupByMethod("GroupBy");                        if (expression.Arguments.Count == 5) // GroupBy(x => keySelector' x => elementSelector' x => resultSelector' IEqualityComparer)                          throw new NotSupportedException("Dynamic map-reduce queries does not support a custom equality comparer");                        VisitExpression(expression.Arguments[0]);                      VisitGroupBy(((UnaryExpression)expression.Arguments[1]).Operand' GroupByArrayBehavior.NotApplicable);                        if (expression.Arguments.Count >= 3)                      {                          var lambdaExpression = ((UnaryExpression)expression.Arguments[2]).Operand as LambdaExpression;                            if (lambdaExpression == null)                              throw new NotSupportedException("Expected lambda expression as a element selector in GroupBy statement");                            Expression elementSelector = lambdaExpression.Body as MemberExpression; // x => x.Property                            if (elementSelector == null)                              elementSelector = lambdaExpression.Body as MethodCallExpression; // x.Collection.AggregatingFunction(y => y.Property)                            if (expression.Arguments.Count == 3) // GroupBy(x => keySelector' x => elementSelector)                              _groupByElementSelector = elementSelector;                          else if (expression.Arguments.Count == 4) // GroupBy(x => keySelector' x => elementSelector' x => resultSelector)                              VisitSelectAfterGroupBy(((UnaryExpression)expression.Arguments[3]).Operand' elementSelector);                          else                              throw new NotSupportedException($"Not supported syntax of GroupBy. Number of arguments: {expression.Arguments.Count}");                      }                        break;                  default:                      {                          throw new NotSupportedException("Method not supported: " + expression.Method.Name);                      }              }
Magic Number,Raven.Client.Documents.Linq,RavenQueryProviderProcessor<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,VisitQueryableMethodCall,The following statement contains a magic number: switch (expression.Method.Name)              {                  case "OfType":                      if (expression.Arguments[0].Type.GetTypeInfo().IsGenericType)                      {                          var type = expression.Arguments[0].Type.GetGenericArguments()[0];                          _documentQuery.AddRootType(type);                      }                        //set the _ofType variable only if OfType call precedes the projection                      if (_isSelectArg && expression.Type.GetTypeInfo().IsGenericType)                      {                          _ofType = expression.Type.GetGenericArguments()[0];                      }                        VisitExpression(expression.Arguments[0]);                      break;                  case "Where":                      {                          _insideWhere++;                          VisitExpression(expression.Arguments[0]);                          if (_chainedWhere)                          {                              _documentQuery.AndAlso();                              _documentQuery.OpenSubclause();                          }                          if (_chainedWhere == false && _insideWhere > 1)                              _documentQuery.OpenSubclause();                            if (expression.Arguments.Count == 3)                              _insideExact = (bool)GetValueFromExpression(expression.Arguments[2]' typeof(bool));                            VisitExpression(((UnaryExpression)expression.Arguments[1]).Operand);                            _insideExact = false;                            if (_chainedWhere == false && _insideWhere > 1)                              _documentQuery.CloseSubclause();                          if (_chainedWhere)                              _documentQuery.CloseSubclause();                          _chainedWhere = true;                          _insideWhere--;                          break;                      }                  case "Select":                      {                          if (expression.Arguments[0].Type.GetTypeInfo().IsGenericType &&                              (expression.Arguments[0].Type.GetGenericTypeDefinition() == typeof(IQueryable<>) ||                              expression.Arguments[0].Type.GetGenericTypeDefinition() == typeof(IOrderedQueryable<>) ||                              expression.Arguments[0].Type.GetGenericTypeDefinition() == typeof(IRavenQueryable<>)) &&                              expression.Arguments[0].Type != expression.Arguments[1].Type)                          {                              _documentQuery.AddRootType(expression.Arguments[0].Type.GetGenericArguments()[0]);                          }                            if (ExpressionHasNestedLambda(expression' out var lambdaExpression))                          {                              CheckForLetOrLoadFromSelect(expression' lambdaExpression);                          }                            _isSelectArg = true;                          VisitExpression(expression.Arguments[0]);                            _isSelectArg = false;                            var operand = ((UnaryExpression)expression.Arguments[1]).Operand;                            if (_documentQuery.IsDynamicMapReduce)                          {                              VisitSelectAfterGroupBy(operand' _groupByElementSelector);                              _groupByElementSelector = null;                          }                          else if (_selectLoad)                          {                              AddFromAlias(lambdaExpression.Parameters[0].Name);                              _selectLoad = false;                          }                            else                          {                              _insideSelect++;                              VisitSelect(operand);                              _insideSelect--;                          }                          break;                      }                  case "Skip":                      {                          VisitExpression(expression.Arguments[0]);                          VisitSkip(((ConstantExpression)expression.Arguments[1]));                          break;                      }                  case "Take":                      {                          VisitExpression(expression.Arguments[0]);                          VisitTake(((ConstantExpression)expression.Arguments[1]));                          break;                      }                  case "First":                  case "FirstOrDefault":                      {                          VisitExpression(expression.Arguments[0]);                          if (expression.Arguments.Count == 2)                          {                              if (_chainedWhere)                                  _documentQuery.AndAlso();                              VisitExpression(((UnaryExpression)expression.Arguments[1]).Operand);                          }                            if (expression.Method.Name == "First")                          {                              VisitFirst();                          }                          else                          {                              VisitFirstOrDefault();                          }                          _chainedWhere = _chainedWhere || expression.Arguments.Count == 2;                          break;                      }                  case "Single":                  case "SingleOrDefault":                      {                          VisitExpression(expression.Arguments[0]);                          if (expression.Arguments.Count == 2)                          {                              if (_chainedWhere)                                  _documentQuery.AndAlso();                                VisitExpression(((UnaryExpression)expression.Arguments[1]).Operand);                          }                            if (expression.Method.Name == "Single")                          {                              VisitSingle();                          }                          else                          {                              VisitSingleOrDefault();                          }                          _chainedWhere = _chainedWhere || expression.Arguments.Count == 2;                          break;                      }                  case "All":                      {                          VisitExpression(expression.Arguments[0]);                          VisitAll((Expression<Func<T' bool>>)((UnaryExpression)expression.Arguments[1]).Operand);                          break;                      }                  case "Any":                      {                          VisitExpression(expression.Arguments[0]);                          if (expression.Arguments.Count == 2)                          {                              if (_chainedWhere)                                  _documentQuery.AndAlso();                              VisitExpression(((UnaryExpression)expression.Arguments[1]).Operand);                          }                            VisitAny();                          break;                      }                  case "Count":                      {                          VisitExpression(expression.Arguments[0]);                          if (expression.Arguments.Count == 2)                          {                              if (_chainedWhere)                                  _documentQuery.AndAlso();                              VisitExpression(((UnaryExpression)expression.Arguments[1]).Operand);                          }                            VisitCount();                          break;                      }                  case "LongCount":                      {                          VisitExpression(expression.Arguments[0]);                          if (expression.Arguments.Count == 2)                          {                              if (_chainedWhere)                                  _documentQuery.AndAlso();                              VisitExpression(((UnaryExpression)expression.Arguments[1]).Operand);                          }                            VisitLongCount();                          break;                      }                  case "Distinct":                      if (expression.Arguments.Count == 1)                      {                          _documentQuery.Distinct();                          VisitExpression(expression.Arguments[0]);                          break;                      }                      throw new NotSupportedException("Method not supported: Distinct(IEqualityComparer<T>)");                  case "OrderBy":                  case "ThenBy":                  case "ThenByDescending":                  case "OrderByDescending":                      VisitExpression(expression.Arguments[0]);                      VisitOrderBy((LambdaExpression)((UnaryExpression)expression.Arguments[1]).Operand'                                   expression.Method.Name.EndsWith("Descending"));                      break;                  case "GroupBy":                      EnsureValidDynamicGroupByMethod("GroupBy");                        if (expression.Arguments.Count == 5) // GroupBy(x => keySelector' x => elementSelector' x => resultSelector' IEqualityComparer)                          throw new NotSupportedException("Dynamic map-reduce queries does not support a custom equality comparer");                        VisitExpression(expression.Arguments[0]);                      VisitGroupBy(((UnaryExpression)expression.Arguments[1]).Operand' GroupByArrayBehavior.NotApplicable);                        if (expression.Arguments.Count >= 3)                      {                          var lambdaExpression = ((UnaryExpression)expression.Arguments[2]).Operand as LambdaExpression;                            if (lambdaExpression == null)                              throw new NotSupportedException("Expected lambda expression as a element selector in GroupBy statement");                            Expression elementSelector = lambdaExpression.Body as MemberExpression; // x => x.Property                            if (elementSelector == null)                              elementSelector = lambdaExpression.Body as MethodCallExpression; // x.Collection.AggregatingFunction(y => y.Property)                            if (expression.Arguments.Count == 3) // GroupBy(x => keySelector' x => elementSelector)                              _groupByElementSelector = elementSelector;                          else if (expression.Arguments.Count == 4) // GroupBy(x => keySelector' x => elementSelector' x => resultSelector)                              VisitSelectAfterGroupBy(((UnaryExpression)expression.Arguments[3]).Operand' elementSelector);                          else                              throw new NotSupportedException($"Not supported syntax of GroupBy. Number of arguments: {expression.Arguments.Count}");                      }                        break;                  default:                      {                          throw new NotSupportedException("Method not supported: " + expression.Method.Name);                      }              }
Magic Number,Raven.Client.Documents.Linq,RavenQueryProviderProcessor<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,VisitQueryableMethodCall,The following statement contains a magic number: switch (expression.Method.Name)              {                  case "OfType":                      if (expression.Arguments[0].Type.GetTypeInfo().IsGenericType)                      {                          var type = expression.Arguments[0].Type.GetGenericArguments()[0];                          _documentQuery.AddRootType(type);                      }                        //set the _ofType variable only if OfType call precedes the projection                      if (_isSelectArg && expression.Type.GetTypeInfo().IsGenericType)                      {                          _ofType = expression.Type.GetGenericArguments()[0];                      }                        VisitExpression(expression.Arguments[0]);                      break;                  case "Where":                      {                          _insideWhere++;                          VisitExpression(expression.Arguments[0]);                          if (_chainedWhere)                          {                              _documentQuery.AndAlso();                              _documentQuery.OpenSubclause();                          }                          if (_chainedWhere == false && _insideWhere > 1)                              _documentQuery.OpenSubclause();                            if (expression.Arguments.Count == 3)                              _insideExact = (bool)GetValueFromExpression(expression.Arguments[2]' typeof(bool));                            VisitExpression(((UnaryExpression)expression.Arguments[1]).Operand);                            _insideExact = false;                            if (_chainedWhere == false && _insideWhere > 1)                              _documentQuery.CloseSubclause();                          if (_chainedWhere)                              _documentQuery.CloseSubclause();                          _chainedWhere = true;                          _insideWhere--;                          break;                      }                  case "Select":                      {                          if (expression.Arguments[0].Type.GetTypeInfo().IsGenericType &&                              (expression.Arguments[0].Type.GetGenericTypeDefinition() == typeof(IQueryable<>) ||                              expression.Arguments[0].Type.GetGenericTypeDefinition() == typeof(IOrderedQueryable<>) ||                              expression.Arguments[0].Type.GetGenericTypeDefinition() == typeof(IRavenQueryable<>)) &&                              expression.Arguments[0].Type != expression.Arguments[1].Type)                          {                              _documentQuery.AddRootType(expression.Arguments[0].Type.GetGenericArguments()[0]);                          }                            if (ExpressionHasNestedLambda(expression' out var lambdaExpression))                          {                              CheckForLetOrLoadFromSelect(expression' lambdaExpression);                          }                            _isSelectArg = true;                          VisitExpression(expression.Arguments[0]);                            _isSelectArg = false;                            var operand = ((UnaryExpression)expression.Arguments[1]).Operand;                            if (_documentQuery.IsDynamicMapReduce)                          {                              VisitSelectAfterGroupBy(operand' _groupByElementSelector);                              _groupByElementSelector = null;                          }                          else if (_selectLoad)                          {                              AddFromAlias(lambdaExpression.Parameters[0].Name);                              _selectLoad = false;                          }                            else                          {                              _insideSelect++;                              VisitSelect(operand);                              _insideSelect--;                          }                          break;                      }                  case "Skip":                      {                          VisitExpression(expression.Arguments[0]);                          VisitSkip(((ConstantExpression)expression.Arguments[1]));                          break;                      }                  case "Take":                      {                          VisitExpression(expression.Arguments[0]);                          VisitTake(((ConstantExpression)expression.Arguments[1]));                          break;                      }                  case "First":                  case "FirstOrDefault":                      {                          VisitExpression(expression.Arguments[0]);                          if (expression.Arguments.Count == 2)                          {                              if (_chainedWhere)                                  _documentQuery.AndAlso();                              VisitExpression(((UnaryExpression)expression.Arguments[1]).Operand);                          }                            if (expression.Method.Name == "First")                          {                              VisitFirst();                          }                          else                          {                              VisitFirstOrDefault();                          }                          _chainedWhere = _chainedWhere || expression.Arguments.Count == 2;                          break;                      }                  case "Single":                  case "SingleOrDefault":                      {                          VisitExpression(expression.Arguments[0]);                          if (expression.Arguments.Count == 2)                          {                              if (_chainedWhere)                                  _documentQuery.AndAlso();                                VisitExpression(((UnaryExpression)expression.Arguments[1]).Operand);                          }                            if (expression.Method.Name == "Single")                          {                              VisitSingle();                          }                          else                          {                              VisitSingleOrDefault();                          }                          _chainedWhere = _chainedWhere || expression.Arguments.Count == 2;                          break;                      }                  case "All":                      {                          VisitExpression(expression.Arguments[0]);                          VisitAll((Expression<Func<T' bool>>)((UnaryExpression)expression.Arguments[1]).Operand);                          break;                      }                  case "Any":                      {                          VisitExpression(expression.Arguments[0]);                          if (expression.Arguments.Count == 2)                          {                              if (_chainedWhere)                                  _documentQuery.AndAlso();                              VisitExpression(((UnaryExpression)expression.Arguments[1]).Operand);                          }                            VisitAny();                          break;                      }                  case "Count":                      {                          VisitExpression(expression.Arguments[0]);                          if (expression.Arguments.Count == 2)                          {                              if (_chainedWhere)                                  _documentQuery.AndAlso();                              VisitExpression(((UnaryExpression)expression.Arguments[1]).Operand);                          }                            VisitCount();                          break;                      }                  case "LongCount":                      {                          VisitExpression(expression.Arguments[0]);                          if (expression.Arguments.Count == 2)                          {                              if (_chainedWhere)                                  _documentQuery.AndAlso();                              VisitExpression(((UnaryExpression)expression.Arguments[1]).Operand);                          }                            VisitLongCount();                          break;                      }                  case "Distinct":                      if (expression.Arguments.Count == 1)                      {                          _documentQuery.Distinct();                          VisitExpression(expression.Arguments[0]);                          break;                      }                      throw new NotSupportedException("Method not supported: Distinct(IEqualityComparer<T>)");                  case "OrderBy":                  case "ThenBy":                  case "ThenByDescending":                  case "OrderByDescending":                      VisitExpression(expression.Arguments[0]);                      VisitOrderBy((LambdaExpression)((UnaryExpression)expression.Arguments[1]).Operand'                                   expression.Method.Name.EndsWith("Descending"));                      break;                  case "GroupBy":                      EnsureValidDynamicGroupByMethod("GroupBy");                        if (expression.Arguments.Count == 5) // GroupBy(x => keySelector' x => elementSelector' x => resultSelector' IEqualityComparer)                          throw new NotSupportedException("Dynamic map-reduce queries does not support a custom equality comparer");                        VisitExpression(expression.Arguments[0]);                      VisitGroupBy(((UnaryExpression)expression.Arguments[1]).Operand' GroupByArrayBehavior.NotApplicable);                        if (expression.Arguments.Count >= 3)                      {                          var lambdaExpression = ((UnaryExpression)expression.Arguments[2]).Operand as LambdaExpression;                            if (lambdaExpression == null)                              throw new NotSupportedException("Expected lambda expression as a element selector in GroupBy statement");                            Expression elementSelector = lambdaExpression.Body as MemberExpression; // x => x.Property                            if (elementSelector == null)                              elementSelector = lambdaExpression.Body as MethodCallExpression; // x.Collection.AggregatingFunction(y => y.Property)                            if (expression.Arguments.Count == 3) // GroupBy(x => keySelector' x => elementSelector)                              _groupByElementSelector = elementSelector;                          else if (expression.Arguments.Count == 4) // GroupBy(x => keySelector' x => elementSelector' x => resultSelector)                              VisitSelectAfterGroupBy(((UnaryExpression)expression.Arguments[3]).Operand' elementSelector);                          else                              throw new NotSupportedException($"Not supported syntax of GroupBy. Number of arguments: {expression.Arguments.Count}");                      }                        break;                  default:                      {                          throw new NotSupportedException("Method not supported: " + expression.Method.Name);                      }              }
Magic Number,Raven.Client.Documents.Linq,RavenQueryProviderProcessor<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,VisitQueryableMethodCall,The following statement contains a magic number: switch (expression.Method.Name)              {                  case "OfType":                      if (expression.Arguments[0].Type.GetTypeInfo().IsGenericType)                      {                          var type = expression.Arguments[0].Type.GetGenericArguments()[0];                          _documentQuery.AddRootType(type);                      }                        //set the _ofType variable only if OfType call precedes the projection                      if (_isSelectArg && expression.Type.GetTypeInfo().IsGenericType)                      {                          _ofType = expression.Type.GetGenericArguments()[0];                      }                        VisitExpression(expression.Arguments[0]);                      break;                  case "Where":                      {                          _insideWhere++;                          VisitExpression(expression.Arguments[0]);                          if (_chainedWhere)                          {                              _documentQuery.AndAlso();                              _documentQuery.OpenSubclause();                          }                          if (_chainedWhere == false && _insideWhere > 1)                              _documentQuery.OpenSubclause();                            if (expression.Arguments.Count == 3)                              _insideExact = (bool)GetValueFromExpression(expression.Arguments[2]' typeof(bool));                            VisitExpression(((UnaryExpression)expression.Arguments[1]).Operand);                            _insideExact = false;                            if (_chainedWhere == false && _insideWhere > 1)                              _documentQuery.CloseSubclause();                          if (_chainedWhere)                              _documentQuery.CloseSubclause();                          _chainedWhere = true;                          _insideWhere--;                          break;                      }                  case "Select":                      {                          if (expression.Arguments[0].Type.GetTypeInfo().IsGenericType &&                              (expression.Arguments[0].Type.GetGenericTypeDefinition() == typeof(IQueryable<>) ||                              expression.Arguments[0].Type.GetGenericTypeDefinition() == typeof(IOrderedQueryable<>) ||                              expression.Arguments[0].Type.GetGenericTypeDefinition() == typeof(IRavenQueryable<>)) &&                              expression.Arguments[0].Type != expression.Arguments[1].Type)                          {                              _documentQuery.AddRootType(expression.Arguments[0].Type.GetGenericArguments()[0]);                          }                            if (ExpressionHasNestedLambda(expression' out var lambdaExpression))                          {                              CheckForLetOrLoadFromSelect(expression' lambdaExpression);                          }                            _isSelectArg = true;                          VisitExpression(expression.Arguments[0]);                            _isSelectArg = false;                            var operand = ((UnaryExpression)expression.Arguments[1]).Operand;                            if (_documentQuery.IsDynamicMapReduce)                          {                              VisitSelectAfterGroupBy(operand' _groupByElementSelector);                              _groupByElementSelector = null;                          }                          else if (_selectLoad)                          {                              AddFromAlias(lambdaExpression.Parameters[0].Name);                              _selectLoad = false;                          }                            else                          {                              _insideSelect++;                              VisitSelect(operand);                              _insideSelect--;                          }                          break;                      }                  case "Skip":                      {                          VisitExpression(expression.Arguments[0]);                          VisitSkip(((ConstantExpression)expression.Arguments[1]));                          break;                      }                  case "Take":                      {                          VisitExpression(expression.Arguments[0]);                          VisitTake(((ConstantExpression)expression.Arguments[1]));                          break;                      }                  case "First":                  case "FirstOrDefault":                      {                          VisitExpression(expression.Arguments[0]);                          if (expression.Arguments.Count == 2)                          {                              if (_chainedWhere)                                  _documentQuery.AndAlso();                              VisitExpression(((UnaryExpression)expression.Arguments[1]).Operand);                          }                            if (expression.Method.Name == "First")                          {                              VisitFirst();                          }                          else                          {                              VisitFirstOrDefault();                          }                          _chainedWhere = _chainedWhere || expression.Arguments.Count == 2;                          break;                      }                  case "Single":                  case "SingleOrDefault":                      {                          VisitExpression(expression.Arguments[0]);                          if (expression.Arguments.Count == 2)                          {                              if (_chainedWhere)                                  _documentQuery.AndAlso();                                VisitExpression(((UnaryExpression)expression.Arguments[1]).Operand);                          }                            if (expression.Method.Name == "Single")                          {                              VisitSingle();                          }                          else                          {                              VisitSingleOrDefault();                          }                          _chainedWhere = _chainedWhere || expression.Arguments.Count == 2;                          break;                      }                  case "All":                      {                          VisitExpression(expression.Arguments[0]);                          VisitAll((Expression<Func<T' bool>>)((UnaryExpression)expression.Arguments[1]).Operand);                          break;                      }                  case "Any":                      {                          VisitExpression(expression.Arguments[0]);                          if (expression.Arguments.Count == 2)                          {                              if (_chainedWhere)                                  _documentQuery.AndAlso();                              VisitExpression(((UnaryExpression)expression.Arguments[1]).Operand);                          }                            VisitAny();                          break;                      }                  case "Count":                      {                          VisitExpression(expression.Arguments[0]);                          if (expression.Arguments.Count == 2)                          {                              if (_chainedWhere)                                  _documentQuery.AndAlso();                              VisitExpression(((UnaryExpression)expression.Arguments[1]).Operand);                          }                            VisitCount();                          break;                      }                  case "LongCount":                      {                          VisitExpression(expression.Arguments[0]);                          if (expression.Arguments.Count == 2)                          {                              if (_chainedWhere)                                  _documentQuery.AndAlso();                              VisitExpression(((UnaryExpression)expression.Arguments[1]).Operand);                          }                            VisitLongCount();                          break;                      }                  case "Distinct":                      if (expression.Arguments.Count == 1)                      {                          _documentQuery.Distinct();                          VisitExpression(expression.Arguments[0]);                          break;                      }                      throw new NotSupportedException("Method not supported: Distinct(IEqualityComparer<T>)");                  case "OrderBy":                  case "ThenBy":                  case "ThenByDescending":                  case "OrderByDescending":                      VisitExpression(expression.Arguments[0]);                      VisitOrderBy((LambdaExpression)((UnaryExpression)expression.Arguments[1]).Operand'                                   expression.Method.Name.EndsWith("Descending"));                      break;                  case "GroupBy":                      EnsureValidDynamicGroupByMethod("GroupBy");                        if (expression.Arguments.Count == 5) // GroupBy(x => keySelector' x => elementSelector' x => resultSelector' IEqualityComparer)                          throw new NotSupportedException("Dynamic map-reduce queries does not support a custom equality comparer");                        VisitExpression(expression.Arguments[0]);                      VisitGroupBy(((UnaryExpression)expression.Arguments[1]).Operand' GroupByArrayBehavior.NotApplicable);                        if (expression.Arguments.Count >= 3)                      {                          var lambdaExpression = ((UnaryExpression)expression.Arguments[2]).Operand as LambdaExpression;                            if (lambdaExpression == null)                              throw new NotSupportedException("Expected lambda expression as a element selector in GroupBy statement");                            Expression elementSelector = lambdaExpression.Body as MemberExpression; // x => x.Property                            if (elementSelector == null)                              elementSelector = lambdaExpression.Body as MethodCallExpression; // x.Collection.AggregatingFunction(y => y.Property)                            if (expression.Arguments.Count == 3) // GroupBy(x => keySelector' x => elementSelector)                              _groupByElementSelector = elementSelector;                          else if (expression.Arguments.Count == 4) // GroupBy(x => keySelector' x => elementSelector' x => resultSelector)                              VisitSelectAfterGroupBy(((UnaryExpression)expression.Arguments[3]).Operand' elementSelector);                          else                              throw new NotSupportedException($"Not supported syntax of GroupBy. Number of arguments: {expression.Arguments.Count}");                      }                        break;                  default:                      {                          throw new NotSupportedException("Method not supported: " + expression.Method.Name);                      }              }
Magic Number,Raven.Client.Documents.Linq,RavenQueryProviderProcessor<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,VisitQueryableMethodCall,The following statement contains a magic number: switch (expression.Method.Name)              {                  case "OfType":                      if (expression.Arguments[0].Type.GetTypeInfo().IsGenericType)                      {                          var type = expression.Arguments[0].Type.GetGenericArguments()[0];                          _documentQuery.AddRootType(type);                      }                        //set the _ofType variable only if OfType call precedes the projection                      if (_isSelectArg && expression.Type.GetTypeInfo().IsGenericType)                      {                          _ofType = expression.Type.GetGenericArguments()[0];                      }                        VisitExpression(expression.Arguments[0]);                      break;                  case "Where":                      {                          _insideWhere++;                          VisitExpression(expression.Arguments[0]);                          if (_chainedWhere)                          {                              _documentQuery.AndAlso();                              _documentQuery.OpenSubclause();                          }                          if (_chainedWhere == false && _insideWhere > 1)                              _documentQuery.OpenSubclause();                            if (expression.Arguments.Count == 3)                              _insideExact = (bool)GetValueFromExpression(expression.Arguments[2]' typeof(bool));                            VisitExpression(((UnaryExpression)expression.Arguments[1]).Operand);                            _insideExact = false;                            if (_chainedWhere == false && _insideWhere > 1)                              _documentQuery.CloseSubclause();                          if (_chainedWhere)                              _documentQuery.CloseSubclause();                          _chainedWhere = true;                          _insideWhere--;                          break;                      }                  case "Select":                      {                          if (expression.Arguments[0].Type.GetTypeInfo().IsGenericType &&                              (expression.Arguments[0].Type.GetGenericTypeDefinition() == typeof(IQueryable<>) ||                              expression.Arguments[0].Type.GetGenericTypeDefinition() == typeof(IOrderedQueryable<>) ||                              expression.Arguments[0].Type.GetGenericTypeDefinition() == typeof(IRavenQueryable<>)) &&                              expression.Arguments[0].Type != expression.Arguments[1].Type)                          {                              _documentQuery.AddRootType(expression.Arguments[0].Type.GetGenericArguments()[0]);                          }                            if (ExpressionHasNestedLambda(expression' out var lambdaExpression))                          {                              CheckForLetOrLoadFromSelect(expression' lambdaExpression);                          }                            _isSelectArg = true;                          VisitExpression(expression.Arguments[0]);                            _isSelectArg = false;                            var operand = ((UnaryExpression)expression.Arguments[1]).Operand;                            if (_documentQuery.IsDynamicMapReduce)                          {                              VisitSelectAfterGroupBy(operand' _groupByElementSelector);                              _groupByElementSelector = null;                          }                          else if (_selectLoad)                          {                              AddFromAlias(lambdaExpression.Parameters[0].Name);                              _selectLoad = false;                          }                            else                          {                              _insideSelect++;                              VisitSelect(operand);                              _insideSelect--;                          }                          break;                      }                  case "Skip":                      {                          VisitExpression(expression.Arguments[0]);                          VisitSkip(((ConstantExpression)expression.Arguments[1]));                          break;                      }                  case "Take":                      {                          VisitExpression(expression.Arguments[0]);                          VisitTake(((ConstantExpression)expression.Arguments[1]));                          break;                      }                  case "First":                  case "FirstOrDefault":                      {                          VisitExpression(expression.Arguments[0]);                          if (expression.Arguments.Count == 2)                          {                              if (_chainedWhere)                                  _documentQuery.AndAlso();                              VisitExpression(((UnaryExpression)expression.Arguments[1]).Operand);                          }                            if (expression.Method.Name == "First")                          {                              VisitFirst();                          }                          else                          {                              VisitFirstOrDefault();                          }                          _chainedWhere = _chainedWhere || expression.Arguments.Count == 2;                          break;                      }                  case "Single":                  case "SingleOrDefault":                      {                          VisitExpression(expression.Arguments[0]);                          if (expression.Arguments.Count == 2)                          {                              if (_chainedWhere)                                  _documentQuery.AndAlso();                                VisitExpression(((UnaryExpression)expression.Arguments[1]).Operand);                          }                            if (expression.Method.Name == "Single")                          {                              VisitSingle();                          }                          else                          {                              VisitSingleOrDefault();                          }                          _chainedWhere = _chainedWhere || expression.Arguments.Count == 2;                          break;                      }                  case "All":                      {                          VisitExpression(expression.Arguments[0]);                          VisitAll((Expression<Func<T' bool>>)((UnaryExpression)expression.Arguments[1]).Operand);                          break;                      }                  case "Any":                      {                          VisitExpression(expression.Arguments[0]);                          if (expression.Arguments.Count == 2)                          {                              if (_chainedWhere)                                  _documentQuery.AndAlso();                              VisitExpression(((UnaryExpression)expression.Arguments[1]).Operand);                          }                            VisitAny();                          break;                      }                  case "Count":                      {                          VisitExpression(expression.Arguments[0]);                          if (expression.Arguments.Count == 2)                          {                              if (_chainedWhere)                                  _documentQuery.AndAlso();                              VisitExpression(((UnaryExpression)expression.Arguments[1]).Operand);                          }                            VisitCount();                          break;                      }                  case "LongCount":                      {                          VisitExpression(expression.Arguments[0]);                          if (expression.Arguments.Count == 2)                          {                              if (_chainedWhere)                                  _documentQuery.AndAlso();                              VisitExpression(((UnaryExpression)expression.Arguments[1]).Operand);                          }                            VisitLongCount();                          break;                      }                  case "Distinct":                      if (expression.Arguments.Count == 1)                      {                          _documentQuery.Distinct();                          VisitExpression(expression.Arguments[0]);                          break;                      }                      throw new NotSupportedException("Method not supported: Distinct(IEqualityComparer<T>)");                  case "OrderBy":                  case "ThenBy":                  case "ThenByDescending":                  case "OrderByDescending":                      VisitExpression(expression.Arguments[0]);                      VisitOrderBy((LambdaExpression)((UnaryExpression)expression.Arguments[1]).Operand'                                   expression.Method.Name.EndsWith("Descending"));                      break;                  case "GroupBy":                      EnsureValidDynamicGroupByMethod("GroupBy");                        if (expression.Arguments.Count == 5) // GroupBy(x => keySelector' x => elementSelector' x => resultSelector' IEqualityComparer)                          throw new NotSupportedException("Dynamic map-reduce queries does not support a custom equality comparer");                        VisitExpression(expression.Arguments[0]);                      VisitGroupBy(((UnaryExpression)expression.Arguments[1]).Operand' GroupByArrayBehavior.NotApplicable);                        if (expression.Arguments.Count >= 3)                      {                          var lambdaExpression = ((UnaryExpression)expression.Arguments[2]).Operand as LambdaExpression;                            if (lambdaExpression == null)                              throw new NotSupportedException("Expected lambda expression as a element selector in GroupBy statement");                            Expression elementSelector = lambdaExpression.Body as MemberExpression; // x => x.Property                            if (elementSelector == null)                              elementSelector = lambdaExpression.Body as MethodCallExpression; // x.Collection.AggregatingFunction(y => y.Property)                            if (expression.Arguments.Count == 3) // GroupBy(x => keySelector' x => elementSelector)                              _groupByElementSelector = elementSelector;                          else if (expression.Arguments.Count == 4) // GroupBy(x => keySelector' x => elementSelector' x => resultSelector)                              VisitSelectAfterGroupBy(((UnaryExpression)expression.Arguments[3]).Operand' elementSelector);                          else                              throw new NotSupportedException($"Not supported syntax of GroupBy. Number of arguments: {expression.Arguments.Count}");                      }                        break;                  default:                      {                          throw new NotSupportedException("Method not supported: " + expression.Method.Name);                      }              }
Magic Number,Raven.Client.Documents.Linq,RavenQueryProviderProcessor<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,VisitQueryableMethodCall,The following statement contains a magic number: switch (expression.Method.Name)              {                  case "OfType":                      if (expression.Arguments[0].Type.GetTypeInfo().IsGenericType)                      {                          var type = expression.Arguments[0].Type.GetGenericArguments()[0];                          _documentQuery.AddRootType(type);                      }                        //set the _ofType variable only if OfType call precedes the projection                      if (_isSelectArg && expression.Type.GetTypeInfo().IsGenericType)                      {                          _ofType = expression.Type.GetGenericArguments()[0];                      }                        VisitExpression(expression.Arguments[0]);                      break;                  case "Where":                      {                          _insideWhere++;                          VisitExpression(expression.Arguments[0]);                          if (_chainedWhere)                          {                              _documentQuery.AndAlso();                              _documentQuery.OpenSubclause();                          }                          if (_chainedWhere == false && _insideWhere > 1)                              _documentQuery.OpenSubclause();                            if (expression.Arguments.Count == 3)                              _insideExact = (bool)GetValueFromExpression(expression.Arguments[2]' typeof(bool));                            VisitExpression(((UnaryExpression)expression.Arguments[1]).Operand);                            _insideExact = false;                            if (_chainedWhere == false && _insideWhere > 1)                              _documentQuery.CloseSubclause();                          if (_chainedWhere)                              _documentQuery.CloseSubclause();                          _chainedWhere = true;                          _insideWhere--;                          break;                      }                  case "Select":                      {                          if (expression.Arguments[0].Type.GetTypeInfo().IsGenericType &&                              (expression.Arguments[0].Type.GetGenericTypeDefinition() == typeof(IQueryable<>) ||                              expression.Arguments[0].Type.GetGenericTypeDefinition() == typeof(IOrderedQueryable<>) ||                              expression.Arguments[0].Type.GetGenericTypeDefinition() == typeof(IRavenQueryable<>)) &&                              expression.Arguments[0].Type != expression.Arguments[1].Type)                          {                              _documentQuery.AddRootType(expression.Arguments[0].Type.GetGenericArguments()[0]);                          }                            if (ExpressionHasNestedLambda(expression' out var lambdaExpression))                          {                              CheckForLetOrLoadFromSelect(expression' lambdaExpression);                          }                            _isSelectArg = true;                          VisitExpression(expression.Arguments[0]);                            _isSelectArg = false;                            var operand = ((UnaryExpression)expression.Arguments[1]).Operand;                            if (_documentQuery.IsDynamicMapReduce)                          {                              VisitSelectAfterGroupBy(operand' _groupByElementSelector);                              _groupByElementSelector = null;                          }                          else if (_selectLoad)                          {                              AddFromAlias(lambdaExpression.Parameters[0].Name);                              _selectLoad = false;                          }                            else                          {                              _insideSelect++;                              VisitSelect(operand);                              _insideSelect--;                          }                          break;                      }                  case "Skip":                      {                          VisitExpression(expression.Arguments[0]);                          VisitSkip(((ConstantExpression)expression.Arguments[1]));                          break;                      }                  case "Take":                      {                          VisitExpression(expression.Arguments[0]);                          VisitTake(((ConstantExpression)expression.Arguments[1]));                          break;                      }                  case "First":                  case "FirstOrDefault":                      {                          VisitExpression(expression.Arguments[0]);                          if (expression.Arguments.Count == 2)                          {                              if (_chainedWhere)                                  _documentQuery.AndAlso();                              VisitExpression(((UnaryExpression)expression.Arguments[1]).Operand);                          }                            if (expression.Method.Name == "First")                          {                              VisitFirst();                          }                          else                          {                              VisitFirstOrDefault();                          }                          _chainedWhere = _chainedWhere || expression.Arguments.Count == 2;                          break;                      }                  case "Single":                  case "SingleOrDefault":                      {                          VisitExpression(expression.Arguments[0]);                          if (expression.Arguments.Count == 2)                          {                              if (_chainedWhere)                                  _documentQuery.AndAlso();                                VisitExpression(((UnaryExpression)expression.Arguments[1]).Operand);                          }                            if (expression.Method.Name == "Single")                          {                              VisitSingle();                          }                          else                          {                              VisitSingleOrDefault();                          }                          _chainedWhere = _chainedWhere || expression.Arguments.Count == 2;                          break;                      }                  case "All":                      {                          VisitExpression(expression.Arguments[0]);                          VisitAll((Expression<Func<T' bool>>)((UnaryExpression)expression.Arguments[1]).Operand);                          break;                      }                  case "Any":                      {                          VisitExpression(expression.Arguments[0]);                          if (expression.Arguments.Count == 2)                          {                              if (_chainedWhere)                                  _documentQuery.AndAlso();                              VisitExpression(((UnaryExpression)expression.Arguments[1]).Operand);                          }                            VisitAny();                          break;                      }                  case "Count":                      {                          VisitExpression(expression.Arguments[0]);                          if (expression.Arguments.Count == 2)                          {                              if (_chainedWhere)                                  _documentQuery.AndAlso();                              VisitExpression(((UnaryExpression)expression.Arguments[1]).Operand);                          }                            VisitCount();                          break;                      }                  case "LongCount":                      {                          VisitExpression(expression.Arguments[0]);                          if (expression.Arguments.Count == 2)                          {                              if (_chainedWhere)                                  _documentQuery.AndAlso();                              VisitExpression(((UnaryExpression)expression.Arguments[1]).Operand);                          }                            VisitLongCount();                          break;                      }                  case "Distinct":                      if (expression.Arguments.Count == 1)                      {                          _documentQuery.Distinct();                          VisitExpression(expression.Arguments[0]);                          break;                      }                      throw new NotSupportedException("Method not supported: Distinct(IEqualityComparer<T>)");                  case "OrderBy":                  case "ThenBy":                  case "ThenByDescending":                  case "OrderByDescending":                      VisitExpression(expression.Arguments[0]);                      VisitOrderBy((LambdaExpression)((UnaryExpression)expression.Arguments[1]).Operand'                                   expression.Method.Name.EndsWith("Descending"));                      break;                  case "GroupBy":                      EnsureValidDynamicGroupByMethod("GroupBy");                        if (expression.Arguments.Count == 5) // GroupBy(x => keySelector' x => elementSelector' x => resultSelector' IEqualityComparer)                          throw new NotSupportedException("Dynamic map-reduce queries does not support a custom equality comparer");                        VisitExpression(expression.Arguments[0]);                      VisitGroupBy(((UnaryExpression)expression.Arguments[1]).Operand' GroupByArrayBehavior.NotApplicable);                        if (expression.Arguments.Count >= 3)                      {                          var lambdaExpression = ((UnaryExpression)expression.Arguments[2]).Operand as LambdaExpression;                            if (lambdaExpression == null)                              throw new NotSupportedException("Expected lambda expression as a element selector in GroupBy statement");                            Expression elementSelector = lambdaExpression.Body as MemberExpression; // x => x.Property                            if (elementSelector == null)                              elementSelector = lambdaExpression.Body as MethodCallExpression; // x.Collection.AggregatingFunction(y => y.Property)                            if (expression.Arguments.Count == 3) // GroupBy(x => keySelector' x => elementSelector)                              _groupByElementSelector = elementSelector;                          else if (expression.Arguments.Count == 4) // GroupBy(x => keySelector' x => elementSelector' x => resultSelector)                              VisitSelectAfterGroupBy(((UnaryExpression)expression.Arguments[3]).Operand' elementSelector);                          else                              throw new NotSupportedException($"Not supported syntax of GroupBy. Number of arguments: {expression.Arguments.Count}");                      }                        break;                  default:                      {                          throw new NotSupportedException("Method not supported: " + expression.Method.Name);                      }              }
Magic Number,Raven.Client.Documents.Linq,RavenQueryProviderProcessor<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,VisitQueryableMethodCall,The following statement contains a magic number: switch (expression.Method.Name)              {                  case "OfType":                      if (expression.Arguments[0].Type.GetTypeInfo().IsGenericType)                      {                          var type = expression.Arguments[0].Type.GetGenericArguments()[0];                          _documentQuery.AddRootType(type);                      }                        //set the _ofType variable only if OfType call precedes the projection                      if (_isSelectArg && expression.Type.GetTypeInfo().IsGenericType)                      {                          _ofType = expression.Type.GetGenericArguments()[0];                      }                        VisitExpression(expression.Arguments[0]);                      break;                  case "Where":                      {                          _insideWhere++;                          VisitExpression(expression.Arguments[0]);                          if (_chainedWhere)                          {                              _documentQuery.AndAlso();                              _documentQuery.OpenSubclause();                          }                          if (_chainedWhere == false && _insideWhere > 1)                              _documentQuery.OpenSubclause();                            if (expression.Arguments.Count == 3)                              _insideExact = (bool)GetValueFromExpression(expression.Arguments[2]' typeof(bool));                            VisitExpression(((UnaryExpression)expression.Arguments[1]).Operand);                            _insideExact = false;                            if (_chainedWhere == false && _insideWhere > 1)                              _documentQuery.CloseSubclause();                          if (_chainedWhere)                              _documentQuery.CloseSubclause();                          _chainedWhere = true;                          _insideWhere--;                          break;                      }                  case "Select":                      {                          if (expression.Arguments[0].Type.GetTypeInfo().IsGenericType &&                              (expression.Arguments[0].Type.GetGenericTypeDefinition() == typeof(IQueryable<>) ||                              expression.Arguments[0].Type.GetGenericTypeDefinition() == typeof(IOrderedQueryable<>) ||                              expression.Arguments[0].Type.GetGenericTypeDefinition() == typeof(IRavenQueryable<>)) &&                              expression.Arguments[0].Type != expression.Arguments[1].Type)                          {                              _documentQuery.AddRootType(expression.Arguments[0].Type.GetGenericArguments()[0]);                          }                            if (ExpressionHasNestedLambda(expression' out var lambdaExpression))                          {                              CheckForLetOrLoadFromSelect(expression' lambdaExpression);                          }                            _isSelectArg = true;                          VisitExpression(expression.Arguments[0]);                            _isSelectArg = false;                            var operand = ((UnaryExpression)expression.Arguments[1]).Operand;                            if (_documentQuery.IsDynamicMapReduce)                          {                              VisitSelectAfterGroupBy(operand' _groupByElementSelector);                              _groupByElementSelector = null;                          }                          else if (_selectLoad)                          {                              AddFromAlias(lambdaExpression.Parameters[0].Name);                              _selectLoad = false;                          }                            else                          {                              _insideSelect++;                              VisitSelect(operand);                              _insideSelect--;                          }                          break;                      }                  case "Skip":                      {                          VisitExpression(expression.Arguments[0]);                          VisitSkip(((ConstantExpression)expression.Arguments[1]));                          break;                      }                  case "Take":                      {                          VisitExpression(expression.Arguments[0]);                          VisitTake(((ConstantExpression)expression.Arguments[1]));                          break;                      }                  case "First":                  case "FirstOrDefault":                      {                          VisitExpression(expression.Arguments[0]);                          if (expression.Arguments.Count == 2)                          {                              if (_chainedWhere)                                  _documentQuery.AndAlso();                              VisitExpression(((UnaryExpression)expression.Arguments[1]).Operand);                          }                            if (expression.Method.Name == "First")                          {                              VisitFirst();                          }                          else                          {                              VisitFirstOrDefault();                          }                          _chainedWhere = _chainedWhere || expression.Arguments.Count == 2;                          break;                      }                  case "Single":                  case "SingleOrDefault":                      {                          VisitExpression(expression.Arguments[0]);                          if (expression.Arguments.Count == 2)                          {                              if (_chainedWhere)                                  _documentQuery.AndAlso();                                VisitExpression(((UnaryExpression)expression.Arguments[1]).Operand);                          }                            if (expression.Method.Name == "Single")                          {                              VisitSingle();                          }                          else                          {                              VisitSingleOrDefault();                          }                          _chainedWhere = _chainedWhere || expression.Arguments.Count == 2;                          break;                      }                  case "All":                      {                          VisitExpression(expression.Arguments[0]);                          VisitAll((Expression<Func<T' bool>>)((UnaryExpression)expression.Arguments[1]).Operand);                          break;                      }                  case "Any":                      {                          VisitExpression(expression.Arguments[0]);                          if (expression.Arguments.Count == 2)                          {                              if (_chainedWhere)                                  _documentQuery.AndAlso();                              VisitExpression(((UnaryExpression)expression.Arguments[1]).Operand);                          }                            VisitAny();                          break;                      }                  case "Count":                      {                          VisitExpression(expression.Arguments[0]);                          if (expression.Arguments.Count == 2)                          {                              if (_chainedWhere)                                  _documentQuery.AndAlso();                              VisitExpression(((UnaryExpression)expression.Arguments[1]).Operand);                          }                            VisitCount();                          break;                      }                  case "LongCount":                      {                          VisitExpression(expression.Arguments[0]);                          if (expression.Arguments.Count == 2)                          {                              if (_chainedWhere)                                  _documentQuery.AndAlso();                              VisitExpression(((UnaryExpression)expression.Arguments[1]).Operand);                          }                            VisitLongCount();                          break;                      }                  case "Distinct":                      if (expression.Arguments.Count == 1)                      {                          _documentQuery.Distinct();                          VisitExpression(expression.Arguments[0]);                          break;                      }                      throw new NotSupportedException("Method not supported: Distinct(IEqualityComparer<T>)");                  case "OrderBy":                  case "ThenBy":                  case "ThenByDescending":                  case "OrderByDescending":                      VisitExpression(expression.Arguments[0]);                      VisitOrderBy((LambdaExpression)((UnaryExpression)expression.Arguments[1]).Operand'                                   expression.Method.Name.EndsWith("Descending"));                      break;                  case "GroupBy":                      EnsureValidDynamicGroupByMethod("GroupBy");                        if (expression.Arguments.Count == 5) // GroupBy(x => keySelector' x => elementSelector' x => resultSelector' IEqualityComparer)                          throw new NotSupportedException("Dynamic map-reduce queries does not support a custom equality comparer");                        VisitExpression(expression.Arguments[0]);                      VisitGroupBy(((UnaryExpression)expression.Arguments[1]).Operand' GroupByArrayBehavior.NotApplicable);                        if (expression.Arguments.Count >= 3)                      {                          var lambdaExpression = ((UnaryExpression)expression.Arguments[2]).Operand as LambdaExpression;                            if (lambdaExpression == null)                              throw new NotSupportedException("Expected lambda expression as a element selector in GroupBy statement");                            Expression elementSelector = lambdaExpression.Body as MemberExpression; // x => x.Property                            if (elementSelector == null)                              elementSelector = lambdaExpression.Body as MethodCallExpression; // x.Collection.AggregatingFunction(y => y.Property)                            if (expression.Arguments.Count == 3) // GroupBy(x => keySelector' x => elementSelector)                              _groupByElementSelector = elementSelector;                          else if (expression.Arguments.Count == 4) // GroupBy(x => keySelector' x => elementSelector' x => resultSelector)                              VisitSelectAfterGroupBy(((UnaryExpression)expression.Arguments[3]).Operand' elementSelector);                          else                              throw new NotSupportedException($"Not supported syntax of GroupBy. Number of arguments: {expression.Arguments.Count}");                      }                        break;                  default:                      {                          throw new NotSupportedException("Method not supported: " + expression.Method.Name);                      }              }
Magic Number,Raven.Client.Documents.Linq,RavenQueryProviderProcessor<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,VisitQueryableMethodCall,The following statement contains a magic number: switch (expression.Method.Name)              {                  case "OfType":                      if (expression.Arguments[0].Type.GetTypeInfo().IsGenericType)                      {                          var type = expression.Arguments[0].Type.GetGenericArguments()[0];                          _documentQuery.AddRootType(type);                      }                        //set the _ofType variable only if OfType call precedes the projection                      if (_isSelectArg && expression.Type.GetTypeInfo().IsGenericType)                      {                          _ofType = expression.Type.GetGenericArguments()[0];                      }                        VisitExpression(expression.Arguments[0]);                      break;                  case "Where":                      {                          _insideWhere++;                          VisitExpression(expression.Arguments[0]);                          if (_chainedWhere)                          {                              _documentQuery.AndAlso();                              _documentQuery.OpenSubclause();                          }                          if (_chainedWhere == false && _insideWhere > 1)                              _documentQuery.OpenSubclause();                            if (expression.Arguments.Count == 3)                              _insideExact = (bool)GetValueFromExpression(expression.Arguments[2]' typeof(bool));                            VisitExpression(((UnaryExpression)expression.Arguments[1]).Operand);                            _insideExact = false;                            if (_chainedWhere == false && _insideWhere > 1)                              _documentQuery.CloseSubclause();                          if (_chainedWhere)                              _documentQuery.CloseSubclause();                          _chainedWhere = true;                          _insideWhere--;                          break;                      }                  case "Select":                      {                          if (expression.Arguments[0].Type.GetTypeInfo().IsGenericType &&                              (expression.Arguments[0].Type.GetGenericTypeDefinition() == typeof(IQueryable<>) ||                              expression.Arguments[0].Type.GetGenericTypeDefinition() == typeof(IOrderedQueryable<>) ||                              expression.Arguments[0].Type.GetGenericTypeDefinition() == typeof(IRavenQueryable<>)) &&                              expression.Arguments[0].Type != expression.Arguments[1].Type)                          {                              _documentQuery.AddRootType(expression.Arguments[0].Type.GetGenericArguments()[0]);                          }                            if (ExpressionHasNestedLambda(expression' out var lambdaExpression))                          {                              CheckForLetOrLoadFromSelect(expression' lambdaExpression);                          }                            _isSelectArg = true;                          VisitExpression(expression.Arguments[0]);                            _isSelectArg = false;                            var operand = ((UnaryExpression)expression.Arguments[1]).Operand;                            if (_documentQuery.IsDynamicMapReduce)                          {                              VisitSelectAfterGroupBy(operand' _groupByElementSelector);                              _groupByElementSelector = null;                          }                          else if (_selectLoad)                          {                              AddFromAlias(lambdaExpression.Parameters[0].Name);                              _selectLoad = false;                          }                            else                          {                              _insideSelect++;                              VisitSelect(operand);                              _insideSelect--;                          }                          break;                      }                  case "Skip":                      {                          VisitExpression(expression.Arguments[0]);                          VisitSkip(((ConstantExpression)expression.Arguments[1]));                          break;                      }                  case "Take":                      {                          VisitExpression(expression.Arguments[0]);                          VisitTake(((ConstantExpression)expression.Arguments[1]));                          break;                      }                  case "First":                  case "FirstOrDefault":                      {                          VisitExpression(expression.Arguments[0]);                          if (expression.Arguments.Count == 2)                          {                              if (_chainedWhere)                                  _documentQuery.AndAlso();                              VisitExpression(((UnaryExpression)expression.Arguments[1]).Operand);                          }                            if (expression.Method.Name == "First")                          {                              VisitFirst();                          }                          else                          {                              VisitFirstOrDefault();                          }                          _chainedWhere = _chainedWhere || expression.Arguments.Count == 2;                          break;                      }                  case "Single":                  case "SingleOrDefault":                      {                          VisitExpression(expression.Arguments[0]);                          if (expression.Arguments.Count == 2)                          {                              if (_chainedWhere)                                  _documentQuery.AndAlso();                                VisitExpression(((UnaryExpression)expression.Arguments[1]).Operand);                          }                            if (expression.Method.Name == "Single")                          {                              VisitSingle();                          }                          else                          {                              VisitSingleOrDefault();                          }                          _chainedWhere = _chainedWhere || expression.Arguments.Count == 2;                          break;                      }                  case "All":                      {                          VisitExpression(expression.Arguments[0]);                          VisitAll((Expression<Func<T' bool>>)((UnaryExpression)expression.Arguments[1]).Operand);                          break;                      }                  case "Any":                      {                          VisitExpression(expression.Arguments[0]);                          if (expression.Arguments.Count == 2)                          {                              if (_chainedWhere)                                  _documentQuery.AndAlso();                              VisitExpression(((UnaryExpression)expression.Arguments[1]).Operand);                          }                            VisitAny();                          break;                      }                  case "Count":                      {                          VisitExpression(expression.Arguments[0]);                          if (expression.Arguments.Count == 2)                          {                              if (_chainedWhere)                                  _documentQuery.AndAlso();                              VisitExpression(((UnaryExpression)expression.Arguments[1]).Operand);                          }                            VisitCount();                          break;                      }                  case "LongCount":                      {                          VisitExpression(expression.Arguments[0]);                          if (expression.Arguments.Count == 2)                          {                              if (_chainedWhere)                                  _documentQuery.AndAlso();                              VisitExpression(((UnaryExpression)expression.Arguments[1]).Operand);                          }                            VisitLongCount();                          break;                      }                  case "Distinct":                      if (expression.Arguments.Count == 1)                      {                          _documentQuery.Distinct();                          VisitExpression(expression.Arguments[0]);                          break;                      }                      throw new NotSupportedException("Method not supported: Distinct(IEqualityComparer<T>)");                  case "OrderBy":                  case "ThenBy":                  case "ThenByDescending":                  case "OrderByDescending":                      VisitExpression(expression.Arguments[0]);                      VisitOrderBy((LambdaExpression)((UnaryExpression)expression.Arguments[1]).Operand'                                   expression.Method.Name.EndsWith("Descending"));                      break;                  case "GroupBy":                      EnsureValidDynamicGroupByMethod("GroupBy");                        if (expression.Arguments.Count == 5) // GroupBy(x => keySelector' x => elementSelector' x => resultSelector' IEqualityComparer)                          throw new NotSupportedException("Dynamic map-reduce queries does not support a custom equality comparer");                        VisitExpression(expression.Arguments[0]);                      VisitGroupBy(((UnaryExpression)expression.Arguments[1]).Operand' GroupByArrayBehavior.NotApplicable);                        if (expression.Arguments.Count >= 3)                      {                          var lambdaExpression = ((UnaryExpression)expression.Arguments[2]).Operand as LambdaExpression;                            if (lambdaExpression == null)                              throw new NotSupportedException("Expected lambda expression as a element selector in GroupBy statement");                            Expression elementSelector = lambdaExpression.Body as MemberExpression; // x => x.Property                            if (elementSelector == null)                              elementSelector = lambdaExpression.Body as MethodCallExpression; // x.Collection.AggregatingFunction(y => y.Property)                            if (expression.Arguments.Count == 3) // GroupBy(x => keySelector' x => elementSelector)                              _groupByElementSelector = elementSelector;                          else if (expression.Arguments.Count == 4) // GroupBy(x => keySelector' x => elementSelector' x => resultSelector)                              VisitSelectAfterGroupBy(((UnaryExpression)expression.Arguments[3]).Operand' elementSelector);                          else                              throw new NotSupportedException($"Not supported syntax of GroupBy. Number of arguments: {expression.Arguments.Count}");                      }                        break;                  default:                      {                          throw new NotSupportedException("Method not supported: " + expression.Method.Name);                      }              }
Magic Number,Raven.Client.Documents.Linq,RavenQueryProviderProcessor<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,VisitQueryableMethodCall,The following statement contains a magic number: switch (expression.Method.Name)              {                  case "OfType":                      if (expression.Arguments[0].Type.GetTypeInfo().IsGenericType)                      {                          var type = expression.Arguments[0].Type.GetGenericArguments()[0];                          _documentQuery.AddRootType(type);                      }                        //set the _ofType variable only if OfType call precedes the projection                      if (_isSelectArg && expression.Type.GetTypeInfo().IsGenericType)                      {                          _ofType = expression.Type.GetGenericArguments()[0];                      }                        VisitExpression(expression.Arguments[0]);                      break;                  case "Where":                      {                          _insideWhere++;                          VisitExpression(expression.Arguments[0]);                          if (_chainedWhere)                          {                              _documentQuery.AndAlso();                              _documentQuery.OpenSubclause();                          }                          if (_chainedWhere == false && _insideWhere > 1)                              _documentQuery.OpenSubclause();                            if (expression.Arguments.Count == 3)                              _insideExact = (bool)GetValueFromExpression(expression.Arguments[2]' typeof(bool));                            VisitExpression(((UnaryExpression)expression.Arguments[1]).Operand);                            _insideExact = false;                            if (_chainedWhere == false && _insideWhere > 1)                              _documentQuery.CloseSubclause();                          if (_chainedWhere)                              _documentQuery.CloseSubclause();                          _chainedWhere = true;                          _insideWhere--;                          break;                      }                  case "Select":                      {                          if (expression.Arguments[0].Type.GetTypeInfo().IsGenericType &&                              (expression.Arguments[0].Type.GetGenericTypeDefinition() == typeof(IQueryable<>) ||                              expression.Arguments[0].Type.GetGenericTypeDefinition() == typeof(IOrderedQueryable<>) ||                              expression.Arguments[0].Type.GetGenericTypeDefinition() == typeof(IRavenQueryable<>)) &&                              expression.Arguments[0].Type != expression.Arguments[1].Type)                          {                              _documentQuery.AddRootType(expression.Arguments[0].Type.GetGenericArguments()[0]);                          }                            if (ExpressionHasNestedLambda(expression' out var lambdaExpression))                          {                              CheckForLetOrLoadFromSelect(expression' lambdaExpression);                          }                            _isSelectArg = true;                          VisitExpression(expression.Arguments[0]);                            _isSelectArg = false;                            var operand = ((UnaryExpression)expression.Arguments[1]).Operand;                            if (_documentQuery.IsDynamicMapReduce)                          {                              VisitSelectAfterGroupBy(operand' _groupByElementSelector);                              _groupByElementSelector = null;                          }                          else if (_selectLoad)                          {                              AddFromAlias(lambdaExpression.Parameters[0].Name);                              _selectLoad = false;                          }                            else                          {                              _insideSelect++;                              VisitSelect(operand);                              _insideSelect--;                          }                          break;                      }                  case "Skip":                      {                          VisitExpression(expression.Arguments[0]);                          VisitSkip(((ConstantExpression)expression.Arguments[1]));                          break;                      }                  case "Take":                      {                          VisitExpression(expression.Arguments[0]);                          VisitTake(((ConstantExpression)expression.Arguments[1]));                          break;                      }                  case "First":                  case "FirstOrDefault":                      {                          VisitExpression(expression.Arguments[0]);                          if (expression.Arguments.Count == 2)                          {                              if (_chainedWhere)                                  _documentQuery.AndAlso();                              VisitExpression(((UnaryExpression)expression.Arguments[1]).Operand);                          }                            if (expression.Method.Name == "First")                          {                              VisitFirst();                          }                          else                          {                              VisitFirstOrDefault();                          }                          _chainedWhere = _chainedWhere || expression.Arguments.Count == 2;                          break;                      }                  case "Single":                  case "SingleOrDefault":                      {                          VisitExpression(expression.Arguments[0]);                          if (expression.Arguments.Count == 2)                          {                              if (_chainedWhere)                                  _documentQuery.AndAlso();                                VisitExpression(((UnaryExpression)expression.Arguments[1]).Operand);                          }                            if (expression.Method.Name == "Single")                          {                              VisitSingle();                          }                          else                          {                              VisitSingleOrDefault();                          }                          _chainedWhere = _chainedWhere || expression.Arguments.Count == 2;                          break;                      }                  case "All":                      {                          VisitExpression(expression.Arguments[0]);                          VisitAll((Expression<Func<T' bool>>)((UnaryExpression)expression.Arguments[1]).Operand);                          break;                      }                  case "Any":                      {                          VisitExpression(expression.Arguments[0]);                          if (expression.Arguments.Count == 2)                          {                              if (_chainedWhere)                                  _documentQuery.AndAlso();                              VisitExpression(((UnaryExpression)expression.Arguments[1]).Operand);                          }                            VisitAny();                          break;                      }                  case "Count":                      {                          VisitExpression(expression.Arguments[0]);                          if (expression.Arguments.Count == 2)                          {                              if (_chainedWhere)                                  _documentQuery.AndAlso();                              VisitExpression(((UnaryExpression)expression.Arguments[1]).Operand);                          }                            VisitCount();                          break;                      }                  case "LongCount":                      {                          VisitExpression(expression.Arguments[0]);                          if (expression.Arguments.Count == 2)                          {                              if (_chainedWhere)                                  _documentQuery.AndAlso();                              VisitExpression(((UnaryExpression)expression.Arguments[1]).Operand);                          }                            VisitLongCount();                          break;                      }                  case "Distinct":                      if (expression.Arguments.Count == 1)                      {                          _documentQuery.Distinct();                          VisitExpression(expression.Arguments[0]);                          break;                      }                      throw new NotSupportedException("Method not supported: Distinct(IEqualityComparer<T>)");                  case "OrderBy":                  case "ThenBy":                  case "ThenByDescending":                  case "OrderByDescending":                      VisitExpression(expression.Arguments[0]);                      VisitOrderBy((LambdaExpression)((UnaryExpression)expression.Arguments[1]).Operand'                                   expression.Method.Name.EndsWith("Descending"));                      break;                  case "GroupBy":                      EnsureValidDynamicGroupByMethod("GroupBy");                        if (expression.Arguments.Count == 5) // GroupBy(x => keySelector' x => elementSelector' x => resultSelector' IEqualityComparer)                          throw new NotSupportedException("Dynamic map-reduce queries does not support a custom equality comparer");                        VisitExpression(expression.Arguments[0]);                      VisitGroupBy(((UnaryExpression)expression.Arguments[1]).Operand' GroupByArrayBehavior.NotApplicable);                        if (expression.Arguments.Count >= 3)                      {                          var lambdaExpression = ((UnaryExpression)expression.Arguments[2]).Operand as LambdaExpression;                            if (lambdaExpression == null)                              throw new NotSupportedException("Expected lambda expression as a element selector in GroupBy statement");                            Expression elementSelector = lambdaExpression.Body as MemberExpression; // x => x.Property                            if (elementSelector == null)                              elementSelector = lambdaExpression.Body as MethodCallExpression; // x.Collection.AggregatingFunction(y => y.Property)                            if (expression.Arguments.Count == 3) // GroupBy(x => keySelector' x => elementSelector)                              _groupByElementSelector = elementSelector;                          else if (expression.Arguments.Count == 4) // GroupBy(x => keySelector' x => elementSelector' x => resultSelector)                              VisitSelectAfterGroupBy(((UnaryExpression)expression.Arguments[3]).Operand' elementSelector);                          else                              throw new NotSupportedException($"Not supported syntax of GroupBy. Number of arguments: {expression.Arguments.Count}");                      }                        break;                  default:                      {                          throw new NotSupportedException("Method not supported: " + expression.Method.Name);                      }              }
Magic Number,Raven.Client.Documents.Linq,RavenQueryProviderProcessor<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,VisitQueryableMethodCall,The following statement contains a magic number: switch (expression.Method.Name)              {                  case "OfType":                      if (expression.Arguments[0].Type.GetTypeInfo().IsGenericType)                      {                          var type = expression.Arguments[0].Type.GetGenericArguments()[0];                          _documentQuery.AddRootType(type);                      }                        //set the _ofType variable only if OfType call precedes the projection                      if (_isSelectArg && expression.Type.GetTypeInfo().IsGenericType)                      {                          _ofType = expression.Type.GetGenericArguments()[0];                      }                        VisitExpression(expression.Arguments[0]);                      break;                  case "Where":                      {                          _insideWhere++;                          VisitExpression(expression.Arguments[0]);                          if (_chainedWhere)                          {                              _documentQuery.AndAlso();                              _documentQuery.OpenSubclause();                          }                          if (_chainedWhere == false && _insideWhere > 1)                              _documentQuery.OpenSubclause();                            if (expression.Arguments.Count == 3)                              _insideExact = (bool)GetValueFromExpression(expression.Arguments[2]' typeof(bool));                            VisitExpression(((UnaryExpression)expression.Arguments[1]).Operand);                            _insideExact = false;                            if (_chainedWhere == false && _insideWhere > 1)                              _documentQuery.CloseSubclause();                          if (_chainedWhere)                              _documentQuery.CloseSubclause();                          _chainedWhere = true;                          _insideWhere--;                          break;                      }                  case "Select":                      {                          if (expression.Arguments[0].Type.GetTypeInfo().IsGenericType &&                              (expression.Arguments[0].Type.GetGenericTypeDefinition() == typeof(IQueryable<>) ||                              expression.Arguments[0].Type.GetGenericTypeDefinition() == typeof(IOrderedQueryable<>) ||                              expression.Arguments[0].Type.GetGenericTypeDefinition() == typeof(IRavenQueryable<>)) &&                              expression.Arguments[0].Type != expression.Arguments[1].Type)                          {                              _documentQuery.AddRootType(expression.Arguments[0].Type.GetGenericArguments()[0]);                          }                            if (ExpressionHasNestedLambda(expression' out var lambdaExpression))                          {                              CheckForLetOrLoadFromSelect(expression' lambdaExpression);                          }                            _isSelectArg = true;                          VisitExpression(expression.Arguments[0]);                            _isSelectArg = false;                            var operand = ((UnaryExpression)expression.Arguments[1]).Operand;                            if (_documentQuery.IsDynamicMapReduce)                          {                              VisitSelectAfterGroupBy(operand' _groupByElementSelector);                              _groupByElementSelector = null;                          }                          else if (_selectLoad)                          {                              AddFromAlias(lambdaExpression.Parameters[0].Name);                              _selectLoad = false;                          }                            else                          {                              _insideSelect++;                              VisitSelect(operand);                              _insideSelect--;                          }                          break;                      }                  case "Skip":                      {                          VisitExpression(expression.Arguments[0]);                          VisitSkip(((ConstantExpression)expression.Arguments[1]));                          break;                      }                  case "Take":                      {                          VisitExpression(expression.Arguments[0]);                          VisitTake(((ConstantExpression)expression.Arguments[1]));                          break;                      }                  case "First":                  case "FirstOrDefault":                      {                          VisitExpression(expression.Arguments[0]);                          if (expression.Arguments.Count == 2)                          {                              if (_chainedWhere)                                  _documentQuery.AndAlso();                              VisitExpression(((UnaryExpression)expression.Arguments[1]).Operand);                          }                            if (expression.Method.Name == "First")                          {                              VisitFirst();                          }                          else                          {                              VisitFirstOrDefault();                          }                          _chainedWhere = _chainedWhere || expression.Arguments.Count == 2;                          break;                      }                  case "Single":                  case "SingleOrDefault":                      {                          VisitExpression(expression.Arguments[0]);                          if (expression.Arguments.Count == 2)                          {                              if (_chainedWhere)                                  _documentQuery.AndAlso();                                VisitExpression(((UnaryExpression)expression.Arguments[1]).Operand);                          }                            if (expression.Method.Name == "Single")                          {                              VisitSingle();                          }                          else                          {                              VisitSingleOrDefault();                          }                          _chainedWhere = _chainedWhere || expression.Arguments.Count == 2;                          break;                      }                  case "All":                      {                          VisitExpression(expression.Arguments[0]);                          VisitAll((Expression<Func<T' bool>>)((UnaryExpression)expression.Arguments[1]).Operand);                          break;                      }                  case "Any":                      {                          VisitExpression(expression.Arguments[0]);                          if (expression.Arguments.Count == 2)                          {                              if (_chainedWhere)                                  _documentQuery.AndAlso();                              VisitExpression(((UnaryExpression)expression.Arguments[1]).Operand);                          }                            VisitAny();                          break;                      }                  case "Count":                      {                          VisitExpression(expression.Arguments[0]);                          if (expression.Arguments.Count == 2)                          {                              if (_chainedWhere)                                  _documentQuery.AndAlso();                              VisitExpression(((UnaryExpression)expression.Arguments[1]).Operand);                          }                            VisitCount();                          break;                      }                  case "LongCount":                      {                          VisitExpression(expression.Arguments[0]);                          if (expression.Arguments.Count == 2)                          {                              if (_chainedWhere)                                  _documentQuery.AndAlso();                              VisitExpression(((UnaryExpression)expression.Arguments[1]).Operand);                          }                            VisitLongCount();                          break;                      }                  case "Distinct":                      if (expression.Arguments.Count == 1)                      {                          _documentQuery.Distinct();                          VisitExpression(expression.Arguments[0]);                          break;                      }                      throw new NotSupportedException("Method not supported: Distinct(IEqualityComparer<T>)");                  case "OrderBy":                  case "ThenBy":                  case "ThenByDescending":                  case "OrderByDescending":                      VisitExpression(expression.Arguments[0]);                      VisitOrderBy((LambdaExpression)((UnaryExpression)expression.Arguments[1]).Operand'                                   expression.Method.Name.EndsWith("Descending"));                      break;                  case "GroupBy":                      EnsureValidDynamicGroupByMethod("GroupBy");                        if (expression.Arguments.Count == 5) // GroupBy(x => keySelector' x => elementSelector' x => resultSelector' IEqualityComparer)                          throw new NotSupportedException("Dynamic map-reduce queries does not support a custom equality comparer");                        VisitExpression(expression.Arguments[0]);                      VisitGroupBy(((UnaryExpression)expression.Arguments[1]).Operand' GroupByArrayBehavior.NotApplicable);                        if (expression.Arguments.Count >= 3)                      {                          var lambdaExpression = ((UnaryExpression)expression.Arguments[2]).Operand as LambdaExpression;                            if (lambdaExpression == null)                              throw new NotSupportedException("Expected lambda expression as a element selector in GroupBy statement");                            Expression elementSelector = lambdaExpression.Body as MemberExpression; // x => x.Property                            if (elementSelector == null)                              elementSelector = lambdaExpression.Body as MethodCallExpression; // x.Collection.AggregatingFunction(y => y.Property)                            if (expression.Arguments.Count == 3) // GroupBy(x => keySelector' x => elementSelector)                              _groupByElementSelector = elementSelector;                          else if (expression.Arguments.Count == 4) // GroupBy(x => keySelector' x => elementSelector' x => resultSelector)                              VisitSelectAfterGroupBy(((UnaryExpression)expression.Arguments[3]).Operand' elementSelector);                          else                              throw new NotSupportedException($"Not supported syntax of GroupBy. Number of arguments: {expression.Arguments.Count}");                      }                        break;                  default:                      {                          throw new NotSupportedException("Method not supported: " + expression.Method.Name);                      }              }
Magic Number,Raven.Client.Documents.Linq,RavenQueryProviderProcessor<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,AddCallArgumentsToPath,The following statement contains a magic number: mceArgs.Length == 2
Magic Number,Raven.Client.Documents.Linq,RavenQueryProviderProcessor<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,AddReturnStatementToOutputFunction,The following statement contains a magic number: var alias = _loadTokens[i].Alias.EndsWith("[]")                          ? _loadTokens[i].Alias.Substring(0' _loadTokens[i].Alias.Length - 2)                          : _loadTokens[i].Alias;
Magic Number,Raven.Client.Documents.Linq,RavenQueryProviderProcessor<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,HandleOutputFieldOfDynamicMapReduce,The following statement contains a magic number: switch (fieldExpression.NodeType)              {                  case ExpressionType.Parameter:                      var parameterExpression = (ParameterExpression)fieldExpression; // GroupBy(x => key' x => element' (parameter' g) => new { Name = parameter' ... })                        if (entireExpression.Parameters.Count != 2)                          throw new NotSupportedException($"Lambda with {entireExpression.Parameters.Count} parameters is not supported inside GroupBy");                        if (entireExpression.Parameters[0].Name == parameterExpression.Name)                      {                          _documentQuery.GroupByKey(null' GetSelectPath(fieldMember));                      }                      break;                  case ExpressionType.MemberAccess:                        var keyExpression = (MemberExpression)fieldExpression;                      var name = GetSelectPath(keyExpression);                        if ("Key".Equals(name' StringComparison.Ordinal))                      {                          var projectedName = ExtractProjectedName(fieldMember);                            if (projectedName.Equals("Key"' StringComparison.Ordinal))                              _documentQuery.GroupByKey(null);                          else                              _documentQuery.GroupByKey(null' projectedName);                      }                      else if (name.StartsWith("Key."' StringComparison.Ordinal))                      {                          var compositeGroupBy = name.Split('.');                            if (compositeGroupBy.Length > 2)                              throw new NotSupportedException("Nested fields inside composite GroupBy keys are not supported");                            var fieldName = compositeGroupBy[1];                          var projectedName = ExtractProjectedName(fieldMember);                            _documentQuery.GroupByKey(fieldName' projectedName);                      }                      break;                  case ExpressionType.Call:                      var mapReduceOperationCall = (MethodCallExpression)fieldExpression;                        AddMapReduceField(mapReduceOperationCall' fieldMember' elementSelectorPath);                      break;                  default:                      throw new NotSupportedException($"Unsupported node type inside Select following GroupBy: {fieldExpression.NodeType}");              }
Magic Number,Raven.Client.Documents.Linq,RavenQueryProviderProcessor<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,HandleOutputFieldOfDynamicMapReduce,The following statement contains a magic number: switch (fieldExpression.NodeType)              {                  case ExpressionType.Parameter:                      var parameterExpression = (ParameterExpression)fieldExpression; // GroupBy(x => key' x => element' (parameter' g) => new { Name = parameter' ... })                        if (entireExpression.Parameters.Count != 2)                          throw new NotSupportedException($"Lambda with {entireExpression.Parameters.Count} parameters is not supported inside GroupBy");                        if (entireExpression.Parameters[0].Name == parameterExpression.Name)                      {                          _documentQuery.GroupByKey(null' GetSelectPath(fieldMember));                      }                      break;                  case ExpressionType.MemberAccess:                        var keyExpression = (MemberExpression)fieldExpression;                      var name = GetSelectPath(keyExpression);                        if ("Key".Equals(name' StringComparison.Ordinal))                      {                          var projectedName = ExtractProjectedName(fieldMember);                            if (projectedName.Equals("Key"' StringComparison.Ordinal))                              _documentQuery.GroupByKey(null);                          else                              _documentQuery.GroupByKey(null' projectedName);                      }                      else if (name.StartsWith("Key."' StringComparison.Ordinal))                      {                          var compositeGroupBy = name.Split('.');                            if (compositeGroupBy.Length > 2)                              throw new NotSupportedException("Nested fields inside composite GroupBy keys are not supported");                            var fieldName = compositeGroupBy[1];                          var projectedName = ExtractProjectedName(fieldMember);                            _documentQuery.GroupByKey(fieldName' projectedName);                      }                      break;                  case ExpressionType.Call:                      var mapReduceOperationCall = (MethodCallExpression)fieldExpression;                        AddMapReduceField(mapReduceOperationCall' fieldMember' elementSelectorPath);                      break;                  default:                      throw new NotSupportedException($"Unsupported node type inside Select following GroupBy: {fieldExpression.NodeType}");              }
Magic Number,Raven.Client.Documents.Linq,RavenQueryProviderProcessor<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,VisitSingle,The following statement contains a magic number: _documentQuery.Take(2);
Magic Number,Raven.Client.Documents.Linq,RavenQueryProviderProcessor<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,VisitSingleOrDefault,The following statement contains a magic number: _documentQuery.Take(2);
Magic Number,Raven.Client.Documents.Linq,FieldToFetch,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,GetHashCode,The following statement contains a magic number: return ((Name != null ? StringComparer.OrdinalIgnoreCase.GetHashCode(Name) : 0) * 397) ^ (Alias != null ? StringComparer.Ordinal.GetHashCode(Alias) : 0);
Magic Number,Raven.Client.Documents.Operations,Operation,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Operations\Operation.cs,FetchOperationStatus,The following statement contains a magic number: await Task.Delay(500).ConfigureAwait(false);
Magic Number,Raven.Client.Documents.Operations,Operation,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Operations\Operation.cs,FetchOperationStatus,The following statement contains a magic number: i < 10
Magic Number,Raven.Client.Documents.Operations,PatchRequest,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Operations\PatchRequest.cs,GetHashCode,The following statement contains a magic number: return Values.Keys.Aggregate(Script.GetHashCode()*397' (i' s) => i*397 ^ s.GetHashCode());
Magic Number,Raven.Client.Documents.Operations,PatchRequest,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Operations\PatchRequest.cs,GetHashCode,The following statement contains a magic number: return Values.Keys.Aggregate(Script.GetHashCode()*397' (i' s) => i*397 ^ s.GetHashCode());
Magic Number,Raven.Client.Documents.Operations.Counters,GetCounterValuesCommand,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Operations\Counters\GetCountersOperation.cs,PrepareRequestWithMultipleCounters,The following statement contains a magic number: uniqueNames.Sum(x => x.Length) < 1024
Magic Number,Raven.Client.Documents.Operations.ETL.SQL,SqlConnectionStringParser,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Operations\ETL\SQL\SqlConnectionStringParser.cs,GetDatabaseAndServerFromConnectionString,The following statement contains a magic number: switch (SqlProviderParser.GetSupportedProvider(factoryName))              {                  case SqlProvider.SqlClient:                      database = GetConnectionStringValue(connectionString' new[] { "Initial Catalog"' "Database" });                        if (database == null)                          database = "master";                        server = GetConnectionStringValue(connectionString' new[] { "Data Source"' "Server"' "Address"' "Addr"' "Network Address" });                      break;                  case SqlProvider.Npgsql:                      database = GetConnectionStringValue(connectionString' new[] { "Database" });                      server = GetConnectionStringValue(connectionString' new[] { "Host"' "Data Source"' "Server" });                        var postgrePort = GetConnectionStringValue(connectionString' new[] { "Port" });                        if (string.IsNullOrEmpty(postgrePort))                          server += $":{postgrePort}";                      break;                  case SqlProvider.MySqlClient:                      database = GetConnectionStringValue(connectionString' new[] { "Database"' "Initial Catalog" });                        if (database == null)                          database = "mysql";                        server = GetConnectionStringValue(connectionString' new[] { "Host"' "Server"' "Data Source"' "DataSource"' "Address"' "Addr"' "Network Address" });                        if (server == null)                          server = "localhost";                        var mysqlPort = GetConnectionStringValue(connectionString' new[] { "Port" });                        if (string.IsNullOrEmpty(mysqlPort) == false)                          server += $":{mysqlPort}";                      break;                  case SqlProvider.OracleClient:                        server = null;                      database = null;                        var dataSource = GetConnectionStringValue(connectionString' new[] { "Data Source" });                        if (string.IsNullOrEmpty(dataSource) == false)                      {                          server = GetOracleDataSourceSubValue(dataSource' "HOST");                            if (server != null)                          {                              var port = GetOracleDataSourceSubValue(dataSource' "PORT");                                if (port != null)                                  server += $":{port}";                          }                            database = GetOracleDataSourceSubValue(dataSource' "SERVICE_NAME") ?? GetOracleDataSourceSubValue(dataSource' "SID");                            if (server == null)                          {                              var parts = dataSource.Split(new []{'@'}' 2);                                if (parts.Length == 2)                              {                                  // Data Source=username/password@myserver//instancename;                                  // Data Source=username/password@myserver/myservice:dedicated/instancename;                                    server = parts[1];                              }                              else                              {                                  // Data Source=myOracleDB;                                  server = dataSource;                              }                          }                      }                        break;                                          default:                      throw new NotSupportedException($"Factory '{factoryName}' is not supported");              }
Magic Number,Raven.Client.Documents.Operations.ETL.SQL,SqlConnectionStringParser,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Operations\ETL\SQL\SqlConnectionStringParser.cs,GetDatabaseAndServerFromConnectionString,The following statement contains a magic number: switch (SqlProviderParser.GetSupportedProvider(factoryName))              {                  case SqlProvider.SqlClient:                      database = GetConnectionStringValue(connectionString' new[] { "Initial Catalog"' "Database" });                        if (database == null)                          database = "master";                        server = GetConnectionStringValue(connectionString' new[] { "Data Source"' "Server"' "Address"' "Addr"' "Network Address" });                      break;                  case SqlProvider.Npgsql:                      database = GetConnectionStringValue(connectionString' new[] { "Database" });                      server = GetConnectionStringValue(connectionString' new[] { "Host"' "Data Source"' "Server" });                        var postgrePort = GetConnectionStringValue(connectionString' new[] { "Port" });                        if (string.IsNullOrEmpty(postgrePort))                          server += $":{postgrePort}";                      break;                  case SqlProvider.MySqlClient:                      database = GetConnectionStringValue(connectionString' new[] { "Database"' "Initial Catalog" });                        if (database == null)                          database = "mysql";                        server = GetConnectionStringValue(connectionString' new[] { "Host"' "Server"' "Data Source"' "DataSource"' "Address"' "Addr"' "Network Address" });                        if (server == null)                          server = "localhost";                        var mysqlPort = GetConnectionStringValue(connectionString' new[] { "Port" });                        if (string.IsNullOrEmpty(mysqlPort) == false)                          server += $":{mysqlPort}";                      break;                  case SqlProvider.OracleClient:                        server = null;                      database = null;                        var dataSource = GetConnectionStringValue(connectionString' new[] { "Data Source" });                        if (string.IsNullOrEmpty(dataSource) == false)                      {                          server = GetOracleDataSourceSubValue(dataSource' "HOST");                            if (server != null)                          {                              var port = GetOracleDataSourceSubValue(dataSource' "PORT");                                if (port != null)                                  server += $":{port}";                          }                            database = GetOracleDataSourceSubValue(dataSource' "SERVICE_NAME") ?? GetOracleDataSourceSubValue(dataSource' "SID");                            if (server == null)                          {                              var parts = dataSource.Split(new []{'@'}' 2);                                if (parts.Length == 2)                              {                                  // Data Source=username/password@myserver//instancename;                                  // Data Source=username/password@myserver/myservice:dedicated/instancename;                                    server = parts[1];                              }                              else                              {                                  // Data Source=myOracleDB;                                  server = dataSource;                              }                          }                      }                        break;                                          default:                      throw new NotSupportedException($"Factory '{factoryName}' is not supported");              }
Magic Number,Raven.Client.Documents.Operations.ETL.SQL,SqlConnectionStringParser,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Operations\ETL\SQL\SqlConnectionStringParser.cs,GetConnectionStringValue,The following statement contains a magic number: var keyValue = part.Split(new[] { '=' }' 2);
Magic Number,Raven.Client.Documents.Operations.Expiration,ExpirationConfiguration,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Operations\Expiration\ExpirationConfiguration.cs,GetHashCode,The following statement contains a magic number: return (Disabled.GetHashCode() * 397) ^ DeleteFrequencyInSec.GetHashCode();
Magic Number,Raven.Client.Documents.Operations.Refresh,RefreshConfiguration,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Operations\Refresh\RefreshConfiguration.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ RefreshFrequencyInSec.GetHashCode();
Magic Number,Raven.Client.Documents.Operations.Replication,ExternalReplicationBase,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Operations\Replication\ExternalReplicationBase.cs,GetTaskKey,The following statement contains a magic number: hashCode = (hashCode * 397) ^ CalculateStringHash(ConnectionStringName);
Magic Number,Raven.Client.Documents.Operations.Replication,ExternalReplicationBase,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Operations\Replication\ExternalReplicationBase.cs,GetTaskKey,The following statement contains a magic number: return (hashCode * 397) ^ (ulong)TaskId;
Magic Number,Raven.Client.Documents.Operations.Replication,PullReplicationAsSink,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Operations\Replication\PullReplicationAsSink.cs,GetTaskKey,The following statement contains a magic number: hashCode = (hashCode * 397) ^ CalculateStringHash(CertificateWithPrivateKey);
Magic Number,Raven.Client.Documents.Operations.Replication,PullReplicationAsSink,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Operations\Replication\PullReplicationAsSink.cs,GetTaskKey,The following statement contains a magic number: hashCode = (hashCode * 397) ^ CalculateStringHash(CertificatePassword);
Magic Number,Raven.Client.Documents.Operations.Replication,PullReplicationAsSink,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Operations\Replication\PullReplicationAsSink.cs,GetTaskKey,The following statement contains a magic number: return (hashCode * 397) ^ CalculateStringHash(HubDefinitionName);
Magic Number,Raven.Client.Documents.Operations.Revisions,RevisionsCollectionConfiguration,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Operations\Revisions\RevisionsCollectionConfiguration.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ MinimumRevisionAgeToKeep?.GetHashCode() ?? 0;
Magic Number,Raven.Client.Documents.Operations.Revisions,RevisionsCollectionConfiguration,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Operations\Revisions\RevisionsCollectionConfiguration.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ Disabled.GetHashCode();
Magic Number,Raven.Client.Documents.Operations.Revisions,RevisionsCollectionConfiguration,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Operations\Revisions\RevisionsCollectionConfiguration.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ PurgeOnDelete.GetHashCode();
Magic Number,Raven.Client.Documents.Operations.Revisions,RevisionsConfiguration,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Operations\Revisions\RevisionsConfiguration.cs,GetHashCode,The following statement contains a magic number: hash = hash ^ (collection.Key.GetHashCode() * 397);
Magic Number,Raven.Client.Documents.Operations.Revisions,RevisionsConfiguration,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Operations\Revisions\RevisionsConfiguration.cs,GetHashCode,The following statement contains a magic number: hash = hash ^ (collection.Value.GetHashCode() * 397);
Magic Number,Raven.Client.Documents.Queries.Facets,RangeFacet<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Queries\Facets\RangeFacet.cs,Parse,The following statement contains a magic number: mce.Method.Name == "Any" && mce.Arguments.Count == 2
Magic Number,Raven.Client.Documents.Queries,HashCalculator,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Queries\HashCalculator.cs,Write,The following statement contains a magic number: _buffer.WriteByte(b ? (byte)1 : (byte)2);
Magic Number,Raven.Client.Documents.Queries,HashCalculator,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Queries\HashCalculator.cs,Write,The following statement contains a magic number: _buffer.WriteByte(b.Value ? (byte)1 : (byte)2);
Magic Number,Raven.Client.Documents.Queries,IndexQuery,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Queries\IndexQuery.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ DisableCaching.GetHashCode();
Magic Number,Raven.Client.Documents.Queries,IndexQuery<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Queries\IndexQuery.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (SkipDuplicateChecking ? 1 : 0);
Magic Number,Raven.Client.Documents.Queries,IndexQueryBase<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Queries\IndexQuery.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ PageSize.GetHashCode();
Magic Number,Raven.Client.Documents.Queries,IndexQueryBase<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Queries\IndexQuery.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ Start;
Magic Number,Raven.Client.Documents.Queries,IndexQueryBase<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Queries\IndexQuery.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (Query?.GetHashCode() ?? 0);
Magic Number,Raven.Client.Documents.Queries,IndexQueryBase<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Queries\IndexQuery.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (WaitForNonStaleResultsTimeout != null ? WaitForNonStaleResultsTimeout.GetHashCode() : 0);
Magic Number,Raven.Client.Documents.Replication,ReplicationPerformanceBase,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Replication\OutgoingReplicationPerformanceStats.cs,ReplicationPerformanceBase,The following statement contains a magic number: DurationInMs = Math.Round(duration.TotalMilliseconds' 2);
Magic Number,Raven.Client.Documents.Replication,ReplicationPerformanceOperation,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Replication\ReplicationPerformanceOperation.cs,ReplicationPerformanceOperation,The following statement contains a magic number: DurationInMs = Math.Round(duration.TotalMilliseconds' 2);
Magic Number,Raven.Client.Documents.Session,AsyncDocumentQuery<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\AsyncDocumentQuery.cs,SingleAsync,The following statement contains a magic number: var operation = await ExecuteQueryOperation(2' token).ConfigureAwait(false);
Magic Number,Raven.Client.Documents.Session,AsyncDocumentQuery<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\AsyncDocumentQuery.cs,SingleOrDefaultAsync,The following statement contains a magic number: var operation = await ExecuteQueryOperation(2' token).ConfigureAwait(false);
Magic Number,Raven.Client.Documents.Session,AsyncDocumentSession,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\AsyncDocumentSession.CountersFor.cs,ExecuteAllPendingLazyOperationsAsync,The following statement contains a magic number: await TimeoutManager.WaitFor(TimeSpan.FromMilliseconds(100)' token).ConfigureAwait(false);
Magic Number,Raven.Client.Documents.Session,AsyncDocumentSession,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\AsyncDocumentSession.CountersFor.cs,StreamIntoAsync,The following statement contains a magic number: await command.Result.Stream.CopyToAsync(output' 16 * 1024' token).ConfigureAwait(false);
Magic Number,Raven.Client.Documents.Session,AsyncDocumentSession,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\AsyncDocumentSession.CountersFor.cs,StreamIntoAsync,The following statement contains a magic number: await command.Result.Stream.CopyToAsync(output' 16 * 1024' token).ConfigureAwait(false);
Magic Number,Raven.Client.Documents.Session,DocumentQuery<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\DocumentQuery.cs,Single,The following statement contains a magic number: return ExecuteQueryOperation(2).Single();
Magic Number,Raven.Client.Documents.Session,DocumentQuery<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\DocumentQuery.cs,SingleOrDefault,The following statement contains a magic number: return ExecuteQueryOperation(2).SingleOrDefault();
Magic Number,Raven.Client.Documents.Session,DocumentsChanges,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\DocumentsChanges.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (FieldNewValue?.GetHashCode() ?? 0);
Magic Number,Raven.Client.Documents.Session,DocumentsChanges,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\DocumentsChanges.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (FieldOldType.GetHashCode());
Magic Number,Raven.Client.Documents.Session,DocumentsChanges,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\DocumentsChanges.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (FieldNewType.GetHashCode());
Magic Number,Raven.Client.Documents.Session,DocumentsChanges,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\DocumentsChanges.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (FieldName?.GetHashCode() ?? 0);
Magic Number,Raven.Client.Documents.Session,DocumentsChanges,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\DocumentsChanges.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (FieldPath?.GetHashCode() ?? 0);
Magic Number,Raven.Client.Documents.Session,DocumentsChanges,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\DocumentsChanges.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (Change.GetHashCode());
Magic Number,Raven.Client.Documents.Session,DocumentSession,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\DocumentSession.CountersFor.cs,ExecuteAllPendingLazyOperations,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,Raven.Client.Documents.Session,IncludesUtil,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\IncludesUtil.cs,GetIncludePath,The following statement contains a magic number: result.Addition = result.Addition.Substring(1' result.Addition.Length - 2);
Magic Number,Raven.Client.Documents.Session,IncludesUtil,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\IncludesUtil.cs,GetIncludePath,The following statement contains a magic number: match.Success && match.Groups.Count >= 2
Magic Number,Raven.Client.Documents.Session,InMemoryDocumentSessionOperations,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\InMemoryDocumentSessionOperations.cs,WaitForReplicationAfterSaveChanges,The following statement contains a magic number: var realTimeout = timeout ?? TimeSpan.FromSeconds(15);
Magic Number,Raven.Client.Documents.Session,InMemoryDocumentSessionOperations,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\InMemoryDocumentSessionOperations.cs,WaitForIndexesAfterSaveChanges,The following statement contains a magic number: var realTimeout = timeout ?? TimeSpan.FromSeconds(15);
Magic Number,Raven.Client.Documents.Session.Operations,QueryOperation,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\Operations\QueryOperation.cs,Deserialize,The following statement contains a magic number: projectionField = projectionField.Substring(1' projectionField.Length - 2);
Magic Number,Raven.Client.Documents.Session.Operations,YieldStreamResults,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\Operations\StreamOperation.cs,CheckIfContextNeedsToBeRenewed,The following statement contains a magic number: _docsCountOnCachedRenewSession <= 16 * 1024
Magic Number,Raven.Client.Documents.Session.Operations,YieldStreamResults,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\Operations\StreamOperation.cs,CheckIfContextNeedsToBeRenewed,The following statement contains a magic number: _docsCountOnCachedRenewSession <= 16 * 1024
Magic Number,Raven.Client.Documents.Smuggler,DatabaseSmuggler,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Smuggler\DatabaseSmuggler.cs,ExportAsync,The following statement contains a magic number: return ExportAsync(options' async stream =>              {                  try                  {                      var fileInfo = new FileInfo(toFile);                      var directoryInfo = fileInfo.Directory;                      if (directoryInfo != null && directoryInfo.Exists == false)                          directoryInfo.Create();                        using (var fileStream = fileInfo.OpenWrite())                          await stream.CopyToAsync(fileStream' 8192' token).ConfigureAwait(false);                        tcs.TrySetResult(null);                  }                  catch (Exception e)                  {                      if (Logger.IsOperationsEnabled)                          Logger.Operations("Could not save export file."' e);                        tcs.TrySetException(e);                        if (e is UnauthorizedAccessException || e is DirectoryNotFoundException || e is IOException)                          throw new InvalidOperationException($"Cannot export to selected path {toFile}' please ensure you selected proper filename."' e);                        throw new InvalidOperationException($"Could not save export file {toFile}."' e);                  }              }' tcs.Task' token);
Magic Number,Raven.Client.Documents.Subscriptions,DocumentSubscriptions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Subscriptions\DocumentSubscriptions.cs,Dispose,The following statement contains a magic number: Task.WaitAll(tasks.ToArray()' TimeSpan.FromSeconds(3));
Magic Number,Raven.Client.Documents.Subscriptions,SubscriptionWorkerOptions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Subscriptions\SubscriptionWorkerOptions.cs,SubscriptionWorkerOptions,The following statement contains a magic number: MaxDocsPerBatch = 4096;
Magic Number,Raven.Client.Documents.Subscriptions,SubscriptionWorkerOptions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Subscriptions\SubscriptionWorkerOptions.cs,SubscriptionWorkerOptions,The following statement contains a magic number: TimeToWaitBeforeConnectionRetry = TimeSpan.FromSeconds(5);
Magic Number,Raven.Client.Documents.Subscriptions,SubscriptionWorkerOptions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Subscriptions\SubscriptionWorkerOptions.cs,SubscriptionWorkerOptions,The following statement contains a magic number: MaxErroneousPeriod = TimeSpan.FromMinutes(5);
Magic Number,Raven.Client.Extensions,DictionaryExtensions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Extensions\DictionaryExtensions.cs,GetDictionaryHashCode,The following statement contains a magic number: result = (result * 397) ^ kvp.Key.GetHashCode();
Magic Number,Raven.Client.Extensions,DictionaryExtensions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Extensions\DictionaryExtensions.cs,GetDictionaryHashCode,The following statement contains a magic number: result = (result * 397) ^ (!Equals(kvp.Value' default(TValue)) ? kvp.Value.GetHashCode() : 0);
Magic Number,Raven.Client.Extensions,EnumerableExtension,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Extensions\EnumerableExtension.cs,GetEnumerableHashCode,The following statement contains a magic number: result = (result * 397) ^ kvp.GetHashCode();
Magic Number,Raven.Client.Extensions,ExpressionExtensions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Extensions\ExpressionExtensions.cs,ToPropertyPath,The following statement contains a magic number: return builder.ToString().Trim(propertySeparator' collectionSeparator[0]' collectionSeparator[1]' collectionSeparator[2]);
Magic Number,Raven.Client.Extensions,PropertyPathExpressionVisitor,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Extensions\ExpressionExtensions.cs,VisitMethodCall,The following statement contains a magic number: node.Method.Name != "Select" && node.Arguments.Count != 2
Magic Number,Raven.Client.Extensions,HttpExtensions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Extensions\HttpExtensions.cs,EtagHeaderToChangeVector,The following statement contains a magic number: return responseHeader.Substring(1' responseHeader.Length - 2);
Magic Number,Raven.Client.Extensions,StringExtensions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Extensions\StringExtensions.cs,IsIdentifier,The following statement contains a magic number: length == 0 || length > 256
Magic Number,Raven.Client.Extensions,WhoIsLocking,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Extensions\WhoIsLocking.cs,GetProcessesUsingFile,The following statement contains a magic number: const int ERROR_MORE_DATA = 234;
Magic Number,Raven.Client.Http,ClusterRequestExecutor,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Http\ClusterRequestExecutor.cs,CreateForSingleNode,The following statement contains a magic number: var executor = new ClusterRequestExecutor(certificate' conventions ?? DocumentConventions.Default' initialUrls)              {                  _nodeSelector = new NodeSelector(new Topology                  {                      Etag = -1'                      Nodes = new List<ServerNode>                      {                          new ServerNode                          {                              Url = url                          }                      }                  })'                  TopologyEtag = -2'                  _disableTopologyUpdates = true'                  _disableClientConfigurationUpdates = true              };
Magic Number,Raven.Client.Http,NodeStatus,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Http\ClusterTopology.cs,NodeStatus,The following statement contains a magic number: _timerPeriod = TimeSpan.FromMilliseconds(100);
Magic Number,Raven.Client.Http,NodeStatus,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Http\ClusterTopology.cs,NextTimerPeriod,The following statement contains a magic number: return TimeSpan.FromSeconds(5);
Magic Number,Raven.Client.Http,NodeStatus,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Http\ClusterTopology.cs,NextTimerPeriod,The following statement contains a magic number: _timerPeriod >= TimeSpan.FromSeconds(5)
Magic Number,Raven.Client.Http,NodeStatus,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Http\ClusterTopology.cs,NextTimerPeriod,The following statement contains a magic number: _timerPeriod += TimeSpan.FromMilliseconds(100);
Magic Number,Raven.Client.Http,HttpCache,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Http\HttpCache.cs,FreeSpace,The following statement contains a magic number: var sizeToClear = _totalSize / 2;
Magic Number,Raven.Client.Http,HttpCacheItem,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Http\HttpCache.cs,ReleaseRef,The following statement contains a magic number: Interlocked.CompareExchange(ref _usages' -(1000 * 1000)' 0) != 0
Magic Number,Raven.Client.Http,HttpCacheItem,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Http\HttpCache.cs,ReleaseRef,The following statement contains a magic number: Interlocked.CompareExchange(ref _usages' -(1000 * 1000)' 0) != 0
Magic Number,Raven.Client.Http,NodeSelector,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Http\NodeSelector.cs,GetPreferredNodeWithTopology,The following statement contains a magic number: return (preferredNode.Index' preferredNode.Node' state.Topology?.Etag??-2);
Magic Number,Raven.Client.Http,NodeSelector,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Http\NodeSelector.cs,RecordFastest,The following statement contains a magic number: Interlocked.Increment(ref stateFastest[index]) >= 10
Magic Number,Raven.Client.Http,NodeSelector,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Http\NodeSelector.cs,RecordFastest,The following statement contains a magic number: Interlocked.Increment(ref state.SpeedTestMode) <= state.Nodes.Count * 10
Magic Number,Raven.Client.Http,RequestExecutor,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Http\RequestExecutor.cs,UpdateTopologyCallback,The following statement contains a magic number: time - _lastReturnedResponse <= TimeSpan.FromMinutes(5)
Magic Number,Raven.Client.Http,RequestExecutor,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Http\RequestExecutor.cs,InitializeUpdateTopologyTimer,The following statement contains a magic number: _updateTopologyTimer = new Timer(UpdateTopologyCallback' null' TimeSpan.FromMinutes(5)' TimeSpan.FromMinutes(5));
Magic Number,Raven.Client.Http,RequestExecutor,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Http\RequestExecutor.cs,InitializeUpdateTopologyTimer,The following statement contains a magic number: _updateTopologyTimer = new Timer(UpdateTopologyCallback' null' TimeSpan.FromMinutes(5)' TimeSpan.FromMinutes(5));
Magic Number,Raven.Client.Http,RequestExecutor,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Http\RequestExecutor.cs,RefreshIfNeeded,The following statement contains a magic number: var tasks = new Task[2];
Magic Number,Raven.Client.Http,RequestExecutor,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Http\RequestExecutor.cs,HandleUnsuccessfulResponse,The following statement contains a magic number: switch (response.StatusCode)              {                  case HttpStatusCode.NotFound:                      Cache.SetNotFound(url' AggressiveCaching.Value != null);                      if (command.ResponseType == RavenCommandResponseType.Empty)                          return true;                      else if (command.ResponseType == RavenCommandResponseType.Object)                          command.SetResponse(context' null' fromCache: false);                      else                          command.SetResponseRaw(response' null' context);                      return true;                  case HttpStatusCode.Forbidden:                      var msg = await TryGetResponseOfError(response).ConfigureAwait(false);                      throw new AuthorizationException("Forbidden access to " + chosenNode.Database + "@" + chosenNode.Url + "' " +                          (Certificate == null ? "a certificate is required. " : Certificate.FriendlyName + " does not have permission to access it or is unknown. ") +                          $"Method: {request.Method}' Request: {request.RequestUri}" + Environment.NewLine + msg                          );                  case HttpStatusCode.Gone: // request not relevant for the chosen node - the database has been moved to a different one                      if (shouldRetry == false)                          return false;                        if (nodeIndex != null)                          _nodeSelector.OnFailedRequest(nodeIndex.Value);                        if (command.FailedNodes == null)                          command.FailedNodes = new Dictionary<ServerNode' Exception>();                        if (command.IsFailedWithNode(chosenNode) == false)                          command.FailedNodes[chosenNode] = new UnsuccessfulRequestException($"Request to '{request.RequestUri}' ({request.Method}) is not relevant for this node anymore.");                        var (index' node) = ChooseNodeForRequest(command' sessionInfo);                        if (command.FailedNodes.ContainsKey(node))                      {                          // we tried all the nodes' let's try to update topology and retry one more time                          var success = await UpdateTopologyAsync(chosenNode' 60 * 1000' forceUpdate: true' debugTag: "handle-unsuccessful-response").ConfigureAwait(false);                            if (success == false)                              return false;                            command.FailedNodes.Clear(); // we just updated the topology                          (index' node) = ChooseNodeForRequest(command' sessionInfo);                            await ExecuteAsync(node' index' context' command' shouldRetry: false' sessionInfo: sessionInfo' token: token).ConfigureAwait(false);                          return true;                      }                        await ExecuteAsync(node' index' context' command' shouldRetry: true' sessionInfo: sessionInfo' token: token).ConfigureAwait(false);                      return true;                  case HttpStatusCode.GatewayTimeout:                  case HttpStatusCode.RequestTimeout:                  case HttpStatusCode.BadGateway:                  case HttpStatusCode.ServiceUnavailable:                      return await HandleServerDown(url' chosenNode' nodeIndex' context' command' request' response' null' sessionInfo' shouldRetry' requestContext: null' token: token).ConfigureAwait(false);                  case HttpStatusCode.Conflict:                      await HandleConflict(context' response).ConfigureAwait(false);                      break;                  default:                      command.OnResponseFailure(response);                      await ExceptionDispatcher.Throw(context' response' AdditionalErrorInformation).ConfigureAwait(false);                      break;              }
Magic Number,Raven.Client.Http,RequestExecutor,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Http\RequestExecutor.cs,HandleUnsuccessfulResponse,The following statement contains a magic number: switch (response.StatusCode)              {                  case HttpStatusCode.NotFound:                      Cache.SetNotFound(url' AggressiveCaching.Value != null);                      if (command.ResponseType == RavenCommandResponseType.Empty)                          return true;                      else if (command.ResponseType == RavenCommandResponseType.Object)                          command.SetResponse(context' null' fromCache: false);                      else                          command.SetResponseRaw(response' null' context);                      return true;                  case HttpStatusCode.Forbidden:                      var msg = await TryGetResponseOfError(response).ConfigureAwait(false);                      throw new AuthorizationException("Forbidden access to " + chosenNode.Database + "@" + chosenNode.Url + "' " +                          (Certificate == null ? "a certificate is required. " : Certificate.FriendlyName + " does not have permission to access it or is unknown. ") +                          $"Method: {request.Method}' Request: {request.RequestUri}" + Environment.NewLine + msg                          );                  case HttpStatusCode.Gone: // request not relevant for the chosen node - the database has been moved to a different one                      if (shouldRetry == false)                          return false;                        if (nodeIndex != null)                          _nodeSelector.OnFailedRequest(nodeIndex.Value);                        if (command.FailedNodes == null)                          command.FailedNodes = new Dictionary<ServerNode' Exception>();                        if (command.IsFailedWithNode(chosenNode) == false)                          command.FailedNodes[chosenNode] = new UnsuccessfulRequestException($"Request to '{request.RequestUri}' ({request.Method}) is not relevant for this node anymore.");                        var (index' node) = ChooseNodeForRequest(command' sessionInfo);                        if (command.FailedNodes.ContainsKey(node))                      {                          // we tried all the nodes' let's try to update topology and retry one more time                          var success = await UpdateTopologyAsync(chosenNode' 60 * 1000' forceUpdate: true' debugTag: "handle-unsuccessful-response").ConfigureAwait(false);                            if (success == false)                              return false;                            command.FailedNodes.Clear(); // we just updated the topology                          (index' node) = ChooseNodeForRequest(command' sessionInfo);                            await ExecuteAsync(node' index' context' command' shouldRetry: false' sessionInfo: sessionInfo' token: token).ConfigureAwait(false);                          return true;                      }                        await ExecuteAsync(node' index' context' command' shouldRetry: true' sessionInfo: sessionInfo' token: token).ConfigureAwait(false);                      return true;                  case HttpStatusCode.GatewayTimeout:                  case HttpStatusCode.RequestTimeout:                  case HttpStatusCode.BadGateway:                  case HttpStatusCode.ServiceUnavailable:                      return await HandleServerDown(url' chosenNode' nodeIndex' context' command' request' response' null' sessionInfo' shouldRetry' requestContext: null' token: token).ConfigureAwait(false);                  case HttpStatusCode.Conflict:                      await HandleConflict(context' response).ConfigureAwait(false);                      break;                  default:                      command.OnResponseFailure(response);                      await ExceptionDispatcher.Throw(context' response' AdditionalErrorInformation).ConfigureAwait(false);                      break;              }
Magic Number,Raven.Client.Http,RequestExecutor,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Http\RequestExecutor.cs,ShouldBroadcast,The following statement contains a magic number: TopologyNodes == null ||                   TopologyNodes.Count < 2
Magic Number,Raven.Client.Http,RequestExecutor,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Http\RequestExecutor.cs,UpdateConnectionLimit,The following statement contains a magic number: servicePoint.ConnectionLimit = Math.Max(servicePoint.ConnectionLimit' 1024 * 10);
Magic Number,Raven.Client.Http,RequestExecutor,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Http\RequestExecutor.cs,UpdateConnectionLimit,The following statement contains a magic number: servicePoint.ConnectionLimit = Math.Max(servicePoint.ConnectionLimit' 1024 * 10);
Magic Number,Raven.Client.Http,ServerNode,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Http\ServerNode.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (Database?.GetHashCode() ?? 0);
Magic Number,Raven.Client.Json,BlittablePath,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Json\BlittablePath.cs,EscapeString,The following statement contains a magic number: sb = new StringBuilder(str.Length'str.Length*2);
Magic Number,Raven.Client.Json,BlittablePath,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Json\BlittablePath.cs,IsEscapeChar,The following statement contains a magic number: return _escapeChars[0] == c ||                     _escapeChars[1] == c ||                     _escapeChars[2] == c ||                     _escapeChars[3] == c ||                     _escapeChars[4] == c;
Magic Number,Raven.Client.Json,BlittablePath,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Json\BlittablePath.cs,IsEscapeChar,The following statement contains a magic number: return _escapeChars[0] == c ||                     _escapeChars[1] == c ||                     _escapeChars[2] == c ||                     _escapeChars[3] == c ||                     _escapeChars[4] == c;
Magic Number,Raven.Client.Json,BlittablePath,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Json\BlittablePath.cs,IsEscapeChar,The following statement contains a magic number: return _escapeChars[0] == c ||                     _escapeChars[1] == c ||                     _escapeChars[2] == c ||                     _escapeChars[3] == c ||                     _escapeChars[4] == c;
Magic Number,Raven.Client.Json.Converters,DateTools,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Json\Converters\DateTools.cs,StringToDate,The following statement contains a magic number: date = new DateTime(Convert.ToInt16(dateString.Substring(0' 4))'                      1' 1' 0' 0' 0' 0);
Magic Number,Raven.Client.Json.Converters,DateTools,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Json\Converters\DateTools.cs,StringToDate,The following statement contains a magic number: dateString.Length == 4
Magic Number,Raven.Client.ServerWide,ScriptResolver,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\ServerWide\ConflictSolver.cs,GetHashCode,The following statement contains a magic number: return ((Script != null ? Script.GetHashCode() : 0) * 397) ^ LastModifiedTime.GetHashCode();
Magic Number,Raven.Client.ServerWide,DatabaseRecord,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\ServerWide\DatabaseRecord.cs,AddIndex,The following statement contains a magic number: history.RemoveRange(5' history.Count - 5);
Magic Number,Raven.Client.ServerWide,DatabaseRecord,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\ServerWide\DatabaseRecord.cs,AddIndex,The following statement contains a magic number: history.RemoveRange(5' history.Count - 5);
Magic Number,Raven.Client.ServerWide,DatabaseRecord,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\ServerWide\DatabaseRecord.cs,AddIndex,The following statement contains a magic number: history.Count > 5
Magic Number,Raven.Client.ServerWide,DatabaseRecord,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\ServerWide\DatabaseRecord.cs,EnsureUniqueTaskName,The following statement contains a magic number: int counter = 2;
Magic Number,Raven.Client.ServerWide,PromotableTask,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\ServerWide\DatabaseTopology.cs,GetTaskKey,The following statement contains a magic number: hashCode = (hashCode * 397) ^ CalculateStringHash(_url);
Magic Number,Raven.Client.ServerWide,PromotableTask,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\ServerWide\DatabaseTopology.cs,GetTaskKey,The following statement contains a magic number: return (hashCode * 397) ^ CalculateStringHash(_name);
Magic Number,Raven.Client.ServerWide,ThreadSafeRandom,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\ServerWide\DatabaseTopology.cs,Shuffle,The following statement contains a magic number: return (_random ??= new Random()).Next(-100' 100);
Magic Number,Raven.Client.ServerWide,ThreadSafeRandom,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\ServerWide\DatabaseTopology.cs,Shuffle,The following statement contains a magic number: return (_random ??= new Random()).Next(-100' 100);
Magic Number,Raven.Client.ServerWide.Operations,BuildNumber,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\ServerWide\Operations\BuildNumber.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ BuildVersion;
Magic Number,Raven.Client.ServerWide.Operations,BuildNumber,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\ServerWide\Operations\BuildNumber.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (CommitHash != null ? CommitHash.GetHashCode() : 0);
Magic Number,Raven.Client.ServerWide.Operations,BuildNumber,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\ServerWide\Operations\BuildNumber.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (FullVersion != null ? FullVersion.GetHashCode() : 0);
Magic Number,Raven.Client.ServerWide.Operations,OsInfo,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\ServerWide\Operations\OsInfo.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (FullName != null ? FullName.GetHashCode() : 0);
Magic Number,Raven.Client.ServerWide.Operations,OsInfo,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\ServerWide\Operations\OsInfo.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (Version != null ? Version.GetHashCode() : 0);
Magic Number,Raven.Client.ServerWide.Operations,OsInfo,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\ServerWide\Operations\OsInfo.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (BuildVersion != null ? BuildVersion.GetHashCode() : 0);
Magic Number,Raven.Client.ServerWide.Operations,OsInfo,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\ServerWide\Operations\OsInfo.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ Is64Bit.GetHashCode();
Magic Number,Raven.Client.ServerWide.Tcp,TcpConnectionHeaderMessage,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\ServerWide\Tcp\TcpConnectionHeader.cs,GetOperationTcpVersion,The following statement contains a magic number: switch (operationType)              {                  case OperationTypes.Ping:                  case OperationTypes.None:                      return -1;                  case OperationTypes.Drop:                      return -2;                  case OperationTypes.Subscription:                  case OperationTypes.Replication:                  case OperationTypes.Cluster:                  case OperationTypes.Heartbeats:                  case OperationTypes.TestConnection:                      return OperationsToSupportedProtocolVersions[operationType][index];                  default:                      throw new ArgumentOutOfRangeException(nameof(operationType)' operationType' null);              }
Magic Number,Raven.Client.Util,DictionarySupport,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Util\JavascriptConversionExtensions.cs,HandleMap,The following statement contains a magic number: mce.Arguments.Count < 2 || !(mce.Arguments[1] is LambdaExpression lambda)
Magic Number,Raven.Client.Util,LinqMethodsSupport,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Util\JavascriptConversionExtensions.cs,ConvertToJavascript,The following statement contains a magic number: switch (methodName)                  {                      case "Any":                          {                              if (methodCallExpression.Arguments.Count > 1)                              {                                  newName = "some";                                  break;                              }                                context.PreventDefault();                              context.Visitor.Visit(methodCallExpression.Arguments[0]);                              var writer = context.GetWriter();                              using (writer.Operation(methodCallExpression))                              {                                                                    writer.Write(".length > 0");                                  return;                                                         }                          }                      case "All":                          newName = "every";                          break;                      case "Select":                      case "Sum":                          newName = "map";                          break;                        case "Where":                          newName = "filter";                          break;                      case "IndexOf":                      case "Contains":                          newName = "indexOf";                          break;                      case "Cast":                      case "ToList":                      case "ToArray":                      {                          context.PreventDefault();                          context.Visitor.Visit(methodCallExpression.Arguments[0]);                          return;                      }                        case "Concat":                          newName = "concat";                          break;                        case "Average":                      {                          context.PreventDefault();                          // -- Rewrite expression to Sum() (using second (if available) argument Types) / Count() (using last argument Type)                            var sum = Expression.Call(                              typeof(Enumerable)'                              "Sum"'                              methodCallExpression.Arguments.Count > 1 ?                                  new Type[] { methodCallExpression.Arguments[1].Type.GenericTypeArguments.First() } :                                  new Type[] { }'                              methodCallExpression.Arguments.ToArray());                            // Get resulting type by interface of IEnumerable<>                          var typeArguments = methodCallExpression.Arguments[0].Type.GetInterfaces()                              .Concat(new[] { methodCallExpression.Arguments[0].Type })                              .First(a => a.GetTypeInfo().IsGenericType && a.GetGenericTypeDefinition() == typeof(IEnumerable<>))                              .GetGenericArguments()                              .First();                          var count = Expression.Call(typeof(Enumerable)' "Count"' new Type[] { typeArguments }' methodCallExpression.Arguments[0]);                            // When doing the divide' make sure count matches the sum type                            context.Visitor.Visit(sum);                            var writer = context.GetWriter();                          using (writer.Operation(methodCallExpression))                          {                              writer.Write("/(");                              context.Visitor.Visit(Expression.Convert(count' sum.Type));                                // Avoid division by 0                                                          writer.Write("||1)");                              return;                          }                      }                      case "ToDictionary":                          {                              context.PreventDefault();                              var writer = context.GetWriter();                              using (writer.Operation(methodCallExpression))                              {                                  context.Visitor.Visit(methodCallExpression.Arguments[0]);                                  writer.Write(".reduce(function(_obj' _cur) {");                                  writer.Write("_obj[");                                  context.Visitor.Visit(methodCallExpression.Arguments[1]);                                  writer.Write("(_cur)] = ");                                    if (methodCallExpression.Arguments.Count > 2)                                  {                                      context.Visitor.Visit(methodCallExpression.Arguments[2]);                                      writer.Write("(_cur);");                                  }                                  else                                  {                                      writer.Write("_cur;");                                  }                                    writer.Write("return _obj;");                                  writer.Write("}' {})");                              }                              return;                          }                      case "FirstOrDefault":                      case "First":                          {                              context.PreventDefault();                              context.Visitor.Visit(methodCallExpression.Arguments[0]);                              var writer = context.GetWriter();                              using (writer.Operation(methodCallExpression))                              {                                  if (methodCallExpression.Arguments.Count > 1)                                  {                                      writer.Write(".find");                                      context.Visitor.Visit(methodCallExpression.Arguments[1]);                                      return;                                  }                                    writer.Write("[0]");                                  return;                              }                          }                      case "Last":                      case "LastOrDefault":                          {                              context.PreventDefault();                              context.Visitor.Visit(methodCallExpression.Arguments[0]);                              var writer = context.GetWriter();                              using (writer.Operation(methodCallExpression))                              {                                  if (methodCallExpression.Arguments.Count > 1)                                  {                                      writer.Write(".slice().reverse().find");                                      context.Visitor.Visit(methodCallExpression.Arguments[1]);                                      return;                                  }                                  // arrayExpr.slice([-1])[0] will get the last value                                  writer.Write(".slice(-1)[0]");                                  return;                                }                          }                      case "ElementAt":                          {                              context.PreventDefault();                              context.Visitor.Visit(methodCallExpression.Arguments[0]);                              var writer = context.GetWriter();                              using (writer.Operation(methodCallExpression))                              {                                  writer.Write("[");                                  context.Visitor.Visit(methodCallExpression.Arguments[1]);                                  writer.Write("]");                                  return;                                }                          }                      case "Reverse":                          {                              context.PreventDefault();                              context.Visitor.Visit(methodCallExpression.Arguments[0]);                              var writer = context.GetWriter();                              using (writer.Operation(methodCallExpression))                              {                                  writer.Write(".slice().reverse()");                                  return;                              }                          }                      case "Max":                          {                              HandleMaxOrMin(context' methodCallExpression' true);                              return;                          }                      case "Min":                          {                              HandleMaxOrMin(context' methodCallExpression);                              return;                          }                      case "Skip":                          {                              context.PreventDefault();                              context.Visitor.Visit(methodCallExpression.Arguments[0]);                              var writer = context.GetWriter();                              using (writer.Operation(methodCallExpression))                              {                                  writer.Write(".slice(");                                  context.Visitor.Visit(methodCallExpression.Arguments[1]);                                  writer.Write("' ");                                  context.Visitor.Visit(methodCallExpression.Arguments[0]);                                  writer.Write(".length)");                                  return;                              }                          }                      case "Take":                          {                              context.PreventDefault();                              context.Visitor.Visit(methodCallExpression.Arguments[0]);                              var writer = context.GetWriter();                              using (writer.Operation(methodCallExpression))                              {                                  writer.Write(".slice(0' ");                                  context.Visitor.Visit(methodCallExpression.Arguments[1]);                                  writer.Write(")");                                  return;                              }                          }                      case "Distinct":                          {                              context.PreventDefault();                              var writer = context.GetWriter();                              using (writer.Operation(methodCallExpression))                              {                                  writer.Write("Array.from(new Set(");                                  context.Visitor.Visit(methodCallExpression.Arguments[0]);                                  writer.Write("))");                                  return;                              }                          }                      case "DefaultIfEmpty":                          {                              context.PreventDefault();                                object defaultVal = null;                              var genericArguments = methodCallExpression.Arguments[0].Type.GetGenericArguments();                              if (genericArguments.Length > 0)                              {                                  if (genericArguments[0] == typeof(bool))                                  {                                      defaultVal = "false";                                  }                                  else if (genericArguments[0] == typeof(char))                                  {                                      defaultVal = '0';                                  }                                  else                                  {                                      defaultVal = GetDefault(genericArguments[0]);                                  }                              }                                var writer = context.GetWriter();                              using (writer.Operation(methodCallExpression))                              {                                  writer.Write($"(function(arr){{return arr.length > 0 ? arr : [{defaultVal ?? "null"}]}})(");                                  context.Visitor.Visit(methodCallExpression.Arguments[0]);                                  writer.Write(")");                                  return;                              }                          }                      case "SelectMany":                          {                              if (methodCallExpression.Arguments.Count > 2)                                  return;                                var writer = context.GetWriter();                              using (writer.Operation(methodCallExpression))                              {                                  if (IsDictionary(methodCallExpression.Arguments[0].Type))                                  {                                      if (!(methodCallExpression.Arguments[1] is LambdaExpression lambda) ||                                          !(lambda.Body is MemberExpression member) ||                                          member.Member.Name != "Key" && member.Member.Name != "Value")                                          return;                                        context.PreventDefault();                                        writer.Write("Object.getOwnPropertyNames(");                                      context.Visitor.Visit(methodCallExpression.Arguments[0]);                                      writer.Write(")");                                        if (member.Member.Name == "Value")                                      {                                          writer.Write(".map(function(k){return ");                                          context.Visitor.Visit(methodCallExpression.Arguments[0]);                                          writer.Write("[k]})");                                      }                                        writer.Write(".reduce(function(a' b) { return a.concat(b);}'[])");                                    }                                    else                                  {                                      context.PreventDefault();                                        context.Visitor.Visit(methodCallExpression.Arguments[0]);                                      writer.Write(".reduce(function(a' b) { return a.concat(");                                      context.Visitor.Visit(methodCallExpression.Arguments[1]);                                      writer.Write("(b)); }' [])");                                  }                                    return;                              }                          }                      case "Count":                      {                          context.PreventDefault();                          context.Visitor.Visit(methodCallExpression.Arguments[0]);                          var writer = context.GetWriter();                          using (writer.Operation(methodCallExpression))                          {                              if (methodCallExpression.Arguments.Count > 1)                              {                                  writer.Write(".filter");                                  context.Visitor.Visit(methodCallExpression.Arguments[1]);                              }                                writer.Write(".length");                              return;                          }                      }                      case "OrderBy":                      {                          OrderByToSort(context' methodCallExpression);                          return;                      }                      case "OrderByDescending":                      {                          OrderByToSort(context' methodCallExpression' true);                          return;                      }                      case "ContainsKey":                      {                          return;                      }                      default:                          throw new NotSupportedException($"Unable to translate '{methodName}' to RQL operation because this method is not familiar to the RavenDB query provider.")                          {                              HelpLink = "DoNotWrap"                          };                  }
Magic Number,Raven.Client.Util,LinqMethodsSupport,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Util\JavascriptConversionExtensions.cs,ConvertToJavascript,The following statement contains a magic number: switch (methodName)                  {                      case "Any":                          {                              if (methodCallExpression.Arguments.Count > 1)                              {                                  newName = "some";                                  break;                              }                                context.PreventDefault();                              context.Visitor.Visit(methodCallExpression.Arguments[0]);                              var writer = context.GetWriter();                              using (writer.Operation(methodCallExpression))                              {                                                                    writer.Write(".length > 0");                                  return;                                                         }                          }                      case "All":                          newName = "every";                          break;                      case "Select":                      case "Sum":                          newName = "map";                          break;                        case "Where":                          newName = "filter";                          break;                      case "IndexOf":                      case "Contains":                          newName = "indexOf";                          break;                      case "Cast":                      case "ToList":                      case "ToArray":                      {                          context.PreventDefault();                          context.Visitor.Visit(methodCallExpression.Arguments[0]);                          return;                      }                        case "Concat":                          newName = "concat";                          break;                        case "Average":                      {                          context.PreventDefault();                          // -- Rewrite expression to Sum() (using second (if available) argument Types) / Count() (using last argument Type)                            var sum = Expression.Call(                              typeof(Enumerable)'                              "Sum"'                              methodCallExpression.Arguments.Count > 1 ?                                  new Type[] { methodCallExpression.Arguments[1].Type.GenericTypeArguments.First() } :                                  new Type[] { }'                              methodCallExpression.Arguments.ToArray());                            // Get resulting type by interface of IEnumerable<>                          var typeArguments = methodCallExpression.Arguments[0].Type.GetInterfaces()                              .Concat(new[] { methodCallExpression.Arguments[0].Type })                              .First(a => a.GetTypeInfo().IsGenericType && a.GetGenericTypeDefinition() == typeof(IEnumerable<>))                              .GetGenericArguments()                              .First();                          var count = Expression.Call(typeof(Enumerable)' "Count"' new Type[] { typeArguments }' methodCallExpression.Arguments[0]);                            // When doing the divide' make sure count matches the sum type                            context.Visitor.Visit(sum);                            var writer = context.GetWriter();                          using (writer.Operation(methodCallExpression))                          {                              writer.Write("/(");                              context.Visitor.Visit(Expression.Convert(count' sum.Type));                                // Avoid division by 0                                                          writer.Write("||1)");                              return;                          }                      }                      case "ToDictionary":                          {                              context.PreventDefault();                              var writer = context.GetWriter();                              using (writer.Operation(methodCallExpression))                              {                                  context.Visitor.Visit(methodCallExpression.Arguments[0]);                                  writer.Write(".reduce(function(_obj' _cur) {");                                  writer.Write("_obj[");                                  context.Visitor.Visit(methodCallExpression.Arguments[1]);                                  writer.Write("(_cur)] = ");                                    if (methodCallExpression.Arguments.Count > 2)                                  {                                      context.Visitor.Visit(methodCallExpression.Arguments[2]);                                      writer.Write("(_cur);");                                  }                                  else                                  {                                      writer.Write("_cur;");                                  }                                    writer.Write("return _obj;");                                  writer.Write("}' {})");                              }                              return;                          }                      case "FirstOrDefault":                      case "First":                          {                              context.PreventDefault();                              context.Visitor.Visit(methodCallExpression.Arguments[0]);                              var writer = context.GetWriter();                              using (writer.Operation(methodCallExpression))                              {                                  if (methodCallExpression.Arguments.Count > 1)                                  {                                      writer.Write(".find");                                      context.Visitor.Visit(methodCallExpression.Arguments[1]);                                      return;                                  }                                    writer.Write("[0]");                                  return;                              }                          }                      case "Last":                      case "LastOrDefault":                          {                              context.PreventDefault();                              context.Visitor.Visit(methodCallExpression.Arguments[0]);                              var writer = context.GetWriter();                              using (writer.Operation(methodCallExpression))                              {                                  if (methodCallExpression.Arguments.Count > 1)                                  {                                      writer.Write(".slice().reverse().find");                                      context.Visitor.Visit(methodCallExpression.Arguments[1]);                                      return;                                  }                                  // arrayExpr.slice([-1])[0] will get the last value                                  writer.Write(".slice(-1)[0]");                                  return;                                }                          }                      case "ElementAt":                          {                              context.PreventDefault();                              context.Visitor.Visit(methodCallExpression.Arguments[0]);                              var writer = context.GetWriter();                              using (writer.Operation(methodCallExpression))                              {                                  writer.Write("[");                                  context.Visitor.Visit(methodCallExpression.Arguments[1]);                                  writer.Write("]");                                  return;                                }                          }                      case "Reverse":                          {                              context.PreventDefault();                              context.Visitor.Visit(methodCallExpression.Arguments[0]);                              var writer = context.GetWriter();                              using (writer.Operation(methodCallExpression))                              {                                  writer.Write(".slice().reverse()");                                  return;                              }                          }                      case "Max":                          {                              HandleMaxOrMin(context' methodCallExpression' true);                              return;                          }                      case "Min":                          {                              HandleMaxOrMin(context' methodCallExpression);                              return;                          }                      case "Skip":                          {                              context.PreventDefault();                              context.Visitor.Visit(methodCallExpression.Arguments[0]);                              var writer = context.GetWriter();                              using (writer.Operation(methodCallExpression))                              {                                  writer.Write(".slice(");                                  context.Visitor.Visit(methodCallExpression.Arguments[1]);                                  writer.Write("' ");                                  context.Visitor.Visit(methodCallExpression.Arguments[0]);                                  writer.Write(".length)");                                  return;                              }                          }                      case "Take":                          {                              context.PreventDefault();                              context.Visitor.Visit(methodCallExpression.Arguments[0]);                              var writer = context.GetWriter();                              using (writer.Operation(methodCallExpression))                              {                                  writer.Write(".slice(0' ");                                  context.Visitor.Visit(methodCallExpression.Arguments[1]);                                  writer.Write(")");                                  return;                              }                          }                      case "Distinct":                          {                              context.PreventDefault();                              var writer = context.GetWriter();                              using (writer.Operation(methodCallExpression))                              {                                  writer.Write("Array.from(new Set(");                                  context.Visitor.Visit(methodCallExpression.Arguments[0]);                                  writer.Write("))");                                  return;                              }                          }                      case "DefaultIfEmpty":                          {                              context.PreventDefault();                                object defaultVal = null;                              var genericArguments = methodCallExpression.Arguments[0].Type.GetGenericArguments();                              if (genericArguments.Length > 0)                              {                                  if (genericArguments[0] == typeof(bool))                                  {                                      defaultVal = "false";                                  }                                  else if (genericArguments[0] == typeof(char))                                  {                                      defaultVal = '0';                                  }                                  else                                  {                                      defaultVal = GetDefault(genericArguments[0]);                                  }                              }                                var writer = context.GetWriter();                              using (writer.Operation(methodCallExpression))                              {                                  writer.Write($"(function(arr){{return arr.length > 0 ? arr : [{defaultVal ?? "null"}]}})(");                                  context.Visitor.Visit(methodCallExpression.Arguments[0]);                                  writer.Write(")");                                  return;                              }                          }                      case "SelectMany":                          {                              if (methodCallExpression.Arguments.Count > 2)                                  return;                                var writer = context.GetWriter();                              using (writer.Operation(methodCallExpression))                              {                                  if (IsDictionary(methodCallExpression.Arguments[0].Type))                                  {                                      if (!(methodCallExpression.Arguments[1] is LambdaExpression lambda) ||                                          !(lambda.Body is MemberExpression member) ||                                          member.Member.Name != "Key" && member.Member.Name != "Value")                                          return;                                        context.PreventDefault();                                        writer.Write("Object.getOwnPropertyNames(");                                      context.Visitor.Visit(methodCallExpression.Arguments[0]);                                      writer.Write(")");                                        if (member.Member.Name == "Value")                                      {                                          writer.Write(".map(function(k){return ");                                          context.Visitor.Visit(methodCallExpression.Arguments[0]);                                          writer.Write("[k]})");                                      }                                        writer.Write(".reduce(function(a' b) { return a.concat(b);}'[])");                                    }                                    else                                  {                                      context.PreventDefault();                                        context.Visitor.Visit(methodCallExpression.Arguments[0]);                                      writer.Write(".reduce(function(a' b) { return a.concat(");                                      context.Visitor.Visit(methodCallExpression.Arguments[1]);                                      writer.Write("(b)); }' [])");                                  }                                    return;                              }                          }                      case "Count":                      {                          context.PreventDefault();                          context.Visitor.Visit(methodCallExpression.Arguments[0]);                          var writer = context.GetWriter();                          using (writer.Operation(methodCallExpression))                          {                              if (methodCallExpression.Arguments.Count > 1)                              {                                  writer.Write(".filter");                                  context.Visitor.Visit(methodCallExpression.Arguments[1]);                              }                                writer.Write(".length");                              return;                          }                      }                      case "OrderBy":                      {                          OrderByToSort(context' methodCallExpression);                          return;                      }                      case "OrderByDescending":                      {                          OrderByToSort(context' methodCallExpression' true);                          return;                      }                      case "ContainsKey":                      {                          return;                      }                      default:                          throw new NotSupportedException($"Unable to translate '{methodName}' to RQL operation because this method is not familiar to the RavenDB query provider.")                          {                              HelpLink = "DoNotWrap"                          };                  }
Magic Number,Raven.Client.Util,LinqMethodsSupport,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Util\JavascriptConversionExtensions.cs,ConvertToJavascript,The following statement contains a magic number: switch (methodName)                  {                      case "Any":                          {                              if (methodCallExpression.Arguments.Count > 1)                              {                                  newName = "some";                                  break;                              }                                context.PreventDefault();                              context.Visitor.Visit(methodCallExpression.Arguments[0]);                              var writer = context.GetWriter();                              using (writer.Operation(methodCallExpression))                              {                                                                    writer.Write(".length > 0");                                  return;                                                         }                          }                      case "All":                          newName = "every";                          break;                      case "Select":                      case "Sum":                          newName = "map";                          break;                        case "Where":                          newName = "filter";                          break;                      case "IndexOf":                      case "Contains":                          newName = "indexOf";                          break;                      case "Cast":                      case "ToList":                      case "ToArray":                      {                          context.PreventDefault();                          context.Visitor.Visit(methodCallExpression.Arguments[0]);                          return;                      }                        case "Concat":                          newName = "concat";                          break;                        case "Average":                      {                          context.PreventDefault();                          // -- Rewrite expression to Sum() (using second (if available) argument Types) / Count() (using last argument Type)                            var sum = Expression.Call(                              typeof(Enumerable)'                              "Sum"'                              methodCallExpression.Arguments.Count > 1 ?                                  new Type[] { methodCallExpression.Arguments[1].Type.GenericTypeArguments.First() } :                                  new Type[] { }'                              methodCallExpression.Arguments.ToArray());                            // Get resulting type by interface of IEnumerable<>                          var typeArguments = methodCallExpression.Arguments[0].Type.GetInterfaces()                              .Concat(new[] { methodCallExpression.Arguments[0].Type })                              .First(a => a.GetTypeInfo().IsGenericType && a.GetGenericTypeDefinition() == typeof(IEnumerable<>))                              .GetGenericArguments()                              .First();                          var count = Expression.Call(typeof(Enumerable)' "Count"' new Type[] { typeArguments }' methodCallExpression.Arguments[0]);                            // When doing the divide' make sure count matches the sum type                            context.Visitor.Visit(sum);                            var writer = context.GetWriter();                          using (writer.Operation(methodCallExpression))                          {                              writer.Write("/(");                              context.Visitor.Visit(Expression.Convert(count' sum.Type));                                // Avoid division by 0                                                          writer.Write("||1)");                              return;                          }                      }                      case "ToDictionary":                          {                              context.PreventDefault();                              var writer = context.GetWriter();                              using (writer.Operation(methodCallExpression))                              {                                  context.Visitor.Visit(methodCallExpression.Arguments[0]);                                  writer.Write(".reduce(function(_obj' _cur) {");                                  writer.Write("_obj[");                                  context.Visitor.Visit(methodCallExpression.Arguments[1]);                                  writer.Write("(_cur)] = ");                                    if (methodCallExpression.Arguments.Count > 2)                                  {                                      context.Visitor.Visit(methodCallExpression.Arguments[2]);                                      writer.Write("(_cur);");                                  }                                  else                                  {                                      writer.Write("_cur;");                                  }                                    writer.Write("return _obj;");                                  writer.Write("}' {})");                              }                              return;                          }                      case "FirstOrDefault":                      case "First":                          {                              context.PreventDefault();                              context.Visitor.Visit(methodCallExpression.Arguments[0]);                              var writer = context.GetWriter();                              using (writer.Operation(methodCallExpression))                              {                                  if (methodCallExpression.Arguments.Count > 1)                                  {                                      writer.Write(".find");                                      context.Visitor.Visit(methodCallExpression.Arguments[1]);                                      return;                                  }                                    writer.Write("[0]");                                  return;                              }                          }                      case "Last":                      case "LastOrDefault":                          {                              context.PreventDefault();                              context.Visitor.Visit(methodCallExpression.Arguments[0]);                              var writer = context.GetWriter();                              using (writer.Operation(methodCallExpression))                              {                                  if (methodCallExpression.Arguments.Count > 1)                                  {                                      writer.Write(".slice().reverse().find");                                      context.Visitor.Visit(methodCallExpression.Arguments[1]);                                      return;                                  }                                  // arrayExpr.slice([-1])[0] will get the last value                                  writer.Write(".slice(-1)[0]");                                  return;                                }                          }                      case "ElementAt":                          {                              context.PreventDefault();                              context.Visitor.Visit(methodCallExpression.Arguments[0]);                              var writer = context.GetWriter();                              using (writer.Operation(methodCallExpression))                              {                                  writer.Write("[");                                  context.Visitor.Visit(methodCallExpression.Arguments[1]);                                  writer.Write("]");                                  return;                                }                          }                      case "Reverse":                          {                              context.PreventDefault();                              context.Visitor.Visit(methodCallExpression.Arguments[0]);                              var writer = context.GetWriter();                              using (writer.Operation(methodCallExpression))                              {                                  writer.Write(".slice().reverse()");                                  return;                              }                          }                      case "Max":                          {                              HandleMaxOrMin(context' methodCallExpression' true);                              return;                          }                      case "Min":                          {                              HandleMaxOrMin(context' methodCallExpression);                              return;                          }                      case "Skip":                          {                              context.PreventDefault();                              context.Visitor.Visit(methodCallExpression.Arguments[0]);                              var writer = context.GetWriter();                              using (writer.Operation(methodCallExpression))                              {                                  writer.Write(".slice(");                                  context.Visitor.Visit(methodCallExpression.Arguments[1]);                                  writer.Write("' ");                                  context.Visitor.Visit(methodCallExpression.Arguments[0]);                                  writer.Write(".length)");                                  return;                              }                          }                      case "Take":                          {                              context.PreventDefault();                              context.Visitor.Visit(methodCallExpression.Arguments[0]);                              var writer = context.GetWriter();                              using (writer.Operation(methodCallExpression))                              {                                  writer.Write(".slice(0' ");                                  context.Visitor.Visit(methodCallExpression.Arguments[1]);                                  writer.Write(")");                                  return;                              }                          }                      case "Distinct":                          {                              context.PreventDefault();                              var writer = context.GetWriter();                              using (writer.Operation(methodCallExpression))                              {                                  writer.Write("Array.from(new Set(");                                  context.Visitor.Visit(methodCallExpression.Arguments[0]);                                  writer.Write("))");                                  return;                              }                          }                      case "DefaultIfEmpty":                          {                              context.PreventDefault();                                object defaultVal = null;                              var genericArguments = methodCallExpression.Arguments[0].Type.GetGenericArguments();                              if (genericArguments.Length > 0)                              {                                  if (genericArguments[0] == typeof(bool))                                  {                                      defaultVal = "false";                                  }                                  else if (genericArguments[0] == typeof(char))                                  {                                      defaultVal = '0';                                  }                                  else                                  {                                      defaultVal = GetDefault(genericArguments[0]);                                  }                              }                                var writer = context.GetWriter();                              using (writer.Operation(methodCallExpression))                              {                                  writer.Write($"(function(arr){{return arr.length > 0 ? arr : [{defaultVal ?? "null"}]}})(");                                  context.Visitor.Visit(methodCallExpression.Arguments[0]);                                  writer.Write(")");                                  return;                              }                          }                      case "SelectMany":                          {                              if (methodCallExpression.Arguments.Count > 2)                                  return;                                var writer = context.GetWriter();                              using (writer.Operation(methodCallExpression))                              {                                  if (IsDictionary(methodCallExpression.Arguments[0].Type))                                  {                                      if (!(methodCallExpression.Arguments[1] is LambdaExpression lambda) ||                                          !(lambda.Body is MemberExpression member) ||                                          member.Member.Name != "Key" && member.Member.Name != "Value")                                          return;                                        context.PreventDefault();                                        writer.Write("Object.getOwnPropertyNames(");                                      context.Visitor.Visit(methodCallExpression.Arguments[0]);                                      writer.Write(")");                                        if (member.Member.Name == "Value")                                      {                                          writer.Write(".map(function(k){return ");                                          context.Visitor.Visit(methodCallExpression.Arguments[0]);                                          writer.Write("[k]})");                                      }                                        writer.Write(".reduce(function(a' b) { return a.concat(b);}'[])");                                    }                                    else                                  {                                      context.PreventDefault();                                        context.Visitor.Visit(methodCallExpression.Arguments[0]);                                      writer.Write(".reduce(function(a' b) { return a.concat(");                                      context.Visitor.Visit(methodCallExpression.Arguments[1]);                                      writer.Write("(b)); }' [])");                                  }                                    return;                              }                          }                      case "Count":                      {                          context.PreventDefault();                          context.Visitor.Visit(methodCallExpression.Arguments[0]);                          var writer = context.GetWriter();                          using (writer.Operation(methodCallExpression))                          {                              if (methodCallExpression.Arguments.Count > 1)                              {                                  writer.Write(".filter");                                  context.Visitor.Visit(methodCallExpression.Arguments[1]);                              }                                writer.Write(".length");                              return;                          }                      }                      case "OrderBy":                      {                          OrderByToSort(context' methodCallExpression);                          return;                      }                      case "OrderByDescending":                      {                          OrderByToSort(context' methodCallExpression' true);                          return;                      }                      case "ContainsKey":                      {                          return;                      }                      default:                          throw new NotSupportedException($"Unable to translate '{methodName}' to RQL operation because this method is not familiar to the RavenDB query provider.")                          {                              HelpLink = "DoNotWrap"                          };                  }
Magic Number,Raven.Client.Util,LinqMethodsSupport,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Util\JavascriptConversionExtensions.cs,OrderByToSort,The following statement contains a magic number: methodCallExpression.Arguments.Count == 2 &&                          methodCallExpression.Arguments[1] is LambdaExpression lambda &&                          lambda.Body is MemberExpression memberExpression
Magic Number,Raven.Client.Util,StringSupport,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Util\JavascriptConversionExtensions.cs,ConvertToJavascript,The following statement contains a magic number: switch (newName)                      {                          case "join":                              if (mce.Arguments.Count > 2)                              {                                  writer.Write("[");                                  WriteArguments(context' mce.Arguments' writer' 1);                                  writer.Write("]");                              }                              else                              {                                  context.Visitor.Visit(mce.Arguments[1]);                              }                                writer.Write($".{newName}(");                              context.Visitor.Visit(mce.Arguments[0]);                              writer.Write(")");                              break;                          case "nullOrEmpty":                              writer.Write("(");                              context.Visitor.Visit(mce.Arguments[0]);                              writer.Write(" == null || ");                              context.Visitor.Visit(mce.Arguments[0]);                              writer.Write(" === \"\")");                              break;                          case "nullOrWhitespace":                              writer.Write("(!");                              context.Visitor.Visit(mce.Arguments[0]);                              writer.Write(" || !");                              context.Visitor.Visit(mce.Arguments[0]);                              writer.Write(".trim())");                              break;                          case "toCharArray":                              context.Visitor.Visit(mce.Object);                              if (mce.Arguments.Count > 0)                              {                                  writer.Write(".substr(");                                  context.Visitor.Visit(mce.Arguments[0]);                                  writer.Write("' ");                                  context.Visitor.Visit(mce.Arguments[1]);                                  writer.Write(")");                              }                              writer.Write(".split('')");                              break;                          case "format":                              context.Visitor.Visit(mce.Arguments[0]);                              writer.Write(".format(");                              if (mce.Arguments.Count == 2 && mce.Arguments[1] is NewArrayExpression nae)                              {                                  WriteArguments(context' nae.Expressions' writer);                              }                              else                              {                                  WriteArguments(context' mce.Arguments' writer' 1);                              }                              writer.Write(")");                              break;                          default:                              context.Visitor.Visit(mce.Object);                              writer.Write($".{newName}(");                                if (newName == "split")                              {                                  writer.Write("new RegExp(");                                  if (mce.Arguments[0] is NewArrayExpression arrayExpression)                                  {                                      for (var i = 0; i < arrayExpression.Expressions.Count; i++)                                      {                                          if (i != 0)                                          {                                              writer.Write("+\"|\"+");                                          }                                            context.Visitor.Visit(arrayExpression.Expressions[i]);                                      }                                  }                                  else if (mce.Arguments[0] is MethodCallExpression mce2)                                  {                                      var value = Expression.Lambda(mce2).Compile().DynamicInvoke();                                      switch (value)                                      {                                          case string s:                                              writer.WriteLiteral(s);                                              break;                                          case Array items:                                              for (var i = 0; i < items.Length; i++)                                              {                                                  if (i != 0)                                                  {                                                      writer.Write("+\"|\"+");                                                  }                                                    var str = items.GetValue(i).ToInvariantString();                                                    writer.WriteLiteral(str);                                              }                                              break;                                          default:                                              throw new InvalidOperationException("Unable to understand how to convert " + value + " to RQL (" + value?.GetType() ?? "null" + ")");                                      }                                  }                                  else                                  {                                      context.Visitor.Visit(mce.Arguments[0]);                                  }                                    writer.Write("' \"g\")");                              }                              else if (newName == "replace")                              {                                  writer.Write("new RegExp(");                                  context.Visitor.Visit(mce.Arguments[0]);                                  writer.Write("' \"g\")' ");                                    context.Visitor.Visit(mce.Arguments[1]);                              }                              else                              {                                  WriteArguments(context' mce.Arguments' writer);                              }                                writer.Write(")");                                if (mce.Method.Name == "Contains")                              {                                  writer.Write(" !== -1");                              }                              break;                      }
Magic Number,Raven.Client.Util,StringSupport,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Util\JavascriptConversionExtensions.cs,ConvertToJavascript,The following statement contains a magic number: switch (newName)                      {                          case "join":                              if (mce.Arguments.Count > 2)                              {                                  writer.Write("[");                                  WriteArguments(context' mce.Arguments' writer' 1);                                  writer.Write("]");                              }                              else                              {                                  context.Visitor.Visit(mce.Arguments[1]);                              }                                writer.Write($".{newName}(");                              context.Visitor.Visit(mce.Arguments[0]);                              writer.Write(")");                              break;                          case "nullOrEmpty":                              writer.Write("(");                              context.Visitor.Visit(mce.Arguments[0]);                              writer.Write(" == null || ");                              context.Visitor.Visit(mce.Arguments[0]);                              writer.Write(" === \"\")");                              break;                          case "nullOrWhitespace":                              writer.Write("(!");                              context.Visitor.Visit(mce.Arguments[0]);                              writer.Write(" || !");                              context.Visitor.Visit(mce.Arguments[0]);                              writer.Write(".trim())");                              break;                          case "toCharArray":                              context.Visitor.Visit(mce.Object);                              if (mce.Arguments.Count > 0)                              {                                  writer.Write(".substr(");                                  context.Visitor.Visit(mce.Arguments[0]);                                  writer.Write("' ");                                  context.Visitor.Visit(mce.Arguments[1]);                                  writer.Write(")");                              }                              writer.Write(".split('')");                              break;                          case "format":                              context.Visitor.Visit(mce.Arguments[0]);                              writer.Write(".format(");                              if (mce.Arguments.Count == 2 && mce.Arguments[1] is NewArrayExpression nae)                              {                                  WriteArguments(context' nae.Expressions' writer);                              }                              else                              {                                  WriteArguments(context' mce.Arguments' writer' 1);                              }                              writer.Write(")");                              break;                          default:                              context.Visitor.Visit(mce.Object);                              writer.Write($".{newName}(");                                if (newName == "split")                              {                                  writer.Write("new RegExp(");                                  if (mce.Arguments[0] is NewArrayExpression arrayExpression)                                  {                                      for (var i = 0; i < arrayExpression.Expressions.Count; i++)                                      {                                          if (i != 0)                                          {                                              writer.Write("+\"|\"+");                                          }                                            context.Visitor.Visit(arrayExpression.Expressions[i]);                                      }                                  }                                  else if (mce.Arguments[0] is MethodCallExpression mce2)                                  {                                      var value = Expression.Lambda(mce2).Compile().DynamicInvoke();                                      switch (value)                                      {                                          case string s:                                              writer.WriteLiteral(s);                                              break;                                          case Array items:                                              for (var i = 0; i < items.Length; i++)                                              {                                                  if (i != 0)                                                  {                                                      writer.Write("+\"|\"+");                                                  }                                                    var str = items.GetValue(i).ToInvariantString();                                                    writer.WriteLiteral(str);                                              }                                              break;                                          default:                                              throw new InvalidOperationException("Unable to understand how to convert " + value + " to RQL (" + value?.GetType() ?? "null" + ")");                                      }                                  }                                  else                                  {                                      context.Visitor.Visit(mce.Arguments[0]);                                  }                                    writer.Write("' \"g\")");                              }                              else if (newName == "replace")                              {                                  writer.Write("new RegExp(");                                  context.Visitor.Visit(mce.Arguments[0]);                                  writer.Write("' \"g\")' ");                                    context.Visitor.Visit(mce.Arguments[1]);                              }                              else                              {                                  WriteArguments(context' mce.Arguments' writer);                              }                                writer.Write(")");                                if (mce.Method.Name == "Contains")                              {                                  writer.Write(" !== -1");                              }                              break;                      }
Magic Number,Raven.Client.Util,Size,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Util\Size.cs,Humane,The following statement contains a magic number: const double GB = 1024 * 1024 * 1024;
Magic Number,Raven.Client.Util,Size,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Util\Size.cs,Humane,The following statement contains a magic number: const double GB = 1024 * 1024 * 1024;
Magic Number,Raven.Client.Util,Size,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Util\Size.cs,Humane,The following statement contains a magic number: const double GB = 1024 * 1024 * 1024;
Magic Number,Raven.Client.Util,Size,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Util\Size.cs,Humane,The following statement contains a magic number: const double MB = 1024 * 1024;
Magic Number,Raven.Client.Util,Size,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Util\Size.cs,Humane,The following statement contains a magic number: const double MB = 1024 * 1024;
Magic Number,Raven.Client.Util,Size,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Util\Size.cs,Humane,The following statement contains a magic number: const double KB = 1024;
Magic Number,Raven.Client.Util,TcpUtils,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Util\TcpUtils.cs,NewTcpClient,The following statement contains a magic number: tcpClient.LingerState = new LingerOption(true' 5);
Magic Number,Raven.Client.Util.Metrics,EWMA,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Util\Metrics\EWMA.cs,OneMinuteEWMA,The following statement contains a magic number: return new EWMA(M1Alpha' 5' TimeUnit.Seconds);
Magic Number,Raven.Client.Util.Metrics,EWMA,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Util\Metrics\EWMA.cs,FiveMinuteEWMA,The following statement contains a magic number: return new EWMA(M5Alpha' 5' TimeUnit.Seconds);
Magic Number,Raven.Client.Util.Metrics,EWMA,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Util\Metrics\EWMA.cs,FifteenMinuteEWMA,The following statement contains a magic number: return new EWMA(M15Alpha' 5' TimeUnit.Seconds);
Magic Number,Raven.Client.Util.Metrics,TimeUnitExtensions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Util\Metrics\TimeUnit.cs,BuildConversionMatrix,The following statement contains a magic number: var timingFactors = new[]               {                  1000L'  // Nanos to micros                  1000L'  // Micros to millis                  1000L'  // Millis to seconds                  60L'    // Seconds to minutes                  60L'    // Minutes to hours                  24L     // Hours to days              };
Magic Number,Raven.Client.Util.Metrics,TimeUnitExtensions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Util\Metrics\TimeUnit.cs,BuildConversionMatrix,The following statement contains a magic number: var timingFactors = new[]               {                  1000L'  // Nanos to micros                  1000L'  // Micros to millis                  1000L'  // Millis to seconds                  60L'    // Seconds to minutes                  60L'    // Minutes to hours                  24L     // Hours to days              };
Magic Number,Raven.Client.Util.Metrics,TimeUnitExtensions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Util\Metrics\TimeUnit.cs,BuildConversionMatrix,The following statement contains a magic number: var timingFactors = new[]               {                  1000L'  // Nanos to micros                  1000L'  // Micros to millis                  1000L'  // Millis to seconds                  60L'    // Seconds to minutes                  60L'    // Minutes to hours                  24L     // Hours to days              };
Magic Number,Raven.Client.Util.Metrics,TimeUnitExtensions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Util\Metrics\TimeUnit.cs,BuildConversionMatrix,The following statement contains a magic number: var timingFactors = new[]               {                  1000L'  // Nanos to micros                  1000L'  // Micros to millis                  1000L'  // Millis to seconds                  60L'    // Seconds to minutes                  60L'    // Minutes to hours                  24L     // Hours to days              };
Magic Number,Raven.Client.Util.Metrics,TimeUnitExtensions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Util\Metrics\TimeUnit.cs,BuildConversionMatrix,The following statement contains a magic number: var timingFactors = new[]               {                  1000L'  // Nanos to micros                  1000L'  // Micros to millis                  1000L'  // Millis to seconds                  60L'    // Seconds to minutes                  60L'    // Minutes to hours                  24L     // Hours to days              };
Magic Number,Raven.Client.Util.Metrics,TimeUnitExtensions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Util\Metrics\TimeUnit.cs,BuildConversionMatrix,The following statement contains a magic number: var timingFactors = new[]               {                  1000L'  // Nanos to micros                  1000L'  // Micros to millis                  1000L'  // Millis to seconds                  60L'    // Seconds to minutes                  60L'    // Minutes to hours                  24L     // Hours to days              };
Missing Default,Raven.Client.Documents.Indexes,ExpressionStringBuilder,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\ExpressionStringBuilder.cs,FixupEnumBinaryExpression,The following switch statement is missing a default case: switch (left.NodeType)              {                  case ExpressionType.ConvertChecked:                  case ExpressionType.Convert:                      var leftWithoutConvert = ((UnaryExpression)left).Operand;                      var enumType = Nullable.GetUnderlyingType(leftWithoutConvert.Type) ?? leftWithoutConvert.Type;                      if (enumType.GetTypeInfo().IsEnum == false)                          return;                        var rightWithoutConvert = SkipConvertExpressions(right);                        if (rightWithoutConvert is ConstantExpression constantExpression)                      {                          left = leftWithoutConvert;                            if (constantExpression.Value == null)                          {                              right = Expression.Constant(null);                          }                          else                          {                              right = _conventions.SaveEnumsAsIntegers                                  ? Expression.Constant(Convert.ToInt32(constantExpression.Value))                                  : Expression.Constant(Enum.ToObject(enumType' constantExpression.Value).ToString());                            }                      }                      else                      {                          if (leftWithoutConvert is MemberExpression && rightWithoutConvert is MemberExpression)                          {                              var rightType = Nullable.GetUnderlyingType(rightWithoutConvert.Type) ?? rightWithoutConvert.Type;                                if (rightType.GetTypeInfo().IsEnum)                              {                                  left = leftWithoutConvert;                                  right = rightWithoutConvert;                              }                          }                      }                        break;              }
Missing Default,Raven.Client.Documents.Indexes,ExpressionStringBuilder,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\ExpressionStringBuilder.cs,VisitMember,The following switch statement is missing a default case: switch (node.Member.Name)                  {                      case "HasValue":                          // we don't have nullable type on the server side' we just compare to null                          Out("(");                          Visit(node.Expression);                          Out(" != null)");                          return node;                      case "Value":                          Visit(node.Expression);                          return node; // we don't have nullable type on the server side' we can safely ignore this.                  }
Missing Default,Raven.Client.Documents.Indexes,ExpressionStringBuilder,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\ExpressionStringBuilder.cs,VisitMethodCall,The following switch statement is missing a default case: switch (node.Method.Name)                  {                      case "First":                      case "FirstOrDefault":                      case "Last":                      case "LastOrDefault":                      case "Single":                      case "SingleOrDefault":                      case "ElementAt":                      case "ElementAtOrDefault":                          Out(" ?? ");                          VisitDefault(Expression.Default(node.Type));                          break;                  }
Missing Default,Raven.Client.Documents.Indexes,ExpressionStringBuilder,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\ExpressionStringBuilder.cs,OutputGenericMethodArgumentsIfNeeded,The following switch statement is missing a default case: switch (method.DeclaringType.Name)                  {                      case "Enumerable":                      case "Queryable":                          return; // we don't need those' we have LinqOnDynamic for it                  }
Missing Default,Raven.Client.Documents.Indexes,ExpressionStringBuilder,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\ExpressionStringBuilder.cs,ShouldConvertToDynamicEnumerable,The following switch statement is missing a default case: switch (node.Method.Name)                  {                      case "First":                      case "FirstOrDefault":                      case "Single":                      case "SingleOrDefault":                      case "Last":                      case "LastOrDefault":                      case "ElementAt":                      case "ElementAtOrDefault":                      case "Min":                      case "Max":                      case "Union":                      case "Concat":                      case "Intersect":                          return true;                  }
Missing Default,Raven.Client.Documents.Indexes,ExpressionStringBuilder,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\ExpressionStringBuilder.cs,IsExtensionMethod,The following switch statement is missing a default case: switch (node.Method.Name)                  {                      case "Select":                      case "SelectMany":                      case "Where":                      case "GroupBy":                      case "OrderBy":                      case "OrderByDescending":                      case "ThenBy":                      case "ThenByDescending":                      case "DefaultIfEmpty":                      case "Reverse":                      case "Take":                      case "Skip":                      case "TakeWhile":                      case "SkipWhile":                      case "OfType":                          return true;                  }
Missing Default,Raven.Client.Documents.Indexes,ExpressionStringBuilder,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\ExpressionStringBuilder.cs,VisitNewArray,The following switch statement is missing a default case: switch (node.NodeType)              {                  case ExpressionType.NewArrayInit:                      Out("new ");                      OutputAppropriateArrayType(node);                      Out("[]");                      VisitExpressions('{'' node.Expressions' '}');                      return node;                    case ExpressionType.NewArrayBounds:                      if (TypeExistsOnServer(node.Type))                          Out("new " + node.Type.GetElementType());                      else                          Out("new object");                      VisitExpressions('['' node.Expressions' ']');                      return node;              }
Missing Default,Raven.Client.Documents.Indexes,ExpressionStringBuilder,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\ExpressionStringBuilder.cs,OutputAppropriateArrayType,The following switch statement is missing a default case: switch (node.NodeType)                  {                      case ExpressionType.NewArrayInit:                          if (node.Expressions.Count == 0)                          {                              Out("object");                          }                          break;                      case ExpressionType.NewArrayBounds:                          Out("object");                          break;                  }
Missing Default,Raven.Client.Documents.Indexes,IndexDefinitionHelper,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\IndexDefinitionHelper.cs,PruneToFailureLinqQueryAsStringToWorkableCode,The following switch statement is missing a default case: switch (expression.NodeType)              {                  case ExpressionType.ConvertChecked:                  case ExpressionType.Convert:                      expression = ((UnaryExpression)expression).Operand;                      break;                  case ExpressionType.Call:                      var methodCallExpression = GetFirstMethodCallExpression(expression);                      switch (methodCallExpression.Method.Name)                      {                          case "Select":                              queryRootName = TryCaptureQueryRoot(methodCallExpression.Arguments.FirstOrDefault(x => x.NodeType == ExpressionType.Call || x.NodeType == ExpressionType.Lambda) ?? methodCallExpression.Arguments[0]);                              break;                          case "SelectMany":                              queryRootName = TryCaptureQueryRoot(methodCallExpression.Arguments[1]);                              break;                      }                      break;              }
Missing Default,Raven.Client.Documents.Indexes,IndexDefinitionHelper,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\IndexDefinitionHelper.cs,PruneToFailureLinqQueryAsStringToWorkableCode,The following switch statement is missing a default case: switch (methodCallExpression.Method.Name)                      {                          case "Select":                              queryRootName = TryCaptureQueryRoot(methodCallExpression.Arguments.FirstOrDefault(x => x.NodeType == ExpressionType.Call || x.NodeType == ExpressionType.Lambda) ?? methodCallExpression.Arguments[0]);                              break;                          case "SelectMany":                              queryRootName = TryCaptureQueryRoot(methodCallExpression.Arguments[1]);                              break;                      }
Missing Default,Raven.Client.Documents.Indexes,JSBeautify,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\JSBeautify.cs,is_ternary_op,The following switch statement is missing a default case: switch (output[i])                  {                      case ':':                          if (level == 0)                              colon_count++;                          break;                      case '?':                          if (level == 0)                          {                              if (colon_count == 0)                              {                                  return true;                              }                              else                              {                                  colon_count--;                              }                          }                          break;                      case '{':                          if (level == 0) return false;                          level--;                          break;                      case '(':                      case '[':                          level--;                          break;                      case ')':                      case ']':                      case '}':                          level++;                          break;                  }
Missing Default,Raven.Client.Documents.Indexes,JSBeautify,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Indexes\JSBeautify.cs,JSBeautify,The following switch statement is missing a default case: switch (token_type)                  {                        case "TK_START_EXPR":                          var_line = false;                          set_mode("EXPRESSION");                          if ((last_text == ";") || (last_type == "TK_START_BLOCK"))                          {                              print_newline(null);                          }                          else if ((last_type == "TK_END_EXPR") || (last_type == "TK_START_EXPR"))                          {                              // do nothing on (( and )( and ][ and ]( ..                          }                          else if ((last_type != "TK_WORD") && (last_type != "TK_OPERATOR"))                          {                              print_space();                          }                          else if (line_starters.Contains(last_word))                          {                              print_space();                          }                          print_token();                          break;                        case "TK_END_EXPR":                          print_token();                          restore_mode();                          break;                        case "TK_START_BLOCK":                            if (last_word == "do")                          {                              set_mode("DO_BLOCK");                          }                          else                          {                              set_mode("BLOCK");                          }                          if ((last_type != "TK_OPERATOR") && (last_type != "TK_START_EXPR"))                          {                              if (last_type == "TK_START_BLOCK")                              {                                  print_newline(null);                              }                              else                              {                                  print_space();                              }                          }                          print_token();                          indent();                          break;                        case "TK_END_BLOCK":                          if (last_type == "TK_START_BLOCK")                          {                              // nothing                              trim_output();                              unindent();                          }                          else                          {                              unindent();                              print_newline(null);                          }                          print_token();                          restore_mode();                          break;                        case "TK_WORD":                            if (do_block_just_closed)                          {                              // do {} ## while ()                              print_space();                              print_token();                              print_space();                              do_block_just_closed = false;                              break;                          }                            if ((token_text == "case") || (token_text == "default"))                          {                              if (last_text == ":")                              {                                  // switch cases following one another                                  remove_indent();                              }                              else                              {                                  // case statement starts in the same line where switch                                  unindent();                                  print_newline(null);                                  indent();                              }                              print_token();                              in_case = true;                              break;                          }                            prefix = "NONE";                            if (last_type == "TK_END_BLOCK")                          {                              if (!(new[] { "else"' "catch"' "finally" }).Contains(token_text.ToLower()))                              {                                  prefix = "NEWLINE";                              }                              else                              {                                  prefix = "SPACE";                                  print_space();                              }                          }                          else if ((last_type == "TK_SEMICOLON") && ((current_mode == "BLOCK") || (current_mode == "DO_BLOCK")))                          {                              prefix = "NEWLINE";                          }                          else if ((last_type == "TK_SEMICOLON") && (current_mode == "EXPRESSION"))                          {                              prefix = "SPACE";                          }                          else if (last_type == "TK_STRING")                          {                              prefix = "NEWLINE";                          }                          else if (last_type == "TK_WORD")                          {                              prefix = "SPACE";                          }                          else if (last_type == "TK_START_BLOCK")                          {                              prefix = "NEWLINE";                          }                          else if (last_type == "TK_END_EXPR")                          {                              print_space();                              prefix = "NEWLINE";                          }                            if ((last_type != "TK_END_BLOCK") && ((new[] { "else"' "catch"' "finally" }).Contains(token_text.ToLower())))                          {                              print_newline(null);                          }                          else if ((line_starters.Contains(token_text)) || (prefix == "NEWLINE"))                          {                              if (last_text == "else")                              {                                  // no need to force newline on else break                                  print_space();                              }                              else if (((last_type == "TK_START_EXPR") || (last_text == "=") || (last_text == "'")) && (token_text == "function"))                              {                                  // no need to force newline on "function": (function                                  // DONOTHING                              }                              else if ((last_type == "TK_WORD") && ((last_text == "return") || (last_text == "throw")))                              {                                  // no newline between "return nnn"                                  print_space();                              }                              else if (last_type != "TK_END_EXPR")                              {                                  if (((last_type != "TK_START_EXPR") || (token_text != "var")) && (last_text != ":"))                                  {                                      // no need to force newline on "var": for (var x = 0...)                                      if ((token_text == "if") && (last_type == "TK_WORD") && (last_word == "else"))                                      {                                          // no newline for } else if {                                          print_space();                                      }                                      else                                      {                                          print_newline(null);                                      }                                  }                              }                              else                              {                                  if ((line_starters.Contains(token_text)) && (last_text != ")"))                                  {                                      print_newline(null);                                  }                              }                          }                          else if (prefix == "SPACE")                          {                              print_space();                          }                          print_token();                          last_word = token_text;                            if (token_text == "var")                          {                              var_line = true;                              var_line_tainted = false;                          }                            if (token_text == "if" || token_text == "else")                          {                              if_line_flag = true;                          }                            break;                        case "TK_SEMICOLON":                            print_token();                          var_line = false;                          break;                        case "TK_STRING":                            if ((last_type == "TK_START_BLOCK") || (last_type == "TK_END_BLOCK") || (last_type == "TK_SEMICOLON"))                          {                              print_newline(null);                          }                          else if (last_type == "TK_WORD")                          {                              print_space();                          }                          print_token();                          break;                        case "TK_OPERATOR":                            var start_delim = true;                          var end_delim = true;                          if (var_line && (token_text != "'"))                          {                              var_line_tainted = true;                              if (token_text == ":")                              {                                  var_line = false;                              }                          }                          if (var_line && (token_text == "'") && (current_mode == "EXPRESSION"))                          {                              // do not break on comma' for(var a = 1' b = 2)                              var_line_tainted = false;                          }                            if (token_text == ":" && in_case)                          {                              print_token(); // colon really asks for separate treatment                              print_newline(null);                              in_case = false;                              break;                          }                            if (token_text == "::")                          {                              // no spaces around exotic namespacing syntax operator                              print_token();                              break;                          }                            if (token_text == "'")                          {                              if (var_line)                              {                                  if (var_line_tainted)                                  {                                      print_token();                                      print_newline(null);                                      var_line_tainted = false;                                  }                                  else                                  {                                      print_token();                                      print_space();                                  }                              }                              else if (last_type == "TK_END_BLOCK")                              {                                  print_token();                                  print_newline(null);                              }                              else                              {                                  if (current_mode == "BLOCK")                                  {                                      print_token();                                      print_newline(null);                                  }                                  else                                  {                                      // EXPR od DO_BLOCK                                      print_token();                                      print_space();                                  }                              }                              break;                          }                          else if ((token_text == "--") || (token_text == "++"))                          { // unary operators special case                              if (last_text == ";")                              {                                  if (current_mode == "BLOCK")                                  {                                      // { foo; --i }                                      print_newline(null);                                      start_delim = true;                                      end_delim = false;                                  }                                  else                                  {                                      // space for (;; ++i)                                      start_delim = true;                                      end_delim = false;                                  }                              }                              else                              {                                  if (last_text == "{")                                  {                                      // {--i                                      print_newline(null);                                  }                                  start_delim = false;                                  end_delim = false;                              }                          }                          else if (((token_text == "!") || (token_text == "+") || (token_text == "-")) && ((last_text == "return") || (last_text == "case")))                          {                              start_delim = true;                              end_delim = false;                          }                          else if (((token_text == "!") || (token_text == "+") || (token_text == "-")) && (last_type == "TK_START_EXPR"))                          {                              // special case handling: if (!a)                              start_delim = false;                              end_delim = false;                          }                          else if (last_type == "TK_OPERATOR")                          {                              start_delim = false;                              end_delim = false;                          }                          else if (last_type == "TK_END_EXPR")                          {                              start_delim = true;                              end_delim = true;                          }                          else if (token_text == ".")                          {                              // decimal digits or object.property                              start_delim = false;                              end_delim = false;                            }                          else if (token_text == ":")                          {                              if (is_ternary_op())                              {                                  start_delim = true;                              }                              else                              {                                  start_delim = false;                              }                          }                          if (start_delim)                          {                              print_space();                          }                            print_token();                            if (end_delim)                          {                              print_space();                          }                          break;                        case "TK_BLOCK_COMMENT":                            print_newline(null);                          print_token();                          print_newline(null);                          break;                        case "TK_COMMENT":                            // print_newline();                          print_space();                          print_token();                          print_newline(null);                          break;                        case "TK_UNKNOWN":                          print_token();                          break;                  }
Missing Default,Raven.Client.Documents.Linq,LinqPathProvider,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\LinqPathProvider.cs,AssertNoComputation,The following switch statement is missing a default case: switch (cur.Expression?.NodeType)                  {                      case ExpressionType.Call:                      case ExpressionType.Invoke:                      case ExpressionType.Add:                      case ExpressionType.And:                      case ExpressionType.AndAlso:                      case ExpressionType.AndAssign:                      case ExpressionType.Decrement:                      case ExpressionType.Increment:                      case ExpressionType.PostDecrementAssign:                      case ExpressionType.PostIncrementAssign:                      case ExpressionType.PreDecrementAssign:                      case ExpressionType.PreIncrementAssign:                      case ExpressionType.AddAssign:                      case ExpressionType.AddAssignChecked:                      case ExpressionType.AddChecked:                      case ExpressionType.Index:                      case ExpressionType.Assign:                      case ExpressionType.Block:                      case ExpressionType.Conditional:                      case ExpressionType.ArrayIndex:                      case null:                            throw new ArgumentException("Not supported computation: " + memberExpression +                                                      ". You cannot use computation in RavenDB queries (only simple member expressions are allowed).");                  }
Missing Default,Raven.Client.Documents.Linq,RavenQueryProviderProcessor<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,VisitBinaryExpression,The following switch statement is missing a default case: switch (expression.NodeType)              {                  case ExpressionType.OrElse:                      VisitOrElse(expression);                      break;                  case ExpressionType.AndAlso:                      VisitAndAlso(expression);                      break;                  case ExpressionType.NotEqual:                      VisitNotEquals(expression);                      break;                  case ExpressionType.Equal:                      VisitEquals(expression);                      break;                  case ExpressionType.GreaterThan:                      VisitGreaterThan(expression);                      break;                  case ExpressionType.GreaterThanOrEqual:                      VisitGreaterThanOrEqual(expression);                      break;                  case ExpressionType.LessThan:                      VisitLessThan(expression);                      break;                  case ExpressionType.LessThanOrEqual:                      VisitLessThanOrEqual(expression);                      break;              }
Missing Default,Raven.Client.Documents.Linq,RavenQueryProviderProcessor<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,VerifyLegalBinaryExpression,The following switch statement is missing a default case: switch (expression.NodeType)              {                  case ExpressionType.OrElse:                  case ExpressionType.AndAlso:                      return;              }
Missing Default,Raven.Client.Documents.Linq,RavenQueryProviderProcessor<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,GetParameterExpressionIncludingConversions,The following switch statement is missing a default case: switch (expression.NodeType)              {                  case ExpressionType.Convert:                  case ExpressionType.ConvertChecked:                      return GetParameterExpressionIncludingConversions(((UnaryExpression)expression).Operand);              }
Missing Default,Raven.Client.Documents.Linq,RavenQueryProviderProcessor<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,VisitGroupBy,The following switch statement is missing a default case: switch (arrayBehavior)                          {                              case GroupByArrayBehavior.NotApplicable:                                  throw new InvalidOperationException(                                      "Please use one of dedicated methods to group by collection: " +                                      $"{nameof(LinqExtensions.GroupByArrayValues)}' {nameof(LinqExtensions.GroupByArrayContent)}. " +                                      $"Field name: {singleGroupByFieldName}");                              case GroupByArrayBehavior.ByIndividualValues:                                  singleGroupByFieldName += "[]";                                  break;                              case GroupByArrayBehavior.ByContent:                                  break;                          }
Missing Default,Raven.Client.Documents.Linq,RavenQueryProviderProcessor<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Linq\RavenQueryProviderProcessor.cs,HasComputation,The following switch statement is missing a default case: switch (cur.Expression?.NodeType)                  {                      case ExpressionType.Call:                      case ExpressionType.Invoke:                      case ExpressionType.Add:                      case ExpressionType.And:                      case ExpressionType.AndAlso:                      case ExpressionType.AndAssign:                      case ExpressionType.Decrement:                      case ExpressionType.Increment:                      case ExpressionType.PostDecrementAssign:                      case ExpressionType.PostIncrementAssign:                      case ExpressionType.PreDecrementAssign:                      case ExpressionType.PreIncrementAssign:                      case ExpressionType.AddAssign:                      case ExpressionType.AddAssignChecked:                      case ExpressionType.AddChecked:                      case ExpressionType.Index:                      case ExpressionType.Assign:                      case ExpressionType.Block:                      case ExpressionType.Conditional:                      case ExpressionType.ArrayIndex:                      case null:                          return true;                  }
Missing Default,Raven.Client.Documents.Operations.Backups,UploadProgress,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Operations\Backups\BackupStatus.cs,ChangeState,The following switch statement is missing a default case: switch (newState)              {                  case UploadState.PendingUpload:                      _sw.Restart();                      break;                  case UploadState.Done:                      _sw.Stop();                      break;              }
Missing Default,Raven.Client.Documents.Operations,Operation,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Operations\Operation.cs,OnNext,The following switch statement is missing a default case: switch (change.State.Status)                  {                      case OperationStatus.InProgress:                          if (onProgress != null && change.State.Progress != null)                          {                              onProgress(change.State.Progress);                          }                            break;                      case OperationStatus.Completed:                          StopProcessing();                          _result.TrySetResult(change.State.Result);                          break;                      case OperationStatus.Faulted:                          StopProcessing();                          var exceptionResult = (OperationExceptionResult)change.State.Result;                          Debug.Assert(exceptionResult != null);                          var ex = new ExceptionDispatcher.ExceptionSchema                          {                              Error = exceptionResult.Error'                              Message = exceptionResult.Message'                              Type = exceptionResult.Type'                              Url = _requestExecutor.Url                          };                          _result.TrySetException(ExceptionDispatcher.Get(ex' exceptionResult.StatusCode));                          break;                      case OperationStatus.Canceled:                          StopProcessing();                          _result.TrySetCanceled();                          break;                  }
Missing Default,Raven.Client.Documents.Operations.Counters,CounterOperation,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Operations\Counters\CounterBatch.cs,Parse,The following switch statement is missing a default case: switch (counterOperationType)              {                  case CounterOperationType.Increment:                  case CounterOperationType.Put:                      if (input.TryGet(nameof(Delta)' out delta) == false)                          ThrowMissingDeltaProperty(name' counterOperationType);                      break;              }
Missing Default,Raven.Client.Documents.Operations.ETL.SQL,SqlEtlConfiguration,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Operations\ETL\SQL\SqlEtlConfiguration.cs,UsingEncryptedCommunicationChannel,The following switch statement is missing a default case: switch (sslMode.ToLower())                      {                          case "require":                          case "verify-ca":                          case "verify-full":                              return true;                      }
Missing Default,Raven.Client.Documents.Operations.ETL.SQL,SqlEtlConfiguration,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Operations\ETL\SQL\SqlEtlConfiguration.cs,UsingEncryptedCommunicationChannel,The following switch statement is missing a default case: switch (sslMode.ToLower())                          {                              case "required":                              case "verifyca":                              case "verifyfull":                                  return true;                          }
Missing Default,Raven.Client.Documents.Operations.ETL.SQL,SqlEtlConfiguration,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Operations\ETL\SQL\SqlEtlConfiguration.cs,UsingEncryptedCommunicationChannel,The following switch statement is missing a default case: switch (protocol.ToLower())                      {                          case "tcps":                              return true;                      }
Missing Default,Raven.Client.Documents.Queries.Facets,RangeFacet<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Queries\Facets\RangeFacet.cs,ParseUnaryExpression,The following switch statement is missing a default case: switch (operand.NodeType)                  {                      case ExpressionType.MemberAccess:                          return ParseMemberExpression((MemberExpression)operand);                      case ExpressionType.Constant:                          var constant = (ConstantExpression)operand;                          var type = expression.Type.GetTypeInfo().IsGenericType ? expression.Type.GenericTypeArguments[0] : expression.Type;                          return Convert.ChangeType(constant.Value' type);                      case ExpressionType.Convert:                          return ParseUnaryExpression((UnaryExpression)operand);                      case ExpressionType.New:                      case ExpressionType.Call:                          return TryInvokeLambda(operand);                  }
Missing Default,Raven.Client.Documents.Session,OrderingUtil,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\Ordering.cs,GetOrderingFromRangeType,The following switch statement is missing a default case: switch (rangeType)              {                  case RangeType.Double:                      ordering = OrderingType.Double;                      break;                  case RangeType.Long:                      ordering = OrderingType.Long;                      break;              }
Missing Default,Raven.Client.Documents.Session.Operations,BatchOperation,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\Operations\BatchOperation.cs,HandlePatch,The following switch statement is missing a default case: switch (status)              {                  case PatchStatus.Created:                  case PatchStatus.Patched:                      if (batchResult.TryGet(nameof(PatchResult.ModifiedDocument)' out BlittableJsonReaderObject document) == false)                          return;                        var id = GetLazyStringField(batchResult' CommandType.PATCH' nameof(ICommandData.Id));                        if (_session.DocumentsById.TryGetValue(id' out var sessionDocumentInfo) == false)                          return;                        var documentInfo = GetOrAddModifications(id' sessionDocumentInfo' applyModifications: true);                        var changeVector = GetLazyStringField(batchResult' CommandType.PATCH' nameof(Constants.Documents.Metadata.ChangeVector));                      var lastModified = GetLazyStringField(batchResult' CommandType.PATCH' nameof(Constants.Documents.Metadata.LastModified));                        documentInfo.ChangeVector = changeVector;                        documentInfo.Metadata.Modifications = new DynamicJsonValue(documentInfo.Metadata)                      {                          [Constants.Documents.Metadata.Id] = id'                          [Constants.Documents.Metadata.ChangeVector] = changeVector'                          [Constants.Documents.Metadata.LastModified] = lastModified                      };                        using (var old = documentInfo.Document)                      {                          documentInfo.Document = document;                            ApplyMetadataModifications(id' documentInfo);                      }                        if (documentInfo.Entity != null)                      {                          _session.EntityToBlittable.PopulateEntity(documentInfo.Entity' id' documentInfo.Document' _session.JsonSerializer);                          var afterSaveChangesEventArgs = new AfterSaveChangesEventArgs(_session' documentInfo.Id' documentInfo.Entity);                          _session.OnAfterSaveChangesInvoke(afterSaveChangesEventArgs);                      }                      break;              }
Missing Default,Raven.Client.Documents.Session.Tokens,OrderByToken,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\Tokens\OrderByToken.cs,WriteTo,The following switch statement is missing a default case: switch (_ordering)                  {                      case OrderingType.Long:                          writer.Append(" as long");                          break;                      case OrderingType.Double:                          writer.Append(" as double");                          break;                      case OrderingType.AlphaNumeric:                          writer.Append(" as alphaNumeric");                          break;                  }
Missing Default,Raven.Client.Documents.Session.Tokens,WhereToken,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Session\Tokens\WhereToken.cs,WriteTo,The following switch statement is missing a default case: switch (WhereOperator)              {                  case WhereOperator.Search:                      writer.Append("search(");                      break;                  case WhereOperator.Lucene:                      writer.Append("lucene(");                      break;                  case WhereOperator.StartsWith:                      writer.Append("startsWith(");                      break;                  case WhereOperator.EndsWith:                      writer.Append("endsWith(");                      break;                  case WhereOperator.Exists:                      writer.Append("exists(");                      break;                  case WhereOperator.Spatial_Within:                      writer.Append("spatial.within(");                      break;                  case WhereOperator.Spatial_Contains:                      writer.Append("spatial.contains(");                      break;                  case WhereOperator.Spatial_Disjoint:                      writer.Append("spatial.disjoint(");                      break;                  case WhereOperator.Spatial_Intersects:                      writer.Append("spatial.intersects(");                      break;                  case WhereOperator.Regex:                      writer.Append("regex(");                      break;              }
Missing Default,Raven.Client.Documents.Subscriptions,SubscriptionWorker<T>,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Documents\Subscriptions\SubscriptionWorker.cs,ReadServerResponseAndGetVersion,The following switch statement is missing a default case: switch (reply.Status)                  {                      case TcpConnectionStatus.Ok:                          return reply.Version;                      case TcpConnectionStatus.AuthorizationFailed:                          throw new AuthorizationException($"Cannot access database {_dbName} because " + reply.Message);                      case TcpConnectionStatus.TcpVersionMismatch:                          if (reply.Version != TcpNegotiation.OutOfRangeStatus)                          {                              return reply.Version;                          }                          //Kindly request the server to drop the connection                          SendDropMessage(context' writer' reply);                          throw new InvalidOperationException($"Can't connect to database {_dbName} because: {reply.Message}");                  }
Missing Default,Raven.Client.Exceptions,UnsuccessfulFileAccessException,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Exceptions\UnsuccessfulFileAccessException.cs,GetMessage,The following switch statement is missing a default case: switch (underlyingException)              {                  //precaution' for completeness sake                  case ArgumentException _: //for windows                  case NotSupportedException _: //for posix                      msg += $"* The file path refers to a non-file device.{Environment.NewLine}";                      break;                  case PathTooLongException _: //precaution' for completeness sake                      msg += $"* The specified path' file name' or both exceed the system-defined maximum length.{Environment.NewLine}";                      break;                  case FileNotFoundException _:                      msg += $"* The file path refers to a non-existing file.{Environment.NewLine}";                      break;                  case SecurityException _:                      msg += $"* RavenDB process does not have the required permissions to open the file.{Environment.NewLine}";                      break;              }
Missing Default,Raven.Client.Extensions,ExpressionExtensions,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Extensions\ExpressionExtensions.cs,ToProperty,The following switch statement is missing a default case: switch (unaryExpression.NodeType)                  {                      case ExpressionType.Convert:                      case ExpressionType.ConvertChecked:                          expression = unaryExpression.Operand;                          break;                  }
Missing Default,Raven.Client.Json,BlittableJsonWriter,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Json\BlittableJsonWriter.cs,WriteValue,The following switch statement is missing a default case: switch (value)              {                  case BlittableJsonReaderObject readerObject:                      if (false == readerObject.HasParent)                      {                          _manualBlittableJsonDocumentBuilder.WriteEmbeddedBlittableDocument(readerObject);                      }                      else                      {                          using (var clonedBlittable = readerObject.CloneOnTheSameContext())                          {                              _manualBlittableJsonDocumentBuilder.WriteEmbeddedBlittableDocument(clonedBlittable);                          }                      }                      return;                  case LazyStringValue lazyStringValue:                      _manualBlittableJsonDocumentBuilder.WriteValue(lazyStringValue);                      return;              }
Missing Default,Raven.Client.Util,DictionarySupport,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Util\JavascriptConversionExtensions.cs,ConvertToJavascript,The following switch statement is missing a default case: switch (contextNode.Member.Name)                      {                          case "Count":                          {                              var expression = Expression.Call(                                  typeof(Enumerable)'                                  "Count"'                                  new[] { keyValuePairType }'                                  contextNode.Expression                              );                              _innerCallExpected = DictionaryInnerCall.Key;                              context.Visitor.Visit(expression);                              return;                          }                          case "Keys":                              _innerCallExpected = DictionaryInnerCall.Key;                              context.Visitor.Visit(contextNode.Expression);                              return;                          case "Values":                              _innerCallExpected = DictionaryInnerCall.Value;                              context.Visitor.Visit(contextNode.Expression);                              return;                      }
Missing Default,Raven.Client.Util,DictionarySupport,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Util\JavascriptConversionExtensions.cs,ConvertToJavascript,The following switch statement is missing a default case: switch (currentCall)                              {                                  case DictionaryInnerCall.Value:                                      writer.Write("return ");                                      context.Visitor.Visit(context.Node);                                      writer.Write("[a];");                                      break;                                  case DictionaryInnerCall.KeyValue:                                      writer.Write("return{Key: a'Value:");                                      context.Visitor.Visit(context.Node);                                      writer.Write("[a]};");                                      break;                              }
Missing Default,Raven.Client.Util,DateTimeSupport,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Util\JavascriptConversionExtensions.cs,ConvertToJavascript,The following switch statement is missing a default case: switch (node.Member.Name)                          {                              case "MinValue":                                  writer.Write("new Date(-62135596800000)");                                  break;                              case "MaxValue":                                  writer.Write("new Date(253402297199999)");                                  break;                              case "Now":                                  writer.Write("new Date(Date.now())");                                  break;                              case "UtcNow":                                  writer.Write(                                      @"(function (date) { return new Date(date.getUTCFullYear()' date.getUTCMonth()' date.getUTCDate()' date.getUTCHours()' date.getUTCMinutes()' date.getUTCSeconds()' date.getUTCMilliseconds());})(new Date())");                                  break;                              case "Today":                                  writer.Write("new Date(new Date().setHours(0'0'0'0))");                                  break;                          }
Missing Default,Raven.Client.Util,DateTimeSupport,C:\research\architectureSmells\repos\ravendb_ravendb\src\Raven.Client\Util\JavascriptConversionExtensions.cs,ConvertToJavascript,The following switch statement is missing a default case: switch (node.Member.Name)                          {                              case "Year":                                  writer.Write(IsUtc() ? ".getUTCFullYear()" : ".getFullYear()");                                  break;                              case "Month":                                  writer.Write(IsUtc() ? ".getUTCMonth()+1" : ".getMonth()+1");                                  break;                              case "Day":                                  writer.Write(IsUtc() ? ".getUTCDate()" : ".getDate()");                                  break;                              case "Hour":                                  writer.Write(IsUtc() ? ".getUTCHours()" : ".getHours()");                                  break;                              case "Minute":                                  writer.Write(IsUtc() ? ".getUTCMinutes()" : ".getMinutes()");                                  break;                              case "Second":                                  writer.Write(IsUtc() ? ".getUTCSeconds()" : ".getSeconds()");                                  break;                              case "Millisecond":                                  writer.Write(IsUtc() ? ".getUTCMilliseconds()" : ".getMilliseconds()");                                  break;                              case "Ticks":                                  writer.Write(".getTime()*10000");                                  break;                          }
