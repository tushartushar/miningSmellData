Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Micro.Benchmark.Benchmarks.LZ4,Lz4Benchmark,C:\repos\ravendb_ravendb\bench\Micro.Benchmark\Benchmarks\LZ4\LZ4Benchmark.cs,Setup,Cyclomatic complexity of the method is 9
Complex Method,Micro.Benchmark.PageLocatorImpl,PageLocatorV7,C:\repos\ravendb_ravendb\bench\Micro.Benchmark\PageLocatorImpl\PageLocatorV7.cs,GetReadOnlyPage,Cyclomatic complexity of the method is 11
Complex Method,Micro.Benchmark.PageLocatorImpl,PageLocatorV7,C:\repos\ravendb_ravendb\bench\Micro.Benchmark\PageLocatorImpl\PageLocatorV7.cs,GetWritablePage,Cyclomatic complexity of the method is 11
Complex Method,Micro.Benchmark.PageLocatorImpl,PageLocatorV7,C:\repos\ravendb_ravendb\bench\Micro.Benchmark\PageLocatorImpl\PageLocatorV7.cs,Reset,Cyclomatic complexity of the method is 11
Long Statement,Micro.Benchmark.Benchmarks.LZ4,Lz4Benchmark,C:\repos\ravendb_ravendb\bench\Micro.Benchmark\Benchmarks\LZ4\LZ4Benchmark.cs,Setup,The length of the statement  "                    int compressedSize = Sparrow.Compression.LZ4.Encode64(bufferPtr' _lz4Buffer.Ptr' generatedDataLength' _lz4Buffer.Length); " is 121.
Magic Number,Micro.Benchmark.Benchmarks.LZ4,Lz4Benchmark,C:\repos\ravendb_ravendb\bench\Micro.Benchmark\Benchmarks\LZ4\LZ4Benchmark.cs,Setup,The following statement contains a magic number: for (int i = 0; i < NumberOfOperations; i++)              {                  var generatedDataLength = generator.Next(DataMaximumLength);                  List<int> usedSequences = new List<int>();                  for (var j = 0; j < generatedDataLength; j++)                  {                      bool useSequence = generator.NextDouble() < SequenceUsageProbability;                      if (sequences.Count > 0 && useSequence)                      {                          byte[] sequence;                          bool repeatSequence = generator.NextDouble() < SequenceRepetitionProbability;                          if (repeatSequence && usedSequences.Count > 0)                          {                              int index = generator.Next(usedSequences.Count);                              sequence = sequences[usedSequences[index]];                          }                          else                          {                              int index = generator.Next(sequences.Count);                              sequence = sequences[index];                              usedSequences.Add(index);                          }                            fixed (byte* bufferPtr = &buffer[j])                          fixed (byte* sequencePtr = sequence)                          {                              int amount = Math.Min(sequence.Length' generatedDataLength - j);                              Memory.Copy(bufferPtr' sequencePtr' amount);                              j += amount;                          }                      }                      else                      {                          var spontaneousSequenceLength = Math.Min(generator.Next(GeneratedSequenceMaximumLength)' generatedDataLength - j);                          for (int k = 0; k < spontaneousSequenceLength; k++' j++)                          {                              buffer[j] = (byte)generator.Next(256);                          }                      }                  }                    // Flip bytes on the generated sequence' as required                  bool flipGeneratedSequence = generator.NextDouble() < DataFlipProbability;                  if (flipGeneratedSequence)                  {                      for (var j = 0; j < generatedDataLength; j++)                      {                          bool flipGeneratedByte = generator.NextDouble() < DataByteFlipProbability;                          if (flipGeneratedByte)                              buffer[j] ^= (byte)generator.Next(256);                      }                  }                    // Calculate compression size and store the generated data                  fixed (byte* bufferPtr = buffer)                  {                      int compressedSize = Sparrow.Compression.LZ4.Encode64(bufferPtr' _lz4Buffer.Ptr' generatedDataLength' _lz4Buffer.Length);                        ByteString unmanagedBuffer;                      _allocator.From(_lz4Buffer.Ptr' compressedSize' ByteStringType.Immutable' out unmanagedBuffer);                      _buffers.Add(new Tuple<ByteString' int>(unmanagedBuffer' generatedDataLength));                  }              }
Magic Number,Micro.Benchmark.Benchmarks.LZ4,Lz4Benchmark,C:\repos\ravendb_ravendb\bench\Micro.Benchmark\Benchmarks\LZ4\LZ4Benchmark.cs,Setup,The following statement contains a magic number: for (int i = 0; i < NumberOfOperations; i++)              {                  var generatedDataLength = generator.Next(DataMaximumLength);                  List<int> usedSequences = new List<int>();                  for (var j = 0; j < generatedDataLength; j++)                  {                      bool useSequence = generator.NextDouble() < SequenceUsageProbability;                      if (sequences.Count > 0 && useSequence)                      {                          byte[] sequence;                          bool repeatSequence = generator.NextDouble() < SequenceRepetitionProbability;                          if (repeatSequence && usedSequences.Count > 0)                          {                              int index = generator.Next(usedSequences.Count);                              sequence = sequences[usedSequences[index]];                          }                          else                          {                              int index = generator.Next(sequences.Count);                              sequence = sequences[index];                              usedSequences.Add(index);                          }                            fixed (byte* bufferPtr = &buffer[j])                          fixed (byte* sequencePtr = sequence)                          {                              int amount = Math.Min(sequence.Length' generatedDataLength - j);                              Memory.Copy(bufferPtr' sequencePtr' amount);                              j += amount;                          }                      }                      else                      {                          var spontaneousSequenceLength = Math.Min(generator.Next(GeneratedSequenceMaximumLength)' generatedDataLength - j);                          for (int k = 0; k < spontaneousSequenceLength; k++' j++)                          {                              buffer[j] = (byte)generator.Next(256);                          }                      }                  }                    // Flip bytes on the generated sequence' as required                  bool flipGeneratedSequence = generator.NextDouble() < DataFlipProbability;                  if (flipGeneratedSequence)                  {                      for (var j = 0; j < generatedDataLength; j++)                      {                          bool flipGeneratedByte = generator.NextDouble() < DataByteFlipProbability;                          if (flipGeneratedByte)                              buffer[j] ^= (byte)generator.Next(256);                      }                  }                    // Calculate compression size and store the generated data                  fixed (byte* bufferPtr = buffer)                  {                      int compressedSize = Sparrow.Compression.LZ4.Encode64(bufferPtr' _lz4Buffer.Ptr' generatedDataLength' _lz4Buffer.Length);                        ByteString unmanagedBuffer;                      _allocator.From(_lz4Buffer.Ptr' compressedSize' ByteStringType.Immutable' out unmanagedBuffer);                      _buffers.Add(new Tuple<ByteString' int>(unmanagedBuffer' generatedDataLength));                  }              }
Magic Number,Micro.Benchmark.Benchmarks.PageLocator,PlRandomRead,C:\repos\ravendb_ravendb\bench\Micro.Benchmark\Benchmarks\PageLocator\PlRandomRead.cs,Setup,The following statement contains a magic number: for (int i = 0; i < NumberOfOperations; i++)              {                  long valueBuffer = generator.Next();                  valueBuffer += (long)generator.Next() << 32;                  valueBuffer += (long)generator.Next() << 64;                  valueBuffer += (long)generator.Next() << 96;                    _pageNumbers.Add(valueBuffer);              }
Magic Number,Micro.Benchmark.Benchmarks.PageLocator,PlRandomRead,C:\repos\ravendb_ravendb\bench\Micro.Benchmark\Benchmarks\PageLocator\PlRandomRead.cs,Setup,The following statement contains a magic number: for (int i = 0; i < NumberOfOperations; i++)              {                  long valueBuffer = generator.Next();                  valueBuffer += (long)generator.Next() << 32;                  valueBuffer += (long)generator.Next() << 64;                  valueBuffer += (long)generator.Next() << 96;                    _pageNumbers.Add(valueBuffer);              }
Magic Number,Micro.Benchmark.Benchmarks.PageLocator,PlRandomRead,C:\repos\ravendb_ravendb\bench\Micro.Benchmark\Benchmarks\PageLocator\PlRandomRead.cs,Setup,The following statement contains a magic number: for (int i = 0; i < NumberOfOperations; i++)              {                  long valueBuffer = generator.Next();                  valueBuffer += (long)generator.Next() << 32;                  valueBuffer += (long)generator.Next() << 64;                  valueBuffer += (long)generator.Next() << 96;                    _pageNumbers.Add(valueBuffer);              }
Magic Number,Micro.Benchmark.Benchmarks.PageLocator,PlRandomWrite,C:\repos\ravendb_ravendb\bench\Micro.Benchmark\Benchmarks\PageLocator\PlRandomWrite.cs,Setup,The following statement contains a magic number: for (int i = 0; i < NumberOfOperations; i++)              {                  long valueBuffer = generator.Next();                  valueBuffer += (long)generator.Next() << 32;                  valueBuffer += (long)generator.Next() << 64;                  valueBuffer += (long)generator.Next() << 96;                    _pageNumbers.Add(valueBuffer);              }
Magic Number,Micro.Benchmark.Benchmarks.PageLocator,PlRandomWrite,C:\repos\ravendb_ravendb\bench\Micro.Benchmark\Benchmarks\PageLocator\PlRandomWrite.cs,Setup,The following statement contains a magic number: for (int i = 0; i < NumberOfOperations; i++)              {                  long valueBuffer = generator.Next();                  valueBuffer += (long)generator.Next() << 32;                  valueBuffer += (long)generator.Next() << 64;                  valueBuffer += (long)generator.Next() << 96;                    _pageNumbers.Add(valueBuffer);              }
Magic Number,Micro.Benchmark.Benchmarks.PageLocator,PlRandomWrite,C:\repos\ravendb_ravendb\bench\Micro.Benchmark\Benchmarks\PageLocator\PlRandomWrite.cs,Setup,The following statement contains a magic number: for (int i = 0; i < NumberOfOperations; i++)              {                  long valueBuffer = generator.Next();                  valueBuffer += (long)generator.Next() << 32;                  valueBuffer += (long)generator.Next() << 64;                  valueBuffer += (long)generator.Next() << 96;                    _pageNumbers.Add(valueBuffer);              }
Magic Number,Micro.Benchmark.Benchmarks.Sorting,SortingPerformance,C:\repos\ravendb_ravendb\bench\Micro.Benchmark\Benchmarks\Sorting\Sorting.cs,GeneratorWithDuplicates,The following statement contains a magic number: for (int i = 0; i < size; i++)                  result[i] = gen.Next(0' size / 4);
Magic Number,Micro.Benchmark.PageLocatorImpl,PageLocatorCurrent,C:\repos\ravendb_ravendb\bench\Micro.Benchmark\PageLocatorImpl\PageLocatorCurrent.cs,PageLocatorCurrent,The following statement contains a magic number: if (cacheSize > 1024)                  cacheSize = 1024;
Magic Number,Micro.Benchmark.PageLocatorImpl,PageLocatorCurrent,C:\repos\ravendb_ravendb\bench\Micro.Benchmark\PageLocatorImpl\PageLocatorCurrent.cs,PageLocatorCurrent,The following statement contains a magic number: if (cacheSize > 1024)                  cacheSize = 1024;
Magic Number,Micro.Benchmark.PageLocatorImpl,PageLocatorCurrent,C:\repos\ravendb_ravendb\bench\Micro.Benchmark\PageLocatorImpl\PageLocatorCurrent.cs,PageLocatorCurrent,The following statement contains a magic number: _andMask = (int)(0xFFFFFFFF >> (sizeof(uint) * 8 - shiftRight));
Magic Number,Micro.Benchmark.PageLocatorImpl,PageLocatorV5,C:\repos\ravendb_ravendb\bench\Micro.Benchmark\PageLocatorImpl\PageLocatorV5.cs,PageLocatorV5,The following statement contains a magic number: if (_cacheSize % 4 != 0)              {                  _cacheSize += 4 - _cacheSize % 4;              }
Magic Number,Micro.Benchmark.PageLocatorImpl,PageLocatorV5,C:\repos\ravendb_ravendb\bench\Micro.Benchmark\PageLocatorImpl\PageLocatorV5.cs,PageLocatorV5,The following statement contains a magic number: if (_cacheSize % 4 != 0)              {                  _cacheSize += 4 - _cacheSize % 4;              }
Magic Number,Micro.Benchmark.PageLocatorImpl,PageLocatorV5,C:\repos\ravendb_ravendb\bench\Micro.Benchmark\PageLocatorImpl\PageLocatorV5.cs,PageLocatorV5,The following statement contains a magic number: if (_cacheSize % 4 != 0)              {                  _cacheSize += 4 - _cacheSize % 4;              }
Magic Number,Micro.Benchmark.PageLocatorImpl,PageLocatorV5,C:\repos\ravendb_ravendb\bench\Micro.Benchmark\PageLocatorImpl\PageLocatorV5.cs,GetReadOnlyPage,The following statement contains a magic number: while (i < size)              {                  int f1 = _fingerprints[i + 0];                  int f2 = _fingerprints[i + 1];                  int f3 = _fingerprints[i + 2];                  int f4 = _fingerprints[i + 3];                    // This is used to force the JIT to layout the code as if unlikely() compiler directive existed.                  if (f1 == fingerprint)                      goto Found;                    if (f2 == fingerprint)                  {                      i += 1; goto Found;                  }                    if (f3 == fingerprint)                  {                      i += 2; goto Found;                  }                    if (f4 == fingerprint)                  {                      i += 1; goto Found;                  }                    i += 4;              }
Magic Number,Micro.Benchmark.PageLocatorImpl,PageLocatorV5,C:\repos\ravendb_ravendb\bench\Micro.Benchmark\PageLocatorImpl\PageLocatorV5.cs,GetReadOnlyPage,The following statement contains a magic number: while (i < size)              {                  int f1 = _fingerprints[i + 0];                  int f2 = _fingerprints[i + 1];                  int f3 = _fingerprints[i + 2];                  int f4 = _fingerprints[i + 3];                    // This is used to force the JIT to layout the code as if unlikely() compiler directive existed.                  if (f1 == fingerprint)                      goto Found;                    if (f2 == fingerprint)                  {                      i += 1; goto Found;                  }                    if (f3 == fingerprint)                  {                      i += 2; goto Found;                  }                    if (f4 == fingerprint)                  {                      i += 1; goto Found;                  }                    i += 4;              }
Magic Number,Micro.Benchmark.PageLocatorImpl,PageLocatorV5,C:\repos\ravendb_ravendb\bench\Micro.Benchmark\PageLocatorImpl\PageLocatorV5.cs,GetReadOnlyPage,The following statement contains a magic number: while (i < size)              {                  int f1 = _fingerprints[i + 0];                  int f2 = _fingerprints[i + 1];                  int f3 = _fingerprints[i + 2];                  int f4 = _fingerprints[i + 3];                    // This is used to force the JIT to layout the code as if unlikely() compiler directive existed.                  if (f1 == fingerprint)                      goto Found;                    if (f2 == fingerprint)                  {                      i += 1; goto Found;                  }                    if (f3 == fingerprint)                  {                      i += 2; goto Found;                  }                    if (f4 == fingerprint)                  {                      i += 1; goto Found;                  }                    i += 4;              }
Magic Number,Micro.Benchmark.PageLocatorImpl,PageLocatorV5,C:\repos\ravendb_ravendb\bench\Micro.Benchmark\PageLocatorImpl\PageLocatorV5.cs,GetReadOnlyPage,The following statement contains a magic number: while (i < size)              {                  int f1 = _fingerprints[i + 0];                  int f2 = _fingerprints[i + 1];                  int f3 = _fingerprints[i + 2];                  int f4 = _fingerprints[i + 3];                    // This is used to force the JIT to layout the code as if unlikely() compiler directive existed.                  if (f1 == fingerprint)                      goto Found;                    if (f2 == fingerprint)                  {                      i += 1; goto Found;                  }                    if (f3 == fingerprint)                  {                      i += 2; goto Found;                  }                    if (f4 == fingerprint)                  {                      i += 1; goto Found;                  }                    i += 4;              }
Magic Number,Micro.Benchmark.PageLocatorImpl,PageLocatorV5,C:\repos\ravendb_ravendb\bench\Micro.Benchmark\PageLocatorImpl\PageLocatorV5.cs,GetWritablePage,The following statement contains a magic number: while (i < size)              {                  int f1 = _fingerprints[i + 0];                  int f2 = _fingerprints[i + 1];                  int f3 = _fingerprints[i + 2];                  int f4 = _fingerprints[i + 3];                    // This is used to force the JIT to layout the code as if unlikely() compiler directive existed.                  if (f1 == fingerprint)                      goto Found;                    if (f2 == fingerprint)                  {                      i += 1; goto Found;                  }                    if (f3 == fingerprint)                  {                      i += 2; goto Found;                  }                    if (f4 == fingerprint)                  {                      i += 1; goto Found;                  }                    i += 4;              }
Magic Number,Micro.Benchmark.PageLocatorImpl,PageLocatorV5,C:\repos\ravendb_ravendb\bench\Micro.Benchmark\PageLocatorImpl\PageLocatorV5.cs,GetWritablePage,The following statement contains a magic number: while (i < size)              {                  int f1 = _fingerprints[i + 0];                  int f2 = _fingerprints[i + 1];                  int f3 = _fingerprints[i + 2];                  int f4 = _fingerprints[i + 3];                    // This is used to force the JIT to layout the code as if unlikely() compiler directive existed.                  if (f1 == fingerprint)                      goto Found;                    if (f2 == fingerprint)                  {                      i += 1; goto Found;                  }                    if (f3 == fingerprint)                  {                      i += 2; goto Found;                  }                    if (f4 == fingerprint)                  {                      i += 1; goto Found;                  }                    i += 4;              }
Magic Number,Micro.Benchmark.PageLocatorImpl,PageLocatorV5,C:\repos\ravendb_ravendb\bench\Micro.Benchmark\PageLocatorImpl\PageLocatorV5.cs,GetWritablePage,The following statement contains a magic number: while (i < size)              {                  int f1 = _fingerprints[i + 0];                  int f2 = _fingerprints[i + 1];                  int f3 = _fingerprints[i + 2];                  int f4 = _fingerprints[i + 3];                    // This is used to force the JIT to layout the code as if unlikely() compiler directive existed.                  if (f1 == fingerprint)                      goto Found;                    if (f2 == fingerprint)                  {                      i += 1; goto Found;                  }                    if (f3 == fingerprint)                  {                      i += 2; goto Found;                  }                    if (f4 == fingerprint)                  {                      i += 1; goto Found;                  }                    i += 4;              }
Magic Number,Micro.Benchmark.PageLocatorImpl,PageLocatorV5,C:\repos\ravendb_ravendb\bench\Micro.Benchmark\PageLocatorImpl\PageLocatorV5.cs,GetWritablePage,The following statement contains a magic number: while (i < size)              {                  int f1 = _fingerprints[i + 0];                  int f2 = _fingerprints[i + 1];                  int f3 = _fingerprints[i + 2];                  int f4 = _fingerprints[i + 3];                    // This is used to force the JIT to layout the code as if unlikely() compiler directive existed.                  if (f1 == fingerprint)                      goto Found;                    if (f2 == fingerprint)                  {                      i += 1; goto Found;                  }                    if (f3 == fingerprint)                  {                      i += 2; goto Found;                  }                    if (f4 == fingerprint)                  {                      i += 1; goto Found;                  }                    i += 4;              }
Magic Number,Micro.Benchmark.PageLocatorImpl,PageLocatorV5,C:\repos\ravendb_ravendb\bench\Micro.Benchmark\PageLocatorImpl\PageLocatorV5.cs,Reset,The following statement contains a magic number: while (i < size)              {                  int f1 = _fingerprints[i + 0];                  int f2 = _fingerprints[i + 1];                  int f3 = _fingerprints[i + 2];                  int f4 = _fingerprints[i + 3];                    // This is used to force the JIT to layout the code as if unlikely() compiler directive existed.                  if (f1 == fingerprint)                      goto Found;                    if (f2 == fingerprint)                  {                      i += 1; goto Found;                  }                    if (f3 == fingerprint)                  {                      i += 2; goto Found;                  }                    if (f4 == fingerprint)                  {                      i += 1; goto Found;                  }                    i += 4;              }
Magic Number,Micro.Benchmark.PageLocatorImpl,PageLocatorV5,C:\repos\ravendb_ravendb\bench\Micro.Benchmark\PageLocatorImpl\PageLocatorV5.cs,Reset,The following statement contains a magic number: while (i < size)              {                  int f1 = _fingerprints[i + 0];                  int f2 = _fingerprints[i + 1];                  int f3 = _fingerprints[i + 2];                  int f4 = _fingerprints[i + 3];                    // This is used to force the JIT to layout the code as if unlikely() compiler directive existed.                  if (f1 == fingerprint)                      goto Found;                    if (f2 == fingerprint)                  {                      i += 1; goto Found;                  }                    if (f3 == fingerprint)                  {                      i += 2; goto Found;                  }                    if (f4 == fingerprint)                  {                      i += 1; goto Found;                  }                    i += 4;              }
Magic Number,Micro.Benchmark.PageLocatorImpl,PageLocatorV5,C:\repos\ravendb_ravendb\bench\Micro.Benchmark\PageLocatorImpl\PageLocatorV5.cs,Reset,The following statement contains a magic number: while (i < size)              {                  int f1 = _fingerprints[i + 0];                  int f2 = _fingerprints[i + 1];                  int f3 = _fingerprints[i + 2];                  int f4 = _fingerprints[i + 3];                    // This is used to force the JIT to layout the code as if unlikely() compiler directive existed.                  if (f1 == fingerprint)                      goto Found;                    if (f2 == fingerprint)                  {                      i += 1; goto Found;                  }                    if (f3 == fingerprint)                  {                      i += 2; goto Found;                  }                    if (f4 == fingerprint)                  {                      i += 1; goto Found;                  }                    i += 4;              }
Magic Number,Micro.Benchmark.PageLocatorImpl,PageLocatorV5,C:\repos\ravendb_ravendb\bench\Micro.Benchmark\PageLocatorImpl\PageLocatorV5.cs,Reset,The following statement contains a magic number: while (i < size)              {                  int f1 = _fingerprints[i + 0];                  int f2 = _fingerprints[i + 1];                  int f3 = _fingerprints[i + 2];                  int f4 = _fingerprints[i + 3];                    // This is used to force the JIT to layout the code as if unlikely() compiler directive existed.                  if (f1 == fingerprint)                      goto Found;                    if (f2 == fingerprint)                  {                      i += 1; goto Found;                  }                    if (f3 == fingerprint)                  {                      i += 2; goto Found;                  }                    if (f4 == fingerprint)                  {                      i += 1; goto Found;                  }                    i += 4;              }
Magic Number,Micro.Benchmark.PageLocatorImpl,PageLocatorV6,C:\repos\ravendb_ravendb\bench\Micro.Benchmark\PageLocatorImpl\PageLocatorV6.cs,PageLocatorV6,The following statement contains a magic number: if (_cacheSize % 4 != 0)              {                  _cacheSize += 4 - _cacheSize % 4;              }
Magic Number,Micro.Benchmark.PageLocatorImpl,PageLocatorV6,C:\repos\ravendb_ravendb\bench\Micro.Benchmark\PageLocatorImpl\PageLocatorV6.cs,PageLocatorV6,The following statement contains a magic number: if (_cacheSize % 4 != 0)              {                  _cacheSize += 4 - _cacheSize % 4;              }
Magic Number,Micro.Benchmark.PageLocatorImpl,PageLocatorV6,C:\repos\ravendb_ravendb\bench\Micro.Benchmark\PageLocatorImpl\PageLocatorV6.cs,PageLocatorV6,The following statement contains a magic number: if (_cacheSize % 4 != 0)              {                  _cacheSize += 4 - _cacheSize % 4;              }
Magic Number,Micro.Benchmark.PageLocatorImpl,PageLocatorV6,C:\repos\ravendb_ravendb\bench\Micro.Benchmark\PageLocatorImpl\PageLocatorV6.cs,GetReadOnlyPage,The following statement contains a magic number: while (i < size)              {                  int f1 = _fingerprints[i + 0];                  int f2 = _fingerprints[i + 1];                  int f3 = _fingerprints[i + 2];                  int f4 = _fingerprints[i + 3];                    // This is used to force the JIT to layout the code as if unlikely() compiler directive existed.                  if (f1 == fingerprint) goto Found;                    if (f2 == fingerprint) goto Found1;                    if (f3 == fingerprint) goto Found2;                    if (f4 == fingerprint) goto Found3;                    i += 4;              }
Magic Number,Micro.Benchmark.PageLocatorImpl,PageLocatorV6,C:\repos\ravendb_ravendb\bench\Micro.Benchmark\PageLocatorImpl\PageLocatorV6.cs,GetReadOnlyPage,The following statement contains a magic number: while (i < size)              {                  int f1 = _fingerprints[i + 0];                  int f2 = _fingerprints[i + 1];                  int f3 = _fingerprints[i + 2];                  int f4 = _fingerprints[i + 3];                    // This is used to force the JIT to layout the code as if unlikely() compiler directive existed.                  if (f1 == fingerprint) goto Found;                    if (f2 == fingerprint) goto Found1;                    if (f3 == fingerprint) goto Found2;                    if (f4 == fingerprint) goto Found3;                    i += 4;              }
Magic Number,Micro.Benchmark.PageLocatorImpl,PageLocatorV6,C:\repos\ravendb_ravendb\bench\Micro.Benchmark\PageLocatorImpl\PageLocatorV6.cs,GetReadOnlyPage,The following statement contains a magic number: while (i < size)              {                  int f1 = _fingerprints[i + 0];                  int f2 = _fingerprints[i + 1];                  int f3 = _fingerprints[i + 2];                  int f4 = _fingerprints[i + 3];                    // This is used to force the JIT to layout the code as if unlikely() compiler directive existed.                  if (f1 == fingerprint) goto Found;                    if (f2 == fingerprint) goto Found1;                    if (f3 == fingerprint) goto Found2;                    if (f4 == fingerprint) goto Found3;                    i += 4;              }
Magic Number,Micro.Benchmark.PageLocatorImpl,PageLocatorV6,C:\repos\ravendb_ravendb\bench\Micro.Benchmark\PageLocatorImpl\PageLocatorV6.cs,GetReadOnlyPage,The following statement contains a magic number: Found2: i += 2;
Magic Number,Micro.Benchmark.PageLocatorImpl,PageLocatorV6,C:\repos\ravendb_ravendb\bench\Micro.Benchmark\PageLocatorImpl\PageLocatorV6.cs,GetReadOnlyPage,The following statement contains a magic number: Found3: i += 3;
Magic Number,Micro.Benchmark.PageLocatorImpl,PageLocatorV6,C:\repos\ravendb_ravendb\bench\Micro.Benchmark\PageLocatorImpl\PageLocatorV6.cs,GetWritablePage,The following statement contains a magic number: while (i < size)              {                  int f1 = _fingerprints[i + 0];                  int f2 = _fingerprints[i + 1];                  int f3 = _fingerprints[i + 2];                  int f4 = _fingerprints[i + 3];                    // This is used to force the JIT to layout the code as if unlikely() compiler directive existed.                  if (f1 == fingerprint) goto Found;                    if (f2 == fingerprint) goto Found1;                    if (f3 == fingerprint) goto Found2;                    if (f4 == fingerprint) goto Found3;                    i += 4;              }
Magic Number,Micro.Benchmark.PageLocatorImpl,PageLocatorV6,C:\repos\ravendb_ravendb\bench\Micro.Benchmark\PageLocatorImpl\PageLocatorV6.cs,GetWritablePage,The following statement contains a magic number: while (i < size)              {                  int f1 = _fingerprints[i + 0];                  int f2 = _fingerprints[i + 1];                  int f3 = _fingerprints[i + 2];                  int f4 = _fingerprints[i + 3];                    // This is used to force the JIT to layout the code as if unlikely() compiler directive existed.                  if (f1 == fingerprint) goto Found;                    if (f2 == fingerprint) goto Found1;                    if (f3 == fingerprint) goto Found2;                    if (f4 == fingerprint) goto Found3;                    i += 4;              }
Magic Number,Micro.Benchmark.PageLocatorImpl,PageLocatorV6,C:\repos\ravendb_ravendb\bench\Micro.Benchmark\PageLocatorImpl\PageLocatorV6.cs,GetWritablePage,The following statement contains a magic number: while (i < size)              {                  int f1 = _fingerprints[i + 0];                  int f2 = _fingerprints[i + 1];                  int f3 = _fingerprints[i + 2];                  int f4 = _fingerprints[i + 3];                    // This is used to force the JIT to layout the code as if unlikely() compiler directive existed.                  if (f1 == fingerprint) goto Found;                    if (f2 == fingerprint) goto Found1;                    if (f3 == fingerprint) goto Found2;                    if (f4 == fingerprint) goto Found3;                    i += 4;              }
Magic Number,Micro.Benchmark.PageLocatorImpl,PageLocatorV6,C:\repos\ravendb_ravendb\bench\Micro.Benchmark\PageLocatorImpl\PageLocatorV6.cs,GetWritablePage,The following statement contains a magic number: Found2: i += 2;
Magic Number,Micro.Benchmark.PageLocatorImpl,PageLocatorV6,C:\repos\ravendb_ravendb\bench\Micro.Benchmark\PageLocatorImpl\PageLocatorV6.cs,GetWritablePage,The following statement contains a magic number: Found3: i += 3;
Magic Number,Micro.Benchmark.PageLocatorImpl,PageLocatorV6,C:\repos\ravendb_ravendb\bench\Micro.Benchmark\PageLocatorImpl\PageLocatorV6.cs,Reset,The following statement contains a magic number: while (i < size)              {                  int f1 = _fingerprints[i + 0];                  int f2 = _fingerprints[i + 1];                  int f3 = _fingerprints[i + 2];                  int f4 = _fingerprints[i + 3];                    // This is used to force the JIT to layout the code as if unlikely() compiler directive existed.                  if (f1 == fingerprint) goto Found;                    if (f2 == fingerprint) goto Found1;                    if (f3 == fingerprint) goto Found2;                    if (f4 == fingerprint) goto Found3;                    i += 4;              }
Magic Number,Micro.Benchmark.PageLocatorImpl,PageLocatorV6,C:\repos\ravendb_ravendb\bench\Micro.Benchmark\PageLocatorImpl\PageLocatorV6.cs,Reset,The following statement contains a magic number: while (i < size)              {                  int f1 = _fingerprints[i + 0];                  int f2 = _fingerprints[i + 1];                  int f3 = _fingerprints[i + 2];                  int f4 = _fingerprints[i + 3];                    // This is used to force the JIT to layout the code as if unlikely() compiler directive existed.                  if (f1 == fingerprint) goto Found;                    if (f2 == fingerprint) goto Found1;                    if (f3 == fingerprint) goto Found2;                    if (f4 == fingerprint) goto Found3;                    i += 4;              }
Magic Number,Micro.Benchmark.PageLocatorImpl,PageLocatorV6,C:\repos\ravendb_ravendb\bench\Micro.Benchmark\PageLocatorImpl\PageLocatorV6.cs,Reset,The following statement contains a magic number: while (i < size)              {                  int f1 = _fingerprints[i + 0];                  int f2 = _fingerprints[i + 1];                  int f3 = _fingerprints[i + 2];                  int f4 = _fingerprints[i + 3];                    // This is used to force the JIT to layout the code as if unlikely() compiler directive existed.                  if (f1 == fingerprint) goto Found;                    if (f2 == fingerprint) goto Found1;                    if (f3 == fingerprint) goto Found2;                    if (f4 == fingerprint) goto Found3;                    i += 4;              }
Magic Number,Micro.Benchmark.PageLocatorImpl,PageLocatorV6,C:\repos\ravendb_ravendb\bench\Micro.Benchmark\PageLocatorImpl\PageLocatorV6.cs,Reset,The following statement contains a magic number: Found2: i += 2;
Magic Number,Micro.Benchmark.PageLocatorImpl,PageLocatorV6,C:\repos\ravendb_ravendb\bench\Micro.Benchmark\PageLocatorImpl\PageLocatorV6.cs,Reset,The following statement contains a magic number: Found3: i += 3;
Magic Number,Micro.Benchmark.PageLocatorImpl,PageLocatorV7,C:\repos\ravendb_ravendb\bench\Micro.Benchmark\PageLocatorImpl\PageLocatorV7.cs,PageLocatorV7,The following statement contains a magic number: if (_cacheSize % 8 != 0)              {                  _cacheSize += 8 - _cacheSize % 8;              }
Magic Number,Micro.Benchmark.PageLocatorImpl,PageLocatorV7,C:\repos\ravendb_ravendb\bench\Micro.Benchmark\PageLocatorImpl\PageLocatorV7.cs,PageLocatorV7,The following statement contains a magic number: if (_cacheSize % 8 != 0)              {                  _cacheSize += 8 - _cacheSize % 8;              }
Magic Number,Micro.Benchmark.PageLocatorImpl,PageLocatorV7,C:\repos\ravendb_ravendb\bench\Micro.Benchmark\PageLocatorImpl\PageLocatorV7.cs,PageLocatorV7,The following statement contains a magic number: if (_cacheSize % 8 != 0)              {                  _cacheSize += 8 - _cacheSize % 8;              }
Magic Number,Micro.Benchmark.PageLocatorImpl,PageLocatorV7,C:\repos\ravendb_ravendb\bench\Micro.Benchmark\PageLocatorImpl\PageLocatorV7.cs,GetReadOnlyPage,The following statement contains a magic number: while (i < size)              {                  int f1 = _fingerprints[i + 0];                  int f2 = _fingerprints[i + 1];                  int f3 = _fingerprints[i + 2];                  int f4 = _fingerprints[i + 3];                    // This is used to force the JIT to layout the code as if unlikely() compiler directive existed.                  if (f1 == fingerprint) goto Found;                  if (f2 == fingerprint) goto Found1;                  if (f3 == fingerprint) goto Found2;                  if (f4 == fingerprint) goto Found3;                    int f5 = _fingerprints[i + 4];                  int f6 = _fingerprints[i + 5];                  int f7 = _fingerprints[i + 6];                  int f8 = _fingerprints[i + 7];                    if (f5 == fingerprint) goto Found4;                  if (f6 == fingerprint) goto Found5;                  if (f7 == fingerprint) goto Found6;                  if (f8 == fingerprint) goto Found7;                    i += 8;              }
Magic Number,Micro.Benchmark.PageLocatorImpl,PageLocatorV7,C:\repos\ravendb_ravendb\bench\Micro.Benchmark\PageLocatorImpl\PageLocatorV7.cs,GetReadOnlyPage,The following statement contains a magic number: while (i < size)              {                  int f1 = _fingerprints[i + 0];                  int f2 = _fingerprints[i + 1];                  int f3 = _fingerprints[i + 2];                  int f4 = _fingerprints[i + 3];                    // This is used to force the JIT to layout the code as if unlikely() compiler directive existed.                  if (f1 == fingerprint) goto Found;                  if (f2 == fingerprint) goto Found1;                  if (f3 == fingerprint) goto Found2;                  if (f4 == fingerprint) goto Found3;                    int f5 = _fingerprints[i + 4];                  int f6 = _fingerprints[i + 5];                  int f7 = _fingerprints[i + 6];                  int f8 = _fingerprints[i + 7];                    if (f5 == fingerprint) goto Found4;                  if (f6 == fingerprint) goto Found5;                  if (f7 == fingerprint) goto Found6;                  if (f8 == fingerprint) goto Found7;                    i += 8;              }
Magic Number,Micro.Benchmark.PageLocatorImpl,PageLocatorV7,C:\repos\ravendb_ravendb\bench\Micro.Benchmark\PageLocatorImpl\PageLocatorV7.cs,GetReadOnlyPage,The following statement contains a magic number: while (i < size)              {                  int f1 = _fingerprints[i + 0];                  int f2 = _fingerprints[i + 1];                  int f3 = _fingerprints[i + 2];                  int f4 = _fingerprints[i + 3];                    // This is used to force the JIT to layout the code as if unlikely() compiler directive existed.                  if (f1 == fingerprint) goto Found;                  if (f2 == fingerprint) goto Found1;                  if (f3 == fingerprint) goto Found2;                  if (f4 == fingerprint) goto Found3;                    int f5 = _fingerprints[i + 4];                  int f6 = _fingerprints[i + 5];                  int f7 = _fingerprints[i + 6];                  int f8 = _fingerprints[i + 7];                    if (f5 == fingerprint) goto Found4;                  if (f6 == fingerprint) goto Found5;                  if (f7 == fingerprint) goto Found6;                  if (f8 == fingerprint) goto Found7;                    i += 8;              }
Magic Number,Micro.Benchmark.PageLocatorImpl,PageLocatorV7,C:\repos\ravendb_ravendb\bench\Micro.Benchmark\PageLocatorImpl\PageLocatorV7.cs,GetReadOnlyPage,The following statement contains a magic number: while (i < size)              {                  int f1 = _fingerprints[i + 0];                  int f2 = _fingerprints[i + 1];                  int f3 = _fingerprints[i + 2];                  int f4 = _fingerprints[i + 3];                    // This is used to force the JIT to layout the code as if unlikely() compiler directive existed.                  if (f1 == fingerprint) goto Found;                  if (f2 == fingerprint) goto Found1;                  if (f3 == fingerprint) goto Found2;                  if (f4 == fingerprint) goto Found3;                    int f5 = _fingerprints[i + 4];                  int f6 = _fingerprints[i + 5];                  int f7 = _fingerprints[i + 6];                  int f8 = _fingerprints[i + 7];                    if (f5 == fingerprint) goto Found4;                  if (f6 == fingerprint) goto Found5;                  if (f7 == fingerprint) goto Found6;                  if (f8 == fingerprint) goto Found7;                    i += 8;              }
Magic Number,Micro.Benchmark.PageLocatorImpl,PageLocatorV7,C:\repos\ravendb_ravendb\bench\Micro.Benchmark\PageLocatorImpl\PageLocatorV7.cs,GetReadOnlyPage,The following statement contains a magic number: while (i < size)              {                  int f1 = _fingerprints[i + 0];                  int f2 = _fingerprints[i + 1];                  int f3 = _fingerprints[i + 2];                  int f4 = _fingerprints[i + 3];                    // This is used to force the JIT to layout the code as if unlikely() compiler directive existed.                  if (f1 == fingerprint) goto Found;                  if (f2 == fingerprint) goto Found1;                  if (f3 == fingerprint) goto Found2;                  if (f4 == fingerprint) goto Found3;                    int f5 = _fingerprints[i + 4];                  int f6 = _fingerprints[i + 5];                  int f7 = _fingerprints[i + 6];                  int f8 = _fingerprints[i + 7];                    if (f5 == fingerprint) goto Found4;                  if (f6 == fingerprint) goto Found5;                  if (f7 == fingerprint) goto Found6;                  if (f8 == fingerprint) goto Found7;                    i += 8;              }
Magic Number,Micro.Benchmark.PageLocatorImpl,PageLocatorV7,C:\repos\ravendb_ravendb\bench\Micro.Benchmark\PageLocatorImpl\PageLocatorV7.cs,GetReadOnlyPage,The following statement contains a magic number: while (i < size)              {                  int f1 = _fingerprints[i + 0];                  int f2 = _fingerprints[i + 1];                  int f3 = _fingerprints[i + 2];                  int f4 = _fingerprints[i + 3];                    // This is used to force the JIT to layout the code as if unlikely() compiler directive existed.                  if (f1 == fingerprint) goto Found;                  if (f2 == fingerprint) goto Found1;                  if (f3 == fingerprint) goto Found2;                  if (f4 == fingerprint) goto Found3;                    int f5 = _fingerprints[i + 4];                  int f6 = _fingerprints[i + 5];                  int f7 = _fingerprints[i + 6];                  int f8 = _fingerprints[i + 7];                    if (f5 == fingerprint) goto Found4;                  if (f6 == fingerprint) goto Found5;                  if (f7 == fingerprint) goto Found6;                  if (f8 == fingerprint) goto Found7;                    i += 8;              }
Magic Number,Micro.Benchmark.PageLocatorImpl,PageLocatorV7,C:\repos\ravendb_ravendb\bench\Micro.Benchmark\PageLocatorImpl\PageLocatorV7.cs,GetReadOnlyPage,The following statement contains a magic number: while (i < size)              {                  int f1 = _fingerprints[i + 0];                  int f2 = _fingerprints[i + 1];                  int f3 = _fingerprints[i + 2];                  int f4 = _fingerprints[i + 3];                    // This is used to force the JIT to layout the code as if unlikely() compiler directive existed.                  if (f1 == fingerprint) goto Found;                  if (f2 == fingerprint) goto Found1;                  if (f3 == fingerprint) goto Found2;                  if (f4 == fingerprint) goto Found3;                    int f5 = _fingerprints[i + 4];                  int f6 = _fingerprints[i + 5];                  int f7 = _fingerprints[i + 6];                  int f8 = _fingerprints[i + 7];                    if (f5 == fingerprint) goto Found4;                  if (f6 == fingerprint) goto Found5;                  if (f7 == fingerprint) goto Found6;                  if (f8 == fingerprint) goto Found7;                    i += 8;              }
Magic Number,Micro.Benchmark.PageLocatorImpl,PageLocatorV7,C:\repos\ravendb_ravendb\bench\Micro.Benchmark\PageLocatorImpl\PageLocatorV7.cs,GetReadOnlyPage,The following statement contains a magic number: Found2: i += 2;
Magic Number,Micro.Benchmark.PageLocatorImpl,PageLocatorV7,C:\repos\ravendb_ravendb\bench\Micro.Benchmark\PageLocatorImpl\PageLocatorV7.cs,GetReadOnlyPage,The following statement contains a magic number: Found3: i += 3;
Magic Number,Micro.Benchmark.PageLocatorImpl,PageLocatorV7,C:\repos\ravendb_ravendb\bench\Micro.Benchmark\PageLocatorImpl\PageLocatorV7.cs,GetReadOnlyPage,The following statement contains a magic number: Found4: i += 4;
Magic Number,Micro.Benchmark.PageLocatorImpl,PageLocatorV7,C:\repos\ravendb_ravendb\bench\Micro.Benchmark\PageLocatorImpl\PageLocatorV7.cs,GetReadOnlyPage,The following statement contains a magic number: Found5: i += 5;
Magic Number,Micro.Benchmark.PageLocatorImpl,PageLocatorV7,C:\repos\ravendb_ravendb\bench\Micro.Benchmark\PageLocatorImpl\PageLocatorV7.cs,GetReadOnlyPage,The following statement contains a magic number: Found6: i += 6;
Magic Number,Micro.Benchmark.PageLocatorImpl,PageLocatorV7,C:\repos\ravendb_ravendb\bench\Micro.Benchmark\PageLocatorImpl\PageLocatorV7.cs,GetReadOnlyPage,The following statement contains a magic number: Found7: i += 7;
Magic Number,Micro.Benchmark.PageLocatorImpl,PageLocatorV7,C:\repos\ravendb_ravendb\bench\Micro.Benchmark\PageLocatorImpl\PageLocatorV7.cs,GetWritablePage,The following statement contains a magic number: while (i < size)              {                  int f1 = _fingerprints[i + 0];                  int f2 = _fingerprints[i + 1];                  int f3 = _fingerprints[i + 2];                  int f4 = _fingerprints[i + 3];                    // This is used to force the JIT to layout the code as if unlikely() compiler directive existed.                  if (f1 == fingerprint) goto Found;                  if (f2 == fingerprint) goto Found1;                  if (f3 == fingerprint) goto Found2;                  if (f4 == fingerprint) goto Found3;                    int f5 = _fingerprints[i + 4];                  int f6 = _fingerprints[i + 5];                  int f7 = _fingerprints[i + 6];                  int f8 = _fingerprints[i + 7];                    if (f5 == fingerprint) goto Found4;                  if (f6 == fingerprint) goto Found5;                  if (f7 == fingerprint) goto Found6;                  if (f8 == fingerprint) goto Found7;                    i += 8;              }
Magic Number,Micro.Benchmark.PageLocatorImpl,PageLocatorV7,C:\repos\ravendb_ravendb\bench\Micro.Benchmark\PageLocatorImpl\PageLocatorV7.cs,GetWritablePage,The following statement contains a magic number: while (i < size)              {                  int f1 = _fingerprints[i + 0];                  int f2 = _fingerprints[i + 1];                  int f3 = _fingerprints[i + 2];                  int f4 = _fingerprints[i + 3];                    // This is used to force the JIT to layout the code as if unlikely() compiler directive existed.                  if (f1 == fingerprint) goto Found;                  if (f2 == fingerprint) goto Found1;                  if (f3 == fingerprint) goto Found2;                  if (f4 == fingerprint) goto Found3;                    int f5 = _fingerprints[i + 4];                  int f6 = _fingerprints[i + 5];                  int f7 = _fingerprints[i + 6];                  int f8 = _fingerprints[i + 7];                    if (f5 == fingerprint) goto Found4;                  if (f6 == fingerprint) goto Found5;                  if (f7 == fingerprint) goto Found6;                  if (f8 == fingerprint) goto Found7;                    i += 8;              }
Magic Number,Micro.Benchmark.PageLocatorImpl,PageLocatorV7,C:\repos\ravendb_ravendb\bench\Micro.Benchmark\PageLocatorImpl\PageLocatorV7.cs,GetWritablePage,The following statement contains a magic number: while (i < size)              {                  int f1 = _fingerprints[i + 0];                  int f2 = _fingerprints[i + 1];                  int f3 = _fingerprints[i + 2];                  int f4 = _fingerprints[i + 3];                    // This is used to force the JIT to layout the code as if unlikely() compiler directive existed.                  if (f1 == fingerprint) goto Found;                  if (f2 == fingerprint) goto Found1;                  if (f3 == fingerprint) goto Found2;                  if (f4 == fingerprint) goto Found3;                    int f5 = _fingerprints[i + 4];                  int f6 = _fingerprints[i + 5];                  int f7 = _fingerprints[i + 6];                  int f8 = _fingerprints[i + 7];                    if (f5 == fingerprint) goto Found4;                  if (f6 == fingerprint) goto Found5;                  if (f7 == fingerprint) goto Found6;                  if (f8 == fingerprint) goto Found7;                    i += 8;              }
Magic Number,Micro.Benchmark.PageLocatorImpl,PageLocatorV7,C:\repos\ravendb_ravendb\bench\Micro.Benchmark\PageLocatorImpl\PageLocatorV7.cs,GetWritablePage,The following statement contains a magic number: while (i < size)              {                  int f1 = _fingerprints[i + 0];                  int f2 = _fingerprints[i + 1];                  int f3 = _fingerprints[i + 2];                  int f4 = _fingerprints[i + 3];                    // This is used to force the JIT to layout the code as if unlikely() compiler directive existed.                  if (f1 == fingerprint) goto Found;                  if (f2 == fingerprint) goto Found1;                  if (f3 == fingerprint) goto Found2;                  if (f4 == fingerprint) goto Found3;                    int f5 = _fingerprints[i + 4];                  int f6 = _fingerprints[i + 5];                  int f7 = _fingerprints[i + 6];                  int f8 = _fingerprints[i + 7];                    if (f5 == fingerprint) goto Found4;                  if (f6 == fingerprint) goto Found5;                  if (f7 == fingerprint) goto Found6;                  if (f8 == fingerprint) goto Found7;                    i += 8;              }
Magic Number,Micro.Benchmark.PageLocatorImpl,PageLocatorV7,C:\repos\ravendb_ravendb\bench\Micro.Benchmark\PageLocatorImpl\PageLocatorV7.cs,GetWritablePage,The following statement contains a magic number: while (i < size)              {                  int f1 = _fingerprints[i + 0];                  int f2 = _fingerprints[i + 1];                  int f3 = _fingerprints[i + 2];                  int f4 = _fingerprints[i + 3];                    // This is used to force the JIT to layout the code as if unlikely() compiler directive existed.                  if (f1 == fingerprint) goto Found;                  if (f2 == fingerprint) goto Found1;                  if (f3 == fingerprint) goto Found2;                  if (f4 == fingerprint) goto Found3;                    int f5 = _fingerprints[i + 4];                  int f6 = _fingerprints[i + 5];                  int f7 = _fingerprints[i + 6];                  int f8 = _fingerprints[i + 7];                    if (f5 == fingerprint) goto Found4;                  if (f6 == fingerprint) goto Found5;                  if (f7 == fingerprint) goto Found6;                  if (f8 == fingerprint) goto Found7;                    i += 8;              }
Magic Number,Micro.Benchmark.PageLocatorImpl,PageLocatorV7,C:\repos\ravendb_ravendb\bench\Micro.Benchmark\PageLocatorImpl\PageLocatorV7.cs,GetWritablePage,The following statement contains a magic number: while (i < size)              {                  int f1 = _fingerprints[i + 0];                  int f2 = _fingerprints[i + 1];                  int f3 = _fingerprints[i + 2];                  int f4 = _fingerprints[i + 3];                    // This is used to force the JIT to layout the code as if unlikely() compiler directive existed.                  if (f1 == fingerprint) goto Found;                  if (f2 == fingerprint) goto Found1;                  if (f3 == fingerprint) goto Found2;                  if (f4 == fingerprint) goto Found3;                    int f5 = _fingerprints[i + 4];                  int f6 = _fingerprints[i + 5];                  int f7 = _fingerprints[i + 6];                  int f8 = _fingerprints[i + 7];                    if (f5 == fingerprint) goto Found4;                  if (f6 == fingerprint) goto Found5;                  if (f7 == fingerprint) goto Found6;                  if (f8 == fingerprint) goto Found7;                    i += 8;              }
Magic Number,Micro.Benchmark.PageLocatorImpl,PageLocatorV7,C:\repos\ravendb_ravendb\bench\Micro.Benchmark\PageLocatorImpl\PageLocatorV7.cs,GetWritablePage,The following statement contains a magic number: while (i < size)              {                  int f1 = _fingerprints[i + 0];                  int f2 = _fingerprints[i + 1];                  int f3 = _fingerprints[i + 2];                  int f4 = _fingerprints[i + 3];                    // This is used to force the JIT to layout the code as if unlikely() compiler directive existed.                  if (f1 == fingerprint) goto Found;                  if (f2 == fingerprint) goto Found1;                  if (f3 == fingerprint) goto Found2;                  if (f4 == fingerprint) goto Found3;                    int f5 = _fingerprints[i + 4];                  int f6 = _fingerprints[i + 5];                  int f7 = _fingerprints[i + 6];                  int f8 = _fingerprints[i + 7];                    if (f5 == fingerprint) goto Found4;                  if (f6 == fingerprint) goto Found5;                  if (f7 == fingerprint) goto Found6;                  if (f8 == fingerprint) goto Found7;                    i += 8;              }
Magic Number,Micro.Benchmark.PageLocatorImpl,PageLocatorV7,C:\repos\ravendb_ravendb\bench\Micro.Benchmark\PageLocatorImpl\PageLocatorV7.cs,GetWritablePage,The following statement contains a magic number: Found2: i += 2;
Magic Number,Micro.Benchmark.PageLocatorImpl,PageLocatorV7,C:\repos\ravendb_ravendb\bench\Micro.Benchmark\PageLocatorImpl\PageLocatorV7.cs,GetWritablePage,The following statement contains a magic number: Found3: i += 3;
Magic Number,Micro.Benchmark.PageLocatorImpl,PageLocatorV7,C:\repos\ravendb_ravendb\bench\Micro.Benchmark\PageLocatorImpl\PageLocatorV7.cs,GetWritablePage,The following statement contains a magic number: Found4: i += 4;
Magic Number,Micro.Benchmark.PageLocatorImpl,PageLocatorV7,C:\repos\ravendb_ravendb\bench\Micro.Benchmark\PageLocatorImpl\PageLocatorV7.cs,GetWritablePage,The following statement contains a magic number: Found5: i += 5;
Magic Number,Micro.Benchmark.PageLocatorImpl,PageLocatorV7,C:\repos\ravendb_ravendb\bench\Micro.Benchmark\PageLocatorImpl\PageLocatorV7.cs,GetWritablePage,The following statement contains a magic number: Found6: i += 6;
Magic Number,Micro.Benchmark.PageLocatorImpl,PageLocatorV7,C:\repos\ravendb_ravendb\bench\Micro.Benchmark\PageLocatorImpl\PageLocatorV7.cs,GetWritablePage,The following statement contains a magic number: Found7: i += 7;
Magic Number,Micro.Benchmark.PageLocatorImpl,PageLocatorV7,C:\repos\ravendb_ravendb\bench\Micro.Benchmark\PageLocatorImpl\PageLocatorV7.cs,Reset,The following statement contains a magic number: while (i < size)              {                  int f1 = _fingerprints[i + 0];                  int f2 = _fingerprints[i + 1];                  int f3 = _fingerprints[i + 2];                  int f4 = _fingerprints[i + 3];                    // This is used to force the JIT to layout the code as if unlikely() compiler directive existed.                  if (f1 == fingerprint) goto Found;                  if (f2 == fingerprint) goto Found1;                  if (f3 == fingerprint) goto Found2;                  if (f4 == fingerprint) goto Found3;                    int f5 = _fingerprints[i + 4];                  int f6 = _fingerprints[i + 5];                  int f7 = _fingerprints[i + 6];                  int f8 = _fingerprints[i + 7];                    if (f5 == fingerprint) goto Found4;                  if (f6 == fingerprint) goto Found5;                  if (f7 == fingerprint) goto Found6;                  if (f8 == fingerprint) goto Found7;                    i += 8;              }
Magic Number,Micro.Benchmark.PageLocatorImpl,PageLocatorV7,C:\repos\ravendb_ravendb\bench\Micro.Benchmark\PageLocatorImpl\PageLocatorV7.cs,Reset,The following statement contains a magic number: while (i < size)              {                  int f1 = _fingerprints[i + 0];                  int f2 = _fingerprints[i + 1];                  int f3 = _fingerprints[i + 2];                  int f4 = _fingerprints[i + 3];                    // This is used to force the JIT to layout the code as if unlikely() compiler directive existed.                  if (f1 == fingerprint) goto Found;                  if (f2 == fingerprint) goto Found1;                  if (f3 == fingerprint) goto Found2;                  if (f4 == fingerprint) goto Found3;                    int f5 = _fingerprints[i + 4];                  int f6 = _fingerprints[i + 5];                  int f7 = _fingerprints[i + 6];                  int f8 = _fingerprints[i + 7];                    if (f5 == fingerprint) goto Found4;                  if (f6 == fingerprint) goto Found5;                  if (f7 == fingerprint) goto Found6;                  if (f8 == fingerprint) goto Found7;                    i += 8;              }
Magic Number,Micro.Benchmark.PageLocatorImpl,PageLocatorV7,C:\repos\ravendb_ravendb\bench\Micro.Benchmark\PageLocatorImpl\PageLocatorV7.cs,Reset,The following statement contains a magic number: while (i < size)              {                  int f1 = _fingerprints[i + 0];                  int f2 = _fingerprints[i + 1];                  int f3 = _fingerprints[i + 2];                  int f4 = _fingerprints[i + 3];                    // This is used to force the JIT to layout the code as if unlikely() compiler directive existed.                  if (f1 == fingerprint) goto Found;                  if (f2 == fingerprint) goto Found1;                  if (f3 == fingerprint) goto Found2;                  if (f4 == fingerprint) goto Found3;                    int f5 = _fingerprints[i + 4];                  int f6 = _fingerprints[i + 5];                  int f7 = _fingerprints[i + 6];                  int f8 = _fingerprints[i + 7];                    if (f5 == fingerprint) goto Found4;                  if (f6 == fingerprint) goto Found5;                  if (f7 == fingerprint) goto Found6;                  if (f8 == fingerprint) goto Found7;                    i += 8;              }
Magic Number,Micro.Benchmark.PageLocatorImpl,PageLocatorV7,C:\repos\ravendb_ravendb\bench\Micro.Benchmark\PageLocatorImpl\PageLocatorV7.cs,Reset,The following statement contains a magic number: while (i < size)              {                  int f1 = _fingerprints[i + 0];                  int f2 = _fingerprints[i + 1];                  int f3 = _fingerprints[i + 2];                  int f4 = _fingerprints[i + 3];                    // This is used to force the JIT to layout the code as if unlikely() compiler directive existed.                  if (f1 == fingerprint) goto Found;                  if (f2 == fingerprint) goto Found1;                  if (f3 == fingerprint) goto Found2;                  if (f4 == fingerprint) goto Found3;                    int f5 = _fingerprints[i + 4];                  int f6 = _fingerprints[i + 5];                  int f7 = _fingerprints[i + 6];                  int f8 = _fingerprints[i + 7];                    if (f5 == fingerprint) goto Found4;                  if (f6 == fingerprint) goto Found5;                  if (f7 == fingerprint) goto Found6;                  if (f8 == fingerprint) goto Found7;                    i += 8;              }
Magic Number,Micro.Benchmark.PageLocatorImpl,PageLocatorV7,C:\repos\ravendb_ravendb\bench\Micro.Benchmark\PageLocatorImpl\PageLocatorV7.cs,Reset,The following statement contains a magic number: while (i < size)              {                  int f1 = _fingerprints[i + 0];                  int f2 = _fingerprints[i + 1];                  int f3 = _fingerprints[i + 2];                  int f4 = _fingerprints[i + 3];                    // This is used to force the JIT to layout the code as if unlikely() compiler directive existed.                  if (f1 == fingerprint) goto Found;                  if (f2 == fingerprint) goto Found1;                  if (f3 == fingerprint) goto Found2;                  if (f4 == fingerprint) goto Found3;                    int f5 = _fingerprints[i + 4];                  int f6 = _fingerprints[i + 5];                  int f7 = _fingerprints[i + 6];                  int f8 = _fingerprints[i + 7];                    if (f5 == fingerprint) goto Found4;                  if (f6 == fingerprint) goto Found5;                  if (f7 == fingerprint) goto Found6;                  if (f8 == fingerprint) goto Found7;                    i += 8;              }
Magic Number,Micro.Benchmark.PageLocatorImpl,PageLocatorV7,C:\repos\ravendb_ravendb\bench\Micro.Benchmark\PageLocatorImpl\PageLocatorV7.cs,Reset,The following statement contains a magic number: while (i < size)              {                  int f1 = _fingerprints[i + 0];                  int f2 = _fingerprints[i + 1];                  int f3 = _fingerprints[i + 2];                  int f4 = _fingerprints[i + 3];                    // This is used to force the JIT to layout the code as if unlikely() compiler directive existed.                  if (f1 == fingerprint) goto Found;                  if (f2 == fingerprint) goto Found1;                  if (f3 == fingerprint) goto Found2;                  if (f4 == fingerprint) goto Found3;                    int f5 = _fingerprints[i + 4];                  int f6 = _fingerprints[i + 5];                  int f7 = _fingerprints[i + 6];                  int f8 = _fingerprints[i + 7];                    if (f5 == fingerprint) goto Found4;                  if (f6 == fingerprint) goto Found5;                  if (f7 == fingerprint) goto Found6;                  if (f8 == fingerprint) goto Found7;                    i += 8;              }
Magic Number,Micro.Benchmark.PageLocatorImpl,PageLocatorV7,C:\repos\ravendb_ravendb\bench\Micro.Benchmark\PageLocatorImpl\PageLocatorV7.cs,Reset,The following statement contains a magic number: while (i < size)              {                  int f1 = _fingerprints[i + 0];                  int f2 = _fingerprints[i + 1];                  int f3 = _fingerprints[i + 2];                  int f4 = _fingerprints[i + 3];                    // This is used to force the JIT to layout the code as if unlikely() compiler directive existed.                  if (f1 == fingerprint) goto Found;                  if (f2 == fingerprint) goto Found1;                  if (f3 == fingerprint) goto Found2;                  if (f4 == fingerprint) goto Found3;                    int f5 = _fingerprints[i + 4];                  int f6 = _fingerprints[i + 5];                  int f7 = _fingerprints[i + 6];                  int f8 = _fingerprints[i + 7];                    if (f5 == fingerprint) goto Found4;                  if (f6 == fingerprint) goto Found5;                  if (f7 == fingerprint) goto Found6;                  if (f8 == fingerprint) goto Found7;                    i += 8;              }
Magic Number,Micro.Benchmark.PageLocatorImpl,PageLocatorV7,C:\repos\ravendb_ravendb\bench\Micro.Benchmark\PageLocatorImpl\PageLocatorV7.cs,Reset,The following statement contains a magic number: Found2: i += 2;
Magic Number,Micro.Benchmark.PageLocatorImpl,PageLocatorV7,C:\repos\ravendb_ravendb\bench\Micro.Benchmark\PageLocatorImpl\PageLocatorV7.cs,Reset,The following statement contains a magic number: Found3: i += 3;
Magic Number,Micro.Benchmark.PageLocatorImpl,PageLocatorV7,C:\repos\ravendb_ravendb\bench\Micro.Benchmark\PageLocatorImpl\PageLocatorV7.cs,Reset,The following statement contains a magic number: Found4: i += 4;
Magic Number,Micro.Benchmark.PageLocatorImpl,PageLocatorV7,C:\repos\ravendb_ravendb\bench\Micro.Benchmark\PageLocatorImpl\PageLocatorV7.cs,Reset,The following statement contains a magic number: Found5: i += 5;
Magic Number,Micro.Benchmark.PageLocatorImpl,PageLocatorV7,C:\repos\ravendb_ravendb\bench\Micro.Benchmark\PageLocatorImpl\PageLocatorV7.cs,Reset,The following statement contains a magic number: Found6: i += 6;
Magic Number,Micro.Benchmark.PageLocatorImpl,PageLocatorV7,C:\repos\ravendb_ravendb\bench\Micro.Benchmark\PageLocatorImpl\PageLocatorV7.cs,Reset,The following statement contains a magic number: Found7: i += 7;
Magic Number,Micro.Benchmark.Tests,PageLocatorTests,C:\repos\ravendb_ravendb\bench\Micro.Benchmark\Tests\PageLocatorTests.cs,TestGetReadonly,The following statement contains a magic number: var p11 = cache.GetReadOnlyPage(5);
Magic Number,Micro.Benchmark.Tests,PageLocatorTests,C:\repos\ravendb_ravendb\bench\Micro.Benchmark\Tests\PageLocatorTests.cs,TestGetReadonly,The following statement contains a magic number: var p12 = cache.GetReadOnlyPage(5);
Magic Number,Micro.Benchmark.Tests,PageLocatorTests,C:\repos\ravendb_ravendb\bench\Micro.Benchmark\Tests\PageLocatorTests.cs,TestGetReadonly,The following statement contains a magic number: cache.Reset(5);
Magic Number,Micro.Benchmark.Tests,PageLocatorTests,C:\repos\ravendb_ravendb\bench\Micro.Benchmark\Tests\PageLocatorTests.cs,TestGetReadonly,The following statement contains a magic number: var p13 = cache.GetReadOnlyPage(5);
Magic Number,Micro.Benchmark.Tests,PageLocatorTests,C:\repos\ravendb_ravendb\bench\Micro.Benchmark\Tests\PageLocatorTests.cs,TestGetReadonly,The following statement contains a magic number: var p21 = cache.GetWritablePage(6);
Magic Number,Micro.Benchmark.Tests,PageLocatorTests,C:\repos\ravendb_ravendb\bench\Micro.Benchmark\Tests\PageLocatorTests.cs,TestGetReadonly,The following statement contains a magic number: var p22 = cache.GetWritablePage(6);
Magic Number,Micro.Benchmark.Tests,PageLocatorTests,C:\repos\ravendb_ravendb\bench\Micro.Benchmark\Tests\PageLocatorTests.cs,TestGetReadonly,The following statement contains a magic number: cache.Reset(6);
Magic Number,Micro.Benchmark.Tests,PageLocatorTests,C:\repos\ravendb_ravendb\bench\Micro.Benchmark\Tests\PageLocatorTests.cs,TestGetReadonly,The following statement contains a magic number: var p23 = cache.GetWritablePage(6);
Magic Number,Micro.Benchmark.Tests,PageLocatorTests,C:\repos\ravendb_ravendb\bench\Micro.Benchmark\Tests\PageLocatorTests.cs,TestGetReadonly,The following statement contains a magic number: var p31 = cache.GetReadOnlyPage(7);
Magic Number,Micro.Benchmark.Tests,PageLocatorTests,C:\repos\ravendb_ravendb\bench\Micro.Benchmark\Tests\PageLocatorTests.cs,TestGetReadonly,The following statement contains a magic number: var p32 = cache.GetWritablePage(7);
Magic Number,Micro.Benchmark.Tests,PageLocatorTests,C:\repos\ravendb_ravendb\bench\Micro.Benchmark\Tests\PageLocatorTests.cs,TestGetReadonly,The following statement contains a magic number: cache.Reset(7);
Magic Number,Micro.Benchmark.Tests,PageLocatorTests,C:\repos\ravendb_ravendb\bench\Micro.Benchmark\Tests\PageLocatorTests.cs,TestGetReadonly,The following statement contains a magic number: var p33 = cache.GetWritablePage(7);
