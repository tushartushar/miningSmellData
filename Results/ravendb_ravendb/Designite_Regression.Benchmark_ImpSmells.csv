Implementation smell,Namespace,Class,File,Method,Description
Long Statement,Regression.Benchmark,BlittableJsonBench,C:\research\architectureSmells\repos\ravendb_ravendb\bench\Regression.Benchmark\BlittableJsonBench.cs,ParseJsonFromStream,The length of the statement  "                streams.Add(new Tuple<string' Stream>("id/" + name' typeof(BlittableJsonBench).GetTypeInfo().Assembly.GetManifestResourceStream(resource))); " is 140.
Magic Number,Regression.Benchmark,CompressionBench,C:\research\architectureSmells\repos\ravendb_ravendb\bench\Regression.Benchmark\CompressionBench.cs,HighRepetition,The following statement contains a magic number: var main = new Random(1000);
Magic Number,Regression.Benchmark,CompressionBench,C:\research\architectureSmells\repos\ravendb_ravendb\bench\Regression.Benchmark\CompressionBench.cs,HighRepetition,The following statement contains a magic number: int sequenceNumber = main.Next(20);
Magic Number,Regression.Benchmark,CompressionBench,C:\research\architectureSmells\repos\ravendb_ravendb\bench\Regression.Benchmark\CompressionBench.cs,HighRepetition,The following statement contains a magic number: int sequenceLength = Math.Min( main.Next(128)' input.Length - i );
Magic Number,Regression.Benchmark,CompressionBench,C:\research\architectureSmells\repos\ravendb_ravendb\bench\Regression.Benchmark\CompressionBench.cs,HighRepetition,The following statement contains a magic number: input[i] = (byte)(rnd.Next() % 255);
Magic Number,Regression.Benchmark,CompressionBench,C:\research\architectureSmells\repos\ravendb_ravendb\bench\Regression.Benchmark\CompressionBench.cs,LowBitsRandom,The following statement contains a magic number: int threshold = 1 << 4;
Magic Number,Regression.Benchmark,CompressionBench,C:\research\architectureSmells\repos\ravendb_ravendb\bench\Regression.Benchmark\CompressionBench.cs,LowBitsRandom,The following statement contains a magic number: var rnd = new Random(1000);
Magic Number,Regression.Benchmark,HashingBench,C:\research\architectureSmells\repos\ravendb_ravendb\bench\Regression.Benchmark\HashingBench.cs,HashingBench,The following statement contains a magic number: Random rnd = new Random(1001);
Magic Number,Regression.Benchmark,HashingBench,C:\research\architectureSmells\repos\ravendb_ravendb\bench\Regression.Benchmark\HashingBench.cs,Metro128_SmallString,The following statement contains a magic number: ExecuteBenchmark(() =>               {                  Metro128Hash hash;                  for (int i = 0; i < 1000; i++)                      hash = Hashing.Metro128.Calculate(value' Encoding.UTF8);              });
Magic Number,Regression.Benchmark,HashingBench,C:\research\architectureSmells\repos\ravendb_ravendb\bench\Regression.Benchmark\HashingBench.cs,XXHash64_SmallString,The following statement contains a magic number: ExecuteBenchmark(() =>               {                  ulong hash = 0;                  for (int i = 0; i < 1000; i++)                      hash += Hashing.XXHash64.Calculate(value' Encoding.UTF8);              });
Magic Number,Regression.Benchmark,HashingBench,C:\research\architectureSmells\repos\ravendb_ravendb\bench\Regression.Benchmark\HashingBench.cs,XXHash32_SmallString,The following statement contains a magic number: ExecuteBenchmark(() =>               {                  uint hash = 0;                  for (int i = 0; i < 1000; i++)                      hash += Hashing.XXHash32.Calculate(value' Encoding.UTF8);              });
Magic Number,Regression.Benchmark,HashingBench,C:\research\architectureSmells\repos\ravendb_ravendb\bench\Regression.Benchmark\HashingBench.cs,Metro128_Block,The following statement contains a magic number: ExecuteBenchmark(() =>               {                  Metro128Hash hash;                  for (int i = 0; i < 1000; i++)                      hash = Hashing.Metro128.Calculate(block);              });
Magic Number,Regression.Benchmark,HashingBench,C:\research\architectureSmells\repos\ravendb_ravendb\bench\Regression.Benchmark\HashingBench.cs,XXHash64_Block,The following statement contains a magic number: ExecuteBenchmark(() =>               {                  ulong hash = 0;                  for (int i = 0; i < 1000; i++)                      hash += Hashing.XXHash64.Calculate(block);              });
Magic Number,Regression.Benchmark,HashingBench,C:\research\architectureSmells\repos\ravendb_ravendb\bench\Regression.Benchmark\HashingBench.cs,XXHash32_Block,The following statement contains a magic number: ExecuteBenchmark(() =>               {                  uint hash = 0;                  for (int i = 0; i < 1000; i++)                      hash += Hashing.XXHash32.Calculate(block);              });
