Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Raven.StorageExporter,Program,C:\repos\ravendb_ravendb\ToMigrate\Raven.StorageExporter\Program.cs,ValidateArgs,Cyclomatic complexity of the method is 9
Long Statement,Raven.StorageExporter,StorageExporter,C:\repos\ravendb_ravendb\ToMigrate\Raven.StorageExporter\StorageExporter.cs,ReportProgress,The length of the statement  "            if (from == outof) ConsoleUtils.ConsoleWriteLineWithColor(ConsoleColor.Green' "Completed exporting {0} out of {1} {2}"'from'outof'stage); " is 137.
Long Statement,Raven.StorageExporter,StorageExporter,C:\repos\ravendb_ravendb\ToMigrate\Raven.StorageExporter\StorageExporter.cs,CreateTransactionalStorage,The length of the statement  "            if (String.IsNullOrEmpty(ravenConfiguration.Core.DataDirectory) == false && Directory.Exists(ravenConfiguration.Core.DataDirectory)) " is 132.
Long Statement,Raven.StorageExporter,StorageExporter,C:\repos\ravendb_ravendb\ToMigrate\Raven.StorageExporter\StorageExporter.cs,CreateTransactionalStorage,The length of the statement  "                    ConsoleUtils.PrintErrorAndFail(String.Format("Failed to initialize the storage it is probably been locked by RavenDB.\nError message:\n{0}"' uae.Message)' uae.StackTrace); " is 171.
Long Statement,Raven.StorageExporter,StorageExporter,C:\repos\ravendb_ravendb\ToMigrate\Raven.StorageExporter\StorageExporter.cs,CreateTransactionalStorage,The length of the statement  "                    ConsoleUtils.PrintErrorAndFail(String.Format("Failed to initialize the storage it is probably been locked by RavenDB.\nError message:\n{0}"' ioe.Message)' ioe.StackTrace); " is 171.
Long Statement,Raven.StorageExporter,StorageExporter,C:\repos\ravendb_ravendb\ToMigrate\Raven.StorageExporter\StorageExporter.cs,CreateTransactionalStorage,The length of the statement  "            ConsoleUtils.PrintErrorAndFail(string.Format("Could not detect storage file under the given directory:{0}"' ravenConfiguration.Core.DataDirectory)); " is 148.
Long Statement,Raven.StorageExporter,Program,C:\repos\ravendb_ravendb\ToMigrate\Raven.StorageExporter\Program.cs,ValidateArgs,The length of the statement  "                ConsoleUtils.ConsoleWriteLineWithColor(ConsoleColor.Red' "Directory {0} is not a valid RavenDB storage directory.\n"' args[0]); " is 127.
Long Statement,Raven.StorageExporter,Program,C:\repos\ravendb_ravendb\ToMigrate\Raven.StorageExporter\Program.cs,ValidateArgs,The length of the statement  "                            ConsoleUtils.ConsoleWriteLineWithColor(ConsoleColor.Red' "BatchSize should be an integer number greater than 0 (BatchSize={0}).\n"' args[currArgPos + 1]); " is 154.
Magic Number,Raven.StorageExporter,Program,C:\repos\ravendb_ravendb\ToMigrate\Raven.StorageExporter\Program.cs,ValidateArgs,The following statement contains a magic number: if (args.Count() < 2)              {                  ConsoleUtils.ConsoleWriteLineWithColor(ConsoleColor.Red' "Not enough arguments were provided.\n");                  return false;              }
Magic Number,Raven.StorageExporter,Program,C:\repos\ravendb_ravendb\ToMigrate\Raven.StorageExporter\Program.cs,ValidateArgs,The following statement contains a magic number: if (args.Length % 2 != 0)              {                  ConsoleUtils.ConsoleWriteLineWithColor(ConsoleColor.Red' "Wrong amount of arguments were passed.\n");                  return false;              }
Magic Number,Raven.StorageExporter,Program,C:\repos\ravendb_ravendb\ToMigrate\Raven.StorageExporter\Program.cs,ValidateArgs,The following statement contains a magic number: var currArgPos = 2;
Magic Number,Raven.StorageExporter,Program,C:\repos\ravendb_ravendb\ToMigrate\Raven.StorageExporter\Program.cs,ValidateArgs,The following statement contains a magic number: while (currArgPos < args.Length)              {                  switch (args[currArgPos])                  {                      case "-BatchSize":                          int batchSize;                          if (int.TryParse(args[currArgPos + 1]' out batchSize) && batchSize > 0)                          {                              configuration.BatchSize = batchSize;                              currArgPos += 2;                          }                          else                          {                              ConsoleUtils.ConsoleWriteLineWithColor(ConsoleColor.Red' "BatchSize should be an integer number greater than 0 (BatchSize={0}).\n"' args[currArgPos + 1]);                              return false;                          }                          break;                      default:                          ConsoleUtils.ConsoleWriteLineWithColor(ConsoleColor.Red' "Unidentified argument {0}.\n");                          break;                  }              }
