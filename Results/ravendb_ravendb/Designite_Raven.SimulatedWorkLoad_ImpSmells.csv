Implementation smell,Namespace,Class,File,Method,Description
Magic Number,Raven.SimulatedWorkLoad,Program,C:\repos\ravendb_ravendb\ToMigrate\Raven.SimulatedWorkLoad\Program.cs,Main,The following statement contains a magic number: using (var documentStore = new DocumentStore              {                  ConnectionStringName = "RavenDB"              })              {                  documentStore.Initialize();                  var createIndexes = new CreateIndexes(documentStore);                  var random = new Random(95832);                    var sources = GenerateSources(random' documentStore);                    WriteToDatabase(sources' random' createIndexes);              }
Magic Number,Raven.SimulatedWorkLoad,Program,C:\repos\ravendb_ravendb\ToMigrate\Raven.SimulatedWorkLoad\Program.cs,WriteToDatabase,The following statement contains a magic number: while (sources.Any(x => x.Completed == false))              {                  var sizes = sources.Select(_ => random.Next(1' 40)).ToList();                  count++;                  Parallel.ForEach(sources' (observing' state' i) =>                  {                      if (count%3 == 0) // do writes only every third run' ensure more reads than writes (more production)                      {                          observing.Release(sizes[(int) i]);                      }                      createIndexes.DoSomeOtherWork((int)i);                  });                    createIndexes.CreateIndexesSecond();                    Thread.Sleep(random.Next(50' 150));                    if (count%100 == 0)                  {                      createIndexes.Stats();                  }              }
Magic Number,Raven.SimulatedWorkLoad,Program,C:\repos\ravendb_ravendb\ToMigrate\Raven.SimulatedWorkLoad\Program.cs,WriteToDatabase,The following statement contains a magic number: while (sources.Any(x => x.Completed == false))              {                  var sizes = sources.Select(_ => random.Next(1' 40)).ToList();                  count++;                  Parallel.ForEach(sources' (observing' state' i) =>                  {                      if (count%3 == 0) // do writes only every third run' ensure more reads than writes (more production)                      {                          observing.Release(sizes[(int) i]);                      }                      createIndexes.DoSomeOtherWork((int)i);                  });                    createIndexes.CreateIndexesSecond();                    Thread.Sleep(random.Next(50' 150));                    if (count%100 == 0)                  {                      createIndexes.Stats();                  }              }
Magic Number,Raven.SimulatedWorkLoad,Program,C:\repos\ravendb_ravendb\ToMigrate\Raven.SimulatedWorkLoad\Program.cs,WriteToDatabase,The following statement contains a magic number: while (sources.Any(x => x.Completed == false))              {                  var sizes = sources.Select(_ => random.Next(1' 40)).ToList();                  count++;                  Parallel.ForEach(sources' (observing' state' i) =>                  {                      if (count%3 == 0) // do writes only every third run' ensure more reads than writes (more production)                      {                          observing.Release(sizes[(int) i]);                      }                      createIndexes.DoSomeOtherWork((int)i);                  });                    createIndexes.CreateIndexesSecond();                    Thread.Sleep(random.Next(50' 150));                    if (count%100 == 0)                  {                      createIndexes.Stats();                  }              }
Magic Number,Raven.SimulatedWorkLoad,Program,C:\repos\ravendb_ravendb\ToMigrate\Raven.SimulatedWorkLoad\Program.cs,WriteToDatabase,The following statement contains a magic number: while (sources.Any(x => x.Completed == false))              {                  var sizes = sources.Select(_ => random.Next(1' 40)).ToList();                  count++;                  Parallel.ForEach(sources' (observing' state' i) =>                  {                      if (count%3 == 0) // do writes only every third run' ensure more reads than writes (more production)                      {                          observing.Release(sizes[(int) i]);                      }                      createIndexes.DoSomeOtherWork((int)i);                  });                    createIndexes.CreateIndexesSecond();                    Thread.Sleep(random.Next(50' 150));                    if (count%100 == 0)                  {                      createIndexes.Stats();                  }              }
Magic Number,Raven.SimulatedWorkLoad,Program,C:\repos\ravendb_ravendb\ToMigrate\Raven.SimulatedWorkLoad\Program.cs,WriteToDatabase,The following statement contains a magic number: while (sources.Any(x => x.Completed == false))              {                  var sizes = sources.Select(_ => random.Next(1' 40)).ToList();                  count++;                  Parallel.ForEach(sources' (observing' state' i) =>                  {                      if (count%3 == 0) // do writes only every third run' ensure more reads than writes (more production)                      {                          observing.Release(sizes[(int) i]);                      }                      createIndexes.DoSomeOtherWork((int)i);                  });                    createIndexes.CreateIndexesSecond();                    Thread.Sleep(random.Next(50' 150));                    if (count%100 == 0)                  {                      createIndexes.Stats();                  }              }
Magic Number,Raven.SimulatedWorkLoad,Program,C:\repos\ravendb_ravendb\ToMigrate\Raven.SimulatedWorkLoad\Program.cs,GenerateSources,The following statement contains a magic number: foreach (var observable in sources)              {                  var wait = TimeSpan.FromMilliseconds(random.Next(100' 2400));                  var bufferSize = random.Next(1' 16);                  observable.Buffer(wait' bufferSize)                            .Subscribe(list =>                            {                                using (var session = documentStore.OpenSession())                                {                                    foreach (var user in list)                                    {                                        session.Store(user);                                    }                                    session.SaveChanges();                                }                            });              }
Magic Number,Raven.SimulatedWorkLoad,Program,C:\repos\ravendb_ravendb\ToMigrate\Raven.SimulatedWorkLoad\Program.cs,GenerateSources,The following statement contains a magic number: foreach (var observable in sources)              {                  var wait = TimeSpan.FromMilliseconds(random.Next(100' 2400));                  var bufferSize = random.Next(1' 16);                  observable.Buffer(wait' bufferSize)                            .Subscribe(list =>                            {                                using (var session = documentStore.OpenSession())                                {                                    foreach (var user in list)                                    {                                        session.Store(user);                                    }                                    session.SaveChanges();                                }                            });              }
Magic Number,Raven.SimulatedWorkLoad,Program,C:\repos\ravendb_ravendb\ToMigrate\Raven.SimulatedWorkLoad\Program.cs,GenerateSources,The following statement contains a magic number: foreach (var observable in sources)              {                  var wait = TimeSpan.FromMilliseconds(random.Next(100' 2400));                  var bufferSize = random.Next(1' 16);                  observable.Buffer(wait' bufferSize)                            .Subscribe(list =>                            {                                using (var session = documentStore.OpenSession())                                {                                    foreach (var user in list)                                    {                                        session.Store(user);                                    }                                    session.SaveChanges();                                }                            });              }
Magic Number,Raven.SimulatedWorkLoad,Program,C:\repos\ravendb_ravendb\ToMigrate\Raven.SimulatedWorkLoad\Program.cs,ReadFromFile,The following statement contains a magic number: using (var data = File.OpenRead(file))              using (var reader = new StreamReader(data))              {                  string line;                  while ((line = reader.ReadLine()) != null)                  {                      string[] parts = line.Split('|');                      yield return new User                      {                          First = parts[0]'                          Last = parts[1]'                          Email = parts[2]'                          City = parts[3]'                          State = parts[4]'                          Zip = parts[5]'                          Phone = parts[6]'                          StreetAddress = parts[7]                      };                  }              }
Magic Number,Raven.SimulatedWorkLoad,Program,C:\repos\ravendb_ravendb\ToMigrate\Raven.SimulatedWorkLoad\Program.cs,ReadFromFile,The following statement contains a magic number: using (var data = File.OpenRead(file))              using (var reader = new StreamReader(data))              {                  string line;                  while ((line = reader.ReadLine()) != null)                  {                      string[] parts = line.Split('|');                      yield return new User                      {                          First = parts[0]'                          Last = parts[1]'                          Email = parts[2]'                          City = parts[3]'                          State = parts[4]'                          Zip = parts[5]'                          Phone = parts[6]'                          StreetAddress = parts[7]                      };                  }              }
Magic Number,Raven.SimulatedWorkLoad,Program,C:\repos\ravendb_ravendb\ToMigrate\Raven.SimulatedWorkLoad\Program.cs,ReadFromFile,The following statement contains a magic number: using (var data = File.OpenRead(file))              using (var reader = new StreamReader(data))              {                  string line;                  while ((line = reader.ReadLine()) != null)                  {                      string[] parts = line.Split('|');                      yield return new User                      {                          First = parts[0]'                          Last = parts[1]'                          Email = parts[2]'                          City = parts[3]'                          State = parts[4]'                          Zip = parts[5]'                          Phone = parts[6]'                          StreetAddress = parts[7]                      };                  }              }
Magic Number,Raven.SimulatedWorkLoad,Program,C:\repos\ravendb_ravendb\ToMigrate\Raven.SimulatedWorkLoad\Program.cs,ReadFromFile,The following statement contains a magic number: using (var data = File.OpenRead(file))              using (var reader = new StreamReader(data))              {                  string line;                  while ((line = reader.ReadLine()) != null)                  {                      string[] parts = line.Split('|');                      yield return new User                      {                          First = parts[0]'                          Last = parts[1]'                          Email = parts[2]'                          City = parts[3]'                          State = parts[4]'                          Zip = parts[5]'                          Phone = parts[6]'                          StreetAddress = parts[7]                      };                  }              }
Magic Number,Raven.SimulatedWorkLoad,Program,C:\repos\ravendb_ravendb\ToMigrate\Raven.SimulatedWorkLoad\Program.cs,ReadFromFile,The following statement contains a magic number: using (var data = File.OpenRead(file))              using (var reader = new StreamReader(data))              {                  string line;                  while ((line = reader.ReadLine()) != null)                  {                      string[] parts = line.Split('|');                      yield return new User                      {                          First = parts[0]'                          Last = parts[1]'                          Email = parts[2]'                          City = parts[3]'                          State = parts[4]'                          Zip = parts[5]'                          Phone = parts[6]'                          StreetAddress = parts[7]                      };                  }              }
Magic Number,Raven.SimulatedWorkLoad,Program,C:\repos\ravendb_ravendb\ToMigrate\Raven.SimulatedWorkLoad\Program.cs,ReadFromFile,The following statement contains a magic number: using (var data = File.OpenRead(file))              using (var reader = new StreamReader(data))              {                  string line;                  while ((line = reader.ReadLine()) != null)                  {                      string[] parts = line.Split('|');                      yield return new User                      {                          First = parts[0]'                          Last = parts[1]'                          Email = parts[2]'                          City = parts[3]'                          State = parts[4]'                          Zip = parts[5]'                          Phone = parts[6]'                          StreetAddress = parts[7]                      };                  }              }
Magic Number,Raven.SimulatedWorkLoad,CreateIndexes,C:\repos\ravendb_ravendb\ToMigrate\Raven.SimulatedWorkLoad\Program.cs,CreateIndexesSecond,The following statement contains a magic number: if (loops++%10 != 0 || createdMapIndexes2 && createdMapReduceIndexes2)                  return;
Magic Number,Raven.SimulatedWorkLoad,CreateIndexes,C:\repos\ravendb_ravendb\ToMigrate\Raven.SimulatedWorkLoad\Program.cs,CreateIndexesSecond,The following statement contains a magic number: if (createdMapIndexes2 == false && databaseStatistics.CountOfDocuments > 25 * 1000)              {                  new Users_Locations().Execute(documentStore);                  createdMapIndexes2 = true;              }
Magic Number,Raven.SimulatedWorkLoad,CreateIndexes,C:\repos\ravendb_ravendb\ToMigrate\Raven.SimulatedWorkLoad\Program.cs,CreateIndexesSecond,The following statement contains a magic number: if (createdMapIndexes2 == false && databaseStatistics.CountOfDocuments > 25 * 1000)              {                  new Users_Locations().Execute(documentStore);                  createdMapIndexes2 = true;              }
Magic Number,Raven.SimulatedWorkLoad,CreateIndexes,C:\repos\ravendb_ravendb\ToMigrate\Raven.SimulatedWorkLoad\Program.cs,CreateIndexesSecond,The following statement contains a magic number: if (createdMapReduceIndexes2 == false && databaseStatistics.CountOfDocuments > 40 * 1000)              {                  new Users_Stats_ByStateAndcity().Execute(documentStore);                  createdMapReduceIndexes2 = true;              }
Magic Number,Raven.SimulatedWorkLoad,CreateIndexes,C:\repos\ravendb_ravendb\ToMigrate\Raven.SimulatedWorkLoad\Program.cs,CreateIndexesSecond,The following statement contains a magic number: if (createdMapReduceIndexes2 == false && databaseStatistics.CountOfDocuments > 40 * 1000)              {                  new Users_Stats_ByStateAndcity().Execute(documentStore);                  createdMapReduceIndexes2 = true;              }
Magic Number,Raven.SimulatedWorkLoad,CreateIndexes,C:\repos\ravendb_ravendb\ToMigrate\Raven.SimulatedWorkLoad\Program.cs,DoSomeOtherWork,The following statement contains a magic number: using (var session = documentStore.OpenSession())              {                  switch (mark)                  {                      case 0: // load some docs by ids                          for (int i = 0; i < random.Next(1'4); i++)                          {                              session.Load<User>(random.Next(1' 350000));                          }                          break;                      case 1: // load by id and modify                          var id = random.Next(1' 350000);                          var user1 = session.Load<User>(id);                          if (user1 != null)                          {                              user1.State = user1.State == "TX" ? "CN" : "TX";                          }                          break;                      case 2: // load by id and query                          for (int i = 0; i < mark / 2; i++)                          {                              var user2 = session.Load<User>(random.Next(1' 350000));                              if (user2 != null)                              {                                  session.Query<Users_Stats_ByState.Result' Users_Stats_ByState>()                                     .Where(x => x.State == user2.State)                                     .ToList();                              }                          }                          break;                      case 3:                          var user3 = session.Load<User>(random.Next(1' 350000));                          if (createdMapIndexes2 && user3 != null)                          {                              session.Query<User' Users_Locations>()                                     .Where(x => x.City == user3.City)                                     .ToList();                          }                          break;                      case 4:                      var user4 = session.Load<User>(random.Next(1' 350000));                          if (createdMapReduceIndexes2 && user4 != null)                          {                              session.Query<Users_Stats_ByStateAndcity.Result' Users_Stats_ByStateAndcity>()                                     .Where(x => x.City == user4.City && x.State == user4.State)                                     .ToList();                          }                          break;                      case 5:                          goto case 2;                  }                    session.SaveChanges();              }
Magic Number,Raven.SimulatedWorkLoad,CreateIndexes,C:\repos\ravendb_ravendb\ToMigrate\Raven.SimulatedWorkLoad\Program.cs,DoSomeOtherWork,The following statement contains a magic number: using (var session = documentStore.OpenSession())              {                  switch (mark)                  {                      case 0: // load some docs by ids                          for (int i = 0; i < random.Next(1'4); i++)                          {                              session.Load<User>(random.Next(1' 350000));                          }                          break;                      case 1: // load by id and modify                          var id = random.Next(1' 350000);                          var user1 = session.Load<User>(id);                          if (user1 != null)                          {                              user1.State = user1.State == "TX" ? "CN" : "TX";                          }                          break;                      case 2: // load by id and query                          for (int i = 0; i < mark / 2; i++)                          {                              var user2 = session.Load<User>(random.Next(1' 350000));                              if (user2 != null)                              {                                  session.Query<Users_Stats_ByState.Result' Users_Stats_ByState>()                                     .Where(x => x.State == user2.State)                                     .ToList();                              }                          }                          break;                      case 3:                          var user3 = session.Load<User>(random.Next(1' 350000));                          if (createdMapIndexes2 && user3 != null)                          {                              session.Query<User' Users_Locations>()                                     .Where(x => x.City == user3.City)                                     .ToList();                          }                          break;                      case 4:                      var user4 = session.Load<User>(random.Next(1' 350000));                          if (createdMapReduceIndexes2 && user4 != null)                          {                              session.Query<Users_Stats_ByStateAndcity.Result' Users_Stats_ByStateAndcity>()                                     .Where(x => x.City == user4.City && x.State == user4.State)                                     .ToList();                          }                          break;                      case 5:                          goto case 2;                  }                    session.SaveChanges();              }
Magic Number,Raven.SimulatedWorkLoad,CreateIndexes,C:\repos\ravendb_ravendb\ToMigrate\Raven.SimulatedWorkLoad\Program.cs,DoSomeOtherWork,The following statement contains a magic number: using (var session = documentStore.OpenSession())              {                  switch (mark)                  {                      case 0: // load some docs by ids                          for (int i = 0; i < random.Next(1'4); i++)                          {                              session.Load<User>(random.Next(1' 350000));                          }                          break;                      case 1: // load by id and modify                          var id = random.Next(1' 350000);                          var user1 = session.Load<User>(id);                          if (user1 != null)                          {                              user1.State = user1.State == "TX" ? "CN" : "TX";                          }                          break;                      case 2: // load by id and query                          for (int i = 0; i < mark / 2; i++)                          {                              var user2 = session.Load<User>(random.Next(1' 350000));                              if (user2 != null)                              {                                  session.Query<Users_Stats_ByState.Result' Users_Stats_ByState>()                                     .Where(x => x.State == user2.State)                                     .ToList();                              }                          }                          break;                      case 3:                          var user3 = session.Load<User>(random.Next(1' 350000));                          if (createdMapIndexes2 && user3 != null)                          {                              session.Query<User' Users_Locations>()                                     .Where(x => x.City == user3.City)                                     .ToList();                          }                          break;                      case 4:                      var user4 = session.Load<User>(random.Next(1' 350000));                          if (createdMapReduceIndexes2 && user4 != null)                          {                              session.Query<Users_Stats_ByStateAndcity.Result' Users_Stats_ByStateAndcity>()                                     .Where(x => x.City == user4.City && x.State == user4.State)                                     .ToList();                          }                          break;                      case 5:                          goto case 2;                  }                    session.SaveChanges();              }
Magic Number,Raven.SimulatedWorkLoad,CreateIndexes,C:\repos\ravendb_ravendb\ToMigrate\Raven.SimulatedWorkLoad\Program.cs,DoSomeOtherWork,The following statement contains a magic number: using (var session = documentStore.OpenSession())              {                  switch (mark)                  {                      case 0: // load some docs by ids                          for (int i = 0; i < random.Next(1'4); i++)                          {                              session.Load<User>(random.Next(1' 350000));                          }                          break;                      case 1: // load by id and modify                          var id = random.Next(1' 350000);                          var user1 = session.Load<User>(id);                          if (user1 != null)                          {                              user1.State = user1.State == "TX" ? "CN" : "TX";                          }                          break;                      case 2: // load by id and query                          for (int i = 0; i < mark / 2; i++)                          {                              var user2 = session.Load<User>(random.Next(1' 350000));                              if (user2 != null)                              {                                  session.Query<Users_Stats_ByState.Result' Users_Stats_ByState>()                                     .Where(x => x.State == user2.State)                                     .ToList();                              }                          }                          break;                      case 3:                          var user3 = session.Load<User>(random.Next(1' 350000));                          if (createdMapIndexes2 && user3 != null)                          {                              session.Query<User' Users_Locations>()                                     .Where(x => x.City == user3.City)                                     .ToList();                          }                          break;                      case 4:                      var user4 = session.Load<User>(random.Next(1' 350000));                          if (createdMapReduceIndexes2 && user4 != null)                          {                              session.Query<Users_Stats_ByStateAndcity.Result' Users_Stats_ByStateAndcity>()                                     .Where(x => x.City == user4.City && x.State == user4.State)                                     .ToList();                          }                          break;                      case 5:                          goto case 2;                  }                    session.SaveChanges();              }
Magic Number,Raven.SimulatedWorkLoad,CreateIndexes,C:\repos\ravendb_ravendb\ToMigrate\Raven.SimulatedWorkLoad\Program.cs,DoSomeOtherWork,The following statement contains a magic number: using (var session = documentStore.OpenSession())              {                  switch (mark)                  {                      case 0: // load some docs by ids                          for (int i = 0; i < random.Next(1'4); i++)                          {                              session.Load<User>(random.Next(1' 350000));                          }                          break;                      case 1: // load by id and modify                          var id = random.Next(1' 350000);                          var user1 = session.Load<User>(id);                          if (user1 != null)                          {                              user1.State = user1.State == "TX" ? "CN" : "TX";                          }                          break;                      case 2: // load by id and query                          for (int i = 0; i < mark / 2; i++)                          {                              var user2 = session.Load<User>(random.Next(1' 350000));                              if (user2 != null)                              {                                  session.Query<Users_Stats_ByState.Result' Users_Stats_ByState>()                                     .Where(x => x.State == user2.State)                                     .ToList();                              }                          }                          break;                      case 3:                          var user3 = session.Load<User>(random.Next(1' 350000));                          if (createdMapIndexes2 && user3 != null)                          {                              session.Query<User' Users_Locations>()                                     .Where(x => x.City == user3.City)                                     .ToList();                          }                          break;                      case 4:                      var user4 = session.Load<User>(random.Next(1' 350000));                          if (createdMapReduceIndexes2 && user4 != null)                          {                              session.Query<Users_Stats_ByStateAndcity.Result' Users_Stats_ByStateAndcity>()                                     .Where(x => x.City == user4.City && x.State == user4.State)                                     .ToList();                          }                          break;                      case 5:                          goto case 2;                  }                    session.SaveChanges();              }
Magic Number,Raven.SimulatedWorkLoad,CreateIndexes,C:\repos\ravendb_ravendb\ToMigrate\Raven.SimulatedWorkLoad\Program.cs,DoSomeOtherWork,The following statement contains a magic number: using (var session = documentStore.OpenSession())              {                  switch (mark)                  {                      case 0: // load some docs by ids                          for (int i = 0; i < random.Next(1'4); i++)                          {                              session.Load<User>(random.Next(1' 350000));                          }                          break;                      case 1: // load by id and modify                          var id = random.Next(1' 350000);                          var user1 = session.Load<User>(id);                          if (user1 != null)                          {                              user1.State = user1.State == "TX" ? "CN" : "TX";                          }                          break;                      case 2: // load by id and query                          for (int i = 0; i < mark / 2; i++)                          {                              var user2 = session.Load<User>(random.Next(1' 350000));                              if (user2 != null)                              {                                  session.Query<Users_Stats_ByState.Result' Users_Stats_ByState>()                                     .Where(x => x.State == user2.State)                                     .ToList();                              }                          }                          break;                      case 3:                          var user3 = session.Load<User>(random.Next(1' 350000));                          if (createdMapIndexes2 && user3 != null)                          {                              session.Query<User' Users_Locations>()                                     .Where(x => x.City == user3.City)                                     .ToList();                          }                          break;                      case 4:                      var user4 = session.Load<User>(random.Next(1' 350000));                          if (createdMapReduceIndexes2 && user4 != null)                          {                              session.Query<Users_Stats_ByStateAndcity.Result' Users_Stats_ByStateAndcity>()                                     .Where(x => x.City == user4.City && x.State == user4.State)                                     .ToList();                          }                          break;                      case 5:                          goto case 2;                  }                    session.SaveChanges();              }
Magic Number,Raven.SimulatedWorkLoad,CreateIndexes,C:\repos\ravendb_ravendb\ToMigrate\Raven.SimulatedWorkLoad\Program.cs,DoSomeOtherWork,The following statement contains a magic number: using (var session = documentStore.OpenSession())              {                  switch (mark)                  {                      case 0: // load some docs by ids                          for (int i = 0; i < random.Next(1'4); i++)                          {                              session.Load<User>(random.Next(1' 350000));                          }                          break;                      case 1: // load by id and modify                          var id = random.Next(1' 350000);                          var user1 = session.Load<User>(id);                          if (user1 != null)                          {                              user1.State = user1.State == "TX" ? "CN" : "TX";                          }                          break;                      case 2: // load by id and query                          for (int i = 0; i < mark / 2; i++)                          {                              var user2 = session.Load<User>(random.Next(1' 350000));                              if (user2 != null)                              {                                  session.Query<Users_Stats_ByState.Result' Users_Stats_ByState>()                                     .Where(x => x.State == user2.State)                                     .ToList();                              }                          }                          break;                      case 3:                          var user3 = session.Load<User>(random.Next(1' 350000));                          if (createdMapIndexes2 && user3 != null)                          {                              session.Query<User' Users_Locations>()                                     .Where(x => x.City == user3.City)                                     .ToList();                          }                          break;                      case 4:                      var user4 = session.Load<User>(random.Next(1' 350000));                          if (createdMapReduceIndexes2 && user4 != null)                          {                              session.Query<Users_Stats_ByStateAndcity.Result' Users_Stats_ByStateAndcity>()                                     .Where(x => x.City == user4.City && x.State == user4.State)                                     .ToList();                          }                          break;                      case 5:                          goto case 2;                  }                    session.SaveChanges();              }
Magic Number,Raven.SimulatedWorkLoad,CreateIndexes,C:\repos\ravendb_ravendb\ToMigrate\Raven.SimulatedWorkLoad\Program.cs,DoSomeOtherWork,The following statement contains a magic number: using (var session = documentStore.OpenSession())              {                  switch (mark)                  {                      case 0: // load some docs by ids                          for (int i = 0; i < random.Next(1'4); i++)                          {                              session.Load<User>(random.Next(1' 350000));                          }                          break;                      case 1: // load by id and modify                          var id = random.Next(1' 350000);                          var user1 = session.Load<User>(id);                          if (user1 != null)                          {                              user1.State = user1.State == "TX" ? "CN" : "TX";                          }                          break;                      case 2: // load by id and query                          for (int i = 0; i < mark / 2; i++)                          {                              var user2 = session.Load<User>(random.Next(1' 350000));                              if (user2 != null)                              {                                  session.Query<Users_Stats_ByState.Result' Users_Stats_ByState>()                                     .Where(x => x.State == user2.State)                                     .ToList();                              }                          }                          break;                      case 3:                          var user3 = session.Load<User>(random.Next(1' 350000));                          if (createdMapIndexes2 && user3 != null)                          {                              session.Query<User' Users_Locations>()                                     .Where(x => x.City == user3.City)                                     .ToList();                          }                          break;                      case 4:                      var user4 = session.Load<User>(random.Next(1' 350000));                          if (createdMapReduceIndexes2 && user4 != null)                          {                              session.Query<Users_Stats_ByStateAndcity.Result' Users_Stats_ByStateAndcity>()                                     .Where(x => x.City == user4.City && x.State == user4.State)                                     .ToList();                          }                          break;                      case 5:                          goto case 2;                  }                    session.SaveChanges();              }
Magic Number,Raven.SimulatedWorkLoad,CreateIndexes,C:\repos\ravendb_ravendb\ToMigrate\Raven.SimulatedWorkLoad\Program.cs,DoSomeOtherWork,The following statement contains a magic number: using (var session = documentStore.OpenSession())              {                  switch (mark)                  {                      case 0: // load some docs by ids                          for (int i = 0; i < random.Next(1'4); i++)                          {                              session.Load<User>(random.Next(1' 350000));                          }                          break;                      case 1: // load by id and modify                          var id = random.Next(1' 350000);                          var user1 = session.Load<User>(id);                          if (user1 != null)                          {                              user1.State = user1.State == "TX" ? "CN" : "TX";                          }                          break;                      case 2: // load by id and query                          for (int i = 0; i < mark / 2; i++)                          {                              var user2 = session.Load<User>(random.Next(1' 350000));                              if (user2 != null)                              {                                  session.Query<Users_Stats_ByState.Result' Users_Stats_ByState>()                                     .Where(x => x.State == user2.State)                                     .ToList();                              }                          }                          break;                      case 3:                          var user3 = session.Load<User>(random.Next(1' 350000));                          if (createdMapIndexes2 && user3 != null)                          {                              session.Query<User' Users_Locations>()                                     .Where(x => x.City == user3.City)                                     .ToList();                          }                          break;                      case 4:                      var user4 = session.Load<User>(random.Next(1' 350000));                          if (createdMapReduceIndexes2 && user4 != null)                          {                              session.Query<Users_Stats_ByStateAndcity.Result' Users_Stats_ByStateAndcity>()                                     .Where(x => x.City == user4.City && x.State == user4.State)                                     .ToList();                          }                          break;                      case 5:                          goto case 2;                  }                    session.SaveChanges();              }
Magic Number,Raven.SimulatedWorkLoad,CreateIndexes,C:\repos\ravendb_ravendb\ToMigrate\Raven.SimulatedWorkLoad\Program.cs,DoSomeOtherWork,The following statement contains a magic number: using (var session = documentStore.OpenSession())              {                  switch (mark)                  {                      case 0: // load some docs by ids                          for (int i = 0; i < random.Next(1'4); i++)                          {                              session.Load<User>(random.Next(1' 350000));                          }                          break;                      case 1: // load by id and modify                          var id = random.Next(1' 350000);                          var user1 = session.Load<User>(id);                          if (user1 != null)                          {                              user1.State = user1.State == "TX" ? "CN" : "TX";                          }                          break;                      case 2: // load by id and query                          for (int i = 0; i < mark / 2; i++)                          {                              var user2 = session.Load<User>(random.Next(1' 350000));                              if (user2 != null)                              {                                  session.Query<Users_Stats_ByState.Result' Users_Stats_ByState>()                                     .Where(x => x.State == user2.State)                                     .ToList();                              }                          }                          break;                      case 3:                          var user3 = session.Load<User>(random.Next(1' 350000));                          if (createdMapIndexes2 && user3 != null)                          {                              session.Query<User' Users_Locations>()                                     .Where(x => x.City == user3.City)                                     .ToList();                          }                          break;                      case 4:                      var user4 = session.Load<User>(random.Next(1' 350000));                          if (createdMapReduceIndexes2 && user4 != null)                          {                              session.Query<Users_Stats_ByStateAndcity.Result' Users_Stats_ByStateAndcity>()                                     .Where(x => x.City == user4.City && x.State == user4.State)                                     .ToList();                          }                          break;                      case 5:                          goto case 2;                  }                    session.SaveChanges();              }
Magic Number,Raven.SimulatedWorkLoad,CreateIndexes,C:\repos\ravendb_ravendb\ToMigrate\Raven.SimulatedWorkLoad\Program.cs,DoSomeOtherWork,The following statement contains a magic number: using (var session = documentStore.OpenSession())              {                  switch (mark)                  {                      case 0: // load some docs by ids                          for (int i = 0; i < random.Next(1'4); i++)                          {                              session.Load<User>(random.Next(1' 350000));                          }                          break;                      case 1: // load by id and modify                          var id = random.Next(1' 350000);                          var user1 = session.Load<User>(id);                          if (user1 != null)                          {                              user1.State = user1.State == "TX" ? "CN" : "TX";                          }                          break;                      case 2: // load by id and query                          for (int i = 0; i < mark / 2; i++)                          {                              var user2 = session.Load<User>(random.Next(1' 350000));                              if (user2 != null)                              {                                  session.Query<Users_Stats_ByState.Result' Users_Stats_ByState>()                                     .Where(x => x.State == user2.State)                                     .ToList();                              }                          }                          break;                      case 3:                          var user3 = session.Load<User>(random.Next(1' 350000));                          if (createdMapIndexes2 && user3 != null)                          {                              session.Query<User' Users_Locations>()                                     .Where(x => x.City == user3.City)                                     .ToList();                          }                          break;                      case 4:                      var user4 = session.Load<User>(random.Next(1' 350000));                          if (createdMapReduceIndexes2 && user4 != null)                          {                              session.Query<Users_Stats_ByStateAndcity.Result' Users_Stats_ByStateAndcity>()                                     .Where(x => x.City == user4.City && x.State == user4.State)                                     .ToList();                          }                          break;                      case 5:                          goto case 2;                  }                    session.SaveChanges();              }
Magic Number,Raven.SimulatedWorkLoad,CreateIndexes,C:\repos\ravendb_ravendb\ToMigrate\Raven.SimulatedWorkLoad\Program.cs,DoSomeOtherWork,The following statement contains a magic number: using (var session = documentStore.OpenSession())              {                  switch (mark)                  {                      case 0: // load some docs by ids                          for (int i = 0; i < random.Next(1'4); i++)                          {                              session.Load<User>(random.Next(1' 350000));                          }                          break;                      case 1: // load by id and modify                          var id = random.Next(1' 350000);                          var user1 = session.Load<User>(id);                          if (user1 != null)                          {                              user1.State = user1.State == "TX" ? "CN" : "TX";                          }                          break;                      case 2: // load by id and query                          for (int i = 0; i < mark / 2; i++)                          {                              var user2 = session.Load<User>(random.Next(1' 350000));                              if (user2 != null)                              {                                  session.Query<Users_Stats_ByState.Result' Users_Stats_ByState>()                                     .Where(x => x.State == user2.State)                                     .ToList();                              }                          }                          break;                      case 3:                          var user3 = session.Load<User>(random.Next(1' 350000));                          if (createdMapIndexes2 && user3 != null)                          {                              session.Query<User' Users_Locations>()                                     .Where(x => x.City == user3.City)                                     .ToList();                          }                          break;                      case 4:                      var user4 = session.Load<User>(random.Next(1' 350000));                          if (createdMapReduceIndexes2 && user4 != null)                          {                              session.Query<Users_Stats_ByStateAndcity.Result' Users_Stats_ByStateAndcity>()                                     .Where(x => x.City == user4.City && x.State == user4.State)                                     .ToList();                          }                          break;                      case 5:                          goto case 2;                  }                    session.SaveChanges();              }
Missing Default,Raven.SimulatedWorkLoad,CreateIndexes,C:\repos\ravendb_ravendb\ToMigrate\Raven.SimulatedWorkLoad\Program.cs,DoSomeOtherWork,The following switch statement is missing a default case: switch (mark)                  {                      case 0: // load some docs by ids                          for (int i = 0; i < random.Next(1'4); i++)                          {                              session.Load<User>(random.Next(1' 350000));                          }                          break;                      case 1: // load by id and modify                          var id = random.Next(1' 350000);                          var user1 = session.Load<User>(id);                          if (user1 != null)                          {                              user1.State = user1.State == "TX" ? "CN" : "TX";                          }                          break;                      case 2: // load by id and query                          for (int i = 0; i < mark / 2; i++)                          {                              var user2 = session.Load<User>(random.Next(1' 350000));                              if (user2 != null)                              {                                  session.Query<Users_Stats_ByState.Result' Users_Stats_ByState>()                                     .Where(x => x.State == user2.State)                                     .ToList();                              }                          }                          break;                      case 3:                          var user3 = session.Load<User>(random.Next(1' 350000));                          if (createdMapIndexes2 && user3 != null)                          {                              session.Query<User' Users_Locations>()                                     .Where(x => x.City == user3.City)                                     .ToList();                          }                          break;                      case 4:                      var user4 = session.Load<User>(random.Next(1' 350000));                          if (createdMapReduceIndexes2 && user4 != null)                          {                              session.Query<Users_Stats_ByStateAndcity.Result' Users_Stats_ByStateAndcity>()                                     .Where(x => x.City == user4.City && x.State == user4.State)                                     .ToList();                          }                          break;                      case 5:                          goto case 2;                  }
