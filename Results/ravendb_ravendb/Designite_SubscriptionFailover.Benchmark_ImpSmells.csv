Implementation smell,Namespace,Class,File,Method,Description
Long Identifier,SubscriptionFailover.Benchmark,SubscriptionFailoverBenchmark,C:\repos\ravendb_ravendb\bench\SubscriptionFailover.Benchmark\Program.cs,,The length of the parameter subscriptionCreationTasksAmount is 31.
Long Statement,SubscriptionFailover.Benchmark,SubscriptionFailoverBenchmark,C:\repos\ravendb_ravendb\bench\SubscriptionFailover.Benchmark\Program.cs,RunTest,The length of the statement  "                    await GenerateDocumentsForNode(defaultDatabase' docsCreationTasks' Servers[curI].WebUrl' curI * DocsAmount / nodesAmount); " is 122.
Magic Number,SubscriptionFailover.Benchmark,SubscriptionFailoverBenchmark,C:\repos\ravendb_ravendb\bench\SubscriptionFailover.Benchmark\Program.cs,GenerateDocuments,The following statement contains a magic number: do              {                  try                  {                      using (var session = store.OpenAsyncSession())                      {                          for (var i = 0; i < 1000; j++' i++)                          {                              await session.StoreAsync(new User                              {                                  Name = "User" + j                              });                          }                            await session.SaveChangesAsync();                      }                  }                  catch (Exception)                  {                      await Task.Delay(1000);                    }              } while (j < DocsAmount);
Magic Number,SubscriptionFailover.Benchmark,SubscriptionFailoverBenchmark,C:\repos\ravendb_ravendb\bench\SubscriptionFailover.Benchmark\Program.cs,GenerateDocuments,The following statement contains a magic number: do              {                  try                  {                      using (var session = store.OpenAsyncSession())                      {                          for (var i = 0; i < 1000; j++' i++)                          {                              await session.StoreAsync(new User                              {                                  Name = "User" + j                              });                          }                            await session.SaveChangesAsync();                      }                  }                  catch (Exception)                  {                      await Task.Delay(1000);                    }              } while (j < DocsAmount);
Magic Number,SubscriptionFailover.Benchmark,SubscriptionFailoverBenchmark,C:\repos\ravendb_ravendb\bench\SubscriptionFailover.Benchmark\Program.cs,RunsSubscriptionSimple,The following statement contains a magic number: var subscripiton = store.Subscriptions.GetSubscriptionWorker<User>(new SubscriptionWorkerOptions(subscriptionId)              {                  MaxDocsPerBatch = 1024              });
Magic Number,SubscriptionFailover.Benchmark,SubscriptionFailoverBenchmark,C:\repos\ravendb_ravendb\bench\SubscriptionFailover.Benchmark\Program.cs,RunSubscription,The following statement contains a magic number: using (var store = new DocumentStore              {                  Urls = new[] { Servers[0].WebUrl }'                  Database = defaultDatabase              }.Initialize())              {                  var subscriptionId = await store.Subscriptions.CreateAsync<User>();                    var subscripiton = store.Subscriptions.GetSubscriptionWorker<User>(new SubscriptionWorkerOptions(subscriptionId)                  {                      MaxDocsPerBatch = 1024                  });                  var counter = 0;                  var tcs = new TaskCompletionSource<bool>();                    log = new List<(string' DateTime)>();                      subscripiton.AfterAcknowledgment += b =>                  {                      if (counter == 1 * DocsAmount)                          tcs.SetResult(true);                      return Task.CompletedTask;                  };                    GC.KeepAlive(subscripiton.Run(x =>                  {                      Interlocked.Increment(ref counter);                  }));                    await tcs.Task;              }
Magic Number,SubscriptionFailover.Benchmark,SubscriptionFailoverBenchmark,C:\repos\ravendb_ravendb\bench\SubscriptionFailover.Benchmark\Program.cs,GenerateDocumentsForNode,The following statement contains a magic number: using (var store = new DocumentStore              {                  Urls = new[] { url }'                  Database = defaultDatabase              }.Initialize())              {                  var j = 0;                  do                  {                      try                      {                          using (var session = store.OpenAsyncSession())                          {                              for (var k = 0; k < 1000; j++' k++)                              {                                  await session.StoreAsync(new User                                  {                                      Name = "User" + j                                  }' $"Users/{rangeStart + j}");                              }                                await session.SaveChangesAsync();                          }                      }                      catch (Exception)                      {                          await Task.Delay(1000);                        }                  } while (j < DocsAmount / nodesAmount + 3);              }
Magic Number,SubscriptionFailover.Benchmark,SubscriptionFailoverBenchmark,C:\repos\ravendb_ravendb\bench\SubscriptionFailover.Benchmark\Program.cs,GenerateDocumentsForNode,The following statement contains a magic number: using (var store = new DocumentStore              {                  Urls = new[] { url }'                  Database = defaultDatabase              }.Initialize())              {                  var j = 0;                  do                  {                      try                      {                          using (var session = store.OpenAsyncSession())                          {                              for (var k = 0; k < 1000; j++' k++)                              {                                  await session.StoreAsync(new User                                  {                                      Name = "User" + j                                  }' $"Users/{rangeStart + j}");                              }                                await session.SaveChangesAsync();                          }                      }                      catch (Exception)                      {                          await Task.Delay(1000);                        }                  } while (j < DocsAmount / nodesAmount + 3);              }
Magic Number,SubscriptionFailover.Benchmark,SubscriptionFailoverBenchmark,C:\repos\ravendb_ravendb\bench\SubscriptionFailover.Benchmark\Program.cs,GenerateDocumentsForNode,The following statement contains a magic number: using (var store = new DocumentStore              {                  Urls = new[] { url }'                  Database = defaultDatabase              }.Initialize())              {                  var j = 0;                  do                  {                      try                      {                          using (var session = store.OpenAsyncSession())                          {                              for (var k = 0; k < 1000; j++' k++)                              {                                  await session.StoreAsync(new User                                  {                                      Name = "User" + j                                  }' $"Users/{rangeStart + j}");                              }                                await session.SaveChangesAsync();                          }                      }                      catch (Exception)                      {                          await Task.Delay(1000);                        }                  } while (j < DocsAmount / nodesAmount + 3);              }
