Implementation smell,Namespace,Class,File,Method,Description
Long Statement,BulkInsert.Benchmark,BulkInsertBench,C:\repos\ravendb_ravendb\bench\BulkInsert.Benchmark\Program.cs,PerformBulkInsert,The length of the statement  "            Log($"Client Inserted {numberOfDocuments:#'#} documents of size {docSize:#'#} at " + clientSideTime.ToString("#'#") + " mSec"); " is 127.
Long Statement,BulkInsert.Benchmark,BulkInsertBench,C:\repos\ravendb_ravendb\bench\BulkInsert.Benchmark\Program.cs,PerformBulkInsert,The length of the statement  "            Log($"Finished Bulk Insert {numberOfDocuments:#'#} documents of size {docSize:#'#} at " + elapsed.ToString("#'#") + " mSec"); " is 125.
Magic Number,BulkInsert.Benchmark,BulkInsertBench,C:\repos\ravendb_ravendb\bench\BulkInsert.Benchmark\Program.cs,PerformBulkInsert,The following statement contains a magic number: int docSize = sizeOfDocuments == null ? _random.Next(5 * 1024 * 1024) : sizeOfDocuments.Value;
Magic Number,BulkInsert.Benchmark,BulkInsertBench,C:\repos\ravendb_ravendb\bench\BulkInsert.Benchmark\Program.cs,PerformBulkInsert,The following statement contains a magic number: int docSize = sizeOfDocuments == null ? _random.Next(5 * 1024 * 1024) : sizeOfDocuments.Value;
Magic Number,BulkInsert.Benchmark,BulkInsertBench,C:\repos\ravendb_ravendb\bench\BulkInsert.Benchmark\Program.cs,PerformBulkInsert,The following statement contains a magic number: int docSize = sizeOfDocuments == null ? _random.Next(5 * 1024 * 1024) : sizeOfDocuments.Value;
Magic Number,BulkInsert.Benchmark,BulkInsertBench,C:\repos\ravendb_ravendb\bench\BulkInsert.Benchmark\Program.cs,PerformBulkInsert,The following statement contains a magic number: var entities = new DocEntity[3];
Magic Number,BulkInsert.Benchmark,BulkInsertBench,C:\repos\ravendb_ravendb\bench\BulkInsert.Benchmark\Program.cs,PerformBulkInsert,The following statement contains a magic number: var dummies = Math.Min(numberOfDocuments' 1024*1024*1024/docSize  + 1);
Magic Number,BulkInsert.Benchmark,BulkInsertBench,C:\repos\ravendb_ravendb\bench\BulkInsert.Benchmark\Program.cs,PerformBulkInsert,The following statement contains a magic number: var dummies = Math.Min(numberOfDocuments' 1024*1024*1024/docSize  + 1);
Magic Number,BulkInsert.Benchmark,BulkInsertBench,C:\repos\ravendb_ravendb\bench\BulkInsert.Benchmark\Program.cs,PerformBulkInsert,The following statement contains a magic number: var dummies = Math.Min(numberOfDocuments' 1024*1024*1024/docSize  + 1);
Magic Number,BulkInsert.Benchmark,BulkInsertBench,C:\repos\ravendb_ravendb\bench\BulkInsert.Benchmark\Program.cs,PerformBulkInsert,The following statement contains a magic number: using (var bulkInsert = store.BulkInsert())              {                  for (long i = 0; i < numberOfDocuments; i++)                  {                      if (i % (numberOfDocuments / 5) == 0)                          Console.WriteLine($"{SystemTime.UtcNow:G} : Progress {i:##'###} out of {numberOfDocuments} ...");                        var entity = new DocEntity                      {                          SerialId = i'                          RandomId = _random.Next()'                          SomeRandomText = randStr[i % dummies]'                          Tags = tags                      };                      var idToUse = useSeqId ? _seqId++ : id++;                      bulkInsert.StoreAsync(entity' $"{collection}/{idToUse}").Wait();                        if (i == 0)                      {                          ids[0] = idToUse;                          entities[0] = entity;                      }                      else if (i == numberOfDocuments / 2)                      {                          ids[1] = idToUse;                          entities[1] = entity;                      }                      else if (i == numberOfDocuments - 1)                      {                          ids[2] = idToUse;                          entities[2] = entity;                      }                  }                    if (ids[0] == -1 ||                      ids[1] == -1 ||                      ids[2] == -1)                      throw new Exception("Internal Error");                  clientSideTime = sp.ElapsedMilliseconds;              }
Magic Number,BulkInsert.Benchmark,BulkInsertBench,C:\repos\ravendb_ravendb\bench\BulkInsert.Benchmark\Program.cs,PerformBulkInsert,The following statement contains a magic number: using (var bulkInsert = store.BulkInsert())              {                  for (long i = 0; i < numberOfDocuments; i++)                  {                      if (i % (numberOfDocuments / 5) == 0)                          Console.WriteLine($"{SystemTime.UtcNow:G} : Progress {i:##'###} out of {numberOfDocuments} ...");                        var entity = new DocEntity                      {                          SerialId = i'                          RandomId = _random.Next()'                          SomeRandomText = randStr[i % dummies]'                          Tags = tags                      };                      var idToUse = useSeqId ? _seqId++ : id++;                      bulkInsert.StoreAsync(entity' $"{collection}/{idToUse}").Wait();                        if (i == 0)                      {                          ids[0] = idToUse;                          entities[0] = entity;                      }                      else if (i == numberOfDocuments / 2)                      {                          ids[1] = idToUse;                          entities[1] = entity;                      }                      else if (i == numberOfDocuments - 1)                      {                          ids[2] = idToUse;                          entities[2] = entity;                      }                  }                    if (ids[0] == -1 ||                      ids[1] == -1 ||                      ids[2] == -1)                      throw new Exception("Internal Error");                  clientSideTime = sp.ElapsedMilliseconds;              }
Magic Number,BulkInsert.Benchmark,BulkInsertBench,C:\repos\ravendb_ravendb\bench\BulkInsert.Benchmark\Program.cs,PerformBulkInsert,The following statement contains a magic number: using (var bulkInsert = store.BulkInsert())              {                  for (long i = 0; i < numberOfDocuments; i++)                  {                      if (i % (numberOfDocuments / 5) == 0)                          Console.WriteLine($"{SystemTime.UtcNow:G} : Progress {i:##'###} out of {numberOfDocuments} ...");                        var entity = new DocEntity                      {                          SerialId = i'                          RandomId = _random.Next()'                          SomeRandomText = randStr[i % dummies]'                          Tags = tags                      };                      var idToUse = useSeqId ? _seqId++ : id++;                      bulkInsert.StoreAsync(entity' $"{collection}/{idToUse}").Wait();                        if (i == 0)                      {                          ids[0] = idToUse;                          entities[0] = entity;                      }                      else if (i == numberOfDocuments / 2)                      {                          ids[1] = idToUse;                          entities[1] = entity;                      }                      else if (i == numberOfDocuments - 1)                      {                          ids[2] = idToUse;                          entities[2] = entity;                      }                  }                    if (ids[0] == -1 ||                      ids[1] == -1 ||                      ids[2] == -1)                      throw new Exception("Internal Error");                  clientSideTime = sp.ElapsedMilliseconds;              }
Magic Number,BulkInsert.Benchmark,BulkInsertBench,C:\repos\ravendb_ravendb\bench\BulkInsert.Benchmark\Program.cs,PerformBulkInsert,The following statement contains a magic number: using (var bulkInsert = store.BulkInsert())              {                  for (long i = 0; i < numberOfDocuments; i++)                  {                      if (i % (numberOfDocuments / 5) == 0)                          Console.WriteLine($"{SystemTime.UtcNow:G} : Progress {i:##'###} out of {numberOfDocuments} ...");                        var entity = new DocEntity                      {                          SerialId = i'                          RandomId = _random.Next()'                          SomeRandomText = randStr[i % dummies]'                          Tags = tags                      };                      var idToUse = useSeqId ? _seqId++ : id++;                      bulkInsert.StoreAsync(entity' $"{collection}/{idToUse}").Wait();                        if (i == 0)                      {                          ids[0] = idToUse;                          entities[0] = entity;                      }                      else if (i == numberOfDocuments / 2)                      {                          ids[1] = idToUse;                          entities[1] = entity;                      }                      else if (i == numberOfDocuments - 1)                      {                          ids[2] = idToUse;                          entities[2] = entity;                      }                  }                    if (ids[0] == -1 ||                      ids[1] == -1 ||                      ids[2] == -1)                      throw new Exception("Internal Error");                  clientSideTime = sp.ElapsedMilliseconds;              }
Magic Number,BulkInsert.Benchmark,BulkInsertBench,C:\repos\ravendb_ravendb\bench\BulkInsert.Benchmark\Program.cs,PerformBulkInsert,The following statement contains a magic number: using (var bulkInsert = store.BulkInsert())              {                  for (long i = 0; i < numberOfDocuments; i++)                  {                      if (i % (numberOfDocuments / 5) == 0)                          Console.WriteLine($"{SystemTime.UtcNow:G} : Progress {i:##'###} out of {numberOfDocuments} ...");                        var entity = new DocEntity                      {                          SerialId = i'                          RandomId = _random.Next()'                          SomeRandomText = randStr[i % dummies]'                          Tags = tags                      };                      var idToUse = useSeqId ? _seqId++ : id++;                      bulkInsert.StoreAsync(entity' $"{collection}/{idToUse}").Wait();                        if (i == 0)                      {                          ids[0] = idToUse;                          entities[0] = entity;                      }                      else if (i == numberOfDocuments / 2)                      {                          ids[1] = idToUse;                          entities[1] = entity;                      }                      else if (i == numberOfDocuments - 1)                      {                          ids[2] = idToUse;                          entities[2] = entity;                      }                  }                    if (ids[0] == -1 ||                      ids[1] == -1 ||                      ids[2] == -1)                      throw new Exception("Internal Error");                  clientSideTime = sp.ElapsedMilliseconds;              }
Magic Number,BulkInsert.Benchmark,BulkInsertBench,C:\repos\ravendb_ravendb\bench\BulkInsert.Benchmark\Program.cs,PerformBulkInsert,The following statement contains a magic number: if (sizeOfDocuments == null)              {                  Log($"STATISTICS: N/A - Random Size");              }              else              {                  long totalSize = numberOfDocuments * docSize;                  var totalRate = (totalSize / elapsed) / 1000;                  Log($"STATISTICS: Total Size {totalSize:#'#}' {totalRate:#'#} MB/Sec");              }
Magic Number,BulkInsert.Benchmark,BulkInsertBench,C:\repos\ravendb_ravendb\bench\BulkInsert.Benchmark\Program.cs,PerformBulkInsert,The following statement contains a magic number: using (var session = store.OpenSession())              {                  var first = session.Load<DocEntity>($"{collection}/{ids[0]}");                  var middle = session.Load<DocEntity>($"{collection}/{ids[1]}");                  var last = session.Load<DocEntity>($"{collection}/{ids[2]}");                    if (first == null || middle == null || last == null)                  {                      Log(                          $"Data Verification Failed : isNull :: first={first == null}' middle={middle == null}' last={last == null}"'                          true);                  }                    if (first.SerialId == 0 &&                      middle.SerialId == numberOfDocuments / 2 &&                      last.SerialId == numberOfDocuments - 1)                  {                      Log("Data Successfully Verified!");                  }                  else                  {                      Log(                          $"Data Verification Failed : first={first.SerialId}' middle={middle.SerialId}' last={last.SerialId}"'                          true);                  }              }
Magic Number,BulkInsert.Benchmark,BulkInsertBench,C:\repos\ravendb_ravendb\bench\BulkInsert.Benchmark\Program.cs,PerformBulkInsert,The following statement contains a magic number: using (var session = store.OpenSession())              {                  var first = session.Load<DocEntity>($"{collection}/{ids[0]}");                  var middle = session.Load<DocEntity>($"{collection}/{ids[1]}");                  var last = session.Load<DocEntity>($"{collection}/{ids[2]}");                    if (first == null || middle == null || last == null)                  {                      Log(                          $"Data Verification Failed : isNull :: first={first == null}' middle={middle == null}' last={last == null}"'                          true);                  }                    if (first.SerialId == 0 &&                      middle.SerialId == numberOfDocuments / 2 &&                      last.SerialId == numberOfDocuments - 1)                  {                      Log("Data Successfully Verified!");                  }                  else                  {                      Log(                          $"Data Verification Failed : first={first.SerialId}' middle={middle.SerialId}' last={last.SerialId}"'                          true);                  }              }
Magic Number,BulkInsert.Benchmark,BulkInsertBench,C:\repos\ravendb_ravendb\bench\BulkInsert.Benchmark\Program.cs,Write,The following statement contains a magic number: using (var bulkInsert = store.BulkInsert())              {                  for (long i = 0; i < numberOfDocuments; i++)                  {                      if ((i % (16 * 1024)) == 0)                          Console.WriteLine($"{SystemTime.UtcNow:G} : Progress {i:##'###} out of {numberOfDocuments} ...");                        var entity = new DocEntity                      {                          SerialId = i'                          RandomId = _random.Next()'                      };                      await bulkInsert.StoreAsync(entity' $"items|").ConfigureAwait(false);                  }                    await bulkInsert.DisposeAsync().ConfigureAwait(false);              }
Magic Number,BulkInsert.Benchmark,BulkInsertBench,C:\repos\ravendb_ravendb\bench\BulkInsert.Benchmark\Program.cs,Write,The following statement contains a magic number: using (var bulkInsert = store.BulkInsert())              {                  for (long i = 0; i < numberOfDocuments; i++)                  {                      if ((i % (16 * 1024)) == 0)                          Console.WriteLine($"{SystemTime.UtcNow:G} : Progress {i:##'###} out of {numberOfDocuments} ...");                        var entity = new DocEntity                      {                          SerialId = i'                          RandomId = _random.Next()'                      };                      await bulkInsert.StoreAsync(entity' $"items|").ConfigureAwait(false);                  }                    await bulkInsert.DisposeAsync().ConfigureAwait(false);              }
Magic Number,BulkInsert.Benchmark,Program,C:\repos\ravendb_ravendb\bench\BulkInsert.Benchmark\Program.cs,Main,The following statement contains a magic number: using (var massiveObj = new BulkInsertBench("http://localhost:8080"' 1805861237))                  {                      massiveObj.CreateDb();  //                    var sp = Stopwatch.StartNew();  //                    massiveObj.Write(64 * 1024' 1024);  //                    Console.WriteLine(sp.Elapsed);                        var k = 1000;                      var kb = 1024;                        if (args.Length == 1)                          k = Convert.ToInt32(args[0]);                        //Console.WriteLine("metoraf...");                      //massiveObj.PerformBulkInsert("warmup"' 1000 * k' 30 * kb * kb);    //                    Console.WriteLine("bigSize...");  //                    massiveObj.PerformBulkInsert("bigSize"' 1 * k' 30 * kb * kb);                                                                                  Console.WriteLine("warmup...");                                          massiveObj.PerformBulkInsert("warmup"' 10 * k' 2 * kb);                                          Console.WriteLine("smallSize...");                                          massiveObj.PerformBulkInsert("smallSize"' 2 * k * k' 2 * kb);                                          Console.WriteLine("bigSize...");                                          massiveObj.PerformBulkInsert("bigSize"' 1 * k' 30 * kb * kb);                                          Console.WriteLine("forOverrite...");                                          massiveObj.PerformBulkInsert("forOverrite"' 500 * k' 5 * kb' false);                                          Console.WriteLine("forOverrite2...");                                          massiveObj.PerformBulkInsert("forOverrite"' 1000 * k' 5 * kb' false);                                          for (int i = 1; i <= 5; i++)                                          {                                              Console.WriteLine($"random {i}...");                                              massiveObj.PerformBulkInsert("random"' i * k * k' null);                                          }                                                                Console.WriteLine("Ending tests...");                  }
Magic Number,BulkInsert.Benchmark,Program,C:\repos\ravendb_ravendb\bench\BulkInsert.Benchmark\Program.cs,Main,The following statement contains a magic number: using (var massiveObj = new BulkInsertBench("http://localhost:8080"' 1805861237))                  {                      massiveObj.CreateDb();  //                    var sp = Stopwatch.StartNew();  //                    massiveObj.Write(64 * 1024' 1024);  //                    Console.WriteLine(sp.Elapsed);                        var k = 1000;                      var kb = 1024;                        if (args.Length == 1)                          k = Convert.ToInt32(args[0]);                        //Console.WriteLine("metoraf...");                      //massiveObj.PerformBulkInsert("warmup"' 1000 * k' 30 * kb * kb);    //                    Console.WriteLine("bigSize...");  //                    massiveObj.PerformBulkInsert("bigSize"' 1 * k' 30 * kb * kb);                                                                                  Console.WriteLine("warmup...");                                          massiveObj.PerformBulkInsert("warmup"' 10 * k' 2 * kb);                                          Console.WriteLine("smallSize...");                                          massiveObj.PerformBulkInsert("smallSize"' 2 * k * k' 2 * kb);                                          Console.WriteLine("bigSize...");                                          massiveObj.PerformBulkInsert("bigSize"' 1 * k' 30 * kb * kb);                                          Console.WriteLine("forOverrite...");                                          massiveObj.PerformBulkInsert("forOverrite"' 500 * k' 5 * kb' false);                                          Console.WriteLine("forOverrite2...");                                          massiveObj.PerformBulkInsert("forOverrite"' 1000 * k' 5 * kb' false);                                          for (int i = 1; i <= 5; i++)                                          {                                              Console.WriteLine($"random {i}...");                                              massiveObj.PerformBulkInsert("random"' i * k * k' null);                                          }                                                                Console.WriteLine("Ending tests...");                  }
Magic Number,BulkInsert.Benchmark,Program,C:\repos\ravendb_ravendb\bench\BulkInsert.Benchmark\Program.cs,Main,The following statement contains a magic number: using (var massiveObj = new BulkInsertBench("http://localhost:8080"' 1805861237))                  {                      massiveObj.CreateDb();  //                    var sp = Stopwatch.StartNew();  //                    massiveObj.Write(64 * 1024' 1024);  //                    Console.WriteLine(sp.Elapsed);                        var k = 1000;                      var kb = 1024;                        if (args.Length == 1)                          k = Convert.ToInt32(args[0]);                        //Console.WriteLine("metoraf...");                      //massiveObj.PerformBulkInsert("warmup"' 1000 * k' 30 * kb * kb);    //                    Console.WriteLine("bigSize...");  //                    massiveObj.PerformBulkInsert("bigSize"' 1 * k' 30 * kb * kb);                                                                                  Console.WriteLine("warmup...");                                          massiveObj.PerformBulkInsert("warmup"' 10 * k' 2 * kb);                                          Console.WriteLine("smallSize...");                                          massiveObj.PerformBulkInsert("smallSize"' 2 * k * k' 2 * kb);                                          Console.WriteLine("bigSize...");                                          massiveObj.PerformBulkInsert("bigSize"' 1 * k' 30 * kb * kb);                                          Console.WriteLine("forOverrite...");                                          massiveObj.PerformBulkInsert("forOverrite"' 500 * k' 5 * kb' false);                                          Console.WriteLine("forOverrite2...");                                          massiveObj.PerformBulkInsert("forOverrite"' 1000 * k' 5 * kb' false);                                          for (int i = 1; i <= 5; i++)                                          {                                              Console.WriteLine($"random {i}...");                                              massiveObj.PerformBulkInsert("random"' i * k * k' null);                                          }                                                                Console.WriteLine("Ending tests...");                  }
Magic Number,BulkInsert.Benchmark,Program,C:\repos\ravendb_ravendb\bench\BulkInsert.Benchmark\Program.cs,Main,The following statement contains a magic number: using (var massiveObj = new BulkInsertBench("http://localhost:8080"' 1805861237))                  {                      massiveObj.CreateDb();  //                    var sp = Stopwatch.StartNew();  //                    massiveObj.Write(64 * 1024' 1024);  //                    Console.WriteLine(sp.Elapsed);                        var k = 1000;                      var kb = 1024;                        if (args.Length == 1)                          k = Convert.ToInt32(args[0]);                        //Console.WriteLine("metoraf...");                      //massiveObj.PerformBulkInsert("warmup"' 1000 * k' 30 * kb * kb);    //                    Console.WriteLine("bigSize...");  //                    massiveObj.PerformBulkInsert("bigSize"' 1 * k' 30 * kb * kb);                                                                                  Console.WriteLine("warmup...");                                          massiveObj.PerformBulkInsert("warmup"' 10 * k' 2 * kb);                                          Console.WriteLine("smallSize...");                                          massiveObj.PerformBulkInsert("smallSize"' 2 * k * k' 2 * kb);                                          Console.WriteLine("bigSize...");                                          massiveObj.PerformBulkInsert("bigSize"' 1 * k' 30 * kb * kb);                                          Console.WriteLine("forOverrite...");                                          massiveObj.PerformBulkInsert("forOverrite"' 500 * k' 5 * kb' false);                                          Console.WriteLine("forOverrite2...");                                          massiveObj.PerformBulkInsert("forOverrite"' 1000 * k' 5 * kb' false);                                          for (int i = 1; i <= 5; i++)                                          {                                              Console.WriteLine($"random {i}...");                                              massiveObj.PerformBulkInsert("random"' i * k * k' null);                                          }                                                                Console.WriteLine("Ending tests...");                  }
Magic Number,BulkInsert.Benchmark,Program,C:\repos\ravendb_ravendb\bench\BulkInsert.Benchmark\Program.cs,Main,The following statement contains a magic number: using (var massiveObj = new BulkInsertBench("http://localhost:8080"' 1805861237))                  {                      massiveObj.CreateDb();  //                    var sp = Stopwatch.StartNew();  //                    massiveObj.Write(64 * 1024' 1024);  //                    Console.WriteLine(sp.Elapsed);                        var k = 1000;                      var kb = 1024;                        if (args.Length == 1)                          k = Convert.ToInt32(args[0]);                        //Console.WriteLine("metoraf...");                      //massiveObj.PerformBulkInsert("warmup"' 1000 * k' 30 * kb * kb);    //                    Console.WriteLine("bigSize...");  //                    massiveObj.PerformBulkInsert("bigSize"' 1 * k' 30 * kb * kb);                                                                                  Console.WriteLine("warmup...");                                          massiveObj.PerformBulkInsert("warmup"' 10 * k' 2 * kb);                                          Console.WriteLine("smallSize...");                                          massiveObj.PerformBulkInsert("smallSize"' 2 * k * k' 2 * kb);                                          Console.WriteLine("bigSize...");                                          massiveObj.PerformBulkInsert("bigSize"' 1 * k' 30 * kb * kb);                                          Console.WriteLine("forOverrite...");                                          massiveObj.PerformBulkInsert("forOverrite"' 500 * k' 5 * kb' false);                                          Console.WriteLine("forOverrite2...");                                          massiveObj.PerformBulkInsert("forOverrite"' 1000 * k' 5 * kb' false);                                          for (int i = 1; i <= 5; i++)                                          {                                              Console.WriteLine($"random {i}...");                                              massiveObj.PerformBulkInsert("random"' i * k * k' null);                                          }                                                                Console.WriteLine("Ending tests...");                  }
Magic Number,BulkInsert.Benchmark,Program,C:\repos\ravendb_ravendb\bench\BulkInsert.Benchmark\Program.cs,Main,The following statement contains a magic number: using (var massiveObj = new BulkInsertBench("http://localhost:8080"' 1805861237))                  {                      massiveObj.CreateDb();  //                    var sp = Stopwatch.StartNew();  //                    massiveObj.Write(64 * 1024' 1024);  //                    Console.WriteLine(sp.Elapsed);                        var k = 1000;                      var kb = 1024;                        if (args.Length == 1)                          k = Convert.ToInt32(args[0]);                        //Console.WriteLine("metoraf...");                      //massiveObj.PerformBulkInsert("warmup"' 1000 * k' 30 * kb * kb);    //                    Console.WriteLine("bigSize...");  //                    massiveObj.PerformBulkInsert("bigSize"' 1 * k' 30 * kb * kb);                                                                                  Console.WriteLine("warmup...");                                          massiveObj.PerformBulkInsert("warmup"' 10 * k' 2 * kb);                                          Console.WriteLine("smallSize...");                                          massiveObj.PerformBulkInsert("smallSize"' 2 * k * k' 2 * kb);                                          Console.WriteLine("bigSize...");                                          massiveObj.PerformBulkInsert("bigSize"' 1 * k' 30 * kb * kb);                                          Console.WriteLine("forOverrite...");                                          massiveObj.PerformBulkInsert("forOverrite"' 500 * k' 5 * kb' false);                                          Console.WriteLine("forOverrite2...");                                          massiveObj.PerformBulkInsert("forOverrite"' 1000 * k' 5 * kb' false);                                          for (int i = 1; i <= 5; i++)                                          {                                              Console.WriteLine($"random {i}...");                                              massiveObj.PerformBulkInsert("random"' i * k * k' null);                                          }                                                                Console.WriteLine("Ending tests...");                  }
Magic Number,BulkInsert.Benchmark,Program,C:\repos\ravendb_ravendb\bench\BulkInsert.Benchmark\Program.cs,Main,The following statement contains a magic number: using (var massiveObj = new BulkInsertBench("http://localhost:8080"' 1805861237))                  {                      massiveObj.CreateDb();  //                    var sp = Stopwatch.StartNew();  //                    massiveObj.Write(64 * 1024' 1024);  //                    Console.WriteLine(sp.Elapsed);                        var k = 1000;                      var kb = 1024;                        if (args.Length == 1)                          k = Convert.ToInt32(args[0]);                        //Console.WriteLine("metoraf...");                      //massiveObj.PerformBulkInsert("warmup"' 1000 * k' 30 * kb * kb);    //                    Console.WriteLine("bigSize...");  //                    massiveObj.PerformBulkInsert("bigSize"' 1 * k' 30 * kb * kb);                                                                                  Console.WriteLine("warmup...");                                          massiveObj.PerformBulkInsert("warmup"' 10 * k' 2 * kb);                                          Console.WriteLine("smallSize...");                                          massiveObj.PerformBulkInsert("smallSize"' 2 * k * k' 2 * kb);                                          Console.WriteLine("bigSize...");                                          massiveObj.PerformBulkInsert("bigSize"' 1 * k' 30 * kb * kb);                                          Console.WriteLine("forOverrite...");                                          massiveObj.PerformBulkInsert("forOverrite"' 500 * k' 5 * kb' false);                                          Console.WriteLine("forOverrite2...");                                          massiveObj.PerformBulkInsert("forOverrite"' 1000 * k' 5 * kb' false);                                          for (int i = 1; i <= 5; i++)                                          {                                              Console.WriteLine($"random {i}...");                                              massiveObj.PerformBulkInsert("random"' i * k * k' null);                                          }                                                                Console.WriteLine("Ending tests...");                  }
Magic Number,BulkInsert.Benchmark,Program,C:\repos\ravendb_ravendb\bench\BulkInsert.Benchmark\Program.cs,Main,The following statement contains a magic number: using (var massiveObj = new BulkInsertBench("http://localhost:8080"' 1805861237))                  {                      massiveObj.CreateDb();  //                    var sp = Stopwatch.StartNew();  //                    massiveObj.Write(64 * 1024' 1024);  //                    Console.WriteLine(sp.Elapsed);                        var k = 1000;                      var kb = 1024;                        if (args.Length == 1)                          k = Convert.ToInt32(args[0]);                        //Console.WriteLine("metoraf...");                      //massiveObj.PerformBulkInsert("warmup"' 1000 * k' 30 * kb * kb);    //                    Console.WriteLine("bigSize...");  //                    massiveObj.PerformBulkInsert("bigSize"' 1 * k' 30 * kb * kb);                                                                                  Console.WriteLine("warmup...");                                          massiveObj.PerformBulkInsert("warmup"' 10 * k' 2 * kb);                                          Console.WriteLine("smallSize...");                                          massiveObj.PerformBulkInsert("smallSize"' 2 * k * k' 2 * kb);                                          Console.WriteLine("bigSize...");                                          massiveObj.PerformBulkInsert("bigSize"' 1 * k' 30 * kb * kb);                                          Console.WriteLine("forOverrite...");                                          massiveObj.PerformBulkInsert("forOverrite"' 500 * k' 5 * kb' false);                                          Console.WriteLine("forOverrite2...");                                          massiveObj.PerformBulkInsert("forOverrite"' 1000 * k' 5 * kb' false);                                          for (int i = 1; i <= 5; i++)                                          {                                              Console.WriteLine($"random {i}...");                                              massiveObj.PerformBulkInsert("random"' i * k * k' null);                                          }                                                                Console.WriteLine("Ending tests...");                  }
Magic Number,BulkInsert.Benchmark,Program,C:\repos\ravendb_ravendb\bench\BulkInsert.Benchmark\Program.cs,Main,The following statement contains a magic number: using (var massiveObj = new BulkInsertBench("http://localhost:8080"' 1805861237))                  {                      massiveObj.CreateDb();  //                    var sp = Stopwatch.StartNew();  //                    massiveObj.Write(64 * 1024' 1024);  //                    Console.WriteLine(sp.Elapsed);                        var k = 1000;                      var kb = 1024;                        if (args.Length == 1)                          k = Convert.ToInt32(args[0]);                        //Console.WriteLine("metoraf...");                      //massiveObj.PerformBulkInsert("warmup"' 1000 * k' 30 * kb * kb);    //                    Console.WriteLine("bigSize...");  //                    massiveObj.PerformBulkInsert("bigSize"' 1 * k' 30 * kb * kb);                                                                                  Console.WriteLine("warmup...");                                          massiveObj.PerformBulkInsert("warmup"' 10 * k' 2 * kb);                                          Console.WriteLine("smallSize...");                                          massiveObj.PerformBulkInsert("smallSize"' 2 * k * k' 2 * kb);                                          Console.WriteLine("bigSize...");                                          massiveObj.PerformBulkInsert("bigSize"' 1 * k' 30 * kb * kb);                                          Console.WriteLine("forOverrite...");                                          massiveObj.PerformBulkInsert("forOverrite"' 500 * k' 5 * kb' false);                                          Console.WriteLine("forOverrite2...");                                          massiveObj.PerformBulkInsert("forOverrite"' 1000 * k' 5 * kb' false);                                          for (int i = 1; i <= 5; i++)                                          {                                              Console.WriteLine($"random {i}...");                                              massiveObj.PerformBulkInsert("random"' i * k * k' null);                                          }                                                                Console.WriteLine("Ending tests...");                  }
Magic Number,BulkInsert.Benchmark,Program,C:\repos\ravendb_ravendb\bench\BulkInsert.Benchmark\Program.cs,Main,The following statement contains a magic number: using (var massiveObj = new BulkInsertBench("http://localhost:8080"' 1805861237))                  {                      massiveObj.CreateDb();  //                    var sp = Stopwatch.StartNew();  //                    massiveObj.Write(64 * 1024' 1024);  //                    Console.WriteLine(sp.Elapsed);                        var k = 1000;                      var kb = 1024;                        if (args.Length == 1)                          k = Convert.ToInt32(args[0]);                        //Console.WriteLine("metoraf...");                      //massiveObj.PerformBulkInsert("warmup"' 1000 * k' 30 * kb * kb);    //                    Console.WriteLine("bigSize...");  //                    massiveObj.PerformBulkInsert("bigSize"' 1 * k' 30 * kb * kb);                                                                                  Console.WriteLine("warmup...");                                          massiveObj.PerformBulkInsert("warmup"' 10 * k' 2 * kb);                                          Console.WriteLine("smallSize...");                                          massiveObj.PerformBulkInsert("smallSize"' 2 * k * k' 2 * kb);                                          Console.WriteLine("bigSize...");                                          massiveObj.PerformBulkInsert("bigSize"' 1 * k' 30 * kb * kb);                                          Console.WriteLine("forOverrite...");                                          massiveObj.PerformBulkInsert("forOverrite"' 500 * k' 5 * kb' false);                                          Console.WriteLine("forOverrite2...");                                          massiveObj.PerformBulkInsert("forOverrite"' 1000 * k' 5 * kb' false);                                          for (int i = 1; i <= 5; i++)                                          {                                              Console.WriteLine($"random {i}...");                                              massiveObj.PerformBulkInsert("random"' i * k * k' null);                                          }                                                                Console.WriteLine("Ending tests...");                  }
Magic Number,BulkInsert.Benchmark,Program,C:\repos\ravendb_ravendb\bench\BulkInsert.Benchmark\Program.cs,Main,The following statement contains a magic number: using (var massiveObj = new BulkInsertBench("http://localhost:8080"' 1805861237))                  {                      massiveObj.CreateDb();  //                    var sp = Stopwatch.StartNew();  //                    massiveObj.Write(64 * 1024' 1024);  //                    Console.WriteLine(sp.Elapsed);                        var k = 1000;                      var kb = 1024;                        if (args.Length == 1)                          k = Convert.ToInt32(args[0]);                        //Console.WriteLine("metoraf...");                      //massiveObj.PerformBulkInsert("warmup"' 1000 * k' 30 * kb * kb);    //                    Console.WriteLine("bigSize...");  //                    massiveObj.PerformBulkInsert("bigSize"' 1 * k' 30 * kb * kb);                                                                                  Console.WriteLine("warmup...");                                          massiveObj.PerformBulkInsert("warmup"' 10 * k' 2 * kb);                                          Console.WriteLine("smallSize...");                                          massiveObj.PerformBulkInsert("smallSize"' 2 * k * k' 2 * kb);                                          Console.WriteLine("bigSize...");                                          massiveObj.PerformBulkInsert("bigSize"' 1 * k' 30 * kb * kb);                                          Console.WriteLine("forOverrite...");                                          massiveObj.PerformBulkInsert("forOverrite"' 500 * k' 5 * kb' false);                                          Console.WriteLine("forOverrite2...");                                          massiveObj.PerformBulkInsert("forOverrite"' 1000 * k' 5 * kb' false);                                          for (int i = 1; i <= 5; i++)                                          {                                              Console.WriteLine($"random {i}...");                                              massiveObj.PerformBulkInsert("random"' i * k * k' null);                                          }                                                                Console.WriteLine("Ending tests...");                  }
Magic Number,BulkInsert.Benchmark,Program,C:\repos\ravendb_ravendb\bench\BulkInsert.Benchmark\Program.cs,Main,The following statement contains a magic number: using (var massiveObj = new BulkInsertBench("http://localhost:8080"' 1805861237))                  {                      massiveObj.CreateDb();  //                    var sp = Stopwatch.StartNew();  //                    massiveObj.Write(64 * 1024' 1024);  //                    Console.WriteLine(sp.Elapsed);                        var k = 1000;                      var kb = 1024;                        if (args.Length == 1)                          k = Convert.ToInt32(args[0]);                        //Console.WriteLine("metoraf...");                      //massiveObj.PerformBulkInsert("warmup"' 1000 * k' 30 * kb * kb);    //                    Console.WriteLine("bigSize...");  //                    massiveObj.PerformBulkInsert("bigSize"' 1 * k' 30 * kb * kb);                                                                                  Console.WriteLine("warmup...");                                          massiveObj.PerformBulkInsert("warmup"' 10 * k' 2 * kb);                                          Console.WriteLine("smallSize...");                                          massiveObj.PerformBulkInsert("smallSize"' 2 * k * k' 2 * kb);                                          Console.WriteLine("bigSize...");                                          massiveObj.PerformBulkInsert("bigSize"' 1 * k' 30 * kb * kb);                                          Console.WriteLine("forOverrite...");                                          massiveObj.PerformBulkInsert("forOverrite"' 500 * k' 5 * kb' false);                                          Console.WriteLine("forOverrite2...");                                          massiveObj.PerformBulkInsert("forOverrite"' 1000 * k' 5 * kb' false);                                          for (int i = 1; i <= 5; i++)                                          {                                              Console.WriteLine($"random {i}...");                                              massiveObj.PerformBulkInsert("random"' i * k * k' null);                                          }                                                                Console.WriteLine("Ending tests...");                  }
Magic Number,BulkInsert.Benchmark,Program,C:\repos\ravendb_ravendb\bench\BulkInsert.Benchmark\Program.cs,Main,The following statement contains a magic number: using (var massiveObj = new BulkInsertBench("http://localhost:8080"' 1805861237))                  {                      massiveObj.CreateDb();  //                    var sp = Stopwatch.StartNew();  //                    massiveObj.Write(64 * 1024' 1024);  //                    Console.WriteLine(sp.Elapsed);                        var k = 1000;                      var kb = 1024;                        if (args.Length == 1)                          k = Convert.ToInt32(args[0]);                        //Console.WriteLine("metoraf...");                      //massiveObj.PerformBulkInsert("warmup"' 1000 * k' 30 * kb * kb);    //                    Console.WriteLine("bigSize...");  //                    massiveObj.PerformBulkInsert("bigSize"' 1 * k' 30 * kb * kb);                                                                                  Console.WriteLine("warmup...");                                          massiveObj.PerformBulkInsert("warmup"' 10 * k' 2 * kb);                                          Console.WriteLine("smallSize...");                                          massiveObj.PerformBulkInsert("smallSize"' 2 * k * k' 2 * kb);                                          Console.WriteLine("bigSize...");                                          massiveObj.PerformBulkInsert("bigSize"' 1 * k' 30 * kb * kb);                                          Console.WriteLine("forOverrite...");                                          massiveObj.PerformBulkInsert("forOverrite"' 500 * k' 5 * kb' false);                                          Console.WriteLine("forOverrite2...");                                          massiveObj.PerformBulkInsert("forOverrite"' 1000 * k' 5 * kb' false);                                          for (int i = 1; i <= 5; i++)                                          {                                              Console.WriteLine($"random {i}...");                                              massiveObj.PerformBulkInsert("random"' i * k * k' null);                                          }                                                                Console.WriteLine("Ending tests...");                  }
