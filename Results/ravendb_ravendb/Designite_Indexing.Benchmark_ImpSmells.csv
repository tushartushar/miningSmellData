Implementation smell,Namespace,Class,File,Method,Description
Long Identifier,Indexing.Benchmark,Program,C:\repos\ravendb_ravendb\bench\Indexing.Benchmark\Program.cs,Execute,The length of the parameter numberOfAdditionalMapReduceIndexes is 34.
Long Statement,Indexing.Benchmark,IndexingBenchmark,C:\repos\ravendb_ravendb\bench\Indexing.Benchmark\IndexingBenchmark.cs,Execute,The length of the statement  "                Console.WriteLine($"It took {sw.Elapsed} to return a non stale result. {test.NumberOfRelevantDocs / sw.Elapsed.TotalSeconds:#'#} docs / sec indexed"); " is 150.
Long Statement,Indexing.Benchmark,Orders_Totals,C:\repos\ravendb_ravendb\bench\Indexing.Benchmark\MapIndexesBench.cs,CreateIndexDefinition,The length of the statement  "                    //select new { order.Employee'  order.Company' Total = order.Lines.Sum(l=>(l.Quantity * l.PricePerUnit) *  ( 1 - l.Discount)) }" }' " is 131.
Long Statement,Indexing.Benchmark,Program,C:\repos\ravendb_ravendb\bench\Indexing.Benchmark\Program.cs,Execute,The length of the statement  "            Console.WriteLine($"Indexing stopped. Number of indexes in the database: {_store.Maintenance.Send(new GetStatisticsOperation()).Indexes.Length}"); " is 146.
Long Statement,Indexing.Benchmark,Program,C:\repos\ravendb_ravendb\bench\Indexing.Benchmark\Program.cs,Execute,The length of the statement  "            Console.WriteLine($"Indexing stopped. Number of indexes in the database: {_store.Maintenance.Send(new GetStatisticsOperation()).Indexes.Length}"); " is 146.
Long Statement,Indexing.Benchmark,Program,C:\repos\ravendb_ravendb\bench\Indexing.Benchmark\Program.cs,Execute,The length of the statement  "            Console.WriteLine($"Putting additional indexes: {numberOfAdditionaMapIndexes} map and {numberOfAdditionalMapReduceIndexes} map-reduce"); " is 136.
Long Statement,Indexing.Benchmark,Program,C:\repos\ravendb_ravendb\bench\Indexing.Benchmark\Program.cs,Execute,The length of the statement  "            Console.WriteLine($"Indexing is working again. Number of indexes in the database: {_store.Maintenance.Send(new GetStatisticsOperation()).Indexes.Length}. Waiting for non stale results"); " is 186.
Magic Number,Indexing.Benchmark,IndexingBenchmark,C:\repos\ravendb_ravendb\bench\Indexing.Benchmark\IndexingBenchmark.cs,Execute,The following statement contains a magic number: foreach (var test in IndexTestRuns)              {                  test.Index.Execute(_store);                    Console.WriteLine($"{Environment.NewLine}{test.Index.IndexName} index created. Waiting for non-stale results ...");                    var sw = Stopwatch.StartNew();                    var stalenessTimeout = TimeSpan.FromMinutes(15);                  QueryResult result;    #if !v35                  //Task.Factory.StartNew(() =>                  //{                  //    do                  //    {                  //        var stats = _store.DatabaseCommands.GetIndexStatistics(test.Index.IndexName);                    //        Console.WriteLine($"{nameof(stats.MapAttempts)}: {stats.MapAttempts}");                  //        Console.WriteLine($"{nameof(stats.ReduceAttempts)}: {stats.ReduceAttempts}");                    //        Thread.Sleep(500);                  //    } while ((result != null && result.IsStale == false) || sw.Elapsed > stalenessTimeout);                  //}' TaskCreationOptions.LongRunning);                    var requestExecuter = _store.GetRequestExecutor();                  JsonOperationContext context;                  using (requestExecuter.ContextPool.AllocateOperationContext(out context))                  {                      do                      {                          var queryCommand = new QueryCommand(_store.Conventions' new IndexQuery                          {                              Query = $"FROM INDEX '{test.Index.IndexName}'"'                              PageSize = 0'                              Start = 0                          });                            requestExecuter.Execute(queryCommand' context);                            result = queryCommand.Result;                            Thread.Sleep(100);                      } while (result.IsStale || sw.Elapsed > stalenessTimeout);                  }  #else                  do                  {                      result = _store.DatabaseCommands.Query(test.Index.IndexName' new IndexQuery()                      {                          PageSize = 0'                          Start = 0                      });                        Thread.Sleep(100);                  } while (result.IsStale || sw.Elapsed > stalenessTimeout);  #endif                    if (result.IsStale)                  {                      throw new InvalidOperationException($"Index is stale after {stalenessTimeout}");                  }                    sw.Stop();                    Console.WriteLine($"It took {sw.Elapsed} to return a non stale result. {test.NumberOfRelevantDocs / sw.Elapsed.TotalSeconds:#'#} docs / sec indexed");              }
Magic Number,Indexing.Benchmark,IndexingBenchmark,C:\repos\ravendb_ravendb\bench\Indexing.Benchmark\IndexingBenchmark.cs,Execute,The following statement contains a magic number: foreach (var test in IndexTestRuns)              {                  test.Index.Execute(_store);                    Console.WriteLine($"{Environment.NewLine}{test.Index.IndexName} index created. Waiting for non-stale results ...");                    var sw = Stopwatch.StartNew();                    var stalenessTimeout = TimeSpan.FromMinutes(15);                  QueryResult result;    #if !v35                  //Task.Factory.StartNew(() =>                  //{                  //    do                  //    {                  //        var stats = _store.DatabaseCommands.GetIndexStatistics(test.Index.IndexName);                    //        Console.WriteLine($"{nameof(stats.MapAttempts)}: {stats.MapAttempts}");                  //        Console.WriteLine($"{nameof(stats.ReduceAttempts)}: {stats.ReduceAttempts}");                    //        Thread.Sleep(500);                  //    } while ((result != null && result.IsStale == false) || sw.Elapsed > stalenessTimeout);                  //}' TaskCreationOptions.LongRunning);                    var requestExecuter = _store.GetRequestExecutor();                  JsonOperationContext context;                  using (requestExecuter.ContextPool.AllocateOperationContext(out context))                  {                      do                      {                          var queryCommand = new QueryCommand(_store.Conventions' new IndexQuery                          {                              Query = $"FROM INDEX '{test.Index.IndexName}'"'                              PageSize = 0'                              Start = 0                          });                            requestExecuter.Execute(queryCommand' context);                            result = queryCommand.Result;                            Thread.Sleep(100);                      } while (result.IsStale || sw.Elapsed > stalenessTimeout);                  }  #else                  do                  {                      result = _store.DatabaseCommands.Query(test.Index.IndexName' new IndexQuery()                      {                          PageSize = 0'                          Start = 0                      });                        Thread.Sleep(100);                  } while (result.IsStale || sw.Elapsed > stalenessTimeout);  #endif                    if (result.IsStale)                  {                      throw new InvalidOperationException($"Index is stale after {stalenessTimeout}");                  }                    sw.Stop();                    Console.WriteLine($"It took {sw.Elapsed} to return a non stale result. {test.NumberOfRelevantDocs / sw.Elapsed.TotalSeconds:#'#} docs / sec indexed");              }
Magic Number,Indexing.Benchmark,Program,C:\repos\ravendb_ravendb\bench\Indexing.Benchmark\Program.cs,Program,The following statement contains a magic number: if (_store.Maintenance.Server.Send(new GetDatabaseNamesOperation(0' 100)).Contains(DbName))              {                  _store.Maintenance.Send(new GetStatisticsOperation()); // give some time for database to load                  _store.Maintenance.Server.Send(new DeleteDatabasesOperation(DbName' hardDelete: true));              }
Magic Number,Indexing.Benchmark,Program,C:\repos\ravendb_ravendb\bench\Indexing.Benchmark\Program.cs,Execute,The following statement contains a magic number: foreach (var indexName in _store.Maintenance.Send(new GetIndexNamesOperation(0' 1024)))              {                  _store.Maintenance.Send(new ResetIndexOperation(indexName));                  staleIndexes.Add(indexName);              }
Magic Number,Indexing.Benchmark,Program,C:\repos\ravendb_ravendb\bench\Indexing.Benchmark\Program.cs,Execute,The following statement contains a magic number: foreach (var indexName in _store.Maintenance.Send(new GetIndexNamesOperation(0' 1024)))              {                  _store.Maintenance.Send(new ResetIndexOperation(indexName));                  staleIndexes.Add(indexName);              }
Magic Number,Indexing.Benchmark,Program,C:\repos\ravendb_ravendb\bench\Indexing.Benchmark\Program.cs,Execute,The following statement contains a magic number: var numberOfAdditionaMapIndexes = 10;
Magic Number,Indexing.Benchmark,Program,C:\repos\ravendb_ravendb\bench\Indexing.Benchmark\Program.cs,Execute,The following statement contains a magic number: var numberOfAdditionalMapReduceIndexes = 5;
Magic Number,Indexing.Benchmark,Program,C:\repos\ravendb_ravendb\bench\Indexing.Benchmark\Program.cs,Execute,The following statement contains a magic number: for (int i = 0; i < numberOfAdditionaMapIndexes / 2; i++)              {                  var employeesByNameAndAddress = new MapIndexesBench.Employees_ByNameAndAddress(i);                  employeesByNameAndAddress.Execute(_store);                    staleIndexes.Add(employeesByNameAndAddress.IndexName);                    var companiesByNameAndEmail = new MapIndexesBench.Companies_ByNameAndEmail(i);                  companiesByNameAndEmail.Execute(_store);                    staleIndexes.Add(companiesByNameAndEmail.IndexName);              }
Magic Number,Indexing.Benchmark,Program,C:\repos\ravendb_ravendb\bench\Indexing.Benchmark\Program.cs,WaitForNonStaleIndexes,The following statement contains a magic number: do              {                  var stats = _store.Maintenance.Send(new GetStatisticsOperation());                    if (stats.StaleIndexes.Length != staleIndexes.Count)                  {                      var newNonStaleIndexes = staleIndexes.Except(stats.StaleIndexes).ToList();                        foreach (var name in newNonStaleIndexes)                      {                          Console.WriteLine($"Index {name} became non stale after {sw.Elapsed}");                            staleIndexes.Remove(name);                      }                  }                    Thread.Sleep(100);              } while (staleIndexes.Count > 0);
Magic Number,Indexing.Benchmark,Program,C:\repos\ravendb_ravendb\bench\Indexing.Benchmark\Program.cs,InsertDocs,The following statement contains a magic number: using (var bulk = _store.BulkInsert())              using (var progress = new ProgressBar())              {                  for (int i = 0; i < numberOfIterations; i++)                  {                      if (i < NumberOfOrderDocuments)                      {                          var order = new Order                          {                              Company = $"companies/{_random.Next(1' NumberOfCompanyDocuments)}"'                              Employee = $"employees/{_random.Next(1' NumberOfEmployeeDocuments)}"'                              Lines = CreateOrderLines(_random.Next(0' 15))'                              Freight = _random.Next()'                              OrderedAt = DateTime.Now'                              RequireAt = DateTime.Now.AddDays(_random.Next(1' 30))'                              ShippedAt = DateTime.Now'                              ShipTo = new Address                              {                                  Country = $"Country{_random.Next(0' 10)}"'                                  City = $"City{_random.Next(0' 100)}"'                                  Street = $"Street{_random.Next(0' 1000)}"'                                  ZipCode = _random.Next(0' 9999)                              }'                              ShipVia = $"shippers/{_random.Next(0' 10)}"                          };    #if v35                      bulk.Store(order);  #else                          bulk.StoreAsync(order).Wait();  #endif                      }                        if (i < NumberOfCompanyDocuments)                      {                          var company = new Company()                          {                              Name = $"Company-{i}"'                              Desc = "Lorem ipsum ble ble ble"'                              Contacts = new List<Contact>()                              {                                  new Contact()'                                  new Contact()'                                  new Contact()                              }'                              Address1 = "Address1"'                              Address2 = "Address2"'                              Address3 = "Address3"'                              Email = $"company-{i}@gmail.com"'                          };    #if v35                          bulk.Store(company);  #else                          bulk.StoreAsync(company).Wait();  #endif                      }                        if (i < NumberOfEmployeeDocuments)                      {                          var employee = new Employee()                          {                              FirstName = $"FirstName-{i % 123}"'                              LastName = $"LastName-{i % 456}"'                              Address = new Address()                              {                                  Country = i % 2 == 0 ? "PL" : "IL"'                                  City = $"City-{i % 77}"'                                  Street = $"Street-{i % 199}"'                                  ZipCode = i % 999                              }                          };    #if v35                      bulk.Store(employee);  #else                          bulk.StoreAsync(employee).Wait();  #endif                      }                        progress.Report((double)i / numberOfIterations);                  }                    progress.Report(100);              }
Magic Number,Indexing.Benchmark,Program,C:\repos\ravendb_ravendb\bench\Indexing.Benchmark\Program.cs,InsertDocs,The following statement contains a magic number: using (var bulk = _store.BulkInsert())              using (var progress = new ProgressBar())              {                  for (int i = 0; i < numberOfIterations; i++)                  {                      if (i < NumberOfOrderDocuments)                      {                          var order = new Order                          {                              Company = $"companies/{_random.Next(1' NumberOfCompanyDocuments)}"'                              Employee = $"employees/{_random.Next(1' NumberOfEmployeeDocuments)}"'                              Lines = CreateOrderLines(_random.Next(0' 15))'                              Freight = _random.Next()'                              OrderedAt = DateTime.Now'                              RequireAt = DateTime.Now.AddDays(_random.Next(1' 30))'                              ShippedAt = DateTime.Now'                              ShipTo = new Address                              {                                  Country = $"Country{_random.Next(0' 10)}"'                                  City = $"City{_random.Next(0' 100)}"'                                  Street = $"Street{_random.Next(0' 1000)}"'                                  ZipCode = _random.Next(0' 9999)                              }'                              ShipVia = $"shippers/{_random.Next(0' 10)}"                          };    #if v35                      bulk.Store(order);  #else                          bulk.StoreAsync(order).Wait();  #endif                      }                        if (i < NumberOfCompanyDocuments)                      {                          var company = new Company()                          {                              Name = $"Company-{i}"'                              Desc = "Lorem ipsum ble ble ble"'                              Contacts = new List<Contact>()                              {                                  new Contact()'                                  new Contact()'                                  new Contact()                              }'                              Address1 = "Address1"'                              Address2 = "Address2"'                              Address3 = "Address3"'                              Email = $"company-{i}@gmail.com"'                          };    #if v35                          bulk.Store(company);  #else                          bulk.StoreAsync(company).Wait();  #endif                      }                        if (i < NumberOfEmployeeDocuments)                      {                          var employee = new Employee()                          {                              FirstName = $"FirstName-{i % 123}"'                              LastName = $"LastName-{i % 456}"'                              Address = new Address()                              {                                  Country = i % 2 == 0 ? "PL" : "IL"'                                  City = $"City-{i % 77}"'                                  Street = $"Street-{i % 199}"'                                  ZipCode = i % 999                              }                          };    #if v35                      bulk.Store(employee);  #else                          bulk.StoreAsync(employee).Wait();  #endif                      }                        progress.Report((double)i / numberOfIterations);                  }                    progress.Report(100);              }
Magic Number,Indexing.Benchmark,Program,C:\repos\ravendb_ravendb\bench\Indexing.Benchmark\Program.cs,InsertDocs,The following statement contains a magic number: using (var bulk = _store.BulkInsert())              using (var progress = new ProgressBar())              {                  for (int i = 0; i < numberOfIterations; i++)                  {                      if (i < NumberOfOrderDocuments)                      {                          var order = new Order                          {                              Company = $"companies/{_random.Next(1' NumberOfCompanyDocuments)}"'                              Employee = $"employees/{_random.Next(1' NumberOfEmployeeDocuments)}"'                              Lines = CreateOrderLines(_random.Next(0' 15))'                              Freight = _random.Next()'                              OrderedAt = DateTime.Now'                              RequireAt = DateTime.Now.AddDays(_random.Next(1' 30))'                              ShippedAt = DateTime.Now'                              ShipTo = new Address                              {                                  Country = $"Country{_random.Next(0' 10)}"'                                  City = $"City{_random.Next(0' 100)}"'                                  Street = $"Street{_random.Next(0' 1000)}"'                                  ZipCode = _random.Next(0' 9999)                              }'                              ShipVia = $"shippers/{_random.Next(0' 10)}"                          };    #if v35                      bulk.Store(order);  #else                          bulk.StoreAsync(order).Wait();  #endif                      }                        if (i < NumberOfCompanyDocuments)                      {                          var company = new Company()                          {                              Name = $"Company-{i}"'                              Desc = "Lorem ipsum ble ble ble"'                              Contacts = new List<Contact>()                              {                                  new Contact()'                                  new Contact()'                                  new Contact()                              }'                              Address1 = "Address1"'                              Address2 = "Address2"'                              Address3 = "Address3"'                              Email = $"company-{i}@gmail.com"'                          };    #if v35                          bulk.Store(company);  #else                          bulk.StoreAsync(company).Wait();  #endif                      }                        if (i < NumberOfEmployeeDocuments)                      {                          var employee = new Employee()                          {                              FirstName = $"FirstName-{i % 123}"'                              LastName = $"LastName-{i % 456}"'                              Address = new Address()                              {                                  Country = i % 2 == 0 ? "PL" : "IL"'                                  City = $"City-{i % 77}"'                                  Street = $"Street-{i % 199}"'                                  ZipCode = i % 999                              }                          };    #if v35                      bulk.Store(employee);  #else                          bulk.StoreAsync(employee).Wait();  #endif                      }                        progress.Report((double)i / numberOfIterations);                  }                    progress.Report(100);              }
Magic Number,Indexing.Benchmark,Program,C:\repos\ravendb_ravendb\bench\Indexing.Benchmark\Program.cs,InsertDocs,The following statement contains a magic number: using (var bulk = _store.BulkInsert())              using (var progress = new ProgressBar())              {                  for (int i = 0; i < numberOfIterations; i++)                  {                      if (i < NumberOfOrderDocuments)                      {                          var order = new Order                          {                              Company = $"companies/{_random.Next(1' NumberOfCompanyDocuments)}"'                              Employee = $"employees/{_random.Next(1' NumberOfEmployeeDocuments)}"'                              Lines = CreateOrderLines(_random.Next(0' 15))'                              Freight = _random.Next()'                              OrderedAt = DateTime.Now'                              RequireAt = DateTime.Now.AddDays(_random.Next(1' 30))'                              ShippedAt = DateTime.Now'                              ShipTo = new Address                              {                                  Country = $"Country{_random.Next(0' 10)}"'                                  City = $"City{_random.Next(0' 100)}"'                                  Street = $"Street{_random.Next(0' 1000)}"'                                  ZipCode = _random.Next(0' 9999)                              }'                              ShipVia = $"shippers/{_random.Next(0' 10)}"                          };    #if v35                      bulk.Store(order);  #else                          bulk.StoreAsync(order).Wait();  #endif                      }                        if (i < NumberOfCompanyDocuments)                      {                          var company = new Company()                          {                              Name = $"Company-{i}"'                              Desc = "Lorem ipsum ble ble ble"'                              Contacts = new List<Contact>()                              {                                  new Contact()'                                  new Contact()'                                  new Contact()                              }'                              Address1 = "Address1"'                              Address2 = "Address2"'                              Address3 = "Address3"'                              Email = $"company-{i}@gmail.com"'                          };    #if v35                          bulk.Store(company);  #else                          bulk.StoreAsync(company).Wait();  #endif                      }                        if (i < NumberOfEmployeeDocuments)                      {                          var employee = new Employee()                          {                              FirstName = $"FirstName-{i % 123}"'                              LastName = $"LastName-{i % 456}"'                              Address = new Address()                              {                                  Country = i % 2 == 0 ? "PL" : "IL"'                                  City = $"City-{i % 77}"'                                  Street = $"Street-{i % 199}"'                                  ZipCode = i % 999                              }                          };    #if v35                      bulk.Store(employee);  #else                          bulk.StoreAsync(employee).Wait();  #endif                      }                        progress.Report((double)i / numberOfIterations);                  }                    progress.Report(100);              }
Magic Number,Indexing.Benchmark,Program,C:\repos\ravendb_ravendb\bench\Indexing.Benchmark\Program.cs,InsertDocs,The following statement contains a magic number: using (var bulk = _store.BulkInsert())              using (var progress = new ProgressBar())              {                  for (int i = 0; i < numberOfIterations; i++)                  {                      if (i < NumberOfOrderDocuments)                      {                          var order = new Order                          {                              Company = $"companies/{_random.Next(1' NumberOfCompanyDocuments)}"'                              Employee = $"employees/{_random.Next(1' NumberOfEmployeeDocuments)}"'                              Lines = CreateOrderLines(_random.Next(0' 15))'                              Freight = _random.Next()'                              OrderedAt = DateTime.Now'                              RequireAt = DateTime.Now.AddDays(_random.Next(1' 30))'                              ShippedAt = DateTime.Now'                              ShipTo = new Address                              {                                  Country = $"Country{_random.Next(0' 10)}"'                                  City = $"City{_random.Next(0' 100)}"'                                  Street = $"Street{_random.Next(0' 1000)}"'                                  ZipCode = _random.Next(0' 9999)                              }'                              ShipVia = $"shippers/{_random.Next(0' 10)}"                          };    #if v35                      bulk.Store(order);  #else                          bulk.StoreAsync(order).Wait();  #endif                      }                        if (i < NumberOfCompanyDocuments)                      {                          var company = new Company()                          {                              Name = $"Company-{i}"'                              Desc = "Lorem ipsum ble ble ble"'                              Contacts = new List<Contact>()                              {                                  new Contact()'                                  new Contact()'                                  new Contact()                              }'                              Address1 = "Address1"'                              Address2 = "Address2"'                              Address3 = "Address3"'                              Email = $"company-{i}@gmail.com"'                          };    #if v35                          bulk.Store(company);  #else                          bulk.StoreAsync(company).Wait();  #endif                      }                        if (i < NumberOfEmployeeDocuments)                      {                          var employee = new Employee()                          {                              FirstName = $"FirstName-{i % 123}"'                              LastName = $"LastName-{i % 456}"'                              Address = new Address()                              {                                  Country = i % 2 == 0 ? "PL" : "IL"'                                  City = $"City-{i % 77}"'                                  Street = $"Street-{i % 199}"'                                  ZipCode = i % 999                              }                          };    #if v35                      bulk.Store(employee);  #else                          bulk.StoreAsync(employee).Wait();  #endif                      }                        progress.Report((double)i / numberOfIterations);                  }                    progress.Report(100);              }
Magic Number,Indexing.Benchmark,Program,C:\repos\ravendb_ravendb\bench\Indexing.Benchmark\Program.cs,InsertDocs,The following statement contains a magic number: using (var bulk = _store.BulkInsert())              using (var progress = new ProgressBar())              {                  for (int i = 0; i < numberOfIterations; i++)                  {                      if (i < NumberOfOrderDocuments)                      {                          var order = new Order                          {                              Company = $"companies/{_random.Next(1' NumberOfCompanyDocuments)}"'                              Employee = $"employees/{_random.Next(1' NumberOfEmployeeDocuments)}"'                              Lines = CreateOrderLines(_random.Next(0' 15))'                              Freight = _random.Next()'                              OrderedAt = DateTime.Now'                              RequireAt = DateTime.Now.AddDays(_random.Next(1' 30))'                              ShippedAt = DateTime.Now'                              ShipTo = new Address                              {                                  Country = $"Country{_random.Next(0' 10)}"'                                  City = $"City{_random.Next(0' 100)}"'                                  Street = $"Street{_random.Next(0' 1000)}"'                                  ZipCode = _random.Next(0' 9999)                              }'                              ShipVia = $"shippers/{_random.Next(0' 10)}"                          };    #if v35                      bulk.Store(order);  #else                          bulk.StoreAsync(order).Wait();  #endif                      }                        if (i < NumberOfCompanyDocuments)                      {                          var company = new Company()                          {                              Name = $"Company-{i}"'                              Desc = "Lorem ipsum ble ble ble"'                              Contacts = new List<Contact>()                              {                                  new Contact()'                                  new Contact()'                                  new Contact()                              }'                              Address1 = "Address1"'                              Address2 = "Address2"'                              Address3 = "Address3"'                              Email = $"company-{i}@gmail.com"'                          };    #if v35                          bulk.Store(company);  #else                          bulk.StoreAsync(company).Wait();  #endif                      }                        if (i < NumberOfEmployeeDocuments)                      {                          var employee = new Employee()                          {                              FirstName = $"FirstName-{i % 123}"'                              LastName = $"LastName-{i % 456}"'                              Address = new Address()                              {                                  Country = i % 2 == 0 ? "PL" : "IL"'                                  City = $"City-{i % 77}"'                                  Street = $"Street-{i % 199}"'                                  ZipCode = i % 999                              }                          };    #if v35                      bulk.Store(employee);  #else                          bulk.StoreAsync(employee).Wait();  #endif                      }                        progress.Report((double)i / numberOfIterations);                  }                    progress.Report(100);              }
Magic Number,Indexing.Benchmark,Program,C:\repos\ravendb_ravendb\bench\Indexing.Benchmark\Program.cs,InsertDocs,The following statement contains a magic number: using (var bulk = _store.BulkInsert())              using (var progress = new ProgressBar())              {                  for (int i = 0; i < numberOfIterations; i++)                  {                      if (i < NumberOfOrderDocuments)                      {                          var order = new Order                          {                              Company = $"companies/{_random.Next(1' NumberOfCompanyDocuments)}"'                              Employee = $"employees/{_random.Next(1' NumberOfEmployeeDocuments)}"'                              Lines = CreateOrderLines(_random.Next(0' 15))'                              Freight = _random.Next()'                              OrderedAt = DateTime.Now'                              RequireAt = DateTime.Now.AddDays(_random.Next(1' 30))'                              ShippedAt = DateTime.Now'                              ShipTo = new Address                              {                                  Country = $"Country{_random.Next(0' 10)}"'                                  City = $"City{_random.Next(0' 100)}"'                                  Street = $"Street{_random.Next(0' 1000)}"'                                  ZipCode = _random.Next(0' 9999)                              }'                              ShipVia = $"shippers/{_random.Next(0' 10)}"                          };    #if v35                      bulk.Store(order);  #else                          bulk.StoreAsync(order).Wait();  #endif                      }                        if (i < NumberOfCompanyDocuments)                      {                          var company = new Company()                          {                              Name = $"Company-{i}"'                              Desc = "Lorem ipsum ble ble ble"'                              Contacts = new List<Contact>()                              {                                  new Contact()'                                  new Contact()'                                  new Contact()                              }'                              Address1 = "Address1"'                              Address2 = "Address2"'                              Address3 = "Address3"'                              Email = $"company-{i}@gmail.com"'                          };    #if v35                          bulk.Store(company);  #else                          bulk.StoreAsync(company).Wait();  #endif                      }                        if (i < NumberOfEmployeeDocuments)                      {                          var employee = new Employee()                          {                              FirstName = $"FirstName-{i % 123}"'                              LastName = $"LastName-{i % 456}"'                              Address = new Address()                              {                                  Country = i % 2 == 0 ? "PL" : "IL"'                                  City = $"City-{i % 77}"'                                  Street = $"Street-{i % 199}"'                                  ZipCode = i % 999                              }                          };    #if v35                      bulk.Store(employee);  #else                          bulk.StoreAsync(employee).Wait();  #endif                      }                        progress.Report((double)i / numberOfIterations);                  }                    progress.Report(100);              }
Magic Number,Indexing.Benchmark,Program,C:\repos\ravendb_ravendb\bench\Indexing.Benchmark\Program.cs,InsertDocs,The following statement contains a magic number: using (var bulk = _store.BulkInsert())              using (var progress = new ProgressBar())              {                  for (int i = 0; i < numberOfIterations; i++)                  {                      if (i < NumberOfOrderDocuments)                      {                          var order = new Order                          {                              Company = $"companies/{_random.Next(1' NumberOfCompanyDocuments)}"'                              Employee = $"employees/{_random.Next(1' NumberOfEmployeeDocuments)}"'                              Lines = CreateOrderLines(_random.Next(0' 15))'                              Freight = _random.Next()'                              OrderedAt = DateTime.Now'                              RequireAt = DateTime.Now.AddDays(_random.Next(1' 30))'                              ShippedAt = DateTime.Now'                              ShipTo = new Address                              {                                  Country = $"Country{_random.Next(0' 10)}"'                                  City = $"City{_random.Next(0' 100)}"'                                  Street = $"Street{_random.Next(0' 1000)}"'                                  ZipCode = _random.Next(0' 9999)                              }'                              ShipVia = $"shippers/{_random.Next(0' 10)}"                          };    #if v35                      bulk.Store(order);  #else                          bulk.StoreAsync(order).Wait();  #endif                      }                        if (i < NumberOfCompanyDocuments)                      {                          var company = new Company()                          {                              Name = $"Company-{i}"'                              Desc = "Lorem ipsum ble ble ble"'                              Contacts = new List<Contact>()                              {                                  new Contact()'                                  new Contact()'                                  new Contact()                              }'                              Address1 = "Address1"'                              Address2 = "Address2"'                              Address3 = "Address3"'                              Email = $"company-{i}@gmail.com"'                          };    #if v35                          bulk.Store(company);  #else                          bulk.StoreAsync(company).Wait();  #endif                      }                        if (i < NumberOfEmployeeDocuments)                      {                          var employee = new Employee()                          {                              FirstName = $"FirstName-{i % 123}"'                              LastName = $"LastName-{i % 456}"'                              Address = new Address()                              {                                  Country = i % 2 == 0 ? "PL" : "IL"'                                  City = $"City-{i % 77}"'                                  Street = $"Street-{i % 199}"'                                  ZipCode = i % 999                              }                          };    #if v35                      bulk.Store(employee);  #else                          bulk.StoreAsync(employee).Wait();  #endif                      }                        progress.Report((double)i / numberOfIterations);                  }                    progress.Report(100);              }
Magic Number,Indexing.Benchmark,Program,C:\repos\ravendb_ravendb\bench\Indexing.Benchmark\Program.cs,InsertDocs,The following statement contains a magic number: using (var bulk = _store.BulkInsert())              using (var progress = new ProgressBar())              {                  for (int i = 0; i < numberOfIterations; i++)                  {                      if (i < NumberOfOrderDocuments)                      {                          var order = new Order                          {                              Company = $"companies/{_random.Next(1' NumberOfCompanyDocuments)}"'                              Employee = $"employees/{_random.Next(1' NumberOfEmployeeDocuments)}"'                              Lines = CreateOrderLines(_random.Next(0' 15))'                              Freight = _random.Next()'                              OrderedAt = DateTime.Now'                              RequireAt = DateTime.Now.AddDays(_random.Next(1' 30))'                              ShippedAt = DateTime.Now'                              ShipTo = new Address                              {                                  Country = $"Country{_random.Next(0' 10)}"'                                  City = $"City{_random.Next(0' 100)}"'                                  Street = $"Street{_random.Next(0' 1000)}"'                                  ZipCode = _random.Next(0' 9999)                              }'                              ShipVia = $"shippers/{_random.Next(0' 10)}"                          };    #if v35                      bulk.Store(order);  #else                          bulk.StoreAsync(order).Wait();  #endif                      }                        if (i < NumberOfCompanyDocuments)                      {                          var company = new Company()                          {                              Name = $"Company-{i}"'                              Desc = "Lorem ipsum ble ble ble"'                              Contacts = new List<Contact>()                              {                                  new Contact()'                                  new Contact()'                                  new Contact()                              }'                              Address1 = "Address1"'                              Address2 = "Address2"'                              Address3 = "Address3"'                              Email = $"company-{i}@gmail.com"'                          };    #if v35                          bulk.Store(company);  #else                          bulk.StoreAsync(company).Wait();  #endif                      }                        if (i < NumberOfEmployeeDocuments)                      {                          var employee = new Employee()                          {                              FirstName = $"FirstName-{i % 123}"'                              LastName = $"LastName-{i % 456}"'                              Address = new Address()                              {                                  Country = i % 2 == 0 ? "PL" : "IL"'                                  City = $"City-{i % 77}"'                                  Street = $"Street-{i % 199}"'                                  ZipCode = i % 999                              }                          };    #if v35                      bulk.Store(employee);  #else                          bulk.StoreAsync(employee).Wait();  #endif                      }                        progress.Report((double)i / numberOfIterations);                  }                    progress.Report(100);              }
Magic Number,Indexing.Benchmark,Program,C:\repos\ravendb_ravendb\bench\Indexing.Benchmark\Program.cs,InsertDocs,The following statement contains a magic number: using (var bulk = _store.BulkInsert())              using (var progress = new ProgressBar())              {                  for (int i = 0; i < numberOfIterations; i++)                  {                      if (i < NumberOfOrderDocuments)                      {                          var order = new Order                          {                              Company = $"companies/{_random.Next(1' NumberOfCompanyDocuments)}"'                              Employee = $"employees/{_random.Next(1' NumberOfEmployeeDocuments)}"'                              Lines = CreateOrderLines(_random.Next(0' 15))'                              Freight = _random.Next()'                              OrderedAt = DateTime.Now'                              RequireAt = DateTime.Now.AddDays(_random.Next(1' 30))'                              ShippedAt = DateTime.Now'                              ShipTo = new Address                              {                                  Country = $"Country{_random.Next(0' 10)}"'                                  City = $"City{_random.Next(0' 100)}"'                                  Street = $"Street{_random.Next(0' 1000)}"'                                  ZipCode = _random.Next(0' 9999)                              }'                              ShipVia = $"shippers/{_random.Next(0' 10)}"                          };    #if v35                      bulk.Store(order);  #else                          bulk.StoreAsync(order).Wait();  #endif                      }                        if (i < NumberOfCompanyDocuments)                      {                          var company = new Company()                          {                              Name = $"Company-{i}"'                              Desc = "Lorem ipsum ble ble ble"'                              Contacts = new List<Contact>()                              {                                  new Contact()'                                  new Contact()'                                  new Contact()                              }'                              Address1 = "Address1"'                              Address2 = "Address2"'                              Address3 = "Address3"'                              Email = $"company-{i}@gmail.com"'                          };    #if v35                          bulk.Store(company);  #else                          bulk.StoreAsync(company).Wait();  #endif                      }                        if (i < NumberOfEmployeeDocuments)                      {                          var employee = new Employee()                          {                              FirstName = $"FirstName-{i % 123}"'                              LastName = $"LastName-{i % 456}"'                              Address = new Address()                              {                                  Country = i % 2 == 0 ? "PL" : "IL"'                                  City = $"City-{i % 77}"'                                  Street = $"Street-{i % 199}"'                                  ZipCode = i % 999                              }                          };    #if v35                      bulk.Store(employee);  #else                          bulk.StoreAsync(employee).Wait();  #endif                      }                        progress.Report((double)i / numberOfIterations);                  }                    progress.Report(100);              }
Magic Number,Indexing.Benchmark,Program,C:\repos\ravendb_ravendb\bench\Indexing.Benchmark\Program.cs,InsertDocs,The following statement contains a magic number: using (var bulk = _store.BulkInsert())              using (var progress = new ProgressBar())              {                  for (int i = 0; i < numberOfIterations; i++)                  {                      if (i < NumberOfOrderDocuments)                      {                          var order = new Order                          {                              Company = $"companies/{_random.Next(1' NumberOfCompanyDocuments)}"'                              Employee = $"employees/{_random.Next(1' NumberOfEmployeeDocuments)}"'                              Lines = CreateOrderLines(_random.Next(0' 15))'                              Freight = _random.Next()'                              OrderedAt = DateTime.Now'                              RequireAt = DateTime.Now.AddDays(_random.Next(1' 30))'                              ShippedAt = DateTime.Now'                              ShipTo = new Address                              {                                  Country = $"Country{_random.Next(0' 10)}"'                                  City = $"City{_random.Next(0' 100)}"'                                  Street = $"Street{_random.Next(0' 1000)}"'                                  ZipCode = _random.Next(0' 9999)                              }'                              ShipVia = $"shippers/{_random.Next(0' 10)}"                          };    #if v35                      bulk.Store(order);  #else                          bulk.StoreAsync(order).Wait();  #endif                      }                        if (i < NumberOfCompanyDocuments)                      {                          var company = new Company()                          {                              Name = $"Company-{i}"'                              Desc = "Lorem ipsum ble ble ble"'                              Contacts = new List<Contact>()                              {                                  new Contact()'                                  new Contact()'                                  new Contact()                              }'                              Address1 = "Address1"'                              Address2 = "Address2"'                              Address3 = "Address3"'                              Email = $"company-{i}@gmail.com"'                          };    #if v35                          bulk.Store(company);  #else                          bulk.StoreAsync(company).Wait();  #endif                      }                        if (i < NumberOfEmployeeDocuments)                      {                          var employee = new Employee()                          {                              FirstName = $"FirstName-{i % 123}"'                              LastName = $"LastName-{i % 456}"'                              Address = new Address()                              {                                  Country = i % 2 == 0 ? "PL" : "IL"'                                  City = $"City-{i % 77}"'                                  Street = $"Street-{i % 199}"'                                  ZipCode = i % 999                              }                          };    #if v35                      bulk.Store(employee);  #else                          bulk.StoreAsync(employee).Wait();  #endif                      }                        progress.Report((double)i / numberOfIterations);                  }                    progress.Report(100);              }
Magic Number,Indexing.Benchmark,Program,C:\repos\ravendb_ravendb\bench\Indexing.Benchmark\Program.cs,InsertDocs,The following statement contains a magic number: using (var bulk = _store.BulkInsert())              using (var progress = new ProgressBar())              {                  for (int i = 0; i < numberOfIterations; i++)                  {                      if (i < NumberOfOrderDocuments)                      {                          var order = new Order                          {                              Company = $"companies/{_random.Next(1' NumberOfCompanyDocuments)}"'                              Employee = $"employees/{_random.Next(1' NumberOfEmployeeDocuments)}"'                              Lines = CreateOrderLines(_random.Next(0' 15))'                              Freight = _random.Next()'                              OrderedAt = DateTime.Now'                              RequireAt = DateTime.Now.AddDays(_random.Next(1' 30))'                              ShippedAt = DateTime.Now'                              ShipTo = new Address                              {                                  Country = $"Country{_random.Next(0' 10)}"'                                  City = $"City{_random.Next(0' 100)}"'                                  Street = $"Street{_random.Next(0' 1000)}"'                                  ZipCode = _random.Next(0' 9999)                              }'                              ShipVia = $"shippers/{_random.Next(0' 10)}"                          };    #if v35                      bulk.Store(order);  #else                          bulk.StoreAsync(order).Wait();  #endif                      }                        if (i < NumberOfCompanyDocuments)                      {                          var company = new Company()                          {                              Name = $"Company-{i}"'                              Desc = "Lorem ipsum ble ble ble"'                              Contacts = new List<Contact>()                              {                                  new Contact()'                                  new Contact()'                                  new Contact()                              }'                              Address1 = "Address1"'                              Address2 = "Address2"'                              Address3 = "Address3"'                              Email = $"company-{i}@gmail.com"'                          };    #if v35                          bulk.Store(company);  #else                          bulk.StoreAsync(company).Wait();  #endif                      }                        if (i < NumberOfEmployeeDocuments)                      {                          var employee = new Employee()                          {                              FirstName = $"FirstName-{i % 123}"'                              LastName = $"LastName-{i % 456}"'                              Address = new Address()                              {                                  Country = i % 2 == 0 ? "PL" : "IL"'                                  City = $"City-{i % 77}"'                                  Street = $"Street-{i % 199}"'                                  ZipCode = i % 999                              }                          };    #if v35                      bulk.Store(employee);  #else                          bulk.StoreAsync(employee).Wait();  #endif                      }                        progress.Report((double)i / numberOfIterations);                  }                    progress.Report(100);              }
Magic Number,Indexing.Benchmark,Program,C:\repos\ravendb_ravendb\bench\Indexing.Benchmark\Program.cs,InsertDocs,The following statement contains a magic number: using (var bulk = _store.BulkInsert())              using (var progress = new ProgressBar())              {                  for (int i = 0; i < numberOfIterations; i++)                  {                      if (i < NumberOfOrderDocuments)                      {                          var order = new Order                          {                              Company = $"companies/{_random.Next(1' NumberOfCompanyDocuments)}"'                              Employee = $"employees/{_random.Next(1' NumberOfEmployeeDocuments)}"'                              Lines = CreateOrderLines(_random.Next(0' 15))'                              Freight = _random.Next()'                              OrderedAt = DateTime.Now'                              RequireAt = DateTime.Now.AddDays(_random.Next(1' 30))'                              ShippedAt = DateTime.Now'                              ShipTo = new Address                              {                                  Country = $"Country{_random.Next(0' 10)}"'                                  City = $"City{_random.Next(0' 100)}"'                                  Street = $"Street{_random.Next(0' 1000)}"'                                  ZipCode = _random.Next(0' 9999)                              }'                              ShipVia = $"shippers/{_random.Next(0' 10)}"                          };    #if v35                      bulk.Store(order);  #else                          bulk.StoreAsync(order).Wait();  #endif                      }                        if (i < NumberOfCompanyDocuments)                      {                          var company = new Company()                          {                              Name = $"Company-{i}"'                              Desc = "Lorem ipsum ble ble ble"'                              Contacts = new List<Contact>()                              {                                  new Contact()'                                  new Contact()'                                  new Contact()                              }'                              Address1 = "Address1"'                              Address2 = "Address2"'                              Address3 = "Address3"'                              Email = $"company-{i}@gmail.com"'                          };    #if v35                          bulk.Store(company);  #else                          bulk.StoreAsync(company).Wait();  #endif                      }                        if (i < NumberOfEmployeeDocuments)                      {                          var employee = new Employee()                          {                              FirstName = $"FirstName-{i % 123}"'                              LastName = $"LastName-{i % 456}"'                              Address = new Address()                              {                                  Country = i % 2 == 0 ? "PL" : "IL"'                                  City = $"City-{i % 77}"'                                  Street = $"Street-{i % 199}"'                                  ZipCode = i % 999                              }                          };    #if v35                      bulk.Store(employee);  #else                          bulk.StoreAsync(employee).Wait();  #endif                      }                        progress.Report((double)i / numberOfIterations);                  }                    progress.Report(100);              }
Magic Number,Indexing.Benchmark,Program,C:\repos\ravendb_ravendb\bench\Indexing.Benchmark\Program.cs,InsertDocs,The following statement contains a magic number: using (var bulk = _store.BulkInsert())              using (var progress = new ProgressBar())              {                  for (int i = 0; i < numberOfIterations; i++)                  {                      if (i < NumberOfOrderDocuments)                      {                          var order = new Order                          {                              Company = $"companies/{_random.Next(1' NumberOfCompanyDocuments)}"'                              Employee = $"employees/{_random.Next(1' NumberOfEmployeeDocuments)}"'                              Lines = CreateOrderLines(_random.Next(0' 15))'                              Freight = _random.Next()'                              OrderedAt = DateTime.Now'                              RequireAt = DateTime.Now.AddDays(_random.Next(1' 30))'                              ShippedAt = DateTime.Now'                              ShipTo = new Address                              {                                  Country = $"Country{_random.Next(0' 10)}"'                                  City = $"City{_random.Next(0' 100)}"'                                  Street = $"Street{_random.Next(0' 1000)}"'                                  ZipCode = _random.Next(0' 9999)                              }'                              ShipVia = $"shippers/{_random.Next(0' 10)}"                          };    #if v35                      bulk.Store(order);  #else                          bulk.StoreAsync(order).Wait();  #endif                      }                        if (i < NumberOfCompanyDocuments)                      {                          var company = new Company()                          {                              Name = $"Company-{i}"'                              Desc = "Lorem ipsum ble ble ble"'                              Contacts = new List<Contact>()                              {                                  new Contact()'                                  new Contact()'                                  new Contact()                              }'                              Address1 = "Address1"'                              Address2 = "Address2"'                              Address3 = "Address3"'                              Email = $"company-{i}@gmail.com"'                          };    #if v35                          bulk.Store(company);  #else                          bulk.StoreAsync(company).Wait();  #endif                      }                        if (i < NumberOfEmployeeDocuments)                      {                          var employee = new Employee()                          {                              FirstName = $"FirstName-{i % 123}"'                              LastName = $"LastName-{i % 456}"'                              Address = new Address()                              {                                  Country = i % 2 == 0 ? "PL" : "IL"'                                  City = $"City-{i % 77}"'                                  Street = $"Street-{i % 199}"'                                  ZipCode = i % 999                              }                          };    #if v35                      bulk.Store(employee);  #else                          bulk.StoreAsync(employee).Wait();  #endif                      }                        progress.Report((double)i / numberOfIterations);                  }                    progress.Report(100);              }
Magic Number,Indexing.Benchmark,Program,C:\repos\ravendb_ravendb\bench\Indexing.Benchmark\Program.cs,CreateOrderLines,The following statement contains a magic number: for (int i = 0; i < count; i++)              {                  lines.Add(new OrderLine()                  {                      Discount = _random.Next(0' 1)'                      PricePerUnit = _random.Next(1' 999)'                      Product = $"products/{_random.Next(1' 9999)}"'                      ProductName = "ProductName"                  });              }
Magic Number,Indexing.Benchmark,Program,C:\repos\ravendb_ravendb\bench\Indexing.Benchmark\Program.cs,CreateOrderLines,The following statement contains a magic number: for (int i = 0; i < count; i++)              {                  lines.Add(new OrderLine()                  {                      Discount = _random.Next(0' 1)'                      PricePerUnit = _random.Next(1' 999)'                      Product = $"products/{_random.Next(1' 9999)}"'                      ProductName = "ProductName"                  });              }
Magic Number,Indexing.Benchmark,ProgressBar,C:\repos\ravendb_ravendb\bench\Indexing.Benchmark\ProgressBar.cs,ProgressBar,The following statement contains a magic number: timer = new Timer(TimerHandler' null' 0' 1000);
Magic Number,Indexing.Benchmark,ProgressBar,C:\repos\ravendb_ravendb\bench\Indexing.Benchmark\ProgressBar.cs,TimerHandler,The following statement contains a magic number: lock (timer)              {                  if (disposed) return;                    int progressBlockCount = (int)(currentProgress * blockCount);                  int percent = (int)(currentProgress * 100);                  string text = string.Format("[{0}{1}] {2'3}% {3}"'                      new string('#'' progressBlockCount)' new string('-'' blockCount - progressBlockCount)'                      percent'                      animation[animationIndex++ % animation.Length]);                  UpdateText(text);                    ResetTimer();              }
