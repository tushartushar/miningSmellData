Implementation smell,Namespace,Class,File,Method,Description
Long Statement,TailFeather.Controllers,TailFeatherController,C:\repos\ravendb_ravendb\ToMigrate\Rachis\TailFeather\Controllers\TailFeatherController.cs,ExecuteAsync,The length of the statement  "                    return Request.CreateErrorResponse(HttpStatusCode.PreconditionFailed' "Current leader " + currentLeader + " is not found in the topology. This should not happen."); " is 164.
Long Statement,TailFeather,Program,C:\repos\ravendb_ravendb\ToMigrate\Rachis\TailFeather\Program.cs,Main,The length of the statement  "            var kvso = StorageEnvironmentOptions.ForPath(Path.Combine(AppDomain.CurrentDomain.BaseDirectory' options.DataPath' "KeyValue")); " is 128.
Long Statement,TailFeather,Program,C:\repos\ravendb_ravendb\ToMigrate\Rachis\TailFeather\Program.cs,Main,The length of the statement  "                var storageEnvironmentOptions = StorageEnvironmentOptions.ForPath(Path.Combine(AppDomain.CurrentDomain.BaseDirectory' options.DataPath' "Raft")); " is 145.
Long Statement,TailFeather,Program,C:\repos\ravendb_ravendb\ToMigrate\Rachis\TailFeather\Program.cs,Main,The length of the statement  "                        httpConfiguration.Formatters.JsonFormatter.SerializerSettings.Converters.Add(new Newtonsoft.Json.Converters.StringEnumConverter()); " is 131.
Empty Catch Block,TailFeather.Storage,KeyValueStateMachine,C:\repos\ravendb_ravendb\ToMigrate\Rachis\TailFeather\Storage\KeyValueStateMachine.cs,DeleteOldSnapshots,The method has an empty catch block.
Magic Number,TailFeather.Storage,KeyValueStateMachine,C:\repos\ravendb_ravendb\ToMigrate\Rachis\TailFeather\Storage\KeyValueStateMachine.cs,CreateSnapshot,The following statement contains a magic number: if (incrementalBackupsSize / 2 > fullBackupSize)              {                  DoFullBackup(index' term' allowFurtherModifications);                  return;              }
Magic Number,TailFeather.Storage,KeyValueStateMachine,C:\repos\ravendb_ravendb\ToMigrate\Rachis\TailFeather\Storage\KeyValueStateMachine.cs,ApplySnapshot,The following statement contains a magic number: var buffer = new byte[1024 * 16];
Magic Number,TailFeather.Storage,KeyValueStateMachine,C:\repos\ravendb_ravendb\ToMigrate\Rachis\TailFeather\Storage\KeyValueStateMachine.cs,ApplySnapshot,The following statement contains a magic number: var buffer = new byte[1024 * 16];
Magic Number,TailFeather.Storage,SnapshotWriter,C:\repos\ravendb_ravendb\ToMigrate\Rachis\TailFeather\Storage\KeyValueStateMachine.cs,SnapshotWriter,The following statement contains a magic number: if (parts.Length != 3)                      throw new InvalidOperationException("Invalid snapshot file name " + files[files.Length - 1] + "' could not figure out index & term");
Magic Number,TailFeather.Storage,SnapshotWriter,C:\repos\ravendb_ravendb\ToMigrate\Rachis\TailFeather\Storage\KeyValueStateMachine.cs,SnapshotWriter,The following statement contains a magic number: Term = long.Parse(parts[2]);
Magic Number,TailFeather,Program,C:\repos\ravendb_ravendb\ToMigrate\Rachis\TailFeather\Program.cs,Main,The following statement contains a magic number: using (var statemachine = new KeyValueStateMachine(kvso))              {                  var storageEnvironmentOptions = StorageEnvironmentOptions.ForPath(Path.Combine(AppDomain.CurrentDomain.BaseDirectory' options.DataPath' "Raft"));                  var httpTransport = new HttpTransport(nodeName);                  var raftEngineOptions = new RaftEngineOptions(                      new NodeConnectionInfo                      {                          Name = nodeName'                          Uri = new Uri("http://" + Environment.MachineName + ":" + options.Port)'                      }'                      storageEnvironmentOptions'                      httpTransport'                      statemachine                      )                  {                      ElectionTimeout = 5 * 1000'                      HeartbeatTimeout = 1000'                      MaxLogLengthBeforeCompaction = 25                  };                    if (options.Boostrap)                  {                      PersistentState.ClusterBootstrap(raftEngineOptions);                      Console.WriteLine("Setup node as the cluster seed' exiting...");                      return;                  }                    using (var raftEngine = new RaftEngine(raftEngineOptions))                  {                      using (WebApp.Start(new StartOptions                      {                          Urls = { "http://+:" + options.Port + "/" }                      }' builder =>                      {                          var httpConfiguration = new HttpConfiguration();                          httpConfiguration.Formatters.Remove(httpConfiguration.Formatters.XmlFormatter);                          httpConfiguration.Formatters.JsonFormatter.SerializerSettings.Formatting = Newtonsoft.Json.Formatting.Indented;                          httpConfiguration.Formatters.JsonFormatter.SerializerSettings.Converters.Add(new Newtonsoft.Json.Converters.StringEnumConverter());                          RaftWebApiConfig.Load();                          httpConfiguration.MapHttpAttributeRoutes();                          httpConfiguration.Properties[typeof(HttpTransportBus)] = httpTransport.Bus;                          httpConfiguration.Properties[typeof(RaftEngine)] = raftEngine;                          builder.UseWebApi(httpConfiguration);                      }))                      {                          Console.WriteLine("Ready @ http://" + Environment.MachineName + ":" + options.Port + "/' press ENTER to stop");                            Console.ReadLine();                      }                  }              }
Magic Number,TailFeather,Program,C:\repos\ravendb_ravendb\ToMigrate\Rachis\TailFeather\Program.cs,Main,The following statement contains a magic number: using (var statemachine = new KeyValueStateMachine(kvso))              {                  var storageEnvironmentOptions = StorageEnvironmentOptions.ForPath(Path.Combine(AppDomain.CurrentDomain.BaseDirectory' options.DataPath' "Raft"));                  var httpTransport = new HttpTransport(nodeName);                  var raftEngineOptions = new RaftEngineOptions(                      new NodeConnectionInfo                      {                          Name = nodeName'                          Uri = new Uri("http://" + Environment.MachineName + ":" + options.Port)'                      }'                      storageEnvironmentOptions'                      httpTransport'                      statemachine                      )                  {                      ElectionTimeout = 5 * 1000'                      HeartbeatTimeout = 1000'                      MaxLogLengthBeforeCompaction = 25                  };                    if (options.Boostrap)                  {                      PersistentState.ClusterBootstrap(raftEngineOptions);                      Console.WriteLine("Setup node as the cluster seed' exiting...");                      return;                  }                    using (var raftEngine = new RaftEngine(raftEngineOptions))                  {                      using (WebApp.Start(new StartOptions                      {                          Urls = { "http://+:" + options.Port + "/" }                      }' builder =>                      {                          var httpConfiguration = new HttpConfiguration();                          httpConfiguration.Formatters.Remove(httpConfiguration.Formatters.XmlFormatter);                          httpConfiguration.Formatters.JsonFormatter.SerializerSettings.Formatting = Newtonsoft.Json.Formatting.Indented;                          httpConfiguration.Formatters.JsonFormatter.SerializerSettings.Converters.Add(new Newtonsoft.Json.Converters.StringEnumConverter());                          RaftWebApiConfig.Load();                          httpConfiguration.MapHttpAttributeRoutes();                          httpConfiguration.Properties[typeof(HttpTransportBus)] = httpTransport.Bus;                          httpConfiguration.Properties[typeof(RaftEngine)] = raftEngine;                          builder.UseWebApi(httpConfiguration);                      }))                      {                          Console.WriteLine("Ready @ http://" + Environment.MachineName + ":" + options.Port + "/' press ENTER to stop");                            Console.ReadLine();                      }                  }              }
Magic Number,TailFeather,Program,C:\repos\ravendb_ravendb\ToMigrate\Rachis\TailFeather\Program.cs,Main,The following statement contains a magic number: using (var statemachine = new KeyValueStateMachine(kvso))              {                  var storageEnvironmentOptions = StorageEnvironmentOptions.ForPath(Path.Combine(AppDomain.CurrentDomain.BaseDirectory' options.DataPath' "Raft"));                  var httpTransport = new HttpTransport(nodeName);                  var raftEngineOptions = new RaftEngineOptions(                      new NodeConnectionInfo                      {                          Name = nodeName'                          Uri = new Uri("http://" + Environment.MachineName + ":" + options.Port)'                      }'                      storageEnvironmentOptions'                      httpTransport'                      statemachine                      )                  {                      ElectionTimeout = 5 * 1000'                      HeartbeatTimeout = 1000'                      MaxLogLengthBeforeCompaction = 25                  };                    if (options.Boostrap)                  {                      PersistentState.ClusterBootstrap(raftEngineOptions);                      Console.WriteLine("Setup node as the cluster seed' exiting...");                      return;                  }                    using (var raftEngine = new RaftEngine(raftEngineOptions))                  {                      using (WebApp.Start(new StartOptions                      {                          Urls = { "http://+:" + options.Port + "/" }                      }' builder =>                      {                          var httpConfiguration = new HttpConfiguration();                          httpConfiguration.Formatters.Remove(httpConfiguration.Formatters.XmlFormatter);                          httpConfiguration.Formatters.JsonFormatter.SerializerSettings.Formatting = Newtonsoft.Json.Formatting.Indented;                          httpConfiguration.Formatters.JsonFormatter.SerializerSettings.Converters.Add(new Newtonsoft.Json.Converters.StringEnumConverter());                          RaftWebApiConfig.Load();                          httpConfiguration.MapHttpAttributeRoutes();                          httpConfiguration.Properties[typeof(HttpTransportBus)] = httpTransport.Bus;                          httpConfiguration.Properties[typeof(RaftEngine)] = raftEngine;                          builder.UseWebApi(httpConfiguration);                      }))                      {                          Console.WriteLine("Ready @ http://" + Environment.MachineName + ":" + options.Port + "/' press ENTER to stop");                            Console.ReadLine();                      }                  }              }
Magic Number,TailFeather,Program,C:\repos\ravendb_ravendb\ToMigrate\Rachis\TailFeather\Program.cs,Main,The following statement contains a magic number: using (var statemachine = new KeyValueStateMachine(kvso))              {                  var storageEnvironmentOptions = StorageEnvironmentOptions.ForPath(Path.Combine(AppDomain.CurrentDomain.BaseDirectory' options.DataPath' "Raft"));                  var httpTransport = new HttpTransport(nodeName);                  var raftEngineOptions = new RaftEngineOptions(                      new NodeConnectionInfo                      {                          Name = nodeName'                          Uri = new Uri("http://" + Environment.MachineName + ":" + options.Port)'                      }'                      storageEnvironmentOptions'                      httpTransport'                      statemachine                      )                  {                      ElectionTimeout = 5 * 1000'                      HeartbeatTimeout = 1000'                      MaxLogLengthBeforeCompaction = 25                  };                    if (options.Boostrap)                  {                      PersistentState.ClusterBootstrap(raftEngineOptions);                      Console.WriteLine("Setup node as the cluster seed' exiting...");                      return;                  }                    using (var raftEngine = new RaftEngine(raftEngineOptions))                  {                      using (WebApp.Start(new StartOptions                      {                          Urls = { "http://+:" + options.Port + "/" }                      }' builder =>                      {                          var httpConfiguration = new HttpConfiguration();                          httpConfiguration.Formatters.Remove(httpConfiguration.Formatters.XmlFormatter);                          httpConfiguration.Formatters.JsonFormatter.SerializerSettings.Formatting = Newtonsoft.Json.Formatting.Indented;                          httpConfiguration.Formatters.JsonFormatter.SerializerSettings.Converters.Add(new Newtonsoft.Json.Converters.StringEnumConverter());                          RaftWebApiConfig.Load();                          httpConfiguration.MapHttpAttributeRoutes();                          httpConfiguration.Properties[typeof(HttpTransportBus)] = httpTransport.Bus;                          httpConfiguration.Properties[typeof(RaftEngine)] = raftEngine;                          builder.UseWebApi(httpConfiguration);                      }))                      {                          Console.WriteLine("Ready @ http://" + Environment.MachineName + ":" + options.Port + "/' press ENTER to stop");                            Console.ReadLine();                      }                  }              }
