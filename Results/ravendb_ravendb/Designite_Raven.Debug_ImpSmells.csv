Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Raven.Debug,CommandLineApp,C:\research\architectureSmells\repos\ravendb_ravendb\tools\Raven.Debug\CommandLineApp.cs,ShowStackTrace,Cyclomatic complexity of the method is 13
Long Parameter List,Raven.Debug,CommandLineApp,C:\research\architectureSmells\repos\ravendb_ravendb\tools\Raven.Debug\CommandLineApp.cs,ShowStackTrace,The method has 6 parameters. Parameters: processId' attachTimeout' outputPath' cmd' threadIds' includeStackObjects
Long Parameter List,Raven.Debug,CommandLineApp,C:\research\architectureSmells\repos\ravendb_ravendb\tools\Raven.Debug\CommandLineApp.cs,GetThreadInfo,The method has 5 parameters. Parameters: thread' dataTarget' runtime' sb' includeStackObjects
Long Identifier,Raven.Debug,CommandLineApp,C:\research\architectureSmells\repos\ravendb_ravendb\tools\Raven.Debug\CommandLineApp.cs,,The length of the parameter LOAD_LIBRARY_SEARCH_DLL_LOAD_DIR is 32.
Long Statement,Raven.Debug,CommandLineApp,C:\research\architectureSmells\repos\ravendb_ravendb\tools\Raven.Debug\CommandLineApp.cs,Run,The length of the statement  "                var attachTimeoutOption = cmd.Option("--timeout"' "Attaching to process timeout in milliseconds. Default 15000"' CommandOptionType.SingleValue); " is 144.
Long Statement,Raven.Debug,CommandLineApp,C:\research\architectureSmells\repos\ravendb_ravendb\tools\Raven.Debug\CommandLineApp.cs,Run,The length of the statement  "                var includeStackObjectsOption = cmd.Option("--includeStackObjects"' "Include the stack objects"' CommandOptionType.NoValue); " is 124.
Magic Number,Raven.Debug,CommandLineApp,C:\research\architectureSmells\repos\ravendb_ravendb\tools\Raven.Debug\CommandLineApp.cs,Run,The following statement contains a magic number: _app.Command("stack-traces"' cmd =>              {                  cmd.ExtendedHelpText = cmd.Description = "Prints stack traces for the given process.";                  cmd.HelpOption(HelpOptionString);                    var waitOption = cmd.Option("--wait"' "Wait for user input"' CommandOptionType.NoValue);                  var pidOption = cmd.Option("--pid"' "Process ID to which the tool will attach to"' CommandOptionType.SingleValue);                  var attachTimeoutOption = cmd.Option("--timeout"' "Attaching to process timeout in milliseconds. Default 15000"' CommandOptionType.SingleValue);                  var outputOption = cmd.Option("--output"' "Output file path"' CommandOptionType.SingleValue);                  var threadIdsOption = cmd.Option("--tid"' "Thread ID to get the info about"' CommandOptionType.MultipleValue);                  var includeStackObjectsOption = cmd.Option("--includeStackObjects"' "Include the stack objects"' CommandOptionType.NoValue);                    cmd.OnExecute(() =>                  {                      if (waitOption.HasValue())                          Console.ReadLine(); // wait for the caller to finish preparing for us                        if (pidOption.HasValue() == false)                          return ExitWithError("Missing --pid option."' cmd);                        if (int.TryParse(pidOption.Value()' out var pid) == false)                          return ExitWithError($"Could not parse --pid with value '{pidOption.Value()}' to number."' cmd);                        HashSet<uint> threadIds = null;                      if (threadIdsOption.HasValue())                      {                          foreach (var tid in threadIdsOption.Values)                          {                              if (uint.TryParse(tid' out var tidAsInt) == false)                                  return ExitWithError($"Could not parse --tid with value '{tid}' to number."' cmd);                                if (threadIds == null)                                  threadIds = new HashSet<uint>();                                threadIds.Add(tidAsInt);                          }                      }                        uint attachTimeout = 15000;                      if (attachTimeoutOption.HasValue() && uint.TryParse(attachTimeoutOption.Value()' out attachTimeout) == false)                          return ExitWithError($"Could not parse --attachTimeout with value '{attachTimeoutOption.Value()}' to number."' cmd);                        string output = null;                      if (outputOption.HasValue())                          output = outputOption.Value();                        var includeStackObjects = includeStackObjectsOption.Values.FirstOrDefault() == "on";                        try                      {                          ShowStackTrace(pid' attachTimeout' output' cmd' threadIds' includeStackObjects);                          return 0;                      }                      catch (Exception e)                      {                          string desc;                          if (RuntimeInformation.IsOSPlatform(OSPlatform.Linux) == false)                              desc = "";                          else                          {                              var apppath = typeof(CommandLineApp).Assembly.Location;                              desc =                                  $"Make sure to {Environment.NewLine}" +                                  $"sudo chown root:root {apppath}{Environment.NewLine}" +                                  $"sudo chmod +s {apppath}{Environment.NewLine}" +                                   $"sudo apt install libc6-dev{Environment.NewLine}" +                                   $"sudo setcap cap_sys_ptrace=eip {apppath}{Environment.NewLine}";                          }                            return ExitWithError($"Failed to show the stacktrace. {desc}Error: {e}"' cmd);                      }                  });              });
Magic Number,Raven.Debug,CommandLineApp,C:\research\architectureSmells\repos\ravendb_ravendb\tools\Raven.Debug\CommandLineApp.cs,ShowStackTrace,The following statement contains a magic number: var sb = new StringBuilder(1024 * 1024);
Magic Number,Raven.Debug,CommandLineApp,C:\research\architectureSmells\repos\ravendb_ravendb\tools\Raven.Debug\CommandLineApp.cs,ShowStackTrace,The following statement contains a magic number: var sb = new StringBuilder(1024 * 1024);
