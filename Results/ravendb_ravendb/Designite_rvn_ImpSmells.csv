Implementation smell,Namespace,Class,File,Method,Description
Long Method,rvn,AdminChannel,C:\repos\ravendb_ravendb\tools\rvn\AdminChannel.cs,Connect,The method has 150 lines of code.
Long Method,rvn,CommandLineApp,C:\repos\ravendb_ravendb\tools\rvn\CommandLineApp.cs,ConfigureOfflineOperationCommand,The method has 110 lines of code.
Complex Method,rvn,AdminChannel,C:\repos\ravendb_ravendb\tools\rvn\AdminChannel.cs,Connect,Cyclomatic complexity of the method is 18
Long Statement,rvn,AdminChannel,C:\repos\ravendb_ravendb\tools\rvn\AdminChannel.cs,Connect,The length of the statement  "                    if (PlatformDetails.RunningOnPosix) // TODO: remove this if and after https://github.com/dotnet/corefx/issues/22141 (both in RavenServer.cs and AdminChannel.cs) " is 160.
Long Statement,rvn,AdminChannel,C:\repos\ravendb_ravendb\tools\rvn\AdminChannel.cs,Connect,The length of the statement  "                            throw new InvalidOperationException("Unable to set the proper path for the admin pipe' admin channel will not be available"); " is 125.
Long Statement,rvn,AdminChannel,C:\repos\ravendb_ravendb\tools\rvn\AdminChannel.cs,Connect,The length of the statement  "                            skipOnceRead = true; // to avoid situation where another delimiter passed in previous Read' and next Read might blocked forever " is 127.
Long Statement,rvn,CommandLineApp,C:\repos\ravendb_ravendb\tools\rvn\CommandLineApp.cs,Run,The length of the statement  "                Description = "This utility lets you manage RavenDB offline operations' such as setting encryption mode for the server store. " + " is 129.
Long Statement,rvn,CommandLineApp,C:\repos\ravendb_ravendb\tools\rvn\CommandLineApp.cs,Run,The length of the statement  "                              "The server store which may contain sensitive information is not encrypted by default (even if it contains encrypted databases). " + " is 132.
Long Statement,rvn,CommandLineApp,C:\repos\ravendb_ravendb\tools\rvn\CommandLineApp.cs,ConfigureAdminChannelCommand,The length of the statement  "                cmd.ExtendedHelpText = cmd.Description = "Open RavenDB CLI session on local machine (using piped name connection). If PID ommited - will try auto pid discovery."; " is 162.
Long Statement,rvn,CommandLineApp,C:\repos\ravendb_ravendb\tools\rvn\CommandLineApp.cs,ConfigureOfflineOperationCommand,The length of the statement  "                    subcmd.ExtendedHelpText = Environment.NewLine + "Restores the encryption key on the new machine and protects it for the current OS user. " + " is 140.
Long Statement,rvn,CommandLineApp,C:\repos\ravendb_ravendb\tools\rvn\CommandLineApp.cs,ConfigureOfflineOperationCommand,The length of the statement  "                    subcmd.ExtendedHelpText = Environment.NewLine + "Decrypts RavenDB files in a given directory using the key inserted earlier using the put-key command." +  " is 153.
Long Statement,rvn,LogStream,C:\repos\ravendb_ravendb\tools\rvn\LogStream.cs,WorkaroundSetPipePathForPosix,The length of the statement  "            if (PlatformDetails.RunningOnPosix) // TODO: remove this if and after https://github.com/dotnet/corefx/issues/22141 (both in RavenServer.cs and AdminChannel.cs) " is 160.
Long Statement,rvn,LogStream,C:\repos\ravendb_ravendb\tools\rvn\LogStream.cs,WorkaroundSetPipePathForPosix,The length of the statement  "                    throw new InvalidOperationException("Unable to set the proper path for the admin pipe' admin channel will not be available"); " is 125.
Long Statement,rvn,WindowsServiceController,C:\repos\ravendb_ravendb\tools\rvn\WindowsService.cs,InstallInternal,The length of the statement  "                        Console.WriteLine($"Service {ServiceFullName} has been marked for deletion. Performing {counter + 1} installation attempt."); " is 125.
Long Statement,rvn,WindowsServiceController,C:\repos\ravendb_ravendb\tools\rvn\WindowsService.cs,InstallInternal,The length of the statement  "                    Console.WriteLine($"Cannot register service {ServiceFullName} due to insufficient privileges. Please use Administrator account to install the service."); " is 153.
Long Statement,rvn,WindowsServiceController,C:\repos\ravendb_ravendb\tools\rvn\WindowsService.cs,UninstallInternal,The length of the statement  "                if ((serviceController.Status == ServiceControllerStatus.Stopped || serviceController.Status == ServiceControllerStatus.StopPending) == false) " is 142.
Long Statement,rvn,WindowsServiceController,C:\repos\ravendb_ravendb\tools\rvn\WindowsService.cs,UninstallInternal,The length of the statement  "                    Console.WriteLine($"Cannot unregister service {ServiceFullName} due to insufficient privileges. Please use Administrator account to uninstall the service."); " is 157.
Long Statement,rvn,WindowsServiceController,C:\repos\ravendb_ravendb\tools\rvn\WindowsService.cs,StopInternal,The length of the statement  "                if (!(serviceController.Status == ServiceControllerStatus.Stopped || serviceController.Status == ServiceControllerStatus.StopPending)) " is 134.
Long Statement,rvn,WindowsServiceController,C:\repos\ravendb_ravendb\tools\rvn\WindowsService.cs,StartInternal,The length of the statement  "                if (!(serviceController.Status == ServiceControllerStatus.Running | serviceController.Status == ServiceControllerStatus.StartPending)) " is 134.
Long Statement,rvn.Utils,ServerProcessUtil,C:\repos\ravendb_ravendb\tools\rvn\Utils\ServerProcessUtil.cs,GetRavenServerPid,The length of the statement  "                Console.WriteLine("Will try to connect to discovered Raven.Server process : " + availableRavenProcesses.First().Id + "..." + Environment.NewLine); " is 146.
Empty Catch Block,rvn,LogStream,C:\repos\ravendb_ravendb\tools\rvn\LogStream.cs,Connect,The method has an empty catch block.
Magic Number,rvn,AdminChannel,C:\repos\ravendb_ravendb\tools\rvn\AdminChannel.cs,Connect,The following statement contains a magic number: while (reconnect)              {                  reconnect = false;                    if (pid == null)                  {                      pid = ServerProcessUtil.GetRavenServerPid();                  }                    try                  {                      var pipeName = Pipes.GetPipeName(Pipes.AdminConsolePipePrefix' pid.Value);                      var client = new NamedPipeClientStream(pipeName);                      if (PlatformDetails.RunningOnPosix) // TODO: remove this if and after https://github.com/dotnet/corefx/issues/22141 (both in RavenServer.cs and AdminChannel.cs)                      {                          var pathField = client.GetType().GetField("_normalizedPipePath"' BindingFlags.NonPublic | BindingFlags.Instance);                          if (pathField == null)                          {                              throw new InvalidOperationException("Unable to set the proper path for the admin pipe' admin channel will not be available");                          }                          var pipeDir = Path.Combine(Path.GetTempPath()' "ravendb-pipe");                          pathField.SetValue(client' Path.Combine(pipeDir' pipeName));                      }                      try                      {                          client.Connect(3000);                      }                      catch (Exception ex)                      {                          Console.ForegroundColor = ConsoleColor.Red;                          Console.WriteLine(Environment.NewLine + "Couldn't connect to " + pipeName);                          Console.ResetColor();                          Console.WriteLine();                          Console.WriteLine(ex);                          Environment.Exit(100);                      }                        var reader = new StreamReader(client);                      var writer = new StreamWriter(client);                      var buffer = new char[16 * 1024];                      var sb = new StringBuilder();                        RavenCli.Delimiter[] delimiters =                      {                          RavenCli.Delimiter.NotFound'                          RavenCli.Delimiter.ReadLine'                          RavenCli.Delimiter.ReadKey'                          RavenCli.Delimiter.Clear'                          RavenCli.Delimiter.Logout'                          RavenCli.Delimiter.Shutdown'                          RavenCli.Delimiter.RestartServer'                          RavenCli.Delimiter.ContinuePrinting                      };                        string restOfString = null;                      while (true)                      {                          sb.Clear();                          bool skipOnceRead = false;                          if (restOfString != null)                          {                              sb.Append(restOfString);                              restOfString = null;                              skipOnceRead = true; // to avoid situation where another delimiter passed in previous Read' and next Read might blocked forever                          }                            var delimiter = RavenCli.Delimiter.NotFound;                          // ReSharper disable once LoopVariableIsNeverChangedInsideLoop                          while (delimiter == RavenCli.Delimiter.NotFound)                          {                              if (skipOnceRead == false)                              {                                  var v = reader.Read(buffer' 0' 8192);                                  if (v == 0)                                      continue;                                    sb.Append(new string(buffer' 0' v));                              }                              else                              {                                  skipOnceRead = false;                              }                                var sbString = sb.ToString();                              var firstDelimiterPos = sbString.IndexOf(RavenCli.DelimiterKeyWord' StringComparison.Ordinal);                              if (firstDelimiterPos == -1)                                  continue;                              var delimiterString = sbString.Substring(firstDelimiterPos);                                RavenCli.Delimiter firstDelimiter = RavenCli.Delimiter.NotFound;                              int firstIndex = 0;                              var lowestPos = 8192;                              foreach (var del in delimiters)                              {                                  var index = delimiterString.IndexOf(RavenCli.GetDelimiterString(del)' StringComparison.Ordinal);                                  if (index == -1)                                      continue;                                  if (index < lowestPos)                                  {                                      lowestPos = index;                                      firstDelimiter = del;                                      firstIndex = index;                                  }                              }                              if (firstDelimiter == RavenCli.Delimiter.NotFound)                                  continue;                                var posAgterFirstDelimiter = firstIndex + RavenCli.GetDelimiterString(firstDelimiter).Length;                              restOfString = delimiterString.Substring(posAgterFirstDelimiter);                                delimiter = firstDelimiter;                              break;                          }                            var str = sb.ToString();                          Console.Write(str.Substring(0' str.IndexOf(RavenCli.DelimiterKeyWord' StringComparison.Ordinal)));                            if (delimiter == RavenCli.Delimiter.ContinuePrinting)                          {                              continue;                          }                            switch (delimiter)                          {                              case RavenCli.Delimiter.ReadLine:                                  writer.WriteLine(Console.ReadLine());                                  break;                              case RavenCli.Delimiter.ReadKey:                                  writer.Write(Console.ReadKey().KeyChar);                                  break;                              case RavenCli.Delimiter.Clear:                                  Console.Clear();                                  break;                              case RavenCli.Delimiter.Logout:                              case RavenCli.Delimiter.Shutdown:                                  Console.WriteLine();                                  Environment.Exit(0);                                  break;                              case RavenCli.Delimiter.RestartServer:                                  Console.WriteLine();                                  for (int i = 10; i >= 0; i--)                                  {                                      Console.Write($"\rTrying to reconnect in {i} seconds ...  ");                                      Thread.Sleep(1000);                                  }                                  Console.WriteLine();                                  reconnect = true;                                  break;                          }                          writer.Flush();                          if (reconnect)                              break;                      }                  }                  catch (Exception e)                  {                      Console.WriteLine(e);                      throw;                  }              }
Magic Number,rvn,AdminChannel,C:\repos\ravendb_ravendb\tools\rvn\AdminChannel.cs,Connect,The following statement contains a magic number: while (reconnect)              {                  reconnect = false;                    if (pid == null)                  {                      pid = ServerProcessUtil.GetRavenServerPid();                  }                    try                  {                      var pipeName = Pipes.GetPipeName(Pipes.AdminConsolePipePrefix' pid.Value);                      var client = new NamedPipeClientStream(pipeName);                      if (PlatformDetails.RunningOnPosix) // TODO: remove this if and after https://github.com/dotnet/corefx/issues/22141 (both in RavenServer.cs and AdminChannel.cs)                      {                          var pathField = client.GetType().GetField("_normalizedPipePath"' BindingFlags.NonPublic | BindingFlags.Instance);                          if (pathField == null)                          {                              throw new InvalidOperationException("Unable to set the proper path for the admin pipe' admin channel will not be available");                          }                          var pipeDir = Path.Combine(Path.GetTempPath()' "ravendb-pipe");                          pathField.SetValue(client' Path.Combine(pipeDir' pipeName));                      }                      try                      {                          client.Connect(3000);                      }                      catch (Exception ex)                      {                          Console.ForegroundColor = ConsoleColor.Red;                          Console.WriteLine(Environment.NewLine + "Couldn't connect to " + pipeName);                          Console.ResetColor();                          Console.WriteLine();                          Console.WriteLine(ex);                          Environment.Exit(100);                      }                        var reader = new StreamReader(client);                      var writer = new StreamWriter(client);                      var buffer = new char[16 * 1024];                      var sb = new StringBuilder();                        RavenCli.Delimiter[] delimiters =                      {                          RavenCli.Delimiter.NotFound'                          RavenCli.Delimiter.ReadLine'                          RavenCli.Delimiter.ReadKey'                          RavenCli.Delimiter.Clear'                          RavenCli.Delimiter.Logout'                          RavenCli.Delimiter.Shutdown'                          RavenCli.Delimiter.RestartServer'                          RavenCli.Delimiter.ContinuePrinting                      };                        string restOfString = null;                      while (true)                      {                          sb.Clear();                          bool skipOnceRead = false;                          if (restOfString != null)                          {                              sb.Append(restOfString);                              restOfString = null;                              skipOnceRead = true; // to avoid situation where another delimiter passed in previous Read' and next Read might blocked forever                          }                            var delimiter = RavenCli.Delimiter.NotFound;                          // ReSharper disable once LoopVariableIsNeverChangedInsideLoop                          while (delimiter == RavenCli.Delimiter.NotFound)                          {                              if (skipOnceRead == false)                              {                                  var v = reader.Read(buffer' 0' 8192);                                  if (v == 0)                                      continue;                                    sb.Append(new string(buffer' 0' v));                              }                              else                              {                                  skipOnceRead = false;                              }                                var sbString = sb.ToString();                              var firstDelimiterPos = sbString.IndexOf(RavenCli.DelimiterKeyWord' StringComparison.Ordinal);                              if (firstDelimiterPos == -1)                                  continue;                              var delimiterString = sbString.Substring(firstDelimiterPos);                                RavenCli.Delimiter firstDelimiter = RavenCli.Delimiter.NotFound;                              int firstIndex = 0;                              var lowestPos = 8192;                              foreach (var del in delimiters)                              {                                  var index = delimiterString.IndexOf(RavenCli.GetDelimiterString(del)' StringComparison.Ordinal);                                  if (index == -1)                                      continue;                                  if (index < lowestPos)                                  {                                      lowestPos = index;                                      firstDelimiter = del;                                      firstIndex = index;                                  }                              }                              if (firstDelimiter == RavenCli.Delimiter.NotFound)                                  continue;                                var posAgterFirstDelimiter = firstIndex + RavenCli.GetDelimiterString(firstDelimiter).Length;                              restOfString = delimiterString.Substring(posAgterFirstDelimiter);                                delimiter = firstDelimiter;                              break;                          }                            var str = sb.ToString();                          Console.Write(str.Substring(0' str.IndexOf(RavenCli.DelimiterKeyWord' StringComparison.Ordinal)));                            if (delimiter == RavenCli.Delimiter.ContinuePrinting)                          {                              continue;                          }                            switch (delimiter)                          {                              case RavenCli.Delimiter.ReadLine:                                  writer.WriteLine(Console.ReadLine());                                  break;                              case RavenCli.Delimiter.ReadKey:                                  writer.Write(Console.ReadKey().KeyChar);                                  break;                              case RavenCli.Delimiter.Clear:                                  Console.Clear();                                  break;                              case RavenCli.Delimiter.Logout:                              case RavenCli.Delimiter.Shutdown:                                  Console.WriteLine();                                  Environment.Exit(0);                                  break;                              case RavenCli.Delimiter.RestartServer:                                  Console.WriteLine();                                  for (int i = 10; i >= 0; i--)                                  {                                      Console.Write($"\rTrying to reconnect in {i} seconds ...  ");                                      Thread.Sleep(1000);                                  }                                  Console.WriteLine();                                  reconnect = true;                                  break;                          }                          writer.Flush();                          if (reconnect)                              break;                      }                  }                  catch (Exception e)                  {                      Console.WriteLine(e);                      throw;                  }              }
Magic Number,rvn,AdminChannel,C:\repos\ravendb_ravendb\tools\rvn\AdminChannel.cs,Connect,The following statement contains a magic number: while (reconnect)              {                  reconnect = false;                    if (pid == null)                  {                      pid = ServerProcessUtil.GetRavenServerPid();                  }                    try                  {                      var pipeName = Pipes.GetPipeName(Pipes.AdminConsolePipePrefix' pid.Value);                      var client = new NamedPipeClientStream(pipeName);                      if (PlatformDetails.RunningOnPosix) // TODO: remove this if and after https://github.com/dotnet/corefx/issues/22141 (both in RavenServer.cs and AdminChannel.cs)                      {                          var pathField = client.GetType().GetField("_normalizedPipePath"' BindingFlags.NonPublic | BindingFlags.Instance);                          if (pathField == null)                          {                              throw new InvalidOperationException("Unable to set the proper path for the admin pipe' admin channel will not be available");                          }                          var pipeDir = Path.Combine(Path.GetTempPath()' "ravendb-pipe");                          pathField.SetValue(client' Path.Combine(pipeDir' pipeName));                      }                      try                      {                          client.Connect(3000);                      }                      catch (Exception ex)                      {                          Console.ForegroundColor = ConsoleColor.Red;                          Console.WriteLine(Environment.NewLine + "Couldn't connect to " + pipeName);                          Console.ResetColor();                          Console.WriteLine();                          Console.WriteLine(ex);                          Environment.Exit(100);                      }                        var reader = new StreamReader(client);                      var writer = new StreamWriter(client);                      var buffer = new char[16 * 1024];                      var sb = new StringBuilder();                        RavenCli.Delimiter[] delimiters =                      {                          RavenCli.Delimiter.NotFound'                          RavenCli.Delimiter.ReadLine'                          RavenCli.Delimiter.ReadKey'                          RavenCli.Delimiter.Clear'                          RavenCli.Delimiter.Logout'                          RavenCli.Delimiter.Shutdown'                          RavenCli.Delimiter.RestartServer'                          RavenCli.Delimiter.ContinuePrinting                      };                        string restOfString = null;                      while (true)                      {                          sb.Clear();                          bool skipOnceRead = false;                          if (restOfString != null)                          {                              sb.Append(restOfString);                              restOfString = null;                              skipOnceRead = true; // to avoid situation where another delimiter passed in previous Read' and next Read might blocked forever                          }                            var delimiter = RavenCli.Delimiter.NotFound;                          // ReSharper disable once LoopVariableIsNeverChangedInsideLoop                          while (delimiter == RavenCli.Delimiter.NotFound)                          {                              if (skipOnceRead == false)                              {                                  var v = reader.Read(buffer' 0' 8192);                                  if (v == 0)                                      continue;                                    sb.Append(new string(buffer' 0' v));                              }                              else                              {                                  skipOnceRead = false;                              }                                var sbString = sb.ToString();                              var firstDelimiterPos = sbString.IndexOf(RavenCli.DelimiterKeyWord' StringComparison.Ordinal);                              if (firstDelimiterPos == -1)                                  continue;                              var delimiterString = sbString.Substring(firstDelimiterPos);                                RavenCli.Delimiter firstDelimiter = RavenCli.Delimiter.NotFound;                              int firstIndex = 0;                              var lowestPos = 8192;                              foreach (var del in delimiters)                              {                                  var index = delimiterString.IndexOf(RavenCli.GetDelimiterString(del)' StringComparison.Ordinal);                                  if (index == -1)                                      continue;                                  if (index < lowestPos)                                  {                                      lowestPos = index;                                      firstDelimiter = del;                                      firstIndex = index;                                  }                              }                              if (firstDelimiter == RavenCli.Delimiter.NotFound)                                  continue;                                var posAgterFirstDelimiter = firstIndex + RavenCli.GetDelimiterString(firstDelimiter).Length;                              restOfString = delimiterString.Substring(posAgterFirstDelimiter);                                delimiter = firstDelimiter;                              break;                          }                            var str = sb.ToString();                          Console.Write(str.Substring(0' str.IndexOf(RavenCli.DelimiterKeyWord' StringComparison.Ordinal)));                            if (delimiter == RavenCli.Delimiter.ContinuePrinting)                          {                              continue;                          }                            switch (delimiter)                          {                              case RavenCli.Delimiter.ReadLine:                                  writer.WriteLine(Console.ReadLine());                                  break;                              case RavenCli.Delimiter.ReadKey:                                  writer.Write(Console.ReadKey().KeyChar);                                  break;                              case RavenCli.Delimiter.Clear:                                  Console.Clear();                                  break;                              case RavenCli.Delimiter.Logout:                              case RavenCli.Delimiter.Shutdown:                                  Console.WriteLine();                                  Environment.Exit(0);                                  break;                              case RavenCli.Delimiter.RestartServer:                                  Console.WriteLine();                                  for (int i = 10; i >= 0; i--)                                  {                                      Console.Write($"\rTrying to reconnect in {i} seconds ...  ");                                      Thread.Sleep(1000);                                  }                                  Console.WriteLine();                                  reconnect = true;                                  break;                          }                          writer.Flush();                          if (reconnect)                              break;                      }                  }                  catch (Exception e)                  {                      Console.WriteLine(e);                      throw;                  }              }
Magic Number,rvn,AdminChannel,C:\repos\ravendb_ravendb\tools\rvn\AdminChannel.cs,Connect,The following statement contains a magic number: while (reconnect)              {                  reconnect = false;                    if (pid == null)                  {                      pid = ServerProcessUtil.GetRavenServerPid();                  }                    try                  {                      var pipeName = Pipes.GetPipeName(Pipes.AdminConsolePipePrefix' pid.Value);                      var client = new NamedPipeClientStream(pipeName);                      if (PlatformDetails.RunningOnPosix) // TODO: remove this if and after https://github.com/dotnet/corefx/issues/22141 (both in RavenServer.cs and AdminChannel.cs)                      {                          var pathField = client.GetType().GetField("_normalizedPipePath"' BindingFlags.NonPublic | BindingFlags.Instance);                          if (pathField == null)                          {                              throw new InvalidOperationException("Unable to set the proper path for the admin pipe' admin channel will not be available");                          }                          var pipeDir = Path.Combine(Path.GetTempPath()' "ravendb-pipe");                          pathField.SetValue(client' Path.Combine(pipeDir' pipeName));                      }                      try                      {                          client.Connect(3000);                      }                      catch (Exception ex)                      {                          Console.ForegroundColor = ConsoleColor.Red;                          Console.WriteLine(Environment.NewLine + "Couldn't connect to " + pipeName);                          Console.ResetColor();                          Console.WriteLine();                          Console.WriteLine(ex);                          Environment.Exit(100);                      }                        var reader = new StreamReader(client);                      var writer = new StreamWriter(client);                      var buffer = new char[16 * 1024];                      var sb = new StringBuilder();                        RavenCli.Delimiter[] delimiters =                      {                          RavenCli.Delimiter.NotFound'                          RavenCli.Delimiter.ReadLine'                          RavenCli.Delimiter.ReadKey'                          RavenCli.Delimiter.Clear'                          RavenCli.Delimiter.Logout'                          RavenCli.Delimiter.Shutdown'                          RavenCli.Delimiter.RestartServer'                          RavenCli.Delimiter.ContinuePrinting                      };                        string restOfString = null;                      while (true)                      {                          sb.Clear();                          bool skipOnceRead = false;                          if (restOfString != null)                          {                              sb.Append(restOfString);                              restOfString = null;                              skipOnceRead = true; // to avoid situation where another delimiter passed in previous Read' and next Read might blocked forever                          }                            var delimiter = RavenCli.Delimiter.NotFound;                          // ReSharper disable once LoopVariableIsNeverChangedInsideLoop                          while (delimiter == RavenCli.Delimiter.NotFound)                          {                              if (skipOnceRead == false)                              {                                  var v = reader.Read(buffer' 0' 8192);                                  if (v == 0)                                      continue;                                    sb.Append(new string(buffer' 0' v));                              }                              else                              {                                  skipOnceRead = false;                              }                                var sbString = sb.ToString();                              var firstDelimiterPos = sbString.IndexOf(RavenCli.DelimiterKeyWord' StringComparison.Ordinal);                              if (firstDelimiterPos == -1)                                  continue;                              var delimiterString = sbString.Substring(firstDelimiterPos);                                RavenCli.Delimiter firstDelimiter = RavenCli.Delimiter.NotFound;                              int firstIndex = 0;                              var lowestPos = 8192;                              foreach (var del in delimiters)                              {                                  var index = delimiterString.IndexOf(RavenCli.GetDelimiterString(del)' StringComparison.Ordinal);                                  if (index == -1)                                      continue;                                  if (index < lowestPos)                                  {                                      lowestPos = index;                                      firstDelimiter = del;                                      firstIndex = index;                                  }                              }                              if (firstDelimiter == RavenCli.Delimiter.NotFound)                                  continue;                                var posAgterFirstDelimiter = firstIndex + RavenCli.GetDelimiterString(firstDelimiter).Length;                              restOfString = delimiterString.Substring(posAgterFirstDelimiter);                                delimiter = firstDelimiter;                              break;                          }                            var str = sb.ToString();                          Console.Write(str.Substring(0' str.IndexOf(RavenCli.DelimiterKeyWord' StringComparison.Ordinal)));                            if (delimiter == RavenCli.Delimiter.ContinuePrinting)                          {                              continue;                          }                            switch (delimiter)                          {                              case RavenCli.Delimiter.ReadLine:                                  writer.WriteLine(Console.ReadLine());                                  break;                              case RavenCli.Delimiter.ReadKey:                                  writer.Write(Console.ReadKey().KeyChar);                                  break;                              case RavenCli.Delimiter.Clear:                                  Console.Clear();                                  break;                              case RavenCli.Delimiter.Logout:                              case RavenCli.Delimiter.Shutdown:                                  Console.WriteLine();                                  Environment.Exit(0);                                  break;                              case RavenCli.Delimiter.RestartServer:                                  Console.WriteLine();                                  for (int i = 10; i >= 0; i--)                                  {                                      Console.Write($"\rTrying to reconnect in {i} seconds ...  ");                                      Thread.Sleep(1000);                                  }                                  Console.WriteLine();                                  reconnect = true;                                  break;                          }                          writer.Flush();                          if (reconnect)                              break;                      }                  }                  catch (Exception e)                  {                      Console.WriteLine(e);                      throw;                  }              }
Magic Number,rvn,AdminChannel,C:\repos\ravendb_ravendb\tools\rvn\AdminChannel.cs,Connect,The following statement contains a magic number: while (reconnect)              {                  reconnect = false;                    if (pid == null)                  {                      pid = ServerProcessUtil.GetRavenServerPid();                  }                    try                  {                      var pipeName = Pipes.GetPipeName(Pipes.AdminConsolePipePrefix' pid.Value);                      var client = new NamedPipeClientStream(pipeName);                      if (PlatformDetails.RunningOnPosix) // TODO: remove this if and after https://github.com/dotnet/corefx/issues/22141 (both in RavenServer.cs and AdminChannel.cs)                      {                          var pathField = client.GetType().GetField("_normalizedPipePath"' BindingFlags.NonPublic | BindingFlags.Instance);                          if (pathField == null)                          {                              throw new InvalidOperationException("Unable to set the proper path for the admin pipe' admin channel will not be available");                          }                          var pipeDir = Path.Combine(Path.GetTempPath()' "ravendb-pipe");                          pathField.SetValue(client' Path.Combine(pipeDir' pipeName));                      }                      try                      {                          client.Connect(3000);                      }                      catch (Exception ex)                      {                          Console.ForegroundColor = ConsoleColor.Red;                          Console.WriteLine(Environment.NewLine + "Couldn't connect to " + pipeName);                          Console.ResetColor();                          Console.WriteLine();                          Console.WriteLine(ex);                          Environment.Exit(100);                      }                        var reader = new StreamReader(client);                      var writer = new StreamWriter(client);                      var buffer = new char[16 * 1024];                      var sb = new StringBuilder();                        RavenCli.Delimiter[] delimiters =                      {                          RavenCli.Delimiter.NotFound'                          RavenCli.Delimiter.ReadLine'                          RavenCli.Delimiter.ReadKey'                          RavenCli.Delimiter.Clear'                          RavenCli.Delimiter.Logout'                          RavenCli.Delimiter.Shutdown'                          RavenCli.Delimiter.RestartServer'                          RavenCli.Delimiter.ContinuePrinting                      };                        string restOfString = null;                      while (true)                      {                          sb.Clear();                          bool skipOnceRead = false;                          if (restOfString != null)                          {                              sb.Append(restOfString);                              restOfString = null;                              skipOnceRead = true; // to avoid situation where another delimiter passed in previous Read' and next Read might blocked forever                          }                            var delimiter = RavenCli.Delimiter.NotFound;                          // ReSharper disable once LoopVariableIsNeverChangedInsideLoop                          while (delimiter == RavenCli.Delimiter.NotFound)                          {                              if (skipOnceRead == false)                              {                                  var v = reader.Read(buffer' 0' 8192);                                  if (v == 0)                                      continue;                                    sb.Append(new string(buffer' 0' v));                              }                              else                              {                                  skipOnceRead = false;                              }                                var sbString = sb.ToString();                              var firstDelimiterPos = sbString.IndexOf(RavenCli.DelimiterKeyWord' StringComparison.Ordinal);                              if (firstDelimiterPos == -1)                                  continue;                              var delimiterString = sbString.Substring(firstDelimiterPos);                                RavenCli.Delimiter firstDelimiter = RavenCli.Delimiter.NotFound;                              int firstIndex = 0;                              var lowestPos = 8192;                              foreach (var del in delimiters)                              {                                  var index = delimiterString.IndexOf(RavenCli.GetDelimiterString(del)' StringComparison.Ordinal);                                  if (index == -1)                                      continue;                                  if (index < lowestPos)                                  {                                      lowestPos = index;                                      firstDelimiter = del;                                      firstIndex = index;                                  }                              }                              if (firstDelimiter == RavenCli.Delimiter.NotFound)                                  continue;                                var posAgterFirstDelimiter = firstIndex + RavenCli.GetDelimiterString(firstDelimiter).Length;                              restOfString = delimiterString.Substring(posAgterFirstDelimiter);                                delimiter = firstDelimiter;                              break;                          }                            var str = sb.ToString();                          Console.Write(str.Substring(0' str.IndexOf(RavenCli.DelimiterKeyWord' StringComparison.Ordinal)));                            if (delimiter == RavenCli.Delimiter.ContinuePrinting)                          {                              continue;                          }                            switch (delimiter)                          {                              case RavenCli.Delimiter.ReadLine:                                  writer.WriteLine(Console.ReadLine());                                  break;                              case RavenCli.Delimiter.ReadKey:                                  writer.Write(Console.ReadKey().KeyChar);                                  break;                              case RavenCli.Delimiter.Clear:                                  Console.Clear();                                  break;                              case RavenCli.Delimiter.Logout:                              case RavenCli.Delimiter.Shutdown:                                  Console.WriteLine();                                  Environment.Exit(0);                                  break;                              case RavenCli.Delimiter.RestartServer:                                  Console.WriteLine();                                  for (int i = 10; i >= 0; i--)                                  {                                      Console.Write($"\rTrying to reconnect in {i} seconds ...  ");                                      Thread.Sleep(1000);                                  }                                  Console.WriteLine();                                  reconnect = true;                                  break;                          }                          writer.Flush();                          if (reconnect)                              break;                      }                  }                  catch (Exception e)                  {                      Console.WriteLine(e);                      throw;                  }              }
Magic Number,rvn,AdminChannel,C:\repos\ravendb_ravendb\tools\rvn\AdminChannel.cs,Connect,The following statement contains a magic number: while (reconnect)              {                  reconnect = false;                    if (pid == null)                  {                      pid = ServerProcessUtil.GetRavenServerPid();                  }                    try                  {                      var pipeName = Pipes.GetPipeName(Pipes.AdminConsolePipePrefix' pid.Value);                      var client = new NamedPipeClientStream(pipeName);                      if (PlatformDetails.RunningOnPosix) // TODO: remove this if and after https://github.com/dotnet/corefx/issues/22141 (both in RavenServer.cs and AdminChannel.cs)                      {                          var pathField = client.GetType().GetField("_normalizedPipePath"' BindingFlags.NonPublic | BindingFlags.Instance);                          if (pathField == null)                          {                              throw new InvalidOperationException("Unable to set the proper path for the admin pipe' admin channel will not be available");                          }                          var pipeDir = Path.Combine(Path.GetTempPath()' "ravendb-pipe");                          pathField.SetValue(client' Path.Combine(pipeDir' pipeName));                      }                      try                      {                          client.Connect(3000);                      }                      catch (Exception ex)                      {                          Console.ForegroundColor = ConsoleColor.Red;                          Console.WriteLine(Environment.NewLine + "Couldn't connect to " + pipeName);                          Console.ResetColor();                          Console.WriteLine();                          Console.WriteLine(ex);                          Environment.Exit(100);                      }                        var reader = new StreamReader(client);                      var writer = new StreamWriter(client);                      var buffer = new char[16 * 1024];                      var sb = new StringBuilder();                        RavenCli.Delimiter[] delimiters =                      {                          RavenCli.Delimiter.NotFound'                          RavenCli.Delimiter.ReadLine'                          RavenCli.Delimiter.ReadKey'                          RavenCli.Delimiter.Clear'                          RavenCli.Delimiter.Logout'                          RavenCli.Delimiter.Shutdown'                          RavenCli.Delimiter.RestartServer'                          RavenCli.Delimiter.ContinuePrinting                      };                        string restOfString = null;                      while (true)                      {                          sb.Clear();                          bool skipOnceRead = false;                          if (restOfString != null)                          {                              sb.Append(restOfString);                              restOfString = null;                              skipOnceRead = true; // to avoid situation where another delimiter passed in previous Read' and next Read might blocked forever                          }                            var delimiter = RavenCli.Delimiter.NotFound;                          // ReSharper disable once LoopVariableIsNeverChangedInsideLoop                          while (delimiter == RavenCli.Delimiter.NotFound)                          {                              if (skipOnceRead == false)                              {                                  var v = reader.Read(buffer' 0' 8192);                                  if (v == 0)                                      continue;                                    sb.Append(new string(buffer' 0' v));                              }                              else                              {                                  skipOnceRead = false;                              }                                var sbString = sb.ToString();                              var firstDelimiterPos = sbString.IndexOf(RavenCli.DelimiterKeyWord' StringComparison.Ordinal);                              if (firstDelimiterPos == -1)                                  continue;                              var delimiterString = sbString.Substring(firstDelimiterPos);                                RavenCli.Delimiter firstDelimiter = RavenCli.Delimiter.NotFound;                              int firstIndex = 0;                              var lowestPos = 8192;                              foreach (var del in delimiters)                              {                                  var index = delimiterString.IndexOf(RavenCli.GetDelimiterString(del)' StringComparison.Ordinal);                                  if (index == -1)                                      continue;                                  if (index < lowestPos)                                  {                                      lowestPos = index;                                      firstDelimiter = del;                                      firstIndex = index;                                  }                              }                              if (firstDelimiter == RavenCli.Delimiter.NotFound)                                  continue;                                var posAgterFirstDelimiter = firstIndex + RavenCli.GetDelimiterString(firstDelimiter).Length;                              restOfString = delimiterString.Substring(posAgterFirstDelimiter);                                delimiter = firstDelimiter;                              break;                          }                            var str = sb.ToString();                          Console.Write(str.Substring(0' str.IndexOf(RavenCli.DelimiterKeyWord' StringComparison.Ordinal)));                            if (delimiter == RavenCli.Delimiter.ContinuePrinting)                          {                              continue;                          }                            switch (delimiter)                          {                              case RavenCli.Delimiter.ReadLine:                                  writer.WriteLine(Console.ReadLine());                                  break;                              case RavenCli.Delimiter.ReadKey:                                  writer.Write(Console.ReadKey().KeyChar);                                  break;                              case RavenCli.Delimiter.Clear:                                  Console.Clear();                                  break;                              case RavenCli.Delimiter.Logout:                              case RavenCli.Delimiter.Shutdown:                                  Console.WriteLine();                                  Environment.Exit(0);                                  break;                              case RavenCli.Delimiter.RestartServer:                                  Console.WriteLine();                                  for (int i = 10; i >= 0; i--)                                  {                                      Console.Write($"\rTrying to reconnect in {i} seconds ...  ");                                      Thread.Sleep(1000);                                  }                                  Console.WriteLine();                                  reconnect = true;                                  break;                          }                          writer.Flush();                          if (reconnect)                              break;                      }                  }                  catch (Exception e)                  {                      Console.WriteLine(e);                      throw;                  }              }
Magic Number,rvn,AdminChannel,C:\repos\ravendb_ravendb\tools\rvn\AdminChannel.cs,Connect,The following statement contains a magic number: while (reconnect)              {                  reconnect = false;                    if (pid == null)                  {                      pid = ServerProcessUtil.GetRavenServerPid();                  }                    try                  {                      var pipeName = Pipes.GetPipeName(Pipes.AdminConsolePipePrefix' pid.Value);                      var client = new NamedPipeClientStream(pipeName);                      if (PlatformDetails.RunningOnPosix) // TODO: remove this if and after https://github.com/dotnet/corefx/issues/22141 (both in RavenServer.cs and AdminChannel.cs)                      {                          var pathField = client.GetType().GetField("_normalizedPipePath"' BindingFlags.NonPublic | BindingFlags.Instance);                          if (pathField == null)                          {                              throw new InvalidOperationException("Unable to set the proper path for the admin pipe' admin channel will not be available");                          }                          var pipeDir = Path.Combine(Path.GetTempPath()' "ravendb-pipe");                          pathField.SetValue(client' Path.Combine(pipeDir' pipeName));                      }                      try                      {                          client.Connect(3000);                      }                      catch (Exception ex)                      {                          Console.ForegroundColor = ConsoleColor.Red;                          Console.WriteLine(Environment.NewLine + "Couldn't connect to " + pipeName);                          Console.ResetColor();                          Console.WriteLine();                          Console.WriteLine(ex);                          Environment.Exit(100);                      }                        var reader = new StreamReader(client);                      var writer = new StreamWriter(client);                      var buffer = new char[16 * 1024];                      var sb = new StringBuilder();                        RavenCli.Delimiter[] delimiters =                      {                          RavenCli.Delimiter.NotFound'                          RavenCli.Delimiter.ReadLine'                          RavenCli.Delimiter.ReadKey'                          RavenCli.Delimiter.Clear'                          RavenCli.Delimiter.Logout'                          RavenCli.Delimiter.Shutdown'                          RavenCli.Delimiter.RestartServer'                          RavenCli.Delimiter.ContinuePrinting                      };                        string restOfString = null;                      while (true)                      {                          sb.Clear();                          bool skipOnceRead = false;                          if (restOfString != null)                          {                              sb.Append(restOfString);                              restOfString = null;                              skipOnceRead = true; // to avoid situation where another delimiter passed in previous Read' and next Read might blocked forever                          }                            var delimiter = RavenCli.Delimiter.NotFound;                          // ReSharper disable once LoopVariableIsNeverChangedInsideLoop                          while (delimiter == RavenCli.Delimiter.NotFound)                          {                              if (skipOnceRead == false)                              {                                  var v = reader.Read(buffer' 0' 8192);                                  if (v == 0)                                      continue;                                    sb.Append(new string(buffer' 0' v));                              }                              else                              {                                  skipOnceRead = false;                              }                                var sbString = sb.ToString();                              var firstDelimiterPos = sbString.IndexOf(RavenCli.DelimiterKeyWord' StringComparison.Ordinal);                              if (firstDelimiterPos == -1)                                  continue;                              var delimiterString = sbString.Substring(firstDelimiterPos);                                RavenCli.Delimiter firstDelimiter = RavenCli.Delimiter.NotFound;                              int firstIndex = 0;                              var lowestPos = 8192;                              foreach (var del in delimiters)                              {                                  var index = delimiterString.IndexOf(RavenCli.GetDelimiterString(del)' StringComparison.Ordinal);                                  if (index == -1)                                      continue;                                  if (index < lowestPos)                                  {                                      lowestPos = index;                                      firstDelimiter = del;                                      firstIndex = index;                                  }                              }                              if (firstDelimiter == RavenCli.Delimiter.NotFound)                                  continue;                                var posAgterFirstDelimiter = firstIndex + RavenCli.GetDelimiterString(firstDelimiter).Length;                              restOfString = delimiterString.Substring(posAgterFirstDelimiter);                                delimiter = firstDelimiter;                              break;                          }                            var str = sb.ToString();                          Console.Write(str.Substring(0' str.IndexOf(RavenCli.DelimiterKeyWord' StringComparison.Ordinal)));                            if (delimiter == RavenCli.Delimiter.ContinuePrinting)                          {                              continue;                          }                            switch (delimiter)                          {                              case RavenCli.Delimiter.ReadLine:                                  writer.WriteLine(Console.ReadLine());                                  break;                              case RavenCli.Delimiter.ReadKey:                                  writer.Write(Console.ReadKey().KeyChar);                                  break;                              case RavenCli.Delimiter.Clear:                                  Console.Clear();                                  break;                              case RavenCli.Delimiter.Logout:                              case RavenCli.Delimiter.Shutdown:                                  Console.WriteLine();                                  Environment.Exit(0);                                  break;                              case RavenCli.Delimiter.RestartServer:                                  Console.WriteLine();                                  for (int i = 10; i >= 0; i--)                                  {                                      Console.Write($"\rTrying to reconnect in {i} seconds ...  ");                                      Thread.Sleep(1000);                                  }                                  Console.WriteLine();                                  reconnect = true;                                  break;                          }                          writer.Flush();                          if (reconnect)                              break;                      }                  }                  catch (Exception e)                  {                      Console.WriteLine(e);                      throw;                  }              }
Magic Number,rvn,AdminChannel,C:\repos\ravendb_ravendb\tools\rvn\AdminChannel.cs,Connect,The following statement contains a magic number: while (reconnect)              {                  reconnect = false;                    if (pid == null)                  {                      pid = ServerProcessUtil.GetRavenServerPid();                  }                    try                  {                      var pipeName = Pipes.GetPipeName(Pipes.AdminConsolePipePrefix' pid.Value);                      var client = new NamedPipeClientStream(pipeName);                      if (PlatformDetails.RunningOnPosix) // TODO: remove this if and after https://github.com/dotnet/corefx/issues/22141 (both in RavenServer.cs and AdminChannel.cs)                      {                          var pathField = client.GetType().GetField("_normalizedPipePath"' BindingFlags.NonPublic | BindingFlags.Instance);                          if (pathField == null)                          {                              throw new InvalidOperationException("Unable to set the proper path for the admin pipe' admin channel will not be available");                          }                          var pipeDir = Path.Combine(Path.GetTempPath()' "ravendb-pipe");                          pathField.SetValue(client' Path.Combine(pipeDir' pipeName));                      }                      try                      {                          client.Connect(3000);                      }                      catch (Exception ex)                      {                          Console.ForegroundColor = ConsoleColor.Red;                          Console.WriteLine(Environment.NewLine + "Couldn't connect to " + pipeName);                          Console.ResetColor();                          Console.WriteLine();                          Console.WriteLine(ex);                          Environment.Exit(100);                      }                        var reader = new StreamReader(client);                      var writer = new StreamWriter(client);                      var buffer = new char[16 * 1024];                      var sb = new StringBuilder();                        RavenCli.Delimiter[] delimiters =                      {                          RavenCli.Delimiter.NotFound'                          RavenCli.Delimiter.ReadLine'                          RavenCli.Delimiter.ReadKey'                          RavenCli.Delimiter.Clear'                          RavenCli.Delimiter.Logout'                          RavenCli.Delimiter.Shutdown'                          RavenCli.Delimiter.RestartServer'                          RavenCli.Delimiter.ContinuePrinting                      };                        string restOfString = null;                      while (true)                      {                          sb.Clear();                          bool skipOnceRead = false;                          if (restOfString != null)                          {                              sb.Append(restOfString);                              restOfString = null;                              skipOnceRead = true; // to avoid situation where another delimiter passed in previous Read' and next Read might blocked forever                          }                            var delimiter = RavenCli.Delimiter.NotFound;                          // ReSharper disable once LoopVariableIsNeverChangedInsideLoop                          while (delimiter == RavenCli.Delimiter.NotFound)                          {                              if (skipOnceRead == false)                              {                                  var v = reader.Read(buffer' 0' 8192);                                  if (v == 0)                                      continue;                                    sb.Append(new string(buffer' 0' v));                              }                              else                              {                                  skipOnceRead = false;                              }                                var sbString = sb.ToString();                              var firstDelimiterPos = sbString.IndexOf(RavenCli.DelimiterKeyWord' StringComparison.Ordinal);                              if (firstDelimiterPos == -1)                                  continue;                              var delimiterString = sbString.Substring(firstDelimiterPos);                                RavenCli.Delimiter firstDelimiter = RavenCli.Delimiter.NotFound;                              int firstIndex = 0;                              var lowestPos = 8192;                              foreach (var del in delimiters)                              {                                  var index = delimiterString.IndexOf(RavenCli.GetDelimiterString(del)' StringComparison.Ordinal);                                  if (index == -1)                                      continue;                                  if (index < lowestPos)                                  {                                      lowestPos = index;                                      firstDelimiter = del;                                      firstIndex = index;                                  }                              }                              if (firstDelimiter == RavenCli.Delimiter.NotFound)                                  continue;                                var posAgterFirstDelimiter = firstIndex + RavenCli.GetDelimiterString(firstDelimiter).Length;                              restOfString = delimiterString.Substring(posAgterFirstDelimiter);                                delimiter = firstDelimiter;                              break;                          }                            var str = sb.ToString();                          Console.Write(str.Substring(0' str.IndexOf(RavenCli.DelimiterKeyWord' StringComparison.Ordinal)));                            if (delimiter == RavenCli.Delimiter.ContinuePrinting)                          {                              continue;                          }                            switch (delimiter)                          {                              case RavenCli.Delimiter.ReadLine:                                  writer.WriteLine(Console.ReadLine());                                  break;                              case RavenCli.Delimiter.ReadKey:                                  writer.Write(Console.ReadKey().KeyChar);                                  break;                              case RavenCli.Delimiter.Clear:                                  Console.Clear();                                  break;                              case RavenCli.Delimiter.Logout:                              case RavenCli.Delimiter.Shutdown:                                  Console.WriteLine();                                  Environment.Exit(0);                                  break;                              case RavenCli.Delimiter.RestartServer:                                  Console.WriteLine();                                  for (int i = 10; i >= 0; i--)                                  {                                      Console.Write($"\rTrying to reconnect in {i} seconds ...  ");                                      Thread.Sleep(1000);                                  }                                  Console.WriteLine();                                  reconnect = true;                                  break;                          }                          writer.Flush();                          if (reconnect)                              break;                      }                  }                  catch (Exception e)                  {                      Console.WriteLine(e);                      throw;                  }              }
Magic Number,rvn,CommandLineApp,C:\repos\ravendb_ravendb\tools\rvn\CommandLineApp.cs,ConfigureOfflineOperationCommand,The following statement contains a magic number: _app.Command("offline-operation"' cmd =>              {                  const string systemDirArgText = "[RavenDB system directory]";                  const string systemDirArgDescText = "RavenDB system directory";                    cmd.Description = "Performs an offline operation on the RavenDB Server.";                  cmd.HelpOption(HelpOptionString);                    cmd.Command("init-keys"' subcmd =>                  {                      subcmd.ExtendedHelpText = subcmd.Description = "Initializes keys";                      subcmd.HelpOption(HelpOptionString);                      subcmd.OnExecute(() =>                      {                          var result = OfflineOperations.InitKeys();                          Console.WriteLine(result);                          return 0;                      });                  });                    cmd.Command("get-key"' subcmd =>                  {                      subcmd.Description = "Exports unprotected server store encryption key";                      subcmd.ExtendedHelpText = Environment.NewLine + "Exports unprotected server store encryption key. " +                                                "This key will allow decryption of the server store and must be secured. " +                                                "This is REQUIRED when restoring backups from an encrypted server store.";                      subcmd.HelpOption(HelpOptionString);                        subcmd.Argument(systemDirArgText' systemDirArgDescText' systemDir =>                      {                          subcmd.OnExecute(() =>                          {                              return PerformOfflineOperation(                                  () => OfflineOperations.GetKey(systemDir.Value)' systemDir' subcmd);                          });                      });                  });                    cmd.Command("put-key"' subcmd =>                  {                      subcmd.Description = @"Restores and protects the key for current OS user";                      subcmd.HelpOption(HelpOptionString);                      subcmd.Argument(systemDirArgText' systemDirArgDescText' systemDir =>                      {                          subcmd.OnExecute(() =>                          {                              return PerformOfflineOperation(                                  () => OfflineOperations.PutKey(systemDir.Value)' systemDir' subcmd);                          });                      });                        subcmd.ExtendedHelpText = Environment.NewLine + "Restores the encryption key on the new machine and protects it for the current OS user. " +                                                "This is typically used as part of the restore process of an encrypted server store on a new machine";                  });                    cmd.Command("trust"' subcmd =>                  {                      subcmd.Description = string.Empty;                      subcmd.HelpOption(HelpOptionString);                        var keyArg = subcmd.Argument("Key"' "The key");                      var tagArg = subcmd.Argument("Tag"' "The tag");                        subcmd.OnExecute(() =>                      {                          if (subcmd.Arguments.Count == 2)                          {                              OfflineOperations.Trust(keyArg.Value' tagArg.Value);                          }                          else                          {                              return ExitWithError("Key and tag arguments are mandatory."' subcmd);                          }                            return 0;                      });                  });                    cmd.Command("encrypt"' subcmd =>                  {                      subcmd.Description = "Encrypts RavenDB files and saves the key to the same directory";                      subcmd.ExtendedHelpText = Environment.NewLine + "Encrypts RavenDB files and saves the key to a given directory. " +                                                "This key file (secret.key.encrypted) is protected for the current OS user. " +                                                "Once encrypted' The server will only work for the current OS user. " +                                                "It is recommended that you do that as part of the initial setup of the server' before it is running. " +                                                "Encrypted server store can only talk to other encrypted server stores' and only over SSL." +                                                Environment.NewLine + EncryptionCommandsNote;                                            subcmd.HelpOption(HelpOptionString);                      subcmd.Argument(systemDirArgText' systemDirArgDescText' systemDir =>                      {                          subcmd.OnExecute(() =>                          {                              return PerformOfflineOperation(                                  () => OfflineOperations.Encrypt(systemDir.Value)' systemDir' subcmd);                          });                      });                  });                    cmd.Command("decrypt"' subcmd =>                  {                      subcmd.ExtendedHelpText = Environment.NewLine + "Decrypts RavenDB files in a given directory using the key inserted earlier using the put-key command." +                                                 Environment.NewLine + EncryptionCommandsNote;                      subcmd.HelpOption(HelpOptionString);                      subcmd.Description = "Decrypts RavenDB files";                      subcmd.Argument(systemDirArgText' systemDirArgDescText' systemDir =>                      {                          subcmd.OnExecute(() =>                          {                              return PerformOfflineOperation(                                  () => OfflineOperations.Decrypt(systemDir.Value)' systemDir' subcmd);                          });                      });                  });                    cmd.OnExecute(() =>                  {                      cmd.ShowHelp();                      return 1;                  });              });
Magic Number,rvn,LogStream,C:\repos\ravendb_ravendb\tools\rvn\LogStream.cs,Connect,The following statement contains a magic number: try              {                  var pipeName = Pipes.GetPipeName(Pipes.LogStreamPipePrefix' _pid);                  _client = new NamedPipeClientStream(pipeName);                  WorkaroundSetPipePathForPosix(_client' pipeName);                  try                  {                      _client.Connect(3000);                  }                  catch (Exception ex)                  {                      Console.ForegroundColor = ConsoleColor.Red;                      Console.WriteLine(Environment.NewLine + "Couldn't connect to " + pipeName);                      Console.ResetColor();                      Console.WriteLine();                      Console.WriteLine(ex);                      Environment.Exit(2);                  }                    Console.WriteLine("Connected to RavenDB server. Tailing logs...");                    var reader = new StreamReader(_client);                  var buffer = new char[8192];                  var stdOut = Console.Out;                  while (true)                  {                      var readCount = await reader.ReadAsync(buffer' 0' buffer.Length);                      if (readCount > 0)                      {                          await stdOut.WriteAsync(buffer' 0' readCount);                      }                  }              }              catch (ObjectDisposedException)              {                  // closing              }              catch (Exception e)              {                  Console.WriteLine(e);                  throw;              }
Magic Number,rvn,LogStream,C:\repos\ravendb_ravendb\tools\rvn\LogStream.cs,Connect,The following statement contains a magic number: try              {                  var pipeName = Pipes.GetPipeName(Pipes.LogStreamPipePrefix' _pid);                  _client = new NamedPipeClientStream(pipeName);                  WorkaroundSetPipePathForPosix(_client' pipeName);                  try                  {                      _client.Connect(3000);                  }                  catch (Exception ex)                  {                      Console.ForegroundColor = ConsoleColor.Red;                      Console.WriteLine(Environment.NewLine + "Couldn't connect to " + pipeName);                      Console.ResetColor();                      Console.WriteLine();                      Console.WriteLine(ex);                      Environment.Exit(2);                  }                    Console.WriteLine("Connected to RavenDB server. Tailing logs...");                    var reader = new StreamReader(_client);                  var buffer = new char[8192];                  var stdOut = Console.Out;                  while (true)                  {                      var readCount = await reader.ReadAsync(buffer' 0' buffer.Length);                      if (readCount > 0)                      {                          await stdOut.WriteAsync(buffer' 0' readCount);                      }                  }              }              catch (ObjectDisposedException)              {                  // closing              }              catch (Exception e)              {                  Console.WriteLine(e);                  throw;              }
Magic Number,rvn,LogStream,C:\repos\ravendb_ravendb\tools\rvn\LogStream.cs,Connect,The following statement contains a magic number: try              {                  var pipeName = Pipes.GetPipeName(Pipes.LogStreamPipePrefix' _pid);                  _client = new NamedPipeClientStream(pipeName);                  WorkaroundSetPipePathForPosix(_client' pipeName);                  try                  {                      _client.Connect(3000);                  }                  catch (Exception ex)                  {                      Console.ForegroundColor = ConsoleColor.Red;                      Console.WriteLine(Environment.NewLine + "Couldn't connect to " + pipeName);                      Console.ResetColor();                      Console.WriteLine();                      Console.WriteLine(ex);                      Environment.Exit(2);                  }                    Console.WriteLine("Connected to RavenDB server. Tailing logs...");                    var reader = new StreamReader(_client);                  var buffer = new char[8192];                  var stdOut = Console.Out;                  while (true)                  {                      var readCount = await reader.ReadAsync(buffer' 0' buffer.Length);                      if (readCount > 0)                      {                          await stdOut.WriteAsync(buffer' 0' readCount);                      }                  }              }              catch (ObjectDisposedException)              {                  // closing              }              catch (Exception e)              {                  Console.WriteLine(e);                  throw;              }
Magic Number,rvn,OfflineOperations,C:\repos\ravendb_ravendb\tools\rvn\OfflineOperations.cs,GetKey,The following statement contains a magic number: var entropy = Sodium.GenerateRandomBuffer(256);
Magic Number,rvn,OfflineOperations,C:\repos\ravendb_ravendb\tools\rvn\OfflineOperations.cs,PutKey,The following statement contains a magic number: var entropy = Sodium.GenerateRandomBuffer(256);
Magic Number,rvn,OfflineOperations,C:\repos\ravendb_ravendb\tools\rvn\OfflineOperations.cs,Encrypt,The following statement contains a magic number: var entropy = Sodium.GenerateRandomBuffer(256);
Magic Number,rvn,OfflineOperations,C:\repos\ravendb_ravendb\tools\rvn\OfflineOperations.cs,Decrypt,The following statement contains a magic number: var secret = new byte[bytes.Length - 32];
Magic Number,rvn,OfflineOperations,C:\repos\ravendb_ravendb\tools\rvn\OfflineOperations.cs,Decrypt,The following statement contains a magic number: var entropy = new byte[32];
Magic Number,rvn,OfflineOperations,C:\repos\ravendb_ravendb\tools\rvn\OfflineOperations.cs,Decrypt,The following statement contains a magic number: Array.Copy(bytes' 0' secret' 0' bytes.Length - 32);
Magic Number,rvn,OfflineOperations,C:\repos\ravendb_ravendb\tools\rvn\OfflineOperations.cs,Decrypt,The following statement contains a magic number: Array.Copy(bytes' bytes.Length - 32' entropy' 0' 32);
Magic Number,rvn,OfflineOperations,C:\repos\ravendb_ravendb\tools\rvn\OfflineOperations.cs,Decrypt,The following statement contains a magic number: Array.Copy(bytes' bytes.Length - 32' entropy' 0' 32);
Magic Number,rvn,OfflineOperations,C:\repos\ravendb_ravendb\tools\rvn\OfflineOperations.cs,RecoverServerStoreKey,The following statement contains a magic number: var secret = new byte[buffer.Length - 32];
Magic Number,rvn,OfflineOperations,C:\repos\ravendb_ravendb\tools\rvn\OfflineOperations.cs,RecoverServerStoreKey,The following statement contains a magic number: var entropy = new byte[32];
Magic Number,rvn,OfflineOperations,C:\repos\ravendb_ravendb\tools\rvn\OfflineOperations.cs,RecoverServerStoreKey,The following statement contains a magic number: Array.Copy(buffer' 0' secret' 0' buffer.Length - 32);
Magic Number,rvn,OfflineOperations,C:\repos\ravendb_ravendb\tools\rvn\OfflineOperations.cs,RecoverServerStoreKey,The following statement contains a magic number: Array.Copy(buffer' buffer.Length - 32' entropy' 0' 32);
Magic Number,rvn,OfflineOperations,C:\repos\ravendb_ravendb\tools\rvn\OfflineOperations.cs,RecoverServerStoreKey,The following statement contains a magic number: Array.Copy(buffer' buffer.Length - 32' entropy' 0' 32);
Magic Number,rvn,WindowsServiceController,C:\repos\ravendb_ravendb\tools\rvn\WindowsService.cs,InstallInternal,The following statement contains a magic number: try                  {                      new Win32ServiceManager().CreateService(new ServiceDefinition(NormalizeServiceName(serviceName)' serviceCommand)                      {                          DisplayName = serviceName'                          Description = serviceDesc'                          Credentials = Win32ServiceCredentials.LocalService'                          AutoStart = true'                          DelayedAutoStart = false'                          ErrorSeverity = ErrorSeverity.Normal                      });                        Console.WriteLine($"Service {ServiceFullName} has been registered.");                  }                  catch (Win32Exception e) when (e.NativeErrorCode == ErrorServiceExists)                  {                      Console.WriteLine($"Service {ServiceFullName} already exists. Reinstalling...");                      Reinstall(serviceController' ravenServerDir' serviceArgs);                  }                  catch (Win32Exception e) when (e.NativeErrorCode == ErrorServiceMarkedForDeletion)                  {                      if (counter < 10)                      {                          Console.WriteLine($"Service {ServiceFullName} has been marked for deletion. Performing {counter + 1} installation attempt.");                            Thread.Sleep(1000);                          counter++;                            InstallInternal(serviceController' ravenServerDir' serviceArgs' counter);                      }                  }                  catch (Win32Exception e) when (e.NativeErrorCode == ErrorAccessIsDenied)                  {                      Console.WriteLine($"Cannot register service {ServiceFullName} due to insufficient privileges. Please use Administrator account to install the service.");                  }                  catch (Win32Exception e)                  {                      Console.WriteLine($"Cannot register service {ServiceFullName}: { FormatWin32ErrorMessage(e) }");                  }
Magic Number,rvn,WindowsServiceController,C:\repos\ravendb_ravendb\tools\rvn\WindowsService.cs,InstallInternal,The following statement contains a magic number: try                  {                      new Win32ServiceManager().CreateService(new ServiceDefinition(NormalizeServiceName(serviceName)' serviceCommand)                      {                          DisplayName = serviceName'                          Description = serviceDesc'                          Credentials = Win32ServiceCredentials.LocalService'                          AutoStart = true'                          DelayedAutoStart = false'                          ErrorSeverity = ErrorSeverity.Normal                      });                        Console.WriteLine($"Service {ServiceFullName} has been registered.");                  }                  catch (Win32Exception e) when (e.NativeErrorCode == ErrorServiceExists)                  {                      Console.WriteLine($"Service {ServiceFullName} already exists. Reinstalling...");                      Reinstall(serviceController' ravenServerDir' serviceArgs);                  }                  catch (Win32Exception e) when (e.NativeErrorCode == ErrorServiceMarkedForDeletion)                  {                      if (counter < 10)                      {                          Console.WriteLine($"Service {ServiceFullName} has been marked for deletion. Performing {counter + 1} installation attempt.");                            Thread.Sleep(1000);                          counter++;                            InstallInternal(serviceController' ravenServerDir' serviceArgs' counter);                      }                  }                  catch (Win32Exception e) when (e.NativeErrorCode == ErrorAccessIsDenied)                  {                      Console.WriteLine($"Cannot register service {ServiceFullName} due to insufficient privileges. Please use Administrator account to install the service.");                  }                  catch (Win32Exception e)                  {                      Console.WriteLine($"Cannot register service {ServiceFullName}: { FormatWin32ErrorMessage(e) }");                  }
Magic Number,rvn,WindowsServiceController,C:\repos\ravendb_ravendb\tools\rvn\WindowsService.cs,StopInternal,The following statement contains a magic number: serviceController.WaitForStatus(                      ServiceControllerStatus.Stopped' TimeSpan.FromSeconds(60));
Magic Number,rvn,WindowsServiceController,C:\repos\ravendb_ravendb\tools\rvn\WindowsService.cs,StartInternal,The following statement contains a magic number: serviceController.WaitForStatus(ServiceControllerStatus.Running' TimeSpan.FromSeconds(60));
Magic Number,rvn.Utils,ServerProcessUtil,C:\repos\ravendb_ravendb\tools\rvn\Utils\ServerProcessUtil.cs,GetRavenServerPid,The following statement contains a magic number: Environment.Exit(2);
Missing Default,rvn,AdminChannel,C:\repos\ravendb_ravendb\tools\rvn\AdminChannel.cs,Connect,The following switch statement is missing a default case: switch (delimiter)                          {                              case RavenCli.Delimiter.ReadLine:                                  writer.WriteLine(Console.ReadLine());                                  break;                              case RavenCli.Delimiter.ReadKey:                                  writer.Write(Console.ReadKey().KeyChar);                                  break;                              case RavenCli.Delimiter.Clear:                                  Console.Clear();                                  break;                              case RavenCli.Delimiter.Logout:                              case RavenCli.Delimiter.Shutdown:                                  Console.WriteLine();                                  Environment.Exit(0);                                  break;                              case RavenCli.Delimiter.RestartServer:                                  Console.WriteLine();                                  for (int i = 10; i >= 0; i--)                                  {                                      Console.Write($"\rTrying to reconnect in {i} seconds ...  ");                                      Thread.Sleep(1000);                                  }                                  Console.WriteLine();                                  reconnect = true;                                  break;                          }
