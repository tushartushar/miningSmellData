Implementation smell,Namespace,Class,File,Method,Description
Long Method,rvn,AdminChannel,C:\research\architectureSmells\repos\ravendb_ravendb\tools\rvn\AdminChannel.cs,Connect,The method has 140 lines of code.
Long Method,rvn,CommandLineApp,C:\research\architectureSmells\repos\ravendb_ravendb\tools\rvn\CommandLineApp.cs,ConfigureOfflineOperationCommand,The method has 110 lines of code.
Complex Method,rvn,AdminChannel,C:\research\architectureSmells\repos\ravendb_ravendb\tools\rvn\AdminChannel.cs,Connect,Cyclomatic complexity of the method is 20
Long Parameter List,rvn,WindowsService,C:\research\architectureSmells\repos\ravendb_ravendb\tools\rvn\WindowsService.cs,Register,The method has 5 parameters. Parameters: serviceName' username' password' ravenServerDir' args
Long Statement,rvn,AdminChannel,C:\research\architectureSmells\repos\ravendb_ravendb\tools\rvn\AdminChannel.cs,Connect,The length of the statement  "                            skipOnceRead = true; // to avoid situation where another delimiter passed in previous Read' and next Read might blocked forever " is 127.
Long Statement,rvn,CommandLineApp,C:\research\architectureSmells\repos\ravendb_ravendb\tools\rvn\CommandLineApp.cs,Run,The length of the statement  "                Description = "This utility lets you manage RavenDB offline operations' such as setting encryption mode for the server store. " + " is 129.
Long Statement,rvn,CommandLineApp,C:\research\architectureSmells\repos\ravendb_ravendb\tools\rvn\CommandLineApp.cs,Run,The length of the statement  "                              "The server store which may contain sensitive information is not encrypted by default (even if it contains encrypted databases). " + " is 132.
Long Statement,rvn,CommandLineApp,C:\research\architectureSmells\repos\ravendb_ravendb\tools\rvn\CommandLineApp.cs,ConfigureAdminChannelCommand,The length of the statement  "                cmd.ExtendedHelpText = cmd.Description = "Open RavenDB CLI session on local machine (using piped name connection). If PID omitted - will try auto pid discovery."; " is 162.
Long Statement,rvn,CommandLineApp,C:\research\architectureSmells\repos\ravendb_ravendb\tools\rvn\CommandLineApp.cs,ConfigureOfflineOperationCommand,The length of the statement  "                    subcmd.ExtendedHelpText = Environment.NewLine + "Restores the encryption key on a new machine and protects it for the current OS user or the current Master Key (whichever method was chosen to protect secrets). " + " is 213.
Long Statement,rvn,CommandLineApp,C:\research\architectureSmells\repos\ravendb_ravendb\tools\rvn\CommandLineApp.cs,ConfigureOfflineOperationCommand,The length of the statement  "                                              "Once encrypted' the server will only work for the current OS user or the current Master Key (whichever method was chosen to protect secrets)" + " is 144.
Long Statement,rvn,CommandLineApp,C:\research\architectureSmells\repos\ravendb_ravendb\tools\rvn\CommandLineApp.cs,ConfigureOfflineOperationCommand,The length of the statement  "                                              "It is recommended to do this at the very start' as part of the initial cluster setup' right after the server was launched for the first time." + " is 145.
Long Statement,rvn,CommandLineApp,C:\research\architectureSmells\repos\ravendb_ravendb\tools\rvn\CommandLineApp.cs,ConfigureOfflineOperationCommand,The length of the statement  "                    subcmd.ExtendedHelpText = Environment.NewLine + "Decrypts RavenDB files in a given directory using the key inserted earlier using the put-key command." + " is 153.
Long Statement,rvn,CommandLineApp,C:\research\architectureSmells\repos\ravendb_ravendb\tools\rvn\CommandLineApp.cs,ConfigureServiceUserPasswordOption,The length of the statement  "            return cmd.Option("--service-user-password"' "RavenDB Server Windows Service user password"' CommandOptionType.SingleValue); " is 124.
Long Statement,rvn,OfflineOperations,C:\research\architectureSmells\repos\ravendb_ravendb\tools\rvn\OfflineOperations.cs,RecoverServerStoreKey,The length of the statement  "                throw new IOException("The key file " + keyPath + " doesn't exist. Either the Server Store is not encrypted or you provided a wrong path to the System folder"); " is 160.
Long Statement,rvn,WindowsServiceController,C:\research\architectureSmells\repos\ravendb_ravendb\tools\rvn\WindowsService.cs,InstallInternal,The length of the statement  "                        Console.WriteLine($"Service {ServiceFullName} has been marked for deletion. Performing {counter + 1} installation attempt."); " is 125.
Long Statement,rvn,WindowsServiceController,C:\research\architectureSmells\repos\ravendb_ravendb\tools\rvn\WindowsService.cs,InstallInternal,The length of the statement  "                    Console.WriteLine($"Cannot register service {ServiceFullName} due to insufficient privileges. Please use Administrator account to install the service."); " is 153.
Long Statement,rvn,WindowsServiceController,C:\research\architectureSmells\repos\ravendb_ravendb\tools\rvn\WindowsService.cs,UninstallInternal,The length of the statement  "                if ((serviceController.Status == ServiceControllerStatus.Stopped || serviceController.Status == ServiceControllerStatus.StopPending) == false) " is 142.
Long Statement,rvn,WindowsServiceController,C:\research\architectureSmells\repos\ravendb_ravendb\tools\rvn\WindowsService.cs,UninstallInternal,The length of the statement  "                    Console.WriteLine($"Cannot unregister service {ServiceFullName} due to insufficient privileges. Please use Administrator account to uninstall the service."); " is 157.
Long Statement,rvn,WindowsServiceController,C:\research\architectureSmells\repos\ravendb_ravendb\tools\rvn\WindowsService.cs,StopInternal,The length of the statement  "                if (!(serviceController.Status == ServiceControllerStatus.Stopped || serviceController.Status == ServiceControllerStatus.StopPending)) " is 134.
Long Statement,rvn,WindowsServiceController,C:\research\architectureSmells\repos\ravendb_ravendb\tools\rvn\WindowsService.cs,StartInternal,The length of the statement  "                if (!(serviceController.Status == ServiceControllerStatus.Running | serviceController.Status == ServiceControllerStatus.StartPending)) " is 134.
Long Statement,rvn.Utils,ServerProcessUtil,C:\research\architectureSmells\repos\ravendb_ravendb\tools\rvn\Utils\ServerProcessUtil.cs,GetRavenServerPid,The length of the statement  "                    Console.WriteLine("Will try to connect to discovered Raven.Server process : " + availableRavenProcesses.First().Id + "..." + Environment.NewLine); " is 146.
Empty Catch Block,rvn,LogStream,C:\research\architectureSmells\repos\ravendb_ravendb\tools\rvn\LogStream.cs,Connect,The method has an empty catch block.
Magic Number,rvn,AdminChannel,C:\research\architectureSmells\repos\ravendb_ravendb\tools\rvn\AdminChannel.cs,Connect,The following statement contains a magic number: client.Connect(3000);
Magic Number,rvn,AdminChannel,C:\research\architectureSmells\repos\ravendb_ravendb\tools\rvn\AdminChannel.cs,Connect,The following statement contains a magic number: var buffer = new char[16 * 1024];
Magic Number,rvn,AdminChannel,C:\research\architectureSmells\repos\ravendb_ravendb\tools\rvn\AdminChannel.cs,Connect,The following statement contains a magic number: var buffer = new char[16 * 1024];
Magic Number,rvn,AdminChannel,C:\research\architectureSmells\repos\ravendb_ravendb\tools\rvn\AdminChannel.cs,Connect,The following statement contains a magic number: var v = reader.Read(buffer' 0' 8192);
Magic Number,rvn,AdminChannel,C:\research\architectureSmells\repos\ravendb_ravendb\tools\rvn\AdminChannel.cs,Connect,The following statement contains a magic number: var lowestPos = 8192;
Magic Number,rvn,AdminChannel,C:\research\architectureSmells\repos\ravendb_ravendb\tools\rvn\AdminChannel.cs,Connect,The following statement contains a magic number: switch (delimiter)                          {                              case RavenCli.Delimiter.ReadLine:                                  writer.WriteLine(Console.ReadLine());                                  break;                              case RavenCli.Delimiter.ReadKey:                                  writer.Write(Console.ReadKey().KeyChar);                                  break;                              case RavenCli.Delimiter.Clear:                                  Console.Clear();                                  break;                              case RavenCli.Delimiter.Logout:                              case RavenCli.Delimiter.Shutdown:                                  Console.WriteLine();                                  Environment.Exit(0);                                  break;                              case RavenCli.Delimiter.RestartServer:                                  Console.WriteLine();                                  for (int i = 10; i >= 0; i--)                                  {                                      Console.Write($"\rTrying to reconnect in {i} seconds ...  ");                                      Thread.Sleep(1000);                                  }                                  Console.WriteLine();                                  reconnect = true;                                  break;                          }
Magic Number,rvn,AdminChannel,C:\research\architectureSmells\repos\ravendb_ravendb\tools\rvn\AdminChannel.cs,Connect,The following statement contains a magic number: switch (delimiter)                          {                              case RavenCli.Delimiter.ReadLine:                                  writer.WriteLine(Console.ReadLine());                                  break;                              case RavenCli.Delimiter.ReadKey:                                  writer.Write(Console.ReadKey().KeyChar);                                  break;                              case RavenCli.Delimiter.Clear:                                  Console.Clear();                                  break;                              case RavenCli.Delimiter.Logout:                              case RavenCli.Delimiter.Shutdown:                                  Console.WriteLine();                                  Environment.Exit(0);                                  break;                              case RavenCli.Delimiter.RestartServer:                                  Console.WriteLine();                                  for (int i = 10; i >= 0; i--)                                  {                                      Console.Write($"\rTrying to reconnect in {i} seconds ...  ");                                      Thread.Sleep(1000);                                  }                                  Console.WriteLine();                                  reconnect = true;                                  break;                          }
Magic Number,rvn,CommandLineApp,C:\research\architectureSmells\repos\ravendb_ravendb\tools\rvn\CommandLineApp.cs,ConfigureOfflineOperationCommand,The following statement contains a magic number: _app.Command("offline-operation"' cmd =>              {                  const string systemDirArgText = "[RavenDB system directory]";                  const string systemDirArgDescText = "RavenDB system directory";                    cmd.Description = "Performs an offline operation on the RavenDB Server.";                  cmd.HelpOption(HelpOptionString);                    cmd.Command("init-keys"' subcmd =>                  {                      subcmd.ExtendedHelpText = subcmd.Description = "Initializes keys";                      subcmd.HelpOption(HelpOptionString);                      subcmd.OnExecute(() =>                      {                          var result = OfflineOperations.InitKeys();                          Console.WriteLine(result);                          return 0;                      });                  });                    cmd.Command("get-key"' subcmd =>                  {                      subcmd.Description = "Exports unprotected server store encryption key";                      subcmd.ExtendedHelpText = Environment.NewLine + "Exports the unprotected server store encryption key. " +                                                "This key will allow decryption of the server store and must be kept safely. " +                                                "This is REQUIRED when restoring backups from an encrypted server store.";                      subcmd.HelpOption(HelpOptionString);                        subcmd.Argument(systemDirArgText' systemDirArgDescText' systemDir =>                      {                          subcmd.OnExecute(() =>                          {                              return PerformOfflineOperation(                                  () => OfflineOperations.GetKey(systemDir.Value)' systemDir' subcmd);                          });                      });                  });                    cmd.Command("put-key"' subcmd =>                  {                      subcmd.Description = @"Restores and protects the key for current OS user";                      subcmd.HelpOption(HelpOptionString);                      subcmd.Argument(systemDirArgText' systemDirArgDescText' args =>                      {                          subcmd.OnExecute(() =>                          {                              if (args.Values.Count != 2)                                  return ExitWithError("Usage: ./rvn offline-operation put-key <path-to-system-dir> <key>"' cmd);                                return PerformOfflineOperation(                                  () => OfflineOperations.PutKey(args.Values[0]' args.Values[1])' args' subcmd);                          });                      }' multipleValues: true);                        subcmd.ExtendedHelpText = Environment.NewLine + "Restores the encryption key on a new machine and protects it for the current OS user or the current Master Key (whichever method was chosen to protect secrets). " +                                                "This is typically used as part of the restore process of an encrypted server store on a new machine";                  });                    cmd.Command("trust"' subcmd =>                  {                      subcmd.Description = string.Empty;                      subcmd.HelpOption(HelpOptionString);                        var keyArg = subcmd.Argument("Key"' "The key");                      var tagArg = subcmd.Argument("Tag"' "The tag");                        subcmd.OnExecute(() =>                      {                          if (subcmd.Arguments.Count == 2)                          {                              OfflineOperations.Trust(keyArg.Value' tagArg.Value);                          }                          else                          {                              return ExitWithError("Key and tag arguments are mandatory."' subcmd);                          }                            return 0;                      });                  });                    cmd.Command("encrypt"' subcmd =>                  {                      subcmd.Description = "Encrypts RavenDB files and saves the key to the same directory";                      subcmd.ExtendedHelpText = Environment.NewLine + "Encrypts RavenDB files and saves the key to a given directory. " +                                                "Once encrypted' the server will only work for the current OS user or the current Master Key (whichever method was chosen to protect secrets)" +                                                "It is recommended to do this at the very start' as part of the initial cluster setup' right after the server was launched for the first time." +                                                "Encrypted server stores can only talk to other encrypted server stores' and only over SSL." +                                                Environment.NewLine + EncryptionCommandsNote;                        subcmd.HelpOption(HelpOptionString);                      subcmd.Argument(systemDirArgText' systemDirArgDescText' systemDir =>                      {                          subcmd.OnExecute(() =>                          {                              return PerformOfflineOperation(                                  () => OfflineOperations.Encrypt(systemDir.Value)' systemDir' subcmd);                          });                      });                  });                    cmd.Command("decrypt"' subcmd =>                  {                      subcmd.ExtendedHelpText = Environment.NewLine + "Decrypts RavenDB files in a given directory using the key inserted earlier using the put-key command." +                                                Environment.NewLine + EncryptionCommandsNote;                      subcmd.HelpOption(HelpOptionString);                      subcmd.Description = "Decrypts RavenDB files";                      subcmd.Argument(systemDirArgText' systemDirArgDescText' systemDir =>                      {                          subcmd.OnExecute(() =>                          {                              return PerformOfflineOperation(                                  () => OfflineOperations.Decrypt(systemDir.Value)' systemDir' subcmd);                          });                      });                  });                    cmd.OnExecute(() =>                  {                      cmd.ShowHelp();                      return 1;                  });              });
Magic Number,rvn,CommandLineApp,C:\research\architectureSmells\repos\ravendb_ravendb\tools\rvn\CommandLineApp.cs,ConfigureOfflineOperationCommand,The following statement contains a magic number: _app.Command("offline-operation"' cmd =>              {                  const string systemDirArgText = "[RavenDB system directory]";                  const string systemDirArgDescText = "RavenDB system directory";                    cmd.Description = "Performs an offline operation on the RavenDB Server.";                  cmd.HelpOption(HelpOptionString);                    cmd.Command("init-keys"' subcmd =>                  {                      subcmd.ExtendedHelpText = subcmd.Description = "Initializes keys";                      subcmd.HelpOption(HelpOptionString);                      subcmd.OnExecute(() =>                      {                          var result = OfflineOperations.InitKeys();                          Console.WriteLine(result);                          return 0;                      });                  });                    cmd.Command("get-key"' subcmd =>                  {                      subcmd.Description = "Exports unprotected server store encryption key";                      subcmd.ExtendedHelpText = Environment.NewLine + "Exports the unprotected server store encryption key. " +                                                "This key will allow decryption of the server store and must be kept safely. " +                                                "This is REQUIRED when restoring backups from an encrypted server store.";                      subcmd.HelpOption(HelpOptionString);                        subcmd.Argument(systemDirArgText' systemDirArgDescText' systemDir =>                      {                          subcmd.OnExecute(() =>                          {                              return PerformOfflineOperation(                                  () => OfflineOperations.GetKey(systemDir.Value)' systemDir' subcmd);                          });                      });                  });                    cmd.Command("put-key"' subcmd =>                  {                      subcmd.Description = @"Restores and protects the key for current OS user";                      subcmd.HelpOption(HelpOptionString);                      subcmd.Argument(systemDirArgText' systemDirArgDescText' args =>                      {                          subcmd.OnExecute(() =>                          {                              if (args.Values.Count != 2)                                  return ExitWithError("Usage: ./rvn offline-operation put-key <path-to-system-dir> <key>"' cmd);                                return PerformOfflineOperation(                                  () => OfflineOperations.PutKey(args.Values[0]' args.Values[1])' args' subcmd);                          });                      }' multipleValues: true);                        subcmd.ExtendedHelpText = Environment.NewLine + "Restores the encryption key on a new machine and protects it for the current OS user or the current Master Key (whichever method was chosen to protect secrets). " +                                                "This is typically used as part of the restore process of an encrypted server store on a new machine";                  });                    cmd.Command("trust"' subcmd =>                  {                      subcmd.Description = string.Empty;                      subcmd.HelpOption(HelpOptionString);                        var keyArg = subcmd.Argument("Key"' "The key");                      var tagArg = subcmd.Argument("Tag"' "The tag");                        subcmd.OnExecute(() =>                      {                          if (subcmd.Arguments.Count == 2)                          {                              OfflineOperations.Trust(keyArg.Value' tagArg.Value);                          }                          else                          {                              return ExitWithError("Key and tag arguments are mandatory."' subcmd);                          }                            return 0;                      });                  });                    cmd.Command("encrypt"' subcmd =>                  {                      subcmd.Description = "Encrypts RavenDB files and saves the key to the same directory";                      subcmd.ExtendedHelpText = Environment.NewLine + "Encrypts RavenDB files and saves the key to a given directory. " +                                                "Once encrypted' the server will only work for the current OS user or the current Master Key (whichever method was chosen to protect secrets)" +                                                "It is recommended to do this at the very start' as part of the initial cluster setup' right after the server was launched for the first time." +                                                "Encrypted server stores can only talk to other encrypted server stores' and only over SSL." +                                                Environment.NewLine + EncryptionCommandsNote;                        subcmd.HelpOption(HelpOptionString);                      subcmd.Argument(systemDirArgText' systemDirArgDescText' systemDir =>                      {                          subcmd.OnExecute(() =>                          {                              return PerformOfflineOperation(                                  () => OfflineOperations.Encrypt(systemDir.Value)' systemDir' subcmd);                          });                      });                  });                    cmd.Command("decrypt"' subcmd =>                  {                      subcmd.ExtendedHelpText = Environment.NewLine + "Decrypts RavenDB files in a given directory using the key inserted earlier using the put-key command." +                                                Environment.NewLine + EncryptionCommandsNote;                      subcmd.HelpOption(HelpOptionString);                      subcmd.Description = "Decrypts RavenDB files";                      subcmd.Argument(systemDirArgText' systemDirArgDescText' systemDir =>                      {                          subcmd.OnExecute(() =>                          {                              return PerformOfflineOperation(                                  () => OfflineOperations.Decrypt(systemDir.Value)' systemDir' subcmd);                          });                      });                  });                    cmd.OnExecute(() =>                  {                      cmd.ShowHelp();                      return 1;                  });              });
Magic Number,rvn,LogStream,C:\research\architectureSmells\repos\ravendb_ravendb\tools\rvn\LogStream.cs,Connect,The following statement contains a magic number: _client.Connect(3000);
Magic Number,rvn,LogStream,C:\research\architectureSmells\repos\ravendb_ravendb\tools\rvn\LogStream.cs,Connect,The following statement contains a magic number: var buffer = new char[8192];
Magic Number,rvn,WindowsServiceController,C:\research\architectureSmells\repos\ravendb_ravendb\tools\rvn\WindowsService.cs,StopInternal,The following statement contains a magic number: serviceController.WaitForStatus(                      ServiceControllerStatus.Stopped' TimeSpan.FromSeconds(60));
Magic Number,rvn,WindowsServiceController,C:\research\architectureSmells\repos\ravendb_ravendb\tools\rvn\WindowsService.cs,StartInternal,The following statement contains a magic number: serviceController.WaitForStatus(ServiceControllerStatus.Running' TimeSpan.FromSeconds(60));
Magic Number,rvn.Utils,ServerProcessUtil,C:\research\architectureSmells\repos\ravendb_ravendb\tools\rvn\Utils\ServerProcessUtil.cs,GetRavenServerPid,The following statement contains a magic number: Environment.Exit(2);
Missing Default,rvn,AdminChannel,C:\research\architectureSmells\repos\ravendb_ravendb\tools\rvn\AdminChannel.cs,Connect,The following switch statement is missing a default case: switch (delimiter)                          {                              case RavenCli.Delimiter.ReadLine:                                  writer.WriteLine(Console.ReadLine());                                  break;                              case RavenCli.Delimiter.ReadKey:                                  writer.Write(Console.ReadKey().KeyChar);                                  break;                              case RavenCli.Delimiter.Clear:                                  Console.Clear();                                  break;                              case RavenCli.Delimiter.Logout:                              case RavenCli.Delimiter.Shutdown:                                  Console.WriteLine();                                  Environment.Exit(0);                                  break;                              case RavenCli.Delimiter.RestartServer:                                  Console.WriteLine();                                  for (int i = 10; i >= 0; i--)                                  {                                      Console.Write($"\rTrying to reconnect in {i} seconds ...  ");                                      Thread.Sleep(1000);                                  }                                  Console.WriteLine();                                  reconnect = true;                                  break;                          }
