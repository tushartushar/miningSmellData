Implementation smell,Namespace,Class,File,Method,Description
Long Method,Raven.Smuggler.Database,DocumentSmuggler,C:\repos\ravendb_ravendb\ToMigrate\Raven.Smuggler\Database\DocumentSmuggler.cs,SmuggleAsync,The method has 137 lines of code.
Long Method,Raven.Smuggler,Program,C:\repos\ravendb_ravendb\ToMigrate\Raven.Smuggler\Program.cs,Parse,The method has 151 lines of code.
Complex Method,NDesk.Options,Option,C:\repos\ravendb_ravendb\ToMigrate\Raven.Server\FromMono\Options.cs,ParsePrototype,Cyclomatic complexity of the method is 9
Complex Method,NDesk.Options,OptionSet,C:\repos\ravendb_ravendb\ToMigrate\Raven.Server\FromMono\Options.cs,WriteOptionDescriptions,Cyclomatic complexity of the method is 12
Complex Method,NDesk.Options,OptionSet,C:\repos\ravendb_ravendb\ToMigrate\Raven.Server\FromMono\Options.cs,WriteOptionPrototype,Cyclomatic complexity of the method is 8
Complex Method,Raven.Smuggler.FileSystem.Files,FileSmugglingDestination,C:\repos\ravendb_ravendb\ToMigrate\Raven.Smuggler\FileSystem\Files\FileSmugglingDestination.cs,InitializeAsync,Cyclomatic complexity of the method is 9
Long Parameter List,NDesk.Options,OptionSet,C:\repos\ravendb_ravendb\ToMigrate\Raven.Server\FromMono\Options.cs,GetOptionParts,The method has 5 parameters. Parameters: argument' flag' name' sep' value
Long Parameter List,NDesk.Options,ActionOption,C:\repos\ravendb_ravendb\ToMigrate\Raven.Server\FromMono\Options.cs,ActionOption,The method has 5 parameters. Parameters: prototype' category' description' count' action
Long Parameter List,Raven.Smuggler.Database,DocumentDeletionsSmuggler,C:\repos\ravendb_ravendb\ToMigrate\Raven.Smuggler\Database\DocumentDeletionsSmuggler.cs,DocumentDeletionsSmuggler,The method has 5 parameters. Parameters: options' notifications' source' destination' maxEtags
Long Parameter List,Raven.Smuggler.Database,DocumentSmuggler,C:\repos\ravendb_ravendb\ToMigrate\Raven.Smuggler\Database\DocumentSmuggler.cs,DocumentSmuggler,The method has 5 parameters. Parameters: options' notifications' source' destination' maxEtags
Long Parameter List,Raven.Smuggler.FileSystem,FileSmuggler,C:\repos\ravendb_ravendb\ToMigrate\Raven.Smuggler\FileSystem\FileSmuggler.cs,FileSmuggler,The method has 5 parameters. Parameters: source' destination' options' notifications' maxEtag
Long Identifier,Raven.Smuggler.Database.Remote,DatabaseSmugglerRemoteBase,C:\repos\ravendb_ravendb\ToMigrate\Raven.Smuggler\Database\Remote\DatabaseSmugglerRemoteBase.cs,InitializeBatchSizeAsync,The length of the parameter maxNumberOfItemsToProcessInSingleBatch is 38.
Long Identifier,Raven.Smuggler.Database.Remote,DatabaseSmugglerRemoteDestinationOptions,C:\repos\ravendb_ravendb\ToMigrate\Raven.Smuggler\Database\Remote\DatabaseSmugglerRemoteDestinationOptions.cs,,The length of the parameter DefaultDocumentSizeInChunkLimitInBytes is 38.
Long Identifier,Raven.Smuggler.Database.Remote,DatabaseSmugglerRemoteDestinationOptions,C:\repos\ravendb_ravendb\ToMigrate\Raven.Smuggler\Database\Remote\DatabaseSmugglerRemoteDestinationOptions.cs,,The length of the parameter _totalDocumentSizeInChunkLimitInBytes is 37.
Long Identifier,Raven.Smuggler.Database.Files,DatabaseSmugglerFileSource,C:\repos\ravendb_ravendb\ToMigrate\Raven.Smuggler\Database\Files\DatabaseSmugglerFileSource.cs,InitializeAsync,The length of the parameter optionsWithoutIndexesAndTransformers is 36.
Long Statement,NDesk.Options,OptionSet,C:\repos\ravendb_ravendb\ToMigrate\Raven.Server\FromMono\Options.cs,CheckCategory,The length of the statement  "            else if (p.Category.HasFlag(currentCategory) || currentCategory.HasFlag(p.Category) || p.Category == OptionCategory.None) " is 121.
Long Statement,NDesk.Options,OptionSet,C:\repos\ravendb_ravendb\ToMigrate\Raven.Server\FromMono\Options.cs,CheckCategory,The length of the statement  "                OnWarning(string.Format("Cannot use options from different category. Current category: '{0}'. Invalid option: '{1}' from category '{2}'. Using option from different category might cause unpredictable actions."' category' f + n' p.Category)); " is 241.
Long Statement,NDesk.Options,OptionSet,C:\repos\ravendb_ravendb\ToMigrate\Raven.Server\FromMono\Options.cs,WriteOptionDescriptions,The length of the statement  "                if (currentCategory.HasFlag(key) == false && currentCategory != OptionCategory.None && currentCategory != OptionCategory.Help && key != OptionCategory.Help && key != OptionCategory.None) " is 186.
Long Statement,Raven.Smuggler.Counter,DeltaSmuggler,C:\repos\ravendb_ravendb\ToMigrate\Raven.Smuggler\Counter\DeltaSmuggler.cs,SmuggleAsync,The length of the statement  "                            Notifications.ShowProgress("Failed getting deltas too much times' stopping the deltas export entirely. Message: {0}"' e.Message); " is 129.
Long Statement,Raven.Smuggler.Counter,SnapshotSmuggler,C:\repos\ravendb_ravendb\ToMigrate\Raven.Smuggler\Counter\SnapshotSmuggler.cs,SmuggleAsync,The length of the statement  "                            Notifications.ShowProgress("Failed getting snapshots too much times' stopping the snapshot export entirely. Message: {0}"' e.Message); " is 134.
Long Statement,Raven.Smuggler.Database,DocumentSmuggler,C:\repos\ravendb_ravendb\ToMigrate\Raven.Smuggler\Database\DocumentSmuggler.cs,SmuggleAsync,The length of the statement  "                            using (var documents = await Source.ReadDocumentsAfterAsync(afterEtag' pageSize' cancellationToken).ConfigureAwait(false)) " is 122.
Long Statement,Raven.Smuggler.Database,DocumentSmuggler,C:\repos\ravendb_ravendb\ToMigrate\Raven.Smuggler\Database\DocumentSmuggler.cs,SmuggleAsync,The length of the statement  "                                        if (isHilo == false || affectedCollections.Any(x => currentKey.EndsWith("/" + x' StringComparison.OrdinalIgnoreCase)) == false) " is 127.
Long Statement,Raven.Smuggler.Database,DocumentSmuggler,C:\repos\ravendb_ravendb\ToMigrate\Raven.Smuggler\Database\DocumentSmuggler.cs,SmuggleAsync,The length of the statement  "                                            currentDocument["@metadata"] = SmugglerHelper.StripReplicationInformationFromMetadata(metadata); //TODO arek - why there three methods are in SmugglerHelper' they are used just here " is 181.
Long Statement,Raven.Smuggler.Database,IdentitySmuggler,C:\repos\ravendb_ravendb\ToMigrate\Raven.Smuggler\Database\IdentitySmuggler.cs,SmuggleAsync,The length of the statement  "                            Notifications.ShowProgress("Failed getting identities too much times' stopping the identity export entirely. Message: {0}"' e.Message); " is 135.
Long Statement,Raven.Smuggler.Database,IdentitySmuggler,C:\repos\ravendb_ravendb\ToMigrate\Raven.Smuggler\Database\IdentitySmuggler.cs,SmuggleAsync,The length of the statement  "                    Notifications.ShowProgress("Exported {0} following identities: {1}"' identities.Count' string.Join("' "' identities.Select(x => x.Key))); " is 137.
Long Statement,Raven.Smuggler.Database,IdentitySmuggler,C:\repos\ravendb_ravendb\ToMigrate\Raven.Smuggler\Database\IdentitySmuggler.cs,SmuggleAsync,The length of the statement  "                    Notifications.ShowProgress("After filtering {0} identities need to be exported: {1}"' filteredIdentities.Count' string.Join("' "' filteredIdentities.Select(x => x.Key))); " is 170.
Long Statement,Raven.Smuggler.Database,IdentitySmuggler,C:\repos\ravendb_ravendb\ToMigrate\Raven.Smuggler\Database\IdentitySmuggler.cs,SmuggleAsync,The length of the statement  "                Notifications.ShowProgress("IDENTITY. Read: {0}. Filtered: {1}. Wrote: {2}"' readCount' readCount - filteredCount' writeCount); " is 127.
Long Statement,Raven.Smuggler.Database,IndexSmuggler,C:\repos\ravendb_ravendb\ToMigrate\Raven.Smuggler\Database\IndexSmuggler.cs,SmuggleAsync,The length of the statement  "                            Notifications.ShowProgress("Failed getting indexes too much times' stopping the index export entirely. Message: {0}"' e.Message); " is 129.
Long Statement,Raven.Smuggler.Database,TransformerSmuggler,C:\repos\ravendb_ravendb\ToMigrate\Raven.Smuggler\Database\TransformerSmuggler.cs,SmuggleAsync,The length of the statement  "                            Notifications.ShowProgress("Failed getting transformers too much times' stopping the transformer export entirely. Message: {0}"' e.Message); " is 140.
Long Statement,Raven.Smuggler.Database,TransformerSmuggler,C:\repos\ravendb_ravendb\ToMigrate\Raven.Smuggler\Database\TransformerSmuggler.cs,SmuggleAsync,The length of the statement  "                    Notifications.ShowProgress("Reading batch of {0'3} transformers' read so far: {1'10:#'#;;0}"' transformers.Count' count); " is 121.
Long Statement,Raven.Smuggler.Database.Remote,DatabaseSmugglerRemoteBase,C:\repos\ravendb_ravendb\ToMigrate\Raven.Smuggler\Database\Remote\DatabaseSmugglerRemoteBase.cs,InitializeBatchSizeAsync,The length of the statement  "                using (var request = store.JsonRequestFactory.CreateHttpJsonRequest(new CreateHttpJsonRequestParams(null' url' HttpMethods.Get' store.DatabaseCommands.PrimaryCredentials' store.Conventions))) " is 191.
Long Statement,Raven.Smuggler.Database.Remote,DatabaseSmugglerRemoteBase,C:\repos\ravendb_ravendb\ToMigrate\Raven.Smuggler\Database\Remote\DatabaseSmugglerRemoteBase.cs,InitializeBatchSizeAsync,The length of the statement  "                    var maxNumberOfItemsToProcessInSingleBatch = configuration["Core"].Value<int>("MaxNumberOfItemsToProcessInSingleBatch"); " is 120.
Long Statement,Raven.Smuggler.Database.Remote,DatabaseSmugglerRemoteSource,C:\repos\ravendb_ravendb\ToMigrate\Raven.Smuggler\Database\Remote\DatabaseSmugglerRemoteSource.cs,ReadIdentitiesAsync,The length of the statement  "                var url = _store.Url.ForDatabase(_store.DefaultDatabase) + "/debug/identities?start=" + start + "&pageSize=" + PageSize; " is 120.
Long Statement,Raven.Smuggler.Database.Remote,DatabaseSmugglerRemoteSource,C:\repos\ravendb_ravendb\ToMigrate\Raven.Smuggler\Database\Remote\DatabaseSmugglerRemoteSource.cs,ReadIdentitiesAsync,The length of the statement  "                using (var request = _store.JsonRequestFactory.CreateHttpJsonRequest(new CreateHttpJsonRequestParams(null' url' HttpMethods.Get' _store.DatabaseCommands.PrimaryCredentials' _store.Conventions))) " is 194.
Long Statement,Raven.Smuggler.FileSystem,ConfigurationSmuggler,C:\repos\ravendb_ravendb\ToMigrate\Raven.Smuggler\FileSystem\ConfigurationSmuggler.cs,SmuggleAsync,The length of the statement  "                            if (configItem.Key.Equals(SynchronizationConstants.RavenSynchronizationVersionHiLo' StringComparison.OrdinalIgnoreCase)) " is 120.
Long Statement,Raven.Smuggler.FileSystem,ConfigurationSmuggler,C:\repos\ravendb_ravendb\ToMigrate\Raven.Smuggler\FileSystem\ConfigurationSmuggler.cs,SmuggleAsync,The length of the statement  "                        if (string.Equals(configItem.Key' SynchronizationConstants.RavenSynchronizationDestinations' StringComparison.OrdinalIgnoreCase)) " is 129.
Long Statement,Raven.Smuggler.FileSystem,FileSmuggler,C:\repos\ravendb_ravendb\ToMigrate\Raven.Smuggler\FileSystem\FileSmuggler.cs,SmuggleAsync,The length of the statement  "                        using (var files = await Source.GetFilesAsync(state.LastFileEtag' Options.BatchSize' cancellationToken).ConfigureAwait(false)) " is 126.
Long Statement,Raven.Smuggler.FileSystem,FileSystemSmuggler,C:\repos\ravendb_ravendb\ToMigrate\Raven.Smuggler\FileSystem\FileSystemSmuggler.cs,ProcessAsync,The length of the statement  "                        await new FileSmuggler(source' destination' options' Notifications' maxEtags.LastFileEtag).SmuggleAsync(state' cancellationToken).ConfigureAwait(false); " is 152.
Long Statement,Raven.Smuggler.FileSystem,FileSystemSmuggler,C:\repos\ravendb_ravendb\ToMigrate\Raven.Smuggler\FileSystem\FileSystemSmuggler.cs,ProcessAsync,The length of the statement  "                        await new ConfigurationSmuggler(source' destination' options' Notifications).SmuggleAsync(state' cancellationToken).ConfigureAwait(false); " is 138.
Long Statement,Raven.Smuggler.FileSystem.Files,FileSmugglingDestination,C:\repos\ravendb_ravendb\ToMigrate\Raven.Smuggler\FileSystem\Files\FileSmugglingDestination.cs,InitializeAsync,The length of the statement  "                path = Path.Combine(path' SystemTime.UtcNow.ToString("yyyy-MM-dd-HH-mm-0"' CultureInfo.InvariantCulture) + ".ravenfs-incremental-dump"); " is 136.
Long Statement,Raven.Smuggler.FileSystem.Files,FileSmugglingDestination,C:\repos\ravendb_ravendb\ToMigrate\Raven.Smuggler\FileSystem\Files\FileSmugglingDestination.cs,InitializeAsync,The length of the statement  "                        path = Path.Combine(Path.GetDirectoryName(path)' SystemTime.UtcNow.ToString("yyyy-MM-dd-HH-mm"' CultureInfo.InvariantCulture) + "-" + counter + ".ravenfs-incremental-dump"); " is 173.
Long Statement,Raven.Smuggler.FileSystem.Files,FileSmugglingDestination,C:\repos\ravendb_ravendb\ToMigrate\Raven.Smuggler\FileSystem\Files\FileSmugglingDestination.cs,ReadLastEtagsFromIncrementalExportFile,The length of the statement  "                    //TODO arek log.WarnException("Could not parse etag document from file : " + etagFileLocation + "' ignoring' will start from scratch"' e); " is 138.
Long Statement,Raven.Smuggler.FileSystem.Remote,RemoteSmugglingDestination,C:\repos\ravendb_ravendb\ToMigrate\Raven.Smuggler\FileSystem\Remote\RemoteSmugglingDestination.cs,InitializeAsync,The length of the statement  "            await ServerValidation.DetectServerSupportedFeatures(connectionOptions).ConfigureAwait(false); // TODO arek - merge those 2 methods into single one " is 147.
Long Statement,Raven.Smuggler.FileSystem.Remote,RemoteSmugglingSource,C:\repos\ravendb_ravendb\ToMigrate\Raven.Smuggler\FileSystem\Remote\RemoteSmugglingSource.cs,InitializeAsync,The length of the statement  "            await ServerValidation.DetectServerSupportedFeatures(connectionOptions).ConfigureAwait(false); // TODO arek - merge those 2 methods into single one " is 147.
Long Statement,Raven.Smuggler.FileSystem.Remote,RemoteSmugglingSource,C:\repos\ravendb_ravendb\ToMigrate\Raven.Smuggler\FileSystem\Remote\RemoteSmugglingSource.cs,GetConfigurations,The length of the statement  "                results.Add(new KeyValuePair<string' RavenJObject>(name' await filesStore.AsyncFilesCommands.Configuration.GetKeyAsync<RavenJObject>(name).ConfigureAwait(false))); " is 163.
Long Statement,Raven.Smuggler.FileSystem.Remote,SmuggleFilesToRemote,C:\repos\ravendb_ravendb\ToMigrate\Raven.Smuggler\FileSystem\Remote\SmuggleFilesToRemote.cs,WriteFileAsync,The length of the statement  "            return store.AsyncFilesCommands.UploadRawAsync(file.FullPath' content' file.Metadata' file.TotalSize.Value); //TODO arek - meybe use content.lenght if possible " is 159.
Long Statement,Raven.Smuggler.FileSystem.Streams,StreamSmugglingDestination,C:\repos\ravendb_ravendb\ToMigrate\Raven.Smuggler\FileSystem\Streams\StreamSmugglingDestination.cs,InitializeAsync,The length of the statement  "            // http://connect.microsoft.com/VisualStudio/feedbackdetail/view/816411/ziparchive-shouldnt-read-the-position-of-non-seekable-streams " is 133.
Long Statement,Raven.Smuggler.FileSystem.Streams,StreamSmugglingSource,C:\repos\ravendb_ravendb\ToMigrate\Raven.Smuggler\FileSystem\Streams\StreamSmugglingSource.cs,GetFilesAsync,The length of the statement  "            return new CompletedTask<IAsyncEnumerator<FileHeader>>(new AsyncEnumeratorBridge<FileHeader>(fileHeaders.GetEnumerator())); " is 123.
Long Statement,Raven.Smuggler.FileSystem.Streams,StreamSmugglingSource,C:\repos\ravendb_ravendb\ToMigrate\Raven.Smuggler\FileSystem\Streams\StreamSmugglingSource.cs,GetFilesInternal,The length of the statement  "                    if (file.Etag.CompareTo(lastEtag) <= 0) // TODO arek - add test which checks that all files are smuggled even if BatchSize is very small " is 136.
Long Statement,Raven.Smuggler.FileSystem.Streams,StreamSmugglingSource,C:\repos\ravendb_ravendb\ToMigrate\Raven.Smuggler\FileSystem\Streams\StreamSmugglingSource.cs,GetConfigsInternal,The length of the statement  "                    if (skipped++ < skip) // TODO arek - add test which checks that all configs are smuggled even if BatchSize is very small " is 120.
Long Statement,Raven.Smuggler.Database.Files,DatabaseSmugglerFileDestination,C:\repos\ravendb_ravendb\ToMigrate\Raven.Smuggler\Database\Files\DatabaseSmugglerFileDestination.cs,InitializeAsync,The length of the statement  "                filePath = Path.Combine(filePath' SystemTime.UtcNow.ToString("yyyy-MM-dd-HH-mm-0"' CultureInfo.InvariantCulture) + ".ravendb-incremental-dump"); " is 144.
Long Statement,Raven.Smuggler.Database.Files,DatabaseSmugglerFileDestination,C:\repos\ravendb_ravendb\ToMigrate\Raven.Smuggler\Database\Files\DatabaseSmugglerFileDestination.cs,InitializeAsync,The length of the statement  "                        filePath = Path.Combine(Path.GetDirectoryName(filePath)' SystemTime.UtcNow.ToString("yyyy-MM-dd-HH-mm"' CultureInfo.InvariantCulture) + "-" + counter + ".ravendb-incremental-dump"); " is 181.
Long Statement,Raven.Smuggler.Database.Files,DatabaseSmugglerFileDestination,C:\repos\ravendb_ravendb\ToMigrate\Raven.Smuggler\Database\Files\DatabaseSmugglerFileDestination.cs,ReadLastEtagsFromFile,The length of the statement  "                    _log.WarnException("Could not parse etag document from file : " + etagFileLocation + "' ignoring' will start from scratch"' e); " is 127.
Long Statement,Raven.Smuggler.Database.Files,DatabaseSmugglerFileSource,C:\repos\ravendb_ravendb\ToMigrate\Raven.Smuggler\Database\Files\DatabaseSmugglerFileSource.cs,InitializeAsync,The length of the statement  "                _sources.Add(await CreateSourceAsync(optionsWithoutIndexesAndTransformers' path' cancellationToken).ConfigureAwait(false)); " is 123.
Long Statement,Raven.Smuggler.Database.Files,DatabaseSmugglerFileSource,C:\repos\ravendb_ravendb\ToMigrate\Raven.Smuggler\Database\Files\DatabaseSmugglerFileSource.cs,InitializeAsync,The length of the statement  "            _sources.Add(await CreateSourceAsync(options' Path.Combine(_path' files.Last())' cancellationToken).ConfigureAwait(false)); " is 123.
Long Statement,Raven.Smuggler.Database.Streams,DatabaseSmugglerStreamSource,C:\repos\ravendb_ravendb\ToMigrate\Raven.Smuggler\Database\Streams\DatabaseSmugglerStreamSource.cs,ReadDocumentsAfterAsync,The length of the statement  "            return new CompletedTask<IAsyncEnumerator<RavenJObject>>(new YieldJsonResults<RavenJObject>(afterEtag' _reader' cancellationToken)); " is 132.
Long Statement,Raven.Smuggler.Helpers,ServerValidation,C:\repos\ravendb_ravendb\ToMigrate\Raven.Smuggler\Helpers\ServerValidation.cs,ValidateThatServerIsUpAndDatabaseExistsAsync,The length of the statement  "                if (responseException != null && responseException.StatusCode == HttpStatusCode.ServiceUnavailable && (responseException.Message.StartsWith("Could not find a resource named") || responseException.Message.StartsWith("Could not find a database named"))) " is 251.
Long Statement,Raven.Smuggler.Helpers,ServerValidation,C:\repos\ravendb_ravendb\ToMigrate\Raven.Smuggler\Helpers\ServerValidation.cs,ValidateThatServerIsUpAndDatabaseExistsAsync,The length of the statement  "                        throw new SmugglerException(string.Format("Smuggler encountered a connection problem: '{0}'."' webException.Message)' webException); " is 132.
Long Statement,Raven.Smuggler.Helpers,ServerValidation,C:\repos\ravendb_ravendb\ToMigrate\Raven.Smuggler\Helpers\ServerValidation.cs,ValidateThatServerIsUpAndFileSystemExists,The length of the statement  "                if (responseException != null && responseException.StatusCode == HttpStatusCode.ServiceUnavailable && responseException.Message.StartsWith("Could not find a resource named:")) " is 175.
Long Statement,Raven.Smuggler.Helpers,ServerValidation,C:\repos\ravendb_ravendb\ToMigrate\Raven.Smuggler\Helpers\ServerValidation.cs,ValidateThatServerIsUpAndFileSystemExists,The length of the statement  "                            "Smuggler does not support file system creation (file system '{0}' on server '{1}' must exist before running Smuggler)."' " is 121.
Long Statement,Raven.Smuggler.Helpers,ServerValidation,C:\repos\ravendb_ravendb\ToMigrate\Raven.Smuggler\Helpers\ServerValidation.cs,ValidateThatServerIsUpAndFileSystemExists,The length of the statement  "                        throw new SmugglerException(string.Format("Smuggler encountered a connection problem: '{0}'."' webException.Message)' webException); " is 132.
Long Statement,Raven.Smuggler.Helpers,ServerValidation,C:\repos\ravendb_ravendb\ToMigrate\Raven.Smuggler\Helpers\ServerValidation.cs,DetectServerSupportedFeatures,The length of the statement  "                var serverVersion = (await store.AsyncDatabaseCommands.GlobalAdmin.GetBuildNumberAsync().ConfigureAwait(false)).BuildVersion; " is 125.
Long Statement,Raven.Smuggler.Helpers,ServerValidation,C:\repos\ravendb_ravendb\ToMigrate\Raven.Smuggler\Helpers\ServerValidation.cs,DetectServerSupportedFeatures,The length of the statement  "                    throw new SmugglerException(string.Format("This smuggler version requires a v4.0 or higher server. Smuggler version: {0}."' subSmugglerVersion)); " is 145.
Long Statement,Raven.Smuggler,Program,C:\repos\ravendb_ravendb\ToMigrate\Raven.Smuggler\Program.cs,DefineCounterOptionSet,The length of the statement  "            counterOptionSet.Add("timeout:"' OptionCategory.SmugglerCounter' "The timeout to use for requests"' s => counterOptions.Timeout = TimeSpan.FromMilliseconds(int.Parse(s))); " is 171.
Long Statement,Raven.Smuggler,Program,C:\repos\ravendb_ravendb\ToMigrate\Raven.Smuggler\Program.cs,DefineCounterOptionSet,The length of the statement  "            counterOptionSet.Add("incremental"' OptionCategory.SmugglerCounter' "States usage of incremental operations"' _ => counterOptions.Incremental = true); " is 150.
Long Statement,Raven.Smuggler,Program,C:\repos\ravendb_ravendb\ToMigrate\Raven.Smuggler\Program.cs,DefineCounterOptionSet,The length of the statement  "            counterOptionSet.Add("u|user|username:"' OptionCategory.SmugglerCounter' "The username to use when the counter storage requires the client to authenticate."' value => GetCredentials(counterOptions.Source).UserName = value); " is 223.
Long Statement,Raven.Smuggler,Program,C:\repos\ravendb_ravendb\ToMigrate\Raven.Smuggler\Program.cs,DefineCounterOptionSet,The length of the statement  "            counterOptionSet.Add("u2|user2|username2:"' OptionCategory.SmugglerCounter' "The username to use when the counter storage requires the client to authenticate. This parameter is used only in the between operation."' value => GetCredentials(counterOptions.Destination).UserName = value); " is 285.
Long Statement,Raven.Smuggler,Program,C:\repos\ravendb_ravendb\ToMigrate\Raven.Smuggler\Program.cs,DefineCounterOptionSet,The length of the statement  "            counterOptionSet.Add("p|pass|password:"' OptionCategory.SmugglerCounter' "The password to use when the counter storage requires the client to authenticate."' value => GetCredentials(counterOptions.Source).Password = value); " is 223.
Long Statement,Raven.Smuggler,Program,C:\repos\ravendb_ravendb\ToMigrate\Raven.Smuggler\Program.cs,DefineCounterOptionSet,The length of the statement  "            counterOptionSet.Add("p2|pass2|password2:"' OptionCategory.SmugglerCounter' "The password to use when the counter storage requires the client to authenticate. This parameter is used only in the between operation."' value => GetCredentials(counterOptions.Destination).Password = value); " is 285.
Long Statement,Raven.Smuggler,Program,C:\repos\ravendb_ravendb\ToMigrate\Raven.Smuggler\Program.cs,DefineCounterOptionSet,The length of the statement  "            counterOptionSet.Add("domain:"' OptionCategory.SmugglerCounter' "The domain to use when the counter storage requires the client to authenticate."' value => GetCredentials(counterOptions.Source).Domain = value); " is 210.
Long Statement,Raven.Smuggler,Program,C:\repos\ravendb_ravendb\ToMigrate\Raven.Smuggler\Program.cs,DefineCounterOptionSet,The length of the statement  "            counterOptionSet.Add("domain2:"' OptionCategory.SmugglerCounter' "The domain to use when the counter storage requires the client to authenticate. This parameter is used only in the between operation."' value => GetCredentials(counterOptions.Destination).Domain = value); " is 270.
Long Statement,Raven.Smuggler,Program,C:\repos\ravendb_ravendb\ToMigrate\Raven.Smuggler\Program.cs,DefineCounterOptionSet,The length of the statement  "            counterOptionSet.Add("key|api-key|apikey:"' OptionCategory.SmugglerCounter' "The API-key to use' when using OAuth."' value => counterOptions.Source.ApiKey = value); " is 164.
Long Statement,Raven.Smuggler,Program,C:\repos\ravendb_ravendb\ToMigrate\Raven.Smuggler\Program.cs,DefineCounterOptionSet,The length of the statement  "            counterOptionSet.Add("key2|api-key2|apikey2:"' OptionCategory.SmugglerCounter' "The API-key to use' when using OAuth. This parameter is used only in the between operation."' value => counterOptions.Destination.ApiKey = value); " is 226.
Long Statement,Raven.Smuggler,Program,C:\repos\ravendb_ravendb\ToMigrate\Raven.Smuggler\Program.cs,DefineCounterOptionSet,The length of the statement  "            counterOptionSet.Add("c|counter:"' OptionCategory.SmugglerCounter' "The counter storage to operate on. If no specified' the operations will be on the default counter storage."' value => counterStorageName = value); " is 214.
Long Statement,Raven.Smuggler,Program,C:\repos\ravendb_ravendb\ToMigrate\Raven.Smuggler\Program.cs,DefineCounterOptionSet,The length of the statement  "            counterOptionSet.Add("c2|counter2:"' OptionCategory.SmugglerCounter' "The counter storage to export to. If no specified' the operations will be on the default counter storage. This parameter is used only in the between operation."' value => counterStorageName2 = value); " is 270.
Long Statement,Raven.Smuggler,Program,C:\repos\ravendb_ravendb\ToMigrate\Raven.Smuggler\Program.cs,DefineFilesystemOptionSet,The length of the statement  "            //optionSet.Add("timeout:"' OptionCategory.SmugglerFileSystem' "The timeout to use for requests"' s => options.Timeout = TimeSpan.FromMilliseconds(int.Parse(s))); " is 162.
Long Statement,Raven.Smuggler,Program,C:\repos\ravendb_ravendb\ToMigrate\Raven.Smuggler\Program.cs,DefineFilesystemOptionSet,The length of the statement  "            //optionSet.Add("incremental"' OptionCategory.SmugglerFileSystem' "States usage of incremental operations"' _ => options.Incremental = true); " is 141.
Long Statement,Raven.Smuggler,Program,C:\repos\ravendb_ravendb\ToMigrate\Raven.Smuggler\Program.cs,DefineFilesystemOptionSet,The length of the statement  "            databaseOptionSet.Add("disable-versioning-during-import"' OptionCategory.SmugglerFileSystem' "Disables versioning for the duration of the import"' _ => options.ShouldDisableVersioningBundle = true); " is 198.
Long Statement,Raven.Smuggler,Program,C:\repos\ravendb_ravendb\ToMigrate\Raven.Smuggler\Program.cs,DefineFilesystemOptionSet,The length of the statement  "            optionSet.Add("u|user|username:"' OptionCategory.SmugglerFileSystem' "The username to use when the filesystem requires the client to authenticate."' value => GetCredentials(source).UserName = value); " is 199.
Long Statement,Raven.Smuggler,Program,C:\repos\ravendb_ravendb\ToMigrate\Raven.Smuggler\Program.cs,DefineFilesystemOptionSet,The length of the statement  "            optionSet.Add("u2|user2|username2:"' OptionCategory.SmugglerFileSystem' "The username to use when the filesystem requires the client to authenticate. This parameter is used only in the between operation."' value => GetCredentials(destination).UserName = value); " is 261.
Long Statement,Raven.Smuggler,Program,C:\repos\ravendb_ravendb\ToMigrate\Raven.Smuggler\Program.cs,DefineFilesystemOptionSet,The length of the statement  "            optionSet.Add("p|pass|password:"' OptionCategory.SmugglerFileSystem' "The password to use when the filesystem requires the client to authenticate."' value => GetCredentials(source).Password = value); " is 199.
Long Statement,Raven.Smuggler,Program,C:\repos\ravendb_ravendb\ToMigrate\Raven.Smuggler\Program.cs,DefineFilesystemOptionSet,The length of the statement  "            optionSet.Add("p2|pass2|password2:"' OptionCategory.SmugglerFileSystem' "The password to use when the filesystem requires the client to authenticate. This parameter is used only in the between operation."' value => GetCredentials(destination).Password = value); " is 261.
Long Statement,Raven.Smuggler,Program,C:\repos\ravendb_ravendb\ToMigrate\Raven.Smuggler\Program.cs,DefineFilesystemOptionSet,The length of the statement  "            optionSet.Add("domain:"' OptionCategory.SmugglerFileSystem' "The domain to use when the filesystem requires the client to authenticate."' value => GetCredentials(source).Domain = value); " is 186.
Long Statement,Raven.Smuggler,Program,C:\repos\ravendb_ravendb\ToMigrate\Raven.Smuggler\Program.cs,DefineFilesystemOptionSet,The length of the statement  "            optionSet.Add("domain2:"' OptionCategory.SmugglerFileSystem' "The domain to use when the filesystem requires the client to authenticate. This parameter is used only in the between operation."' value => GetCredentials(destination).Domain = value); " is 246.
Long Statement,Raven.Smuggler,Program,C:\repos\ravendb_ravendb\ToMigrate\Raven.Smuggler\Program.cs,DefineFilesystemOptionSet,The length of the statement  "            optionSet.Add("key|api-key|apikey:"' OptionCategory.SmugglerFileSystem' "The API-key to use' when using OAuth."' value => source.ApiKey = value); " is 145.
Long Statement,Raven.Smuggler,Program,C:\repos\ravendb_ravendb\ToMigrate\Raven.Smuggler\Program.cs,DefineFilesystemOptionSet,The length of the statement  "            optionSet.Add("key2|api-key2|apikey2:"' OptionCategory.SmugglerFileSystem' "The API-key to use' when using OAuth. This parameter is used only in the between operation."' value => destination.ApiKey = value); " is 207.
Long Statement,Raven.Smuggler,Program,C:\repos\ravendb_ravendb\ToMigrate\Raven.Smuggler\Program.cs,DefineFilesystemOptionSet,The length of the statement  "            optionSet.Add("f|filesystem:"' OptionCategory.SmugglerFileSystem' "The filesystem to operate on. If no specified' the operations will be on the default filesystem."' value => source.DefaultFileSystem = value); " is 209.
Long Statement,Raven.Smuggler,Program,C:\repos\ravendb_ravendb\ToMigrate\Raven.Smuggler\Program.cs,DefineFilesystemOptionSet,The length of the statement  "            optionSet.Add("f2|filesystem2:"' OptionCategory.SmugglerFileSystem' "The filesystem to export to. If no specified' the operations will be on the default filesystem. This parameter is used only in the between operation."' value => destination.DefaultFileSystem = value); " is 269.
Long Statement,Raven.Smuggler,Program,C:\repos\ravendb_ravendb\ToMigrate\Raven.Smuggler\Program.cs,Parse,The length of the statement  "                    Console.WriteLine("You are trying to import into database with versioning bundle enabled' use the flag: disable - versioning - during - import in the command line parameters\r\n"); " is 180.
Complex Conditional,NDesk.Options,Option,C:\repos\ravendb_ravendb\ToMigrate\Raven.Server\FromMono\Options.cs,Option,The conditional expression  "Array.IndexOf(names' "<>") >= 0 &&                      ((names.Length == 1 && this.type != OptionValueType.None) ||                       (names.Length > 1 && this.MaxValueCount > 1))"  is complex.
Complex Conditional,NDesk.Options,OptionSet,C:\repos\ravendb_ravendb\ToMigrate\Raven.Server\FromMono\Options.cs,ParseBool,The conditional expression  "n.Length >= 1 && (n[n.Length - 1] == '+' || n[n.Length - 1] == '-') &&                      Contains((rn = n.Substring(0' n.Length - 1)))"  is complex.
Complex Conditional,NDesk.Options,OptionSet,C:\repos\ravendb_ravendb\ToMigrate\Raven.Server\FromMono\Options.cs,WriteOptionDescriptions,The conditional expression  "currentCategory.HasFlag(key) == false && currentCategory != OptionCategory.None && currentCategory != OptionCategory.Help && key != OptionCategory.Help && key != OptionCategory.None"  is complex.
Complex Conditional,Raven.Smuggler.Helpers,ServerValidation,C:\repos\ravendb_ravendb\ToMigrate\Raven.Smuggler\Helpers\ServerValidation.cs,ValidateThatServerIsUpAndDatabaseExistsAsync,The conditional expression  "responseException != null && responseException.StatusCode == HttpStatusCode.ServiceUnavailable && (responseException.Message.StartsWith("Could not find a resource named") || responseException.Message.StartsWith("Could not find a database named"))"  is complex.
Magic Number,NDesk.Options,OptionSet,C:\repos\ravendb_ravendb\ToMigrate\Raven.Server\FromMono\Options.cs,Add,The following statement contains a magic number: Option p = new ActionOption(prototype' category' description' 2' v => action(v[0]' v[1]));
Magic Number,NDesk.Options,OptionSet,C:\repos\ravendb_ravendb\ToMigrate\Raven.Server\FromMono\Options.cs,WriteOptionDescriptions,The following statement contains a magic number: foreach (var key in results.Keys)              {                  if (currentCategory.HasFlag(key) == false && currentCategory != OptionCategory.None && currentCategory != OptionCategory.Help && key != OptionCategory.Help && key != OptionCategory.None)                      continue;                    var options = results[key];                  if (options.Count == 0)                      continue;                    o.WriteLine();                  o.WriteLine("----------------------------------------------");                  o.WriteLine(GetDescription(key));                  o.WriteLine("----------------------------------------------");                  o.WriteLine();                    foreach (Option p in options)                  {                      int written = 0;                      if (!WriteOptionPrototype(o' p' ref written))                          continue;                        if (written < OptionWidth)                          o.Write(new string(' '' OptionWidth - written));                      else                      {                          o.WriteLine();                          o.Write(new string(' '' OptionWidth));                      }                        List<string> lines = GetLines(localizer(GetDescription(p.Description)));                      o.WriteLine(lines[0]);                      string prefix = new string(' '' OptionWidth + 2);                      for (int i = 1; i < lines.Count; ++i)                      {                          o.Write(prefix);                          o.WriteLine(lines[i]);                      }                  }              }
Magic Number,NDesk.Options,OptionSet,C:\repos\ravendb_ravendb\ToMigrate\Raven.Server\FromMono\Options.cs,GetLines,The following statement contains a magic number: int length = 80 - OptionWidth - 2;
Magic Number,NDesk.Options,OptionSet,C:\repos\ravendb_ravendb\ToMigrate\Raven.Server\FromMono\Options.cs,GetLines,The following statement contains a magic number: int length = 80 - OptionWidth - 2;
Magic Number,Raven.Smuggler.Database.Remote,DatabaseSmugglerRemoteDestination,C:\repos\ravendb_ravendb\ToMigrate\Raven.Smuggler\Database\Remote\DatabaseSmugglerRemoteDestination.cs,WaitForIndexingAsOfLastWriteAsync,The following statement contains a magic number: while (true)              {                  if (stats.Indexes.All(x => x.LastIndexedEtag.CompareTo(cutOffEtag) >= 0))                  {                      _notifications.ShowProgress("\rWaited {0} for indexing ({1} total)."' justIndexingWait.Elapsed' stopwatch.Elapsed);                      break;                  }                    if (tries++ % 10 == 0)                      _notifications.ShowProgress("\rWaiting {0} for indexing ({1} total)."' justIndexingWait.Elapsed' stopwatch.Elapsed);                    Thread.Sleep(1000);                  stats = await _store                      .AsyncDatabaseCommands                      .GetStatisticsAsync(cancellationToken)                      .ConfigureAwait(false);              }
Magic Number,Raven.Smuggler.Database.Remote,DatabaseSmugglerRemoteDestination,C:\repos\ravendb_ravendb\ToMigrate\Raven.Smuggler\Database\Remote\DatabaseSmugglerRemoteDestination.cs,WaitForIndexingAsOfLastWriteAsync,The following statement contains a magic number: while (true)              {                  if (stats.Indexes.All(x => x.LastIndexedEtag.CompareTo(cutOffEtag) >= 0))                  {                      _notifications.ShowProgress("\rWaited {0} for indexing ({1} total)."' justIndexingWait.Elapsed' stopwatch.Elapsed);                      break;                  }                    if (tries++ % 10 == 0)                      _notifications.ShowProgress("\rWaiting {0} for indexing ({1} total)."' justIndexingWait.Elapsed' stopwatch.Elapsed);                    Thread.Sleep(1000);                  stats = await _store                      .AsyncDatabaseCommands                      .GetStatisticsAsync(cancellationToken)                      .ConfigureAwait(false);              }
Magic Number,Raven.Smuggler.Database.Remote,DatabaseSmugglerRemoteDestinationOptions,C:\repos\ravendb_ravendb\ToMigrate\Raven.Smuggler\Database\Remote\DatabaseSmugglerRemoteDestinationOptions.cs,DatabaseSmugglerRemoteDestinationOptions,The following statement contains a magic number: HeartbeatLatency = TimeSpan.FromSeconds(10);
Magic Number,Raven.Smuggler.Database.Remote,DatabaseSmugglerRemoteSource,C:\repos\ravendb_ravendb\ToMigrate\Raven.Smuggler\Database\Remote\DatabaseSmugglerRemoteSource.cs,ReadIdentitiesAsync,The following statement contains a magic number: const int PageSize = 1024;
Magic Number,Raven.Smuggler.FileSystem,ConfigurationSmuggler,C:\repos\ravendb_ravendb\ToMigrate\Raven.Smuggler\FileSystem\ConfigurationSmuggler.cs,SmuggleAsync,The following statement contains a magic number: var reportInterval = TimeSpan.FromSeconds(2);
Magic Number,Raven.Smuggler.FileSystem,ConfigurationSmuggler,C:\repos\ravendb_ravendb\ToMigrate\Raven.Smuggler\FileSystem\ConfigurationSmuggler.cs,SmuggleAsync,The following statement contains a magic number: using (var writer = Destination.WriteConfigurations())              {                  while (true)                  {                      bool hasConfigs = false;                        foreach (var configItem in await Source.GetConfigurations(written' Options.BatchSize).ConfigureAwait(false))                      {                          if (internalConfigs.IsMatch(configItem.Key))                              continue;                            if (Options.StripReplicationInformation)                          {                              if (configItem.Key.Equals(SynchronizationConstants.RavenSynchronizationVersionHiLo' StringComparison.OrdinalIgnoreCase))                                  continue;                          }                            hasConfigs = true;                            var config = configItem.Value;                            if (string.Equals(configItem.Key' SynchronizationConstants.RavenSynchronizationDestinations' StringComparison.OrdinalIgnoreCase))                          {                              config = DisableSynchronizationDestinations(config);                          }                            await writer.WriteConfigurationAsync(configItem.Key' config).ConfigureAwait(false);                                                    written++;                            if (written % 100 == 0 || SystemTime.UtcNow - lastReport > reportInterval)                          {                              Notifications.ShowProgress("Exported {0} configurations. "' written);                              lastReport = SystemTime.UtcNow;                          }                      }                        if (hasConfigs == false)                          break;                  }              }
Magic Number,Raven.Smuggler.FileSystem,FileSmuggler,C:\repos\ravendb_ravendb\ToMigrate\Raven.Smuggler\FileSystem\FileSmuggler.cs,SmuggleAsync,The following statement contains a magic number: var reportInterval = TimeSpan.FromSeconds(2);
Magic Number,Raven.Smuggler.FileSystem,FileSmuggler,C:\repos\ravendb_ravendb\ToMigrate\Raven.Smuggler\FileSystem\FileSmuggler.cs,SmuggleAsync,The following statement contains a magic number: using (var writer = Destination.WriteFiles())              {                  try                  {                      while (true)                      {                          bool hasDocs = false;                            using (var files = await Source.GetFilesAsync(state.LastFileEtag' Options.BatchSize' cancellationToken).ConfigureAwait(false))                          {                              while (await files.MoveNextAsync().ConfigureAwait(false))                              {                                  hasDocs = true;                                    var file = files.Current;                                  if (file.IsTombstone)                                  {                                      state.LastFileEtag = file.Etag;                                      continue;                                  }                                    var tempLastEtag = file.Etag; // TODO arek - why do we need temp variable                                   if (maxEtag != null && tempLastEtag.CompareTo(maxEtag) > 0) break;                                    if (Options.StripReplicationInformation)                                      file.Metadata = StripReplicationInformationFromMetadata(file.Metadata);                                    if (Options.ShouldDisableVersioningBundle)                                      file.Metadata = DisableVersioning(file.Metadata);                                    using (var fileStream = await Source.DownloadFileAsync(file).ConfigureAwait(false))                                  {                                      await writer.WriteFileAsync(file' fileStream).ConfigureAwait(false);                                  }                                    state.LastFileEtag = tempLastEtag;                                    totalCount++;                                  if (totalCount % 1000 == 0 || SystemTime.UtcNow - lastReport > reportInterval)                                  {                                      //TODO: Show also the MB/sec and total GB exported. // TODO arek                                      Notifications.ShowProgress("Exported {0} files. "' totalCount);                                      lastReport = SystemTime.UtcNow;                                  }                              }                          }                            if (hasDocs == false)                              break;                        }                  }                  catch (Exception e)                  {                      Notifications.ShowProgress("Got Exception during smuggler export. Exception: {0}. "' e.Message);                      Notifications.ShowProgress("Done with reading files' total: {0}' lastEtag: {1}"' totalCount' state.LastFileEtag);                        throw new SmugglerException(e.Message' e) { LastEtag = state.LastFileEtag };                  }              }
Magic Number,Raven.Smuggler.Helpers,ServerValidation,C:\repos\ravendb_ravendb\ToMigrate\Raven.Smuggler\Helpers\ServerValidation.cs,DetectServerSupportedFeatures,The following statement contains a magic number: using (var store = CreateDocumentStore(connectionOptions))              {                  var serverVersion = (await store.AsyncDatabaseCommands.GlobalAdmin.GetBuildNumberAsync().ConfigureAwait(false)).BuildVersion;                    if (string.IsNullOrEmpty(serverVersion))                      throw new SmugglerException("Server version is not available.");                    var smugglerVersion = FileVersionInfo.GetVersionInfo(AssemblyHelper.GetAssemblyLocationFor<Program>()).ProductVersion;                  var subSmugglerVersion = smugglerVersion.Substring(0' 4);                    var intServerVersion = int.Parse(serverVersion);                  if (intServerVersion < 40)                      throw new SmugglerException(string.Format("This smuggler version requires a v4.0 or higher server. Smuggler version: {0}."' subSmugglerVersion));              }
Magic Number,Raven.Smuggler.Helpers,ServerValidation,C:\repos\ravendb_ravendb\ToMigrate\Raven.Smuggler\Helpers\ServerValidation.cs,DetectServerSupportedFeatures,The following statement contains a magic number: using (var store = CreateDocumentStore(connectionOptions))              {                  var serverVersion = (await store.AsyncDatabaseCommands.GlobalAdmin.GetBuildNumberAsync().ConfigureAwait(false)).BuildVersion;                    if (string.IsNullOrEmpty(serverVersion))                      throw new SmugglerException("Server version is not available.");                    var smugglerVersion = FileVersionInfo.GetVersionInfo(AssemblyHelper.GetAssemblyLocationFor<Program>()).ProductVersion;                  var subSmugglerVersion = smugglerVersion.Substring(0' 4);                    var intServerVersion = int.Parse(serverVersion);                  if (intServerVersion < 40)                      throw new SmugglerException(string.Format("This smuggler version requires a v4.0 or higher server. Smuggler version: {0}."' subSmugglerVersion));              }
Magic Number,Raven.Smuggler,Program,C:\repos\ravendb_ravendb\ToMigrate\Raven.Smuggler\Program.cs,Parse,The following statement contains a magic number: if (args.Length < 3)                  PrintUsageAndExit(-1);
Magic Number,Raven.Smuggler,Program,C:\repos\ravendb_ravendb\ToMigrate\Raven.Smuggler\Program.cs,Parse,The following statement contains a magic number: if (url == null || args[2] == null)                  PrintUsageAndExit(-1);
Magic Number,Raven.Smuggler,Program,C:\repos\ravendb_ravendb\ToMigrate\Raven.Smuggler\Program.cs,Parse,The following statement contains a magic number: try              {                  switch (mode)                  {                      case SmugglerMode.Database:                          {                              CallContext.LogicalSetData(Constants.Smuggler.CallContext' true);                                try                              {                                  databaseOptionSet.Parse(args);                              }                              catch (Exception e)                              {                                  PrintUsageAndExit(e);                              }          //                      options.Source.Url = url;        //                      options.BackupPath = args[2];          //                      if (action != SmugglerAction.Between && Directory.Exists(options.BackupPath))        //                          smugglerApi.Options.Incremental = true;                            //if (NetworkUtil.IsLocalhost(smugglerApi.Options.Destination.Url) ||                          //    NetworkUtil.IsLocalhost(smugglerApi.Options.BackupPath))                          //	smugglerApi.Options.DisableCompressionOnImport = true;          //                      ValidateDatabaseParameters(smugglerApi' action);        //                      var databaseDispatcher = new SmugglerDatabaseOperationDispatcher(smugglerApi);        //                      await databaseDispatcher.Execute(action).ConfigureAwait(false);                          }                          break;                      case SmugglerMode.Filesystem:                          {                              try                              {                                  fileSystem.OptionSet.Parse(args);                              }                              catch (Exception e)                              {                                  PrintUsageAndExit(e);                              }                                var destination = args[2];                                fileSystem.FirstConnection.Url = url;                                switch (action)                              {                                  case SmugglerAction.Export:                                      await fileSystem.Smuggler.ExecuteAsync(                                          new RemoteSmugglingSource(fileSystem.FirstConnection)'                                          new FileSmugglingDestination(destination' Directory.Exists(destination)))                                          .ConfigureAwait(false);                                      break;                                  case SmugglerAction.Import:                                      await fileSystem.Smuggler.ExecuteAsync(                                          new FileSmugglingSource(destination)'                                          new RemoteSmugglingDestination(fileSystem.FirstConnection))                                          .ConfigureAwait(false);                                      break;                                  case SmugglerAction.Between:                                      fileSystem.SecondConnection.Url = destination;                                        await fileSystem.Smuggler.ExecuteAsync(                                          new RemoteSmugglingSource(fileSystem.FirstConnection)'                                          new RemoteSmugglingDestination(fileSystem.SecondConnection))                                          .ConfigureAwait(false);                                      break;                              }                          }                          break;                      case SmugglerMode.Counter:                      {                          try                          {                              counterOptionSet.Parse(args);                          }                          catch (Exception e)                          {                              PrintUsageAndExit(e);                          }                            switch (action)                          {                              //case SmugglerAction.Export:                              //	smugglerCounterApi.Options.Source.Url = url;                              //	smugglerCounterApi.Options.Source.CounterStoreId = counterStorageName;                              //	break;                              //case SmugglerAction.Import:                              //	smugglerCounterApi.Options.Destination.Url = url;                              //	smugglerCounterApi.Options.Destination.CounterStoreId = counterStorageName;                              //	break;                              //case SmugglerAction.Between:                              //	smugglerCounterApi.Options.Source.Url = url;                              //	smugglerCounterApi.Options.Destination.Url = url;                              //	smugglerCounterApi.Options.Source.CounterStoreId = counterStorageName;                              //	smugglerCounterApi.Options.Destination.CounterStoreId = counterStorageName2;                              //	break;                          }                            //smugglerCounterApi.Options.BackupPath = args[2];                                                    //var countersDispatcher = new SmugglerCounterOperationDispatcher(smugglerCounterApi.Options);                          //await countersDispatcher.Execute(action).ConfigureAwait(false);                      }                          break;                  }              }              catch (Exception e)              {                  if (e is AggregateException)                  {                      Console.WriteLine(e.InnerException != null ? e.InnerException.SimplifyError() : e.SimplifyError());                  }                  else if (e is OperationVetoedException)                  {                      Console.WriteLine("You are trying to import into database with versioning bundle enabled' use the flag: disable - versioning - during - import in the command line parameters\r\n");                  }                  else                  {                      var errorResponseException = e as ErrorResponseException;                      Console.WriteLine(errorResponseException != null ?                           String.Format("{0} \n\r {1}"' errorResponseException.SimplifyError()' errorResponseException.Response) : e.Message);                  }                                Environment.Exit(-1);              }
Missing Default,NDesk.Options,OptionSet,C:\repos\ravendb_ravendb\ToMigrate\Raven.Server\FromMono\Options.cs,Parse,The following switch statement is missing a default case: switch (p.OptionValueType)                  {                      case OptionValueType.None:                          c.OptionValues.Add(n);                          c.Option.Invoke(c);                          break;                      case OptionValueType.Optional:                      case OptionValueType.Required:                          ParseValue(v' c);                          break;                  }
Missing Default,NDesk.Options,OptionSet,C:\repos\ravendb_ravendb\ToMigrate\Raven.Server\FromMono\Options.cs,GetLineEnd,The following switch statement is missing a default case: switch (description[i])                  {                      case ' ':                      case '\t':                      case '\v':                      case '-':                      case ''':                      case '.':                      case ';':                          sep = i;                          break;                      case '\n':                          return i;                  }
Missing Default,Raven.Smuggler,Program,C:\repos\ravendb_ravendb\ToMigrate\Raven.Smuggler\Program.cs,Parse,The following switch statement is missing a default case: switch (mode)                  {                      case SmugglerMode.Database:                          {                              CallContext.LogicalSetData(Constants.Smuggler.CallContext' true);                                try                              {                                  databaseOptionSet.Parse(args);                              }                              catch (Exception e)                              {                                  PrintUsageAndExit(e);                              }          //                      options.Source.Url = url;        //                      options.BackupPath = args[2];          //                      if (action != SmugglerAction.Between && Directory.Exists(options.BackupPath))        //                          smugglerApi.Options.Incremental = true;                            //if (NetworkUtil.IsLocalhost(smugglerApi.Options.Destination.Url) ||                          //    NetworkUtil.IsLocalhost(smugglerApi.Options.BackupPath))                          //	smugglerApi.Options.DisableCompressionOnImport = true;          //                      ValidateDatabaseParameters(smugglerApi' action);        //                      var databaseDispatcher = new SmugglerDatabaseOperationDispatcher(smugglerApi);        //                      await databaseDispatcher.Execute(action).ConfigureAwait(false);                          }                          break;                      case SmugglerMode.Filesystem:                          {                              try                              {                                  fileSystem.OptionSet.Parse(args);                              }                              catch (Exception e)                              {                                  PrintUsageAndExit(e);                              }                                var destination = args[2];                                fileSystem.FirstConnection.Url = url;                                switch (action)                              {                                  case SmugglerAction.Export:                                      await fileSystem.Smuggler.ExecuteAsync(                                          new RemoteSmugglingSource(fileSystem.FirstConnection)'                                          new FileSmugglingDestination(destination' Directory.Exists(destination)))                                          .ConfigureAwait(false);                                      break;                                  case SmugglerAction.Import:                                      await fileSystem.Smuggler.ExecuteAsync(                                          new FileSmugglingSource(destination)'                                          new RemoteSmugglingDestination(fileSystem.FirstConnection))                                          .ConfigureAwait(false);                                      break;                                  case SmugglerAction.Between:                                      fileSystem.SecondConnection.Url = destination;                                        await fileSystem.Smuggler.ExecuteAsync(                                          new RemoteSmugglingSource(fileSystem.FirstConnection)'                                          new RemoteSmugglingDestination(fileSystem.SecondConnection))                                          .ConfigureAwait(false);                                      break;                              }                          }                          break;                      case SmugglerMode.Counter:                      {                          try                          {                              counterOptionSet.Parse(args);                          }                          catch (Exception e)                          {                              PrintUsageAndExit(e);                          }                            switch (action)                          {                              //case SmugglerAction.Export:                              //	smugglerCounterApi.Options.Source.Url = url;                              //	smugglerCounterApi.Options.Source.CounterStoreId = counterStorageName;                              //	break;                              //case SmugglerAction.Import:                              //	smugglerCounterApi.Options.Destination.Url = url;                              //	smugglerCounterApi.Options.Destination.CounterStoreId = counterStorageName;                              //	break;                              //case SmugglerAction.Between:                              //	smugglerCounterApi.Options.Source.Url = url;                              //	smugglerCounterApi.Options.Destination.Url = url;                              //	smugglerCounterApi.Options.Source.CounterStoreId = counterStorageName;                              //	smugglerCounterApi.Options.Destination.CounterStoreId = counterStorageName2;                              //	break;                          }                            //smugglerCounterApi.Options.BackupPath = args[2];                                                    //var countersDispatcher = new SmugglerCounterOperationDispatcher(smugglerCounterApi.Options);                          //await countersDispatcher.Execute(action).ConfigureAwait(false);                      }                          break;                  }
Missing Default,Raven.Smuggler,Program,C:\repos\ravendb_ravendb\ToMigrate\Raven.Smuggler\Program.cs,Parse,The following switch statement is missing a default case: switch (action)                              {                                  case SmugglerAction.Export:                                      await fileSystem.Smuggler.ExecuteAsync(                                          new RemoteSmugglingSource(fileSystem.FirstConnection)'                                          new FileSmugglingDestination(destination' Directory.Exists(destination)))                                          .ConfigureAwait(false);                                      break;                                  case SmugglerAction.Import:                                      await fileSystem.Smuggler.ExecuteAsync(                                          new FileSmugglingSource(destination)'                                          new RemoteSmugglingDestination(fileSystem.FirstConnection))                                          .ConfigureAwait(false);                                      break;                                  case SmugglerAction.Between:                                      fileSystem.SecondConnection.Url = destination;                                        await fileSystem.Smuggler.ExecuteAsync(                                          new RemoteSmugglingSource(fileSystem.FirstConnection)'                                          new RemoteSmugglingDestination(fileSystem.SecondConnection))                                          .ConfigureAwait(false);                                      break;                              }
Missing Default,Raven.Smuggler,Program,C:\repos\ravendb_ravendb\ToMigrate\Raven.Smuggler\Program.cs,Parse,The following switch statement is missing a default case: switch (action)                          {                              //case SmugglerAction.Export:                              //	smugglerCounterApi.Options.Source.Url = url;                              //	smugglerCounterApi.Options.Source.CounterStoreId = counterStorageName;                              //	break;                              //case SmugglerAction.Import:                              //	smugglerCounterApi.Options.Destination.Url = url;                              //	smugglerCounterApi.Options.Destination.CounterStoreId = counterStorageName;                              //	break;                              //case SmugglerAction.Between:                              //	smugglerCounterApi.Options.Source.Url = url;                              //	smugglerCounterApi.Options.Destination.Url = url;                              //	smugglerCounterApi.Options.Source.CounterStoreId = counterStorageName;                              //	smugglerCounterApi.Options.Destination.CounterStoreId = counterStorageName2;                              //	break;                          }
